// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const CONTAINS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPLAIN = 57450
const EXTRACT = 57451
const EXTRACT_DURATION = 57452
const FALSE = 57453
const FAMILY = 57454
const FETCH = 57455
const FETCHVAL = 57456
const FETCHTEXT = 57457
const FETCHVAL_PATH = 57458
const FETCHTEXT_PATH = 57459
const FILTER = 57460
const FIRST = 57461
const FLOAT = 57462
const FLOAT4 = 57463
const FLOAT8 = 57464
const FLOORDIV = 57465
const FOLLOWING = 57466
const FOR = 57467
const FORCE_INDEX = 57468
const FOREIGN = 57469
const FROM = 57470
const FULL = 57471
const GRANT = 57472
const GRANTS = 57473
const GREATEST = 57474
const GROUP = 57475
const GROUPING = 57476
const HAVING = 57477
const HELP = 57478
const HIGH = 57479
const HOUR = 57480
const HAS_SOME = 57481
const HAS_ALL = 57482
const IMPORT = 57483
const INCREMENTAL = 57484
const IF = 57485
const IFNULL = 57486
const ILIKE = 57487
const IN = 57488
const INET = 57489
const INTERLEAVE = 57490
const INDEX = 57491
const INDEXES = 57492
const INITIALLY = 57493
const INNER = 57494
const INSERT = 57495
const INT = 57496
const INT2VECTOR = 57497
const INT2 = 57498
const INT4 = 57499
const INT8 = 57500
const INT64 = 57501
const INTEGER = 57502
const INTERSECT = 57503
const INTERVAL = 57504
const INTO = 57505
const IS = 57506
const ISOLATION = 57507
const JOB = 57508
const JOBS = 57509
const JOIN = 57510
const JSONB = 57511
const KEY = 57512
const KEYS = 57513
const KV = 57514
const LATERAL = 57515
const LC_CTYPE = 57516
const LC_COLLATE = 57517
const LEADING = 57518
const LEAST = 57519
const LEFT = 57520
const LEVEL = 57521
const LIKE = 57522
const LIMIT = 57523
const LOCAL = 57524
const LOCALTIME = 57525
const LOCALTIMESTAMP = 57526
const LOW = 57527
const LSHIFT = 57528
const MATCH = 57529
const MINUTE = 57530
const MONTH = 57531
const NAN = 57532
const NAME = 57533
const NAMES = 57534
const NATURAL = 57535
const NEXT = 57536
const NO = 57537
const NO_INDEX_JOIN = 57538
const NORMAL = 57539
const NOT = 57540
const NOTHING = 57541
const NULL = 57542
const NULLIF = 57543
const NULLS = 57544
const NUMERIC = 57545
const OF = 57546
const OFF = 57547
const OFFSET = 57548
const OID = 57549
const ON = 57550
const ONLY = 57551
const OPTIONS = 57552
const OR = 57553
const ORDER = 57554
const ORDINALITY = 57555
const OUT = 57556
const OUTER = 57557
const OVER = 57558
const OVERLAPS = 57559
const OVERLAY = 57560
const PARENT = 57561
const PARTIAL = 57562
const PARTITION = 57563
const PASSWORD = 57564
const PAUSE = 57565
const PLACING = 57566
const PLANS = 57567
const POSITION = 57568
const PRECEDING = 57569
const PRECISION = 57570
const PREPARE = 57571
const PRIMARY = 57572
const PRIORITY = 57573
const QUERIES = 57574
const QUERY = 57575
const RANGE = 57576
const READ = 57577
const REAL = 57578
const RECURSIVE = 57579
const REF = 57580
const REFERENCES = 57581
const REGCLASS = 57582
const REGPROC = 57583
const REGPROCEDURE = 57584
const REGNAMESPACE = 57585
const REGTYPE = 57586
const REMOVE_PATH = 57587
const RENAME = 57588
const REPEATABLE = 57589
const RELEASE = 57590
const RESET = 57591
const RESTORE = 57592
const RESTRICT = 57593
const RESUME = 57594
const RETURNING = 57595
const REVOKE = 57596
const RIGHT = 57597
const ROLLBACK = 57598
const ROLLUP = 57599
const ROW = 57600
const ROWS = 57601
const RSHIFT = 57602
const SAVEPOINT = 57603
const SCATTER = 57604
const SEARCH = 57605
const SECOND = 57606
const SELECT = 57607
const SEQUENCES = 57608
const SERIAL = 57609
const SERIALIZABLE = 57610
const SESSION = 57611
const SESSIONS = 57612
const SESSION_USER = 57613
const SET = 57614
const SETTING = 57615
const SETTINGS = 57616
const SHOW = 57617
const SIMILAR = 57618
const SIMPLE = 57619
const SMALLINT = 57620
const SMALLSERIAL = 57621
const SNAPSHOT = 57622
const SOME = 57623
const SPLIT = 57624
const SQL = 57625
const START = 57626
const STATUS = 57627
const STDIN = 57628
const STRICT = 57629
const STRING = 57630
const STORE = 57631
const STORING = 57632
const SUBSTRING = 57633
const SYMMETRIC = 57634
const SYSTEM = 57635
const TABLE = 57636
const TABLES = 57637
const TEMP = 57638
const TEMPLATE = 57639
const TEMPORARY = 57640
const TESTING_RANGES = 57641
const TESTING_RELOCATE = 57642
const TEXT = 57643
const THEN = 57644
const TIME = 57645
const TIMESTAMP = 57646
const TIMESTAMPTZ = 57647
const TO = 57648
const TRAILING = 57649
const TRACE = 57650
const TRANSACTION = 57651
const TREAT = 57652
const TRIM = 57653
const TRUE = 57654
const TRUNCATE = 57655
const TYPE = 57656
const UNBOUNDED = 57657
const UNCOMMITTED = 57658
const UNION = 57659
const UNIQUE = 57660
const UNKNOWN = 57661
const UPDATE = 57662
const UPSERT = 57663
const USE = 57664
const USER = 57665
const USERS = 57666
const USING = 57667
const UUID = 57668
const VALID = 57669
const VALIDATE = 57670
const VALUE = 57671
const VALUES = 57672
const VARCHAR = 57673
const VARIADIC = 57674
const VIEW = 57675
const VARYING = 57676
const WHEN = 57677
const WHERE = 57678
const WINDOW = 57679
const WITH = 57680
const WITHIN = 57681
const WITHOUT = 57682
const WRITE = 57683
const YEAR = 57684
const ZONE = 57685
const NOT_LA = 57686
const WITH_LA = 57687
const AS_LA = 57688
const CONTAINED_BY = 57689
const HAS_SOME_KEY = 57690
const HAS_ALL_KEYS = 57691
const POSTFIXOP = 57692
const UMINUS = 57693
const HELPTOKEN = 57694

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6571

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	372, 53,
	-2, 673,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	149, 525,
	-2, 0,
	-1, 61,
	93, 673,
	153, 673,
	320, 673,
	321, 673,
	-2, 0,
	-1, 71,
	104, 648,
	113, 648,
	161, 648,
	181, 648,
	206, 648,
	212, 648,
	317, 648,
	-2, 637,
	-1, 103,
	4, 675,
	20, 675,
	21, 675,
	23, 675,
	28, 675,
	33, 675,
	34, 675,
	35, 675,
	36, 675,
	37, 675,
	38, 675,
	39, 675,
	40, 675,
	41, 675,
	42, 675,
	44, 675,
	45, 675,
	46, 675,
	47, 675,
	48, 675,
	51, 675,
	52, 675,
	53, 675,
	55, 675,
	56, 675,
	60, 675,
	61, 675,
	62, 675,
	64, 675,
	66, 675,
	68, 675,
	69, 675,
	72, 675,
	73, 675,
	74, 675,
	82, 675,
	83, 675,
	84, 675,
	85, 675,
	86, 675,
	87, 675,
	88, 675,
	89, 675,
	91, 675,
	93, 675,
	95, 675,
	98, 675,
	99, 675,
	101, 675,
	105, 675,
	106, 675,
	107, 675,
	108, 675,
	109, 675,
	110, 675,
	118, 675,
	119, 675,
	120, 675,
	121, 675,
	122, 675,
	124, 675,
	126, 675,
	131, 675,
	132, 675,
	134, 675,
	137, 675,
	138, 675,
	141, 675,
	142, 675,
	143, 675,
	144, 675,
	147, 675,
	148, 675,
	150, 675,
	153, 675,
	154, 675,
	155, 675,
	156, 675,
	157, 675,
	158, 675,
	159, 675,
	160, 675,
	162, 675,
	165, 675,
	166, 675,
	167, 675,
	169, 675,
	170, 675,
	171, 675,
	172, 675,
	174, 675,
	175, 675,
	177, 675,
	179, 675,
	182, 675,
	185, 675,
	187, 675,
	188, 675,
	189, 675,
	190, 675,
	191, 675,
	192, 675,
	194, 675,
	195, 675,
	196, 675,
	197, 675,
	201, 675,
	202, 675,
	203, 675,
	204, 675,
	205, 675,
	207, 675,
	209, 675,
	210, 675,
	213, 675,
	214, 675,
	216, 675,
	218, 675,
	219, 675,
	220, 675,
	221, 675,
	222, 675,
	223, 675,
	225, 675,
	226, 675,
	227, 675,
	228, 675,
	229, 675,
	231, 675,
	232, 675,
	233, 675,
	234, 675,
	235, 675,
	236, 675,
	237, 675,
	238, 675,
	240, 675,
	241, 675,
	242, 675,
	243, 675,
	244, 675,
	246, 675,
	247, 675,
	248, 675,
	249, 675,
	250, 675,
	251, 675,
	252, 675,
	254, 675,
	256, 675,
	257, 675,
	258, 675,
	259, 675,
	261, 675,
	262, 675,
	263, 675,
	264, 675,
	266, 675,
	267, 675,
	268, 675,
	269, 675,
	270, 675,
	272, 675,
	273, 675,
	274, 675,
	275, 675,
	277, 675,
	278, 675,
	279, 675,
	280, 675,
	282, 675,
	283, 675,
	284, 675,
	285, 675,
	286, 675,
	287, 675,
	288, 675,
	289, 675,
	290, 675,
	291, 675,
	293, 675,
	295, 675,
	296, 675,
	297, 675,
	298, 675,
	299, 675,
	300, 675,
	301, 675,
	303, 675,
	304, 675,
	305, 675,
	308, 675,
	309, 675,
	310, 675,
	311, 675,
	313, 675,
	314, 675,
	315, 675,
	316, 675,
	319, 675,
	320, 675,
	321, 675,
	322, 675,
	324, 675,
	326, 675,
	327, 675,
	328, 675,
	329, 675,
	330, 675,
	331, 675,
	334, 675,
	339, 675,
	340, 675,
	341, 675,
	342, 675,
	343, 675,
	-2, 0,
	-1, 116,
	104, 647,
	113, 647,
	161, 647,
	181, 647,
	206, 647,
	212, 647,
	317, 647,
	-2, 640,
	-1, 121,
	1, 574,
	165, 574,
	231, 574,
	235, 574,
	371, 574,
	372, 574,
	-2, 0,
	-1, 123,
	1, 574,
	371, 574,
	372, 574,
	-2, 0,
	-1, 124,
	1, 574,
	371, 574,
	372, 574,
	-2, 0,
	-1, 125,
	1, 578,
	371, 578,
	372, 578,
	-2, 0,
	-1, 132,
	4, 681,
	5, 681,
	6, 681,
	7, 681,
	8, 681,
	9, 681,
	20, 681,
	21, 681,
	23, 681,
	28, 681,
	29, 681,
	33, 681,
	34, 681,
	35, 681,
	36, 681,
	37, 681,
	38, 681,
	39, 681,
	40, 681,
	41, 681,
	42, 681,
	44, 681,
	45, 681,
	46, 681,
	47, 681,
	48, 681,
	49, 681,
	50, 681,
	51, 681,
	52, 681,
	53, 681,
	55, 681,
	56, 681,
	58, 681,
	60, 681,
	61, 681,
	62, 681,
	64, 681,
	66, 681,
	68, 681,
	69, 681,
	71, 681,
	72, 681,
	73, 681,
	74, 681,
	76, 681,
	77, 681,
	78, 681,
	80, 681,
	81, 681,
	82, 681,
	83, 681,
	84, 681,
	85, 681,
	86, 681,
	87, 681,
	88, 681,
	89, 681,
	91, 681,
	93, 681,
	95, 681,
	98, 681,
	99, 681,
	101, 681,
	105, 681,
	106, 681,
	107, 681,
	108, 681,
	109, 681,
	110, 681,
	111, 681,
	112, 681,
	118, 681,
	119, 681,
	120, 681,
	121, 681,
	122, 681,
	124, 681,
	126, 681,
	129, 681,
	131, 681,
	132, 681,
	134, 681,
	137, 681,
	138, 681,
	141, 681,
	142, 681,
	143, 681,
	144, 681,
	145, 681,
	147, 681,
	148, 681,
	150, 681,
	152, 681,
	153, 681,
	154, 681,
	155, 681,
	156, 681,
	157, 681,
	158, 681,
	159, 681,
	160, 681,
	162, 681,
	164, 681,
	165, 681,
	166, 681,
	167, 681,
	168, 681,
	169, 681,
	170, 681,
	171, 681,
	172, 681,
	174, 681,
	175, 681,
	177, 681,
	178, 681,
	179, 681,
	180, 681,
	182, 681,
	185, 681,
	187, 681,
	188, 681,
	189, 681,
	190, 681,
	191, 681,
	192, 681,
	193, 681,
	194, 681,
	195, 681,
	196, 681,
	197, 681,
	198, 681,
	200, 681,
	201, 681,
	202, 681,
	203, 681,
	204, 681,
	205, 681,
	207, 681,
	210, 681,
	213, 681,
	214, 681,
	215, 681,
	216, 681,
	217, 681,
	218, 681,
	219, 681,
	220, 681,
	221, 681,
	222, 681,
	223, 681,
	225, 681,
	226, 681,
	227, 681,
	228, 681,
	229, 681,
	231, 681,
	232, 681,
	233, 681,
	234, 681,
	235, 681,
	236, 681,
	237, 681,
	238, 681,
	240, 681,
	241, 681,
	242, 681,
	243, 681,
	244, 681,
	246, 681,
	247, 681,
	248, 681,
	249, 681,
	250, 681,
	251, 681,
	252, 681,
	254, 681,
	255, 681,
	256, 681,
	257, 681,
	258, 681,
	259, 681,
	261, 681,
	262, 681,
	263, 681,
	264, 681,
	266, 681,
	267, 681,
	268, 681,
	269, 681,
	270, 681,
	271, 681,
	272, 681,
	273, 681,
	274, 681,
	275, 681,
	276, 681,
	277, 681,
	278, 681,
	279, 681,
	280, 681,
	282, 681,
	283, 681,
	284, 681,
	285, 681,
	286, 681,
	287, 681,
	288, 681,
	289, 681,
	290, 681,
	291, 681,
	293, 681,
	295, 681,
	296, 681,
	297, 681,
	298, 681,
	299, 681,
	300, 681,
	301, 681,
	303, 681,
	304, 681,
	305, 681,
	308, 681,
	309, 681,
	310, 681,
	311, 681,
	312, 681,
	313, 681,
	314, 681,
	315, 681,
	316, 681,
	319, 681,
	320, 681,
	321, 681,
	322, 681,
	323, 681,
	324, 681,
	326, 681,
	327, 681,
	328, 681,
	329, 681,
	330, 681,
	331, 681,
	334, 681,
	339, 681,
	340, 681,
	341, 681,
	342, 681,
	343, 681,
	344, 681,
	354, 681,
	359, 681,
	360, 681,
	361, 681,
	368, 681,
	374, 681,
	-2, 0,
	-1, 135,
	1, 53,
	372, 53,
	-2, 673,
	-1, 496,
	128, 1283,
	306, 1283,
	349, 1283,
	370, 1283,
	-2, 0,
	-1, 497,
	128, 1236,
	306, 1236,
	349, 1236,
	370, 1236,
	-2, 0,
	-1, 499,
	128, 1341,
	306, 1341,
	349, 1341,
	370, 1341,
	-2, 0,
	-1, 501,
	128, 1363,
	306, 1363,
	349, 1363,
	370, 1363,
	-2, 0,
	-1, 508,
	128, 1288,
	306, 1288,
	349, 1288,
	370, 1288,
	-2, 317,
	-1, 534,
	1, 394,
	367, 394,
	369, 394,
	371, 394,
	372, 394,
	-2, 0,
	-1, 535,
	1, 441,
	125, 441,
	367, 441,
	369, 441,
	371, 441,
	372, 441,
	-2, 0,
	-1, 541,
	1, 408,
	367, 408,
	369, 408,
	371, 408,
	372, 408,
	-2, 0,
	-1, 543,
	1, 412,
	367, 412,
	369, 412,
	371, 412,
	372, 412,
	-2, 0,
	-1, 546,
	1, 420,
	367, 420,
	369, 420,
	371, 420,
	372, 420,
	-2, 0,
	-1, 547,
	1, 425,
	367, 425,
	369, 425,
	371, 425,
	372, 425,
	-2, 0,
	-1, 550,
	1, 435,
	367, 435,
	369, 435,
	371, 435,
	372, 435,
	-2, 0,
	-1, 564,
	113, 683,
	181, 683,
	206, 683,
	-2, 643,
	-1, 567,
	113, 682,
	181, 682,
	206, 682,
	-2, 641,
	-1, 624,
	368, 1214,
	-2, 1207,
	-1, 625,
	368, 1215,
	-2, 1208,
	-1, 631,
	5, 861,
	368, 861,
	-2, 1415,
	-1, 656,
	5, 820,
	-2, 1384,
	-1, 657,
	5, 855,
	368, 855,
	-2, 1386,
	-1, 658,
	5, 830,
	-2, 1387,
	-1, 659,
	5, 829,
	-2, 1388,
	-1, 660,
	5, 855,
	368, 855,
	-2, 1391,
	-1, 661,
	5, 855,
	368, 855,
	-2, 1392,
	-1, 662,
	5, 856,
	-2, 1395,
	-1, 663,
	5, 812,
	-2, 1396,
	-1, 664,
	5, 812,
	-2, 1397,
	-1, 665,
	5, 837,
	-2, 1401,
	-1, 666,
	5, 822,
	-2, 1402,
	-1, 667,
	5, 823,
	-2, 1403,
	-1, 668,
	5, 813,
	-2, 1409,
	-1, 669,
	5, 814,
	-2, 1410,
	-1, 670,
	5, 815,
	-2, 1411,
	-1, 671,
	5, 816,
	-2, 1412,
	-1, 672,
	5, 817,
	-2, 1413,
	-1, 673,
	5, 818,
	-2, 1414,
	-1, 674,
	5, 812,
	-2, 1420,
	-1, 675,
	5, 821,
	-2, 1425,
	-1, 676,
	5, 819,
	-2, 1428,
	-1, 677,
	5, 853,
	368, 853,
	-2, 1430,
	-1, 678,
	5, 857,
	-2, 1433,
	-1, 679,
	5, 859,
	-2, 1434,
	-1, 680,
	5, 852,
	368, 852,
	-2, 1439,
	-1, 776,
	222, 671,
	-2, 518,
	-1, 780,
	208, 1211,
	-2, 0,
	-1, 815,
	1, 208,
	367, 208,
	369, 208,
	371, 208,
	372, 208,
	-2, 646,
	-1, 822,
	4, 1438,
	10, 1438,
	11, 1438,
	13, 1438,
	14, 1438,
	15, 1438,
	16, 1438,
	17, 1438,
	18, 1438,
	20, 1438,
	21, 1438,
	23, 1438,
	26, 1438,
	28, 1438,
	30, 1438,
	33, 1438,
	34, 1438,
	35, 1438,
	36, 1438,
	37, 1438,
	38, 1438,
	39, 1438,
	40, 1438,
	41, 1438,
	42, 1438,
	44, 1438,
	45, 1438,
	46, 1438,
	47, 1438,
	48, 1438,
	51, 1438,
	52, 1438,
	53, 1438,
	55, 1438,
	56, 1438,
	57, 1438,
	60, 1438,
	61, 1438,
	62, 1438,
	63, 1438,
	64, 1438,
	66, 1438,
	67, 1438,
	68, 1438,
	69, 1438,
	71, 1438,
	72, 1438,
	73, 1438,
	74, 1438,
	82, 1438,
	83, 1438,
	84, 1438,
	85, 1438,
	86, 1438,
	87, 1438,
	88, 1438,
	89, 1438,
	91, 1438,
	93, 1438,
	95, 1438,
	98, 1438,
	99, 1438,
	101, 1438,
	105, 1438,
	106, 1438,
	107, 1438,
	108, 1438,
	109, 1438,
	110, 1438,
	114, 1438,
	115, 1438,
	116, 1438,
	117, 1438,
	118, 1438,
	119, 1438,
	120, 1438,
	121, 1438,
	122, 1438,
	123, 1438,
	124, 1438,
	126, 1438,
	129, 1438,
	131, 1438,
	132, 1438,
	134, 1438,
	137, 1438,
	138, 1438,
	141, 1438,
	142, 1438,
	143, 1438,
	144, 1438,
	145, 1438,
	146, 1438,
	147, 1438,
	148, 1438,
	150, 1438,
	152, 1438,
	153, 1438,
	154, 1438,
	155, 1438,
	156, 1438,
	157, 1438,
	158, 1438,
	159, 1438,
	160, 1438,
	162, 1438,
	164, 1438,
	165, 1438,
	166, 1438,
	167, 1438,
	168, 1438,
	169, 1438,
	170, 1438,
	171, 1438,
	172, 1438,
	174, 1438,
	175, 1438,
	177, 1438,
	178, 1438,
	179, 1438,
	180, 1438,
	182, 1438,
	185, 1438,
	186, 1438,
	187, 1438,
	188, 1438,
	189, 1438,
	190, 1438,
	191, 1438,
	192, 1438,
	193, 1438,
	194, 1438,
	195, 1438,
	196, 1438,
	197, 1438,
	201, 1438,
	202, 1438,
	203, 1438,
	204, 1438,
	205, 1438,
	207, 1438,
	210, 1438,
	211, 1438,
	213, 1438,
	214, 1438,
	216, 1438,
	218, 1438,
	219, 1438,
	220, 1438,
	221, 1438,
	222, 1438,
	223, 1438,
	225, 1438,
	226, 1438,
	227, 1438,
	228, 1438,
	229, 1438,
	231, 1438,
	232, 1438,
	233, 1438,
	234, 1438,
	235, 1438,
	236, 1438,
	237, 1438,
	238, 1438,
	240, 1438,
	241, 1438,
	242, 1438,
	243, 1438,
	244, 1438,
	245, 1438,
	246, 1438,
	247, 1438,
	248, 1438,
	249, 1438,
	250, 1438,
	251, 1438,
	252, 1438,
	254, 1438,
	255, 1438,
	256, 1438,
	257, 1438,
	258, 1438,
	259, 1438,
	260, 1438,
	261, 1438,
	262, 1438,
	263, 1438,
	264, 1438,
	266, 1438,
	267, 1438,
	268, 1438,
	269, 1438,
	270, 1438,
	272, 1438,
	273, 1438,
	274, 1438,
	275, 1438,
	276, 1438,
	277, 1438,
	278, 1438,
	279, 1438,
	280, 1438,
	282, 1438,
	283, 1438,
	284, 1438,
	285, 1438,
	286, 1438,
	287, 1438,
	288, 1438,
	289, 1438,
	290, 1438,
	291, 1438,
	293, 1438,
	295, 1438,
	296, 1438,
	297, 1438,
	298, 1438,
	299, 1438,
	300, 1438,
	301, 1438,
	303, 1438,
	304, 1438,
	305, 1438,
	308, 1438,
	309, 1438,
	310, 1438,
	311, 1438,
	313, 1438,
	314, 1438,
	315, 1438,
	316, 1438,
	319, 1438,
	320, 1438,
	321, 1438,
	322, 1438,
	324, 1438,
	326, 1438,
	327, 1438,
	328, 1438,
	329, 1438,
	330, 1438,
	331, 1438,
	334, 1438,
	339, 1438,
	340, 1438,
	341, 1438,
	342, 1438,
	343, 1438,
	344, 1438,
	345, 1438,
	347, 1438,
	348, 1438,
	349, 1438,
	350, 1438,
	351, 1438,
	352, 1438,
	353, 1438,
	354, 1438,
	356, 1438,
	357, 1438,
	358, 1438,
	359, 1438,
	360, 1438,
	361, 1438,
	362, 1438,
	363, 1438,
	364, 1438,
	366, 1438,
	369, 1438,
	370, 1438,
	373, 1438,
	374, 1438,
	-2, 0,
	-1, 836,
	128, 1341,
	306, 1341,
	349, 1341,
	370, 1341,
	-2, 0,
	-1, 853,
	128, 1363,
	306, 1363,
	349, 1363,
	370, 1363,
	-2, 0,
	-1, 854,
	165, 586,
	231, 586,
	235, 586,
	-2, 305,
	-1, 923,
	113, 682,
	181, 682,
	206, 682,
	-2, 644,
	-1, 1002,
	104, 648,
	113, 648,
	161, 648,
	181, 648,
	206, 648,
	212, 648,
	317, 648,
	-2, 990,
	-1, 1012,
	368, 1191,
	-2, 1179,
	-1, 1030,
	369, 1103,
	-2, 0,
	-1, 1054,
	165, 586,
	231, 586,
	235, 586,
	-2, 581,
	-1, 1082,
	369, 1103,
	-2, 0,
	-1, 1086,
	104, 648,
	113, 648,
	161, 648,
	181, 648,
	206, 648,
	212, 648,
	317, 648,
	-2, 744,
	-1, 1310,
	165, 586,
	231, 586,
	235, 586,
	-2, 307,
	-1, 1408,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 896,
	-1, 1409,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 897,
	-1, 1410,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 898,
	-1, 1411,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 899,
	-1, 1412,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 900,
	-1, 1413,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 901,
	-1, 1414,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 902,
	-1, 1415,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 903,
	-1, 1424,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 912,
	-1, 1425,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 913,
	-1, 1426,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 914,
	-1, 1429,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 919,
	-1, 1435,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 921,
	-1, 1437,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 925,
	-1, 1438,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 926,
	-1, 1439,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 927,
	-1, 1440,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 928,
	-1, 1509,
	128, 1114,
	368, 1214,
	-2, 1207,
	-1, 1510,
	128, 1115,
	-2, 1380,
	-1, 1511,
	128, 1116,
	-2, 1287,
	-1, 1512,
	128, 1117,
	-2, 1251,
	-1, 1513,
	128, 1118,
	-2, 1267,
	-1, 1514,
	128, 1119,
	-2, 1286,
	-1, 1515,
	128, 1120,
	-2, 1338,
	-1, 1591,
	1, 745,
	71, 745,
	104, 745,
	113, 745,
	129, 745,
	133, 745,
	135, 745,
	152, 745,
	161, 745,
	168, 745,
	178, 745,
	181, 745,
	193, 745,
	206, 745,
	208, 745,
	212, 745,
	253, 745,
	255, 745,
	317, 745,
	325, 745,
	336, 745,
	337, 745,
	346, 745,
	367, 745,
	369, 745,
	371, 745,
	372, 745,
	373, 745,
	-2, 744,
	-1, 1731,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 920,
	-1, 1732,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 922,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 923,
	-1, 1755,
	217, 1074,
	-2, 1076,
	-1, 1980,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 924,
	-1, 1985,
	164, 0,
	-2, 940,
	-1, 1994,
	217, 1075,
	-2, 1077,
	-1, 2036,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 967,
	-1, 2037,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 968,
	-1, 2038,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 969,
	-1, 2042,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 973,
	-1, 2043,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 974,
	-1, 2044,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 975,
	-1, 2168,
	164, 0,
	-2, 941,
	-1, 2171,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 944,
	-1, 2172,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 946,
	-1, 2288,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 945,
	-1, 2289,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 947,
	-1, 2296,
	164, 0,
	-2, 976,
	-1, 2373,
	164, 0,
	-2, 977,
	-1, 2450,
	36, 0,
	145, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 1383,
}

const sqlPrivate = 57344

const sqlLast = 42199

var sqlAct = [...]int{

	625, 2124, 2449, 2458, 2459, 2322, 1654, 2497, 2424, 2460,
	1662, 1209, 568, 1962, 2013, 2448, 2378, 615, 1304, 1634,
	2269, 1725, 874, 584, 2134, 2222, 2156, 70, 623, 2158,
	728, 1928, 1305, 770, 2095, 2302, 1930, 622, 1251, 2096,
	173, 601, 1651, 1633, 173, 2236, 1216, 1080, 1821, 1586,
	2150, 1212, 173, 1848, 1637, 1869, 1084, 1663, 1936, 1595,
	1604, 173, 1252, 1638, 1587, 1627, 173, 173, 1820, 1063,
	173, 2202, 2066, 173, 1856, 1387, 1008, 576, 115, 1464,
	1766, 173, 1382, 1465, 1721, 857, 926, 439, 1205, 1489,
	1709, 1092, 1473, 454, 25, 1064, 1115, 595, 1335, 1452,
	1331, 1094, 1538, 1449, 856, 436, 507, 1044, 1635, 1483,
	734, 805, 1040, 876, 816, 802, 1641, 1229, 1656, 795,
	1573, 997, 737, 1560, 1071, 594, 487, 173, 173, 716,
	1505, 116, 164, 927, 1334, 173, 117, 617, 1054, 115,
	925, 465, 500, 1223, 792, 169, 573, 1466, 714, 1053,
	2237, 931, 2080, 528, 1754, 2081, 1655, 572, 572, 1081,
	1231, 173, 173, 173, 173, 1978, 1231, 1231, 173, 173,
	2493, 2474, 2470, 2469, 1114, 2235, 1677, 1677, 1677, 2466,
	2446, 2445, 600, 1114, 1692, 1692, 2419, 2414, 758, 1628,
	1685, 2283, 2410, 1945, 2420, 1946, 1114, 2402, 567, 479,
	2375, 2235, 2353, 1758, 1685, 618, 2235, 39, 2350, 1759,
	2348, 2333, 1114, 115, 2235, 1114, 2069, 2332, 1562, 582,
	42, 2235, 942, 943, 2310, 1111, 393, 2307, 1114, 25,
	2290, 1114, 2257, 2255, 1685, 2234, 1677, 1677, 2215, 2235,
	1692, 720, 1114, 721, 38, 945, 2170, 565, 2283, 504,
	1685, 1628, 564, 1089, 2149, 39, 121, 2144, 1632, 1791,
	1792, 1632, 2076, 1989, 2069, 1561, 2077, 1677, 42, 944,
	1956, 742, 746, 577, 1918, 752, 718, 1917, 1692, 1845,
	1838, 1114, 123, 1114, 1839, 1973, 1836, 1593, 1835, 43,
	1677, 48, 1677, 1834, 2049, 1696, 1684, 1677, 174, 1677,
	1685, 1676, 1631, 1567, 1991, 1677, 1632, 1566, 1791, 1792,
	1114, 1244, 51, 1918, 63, 1245, 53, 735, 1677, 1765,
	59, 1724, 1707, 124, 942, 943, 1313, 60, 1058, 61,
	1468, 756, 838, 135, 2238, 950, 835, 834, 1659, 833,
	1486, 832, 831, 744, 748, 830, 754, 945, 829, 828,
	827, 62, 942, 943, 826, 972, 973, 974, 982, 983,
	984, 1806, 63, 1232, 825, 824, 942, 943, 975, 1232,
	1232, 944, 1797, 722, 719, 945, 1791, 1792, 986, 560,
	559, 1332, 558, 526, 525, 524, 523, 522, 731, 945,
	521, 1487, 683, 520, 519, 132, 64, 518, 965, 944,
	517, 173, 516, 173, 173, 964, 173, 515, 514, 961,
	513, 173, 512, 944, 511, 510, 495, 173, 494, 493,
	492, 1797, 119, 66, 134, 67, 681, 491, 427, 426,
	173, 173, 173, 173, 173, 1807, 425, 950, 132, 819,
	1945, 1488, 1485, 424, 64, 460, 423, 408, 99, 575,
	65, 407, 399, 809, 398, 397, 967, 968, 969, 970,
	133, 173, 396, 1561, 389, 950, 573, 134, 388, 72,
	119, 66, 966, 67, 173, 68, 158, 125, 157, 950,
	156, 155, 69, 762, 1807, 1237, 132, 979, 987, 1797,
	173, 1230, 1366, 80, 154, 153, 99, 152, 118, 151,
	173, 1864, 150, 133, 149, 122, 985, 774, 148, 1808,
	778, 126, 147, 132, 146, 134, 145, 1490, 127, 144,
	143, 142, 977, 141, 140, 132, 139, 794, 965, 138,
	137, 819, 136, 1085, 103, 1338, 798, 798, 1502, 1500,
	1498, 118, 134, 120, 1496, 769, 869, 2492, 2465, 2447,
	799, 133, 817, 976, 134, 2429, 2370, 938, 1808, 126,
	2351, 2276, 173, 872, 2201, 2200, 127, 2196, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 924, 133, 2195,
	839, 729, 2188, 2187, 1791, 1792, 126, 971, 2186, 118,
	133, 2182, 4, 127, 2181, 1484, 2180, 2179, 126, 748,
	2173, 2155, 966, 2063, 2058, 127, 2057, 867, 1793, 1794,
	1795, 1796, 1798, 1799, 754, 2056, 1658, 1920, 980, 1999,
	1916, 1690, 1960, 1876, 1872, 1843, 1840, 573, 118, 1248,
	1828, 1819, 1790, 1787, 1786, 1784, 1771, 1770, 1755, 1591,
	854, 938, 851, 1460, 1083, 923, 767, 762, 1016, 937,
	1009, 1082, 1000, 1215, 1802, 1800, 1801, 1793, 1794, 1795,
	1796, 1798, 1799, 2015, 2437, 2405, 1687, 2399, 2398, 2397,
	2389, 2387, 922, 946, 947, 948, 949, 951, 952, 2365,
	2364, 2363, 2381, 870, 2319, 2298, 978, 2284, 2263, 956,
	957, 963, 962, 958, 959, 960, 981, 1797, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 2241, 565, 2193,
	1009, 2132, 132, 564, 173, 2197, 173, 948, 949, 951,
	952, 2275, 934, 935, 2282, 1793, 1794, 1795, 1796, 1798,
	1799, 2130, 939, 1333, 1720, 2129, 2127, 820, 2104, 173,
	173, 134, 1719, 2103, 748, 2084, 2072, 1004, 1984, 1907,
	1902, 1889, 1062, 1461, 1069, 1888, 819, 173, 1874, 1844,
	1818, 1012, 1780, 1118, 1779, 1776, 573, 1751, 1746, 173,
	1454, 1045, 1046, 1042, 1043, 942, 943, 133, 1048, 1578,
	1550, 173, 1049, 1494, 1208, 126, 730, 173, 1112, 173,
	1214, 173, 127, 1061, 1067, 173, 1052, 1038, 945, 1037,
	588, 1036, 1035, 1207, 1034, 1033, 1032, 1031, 1030, 1029,
	1028, 115, 1027, 1026, 1025, 118, 1024, 1023, 1022, 1021,
	1020, 1013, 944, 1001, 1000, 850, 842, 813, 2175, 820,
	2154, 2079, 2075, 1220, 1757, 1958, 1889, 173, 173, 1079,
	1057, 1579, 998, 1083, 819, 1695, 173, 1102, 1931, 173,
	1791, 1792, 2286, 866, 1055, 2285, 2279, 2082, 1947, 1628,
	1085, 1087, 920, 1862, 1059, 821, 1050, 1100, 1842, 1963,
	1118, 1051, 1841, 1730, 682, 1486, 630, 863, 1319, 173,
	1018, 1213, 2303, 1655, 173, 1101, 768, 2016, 1694, 173,
	173, 1762, 173, 1474, 173, 1041, 173, 794, 173, 1941,
	914, 2490, 1113, 2091, 413, 1501, 1499, 1497, 2432, 173,
	1095, 1495, 1096, 1681, 2409, 173, 173, 1234, 2489, 2249,
	1236, 735, 1090, 1605, 1239, 1970, 1487, 1249, 1697, 1323,
	1322, 1222, 1332, 1329, 1225, 1795, 1796, 1798, 1799, 915,
	709, 173, 1095, 2260, 1096, 1118, 1083, 730, 428, 707,
	711, 1206, 906, 2343, 2342, 2341, 1095, 821, 1096, 705,
	1523, 1242, 2340, 2119, 414, 702, 1339, 401, 2117, 748,
	1246, 1224, 2088, 1224, 2087, 1554, 1488, 1485, 1306, 851,
	1247, 115, 1959, 1597, 1775, 1340, 1774, 1773, 1097, 2115,
	1772, 1733, 1310, 1680, 1624, 1620, 1608, 1618, 1308, 1436,
	1336, 1324, 1056, 1688, 755, 1388, 1395, 1553, 1397, 1354,
	1320, 1015, 484, 1652, 1369, 1326, 1364, 1363, 1597, 562,
	1097, 1347, 1109, 2122, 1596, 2123, 159, 2324, 573, 1451,
	432, 864, 463, 573, 1097, 2408, 1913, 474, 1108, 1365,
	1451, 1396, 1203, 685, 1343, 2443, 1207, 1226, 1258, 405,
	684, 1490, 1490, 2481, 820, 1938, 900, 173, 1106, 173,
	1368, 1119, 173, 565, 2505, 1367, 565, 565, 1378, 1328,
	2009, 1379, 1380, 173, 865, 1231, 1107, 2230, 2462, 2106,
	466, 1559, 1118, 1909, 1433, 173, 1471, 1298, 1904, 173,
	941, 849, 173, 1469, 901, 431, 173, 571, 1307, 1607,
	173, 1791, 1792, 471, 1105, 173, 2392, 1327, 162, 467,
	1939, 173, 1118, 2231, 1533, 173, 573, 913, 1462, 1791,
	1792, 1459, 1809, 1810, 1811, 2416, 1474, 1103, 2489, 952,
	1484, 416, 415, 1344, 1971, 2167, 1039, 1580, 1647, 1348,
	468, 1349, 820, 1350, 2294, 1351, 1490, 1352, 1258, 1258,
	2417, 1791, 1792, 1004, 570, 1938, 1609, 1611, 1516, 1598,
	2347, 1476, 1362, 470, 1358, 1360, 1584, 1900, 1119, 2463,
	1722, 1723, 1806, 163, 1508, 1508, 1521, 466, 1581, 1969,
	1541, 1093, 821, 1556, 1545, 1546, 1548, 1606, 1557, 1120,
	1386, 1565, 879, 1431, 1434, 1616, 1575, 1576, 1571, 2480,
	471, 1622, 995, 919, 1799, 572, 467, 1778, 1626, 173,
	1614, 1087, 1601, 1574, 1797, 1619, 173, 1098, 1590, 572,
	2162, 2226, 1625, 2227, 462, 930, 2464, 173, 1430, 173,
	2113, 173, 1797, 860, 173, 1292, 173, 468, 173, 173,
	430, 173, 173, 1119, 463, 2461, 819, 703, 2325, 1098,
	173, 2006, 2107, 2229, 713, 735, 703, 712, 905, 400,
	470, 1675, 2232, 1098, 1797, 1594, 704, 2506, 2488, 433,
	821, 735, 703, 1812, 1592, 469, 1458, 1807, 1232, 429,
	910, 1456, 748, 406, 1333, 1330, 422, 748, 402, 1735,
	2500, 627, 466, 754, 1743, 1807, 1120, 1912, 403, 861,
	1450, 2007, 2479, 862, 2486, 871, 417, 553, 1070, 1741,
	569, 563, 887, 2268, 1649, 471, 1342, 1657, 160, 1657,
	845, 467, 115, 2384, 1432, 581, 1570, 1807, 115, 473,
	472, 837, 2045, 2511, 2335, 1292, 1292, 1669, 1683, 1118,
	798, 2228, 798, 2334, 1661, 2317, 911, 173, 390, 1672,
	1678, 1808, 468, 1670, 1673, 1671, 2191, 161, 1682, 817,
	1679, 940, 848, 173, 173, 173, 1074, 173, 1689, 1808,
	1691, 1120, 469, 2245, 2090, 470, 1885, 1490, 1881, 1700,
	1119, 1650, 1447, 1221, 942, 943, 173, 554, 1738, 1077,
	1210, 1702, 2248, 1074, 1046, 1311, 1049, 1445, 1739, 2247,
	912, 1808, 1744, 2005, 2425, 1072, 1357, 945, 1870, 1666,
	1119, 553, 1703, 1043, 1042, 1075, 1077, 1698, 1314, 1374,
	754, 754, 880, 855, 1701, 2135, 2270, 472, 2318, 581,
	1073, 944, 1572, 115, 2046, 1708, 772, 2498, 929, 1891,
	2047, 1890, 1075, 2510, 771, 1858, 1728, 1802, 1800, 1801,
	1793, 1794, 1795, 1796, 1798, 1799, 1803, 1804, 1805, 1859,
	881, 1712, 929, 878, 2192, 1802, 1800, 1801, 1793, 1794,
	1795, 1796, 1798, 1799, 1718, 1714, 1441, 1716, 1871, 1318,
	1569, 2244, 573, 1568, 1442, 166, 1443, 469, 860, 1764,
	1448, 554, 1076, 2499, 1375, 555, 1070, 950, 1800, 1801,
	1793, 1794, 1795, 1796, 1798, 1799, 928, 2246, 1120, 418,
	1740, 570, 391, 482, 2501, 780, 2125, 1742, 888, 1076,
	1911, 2261, 459, 33, 2315, 2203, 476, 1316, 942, 943,
	928, 930, 2067, 1493, 1736, 1457, 791, 1734, 1120, 1317,
	909, 898, 472, 2297, 820, 1713, 754, 1715, 2190, 748,
	419, 945, 789, 1750, 1074, 2316, 573, 2121, 860, 1822,
	965, 1983, 1857, 173, 1118, 1761, 896, 1846, 1729, 173,
	173, 3, 1852, 173, 556, 944, 1914, 1077, 173, 392,
	420, 173, 421, 1785, 1745, 1693, 860, 458, 32, 173,
	1853, 457, 29, 1072, 1630, 173, 173, 173, 1444, 555,
	894, 173, 1749, 1075, 173, 1446, 557, 760, 1623, 1752,
	173, 173, 173, 173, 173, 761, 1617, 892, 1073, 173,
	890, 173, 456, 76, 861, 173, 1768, 1769, 862, 918,
	1866, 455, 75, 173, 966, 610, 1865, 1119, 1825, 1826,
	1827, 950, 1861, 173, 917, 173, 1492, 173, 1875, 843,
	173, 1823, 861, 757, 173, 1355, 862, 1847, 33, 173,
	1851, 173, 1346, 904, 1882, 1886, 908, 897, 173, 452,
	21, 1019, 821, 453, 22, 170, 1817, 481, 556, 394,
	1076, 173, 819, 1541, 1541, 1541, 573, 409, 1830, 1919,
	475, 1921, 895, 819, 173, 1877, 434, 790, 884, 1886,
	2457, 477, 170, 787, 965, 485, 1899, 740, 490, 1901,
	557, 451, 27, 788, 1955, 1906, 509, 1291, 2422, 1257,
	1943, 2219, 2111, 32, 701, 1964, 893, 29, 2109, 173,
	2089, 1377, 954, 946, 947, 948, 949, 951, 952, 1922,
	1927, 1934, 1925, 891, 1653, 735, 889, 1940, 1957, 450,
	19, 735, 735, 1923, 1646, 735, 1948, 1241, 76, 448,
	18, 1240, 717, 717, 1238, 1120, 1996, 75, 449, 17,
	394, 1954, 443, 14, 444, 15, 1235, 1878, 966, 173,
	2001, 2002, 2003, 1968, 1965, 1986, 903, 1233, 1949, 1950,
	1110, 1951, 1952, 1966, 1967, 1104, 394, 394, 750, 394,
	1099, 1903, 1974, 170, 759, 21, 1972, 1976, 1258, 22,
	1929, 725, 2358, 442, 13, 1915, 1850, 1291, 1291, 1257,
	1257, 2490, 1854, 1855, 883, 932, 1860, 2281, 2280, 786,
	1524, 726, 1926, 1726, 1992, 1990, 1995, 1337, 2151, 447,
	11, 1206, 1258, 461, 2360, 1388, 2020, 27, 706, 708,
	1206, 1613, 2143, 1597, 1388, 2025, 2394, 2022, 2019, 1612,
	173, 2017, 1119, 2008, 2010, 2011, 173, 2024, 2238, 2051,
	441, 9, 882, 446, 7, 173, 173, 946, 947, 948,
	949, 951, 952, 445, 6, 19, 1294, 2055, 440, 5,
	2052, 1258, 1597, 1293, 2085, 18, 1727, 2372, 1610, 933,
	2204, 936, 2050, 1621, 17, 727, 1615, 2102, 14, 2421,
	15, 1977, 483, 2266, 2068, 2078, 1660, 1648, 2101, 173,
	1645, 173, 115, 1558, 2120, 2070, 1309, 2100, 173, 2083,
	2071, 819, 2065, 1250, 2496, 2131, 942, 943, 942, 943,
	2086, 2509, 1791, 1792, 942, 943, 173, 173, 2093, 13,
	2309, 2145, 1258, 2137, 1705, 1704, 2209, 2153, 2064, 945,
	2114, 579, 2012, 553, 173, 1705, 2136, 2128, 1961, 1867,
	1837, 2148, 1706, 2126, 173, 11, 1555, 2059, 1552, 1118,
	820, 581, 1551, 944, 2138, 944, 1294, 1294, 1258, 1258,
	1120, 820, 2139, 1293, 1293, 1292, 2140, 1258, 1258, 2164,
	2147, 1482, 1006, 2146, 2177, 2004, 9, 2152, 2141, 7,
	1924, 1016, 1014, 2110, 580, 2112, 173, 916, 907, 6,
	902, 899, 885, 2169, 5, 847, 1312, 561, 2323, 1292,
	1258, 464, 1345, 886, 1863, 1577, 509, 2415, 776, 509,
	2183, 781, 735, 554, 1777, 2377, 784, 2293, 1491, 1017,
	2116, 52, 394, 2098, 604, 2118, 2220, 2092, 1640, 1639,
	1121, 1321, 626, 1507, 1389, 509, 509, 394, 806, 759,
	173, 2189, 700, 173, 628, 2165, 1255, 629, 1292, 1256,
	1047, 616, 1253, 1118, 173, 173, 814, 1664, 173, 173,
	173, 1325, 2207, 1455, 1472, 1760, 509, 1010, 596, 608,
	607, 1470, 841, 1868, 2214, 173, 1937, 2274, 821, 509,
	173, 1373, 173, 2074, 173, 173, 173, 1717, 173, 821,
	173, 2102, 819, 2208, 2243, 846, 1370, 1933, 1666, 735,
	173, 173, 2101, 2213, 1254, 509, 2210, 819, 2242, 1292,
	2259, 2100, 2206, 2108, 2239, 2102, 404, 1788, 812, 2264,
	2102, 555, 1530, 2218, 1522, 1518, 2101, 921, 1068, 2272,
	996, 2101, 2262, 1665, 868, 2100, 1944, 2267, 1686, 1060,
	2100, 1381, 2271, 724, 2265, 1292, 1292, 723, 1315, 2211,
	1699, 2273, 989, 988, 1292, 1292, 710, 2287, 2386, 859,
	1258, 2292, 858, 1211, 1884, 2504, 2393, 394, 2105, 2431,
	1850, 131, 128, 130, 2278, 129, 1910, 79, 31, 30,
	98, 97, 96, 95, 94, 93, 92, 1292, 91, 90,
	173, 89, 173, 88, 1118, 173, 87, 86, 578, 820,
	556, 85, 2299, 173, 1254, 1254, 84, 83, 2277, 1118,
	82, 81, 2306, 505, 502, 78, 77, 28, 24, 102,
	1524, 1524, 735, 2102, 23, 74, 73, 26, 2327, 16,
	10, 2329, 557, 20, 2101, 2308, 57, 58, 56, 173,
	55, 1207, 819, 2100, 54, 2326, 173, 1119, 2345, 12,
	50, 2102, 49, 2311, 173, 173, 819, 819, 47, 46,
	45, 44, 2101, 8, 2356, 2359, 2252, 101, 2349, 41,
	2256, 2100, 2344, 40, 173, 2357, 2371, 2355, 100, 173,
	2361, 2367, 2337, 2366, 113, 110, 173, 112, 2368, 2369,
	2313, 109, 111, 2205, 2388, 114, 1524, 1524, 1524, 106,
	107, 108, 105, 104, 37, 2328, 36, 2374, 2382, 35,
	34, 173, 173, 2, 2391, 1, 0, 0, 173, 490,
	0, 717, 2305, 2403, 2401, 0, 819, 821, 2380, 2404,
	2352, 173, 2383, 0, 0, 819, 819, 0, 2338, 2339,
	0, 0, 0, 0, 394, 394, 2390, 1292, 2406, 0,
	0, 1119, 2407, 2412, 2413, 0, 0, 1069, 173, 2331,
	173, 573, 170, 173, 0, 1118, 0, 0, 0, 1258,
	0, 0, 0, 2438, 394, 1120, 2440, 0, 2439, 2427,
	1747, 1748, 2428, 0, 0, 2321, 1219, 2444, 0, 0,
	820, 173, 394, 2102, 394, 0, 394, 0, 2442, 0,
	1227, 0, 0, 2454, 2101, 820, 2456, 2455, 173, 0,
	2441, 2473, 2467, 2100, 173, 0, 0, 0, 0, 2471,
	0, 2354, 0, 2478, 2475, 1258, 0, 2472, 173, 2476,
	2477, 1791, 1792, 0, 0, 2487, 0, 0, 0, 2485,
	0, 0, 509, 170, 0, 0, 2491, 1291, 0, 1257,
	2494, 170, 2495, 0, 509, 0, 1814, 1815, 1816, 0,
	0, 2433, 0, 0, 0, 2503, 2507, 1243, 2502, 2508,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 1120,
	0, 1291, 0, 1257, 509, 0, 0, 0, 0, 509,
	2418, 0, 1119, 0, 170, 509, 0, 509, 0, 509,
	2400, 509, 0, 509, 0, 1524, 1524, 1119, 0, 0,
	0, 0, 0, 0, 1356, 2434, 2435, 2436, 821, 0,
	509, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	1291, 0, 1257, 821, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 1797, 2430, 509, 0, 0, 0,
	0, 0, 0, 0, 820, 820, 1292, 0, 0, 0,
	0, 0, 0, 0, 1524, 1524, 1524, 1524, 1524, 1524,
	1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
	1524, 1524, 1524, 0, 1524, 0, 0, 0, 586, 0,
	0, 1291, 0, 1257, 0, 0, 1666, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1807, 0, 0,
	0, 0, 1292, 0, 0, 0, 1294, 0, 0, 0,
	1120, 0, 0, 1293, 820, 0, 0, 1291, 1291, 1257,
	1257, 0, 0, 820, 820, 1120, 1291, 1291, 1257, 1257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 1293, 0, 0,
	0, 1292, 490, 1119, 717, 1981, 1982, 759, 821, 1291,
	0, 1257, 0, 0, 38, 0, 0, 0, 394, 0,
	0, 1808, 821, 821, 0, 39, 0, 0, 0, 0,
	1589, 0, 0, 0, 394, 0, 0, 394, 42, 1294,
	0, 1602, 0, 0, 0, 394, 1293, 0, 0, 0,
	394, 0, 0, 0, 0, 0, 394, 0, 0, 0,
	1629, 48, 0, 0, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 0, 2048, 0, 0, 0, 0, 0,
	59, 0, 821, 0, 942, 943, 0, 60, 0, 61,
	1294, 821, 821, 0, 0, 0, 0, 1293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 1801,
	1793, 1794, 1795, 1796, 1798, 1799, 0, 0, 0, 0,
	0, 1120, 63, 0, 0, 0, 1294, 1294, 0, 0,
	0, 944, 0, 1293, 1293, 1294, 1294, 0, 0, 0,
	0, 0, 1293, 1293, 1636, 0, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 0, 0, 0, 0, 1291,
	0, 1257, 394, 0, 1668, 0, 509, 0, 1294, 509,
	0, 509, 0, 394, 394, 1293, 1674, 759, 0, 0,
	0, 0, 0, 0, 0, 1602, 0, 0, 0, 763,
	765, 0, 0, 0, 1254, 0, 0, 950, 0, 0,
	0, 0, 0, 0, 64, 0, 605, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 0, 2230, 0, 0, 2223, 0, 1254, 39,
	119, 66, 0, 67, 2221, 0, 0, 0, 0, 2225,
	0, 0, 42, 0, 0, 0, 132, 0, 0, 0,
	1711, 0, 0, 460, 0, 0, 99, 0, 0, 2231,
	965, 0, 0, 0, 0, 48, 0, 0, 71, 0,
	0, 0, 0, 840, 0, 134, 0, 1254, 0, 844,
	0, 2224, 1710, 0, 0, 0, 0, 0, 0, 0,
	0, 1524, 0, 0, 59, 0, 0, 0, 394, 394,
	394, 60, 394, 61, 0, 0, 586, 942, 943, 0,
	0, 133, 0, 982, 983, 984, 0, 0, 0, 126,
	0, 394, 566, 0, 0, 574, 127, 0, 1294, 0,
	945, 0, 1524, 986, 966, 1293, 63, 0, 1254, 0,
	0, 736, 71, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 944, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 2226, 1291, 2227,
	1257, 0, 0, 0, 1254, 1254, 0, 0, 0, 0,
	0, 0, 0, 1254, 1254, 0, 0, 990, 991, 992,
	993, 994, 0, 0, 0, 0, 0, 1003, 1524, 2229,
	0, 0, 0, 0, 0, 0, 0, 1011, 2232, 0,
	0, 967, 968, 969, 970, 0, 1254, 0, 64, 0,
	950, 0, 0, 0, 1291, 0, 1257, 0, 0, 0,
	0, 953, 954, 946, 947, 948, 949, 951, 952, 0,
	0, 0, 979, 987, 119, 66, 0, 67, 0, 0,
	0, 2296, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 1353, 0, 0, 460, 0, 0,
	99, 0, 0, 1291, 0, 1257, 0, 977, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 2228, 0, 134,
	0, 0, 2320, 0, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 0, 394, 394, 0, 0, 394, 0,
	0, 0, 0, 1589, 0, 0, 1589, 0, 0, 0,
	0, 1065, 1065, 0, 1873, 133, 0, 0, 586, 0,
	394, 1879, 1880, 126, 0, 0, 1602, 1294, 0, 1887,
	127, 0, 971, 0, 1293, 1892, 1893, 1895, 1897, 1898,
	0, 0, 0, 0, 394, 0, 1905, 966, 2373, 0,
	1908, 0, 0, 118, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 980, 0, 0, 1254, 0, 1219, 0,
	1219, 0, 509, 0, 0, 394, 0, 0, 0, 1932,
	0, 0, 0, 1294, 394, 0, 1942, 0, 0, 0,
	1293, 0, 0, 394, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1710, 0, 0, 0,
	38, 0, 0, 0, 38, 0, 0, 0, 0, 1710,
	0, 39, 0, 0, 0, 39, 0, 0, 0, 0,
	0, 978, 1294, 0, 42, 574, 0, 0, 42, 1293,
	0, 981, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 586, 586, 394, 0, 0, 48, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	59, 0, 0, 60, 0, 61, 0, 60, 0, 61,
	0, 0, 0, 0, 2014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1371, 0, 1376, 0,
	0, 0, 0, 0, 1383, 0, 0, 0, 63, 0,
	0, 0, 63, 0, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 0, 1435, 0, 1437,
	1438, 1439, 1440, 566, 0, 1254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 1463, 0, 0, 0,
	0, 1589, 0, 1003, 999, 0, 1002, 0, 0, 0,
	759, 1589, 0, 1007, 0, 0, 0, 0, 0, 0,
	64, 0, 1503, 1504, 64, 2097, 1520, 0, 1532, 1534,
	1539, 1542, 1543, 1544, 0, 0, 0, 0, 0, 0,
	0, 1254, 0, 0, 0, 0, 119, 66, 0, 67,
	119, 66, 0, 67, 1602, 0, 1219, 0, 0, 0,
	0, 0, 132, 2133, 0, 0, 132, 0, 0, 460,
	0, 0, 99, 460, 0, 0, 99, 0, 0, 0,
	0, 394, 394, 0, 0, 0, 0, 0, 0, 0,
	1254, 134, 0, 0, 0, 134, 0, 0, 0, 2159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 133, 0, 0, 0, 126, 0, 0, 0, 126,
	71, 0, 127, 0, 0, 1086, 127, 0, 0, 0,
	0, 2184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 0, 0, 759, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1589,
	759, 0, 0, 2216, 2217, 1602, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2097,
	759, 0, 0, 0, 0, 2250, 0, 2251, 0, 394,
	2253, 2254, 0, 394, 0, 2258, 0, 0, 0, 0,
	0, 0, 0, 2097, 0, 759, 1636, 0, 2097, 0,
	942, 943, 0, 972, 973, 974, 982, 983, 984, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 945, 0, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 566, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1602, 0, 2312, 0, 0,
	2314, 0, 0, 0, 0, 0, 0, 0, 394, 0,
	0, 2097, 0, 0, 967, 968, 969, 970, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 0, 2346, 0, 0, 2097,
	0, 0, 0, 0, 394, 979, 987, 574, 0, 0,
	0, 759, 1002, 0, 0, 0, 0, 0, 0, 2159,
	2159, 0, 0, 0, 985, 0, 0, 0, 1731, 1732,
	0, 0, 0, 437, 1737, 0, 0, 0, 0, 2379,
	977, 0, 0, 0, 1589, 0, 965, 0, 0, 0,
	0, 1219, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 942, 943, 0, 39, 1756, 0, 0, 0,
	0, 976, 1763, 0, 0, 1767, 2395, 2396, 42, 736,
	0, 0, 0, 394, 0, 945, 0, 0, 0, 0,
	0, 0, 1781, 0, 0, 1086, 2411, 0, 0, 0,
	0, 48, 0, 0, 0, 971, 0, 0, 71, 944,
	0, 0, 0, 0, 71, 964, 0, 0, 0, 0,
	966, 0, 0, 2426, 0, 759, 1003, 0, 394, 0,
	59, 0, 0, 1539, 1539, 1539, 980, 60, 0, 61,
	0, 2097, 0, 0, 0, 1791, 1792, 0, 1809, 1810,
	1811, 0, 0, 0, 0, 0, 2379, 0, 0, 1065,
	0, 2166, 0, 0, 586, 0, 967, 968, 969, 970,
	0, 0, 63, 759, 0, 950, 0, 0, 0, 394,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2484, 0, 0, 0, 0, 1806, 0,
	0, 0, 0, 0, 978, 0, 0, 956, 957, 963,
	962, 958, 959, 960, 981, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 0, 0, 0, 0,
	71, 0, 71, 1833, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 1935, 64, 0, 0, 71, 1797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1953, 0, 0, 0, 0,
	119, 66, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 586, 0, 0, 132, 971, 0, 1812,
	0, 0, 0, 460, 0, 586, 99, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 1975, 0, 0,
	0, 1807, 1383, 0, 0, 134, 0, 0, 1979, 0,
	0, 1980, 0, 942, 943, 0, 972, 973, 974, 982,
	983, 984, 0, 1985, 0, 0, 0, 0, 0, 975,
	0, 0, 1993, 0, 0, 0, 945, 0, 0, 986,
	1997, 133, 71, 1953, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	944, 0, 0, 2021, 0, 0, 964, 2023, 0, 0,
	961, 0, 0, 0, 0, 1808, 0, 0, 0, 438,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 0, 0,
	2053, 2054, 0, 0, 0, 0, 0, 0, 0, 2060,
	2061, 2062, 0, 0, 0, 0, 0, 967, 968, 969,
	970, 1453, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2073, 0, 0, 0,
	0, 1002, 0, 0, 0, 0, 0, 0, 979, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1803, 1804, 1805, 0, 2094, 985, 0, 0,
	0, 1802, 1800, 1801, 1793, 1794, 1795, 1796, 1798, 1799,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 1002, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 0, 0, 1791, 1792,
	0, 1809, 1810, 1811, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1988, 0, 0, 0, 971, 736,
	0, 0, 0, 0, 0, 736, 736, 0, 0, 736,
	0, 2168, 0, 966, 0, 2171, 2172, 942, 943, 2174,
	972, 973, 974, 982, 983, 984, 2176, 0, 2178, 980,
	0, 1806, 0, 975, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 986, 2185, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 944, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 961, 0, 0, 2194, 0, 0,
	0, 0, 71, 0, 0, 71, 0, 0, 0, 0,
	0, 1797, 0, 0, 0, 574, 0, 978, 0, 0,
	956, 957, 963, 962, 958, 959, 960, 981, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 967, 968, 969, 970, 0, 1832, 2240, 0, 0,
	950, 0, 1812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 943, 0, 972, 973, 974, 982,
	983, 984, 979, 987, 1807, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 986,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 0,
	944, 0, 0, 965, 2288, 2289, 964, 0, 1791, 1792,
	961, 1809, 1810, 1811, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1987, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 2301, 0, 0, 1808, 0,
	0, 2304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 968, 969,
	970, 1806, 971, 0, 0, 0, 950, 0, 0, 1791,
	1792, 0, 1809, 1810, 1811, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 0, 2336, 0, 0, 979, 987,
	0, 71, 0, 980, 0, 0, 0, 0, 1791, 1792,
	0, 1809, 1810, 1811, 0, 0, 736, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1797, 1806, 977, 0, 1803, 1804, 1805, 0, 965,
	0, 0, 0, 0, 1802, 1800, 1801, 1793, 1794, 1795,
	1796, 1798, 1799, 0, 1791, 1792, 0, 1809, 1810, 1811,
	0, 1806, 0, 0, 976, 0, 0, 2385, 0, 0,
	0, 978, 1812, 0, 956, 957, 963, 962, 958, 959,
	960, 981, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 1797, 0, 1807, 0, 0, 0, 971, 0,
	1831, 0, 0, 736, 0, 0, 0, 1806, 0, 0,
	0, 586, 0, 966, 0, 1813, 0, 0, 0, 0,
	0, 1797, 0, 0, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 1812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1807, 0, 0, 0, 0,
	0, 0, 1812, 0, 2453, 2453, 0, 1797, 1808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2468, 0, 0, 0, 1807, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 2453, 0,
	956, 957, 963, 962, 958, 959, 960, 981, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 0,
	0, 0, 2423, 0, 0, 0, 736, 0, 0, 1808,
	1807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1803, 1804, 1805, 1808, 0,
	0, 0, 0, 0, 1802, 1800, 1801, 1793, 1794, 1795,
	1796, 1798, 1799, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 1808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1803, 1804, 1805, 0,
	0, 0, 0, 0, 0, 1802, 1800, 1801, 1793, 1794,
	1795, 1796, 1798, 1799, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1803, 1804, 1805, 0, 0,
	0, 0, 0, 0, 1802, 1800, 1801, 1793, 1794, 1795,
	1796, 1798, 1799, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1803, 1804, 1805, 0, 0, 0, 0, 0, 0,
	1802, 1800, 1801, 1793, 1794, 1795, 1796, 1798, 1799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2362, 175, 176, 1122,
	177, 1123, 1124, 1125, 1126, 330, 1127, 1128, 1129, 1130,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	1131, 182, 337, 338, 183, 184, 1132, 1133, 339, 340,
	341, 1134, 185, 342, 1135, 823, 1136, 186, 187, 188,
	0, 189, 1137, 190, 0, 191, 192, 1138, 686, 193,
	194, 195, 1139, 1140, 1142, 1141, 1143, 1144, 1145, 196,
	197, 395, 198, 343, 199, 344, 345, 1146, 200, 1147,
	201, 1148, 202, 1149, 1150, 203, 204, 1151, 205, 1152,
	1002, 1153, 346, 206, 207, 208, 347, 348, 1154, 687,
	1155, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 1156, 212, 1157, 1158, 688, 1159, 213, 352,
	1160, 353, 1161, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 690, 1162, 356, 221, 1163, 218, 1164, 689,
	219, 357, 220, 358, 359, 360, 361, 362, 1165, 363,
	1166, 691, 222, 223, 224, 692, 364, 225, 226, 227,
	1167, 229, 228, 1168, 365, 693, 230, 694, 1169, 231,
	1170, 1171, 232, 0, 233, 234, 235, 237, 366, 236,
	695, 238, 239, 241, 240, 1172, 1173, 1174, 367, 242,
	368, 243, 244, 1175, 245, 1176, 1177, 246, 1178, 1179,
	247, 369, 696, 248, 697, 370, 249, 250, 251, 252,
	253, 1180, 254, 371, 255, 372, 256, 1181, 257, 258,
	259, 260, 261, 373, 262, 263, 1182, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	1183, 276, 698, 277, 278, 374, 279, 0, 283, 284,
	285, 286, 1184, 288, 375, 287, 289, 290, 1185, 291,
	280, 281, 292, 699, 293, 376, 377, 294, 1186, 301,
	295, 296, 282, 297, 300, 378, 298, 299, 379, 1187,
	302, 1188, 303, 304, 305, 306, 307, 308, 309, 1189,
	380, 381, 382, 1190, 1191, 310, 311, 383, 384, 1192,
	312, 313, 314, 315, 1193, 1194, 316, 317, 318, 319,
	1195, 320, 1196, 385, 321, 322, 323, 386, 387, 1197,
	1198, 324, 1199, 1200, 1201, 1202, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 0, 1582, 0, 0, 0, 0, 0, 0,
	0, 0, 1583, 175, 176, 1122, 177, 1123, 1124, 1125,
	1126, 330, 1127, 1128, 1129, 1130, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 1131, 182, 337, 338,
	183, 184, 1132, 1133, 339, 340, 341, 1134, 185, 342,
	1135, 823, 1136, 186, 187, 188, 0, 189, 1137, 190,
	0, 191, 192, 1138, 686, 193, 194, 195, 1139, 1140,
	1142, 1141, 1143, 1144, 1145, 196, 197, 395, 198, 343,
	199, 344, 345, 1146, 200, 1147, 201, 1148, 202, 1149,
	1150, 203, 204, 1151, 205, 1152, 0, 1153, 346, 206,
	207, 208, 347, 348, 1154, 687, 1155, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 1156, 212,
	1157, 1158, 688, 1159, 213, 352, 1160, 353, 1161, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 690, 1162,
	356, 221, 1163, 218, 1164, 689, 219, 357, 220, 358,
	359, 360, 361, 362, 1165, 363, 1166, 691, 222, 223,
	224, 692, 364, 225, 226, 227, 1167, 229, 228, 1168,
	365, 693, 230, 694, 1169, 231, 1170, 1171, 232, 0,
	233, 234, 235, 237, 366, 236, 695, 238, 239, 241,
	240, 1172, 1173, 1174, 367, 242, 368, 243, 244, 1175,
	245, 1176, 1177, 246, 1178, 1179, 247, 369, 696, 248,
	697, 370, 249, 250, 251, 252, 253, 1180, 254, 371,
	255, 372, 256, 1181, 257, 258, 259, 260, 261, 373,
	262, 263, 1182, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 1183, 276, 698, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 1184, 288,
	375, 287, 289, 290, 1185, 291, 280, 281, 292, 699,
	293, 376, 377, 294, 1186, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 1187, 302, 1188, 303, 304,
	305, 306, 307, 308, 309, 1189, 380, 381, 382, 1190,
	1191, 310, 311, 383, 384, 1192, 312, 313, 314, 315,
	1193, 1194, 316, 317, 318, 319, 1195, 320, 1196, 385,
	321, 322, 323, 386, 387, 1197, 1198, 324, 1199, 1200,
	1201, 1202, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2212,
	175, 176, 1122, 177, 1123, 1124, 1125, 1126, 330, 1127,
	1128, 1129, 1130, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 1131, 182, 337, 338, 183, 184, 1132,
	1133, 339, 340, 341, 1134, 185, 342, 1135, 823, 1136,
	186, 187, 188, 0, 189, 1137, 190, 0, 191, 192,
	1138, 686, 193, 194, 195, 1139, 1140, 1142, 1141, 1143,
	1144, 1145, 196, 197, 395, 198, 343, 199, 344, 345,
	1146, 200, 1147, 201, 1148, 202, 1149, 1150, 203, 204,
	1151, 205, 1152, 0, 1153, 346, 206, 207, 208, 347,
	348, 1154, 687, 1155, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 1156, 212, 1157, 1158, 688,
	1159, 213, 352, 1160, 353, 1161, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 690, 1162, 356, 221, 1163,
	218, 1164, 689, 219, 357, 220, 358, 359, 360, 361,
	362, 1165, 363, 1166, 691, 222, 223, 224, 692, 364,
	225, 226, 227, 1167, 229, 228, 1168, 365, 693, 230,
	694, 1169, 231, 1170, 1171, 232, 0, 233, 234, 235,
	237, 366, 236, 695, 238, 239, 241, 240, 1172, 1173,
	1174, 367, 242, 368, 243, 244, 1175, 245, 1176, 1177,
	246, 1178, 1179, 247, 369, 696, 248, 697, 370, 249,
	250, 251, 252, 253, 1180, 254, 371, 255, 372, 256,
	1181, 257, 258, 259, 260, 261, 373, 262, 263, 1182,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 1183, 276, 698, 277, 278, 374, 279,
	0, 283, 284, 285, 286, 1184, 288, 375, 287, 289,
	290, 1185, 291, 280, 281, 292, 699, 293, 376, 377,
	294, 1186, 301, 295, 296, 282, 297, 300, 378, 298,
	299, 379, 1187, 302, 1188, 303, 304, 305, 306, 307,
	308, 309, 1189, 380, 381, 382, 1190, 1191, 310, 311,
	383, 384, 1192, 312, 313, 314, 315, 1193, 1194, 316,
	317, 318, 319, 1195, 320, 1196, 385, 321, 322, 323,
	386, 387, 1197, 1198, 324, 1199, 1200, 1201, 1202, 325,
	326, 327, 328, 329, 0, 0, 1117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 175, 176, 1122, 177, 1123, 1124, 1125, 1126,
	330, 1127, 1128, 1129, 1130, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 1131, 182, 337, 338, 183,
	184, 1132, 1133, 339, 340, 341, 1134, 185, 342, 1135,
	823, 1136, 186, 187, 188, 0, 189, 1137, 190, 0,
	191, 192, 1138, 686, 193, 194, 195, 1139, 1140, 1142,
	1141, 1143, 1144, 1145, 196, 197, 395, 198, 343, 199,
	344, 345, 1146, 200, 1147, 201, 1148, 202, 1149, 1150,
	203, 204, 1151, 205, 1152, 0, 1153, 346, 206, 207,
	208, 347, 348, 1154, 687, 1155, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 1156, 212, 1157,
	1158, 688, 1159, 213, 352, 1160, 353, 1161, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 690, 1162, 356,
	221, 1163, 218, 1164, 689, 219, 357, 220, 358, 359,
	360, 361, 362, 1165, 363, 1166, 691, 222, 223, 224,
	692, 364, 225, 226, 227, 1167, 229, 228, 1168, 365,
	693, 230, 694, 1169, 231, 1170, 1171, 232, 0, 233,
	234, 235, 237, 366, 236, 695, 238, 239, 241, 240,
	1172, 1173, 1174, 367, 242, 368, 243, 244, 1175, 245,
	1176, 1177, 246, 1178, 1179, 247, 369, 696, 248, 697,
	370, 249, 250, 251, 252, 253, 1180, 254, 371, 255,
	372, 256, 1181, 257, 258, 259, 260, 261, 373, 262,
	263, 1182, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 1183, 276, 698, 277, 278,
	374, 279, 0, 283, 284, 285, 286, 1184, 288, 375,
	287, 289, 290, 1185, 291, 280, 281, 292, 699, 293,
	376, 377, 294, 1186, 301, 295, 296, 282, 297, 300,
	378, 298, 299, 379, 1187, 302, 1188, 303, 304, 305,
	306, 307, 308, 309, 1189, 380, 381, 382, 1190, 1191,
	310, 311, 383, 384, 1192, 312, 313, 314, 315, 1193,
	1194, 316, 317, 318, 319, 1195, 320, 1196, 385, 321,
	322, 323, 386, 387, 1197, 1198, 324, 1199, 1200, 1201,
	1202, 325, 326, 327, 328, 329, 1481, 0, 624, 613,
	614, 611, 612, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 1478, 177, 0, 0,
	0, 0, 641, 606, 0, 0, 0, 178, 179, 180,
	331, 656, 333, 657, 181, 658, 659, 0, 182, 337,
	338, 183, 184, 609, 640, 660, 661, 341, 0, 185,
	652, 0, 632, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 686, 193, 194, 195, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 395, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	1479, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 687, 0, 0, 0,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 649, 651, 690,
	0, 356, 221, 0, 218, 0, 689, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 691, 222,
	223, 224, 692, 364, 225, 226, 227, 0, 229, 228,
	0, 654, 693, 230, 694, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 695, 238, 239,
	241, 240, 592, 0, 621, 650, 242, 674, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 696,
	248, 697, 644, 249, 250, 251, 252, 253, 0, 254,
	645, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	675, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 698,
	277, 278, 598, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 638, 291, 280, 281, 292,
	699, 293, 676, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 646, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 678, 679,
	0, 0, 310, 311, 647, 648, 619, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 639, 320, 0,
	385, 321, 322, 323, 386, 680, 1477, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 593, 0,
	624, 613, 614, 611, 612, 603, 0, 0, 591, 0,
	0, 0, 0, 589, 590, 1480, 175, 176, 0, 177,
	0, 0, 599, 1475, 641, 606, 0, 0, 602, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 686, 193, 194,
	195, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	395, 198, 662, 199, 663, 664, 587, 200, 0, 201,
	0, 202, 0, 0, 655, 204, 0, 205, 0, 0,
	0, 597, 206, 207, 208, 642, 643, 620, 687, 0,
	0, 0, 0, 0, 209, 210, 665, 666, 667, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 653, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 649,
	651, 690, 0, 356, 221, 0, 218, 0, 689, 219,
	668, 220, 669, 670, 671, 672, 673, 0, 631, 0,
	691, 222, 223, 224, 692, 364, 225, 226, 227, 0,
	229, 228, 0, 654, 693, 230, 694, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 695,
	238, 239, 241, 240, 592, 0, 621, 650, 242, 674,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	369, 696, 248, 697, 644, 249, 250, 251, 252, 253,
	0, 254, 645, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 675, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 698, 277, 278, 598, 279, 0, 283, 284, 285,
	286, 132, 288, 375, 287, 289, 290, 638, 291, 280,
	281, 292, 699, 293, 676, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	134, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 385, 321, 322, 323, 822, 680, 0, 0,
	324, 0, 0, 0, 126, 325, 326, 327, 328, 329,
	593, 127, 575, 0, 624, 613, 614, 611, 612, 603,
	591, 0, 0, 0, 0, 589, 590, 0, 0, 0,
	175, 176, 0, 177, 1005, 0, 0, 0, 641, 606,
	602, 0, 0, 178, 179, 180, 331, 656, 333, 657,
	181, 658, 659, 0, 182, 337, 338, 183, 184, 609,
	640, 660, 661, 341, 0, 185, 652, 0, 632, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 686, 193, 194, 195, 0, 633, 634, 636, 0,
	635, 637, 196, 197, 395, 198, 662, 199, 663, 664,
	0, 200, 0, 201, 0, 202, 0, 0, 655, 204,
	0, 205, 0, 0, 0, 597, 206, 207, 208, 642,
	643, 620, 687, 0, 0, 0, 0, 0, 209, 210,
	665, 666, 667, 0, 211, 0, 212, 0, 0, 688,
	0, 213, 653, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 649, 651, 690, 0, 356, 221, 0,
	218, 0, 689, 219, 668, 220, 669, 670, 671, 672,
	673, 0, 631, 0, 691, 222, 223, 224, 692, 364,
	225, 226, 227, 0, 229, 228, 0, 654, 693, 230,
	694, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 366, 236, 695, 238, 239, 241, 240, 592, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 369, 696, 248, 697, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 372, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 698, 277, 278, 598, 279,
	0, 283, 284, 285, 286, 132, 288, 375, 287, 289,
	290, 638, 291, 280, 281, 292, 699, 293, 676, 377,
	294, 0, 301, 295, 296, 282, 297, 300, 677, 298,
	299, 646, 0, 302, 134, 303, 304, 305, 306, 307,
	308, 309, 0, 380, 678, 679, 0, 0, 310, 311,
	647, 648, 619, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 639, 320, 0, 385, 321, 322, 323,
	822, 680, 0, 0, 324, 0, 0, 0, 126, 325,
	326, 327, 328, 329, 593, 127, 624, 613, 614, 611,
	612, 603, 0, 0, 591, 0, 0, 0, 0, 589,
	590, 0, 175, 176, 0, 177, 0, 0, 1005, 0,
	641, 606, 0, 0, 602, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 0, 182, 337, 338, 183,
	184, 609, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 686, 193, 194, 195, 0, 633, 634,
	636, 0, 635, 637, 196, 197, 395, 198, 662, 199,
	663, 664, 0, 200, 0, 201, 0, 202, 0, 0,
	655, 204, 0, 205, 0, 0, 0, 597, 206, 207,
	208, 642, 643, 620, 687, 0, 0, 0, 0, 0,
	209, 210, 665, 666, 667, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 653, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 649, 651, 690, 0, 356,
	221, 0, 218, 0, 689, 219, 668, 220, 669, 670,
	671, 672, 673, 0, 631, 0, 691, 222, 223, 224,
	692, 364, 225, 226, 227, 0, 229, 228, 0, 654,
	693, 230, 694, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 366, 236, 695, 238, 239, 241, 240,
	592, 0, 621, 650, 242, 674, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 369, 696, 248, 697,
	644, 249, 250, 251, 252, 253, 0, 254, 645, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 675, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 698, 277, 278,
	598, 279, 0, 283, 284, 285, 286, 132, 288, 375,
	287, 289, 290, 638, 291, 280, 281, 292, 699, 293,
	676, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 134, 303, 304, 305,
	306, 307, 308, 309, 0, 380, 678, 679, 0, 0,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 385, 321,
	322, 323, 822, 680, 0, 0, 324, 0, 0, 0,
	126, 325, 326, 327, 328, 329, 593, 127, 624, 613,
	614, 611, 612, 603, 0, 0, 591, 0, 0, 0,
	0, 589, 590, 0, 175, 176, 0, 177, 0, 0,
	1005, 0, 641, 606, 0, 0, 602, 178, 179, 180,
	331, 656, 333, 657, 181, 658, 659, 1535, 182, 337,
	338, 183, 184, 609, 640, 660, 661, 341, 0, 185,
	652, 0, 632, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 686, 193, 194, 195, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 395, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	0, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 687, 0, 0, 0,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 1540, 688, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 649, 651, 690,
	0, 356, 221, 0, 218, 0, 689, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 691, 222,
	223, 224, 692, 364, 225, 226, 227, 0, 229, 228,
	1536, 654, 693, 230, 694, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 695, 238, 239,
	241, 240, 592, 0, 621, 650, 242, 674, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 696,
	248, 697, 644, 249, 250, 251, 252, 253, 0, 254,
	645, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	675, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 698,
	277, 278, 598, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 638, 291, 280, 281, 292,
	699, 293, 676, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 646, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 678, 679,
	0, 1537, 310, 311, 647, 648, 619, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 639, 320, 0,
	385, 321, 322, 323, 386, 680, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 593, 583,
	0, 624, 613, 614, 611, 612, 603, 0, 591, 0,
	0, 0, 0, 589, 590, 0, 0, 175, 176, 0,
	177, 0, 599, 0, 0, 641, 606, 0, 602, 0,
	178, 179, 180, 331, 656, 333, 657, 181, 658, 659,
	0, 182, 337, 338, 183, 184, 609, 640, 660, 661,
	341, 0, 185, 652, 0, 632, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 686, 193,
	194, 195, 0, 633, 634, 636, 0, 635, 637, 196,
	197, 395, 198, 662, 199, 663, 664, 587, 200, 0,
	201, 0, 202, 0, 0, 655, 204, 0, 205, 0,
	0, 0, 597, 206, 207, 208, 642, 643, 620, 687,
	0, 0, 0, 0, 0, 209, 210, 665, 666, 667,
	0, 211, 0, 212, 0, 0, 688, 0, 213, 653,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	649, 651, 690, 0, 356, 221, 0, 218, 0, 689,
	219, 668, 220, 669, 670, 671, 672, 673, 0, 631,
	0, 691, 222, 223, 224, 692, 364, 225, 226, 227,
	0, 229, 228, 0, 654, 693, 230, 694, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	695, 238, 239, 241, 240, 592, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 585, 0, 246, 0, 0,
	247, 369, 696, 248, 697, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 698, 277, 278, 598, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 638, 291,
	280, 281, 292, 699, 293, 676, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 677, 298, 299, 646, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 678, 679, 0, 0, 310, 311, 647, 648, 619,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	639, 320, 0, 385, 321, 322, 323, 386, 680, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 593, 0, 624, 613, 614, 611, 612, 603, 0,
	0, 591, 0, 0, 0, 0, 589, 590, 0, 175,
	176, 0, 177, 0, 0, 599, 0, 641, 606, 0,
	0, 602, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	686, 193, 194, 195, 0, 633, 634, 636, 0, 635,
	637, 196, 197, 395, 198, 662, 199, 663, 664, 0,
	200, 0, 201, 0, 202, 0, 0, 655, 204, 0,
	205, 0, 0, 0, 597, 206, 207, 208, 642, 643,
	620, 687, 0, 0, 0, 0, 0, 209, 210, 665,
	666, 667, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 653, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 649, 651, 690, 0, 356, 221, 0, 218,
	0, 689, 219, 668, 220, 669, 670, 671, 672, 673,
	0, 631, 0, 691, 222, 223, 224, 692, 364, 225,
	226, 227, 0, 229, 228, 0, 654, 693, 230, 694,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 695, 238, 239, 241, 240, 592, 2142, 621,
	650, 242, 674, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 696, 248, 697, 644, 249, 250,
	251, 252, 253, 0, 254, 645, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 675, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 698, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	638, 291, 280, 281, 292, 699, 293, 676, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 385, 321, 322, 323, 386,
	680, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 593, 0, 624, 613, 614, 611, 612,
	603, 0, 0, 591, 0, 0, 0, 0, 589, 590,
	1066, 175, 176, 0, 177, 0, 0, 599, 0, 641,
	606, 0, 0, 602, 178, 179, 180, 331, 656, 333,
	657, 181, 658, 659, 0, 182, 337, 338, 183, 184,
	609, 640, 660, 661, 341, 0, 185, 652, 0, 632,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 686, 193, 194, 195, 0, 633, 634, 636,
	0, 635, 637, 196, 197, 395, 198, 662, 199, 663,
	664, 0, 200, 0, 201, 0, 202, 0, 0, 655,
	204, 0, 205, 0, 0, 0, 597, 206, 207, 208,
	642, 643, 620, 687, 0, 0, 0, 0, 0, 209,
	210, 665, 666, 667, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 649, 651, 690, 0, 356, 221,
	1385, 218, 0, 689, 219, 668, 220, 669, 670, 671,
	672, 673, 0, 631, 0, 691, 222, 223, 224, 692,
	364, 225, 226, 227, 0, 229, 228, 0, 654, 693,
	230, 694, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 366, 236, 695, 238, 239, 241, 240, 592,
	0, 621, 650, 242, 674, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 369, 696, 248, 697, 644,
	249, 250, 251, 252, 253, 0, 254, 645, 255, 372,
	256, 1384, 257, 258, 259, 260, 261, 675, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 698, 277, 278, 598,
	279, 0, 283, 284, 285, 286, 0, 288, 375, 287,
	289, 290, 638, 291, 280, 281, 292, 699, 293, 676,
	377, 294, 0, 301, 295, 296, 282, 297, 300, 677,
	298, 299, 646, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 380, 678, 679, 0, 0, 310,
	311, 647, 648, 619, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 639, 320, 0, 385, 321, 322,
	323, 386, 680, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 593, 0, 624, 613, 614,
	611, 612, 603, 0, 0, 591, 0, 0, 0, 0,
	589, 590, 0, 175, 176, 0, 177, 0, 0, 599,
	0, 641, 606, 0, 0, 602, 178, 179, 180, 331,
	656, 333, 657, 181, 658, 659, 0, 182, 337, 338,
	183, 184, 609, 640, 660, 661, 341, 0, 185, 652,
	0, 632, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 686, 193, 194, 195, 0, 633,
	634, 636, 0, 635, 637, 196, 197, 395, 198, 662,
	199, 663, 664, 587, 200, 0, 201, 0, 202, 0,
	0, 655, 204, 0, 205, 0, 0, 0, 597, 206,
	207, 208, 642, 643, 620, 687, 0, 0, 0, 0,
	0, 209, 210, 665, 666, 667, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 653, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 649, 651, 690, 0,
	356, 221, 0, 218, 0, 689, 219, 668, 220, 669,
	670, 671, 672, 673, 0, 631, 0, 691, 222, 223,
	224, 692, 364, 225, 226, 227, 0, 229, 228, 0,
	654, 693, 230, 694, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 695, 238, 239, 241,
	240, 592, 0, 621, 650, 242, 674, 243, 244, 0,
	245, 585, 0, 246, 0, 0, 247, 369, 696, 248,
	697, 644, 249, 250, 251, 252, 253, 0, 254, 645,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 675,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 698, 277,
	278, 598, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 638, 291, 280, 281, 292, 699,
	293, 676, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 677, 298, 299, 646, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 678, 679, 0,
	0, 310, 311, 647, 648, 619, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 639, 320, 0, 385,
	321, 322, 323, 386, 680, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 593, 0, 624,
	613, 614, 611, 612, 603, 0, 0, 591, 0, 0,
	0, 0, 589, 590, 0, 175, 176, 0, 177, 0,
	0, 599, 0, 641, 606, 0, 0, 602, 178, 179,
	180, 331, 656, 333, 657, 181, 658, 659, 0, 182,
	337, 338, 183, 184, 609, 640, 660, 661, 341, 0,
	185, 652, 0, 632, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 686, 193, 194, 195,
	0, 633, 634, 636, 0, 635, 637, 196, 197, 395,
	198, 662, 199, 663, 664, 587, 200, 0, 201, 0,
	202, 0, 0, 655, 204, 0, 205, 0, 0, 0,
	597, 206, 207, 208, 642, 643, 620, 687, 0, 0,
	0, 0, 0, 209, 210, 665, 666, 667, 0, 211,
	0, 212, 0, 0, 688, 0, 213, 653, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 649, 651,
	690, 0, 356, 221, 0, 218, 0, 689, 219, 668,
	220, 669, 670, 671, 672, 673, 0, 631, 0, 691,
	222, 223, 224, 692, 364, 225, 226, 227, 0, 229,
	228, 0, 654, 693, 230, 694, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 236, 695, 238,
	239, 241, 240, 592, 0, 621, 650, 242, 674, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	696, 248, 697, 644, 249, 250, 251, 252, 253, 0,
	254, 645, 255, 372, 256, 0, 257, 258, 259, 260,
	261, 675, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	698, 277, 278, 598, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 289, 290, 638, 291, 280, 281,
	292, 699, 293, 676, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 677, 298, 299, 646, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 380, 678,
	679, 0, 0, 310, 311, 647, 648, 619, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 639, 320,
	0, 385, 321, 322, 323, 386, 680, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 593,
	0, 624, 613, 614, 611, 612, 603, 0, 0, 591,
	0, 0, 0, 0, 589, 590, 0, 175, 176, 0,
	177, 0, 0, 599, 0, 641, 606, 0, 0, 602,
	178, 179, 180, 331, 656, 333, 657, 181, 658, 659,
	0, 182, 337, 338, 183, 184, 609, 640, 660, 661,
	341, 0, 185, 652, 0, 632, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 686, 193,
	194, 195, 0, 633, 634, 636, 0, 635, 637, 196,
	197, 395, 198, 662, 199, 663, 664, 0, 200, 0,
	201, 0, 202, 0, 0, 655, 204, 0, 205, 0,
	0, 0, 597, 206, 207, 208, 642, 643, 620, 687,
	0, 0, 0, 0, 0, 209, 210, 665, 666, 667,
	0, 211, 0, 212, 0, 0, 688, 0, 213, 653,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	649, 651, 690, 0, 356, 221, 0, 218, 0, 689,
	219, 668, 220, 669, 670, 671, 672, 673, 0, 631,
	0, 691, 222, 223, 224, 692, 364, 225, 226, 227,
	0, 229, 228, 0, 654, 693, 230, 694, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	695, 238, 239, 241, 240, 592, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 369, 696, 248, 697, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 698, 277, 278, 598, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 638, 291,
	280, 281, 292, 699, 293, 676, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 677, 298, 299, 646, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 678, 679, 0, 0, 310, 311, 647, 648, 619,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	639, 320, 0, 385, 321, 322, 323, 386, 680, 2000,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 593, 0, 624, 613, 614, 611, 612, 603, 0,
	0, 591, 0, 0, 0, 0, 589, 590, 0, 175,
	176, 0, 177, 0, 0, 599, 0, 641, 606, 0,
	0, 602, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	686, 193, 194, 195, 0, 633, 634, 636, 0, 635,
	637, 196, 197, 395, 198, 662, 199, 663, 664, 0,
	200, 0, 201, 0, 202, 0, 0, 655, 204, 0,
	205, 0, 0, 0, 597, 206, 207, 208, 642, 643,
	620, 687, 0, 0, 0, 0, 0, 209, 210, 665,
	666, 667, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 653, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 649, 651, 690, 0, 356, 221, 0, 218,
	0, 689, 219, 668, 220, 669, 670, 671, 672, 673,
	0, 631, 0, 691, 222, 223, 224, 692, 364, 225,
	226, 227, 0, 229, 228, 0, 654, 693, 230, 694,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 695, 238, 239, 241, 240, 592, 0, 621,
	650, 242, 674, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 696, 248, 697, 644, 249, 250,
	251, 252, 253, 0, 254, 645, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 675, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 698, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	638, 291, 280, 281, 292, 699, 293, 676, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 385, 321, 322, 323, 386,
	680, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 593, 0, 624, 613, 614, 611, 612,
	603, 0, 0, 591, 0, 0, 0, 0, 589, 590,
	1066, 175, 176, 0, 177, 0, 0, 599, 0, 641,
	606, 0, 0, 602, 178, 179, 180, 331, 656, 333,
	657, 181, 658, 659, 0, 182, 337, 338, 183, 184,
	609, 640, 660, 661, 341, 0, 185, 652, 0, 632,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 686, 193, 194, 195, 0, 633, 634, 636,
	0, 635, 637, 196, 197, 395, 198, 662, 199, 663,
	664, 0, 200, 0, 201, 0, 202, 0, 0, 655,
	204, 0, 205, 0, 0, 0, 597, 206, 207, 208,
	642, 643, 620, 687, 0, 0, 0, 0, 0, 209,
	210, 665, 666, 667, 0, 211, 0, 212, 0, 1540,
	688, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 649, 651, 690, 0, 356, 221,
	0, 218, 0, 689, 219, 668, 220, 669, 670, 671,
	672, 673, 0, 631, 0, 691, 222, 223, 224, 692,
	364, 225, 226, 227, 0, 229, 228, 0, 654, 693,
	230, 694, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 366, 236, 695, 238, 239, 241, 240, 592,
	0, 621, 650, 242, 674, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 369, 696, 248, 697, 644,
	249, 250, 251, 252, 253, 0, 254, 645, 255, 372,
	256, 0, 257, 258, 259, 260, 261, 675, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 698, 277, 278, 598,
	279, 0, 283, 284, 285, 286, 0, 288, 375, 287,
	289, 290, 638, 291, 280, 281, 292, 699, 293, 676,
	377, 294, 0, 301, 295, 296, 282, 297, 300, 677,
	298, 299, 646, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 380, 678, 679, 0, 0, 310,
	311, 647, 648, 619, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 639, 320, 0, 385, 321, 322,
	323, 386, 680, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 593, 1585, 0, 624, 613,
	614, 611, 612, 603, 0, 591, 0, 0, 0, 0,
	589, 590, 0, 0, 175, 176, 0, 177, 0, 599,
	0, 0, 641, 606, 0, 602, 0, 178, 179, 180,
	331, 656, 333, 657, 181, 658, 659, 0, 182, 337,
	338, 183, 184, 609, 640, 660, 661, 341, 0, 185,
	652, 0, 632, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 686, 193, 194, 195, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 395, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	0, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 687, 0, 0, 0,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 649, 651, 690,
	0, 356, 221, 0, 218, 0, 689, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 691, 222,
	223, 224, 692, 364, 225, 226, 227, 0, 229, 228,
	0, 654, 693, 230, 694, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 695, 238, 239,
	241, 240, 592, 0, 621, 650, 242, 674, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 696,
	248, 697, 644, 249, 250, 251, 252, 253, 0, 254,
	645, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	675, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 698,
	277, 278, 598, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 638, 291, 280, 281, 292,
	699, 293, 676, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 646, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 678, 679,
	0, 0, 310, 311, 647, 648, 619, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 639, 320, 0,
	385, 321, 322, 323, 386, 680, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 593, 1549,
	0, 624, 613, 614, 611, 612, 603, 0, 591, 0,
	0, 0, 0, 589, 590, 0, 0, 175, 176, 0,
	177, 0, 599, 0, 0, 641, 606, 0, 602, 0,
	178, 179, 180, 331, 656, 333, 657, 181, 658, 659,
	0, 182, 337, 338, 183, 184, 609, 640, 660, 661,
	341, 0, 185, 652, 0, 632, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 686, 193,
	194, 195, 0, 633, 634, 636, 0, 635, 637, 196,
	197, 395, 198, 662, 199, 663, 664, 0, 200, 0,
	201, 0, 202, 0, 0, 655, 204, 0, 205, 0,
	0, 0, 597, 206, 207, 208, 642, 643, 620, 687,
	0, 0, 0, 0, 0, 209, 210, 665, 666, 667,
	0, 211, 0, 212, 0, 0, 688, 0, 213, 653,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	649, 651, 690, 0, 356, 221, 0, 218, 0, 689,
	219, 668, 220, 669, 670, 671, 672, 673, 0, 631,
	0, 691, 222, 223, 224, 692, 364, 225, 226, 227,
	0, 229, 228, 0, 654, 693, 230, 694, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	695, 238, 239, 241, 240, 592, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 369, 696, 248, 697, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 698, 277, 278, 598, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 638, 291,
	280, 281, 292, 699, 293, 676, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 677, 298, 299, 646, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 678, 679, 0, 0, 310, 311, 647, 648, 619,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	639, 320, 0, 385, 321, 322, 323, 386, 680, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 593, 1547, 0, 624, 613, 614, 611, 612, 603,
	0, 591, 0, 0, 0, 0, 589, 590, 0, 0,
	175, 176, 0, 177, 0, 599, 0, 0, 641, 606,
	0, 602, 0, 178, 179, 180, 331, 656, 333, 657,
	181, 658, 659, 0, 182, 337, 338, 183, 184, 609,
	640, 660, 661, 341, 0, 185, 652, 0, 632, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 686, 193, 194, 195, 0, 633, 634, 636, 0,
	635, 637, 196, 197, 395, 198, 662, 199, 663, 664,
	0, 200, 0, 201, 0, 202, 0, 0, 655, 204,
	0, 205, 0, 0, 0, 597, 206, 207, 208, 642,
	643, 620, 687, 0, 0, 0, 0, 0, 209, 210,
	665, 666, 667, 0, 211, 0, 212, 0, 0, 688,
	0, 213, 653, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 649, 651, 690, 0, 356, 221, 0,
	218, 0, 689, 219, 668, 220, 669, 670, 671, 672,
	673, 0, 631, 0, 691, 222, 223, 224, 692, 364,
	225, 226, 227, 0, 229, 228, 0, 654, 693, 230,
	694, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 366, 236, 695, 238, 239, 241, 240, 592, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 369, 696, 248, 697, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 372, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 698, 277, 278, 598, 279,
	0, 283, 284, 285, 286, 0, 288, 375, 287, 289,
	290, 638, 291, 280, 281, 292, 699, 293, 676, 377,
	294, 0, 301, 295, 296, 282, 297, 300, 677, 298,
	299, 646, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 380, 678, 679, 0, 0, 310, 311,
	647, 648, 619, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 639, 320, 0, 385, 321, 322, 323,
	386, 680, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 593, 1531, 0, 624, 613, 614,
	611, 612, 603, 0, 591, 0, 0, 0, 0, 589,
	590, 0, 0, 175, 176, 0, 177, 0, 599, 0,
	0, 641, 606, 0, 602, 0, 178, 179, 180, 331,
	656, 333, 657, 181, 658, 659, 0, 182, 337, 338,
	183, 184, 609, 640, 660, 661, 341, 0, 185, 652,
	0, 632, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 686, 193, 194, 195, 0, 633,
	634, 636, 0, 635, 637, 196, 197, 395, 198, 662,
	199, 663, 664, 0, 200, 0, 201, 0, 202, 0,
	0, 655, 204, 0, 205, 0, 0, 0, 597, 206,
	207, 208, 642, 643, 620, 687, 0, 0, 0, 0,
	0, 209, 210, 665, 666, 667, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 653, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 649, 651, 690, 0,
	356, 221, 0, 218, 0, 689, 219, 668, 220, 669,
	670, 671, 672, 673, 0, 631, 0, 691, 222, 223,
	224, 692, 364, 225, 226, 227, 0, 229, 228, 0,
	654, 693, 230, 694, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 695, 238, 239, 241,
	240, 592, 0, 621, 650, 242, 674, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 696, 248,
	697, 644, 249, 250, 251, 252, 253, 0, 254, 645,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 675,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 698, 277,
	278, 598, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 638, 291, 280, 281, 292, 699,
	293, 676, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 677, 298, 299, 646, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 678, 679, 0,
	0, 310, 311, 647, 648, 619, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 639, 320, 0, 385,
	321, 322, 323, 386, 680, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 593, 1519, 0,
	624, 613, 614, 611, 612, 603, 0, 591, 0, 0,
	0, 0, 589, 590, 0, 0, 175, 176, 0, 177,
	0, 599, 0, 0, 641, 606, 0, 602, 0, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 686, 193, 194,
	195, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	395, 198, 662, 199, 663, 664, 0, 200, 0, 201,
	0, 202, 0, 0, 655, 204, 0, 205, 0, 0,
	0, 597, 206, 207, 208, 642, 643, 620, 687, 0,
	0, 0, 0, 0, 209, 210, 665, 666, 667, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 653, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 649,
	651, 690, 0, 356, 221, 0, 218, 0, 689, 219,
	668, 220, 669, 670, 671, 672, 673, 0, 631, 0,
	691, 222, 223, 224, 692, 364, 225, 226, 227, 0,
	229, 228, 0, 654, 693, 230, 694, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 695,
	238, 239, 241, 240, 592, 0, 621, 650, 242, 674,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	369, 696, 248, 697, 644, 249, 250, 251, 252, 253,
	0, 254, 645, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 675, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 698, 277, 278, 598, 279, 0, 283, 284, 285,
	286, 0, 288, 375, 287, 289, 290, 638, 291, 280,
	281, 292, 699, 293, 676, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 385, 321, 322, 323, 386, 680, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	593, 1517, 0, 1509, 613, 614, 611, 612, 603, 0,
	591, 0, 0, 0, 0, 589, 590, 0, 0, 175,
	176, 0, 177, 0, 599, 0, 0, 641, 606, 0,
	602, 0, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	686, 193, 194, 195, 0, 633, 634, 636, 0, 635,
	637, 196, 197, 395, 198, 662, 1512, 663, 664, 0,
	200, 0, 201, 0, 202, 0, 0, 655, 204, 0,
	205, 0, 0, 0, 597, 206, 207, 208, 642, 643,
	620, 687, 0, 0, 0, 0, 0, 209, 210, 665,
	666, 667, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 653, 0, 353, 0, 0, 214, 1513, 0, 0,
	216, 217, 649, 651, 690, 0, 356, 221, 0, 218,
	0, 689, 219, 668, 220, 669, 670, 671, 672, 673,
	0, 631, 0, 691, 222, 223, 224, 692, 364, 225,
	226, 227, 0, 229, 228, 0, 654, 693, 230, 694,
	0, 231, 0, 0, 232, 0, 233, 1514, 1511, 237,
	366, 236, 695, 238, 239, 241, 240, 592, 0, 621,
	650, 242, 674, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 696, 248, 697, 644, 249, 250,
	251, 252, 253, 0, 254, 645, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 675, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 698, 277, 278, 598, 279, 0,
	283, 284, 285, 1515, 0, 288, 375, 287, 289, 290,
	638, 291, 280, 281, 292, 699, 293, 676, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 385, 321, 322, 323, 386,
	680, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 1510, 329, 593, 1506, 0, 1509, 613, 614, 611,
	612, 603, 0, 591, 0, 0, 0, 0, 589, 590,
	0, 0, 175, 176, 0, 177, 0, 599, 0, 0,
	641, 606, 0, 602, 0, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 0, 182, 337, 338, 183,
	184, 609, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 686, 193, 194, 195, 0, 633, 634,
	636, 0, 635, 637, 196, 197, 395, 198, 662, 1512,
	663, 664, 0, 200, 0, 201, 0, 202, 0, 0,
	655, 204, 0, 205, 0, 0, 0, 597, 206, 207,
	208, 642, 643, 620, 687, 0, 0, 0, 0, 0,
	209, 210, 665, 666, 667, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 653, 0, 353, 0, 0, 214,
	1513, 0, 0, 216, 217, 649, 651, 690, 0, 356,
	221, 0, 218, 0, 689, 219, 668, 220, 669, 670,
	671, 672, 673, 0, 631, 0, 691, 222, 223, 224,
	692, 364, 225, 226, 227, 0, 229, 228, 0, 654,
	693, 230, 694, 0, 231, 0, 0, 232, 0, 233,
	1514, 1511, 237, 366, 236, 695, 238, 239, 241, 240,
	592, 0, 621, 650, 242, 674, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 369, 696, 248, 697,
	644, 249, 250, 251, 252, 253, 0, 254, 645, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 675, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 698, 277, 278,
	598, 279, 0, 283, 284, 285, 1515, 0, 288, 375,
	287, 289, 290, 638, 291, 280, 281, 292, 699, 293,
	676, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 380, 678, 679, 0, 0,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 385, 321,
	322, 323, 386, 680, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 1510, 329, 593, 0, 624, 613,
	614, 611, 612, 603, 0, 0, 591, 0, 0, 0,
	0, 589, 590, 0, 175, 176, 0, 177, 0, 0,
	599, 0, 641, 606, 0, 0, 602, 178, 179, 180,
	331, 656, 333, 657, 181, 658, 659, 0, 182, 337,
	338, 183, 184, 609, 640, 660, 661, 341, 0, 185,
	652, 0, 632, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 686, 193, 194, 195, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 395, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	0, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 687, 0, 0, 0,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 649, 651, 690,
	0, 356, 221, 0, 218, 0, 689, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 691, 222,
	223, 224, 692, 364, 225, 226, 227, 0, 229, 228,
	0, 654, 693, 230, 694, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 695, 238, 239,
	241, 240, 592, 0, 621, 650, 242, 674, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 696,
	248, 697, 644, 249, 250, 251, 252, 253, 0, 254,
	645, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	675, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 698,
	277, 278, 598, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 638, 291, 280, 281, 292,
	699, 293, 676, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 646, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 678, 679,
	0, 0, 310, 311, 647, 648, 619, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 639, 320, 0,
	385, 321, 322, 323, 386, 680, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 593, 0,
	624, 613, 614, 611, 612, 603, 0, 0, 591, 0,
	0, 0, 0, 589, 590, 0, 175, 176, 1372, 177,
	1009, 0, 599, 0, 641, 606, 0, 0, 602, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 686, 193, 194,
	195, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	395, 198, 662, 199, 663, 664, 0, 200, 0, 201,
	0, 202, 0, 0, 655, 204, 0, 205, 0, 0,
	0, 597, 206, 207, 208, 642, 643, 620, 687, 0,
	0, 0, 0, 0, 209, 210, 665, 666, 667, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 653, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 649,
	651, 690, 0, 356, 221, 0, 218, 0, 689, 219,
	668, 220, 669, 670, 671, 672, 673, 0, 631, 0,
	691, 222, 223, 224, 692, 364, 225, 226, 227, 0,
	229, 228, 0, 654, 693, 230, 694, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 695,
	238, 239, 241, 240, 592, 0, 621, 650, 242, 674,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	369, 696, 248, 697, 644, 249, 250, 251, 252, 253,
	0, 254, 645, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 675, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 698, 277, 278, 598, 279, 0, 283, 284, 285,
	286, 0, 288, 375, 287, 289, 290, 638, 291, 280,
	281, 292, 699, 293, 676, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 385, 321, 322, 323, 386, 680, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	593, 766, 0, 624, 613, 614, 611, 612, 603, 0,
	591, 0, 0, 0, 0, 589, 590, 0, 0, 175,
	176, 0, 177, 0, 599, 0, 0, 641, 606, 0,
	602, 0, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	686, 193, 194, 195, 0, 633, 634, 636, 0, 635,
	637, 196, 197, 395, 198, 662, 199, 663, 664, 0,
	200, 0, 201, 0, 202, 0, 0, 655, 204, 0,
	205, 0, 0, 0, 597, 206, 207, 208, 642, 643,
	620, 687, 0, 0, 0, 0, 0, 209, 210, 665,
	666, 667, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 653, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 649, 651, 690, 0, 356, 221, 0, 218,
	0, 689, 219, 668, 220, 669, 670, 671, 672, 673,
	0, 631, 0, 691, 222, 223, 224, 692, 364, 225,
	226, 227, 0, 229, 228, 0, 654, 693, 230, 694,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 695, 238, 239, 241, 240, 592, 0, 621,
	650, 242, 674, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 696, 248, 697, 644, 249, 250,
	251, 252, 253, 0, 254, 645, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 675, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 698, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	638, 291, 280, 281, 292, 699, 293, 676, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 385, 321, 322, 323, 386,
	680, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 593, 764, 0, 624, 613, 614, 611,
	612, 603, 0, 591, 0, 0, 0, 0, 589, 590,
	0, 0, 175, 176, 0, 177, 0, 599, 0, 0,
	641, 606, 0, 602, 0, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 0, 182, 337, 338, 183,
	184, 609, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 686, 193, 194, 195, 0, 633, 634,
	636, 0, 635, 637, 196, 197, 395, 198, 662, 199,
	663, 664, 0, 200, 0, 201, 0, 202, 0, 0,
	655, 204, 0, 205, 0, 0, 0, 597, 206, 207,
	208, 642, 643, 620, 687, 0, 0, 0, 0, 0,
	209, 210, 665, 666, 667, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 653, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 649, 651, 690, 0, 356,
	221, 0, 218, 0, 689, 219, 668, 220, 669, 670,
	671, 672, 673, 0, 631, 0, 691, 222, 223, 224,
	692, 364, 225, 226, 227, 0, 229, 228, 0, 654,
	693, 230, 694, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 366, 236, 695, 238, 239, 241, 240,
	592, 0, 621, 650, 242, 674, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 369, 696, 248, 697,
	644, 249, 250, 251, 252, 253, 0, 254, 645, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 675, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 698, 277, 278,
	598, 279, 0, 283, 284, 285, 286, 0, 288, 375,
	287, 289, 290, 638, 291, 280, 281, 292, 699, 293,
	676, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 380, 678, 679, 0, 0,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 385, 321,
	322, 323, 386, 680, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 593, 0, 624, 613,
	614, 611, 612, 603, 0, 0, 591, 0, 0, 0,
	0, 589, 590, 0, 175, 176, 0, 177, 0, 0,
	599, 0, 641, 606, 0, 0, 602, 178, 179, 180,
	331, 656, 333, 657, 181, 658, 659, 0, 182, 337,
	338, 183, 184, 609, 640, 660, 661, 341, 0, 185,
	652, 0, 632, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 686, 193, 194, 2452, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 395, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	0, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 687, 0, 0, 0,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 649, 651, 690,
	0, 356, 221, 0, 218, 0, 689, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 691, 222,
	223, 224, 692, 364, 225, 226, 227, 0, 229, 228,
	0, 654, 693, 230, 694, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 695, 238, 239,
	241, 240, 592, 0, 621, 650, 242, 674, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 696,
	248, 697, 644, 249, 250, 251, 252, 253, 0, 254,
	645, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	675, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 698,
	277, 278, 598, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 638, 291, 280, 281, 292,
	699, 293, 676, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 646, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 678, 679,
	0, 0, 310, 311, 647, 648, 619, 312, 313, 2451,
	315, 0, 0, 316, 317, 318, 319, 639, 320, 0,
	385, 321, 322, 323, 386, 680, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 593, 0,
	624, 613, 614, 611, 612, 603, 0, 0, 591, 0,
	0, 0, 0, 589, 590, 0, 175, 176, 0, 177,
	0, 0, 599, 0, 641, 606, 0, 0, 602, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 686, 193, 194,
	195, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	395, 198, 662, 199, 663, 664, 0, 200, 0, 201,
	0, 202, 0, 0, 655, 204, 0, 205, 0, 0,
	0, 597, 206, 207, 208, 642, 643, 620, 687, 0,
	0, 0, 0, 0, 209, 210, 665, 666, 667, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 653, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 649,
	651, 690, 0, 356, 221, 0, 218, 0, 689, 219,
	668, 220, 669, 670, 671, 672, 673, 0, 631, 0,
	691, 222, 223, 224, 692, 364, 225, 226, 227, 0,
	229, 228, 0, 654, 693, 230, 694, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 695,
	238, 239, 241, 240, 592, 0, 621, 650, 242, 674,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	369, 696, 248, 697, 644, 249, 250, 251, 252, 253,
	0, 254, 645, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 675, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 698, 277, 278, 598, 279, 0, 283, 284, 285,
	286, 0, 288, 375, 287, 289, 290, 638, 291, 280,
	281, 292, 699, 293, 676, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 385, 321, 322, 323, 386, 680, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	593, 0, 624, 613, 614, 611, 612, 603, 0, 0,
	591, 0, 0, 0, 0, 589, 590, 0, 175, 176,
	0, 177, 0, 0, 599, 0, 641, 606, 0, 0,
	602, 178, 179, 180, 2450, 656, 333, 657, 181, 658,
	659, 0, 182, 337, 338, 183, 184, 609, 640, 660,
	661, 341, 0, 185, 652, 0, 632, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 686,
	193, 194, 2452, 0, 633, 634, 636, 0, 635, 637,
	196, 197, 395, 198, 662, 199, 663, 664, 0, 200,
	0, 201, 0, 202, 0, 0, 655, 204, 0, 205,
	0, 0, 0, 597, 206, 207, 208, 642, 643, 620,
	687, 0, 0, 0, 0, 0, 209, 210, 665, 666,
	667, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	653, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 649, 651, 690, 0, 356, 221, 0, 218, 0,
	689, 219, 668, 220, 669, 670, 671, 672, 673, 0,
	631, 0, 691, 222, 223, 224, 692, 364, 225, 226,
	227, 0, 229, 228, 0, 654, 693, 230, 694, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 366,
	236, 695, 238, 239, 241, 240, 592, 0, 621, 650,
	242, 674, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 369, 696, 248, 697, 644, 249, 250, 251,
	252, 253, 0, 254, 645, 255, 372, 256, 0, 257,
	258, 259, 260, 261, 675, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 698, 277, 278, 598, 279, 0, 283,
	284, 285, 286, 0, 288, 375, 287, 289, 290, 638,
	291, 280, 281, 292, 699, 293, 676, 377, 294, 0,
	301, 295, 296, 282, 297, 300, 677, 298, 299, 646,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 380, 678, 679, 0, 0, 310, 311, 647, 648,
	619, 312, 313, 2451, 315, 0, 0, 316, 317, 318,
	319, 639, 320, 0, 385, 321, 322, 323, 386, 680,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 593, 0, 624, 613, 614, 611, 612, 603,
	0, 0, 591, 0, 0, 0, 0, 589, 590, 0,
	175, 176, 0, 177, 0, 0, 599, 0, 641, 606,
	0, 0, 602, 178, 179, 180, 331, 656, 333, 657,
	181, 658, 659, 0, 182, 337, 338, 183, 184, 609,
	640, 660, 661, 341, 0, 185, 652, 0, 632, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 686, 193, 194, 195, 0, 633, 634, 636, 0,
	635, 637, 196, 197, 395, 198, 662, 199, 663, 664,
	0, 200, 0, 201, 0, 202, 0, 0, 655, 204,
	0, 205, 0, 0, 0, 597, 206, 207, 208, 642,
	643, 620, 687, 0, 0, 0, 0, 0, 209, 210,
	665, 666, 667, 0, 211, 0, 212, 0, 0, 688,
	0, 213, 653, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 649, 651, 690, 0, 356, 221, 0,
	218, 0, 689, 219, 668, 220, 669, 670, 671, 672,
	673, 0, 631, 0, 691, 222, 223, 224, 692, 364,
	225, 226, 227, 0, 229, 228, 0, 654, 693, 230,
	694, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 366, 236, 695, 238, 239, 241, 240, 0, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 369, 696, 248, 697, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 372, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 698, 277, 278, 1529, 279,
	0, 283, 284, 285, 286, 0, 288, 375, 287, 289,
	290, 638, 291, 280, 281, 292, 699, 293, 676, 377,
	294, 0, 301, 295, 296, 282, 297, 300, 677, 298,
	299, 646, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 380, 678, 679, 0, 0, 310, 311,
	647, 648, 619, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 639, 320, 0, 385, 321, 322, 323,
	386, 680, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 624, 613, 614, 611,
	612, 603, 0, 0, 1527, 0, 0, 0, 0, 1525,
	1526, 0, 175, 176, 0, 177, 0, 0, 1528, 0,
	641, 606, 0, 0, 602, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 0, 182, 337, 338, 183,
	184, 0, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 686, 193, 194, 195, 0, 633, 634,
	636, 0, 635, 637, 196, 197, 395, 198, 662, 199,
	663, 664, 0, 200, 0, 201, 0, 202, 0, 0,
	655, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 642, 643, 620, 687, 0, 0, 0, 0, 0,
	209, 210, 665, 666, 667, 0, 211, 0, 212, 0,
	0, 688, 0, 213, 653, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 649, 651, 690, 0, 356,
	221, 0, 218, 0, 689, 219, 668, 220, 669, 670,
	671, 672, 673, 0, 631, 0, 691, 222, 223, 224,
	692, 364, 225, 226, 227, 0, 229, 228, 0, 654,
	693, 230, 694, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 366, 236, 695, 238, 239, 241, 240,
	0, 0, 621, 650, 242, 674, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 369, 696, 248, 697,
	644, 249, 250, 251, 252, 253, 0, 254, 645, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 675, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 698, 277, 278,
	1529, 279, 0, 283, 284, 285, 286, 0, 288, 375,
	287, 289, 290, 638, 291, 280, 281, 292, 699, 293,
	676, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 380, 678, 679, 0, 0,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 385, 321,
	322, 323, 386, 680, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 624, 613,
	614, 611, 612, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	1528, 0, 641, 606, 0, 0, 602, 178, 179, 180,
	0, 656, 333, 657, 181, 658, 659, 0, 182, 337,
	338, 183, 184, 609, 640, 660, 661, 341, 0, 185,
	652, 0, 632, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 686, 193, 194, 2452, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 395, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	0, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 687, 0, 0, 0,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 688, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 649, 651, 0,
	0, 356, 221, 0, 218, 0, 689, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 0, 222,
	223, 224, 692, 364, 225, 226, 227, 0, 229, 228,
	0, 654, 693, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 695, 238, 239,
	241, 240, 592, 0, 621, 650, 242, 674, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 696,
	248, 697, 644, 249, 250, 251, 252, 253, 0, 254,
	645, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	675, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 698,
	277, 278, 598, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 638, 291, 280, 281, 292,
	0, 293, 676, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 646, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 678, 679,
	0, 0, 310, 311, 647, 648, 619, 312, 313, 2451,
	315, 0, 0, 316, 317, 318, 319, 639, 320, 0,
	385, 321, 322, 323, 386, 680, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 589, 590, 0, 175, 176, 0, 177,
	0, 0, 599, 0, 641, 0, 0, 0, 602, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 640, 339, 340, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 686, 193, 194,
	195, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	395, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 642, 643, 0, 687, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 688, 0, 213, 653, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 649,
	651, 690, 0, 356, 221, 0, 218, 0, 689, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	691, 222, 223, 224, 692, 364, 225, 226, 227, 0,
	229, 228, 0, 654, 693, 230, 694, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 695,
	238, 239, 241, 240, 0, 0, 0, 650, 242, 368,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	369, 696, 248, 697, 644, 249, 250, 251, 252, 253,
	0, 254, 645, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 373, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 698, 277, 278, 374, 279, 0, 283, 284, 285,
	286, 0, 288, 375, 287, 289, 290, 638, 291, 280,
	281, 292, 699, 293, 376, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 378, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	381, 382, 0, 0, 310, 311, 647, 648, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 385, 321, 322, 323, 386, 387, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	815, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 2099, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 823, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 686,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 395, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	687, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 688, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 690, 0, 356, 221, 0, 218, 0,
	689, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 691, 222, 223, 224, 692, 364, 225, 226,
	227, 0, 229, 228, 0, 365, 693, 230, 694, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 366,
	236, 695, 238, 239, 241, 240, 0, 0, 0, 367,
	242, 368, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 369, 696, 248, 697, 370, 249, 250, 251,
	252, 253, 0, 254, 371, 255, 372, 256, 0, 257,
	258, 259, 260, 261, 373, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 698, 277, 278, 374, 279, 0, 283,
	284, 285, 286, 132, 288, 375, 287, 289, 290, 0,
	291, 280, 281, 292, 699, 293, 376, 377, 294, 0,
	301, 295, 296, 282, 297, 300, 378, 298, 299, 379,
	0, 302, 134, 303, 304, 305, 306, 307, 308, 309,
	0, 380, 381, 382, 0, 0, 310, 311, 383, 384,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 385, 321, 322, 323, 822, 387,
	0, 0, 324, 0, 0, 0, 126, 325, 326, 327,
	328, 329, 575, 127, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 118, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 395, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 364,
	225, 226, 227, 0, 229, 228, 0, 365, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 366, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 367, 242, 368, 243, 244, 0, 245, 0, 739,
	246, 0, 0, 247, 369, 0, 248, 0, 370, 249,
	250, 251, 252, 253, 0, 254, 371, 255, 372, 256,
	0, 257, 258, 259, 260, 261, 373, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 374, 279,
	0, 283, 284, 285, 286, 132, 288, 375, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 376, 377,
	294, 0, 301, 295, 296, 282, 297, 300, 378, 298,
	299, 379, 0, 302, 134, 303, 304, 305, 306, 307,
	308, 309, 0, 380, 381, 382, 0, 0, 310, 311,
	383, 384, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 385, 321, 322, 323,
	822, 387, 0, 0, 324, 0, 0, 0, 126, 325,
	326, 327, 328, 329, 0, 127, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 733, 0, 1088, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 395, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 225, 226, 227, 0, 229, 228, 0, 365,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 366, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 367, 242, 368, 243, 244, 0, 245,
	0, 739, 246, 0, 0, 247, 369, 0, 248, 0,
	370, 249, 250, 251, 252, 253, 0, 254, 371, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 373, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	374, 279, 0, 283, 284, 285, 286, 132, 288, 375,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	376, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	378, 298, 299, 379, 0, 302, 134, 303, 304, 305,
	306, 307, 308, 309, 0, 380, 381, 382, 0, 0,
	310, 311, 383, 384, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 385, 321,
	322, 323, 822, 387, 0, 0, 324, 0, 0, 0,
	126, 325, 326, 327, 328, 329, 575, 127, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 733, 0,
	1088, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 395, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 225, 226, 227, 0, 229, 228,
	0, 365, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 367, 242, 368, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 0,
	248, 0, 370, 249, 250, 251, 252, 253, 0, 254,
	371, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	373, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 374, 279, 0, 283, 284, 285, 286, 132,
	288, 375, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 376, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 378, 298, 299, 379, 0, 302, 134, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 381, 382,
	0, 0, 310, 311, 383, 384, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	385, 321, 322, 323, 822, 387, 0, 0, 324, 0,
	0, 0, 126, 325, 326, 327, 328, 329, 1849, 127,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 118, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	395, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 364, 225, 226, 227, 0,
	229, 228, 0, 365, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 367, 242, 368,
	243, 244, 0, 245, 0, 739, 246, 0, 0, 247,
	369, 0, 248, 0, 370, 249, 250, 251, 252, 253,
	0, 254, 371, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 373, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 374, 279, 0, 283, 284, 285,
	286, 0, 288, 375, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 376, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 378, 298, 299, 379, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	381, 382, 0, 0, 310, 311, 383, 384, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 385, 321, 322, 323, 386, 387, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	732, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 733, 0, 738, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 395, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 225, 226,
	227, 0, 229, 228, 0, 365, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 366,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 367,
	242, 368, 243, 244, 0, 245, 0, 739, 246, 0,
	0, 247, 369, 0, 248, 0, 370, 249, 250, 251,
	252, 253, 0, 254, 371, 255, 372, 256, 0, 257,
	258, 259, 260, 261, 373, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 374, 279, 0, 283,
	284, 285, 286, 0, 288, 375, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 376, 377, 294, 0,
	301, 295, 296, 282, 297, 300, 378, 298, 299, 379,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 380, 381, 382, 0, 0, 310, 311, 383, 384,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 385, 321, 322, 323, 386, 387,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 733, 0, 738, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 395, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 225,
	226, 227, 0, 229, 228, 0, 365, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	367, 242, 368, 243, 244, 0, 245, 0, 739, 246,
	0, 0, 247, 369, 0, 248, 0, 370, 249, 250,
	251, 252, 253, 0, 254, 371, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 373, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 374, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 376, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 378, 298, 299,
	379, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 381, 382, 0, 0, 310, 311, 383,
	384, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 385, 321, 322, 323, 386,
	387, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 733, 0, 738, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 395, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 364,
	225, 226, 227, 0, 229, 228, 0, 365, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 366, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 367, 242, 368, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 369, 0, 248, 0, 370, 249,
	250, 251, 252, 253, 0, 254, 371, 255, 372, 256,
	0, 257, 258, 259, 260, 261, 373, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 374, 279,
	0, 283, 284, 285, 286, 0, 288, 375, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 376, 377,
	294, 0, 301, 295, 296, 282, 297, 300, 378, 298,
	299, 379, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 380, 381, 382, 0, 0, 310, 311,
	383, 384, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 385, 321, 322, 323,
	386, 387, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 1204,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 395, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 364,
	225, 226, 227, 0, 229, 228, 0, 365, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 366, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 367, 242, 368, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 369, 0, 248, 0, 370, 249,
	250, 251, 252, 253, 0, 254, 371, 255, 372, 256,
	0, 257, 258, 259, 260, 261, 373, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 374, 279,
	0, 283, 284, 285, 286, 0, 288, 375, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 376, 377,
	294, 0, 301, 295, 296, 282, 297, 300, 378, 298,
	299, 379, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 380, 381, 382, 0, 0, 310, 311,
	383, 384, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 385, 321, 322, 323,
	386, 387, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 1667, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 395, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 225, 226, 227, 0, 229, 228, 0, 365, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 366, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 367, 242, 368, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 369, 0, 248, 0, 370,
	249, 250, 251, 252, 253, 0, 254, 371, 255, 372,
	256, 0, 257, 258, 259, 260, 261, 373, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 374,
	279, 0, 283, 284, 285, 286, 0, 288, 375, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 376,
	377, 294, 0, 301, 295, 296, 282, 297, 300, 378,
	298, 299, 379, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 380, 381, 382, 0, 0, 310,
	311, 383, 384, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 385, 321, 322,
	323, 386, 387, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 2015,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 395, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 225, 226, 227, 0, 229, 228, 0, 365,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 366, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 367, 242, 368, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 369, 0, 248, 0,
	370, 249, 250, 251, 252, 253, 0, 254, 371, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 373, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	374, 279, 0, 283, 284, 285, 286, 0, 288, 375,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	376, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	378, 298, 299, 379, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 380, 381, 382, 0, 0,
	310, 311, 383, 384, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 385, 321,
	322, 323, 386, 387, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 624, 613, 614,
	611, 612, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	1091, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	656, 333, 657, 181, 658, 659, 0, 182, 337, 338,
	183, 184, 0, 0, 660, 661, 341, 0, 185, 342,
	0, 823, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 686, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 662,
	199, 663, 664, 0, 200, 0, 201, 0, 202, 0,
	0, 655, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 620, 687, 0, 0, 0, 0,
	0, 209, 210, 665, 666, 667, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 690, 0,
	356, 221, 0, 218, 0, 689, 219, 668, 220, 669,
	670, 671, 672, 673, 0, 631, 0, 691, 222, 223,
	224, 692, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 693, 230, 694, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 695, 238, 239, 241,
	240, 0, 0, 621, 367, 242, 674, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 696, 248,
	697, 370, 249, 250, 251, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 675,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 698, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 699,
	293, 676, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 677, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 678, 679, 0,
	0, 310, 311, 383, 384, 619, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 680, 0, 480, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 168, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 225, 226, 227, 0, 229, 228,
	0, 365, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 367, 242, 368, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 0,
	248, 0, 370, 249, 250, 251, 252, 253, 0, 254,
	371, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	373, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 374, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 376, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 378, 298, 299, 379, 0, 302, 167, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 381, 382,
	0, 0, 310, 311, 383, 384, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	385, 321, 322, 323, 386, 387, 0, 165, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 171, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 168,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 225, 226, 227, 0, 229,
	228, 0, 365, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 367, 242, 368, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	0, 248, 0, 370, 249, 250, 251, 252, 253, 0,
	254, 371, 255, 372, 256, 0, 257, 258, 259, 260,
	261, 373, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 374, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 376, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 378, 298, 299, 379, 0, 302, 167,
	303, 304, 305, 306, 307, 308, 309, 0, 380, 381,
	382, 0, 0, 310, 311, 383, 384, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 385, 321, 322, 323, 386, 387, 0, 172, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 171, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 168, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 225, 226, 227, 0, 229, 228,
	0, 365, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 367, 242, 368, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 0,
	248, 0, 370, 249, 250, 251, 252, 253, 0, 254,
	371, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	373, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 374, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 376, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 378, 298, 299, 379, 0, 302, 167, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 381, 382,
	0, 0, 310, 311, 383, 384, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	385, 321, 322, 323, 386, 387, 0, 172, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 171, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 367, 242, 368, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 0, 248,
	0, 370, 249, 250, 251, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 373,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 376, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 381, 382, 0,
	0, 310, 311, 383, 384, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 387, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 873, 0, 818,
	877, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 823, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 686, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 395,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 687, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 688, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	690, 0, 356, 221, 0, 218, 0, 689, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 691,
	222, 223, 224, 692, 364, 225, 226, 227, 0, 229,
	228, 0, 365, 693, 230, 694, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 236, 695, 238,
	239, 241, 240, 0, 0, 0, 367, 242, 368, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	696, 248, 697, 370, 249, 250, 251, 252, 253, 0,
	254, 371, 255, 372, 256, 0, 257, 258, 259, 260,
	261, 373, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	698, 277, 278, 374, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 289, 290, 0, 291, 280, 281,
	292, 699, 293, 376, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 378, 298, 299, 379, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 380, 381,
	382, 0, 0, 310, 311, 383, 384, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 385, 321, 322, 323, 386, 387, 818, 877, 324,
	0, 0, 875, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 823, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 686, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 687, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 688, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 690, 0,
	356, 221, 0, 218, 0, 689, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 691, 222, 223,
	224, 692, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 693, 230, 694, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 695, 238, 239, 241,
	240, 0, 0, 0, 367, 242, 368, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 696, 248,
	697, 370, 249, 250, 251, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 373,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 698, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 699,
	293, 376, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 381, 382, 0,
	0, 310, 311, 383, 384, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 387, 818, 877, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 823,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 686, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 395, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 687, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	688, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 690, 0, 356, 221,
	0, 218, 0, 689, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 691, 222, 223, 224, 692,
	364, 225, 226, 227, 0, 229, 228, 0, 365, 693,
	230, 694, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 366, 236, 695, 238, 239, 241, 240, 0,
	0, 0, 367, 242, 368, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 369, 696, 248, 697, 370,
	249, 250, 251, 252, 253, 0, 254, 371, 255, 372,
	256, 0, 257, 258, 259, 260, 261, 373, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 698, 277, 278, 374,
	279, 0, 283, 284, 285, 286, 0, 288, 375, 287,
	289, 290, 0, 291, 280, 281, 292, 699, 293, 376,
	377, 294, 0, 301, 295, 296, 282, 297, 300, 378,
	298, 299, 379, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 380, 381, 382, 0, 0, 310,
	311, 383, 384, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 385, 321, 322,
	323, 386, 387, 818, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 823, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	686, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 395, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 687, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 688, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 690, 0, 356, 221, 0, 218,
	0, 689, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 691, 222, 223, 224, 692, 364, 225,
	226, 227, 0, 229, 228, 0, 365, 693, 230, 694,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 695, 238, 239, 241, 240, 0, 0, 0,
	367, 242, 368, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 696, 248, 697, 370, 249, 250,
	251, 252, 253, 0, 254, 371, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 373, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 698, 277, 278, 374, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	0, 291, 280, 281, 292, 699, 293, 376, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 378, 298, 299,
	379, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 381, 382, 0, 0, 310, 311, 383,
	384, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 385, 321, 322, 323, 386,
	387, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 1605, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 1603, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 395, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 1644,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 1608, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 1642, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 225, 226, 227,
	0, 229, 228, 0, 365, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 367, 242,
	368, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 369, 0, 248, 0, 370, 249, 250, 251, 252,
	253, 0, 254, 371, 255, 372, 256, 1607, 257, 258,
	259, 260, 261, 373, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 374, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 376, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 378, 298, 299, 379, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 381, 382, 0, 0, 310, 311, 383, 384, 0,
	312, 313, 314, 315, 0, 1643, 316, 317, 318, 319,
	0, 320, 0, 385, 321, 322, 323, 386, 387, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 1605,
	185, 342, 0, 0, 1600, 186, 187, 188, 0, 189,
	1603, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 395,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 1608, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 1599, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 225, 226, 227, 0, 229,
	228, 0, 365, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 367, 242, 368, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	0, 248, 0, 370, 249, 250, 251, 252, 253, 0,
	254, 371, 255, 372, 256, 1607, 257, 258, 259, 260,
	261, 373, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 374, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 376, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 378, 298, 299, 379, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 380, 381,
	382, 0, 0, 310, 311, 383, 384, 0, 312, 313,
	314, 315, 0, 1606, 316, 317, 318, 319, 0, 320,
	0, 385, 321, 322, 323, 386, 387, 0, 793, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	395, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 364, 225, 226, 227, 0,
	229, 228, 0, 365, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 367, 242, 368,
	243, 244, 0, 245, 0, 739, 246, 0, 0, 247,
	369, 0, 248, 0, 370, 249, 250, 251, 252, 253,
	0, 254, 371, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 373, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 374, 279, 0, 283, 284, 285,
	286, 0, 288, 375, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 376, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 378, 298, 299, 379, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	381, 382, 0, 0, 310, 311, 383, 384, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 385, 321, 322, 323, 386, 387, 0, 745,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 395, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	747, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 225, 226, 227,
	0, 229, 228, 0, 365, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 367, 242,
	368, 243, 244, 0, 245, 0, 739, 246, 0, 0,
	247, 369, 0, 248, 0, 370, 249, 250, 251, 252,
	253, 0, 254, 371, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 373, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 374, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 376, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 378, 298, 299, 379, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 381, 382, 0, 0, 310, 311, 383, 384, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 385, 321, 322, 323, 386, 387, 0,
	741, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 395, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 743, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 225, 226,
	227, 0, 229, 228, 0, 365, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 366,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 367,
	242, 368, 243, 244, 0, 245, 0, 739, 246, 0,
	0, 247, 369, 0, 248, 0, 370, 249, 250, 251,
	252, 253, 0, 254, 371, 255, 372, 256, 0, 257,
	258, 259, 260, 261, 373, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 374, 279, 0, 283,
	284, 285, 286, 0, 288, 375, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 376, 377, 294, 0,
	301, 295, 296, 282, 297, 300, 378, 298, 299, 379,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 380, 381, 382, 0, 0, 310, 311, 383, 384,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 385, 321, 322, 323, 386, 387,
	0, 412, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 411, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 395, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 225,
	226, 227, 0, 229, 228, 0, 365, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	367, 242, 368, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 0, 248, 0, 370, 249, 250,
	251, 252, 253, 0, 254, 371, 255, 372, 410, 0,
	257, 258, 259, 260, 261, 373, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 374, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 376, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 378, 298, 299,
	379, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 381, 382, 0, 0, 310, 311, 383,
	384, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 385, 321, 322, 323, 386,
	387, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 1588, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 395, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 225, 226, 227,
	0, 229, 228, 0, 365, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 367, 242,
	368, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 369, 0, 248, 0, 370, 249, 250, 251, 252,
	253, 0, 254, 371, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 373, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 374, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 376, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 378, 298, 299, 379, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 381, 382, 0, 0, 310, 311, 383, 384, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 385, 321, 322, 323, 386, 387, 172,
	2160, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 395,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 225, 226, 227, 0, 229,
	228, 0, 365, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 367, 242, 368, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	0, 248, 0, 370, 249, 250, 251, 252, 253, 0,
	254, 371, 255, 372, 256, 0, 257, 258, 259, 260,
	261, 373, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 374, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 376, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 378, 298, 299, 379, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 380, 381,
	382, 0, 0, 310, 311, 383, 384, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 385, 321, 322, 323, 386, 387, 172, 2160, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 367, 242, 368, 243, 244, 0,
	245, 0, 0, 2157, 0, 0, 247, 369, 0, 248,
	0, 370, 249, 250, 251, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 373,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 376, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 381, 382, 0,
	0, 310, 311, 383, 384, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 387, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 395, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 225, 226, 227, 0, 229, 228, 0, 365, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 366, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 367, 242, 368, 243, 244, 0, 245, 0,
	739, 246, 0, 0, 247, 369, 0, 248, 0, 370,
	249, 250, 251, 252, 253, 0, 254, 371, 255, 372,
	256, 0, 257, 258, 259, 260, 261, 373, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 374,
	279, 0, 283, 284, 285, 286, 0, 288, 375, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 376,
	377, 294, 0, 301, 295, 296, 282, 297, 300, 378,
	298, 299, 379, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 380, 381, 382, 0, 0, 310,
	311, 383, 384, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 385, 321, 322,
	323, 386, 387, 0, 1361, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 395, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 225, 226, 227, 0, 229, 228, 0, 365,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 366, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 367, 242, 368, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 369, 0, 248, 0,
	370, 249, 250, 251, 252, 253, 0, 254, 371, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 373, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	374, 279, 0, 283, 284, 285, 286, 0, 288, 375,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	376, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	378, 298, 299, 379, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 380, 381, 382, 0, 0,
	310, 311, 383, 384, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 385, 321,
	322, 323, 386, 387, 0, 1359, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 367, 242, 368, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 0, 248,
	0, 370, 249, 250, 251, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 373,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 376, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 381, 382, 0,
	0, 310, 311, 383, 384, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 387, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 1341, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 395, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 225, 226, 227, 0, 229, 228, 0, 365, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 366, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 367, 242, 368, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 369, 0, 248, 0, 370,
	249, 250, 251, 252, 253, 0, 254, 371, 255, 372,
	256, 0, 257, 258, 259, 260, 261, 373, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 374,
	279, 0, 283, 284, 285, 286, 0, 288, 375, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 376,
	377, 294, 0, 301, 295, 296, 282, 297, 300, 378,
	298, 299, 379, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 380, 381, 382, 0, 0, 310,
	311, 383, 384, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 385, 321, 322,
	323, 386, 387, 0, 506, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 852, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 395, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 225, 226, 227, 0, 229, 228, 0, 365,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 366, 508, 0, 238, 239, 241, 240,
	0, 0, 0, 367, 242, 368, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 369, 0, 248, 0,
	370, 249, 250, 251, 252, 253, 0, 254, 371, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 373, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	374, 279, 0, 283, 284, 285, 286, 0, 288, 375,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	376, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	378, 298, 299, 379, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 503, 381, 382, 0, 0,
	310, 311, 383, 384, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 385, 321,
	322, 323, 386, 387, 0, 1218, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 1217, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 367, 242, 368, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 0, 248,
	0, 370, 249, 250, 251, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 373,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 376, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 381, 382, 0,
	0, 310, 311, 383, 384, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 387, 0, 506, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 852, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 395, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 225, 226, 227, 0, 229, 228,
	0, 365, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 508, 0, 238, 239,
	241, 240, 0, 0, 0, 367, 242, 368, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 0,
	248, 0, 370, 249, 250, 251, 252, 253, 0, 254,
	371, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	373, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 374, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 376, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 378, 298, 299, 379, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 503, 381, 382,
	0, 0, 310, 853, 383, 384, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	385, 321, 322, 323, 386, 387, 0, 506, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	497, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 395,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 225, 226, 227, 0, 229,
	228, 0, 365, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 508, 0, 238,
	239, 241, 240, 0, 0, 0, 367, 242, 368, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	0, 248, 0, 370, 249, 250, 251, 252, 253, 0,
	254, 371, 255, 372, 256, 0, 257, 258, 259, 260,
	261, 373, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 374, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 836, 290, 0, 291, 280, 281,
	292, 0, 293, 376, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 378, 298, 299, 379, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 503, 381,
	382, 0, 0, 310, 311, 383, 384, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 385, 321, 322, 323, 386, 387, 0, 811, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	395, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 810,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 364, 225, 226, 227, 0,
	229, 228, 0, 365, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 367, 242, 368,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	369, 0, 248, 0, 370, 249, 250, 251, 252, 253,
	0, 254, 371, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 373, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 374, 279, 0, 283, 284, 285,
	286, 0, 288, 375, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 376, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 378, 298, 299, 379, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	381, 382, 0, 0, 310, 311, 383, 384, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 385, 321, 322, 323, 386, 387, 0, 808,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 395, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	807, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 225, 226, 227,
	0, 229, 228, 0, 365, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 367, 242,
	368, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 369, 0, 248, 0, 370, 249, 250, 251, 252,
	253, 0, 254, 371, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 373, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 374, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 376, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 378, 298, 299, 379, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 381, 382, 0, 0, 310, 311, 383, 384, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 385, 321, 322, 323, 386, 387, 0,
	804, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 395, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 803, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 225, 226,
	227, 0, 229, 228, 0, 365, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 366,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 367,
	242, 368, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 369, 0, 248, 0, 370, 249, 250, 251,
	252, 253, 0, 254, 371, 255, 372, 256, 0, 257,
	258, 259, 260, 261, 373, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 374, 279, 0, 283,
	284, 285, 286, 0, 288, 375, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 376, 377, 294, 0,
	301, 295, 296, 282, 297, 300, 378, 298, 299, 379,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 380, 381, 382, 0, 0, 310, 311, 383, 384,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 385, 321, 322, 323, 386, 387,
	0, 801, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 395, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 800, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 225,
	226, 227, 0, 229, 228, 0, 365, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	367, 242, 368, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 0, 248, 0, 370, 249, 250,
	251, 252, 253, 0, 254, 371, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 373, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 374, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 376, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 378, 298, 299,
	379, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 381, 382, 0, 0, 310, 311, 383,
	384, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 385, 321, 322, 323, 386,
	387, 0, 797, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 395, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 796, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 364,
	225, 226, 227, 0, 229, 228, 0, 365, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 366, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 367, 242, 368, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 369, 0, 248, 0, 370, 249,
	250, 251, 252, 253, 0, 254, 371, 255, 372, 256,
	0, 257, 258, 259, 260, 261, 373, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 374, 279,
	0, 283, 284, 285, 286, 0, 288, 375, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 376, 377,
	294, 0, 301, 295, 296, 282, 297, 300, 378, 298,
	299, 379, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 380, 381, 382, 0, 0, 310, 311,
	383, 384, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 385, 321, 322, 323,
	386, 387, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	785, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 395, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 225, 226,
	227, 0, 229, 228, 0, 365, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 366,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 367,
	242, 368, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 369, 0, 248, 0, 370, 249, 250, 251,
	252, 253, 0, 254, 371, 255, 372, 256, 0, 257,
	258, 259, 260, 261, 373, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 374, 279, 0, 283,
	284, 285, 286, 0, 288, 375, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 376, 377, 294, 0,
	301, 295, 296, 282, 297, 300, 378, 298, 299, 379,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 380, 381, 382, 0, 0, 310, 311, 383, 384,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 385, 321, 322, 323, 386, 387,
	0, 783, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 395, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 782, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 225,
	226, 227, 0, 229, 228, 0, 365, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	367, 242, 368, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 0, 248, 0, 370, 249, 250,
	251, 252, 253, 0, 254, 371, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 373, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 374, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 376, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 378, 298, 299,
	379, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 381, 382, 0, 0, 310, 311, 383,
	384, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 385, 321, 322, 323, 386,
	387, 0, 779, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 395, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 364,
	225, 226, 227, 0, 229, 228, 0, 365, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 366, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 367, 242, 368, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 369, 0, 248, 0, 370, 249,
	250, 251, 252, 253, 0, 254, 371, 255, 372, 256,
	0, 257, 258, 259, 260, 261, 373, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 374, 279,
	0, 283, 284, 285, 286, 0, 288, 375, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 376, 377,
	294, 0, 301, 295, 296, 282, 297, 300, 378, 298,
	299, 379, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 380, 381, 382, 0, 0, 310, 311,
	383, 384, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 385, 321, 322, 323,
	386, 387, 0, 777, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 395, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 225, 226, 227, 0, 229, 228, 0, 365, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 366, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 367, 242, 368, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 369, 0, 248, 0, 370,
	249, 250, 251, 252, 253, 0, 254, 371, 255, 372,
	256, 0, 257, 258, 259, 260, 261, 373, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 374,
	279, 0, 283, 284, 285, 286, 0, 288, 375, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 376,
	377, 294, 0, 301, 295, 296, 282, 297, 300, 378,
	298, 299, 379, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 380, 381, 382, 0, 0, 310,
	311, 383, 384, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 385, 321, 322,
	323, 386, 387, 0, 773, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 395, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 775, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 364, 225, 226, 227, 0, 229, 228, 0, 365,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 366, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 367, 242, 368, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 369, 0, 248, 0,
	370, 249, 250, 251, 252, 253, 0, 254, 371, 255,
	372, 256, 0, 257, 258, 259, 260, 261, 373, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	374, 279, 0, 283, 284, 285, 286, 0, 288, 375,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	376, 377, 294, 0, 301, 295, 296, 282, 297, 300,
	378, 298, 299, 379, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 380, 381, 382, 0, 0,
	310, 311, 383, 384, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 385, 321,
	322, 323, 386, 387, 0, 751, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 753, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 367, 242, 368, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 0, 248,
	0, 370, 249, 250, 251, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 373,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 376, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 381, 382, 0,
	0, 310, 311, 383, 384, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 387, 0, 749, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 395, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 364, 225, 226, 227, 0, 229, 228,
	0, 365, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 366, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 367, 242, 368, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 369, 0,
	248, 0, 370, 249, 250, 251, 252, 253, 0, 254,
	371, 255, 372, 256, 0, 257, 258, 259, 260, 261,
	373, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 374, 279, 0, 283, 284, 285, 286, 0,
	288, 375, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 376, 377, 294, 0, 301, 295, 296, 282,
	297, 300, 378, 298, 299, 379, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 380, 381, 382,
	0, 0, 310, 311, 383, 384, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	385, 321, 322, 323, 386, 387, 0, 506, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	497, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 395,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 225, 226, 227, 0, 229,
	228, 0, 365, 0, 230, 0, 0, 496, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 508, 0, 238,
	239, 241, 240, 0, 0, 0, 367, 242, 368, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	0, 248, 0, 370, 249, 250, 251, 252, 253, 0,
	254, 371, 255, 372, 256, 0, 257, 258, 259, 260,
	261, 373, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 498, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 499, 290, 0, 291, 280, 281,
	292, 0, 293, 376, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 378, 298, 299, 379, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 503, 381,
	382, 0, 0, 310, 501, 383, 384, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 385, 321, 322, 323, 386, 387, 0, 488, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	395, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 364, 225, 226, 227, 0,
	229, 228, 0, 365, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 366, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 367, 242, 368,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	369, 0, 248, 0, 370, 249, 250, 251, 252, 253,
	0, 254, 371, 255, 372, 256, 0, 257, 258, 259,
	260, 261, 373, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 374, 279, 0, 489, 284, 285,
	286, 0, 288, 375, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 376, 377, 294, 0, 301, 295,
	296, 282, 297, 300, 378, 298, 299, 379, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 380,
	381, 382, 0, 0, 310, 311, 383, 384, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 385, 321, 322, 323, 386, 387, 0, 486,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 395, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 225, 226, 227,
	0, 229, 228, 0, 365, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 367, 242,
	368, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 369, 0, 248, 0, 370, 249, 250, 251, 252,
	253, 0, 254, 371, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 373, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 374, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 376, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 378, 298, 299, 379, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 381, 382, 0, 0, 310, 311, 383, 384, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 385, 321, 322, 323, 386, 387, 0,
	478, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 395, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 364, 225, 226,
	227, 0, 229, 228, 0, 365, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 366,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 367,
	242, 368, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 369, 0, 248, 0, 370, 249, 250, 251,
	252, 253, 0, 254, 371, 255, 372, 256, 0, 257,
	258, 259, 260, 261, 373, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 374, 279, 0, 283,
	284, 285, 286, 0, 288, 375, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 376, 377, 294, 0,
	301, 295, 296, 282, 297, 300, 378, 298, 299, 379,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 380, 381, 382, 0, 0, 310, 311, 383, 384,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 385, 321, 322, 323, 386, 387,
	0, 435, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 395, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 225,
	226, 227, 0, 229, 228, 0, 365, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	367, 242, 368, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 0, 248, 0, 370, 249, 250,
	251, 252, 253, 0, 254, 371, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 373, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 374, 279, 0,
	283, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 376, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 378, 298, 299,
	379, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 381, 382, 0, 0, 310, 311, 383,
	384, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 385, 321, 322, 323, 386,
	387, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 395, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 225, 226, 227,
	0, 229, 228, 0, 365, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 367, 242,
	368, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 369, 0, 248, 0, 370, 249, 250, 251, 252,
	253, 0, 254, 371, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 373, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 374, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 376, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 378, 298, 299, 379, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 381, 382, 0, 0, 310, 311, 383, 384, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 385, 321, 322, 323, 386, 387, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 395,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 1896, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 225, 226, 227, 0, 229,
	228, 0, 365, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 367, 242, 368, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	0, 248, 0, 370, 249, 250, 251, 252, 253, 0,
	254, 371, 255, 372, 256, 0, 257, 258, 259, 260,
	261, 373, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 374, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 376, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 378, 298, 299, 379, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 380, 381,
	382, 0, 0, 310, 311, 383, 384, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 385, 321, 322, 323, 386, 387, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 1894, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 367, 242, 368, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 0, 248,
	0, 370, 249, 250, 251, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 260, 261, 373,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 374, 279, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 376, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 381, 382, 0,
	0, 310, 311, 383, 384, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 387, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 395, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 1883, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	364, 225, 226, 227, 0, 229, 228, 0, 365, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 366, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 367, 242, 368, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 369, 0, 248, 0, 370,
	249, 250, 251, 252, 253, 0, 254, 371, 255, 372,
	256, 0, 257, 258, 259, 260, 261, 373, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 374,
	279, 0, 283, 284, 285, 286, 0, 288, 375, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 376,
	377, 294, 0, 301, 295, 296, 282, 297, 300, 378,
	298, 299, 379, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 380, 381, 382, 0, 0, 310,
	311, 383, 384, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 385, 321, 322,
	323, 386, 387, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 395, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 364, 225,
	226, 227, 0, 229, 228, 0, 365, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	366, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	367, 242, 368, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 369, 0, 248, 0, 370, 249, 250,
	251, 252, 253, 0, 254, 371, 255, 372, 256, 0,
	257, 258, 259, 260, 261, 373, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 374, 279, 0,
	489, 284, 285, 286, 0, 288, 375, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 376, 377, 294,
	0, 301, 295, 296, 282, 297, 300, 378, 298, 299,
	379, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 380, 381, 382, 0, 0, 310, 311, 383,
	384, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 385, 321, 322, 323, 386,
	387, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 1228, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 395, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 364, 225, 226, 227,
	0, 229, 228, 0, 365, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 366, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 367, 242,
	368, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 369, 0, 248, 0, 370, 249, 250, 251, 252,
	253, 0, 254, 371, 255, 372, 256, 0, 257, 258,
	259, 260, 261, 373, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 374, 279, 0, 283, 284,
	285, 286, 0, 288, 375, 287, 289, 290, 0, 0,
	280, 281, 292, 0, 293, 376, 377, 294, 0, 301,
	295, 296, 282, 297, 300, 378, 298, 299, 379, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	380, 381, 382, 0, 0, 310, 311, 383, 384, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 385, 321, 322, 323, 386, 387, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 395,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 364, 225, 226, 227, 0, 229,
	228, 0, 365, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 366, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 367, 242, 368, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 369,
	0, 248, 0, 370, 249, 250, 251, 252, 253, 0,
	254, 371, 255, 372, 256, 0, 257, 258, 259, 260,
	261, 373, 715, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 374, 279, 0, 283, 284, 285, 286,
	0, 288, 375, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 376, 377, 294, 0, 301, 295, 296,
	282, 297, 300, 378, 298, 299, 379, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 380, 381,
	382, 0, 0, 310, 311, 383, 384, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 385, 321, 322, 323, 386, 387, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 395, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 364, 225, 226, 227, 0, 229, 228, 0,
	365, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 366, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 367, 242, 368, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 369, 0, 248,
	0, 370, 249, 250, 0, 252, 253, 0, 254, 371,
	255, 372, 256, 0, 257, 258, 259, 0, 261, 373,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 374, 0, 0, 283, 284, 285, 286, 0, 288,
	375, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 376, 377, 294, 0, 301, 295, 296, 282, 297,
	300, 378, 298, 299, 379, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 380, 381, 382, 0,
	0, 310, 311, 383, 384, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 385,
	321, 322, 323, 386, 387, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 942, 943, 0,
	972, 973, 974, 982, 983, 984, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	942, 943, 0, 972, 973, 974, 982, 983, 984, 0,
	0, 0, 0, 0, 944, 0, 975, 0, 0, 0,
	964, 0, 0, 945, 961, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 968, 969, 970, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 987, 967, 968, 969, 970, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 987, 977, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	977, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	942, 943, 0, 972, 973, 974, 982, 983, 984, 0,
	0, 0, 0, 980, 0, 971, 975, 0, 0, 0,
	0, 0, 0, 945, 0, 0, 986, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 944, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 956, 957, 963, 962, 958, 959,
	960, 981, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 967, 968, 969, 970, 0, 0,
	1783, 0, 0, 950, 978, 0, 0, 956, 957, 963,
	962, 958, 959, 960, 981, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 979, 987, 0, 0, 2376,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 942, 943, 0, 972, 973,
	974, 982, 983, 984, 0, 0, 0, 0, 0, 0,
	977, 975, 0, 0, 0, 0, 965, 0, 945, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 943, 0, 972, 973, 974, 982, 983, 984,
	0, 976, 944, 0, 0, 0, 0, 975, 964, 0,
	0, 0, 961, 0, 945, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 944, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 961, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	968, 969, 970, 0, 0, 0, 980, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	979, 987, 0, 0, 0, 967, 968, 969, 970, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 979, 987, 0, 0,
	0, 965, 0, 0, 978, 0, 0, 956, 957, 963,
	962, 958, 959, 960, 981, 985, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 976, 0, 0, 2330,
	0, 977, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 0, 0,
	0, 942, 943, 0, 972, 973, 974, 982, 983, 984,
	0, 980, 0, 0, 0, 0, 971, 975, 0, 0,
	0, 0, 0, 0, 945, 0, 0, 986, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 944, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 978,
	0, 0, 956, 957, 963, 962, 958, 959, 960, 981,
	0, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	0, 0, 0, 0, 2300, 967, 968, 969, 970, 0,
	0, 0, 0, 0, 950, 978, 0, 0, 956, 957,
	963, 962, 958, 959, 960, 981, 0, 955, 953, 954,
	946, 947, 948, 949, 951, 952, 979, 987, 0, 0,
	2295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 942, 943, 0, 972,
	973, 974, 982, 983, 984, 0, 0, 0, 0, 0,
	0, 977, 975, 0, 0, 0, 0, 965, 0, 945,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 943, 0, 972, 973, 974, 982, 983,
	984, 0, 976, 944, 0, 0, 0, 0, 975, 964,
	0, 0, 0, 961, 0, 945, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 944,
	0, 0, 0, 0, 0, 964, 0, 0, 0, 961,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 968, 969, 970, 0, 0, 0, 980, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 987, 0, 0, 0, 967, 968, 969, 970,
	0, 0, 0, 0, 0, 950, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 979, 987, 0,
	0, 0, 965, 0, 0, 978, 0, 0, 956, 957,
	963, 962, 958, 959, 960, 981, 985, 955, 953, 954,
	946, 947, 948, 949, 951, 952, 0, 976, 0, 0,
	2291, 0, 977, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 942, 943, 0, 972, 973, 974, 982, 983,
	984, 0, 980, 0, 0, 0, 0, 971, 975, 0,
	0, 0, 0, 0, 0, 945, 0, 0, 986, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 980, 944,
	0, 0, 0, 0, 0, 964, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 0, 0, 956, 957, 963, 962, 958, 959, 960,
	981, 0, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 0, 0, 0, 0, 2233, 967, 968, 969, 970,
	0, 0, 0, 0, 0, 950, 978, 0, 0, 956,
	957, 963, 962, 958, 959, 960, 981, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 979, 987, 0,
	0, 2199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 942, 943, 0,
	972, 973, 974, 982, 983, 984, 0, 0, 0, 0,
	0, 0, 977, 975, 0, 0, 0, 0, 965, 0,
	945, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 943, 0, 972, 973, 974, 982,
	983, 984, 0, 976, 944, 0, 0, 0, 0, 975,
	964, 0, 0, 0, 961, 0, 945, 0, 0, 986,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	944, 0, 0, 0, 0, 0, 964, 0, 0, 0,
	961, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 968, 969, 970, 0, 0, 0, 980, 0,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 987, 0, 0, 0, 967, 968, 969,
	970, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 979, 987,
	0, 0, 0, 965, 0, 0, 978, 0, 0, 956,
	957, 963, 962, 958, 959, 960, 981, 985, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 976, 0,
	0, 2198, 0, 977, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 942, 943, 0, 972, 973, 974, 982,
	983, 984, 0, 980, 0, 0, 0, 0, 971, 975,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 986,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 980,
	944, 0, 0, 0, 0, 0, 964, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 956, 957, 963, 962, 958, 959,
	960, 981, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 0, 0, 0, 2163, 967, 968, 969,
	970, 0, 0, 0, 0, 0, 950, 978, 0, 0,
	956, 957, 963, 962, 958, 959, 960, 981, 0, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 979, 987,
	0, 0, 2018, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 942, 943,
	0, 972, 973, 974, 982, 983, 984, 0, 0, 0,
	0, 0, 0, 977, 975, 0, 0, 0, 0, 965,
	0, 945, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 942, 943, 0, 972, 973, 974,
	982, 983, 984, 0, 976, 944, 0, 0, 0, 0,
	975, 964, 0, 0, 0, 961, 0, 945, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 944, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 961, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 968, 969, 970, 0, 0, 0, 980,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 987, 0, 0, 0, 967, 968,
	969, 970, 0, 0, 0, 0, 0, 950, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 979,
	987, 0, 0, 0, 965, 0, 0, 978, 0, 0,
	956, 957, 963, 962, 958, 959, 960, 981, 985, 955,
	953, 954, 946, 947, 948, 949, 951, 952, 0, 976,
	0, 0, 1994, 0, 977, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 980, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 0, 942, 943, 0,
	972, 973, 974, 982, 983, 984, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	945, 0, 978, 986, 0, 956, 957, 963, 962, 958,
	959, 960, 981, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 944, 0, 0, 1467, 0, 0,
	964, 0, 0, 0, 961, 0, 0, 0, 978, 0,
	0, 956, 957, 963, 962, 958, 959, 960, 981, 0,
	955, 953, 954, 946, 947, 948, 949, 951, 952, 0,
	0, 1753, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 968, 969, 970, 0, 0, 0, 0, 0,
	950, 2483, 0, 0, 0, 0, 0, 0, 942, 943,
	0, 972, 973, 974, 982, 983, 984, 0, 0, 0,
	0, 0, 979, 987, 975, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 986, 0, 0, 0, 1564, 0,
	0, 985, 0, 0, 942, 943, 0, 972, 973, 974,
	982, 983, 984, 0, 0, 944, 0, 977, 0, 0,
	975, 964, 0, 965, 1563, 961, 0, 945, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 944, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 961, 0, 0, 2482, 0, 0, 0, 0, 0,
	0, 0, 967, 968, 969, 970, 0, 0, 0, 0,
	0, 950, 971, 1823, 0, 0, 1822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 979, 987, 0, 0, 0, 967, 968,
	969, 970, 0, 980, 0, 0, 0, 950, 0, 0,
	0, 0, 985, 0, 0, 942, 943, 0, 972, 973,
	974, 982, 983, 984, 0, 0, 0, 0, 977, 979,
	987, 975, 0, 0, 965, 0, 1726, 0, 945, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 944, 0, 977, 0, 0, 0, 964, 0,
	965, 978, 961, 0, 956, 957, 963, 962, 958, 959,
	960, 981, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 971, 0, 976, 0, 0, 0, 1727,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	968, 969, 970, 0, 980, 0, 0, 0, 950, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	979, 987, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 0, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 965, 978, 0, 0, 956, 957, 963, 962, 958,
	959, 960, 981, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 978, 0,
	0, 956, 957, 963, 962, 958, 959, 960, 981, 0,
	955, 953, 954, 946, 947, 948, 949, 951, 952, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 942, 943, 0, 972,
	973, 974, 982, 983, 984, 0, 0, 0, 0, 0,
	0, 980, 975, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 964,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 978,
	0, 0, 956, 957, 963, 962, 958, 959, 960, 981,
	0, 955, 953, 954, 946, 947, 948, 949, 951, 952,
	967, 968, 969, 970, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 942, 943, 0,
	972, 973, 974, 982, 983, 984, 0, 0, 0, 0,
	0, 979, 987, 975, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 0, 977, 0, 0, 0,
	964, 0, 965, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 968, 969, 970, 0, 0, 0, 0, 0,
	950, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 979, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 0, 0,
	0, 985, 942, 943, 0, 972, 973, 974, 982, 983,
	984, 0, 0, 0, 0, 0, 0, 977, 975, 0,
	0, 0, 0, 965, 0, 945, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 944,
	0, 0, 0, 0, 0, 964, 0, 0, 0, 961,
	978, 0, 0, 956, 957, 963, 962, 958, 959, 960,
	981, 0, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 968, 969, 970,
	0, 0, 0, 980, 0, 950, 0, 0, 0, 0,
	1829, 0, 0, 0, 0, 0, 942, 943, 0, 972,
	973, 974, 982, 983, 984, 0, 0, 979, 987, 1998,
	0, 0, 975, 0, 0, 0, 1824, 0, 0, 945,
	0, 0, 986, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 944, 0, 0, 0, 0, 965, 964,
	0, 978, 0, 961, 956, 957, 963, 962, 958, 959,
	960, 981, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 968, 969, 970, 0, 0, 0, 971, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 987, 0, 0, 0, 0, 0, 980, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 942, 943, 0, 972, 973, 974, 982, 983, 984,
	0, 0, 0, 0, 0, 0, 977, 975, 0, 0,
	0, 0, 965, 0, 945, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 944, 0,
	0, 0, 0, 0, 964, 0, 978, 0, 961, 956,
	957, 963, 962, 958, 959, 960, 981, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 968, 969, 970, 0,
	0, 0, 980, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 942, 943, 0, 972, 973, 974, 982, 983,
	984, 0, 0, 0, 0, 0, 979, 987, 975, 0,
	0, 0, 1782, 0, 0, 945, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 977, 0, 0, 0, 964, 0, 965, 0, 961,
	978, 0, 0, 956, 957, 963, 962, 958, 959, 960,
	981, 0, 955, 953, 954, 946, 947, 948, 949, 951,
	952, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 968, 969, 970,
	0, 0, 0, 0, 0, 950, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 979, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 942, 943, 0,
	972, 973, 974, 982, 983, 984, 0, 0, 0, 0,
	0, 0, 977, 975, 0, 0, 0, 0, 965, 0,
	945, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 944, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 961, 978, 0, 0, 956, 957,
	963, 962, 958, 959, 960, 981, 0, 955, 953, 954,
	946, 947, 948, 949, 951, 952, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 968, 969, 970, 0, 0, 0, 980, 0,
	950, 0, 0, 0, 0, 0, 0, 0, 942, 943,
	0, 972, 973, 974, 982, 983, 984, 0, 0, 0,
	0, 0, 979, 987, 975, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 977, 0, 0,
	0, 964, 0, 965, 0, 961, 978, 0, 0, 956,
	957, 963, 962, 958, 959, 960, 981, 0, 955, 953,
	954, 946, 947, 948, 949, 951, 952, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 968, 969, 970, 0, 0, 0, 0,
	0, 950, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 979, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 0,
	942, 943, 985, 972, 973, 974, 982, 983, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 945, 965, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 942, 943, 0,
	972, 973, 974, 982, 983, 984, 0, 944, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 961, 0, 0,
	945, 978, 0, 986, 956, 957, 963, 962, 958, 959,
	960, 981, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 0, 971, 944, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 961, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 967, 968, 969, 970, 0, 0,
	0, 0, 0, 950, 980, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 987, 0, 0, 0,
	0, 967, 968, 969, 970, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 979, 987, 0, 0, 965, 0, 0, 0,
	0, 0, 978, 0, 0, 956, 957, 963, 962, 958,
	959, 960, 981, 0, 955, 953, 954, 946, 947, 948,
	949, 951, 952, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 1280,
	1269, 1299, 1259, 1290, 1289, 0, 0, 1261, 1260, 0,
	0, 0, 0, 1301, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 956, 957, 963,
	962, 958, 959, 960, 981, 0, 955, 953, 954, 946,
	947, 948, 949, 951, 952, 0, 0, 0, 1295, 0,
	1287, 1286, 0, 0, 0, 0, 0, 1272, 0, 0,
	1285, 978, 0, 0, 956, 957, 963, 962, 958, 959,
	960, 981, 0, 955, 953, 954, 946, 947, 948, 949,
	951, 952, 1284, 1282, 1283, 0, 0, 0, 0, 0,
	1280, 1269, 1299, 1259, 1290, 1289, 0, 0, 1261, 1260,
	0, 0, 0, 0, 1301, 1300, 0, 0, 0, 1268,
	0, 0, 0, 0, 0, 0, 1273, 1271, 1274, 1275,
	1276, 1277, 1278, 0, 1298, 0, 0, 0, 0, 0,
	0, 1262, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 1287, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 1264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 0, 1270,
	0, 0, 0, 1284, 1282, 1283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 0,
	1268, 0, 1392, 1390, 1391, 1394, 1393, 1273, 1271, 1274,
	1275, 1276, 1277, 1278, 0, 1298, 527, 0, 553, 0,
	0, 0, 1262, 0, 0, 0, 0, 0, 0, 1265,
	0, 0, 0, 0, 0, 0, 532, 0, 0, 0,
	1279, 1266, 0, 0, 1264, 0, 0, 0, 530, 0,
	1303, 0, 0, 0, 0, 0, 1288, 0, 0, 0,
	1270, 0, 0, 1263, 0, 0, 1296, 1297, 0, 531,
	0, 0, 0, 0, 533, 0, 0, 0, 0, 539,
	540, 0, 0, 0, 549, 0, 0, 0, 1267, 1281,
	0, 0, 0, 1302, 0, 0, 0, 0, 554, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1265, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 1303, 0, 0, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 1263, 0, 0, 1296, 1297, 0,
	0, 0, 0, 536, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1267,
	0, 543, 0, 0, 1302, 538, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 529, 546, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 0, 551, 0, 0, 0, 557, 0, 0,
	0, 0, 544, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 550,
}
var sqlPact = [...]int{

	221, -1000, -39, -1000, -1000, -1000, 161, -1000, -1000, -1000,
	159, 158, 155, -1000, 153, 152, 150, 149, 148, 145,
	143, 141, 137, 133, 131, -1000, 128, -1000, -1000, -1000,
	-1000, 126, 124, 123, 110, 109, 107, 105, 1024, 21585,
	97, 93, 1346, 35127, 91, 84, 83, 81, 965, 80,
	76, 25549, 811, 1284, 75, 72, 65, 58, 57, 946,
	34799, 3931, 1222, 1035, 1524, 34468, 21254, 1511, 1010, 34137,
	-1000, -1000, 33806, 56, 49, 48, 47, 45, -1000, -1000,
	33475, 44, 43, 41, 39, 37, 36, 31, 29, 26,
	23, 22, 19, 16, 15, -1000, 14, 13, 12, 41874,
	11, 9, 8, 1017, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 130, -1000, 993, 447, 1959,
	8267, 963, 957, 947, 938, 948, 37095, 35127, 3, -130,
	2, -1000, 1809, 579, 18878, 221, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25218, 24887, 33144, 32813, 698, -1000, -42, 22243, 35127, -1000,
	113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14432, 14089, 518, 113, -1000, -1000, -1000, -1000, -1000,
	32482, -1000, 32151, 31820, 1366, 31489, -1000, -1000, -1000, -1000,
	31158, -1000, -1000, 1701, 1550, 1534, 24556, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 30830,
	30499, 30168, 29837, 29506, 459, -1000, -1000, -1000, 17168, -1000,
	-1000, -1000, -1000, -6, -1000, -7, -1000, -17, -21, -22,
	-23, -1000, -26, -29, -1000, -30, -32, -1000, -34, -35,
	29175, 1123, -1000, -1000, -41, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35127, -1000, 15116, -1000, 458, -1000, 1521,
	-1000, 15116, -1000, 1112, -1000, -1000, -1000, -1000, -1000, 35127,
	-1000, -1000, -1000, -1000, -1000, -1000, 2023, 1089, 457, 28844,
	-1000, 1421, -1000, 534, 725, -1000, -1000, -1000, 9293, 176,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1303,
	22585, 1190, 1817, 1696, 2020, 1310, 1618, 1615, 1598, 1564,
	1539, 2019, 824, 2018, 1661, 950, 2016, 1538, 1115, 606,
	2015, 1516, 1501, -1000, -1000, -1000, -1000, 860, -1000, -1000,
	-1000, 26861, -1000, -1000, 993, -1000, -1000, -1000, 1325, 1803,
	1803, 1803, 1857, 280, 272, -1000, 130, -1000, 1407, -1000,
	1088, -1000, -1000, -1000, -1000, -1000, 41067, -1000, -1000, 15116,
	15116, 15116, 15116, 15116, 985, 476, -1000, 456, 455, 7582,
	-1000, -1000, 1995, -1000, -1000, -1000, 284, -1000, -1000, 15116,
	113, -1000, -1000, -1000, -1000, 453, 2007, -1000, 643, -1000,
	-1000, -1000, 541, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1546, 452, 451, 450, -1000, 449, -1000, -1000,
	448, 446, 445, 444, 442, 441, 440, 439, 438, 437,
	436, 434, 433, 431, 429, 908, -1000, 561, -1000, -1000,
	561, 561, -1000, 403, 403, 410, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 403, -1000, -1000, -1000, 526, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	428, 1068, -1000, -1000, 1068, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 696, 36439, -45, 35127, -1000, 425, -45, -1000,
	-1000, 418, -1000, 10319, 10319, -1000, -1000, -1000, -1000, -1000,
	9635, 1425, -1000, 3297, -215, 283, 515, -1000, 17852, 20582,
	-1000, -1000, 935, 1695, 585, -1000, 881, 1690, 482, -1000,
	858, -1000, 776, 1685, -149, 22913, 22243, -42, -63, -1000,
	-1000, -1000, 5870, 41067, -1000, 41067, -1000, 756, 19560, 113,
	-1000, -1000, -1000, -1000, 416, 1192, 543, -1000, 285, -1000,
	28513, 543, 1185, -1000, -1000, -1000, 26861, -1000, 35127, -1000,
	35127, -1000, 775, -1000, 36767, 118, 1682, -1000, -1000, 118,
	1671, -1000, 112, 1659, -1000, -1000, 1027, 1656, -1000, -63,
	1652, -1000, -1000, 15116, -58, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 579, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 28182, 21914, 1107, 559,
	41067, 1903, 41713, 22913, 41067, 21914, -1000, -1000, 35127, -1000,
	15116, -1000, 1896, 1393, -47, -1000, -1000, -1000, -1000, -1000,
	1239, 1342, 669, 925, 9293, 9293, 1763, -1000, 165, 6212,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27851, -1000,
	-1000, -1000, 1042, 35127, -1000, -1000, 1537, -1000, 21914, 35127,
	-1000, 35127, -1000, 35127, -1000, 35127, -1000, 35127, -1000, -1000,
	-1000, -1000, -1000, 2895, -1000, 1530, -1000, -1000, 35127, -1000,
	1227, -1000, -1000, -1000, 27523, 27192, -1000, 868, 722, -1000,
	-1000, 119, -1000, -1000, 1325, -1000, 1019, 1349, 13746, 1300,
	15116, 130, -1000, -1000, 130, 130, 8951, -1000, -1000, -1000,
	35127, -1000, 41622, 41713, 6212, 705, 15116, 15116, 15116, 15116,
	15116, 15116, 15116, 15116, 15116, 15116, 15116, 15116, 15116, 15116,
	15116, 15116, 15116, 15116, 15116, 15116, 15116, 15116, 15116, 15116,
	15116, 15116, 15116, 15116, 15116, 15116, 15116, 15116, 1048, 15116,
	693, 15116, 15116, 15116, 15116, 1286, 1008, 402, 1254, -1000,
	1934, 1934, 1934, 41340, 41340, 385, 476, -1000, 15116, -1000,
	260, 15116, 272, 39398, -43, 7240, -1000, -1000, -1000, 13404,
	558, 41067, 113, 6554, -1000, 1994, 788, 1528, 1400, 415,
	542, 538, 537, 536, 15116, 15116, 13062, 12719, 12376, 15800,
	12033, 15116, 7924, 15116, 15116, 15116, 15116, 11690, 11347, -1000,
	412, -1000, -1000, -1000, -1000, 1975, -1000, -1000, 1971, -1000,
	704, 672, 1969, -1000, -47, -1000, 36439, -1000, 35127, -45,
	1893, 35127, -1000, 90, -1000, 39864, -1000, 90, -66, -1000,
	1315, 1312, 19219, 1264, 998, 998, 998, -1000, 411, 474,
	515, 5167, 11004, -1000, 25877, 1005, 188, 270, 17510, 1425,
	-1000, 35127, -86, 959, -1000, 24225, 1833, 1794, 1786, 26861,
	1873, 260, 1488, 691, 26861, 689, 1870, 260, 1480, 688,
	35127, 6212, 513, -1000, 35127, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1466, -67, -1000, -1000, 23897, 1890,
	1649, -1000, 916, -1000, 1887, 35127, 1106, 1183, -1000, -1000,
	716, 1639, 547, 248, 1886, 248, 19900, -1000, 35127, -1000,
	35127, -1000, -1000, 35127, -1000, 35127, -1000, 35127, 35127, -1000,
	35127, 35127, -68, 41067, 3301, 23569, 687, -1000, 588, 23897,
	173, -73, -1000, 637, -1000, -1000, -1000, -1000, 253, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 410, 908, 403, 403, 403, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 526, -1000, -1000, 561,
	561, 561, -1000, -1000, -95, -1000, 1457, 539, -74, 619,
	-47, -1000, 1068, -1000, 1144, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2006, -1000,
	1947, -1000, -1000, 1965, -51, -1000, -51, -1000, 6212, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35127, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2681, -1000, -1000, -1000, -1000,
	-1000, -1000, 35127, 35127, 35127, -1000, 26861, -1000, -1000, -1000,
	-1000, 41067, -1000, 374, -1000, -1000, 41067, 912, 1350, -1000,
	1350, -52, -1000, 39985, 1276, 35127, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, 356, 356,
	765, 765, 765, 765, 1926, 1374, 1518, 2774, 2997, 2997,
	2997, 2997, 2997, 2997, 2997, 2997, 212, 314, 314, 212,
	212, 212, 212, 212, 2997, 2997, 2997, 41340, 41188, 3952,
	15116, 15116, 685, 997, 402, 3952, 15116, 3952, 3952, 3952,
	3952, -1000, 1198, -1000, -1000, -1000, -1000, 1456, 400, 15800,
	15800, -1000, -1000, -1000, 7582, 16142, -1000, -1000, -1000, -1000,
	399, 15116, -1000, 39434, -223, 269, -195, -1000, 15116, 467,
	-164, -1000, 791, -1000, 15116, -1000, -54, 15116, 15116, 15116,
	268, -1000, 267, -1000, 684, -1000, 681, 680, 678, -1000,
	397, 991, 396, 394, 15116, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 40912, 37757, 266, -1000, 1455, -195, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 265, -1000, 264, -1000,
	40791, -195, 263, 4719, -1000, 15800, 15800, 15800, 7582, 392,
	262, -1000, 39828, -1000, 40636, 10661, 10661, 10661, 261, 40512,
	15116, -195, 4477, 4223, 3760, -76, -81, -1000, -83, -1000,
	1963, -89, 257, 529, 525, 256, -1000, -1000, 391, -90,
	547, 10319, 18536, 6212, -1000, 547, 9635, -1000, 19219, 19219,
	1237, 1291, 19219, -1000, -1000, -1000, -1000, 25877, 494, 515,
	25877, -1000, 1962, 1282, 255, -1000, -1000, -1000, 35127, 390,
	-1000, 515, 254, 889, 35127, 35127, 35127, -1000, -1000, 1180,
	36111, 1178, 41713, 35127, -1000, 387, 383, 1271, 1269, 35127,
	35127, 35783, 35455, 35127, 921, 260, -1000, 382, 35127, 842,
	35127, 260, -1000, 381, 35127, 837, -1000, 1378, 1093, -1000,
	750, 1448, 35127, 251, -92, -60, 41713, -1000, -1000, -1000,
	-1000, -1000, 35127, 468, 35127, 260, 35127, 2005, 260, 35127,
	1635, 1709, 499, 35127, 1349, 15116, 902, -1000, 18194, 569,
	35127, 802, 67, -1000, -1000, -1000, 509, 35127, -1000, -1000,
	118, 118, -1000, 112, 1027, -63, -1000, 15116, -1000, -1000,
	35127, 22913, -99, -1000, -1000, 41713, -1000, 469, 615, -1000,
	1961, 531, 22913, 35127, 9293, 9293, -1000, 1323, -1000, -1000,
	863, -1000, 899, -1000, -1000, -1000, -1000, 9293, -1000, -88,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 912, -1000, 15116,
	1958, -1000, -1000, -1000, 8951, -1000, -1000, -1000, 35127, -209,
	15116, 3952, 3952, 15116, 15800, 15800, -1000, 3952, -1000, -1000,
	-1000, -1000, -1000, 1433, 380, 15116, 41713, 4658, 4438, -106,
	-1000, 15116, -69, -1000, 15116, -1000, 39243, -1000, -1000, 344,
	1664, -1000, 15116, 40357, 250, 9977, -1000, 40236, -55, -55,
	-1000, 2000, 1214, 1113, 882, 787, 1955, -1000, 20241, 551,
	1007, 39023, 41622, 41713, -1000, 15116, -1000, -1000, 1431, 15116,
	-1000, 41622, 41713, 15800, 15800, 15800, 15800, 15800, 15800, 15800,
	15800, 15800, 15800, 15800, 15800, 15800, 15800, 15800, 15800, 15800,
	15800, 15800, 1236, 15800, 1932, 1932, 1932, -79, 15116, -1000,
	1526, 1431, 15116, 15116, 41713, 246, 237, 235, -1000, 15116,
	-195, 15116, 15116, 15116, -1000, -1000, -1000, 234, -1000, 1951,
	-1000, -1000, -1000, -1000, 173, -1000, 1399, -1000, -157, -1000,
	1425, -1000, 1399, -1000, -1000, 1237, -1000, 378, 15116, 19219,
	-1000, 465, -1000, -107, -1000, 25877, -1000, 464, -221, -1000,
	508, -1000, 515, 377, 35127, 25877, -1000, -1000, -1000, 668,
	666, 1625, -1000, 1176, -1000, 576, -1000, 869, 15116, 16826,
	375, 370, 980, -1000, 1623, 1027, 1617, 1027, -1000, -86,
	924, -1000, 15116, -1000, 662, -1000, -1000, 15116, -1000, 657,
	531, 1429, 730, -1000, 739, -1000, 1368, -1000, 23897, 368,
	35127, 367, -1000, 363, -1000, -1000, 343, 35127, 1250, 499,
	23241, -1000, 543, 802, -1000, 41067, -1000, 802, 8609, 1788,
	-112, -1000, -1000, -1000, 547, 19900, 19219, 9635, -115, -1000,
	-1000, -1000, -1000, 41067, -88, 1766, 1766, -1000, 1950, -1000,
	463, 232, -1000, 26533, -1000, -88, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35127, 1011, 38987, -1000, 1802, 6212, 1928,
	3952, 4035, 1109, 15116, 41713, 41377, -123, 15116, 15116, -1000,
	231, 15116, 461, 41067, -1000, -1000, -1000, 41067, 15116, 1999,
	15116, 228, 227, 225, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 222, -1000, -1000, 37423, 15116, 219, -1000, 214,
	213, 41067, 1526, 41067, -1000, -1000, 574, 574, 840, 840,
	840, 840, 1932, 2451, 249, 1141, 298, 298, 298, 1091,
	366, 366, 298, 298, 298, 1420, 1260, 341, 4748, 15116,
	210, -1000, -1000, 41067, 41067, 198, -1000, -1000, -1000, -195,
	342, 38832, 38612, -1000, 196, 195, 1390, 1856, -1000, 19219,
	1390, -1000, 35127, 41067, -1000, -215, -1000, 1949, -1000, -1000,
	1282, -1000, 5523, 25877, 35127, -131, -1000, 35127, 35127, 35127,
	1616, -1000, 2869, -1000, 38576, -134, -1000, 277, 1811, 15116,
	-1000, -1000, 339, 16826, 35127, -1000, 1283, 1309, 605, 35127,
	-1000, 35127, -1000, 35127, 35127, 35127, -136, 35127, -137, 35127,
	-1000, 22913, 640, -1000, -1000, 1375, -1000, 16826, 320, 35127,
	23897, 1883, 16826, 1105, 1252, 499, 23241, -1000, 716, -1000,
	-1000, -108, -1000, 353, 260, 802, -1000, -109, -1000, 507,
	1745, -1000, 1744, 357, -1000, -1000, -125, 319, -1000, 506,
	503, -1000, -1000, -1000, -1000, 1802, 15116, 15116, 41377, -139,
	-1000, 3952, 3952, -1000, 38421, -1000, 41067, -1000, 40236, -1000,
	-1000, -1000, -1000, 923, -1000, 38201, -1000, -1000, -1000, -1000,
	15800, 1415, 317, 41713, 38165, -1000, -1000, 15116, -1000, -1000,
	-1000, -1000, 545, 15116, 15116, 1425, 545, -142, 515, -1000,
	-1000, -1000, 1943, -1000, -145, -1000, -1000, -1000, -1000, 35127,
	-1000, 35127, -1000, 6212, 35127, 1412, 1145, -1000, -1000, 1258,
	316, 15800, 35127, -1000, 958, 16826, 1802, 113, 6212, 1802,
	38010, 6554, -152, -158, 1143, -1000, 1134, 15116, -1000, 41713,
	1027, 1027, -1000, 656, 649, 648, -1000, 647, -1000, -133,
	20923, 941, -159, 16826, -161, 191, 260, -167, 35127, -1000,
	499, 23241, -1000, 1709, 1715, 35127, 1779, -1000, -1000, 313,
	312, 311, -1000, 26205, 26205, 22913, 22913, -1000, 3952, 3952,
	-1000, -1000, 187, 1007, 1853, -1000, 4794, 15800, 41713, -169,
	-1000, 37790, -1000, 35127, 41067, -195, -1000, -1000, 25877, 315,
	-1000, -1000, 1023, -1000, -1000, 35127, 1125, -1000, -1000, 15116,
	4748, 303, 1368, 302, -1000, -1000, -1000, -1000, -1000, -1000,
	1811, -54, -1000, 867, -1000, -1000, 41067, 1799, -1000, -1000,
	35127, 35127, 301, 300, -1000, 299, 113, 35127, 958, -172,
	-1000, 1368, -1000, 958, 297, 23241, -1000, 1250, 715, -177,
	35127, -1000, -1000, 6896, 22913, 22913, -1000, -182, -1000, -1000,
	-1000, 891, 15116, 4794, -183, -1000, -1000, -179, -1000, 1879,
	-1000, -1000, -1000, -1000, 1613, 4603, 1217, 35127, -1000, 35127,
	1802, 186, 35127, 583, 6212, -1000, -1000, 15116, 15116, 15116,
	296, 1368, 958, -1000, 1368, 16826, -1000, 1252, 773, -1000,
	547, -1000, -188, -189, -1000, 180, 15458, 15458, -195, -1000,
	35127, 295, 1588, -1000, 1037, 949, 179, -190, -1000, -1000,
	285, -1000, 15116, -1000, -196, -197, -55, 35127, -1000, 1368,
	-1000, -198, -1000, 19900, -1000, 531, 531, -1000, -1000, -1000,
	16484, 1075, 795, 39707, -1000, -1000, -1000, 35127, -1000, 1096,
	1060, 808, -1000, -1000, -1000, -1000, -1000, 1217, 41067, -1000,
	-1000, 178, -199, -1000, 958, -180, -1000, -1000, 1908, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1728, -1000, 598, 1242,
	1242, 1037, 1999, 1016, 1368, -1000, 14774, -1000, 1921, -1000,
	-1000, 1243, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 2345, 2343, 1571, 1888, 2340, 2339, 2336, 2334, 2333,
	2332, 2331, 2330, 2329, 2325, 2322, 2321, 2317, 2315, 2314,
	1883, 2308, 1873, 2303, 2299, 2297, 2293, 1870, 2291, 2290,
	2289, 2288, 2282, 2280, 1839, 2279, 1813, 2274, 2270, 2268,
	2267, 2266, 1774, 2263, 87, 105, 1772, 2260, 2259, 1768,
	1759, 1749, 2257, 1711, 2256, 2255, 1673, 1669, 2254, 93,
	2249, 2248, 2247, 1631, 1622, 2246, 2245, 2244, 142, 2243,
	1591, 2241, 2240, 2237, 2236, 2231, 2227, 2226, 2223, 2221,
	2219, 2218, 2216, 2215, 2214, 2213, 2212, 2211, 2210, 153,
	2209, 2208, 1587, 1522, 2207, 2206, 29, 26, 13, 50,
	27, 136, 2906, 131, 2205, 2203, 2202, 2201, 2199, 2198,
	21, 101, 91, 2196, 117, 2195, 2194, 42, 31, 24,
	20, 2193, 85, 2192, 2189, 1635, 46, 2188, 2186, 126,
	2183, 17, 45, 182, 145, 143, 111, 115, 2182, 2180,
	2178, 43, 108, 1, 2177, 2173, 11, 80, 12, 2171,
	34, 19, 2169, 2168, 123, 2166, 53, 88, 1485, 106,
	119, 147, 83, 2164, 69, 10, 57, 2163, 2160, 150,
	33, 2158, 30, 72, 140, 2157, 58, 151, 120, 74,
	124, 130, 2155, 2154, 2152, 102, 2148, 109, 89, 2147,
	2146, 59, 2143, 86, 133, 2127, 2126, 2117, 84, 2111,
	118, 2107, 2106, 149, 138, 104, 5, 63, 54, 6,
	1444, 1436, 121, 79, 47, 55, 2103, 2497, 960, 800,
	41, 97, 68, 48, 99, 71, 76, 137, 38, 2102,
	2101, 125, 2100, 2099, 2098, 2097, 2095, 92, 2094, 2093,
	23, 2091, 64, 49, 56, 82, 39, 253, 122, 110,
	144, 95, 2087, 65, 114, 2086, 62, 2082, 2081, 1291,
	107, 2080, 2079, 2077, 1050, 1043, 876, 205, 2076, 2074,
	874, 392, 2072, 2064, 75, 2063, 112, 100, 98, 134,
	249, 96, 2062, 113, 22, 2061, 32, 18, 0, 426,
	298, 2060, 116, 60, 2059, 2058, 2057, 2056, 25, 3,
	9, 8, 4, 7, 37, 28, 2054, 2053, 129, 77,
	51, 2051, 148, 2049, 2048, 2047, 35, 2045, 16, 2044,
	14, 2040, 2037, 15, 2, 2035, 2034, 132, 2033, 90,
	2032, 1843, 2031, 141, 2028, 2027, 1724, 2026, 36, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 286, 286, 287, 287, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 160,
	160, 159, 159, 163, 163, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 255, 255, 254, 43, 43, 229, 229, 46,
	46, 186, 186, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 327, 327, 327, 331, 331, 332, 332, 333,
	333, 333, 333, 333, 333, 333, 329, 329, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 280, 278,
	278, 279, 279, 139, 139, 139, 139, 139, 140, 140,
	140, 285, 285, 285, 285, 285, 285, 284, 284, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	328, 328, 330, 330, 51, 51, 30, 30, 31, 31,
	141, 141, 142, 142, 208, 208, 208, 208, 143, 143,
	115, 115, 115, 207, 296, 296, 297, 297, 297, 297,
	297, 297, 298, 298, 298, 298, 298, 298, 298, 294,
	294, 295, 292, 292, 293, 293, 293, 293, 334, 334,
	206, 206, 146, 146, 301, 301, 301, 301, 299, 299,
	299, 299, 299, 302, 300, 303, 303, 303, 303, 303,
	241, 241, 241, 91, 91, 32, 32, 121, 121, 33,
	33, 29, 29, 29, 190, 190, 150, 150, 246, 246,
	246, 132, 132, 110, 110, 110, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 191, 191, 192,
	192, 52, 52, 56, 56, 61, 61, 90, 90, 90,
	90, 90, 90, 21, 21, 21, 21, 25, 25, 25,
	25, 60, 60, 336, 336, 128, 128, 128, 128, 129,
	129, 203, 203, 204, 204, 337, 337, 205, 205, 205,
	123, 122, 124, 124, 28, 28, 28, 117, 117, 118,
	118, 119, 119, 120, 120, 338, 338, 49, 49, 49,
	93, 93, 135, 135, 200, 200, 200, 202, 202, 201,
	201, 201, 176, 176, 176, 92, 92, 155, 155, 165,
	165, 166, 166, 252, 167, 167, 59, 59, 102, 102,
	100, 100, 100, 100, 100, 100, 101, 101, 101, 103,
	103, 103, 103, 103, 103, 103, 106, 106, 106, 107,
	107, 107, 105, 105, 309, 309, 309, 312, 312, 308,
	310, 310, 311, 311, 335, 335, 177, 177, 177, 145,
	144, 144, 148, 148, 147, 149, 149, 245, 245, 245,
	174, 174, 174, 174, 195, 195, 193, 193, 194, 194,
	196, 196, 197, 197, 197, 198, 198, 199, 199, 173,
	173, 225, 225, 104, 104, 104, 154, 154, 154, 156,
	156, 215, 215, 215, 216, 216, 214, 214, 214, 214,
	247, 247, 247, 247, 247, 247, 247, 247, 325, 325,
	325, 326, 326, 244, 244, 248, 248, 248, 248, 248,
	248, 242, 242, 242, 242, 243, 243, 253, 253, 180,
	180, 180, 180, 178, 178, 179, 179, 249, 249, 249,
	249, 175, 175, 250, 250, 250, 209, 209, 256, 256,
	256, 274, 274, 153, 153, 153, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 258, 258, 258, 258,
	260, 260, 260, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 273, 273, 273, 273, 273, 261, 261, 268, 268,
	269, 269, 270, 271, 262, 262, 263, 263, 264, 265,
	272, 272, 272, 272, 276, 276, 266, 266, 266, 266,
	266, 267, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 188, 188, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	219, 219, 219, 219, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 304, 304, 304, 304, 304,
	304, 304, 304, 306, 306, 307, 307, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 313, 313, 314,
	314, 316, 316, 317, 317, 318, 319, 319, 319, 320,
	321, 321, 315, 315, 322, 322, 322, 323, 323, 324,
	324, 324, 324, 324, 231, 231, 232, 233, 239, 239,
	239, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 130, 130, 130,
	130, 130, 162, 162, 161, 161, 228, 228, 226, 226,
	230, 230, 181, 181, 275, 275, 275, 275, 275, 275,
	275, 182, 182, 182, 189, 183, 183, 184, 184, 184,
	184, 184, 222, 223, 185, 185, 185, 224, 224, 234,
	238, 238, 237, 236, 236, 235, 235, 212, 212, 213,
	213, 211, 210, 170, 170, 169, 169, 168, 168, 339,
	339, 240, 240, 171, 171, 172, 164, 164, 251, 251,
	251, 251, 157, 157, 137, 137, 158, 158, 133, 133,
	136, 136, 134, 134, 134, 134, 151, 151, 152, 152,
	131, 131, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 277, 277, 277, 227, 125, 125, 125,
	126, 126, 127, 127, 282, 282, 282, 283, 283, 283,
	283, 281, 281, 281, 281, 281, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 2, 3, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 1, 3,
	3, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 371, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 68, -28, -29, -30, -31, 70, -32,
	-33, 91, -311, 95, -37, -38, -39, -41, -40, 99,
	106, 108, 130, 141, 223, 229, 250, 252, 254, 261,
	-100, -102, 248, -54, -55, -63, -64, -65, -66, -94,
	272, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 275,
	-21, -25, -60, 313, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -309, -103, -101, 368, 249,
	322, 35, 284, 61, 102, 256, 338, 345, -106, -104,
	-105, -107, 265, 330, 294, 372, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 2,
	294, 333, 84, 149, -327, 2, -158, 294, 84, -134,
	-125, 361, 4, -288, -290, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 68, 69, 72, 73, 74, 82, 83, 85, 87,
	91, 93, 95, 98, 99, 101, 106, 107, 108, 118,
	119, 124, 126, 131, 137, 138, 141, 142, 150, 153,
	155, 148, 165, 166, 167, 170, 171, 172, 175, 174,
	179, 182, 185, 187, 188, 189, 192, 190, 194, 195,
	197, 196, 202, 204, 205, 207, 210, 213, 216, 219,
	220, 221, 222, 223, 225, 227, 229, 231, 232, 233,
	234, 235, 237, 238, 240, 241, 242, 243, 244, 248,
	246, 247, 249, 250, 251, 252, 254, 256, 257, 259,
	273, 274, 285, 261, 262, 263, 264, 268, 266, 269,
	270, 272, 275, 277, 280, 283, 284, 286, 289, 290,
	287, 282, 293, 295, 296, 297, 298, 299, 300, 301,
	308, 309, 313, 314, 315, 316, 319, 320, 321, 322,
	324, 327, 328, 329, 334, 339, 340, 341, 342, 343,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 86, 88, 89, 105, 109, 110, 120,
	121, 122, 132, 134, 143, 144, 147, 154, 156, 157,
	158, 159, 160, 162, 169, 177, 191, 201, 203, 214,
	218, 226, 228, 236, 258, 267, 278, 279, 288, 291,
	303, 304, 305, 310, 311, 326, 330, 331, 371, 371,
	2, 166, 233, -133, -125, 84, 371, 371, 371, 371,
	294, 2, 323, 333, -190, 84, 318, 371, 371, -125,
	229, 22, 2, 93, 153, 321, 320, 22, 225, 266,
	296, 298, 2, 371, 371, 371, 371, 371, 2, 333,
	294, 149, 84, 323, -125, 2, -45, 2, 368, -44,
	-4, -27, -36, -46, -42, -20, -22, -34, -50, -49,
	-51, -53, -57, -56, -59, -63, -64, -70, -92, -93,
	272, -331, 2, 22, -332, -333, 70, 99, 130, 265,
	153, 93, 320, 294, 2, 166, 2, -125, 2, -327,
	2, 166, 2, -331, 2, -125, 2, -129, 2, 261,
	-125, 371, 371, 371, 371, 371, 182, 55, 258, 269,
	-68, 309, -67, 303, -280, -69, 2, -159, 192, -125,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 2, -89, 269,
	34, 55, 22, 60, 85, 131, 149, 150, 171, 65,
	66, 232, 182, 167, 308, 172, 270, 295, 309, 70,
	324, 299, 107, 4, 84, 192, 271, 303, 371, 371,
	371, -335, 2, 294, -101, -103, -102, -147, -148, 317,
	161, 104, 212, -100, -102, 2, -309, -89, 269, 2,
	55, 22, -278, 2, -240, 208, -217, 90, -219, 359,
	360, 354, 198, 344, -231, -221, -234, 105, 258, 368,
	-133, -220, 374, 9, -306, -102, 29, -232, -233, 49,
	-125, 7, 8, 5, 6, -131, -258, -227, -267, 312,
	111, 200, -304, -305, 4, -288, -282, -259, -269, -263,
	-266, 162, 58, 76, 77, 80, 78, 81, 271, 323,
	50, 28, 109, 110, 218, 226, 291, 310, 311, 143,
	201, 144, 56, 132, 177, 98, 37, 39, 41, 42,
	51, 52, 86, 88, 89, 120, 121, 122, 154, 156,
	157, 158, 159, 160, 203, 236, 278, 288, 304, 305,
	331, -289, -270, -271, -264, -265, 71, 112, 129, 152,
	145, 164, 168, 178, 180, 193, 215, 217, 255, 276,
	-272, -336, 2, 309, 309, 2, -336, 2, -336, 2,
	-128, 2, 309, 306, -312, 237, -308, -125, -312, 371,
	371, 373, 371, -144, -145, 2, 22, 96, -172, 2,
	368, -247, 2, 366, -249, -133, -102, -248, 368, 209,
	-3, 2, -249, 143, -133, 2, -249, 143, -133, 2,
	-125, 2, -136, 143, -133, 306, 373, -158, -151, -125,
	-211, -210, 370, -217, 2, -217, 2, 128, 368, -169,
	-170, -210, -211, 2, -159, 143, -125, 2, -159, 2,
	149, -125, 143, 2, -125, 22, 128, 2, 163, 2,
	163, 2, -250, 2, -249, -160, 143, 2, -159, -160,
	143, 2, -137, 143, 2, -136, -125, 143, 2, -151,
	143, 2, -186, 368, -255, 2, -254, -283, 4, -288,
	-290, -289, 330, 58, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 269, 208, 373, -159,
	-217, -229, 368, 128, -217, 208, -125, 2, 273, 2,
	368, -68, 53, 309, -204, 2, -205, -122, -123, -124,
	165, 231, 235, 343, 306, 349, 128, -278, -163, 370,
	-89, 2, -286, 2, -284, 9, -283, 5, 273, 2,
	232, 270, 55, 128, 2, 2, -328, 2, 208, 128,
	2, 128, 2, 128, 2, 128, 2, 128, 2, 2,
	232, 270, 2, 125, 2, 308, 2, 2, 128, 2,
	165, 231, 285, 2, 294, 333, 2, 128, 128, 343,
	2, -175, -249, -147, -148, -174, -193, -194, 181, 113,
	206, -177, 22, 96, -177, -177, 44, 369, 369, -89,
	273, 2, 10, 11, 57, 33, 359, 360, 361, 362,
	123, 363, 364, 357, 358, 356, 347, 348, 351, 352,
	353, 67, 350, 349, 63, 186, 260, 114, 115, 116,
	117, 245, 13, 14, 15, 26, 211, 180, 344, 145,
	276, 354, 16, 17, 18, 164, 36, 146, -130, -138,
	-217, -217, -217, -217, -217, 217, -168, -212, 366, -102,
	368, 368, -102, -217, -161, 368, 7, -102, -226, 366,
	-235, -217, -169, 368, 5, 368, 5, -313, 339, 125,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 228,
	-276, 334, -276, -276, -260, 368, -260, -261, 368, -260,
	340, 345, 368, -203, -204, -203, 306, -129, 373, -312,
	-152, 368, -172, -164, -251, -217, 361, -164, -171, -240,
	71, -180, 168, 193, 129, 178, 255, 152, 7, -45,
	-214, 374, 368, 361, -244, 345, -102, -248, 368, -247,
	-133, 368, -112, 246, -111, 21, 23, 99, 328, 105,
	282, 300, 262, 246, 105, 246, 282, 300, 262, 246,
	105, 374, -286, -134, 373, -281, 361, 4, -288, -290,
	-289, -291, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 49, 50, 54, 57, 59, 65, 70, 75,
	76, 78, 77, 79, 80, 81, 90, 92, 94, 96,
	97, 100, 102, 104, 111, 113, 125, 127, 128, 130,
	133, 135, 146, 149, 151, 161, 163, 173, 176, 181,
	183, 184, 198, 199, 200, 206, 208, 209, 211, 212,
	224, 230, 239, 253, 265, 271, 281, 292, 294, 302,
	306, 307, 312, 317, 318, 323, 325, 332, 333, 335,
	336, 337, 338, 286, 369, -157, -133, -170, 368, -146,
	198, -121, -310, 338, -146, 368, -126, 143, 2, -125,
	-310, 198, -250, -135, -133, -135, 272, -125, 30, -114,
	373, 48, 251, 105, -114, 105, -114, 373, 105, -114,
	105, 105, -161, -217, 369, 373, -327, -333, 70, 368,
	30, -228, -256, -257, -259, -268, -262, -266, -267, 40,
	46, 45, 169, 301, 191, 267, 279, 326, 147, 38,
	207, 155, 4, 154, 156, 157, 158, 159, 160, 278,
	37, 236, 121, 122, 120, 98, 89, 88, 203, 42,
	41, -270, -271, -264, -265, 86, 304, 305, 162, 39,
	52, 51, 331, 288, -287, -286, -327, -280, -161, 30,
	-204, 2, -337, 373, 179, -140, 185, 197, 137, 209,
	341, -285, 5, 4, -227, -241, 90, 182, -267, 8,
	360, -277, 7, 359, -279, -278, -279, 74, 370, -281,
	-159, 22, 274, 2, -280, -330, 125, -327, -280, -280,
	-280, -280, -280, 269, -45, 125, -125, 179, -280, 2,
	-280, 2, 294, 149, 294, -114, 373, -174, -194, -193,
	-196, -217, 22, -199, 119, 194, -217, -219, -101, -101,
	-101, -149, -245, -217, 230, 149, -280, -274, -256, -273,
	241, 242, 240, 244, 243, -256, -281, 303, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	180, 145, 276, 36, 146, -217, 306, -217, -217, -217,
	-217, 190, 198, 200, 312, 111, 319, 96, 204, -339,
	292, 32, -224, -102, 368, -239, 27, 281, 22, -231,
	258, 368, -212, -217, -213, -162, -161, 369, 373, -162,
	-230, -226, -238, -237, 335, 369, -161, 332, 22, 96,
	361, 2, 7, -187, 342, 189, 87, 138, 188, -188,
	264, -314, 118, 133, 368, 369, 2, 369, 2, 369,
	2, 369, 2, -217, -217, -181, 2, -275, -161, 4,
	342, 189, 87, 138, 188, 264, -181, 2, -182, 2,
	-217, -161, -183, -218, -219, 359, 360, 354, 368, 258,
	-184, 2, -217, -162, -217, 43, 176, 307, -185, -217,
	128, -161, -217, -217, -217, -161, -161, 2, -161, 2,
	368, 7, 7, 303, 303, 7, -129, -308, 30, -151,
	-154, 373, 128, 30, 4, -154, 373, 369, 168, 168,
	-247, -180, 168, -178, 215, -178, -178, -325, 368, 367,
	-244, -281, 366, 375, -162, 2, -243, -242, 30, -125,
	213, 369, -133, 373, 306, -191, 65, 59, -207, 143,
	59, -292, -125, 65, -293, 54, 318, 230, 127, -191,
	65, -191, 65, 65, -249, 33, -59, 128, 306, -249,
	306, 33, -59, 128, 306, -136, -281, -253, 346, -125,
	128, 369, 373, -141, -151, -142, -125, -208, -207, -294,
	-295, -292, 149, 318, 112, 30, 105, 222, 30, 208,
	198, -117, 297, 105, -209, 336, -200, -59, 368, 90,
	30, -200, -165, -166, -252, -167, -133, 368, -125, -159,
	-160, -160, -136, -137, -125, -151, 369, 373, -45, -254,
	306, 325, -142, -44, 369, 373, -153, 29, 366, -187,
	368, -253, 373, 128, 349, 306, 369, 309, -205, -139,
	235, 280, 247, 268, 8, 7, 7, 373, -281, -329,
	-125, 269, -45, -133, -136, -133, -249, -197, -277, 368,
	360, -198, 258, 259, 373, -110, 31, 94, 170, -133,
	343, -217, -217, 306, -339, 292, -224, -217, 190, 200,
	312, 111, 319, 96, 204, 128, 368, -218, -218, -161,
	-221, 368, -161, 367, 377, 369, -217, 367, 367, 373,
	-236, -237, 100, -217, -148, 373, -147, -217, -161, -161,
	369, 369, 306, 306, 306, 306, 368, -319, 216, 368,
	368, -217, 30, 373, 369, 128, 369, 369, -189, 224,
	369, 10, 11, 359, 360, 361, 362, 123, 363, 364,
	357, 358, 356, 347, 348, 349, 63, 186, 260, 13,
	14, 15, 164, 146, -218, -218, -218, -161, 368, 369,
	-222, -223, 128, 125, 30, -185, -185, -185, 369, 128,
	-161, 373, 373, 373, 369, 369, 369, 7, 369, 373,
	369, 343, 343, 369, 368, 369, -209, -251, -156, 2,
	-247, -281, -209, -240, -247, -247, -179, 325, 208, 168,
	-247, -242, 369, -326, 7, -244, -243, 7, -216, -215,
	126, 196, 369, -125, 368, -244, 369, -111, -133, -125,
	-125, 198, -207, 143, -116, 198, -256, -125, 368, 368,
	170, 170, -125, -125, 143, -125, 143, -125, -125, -112,
	246, -59, 368, -133, 246, -125, -59, 368, -125, 246,
	-95, 142, 204, 286, 128, -133, 369, 369, 373, -126,
	149, -126, -59, -159, 5, -59, -133, 105, -118, 101,
	-338, 349, -125, -195, -193, -217, -176, -202, 253, 208,
	-157, 330, -125, -176, -155, 373, 128, 349, -157, -114,
	-114, -114, -114, -217, -329, -286, 369, -256, 366, 367,
	7, 7, -98, 338, -286, -329, -278, -278, -122, 316,
	62, 235, -278, 373, -198, -217, -245, -133, 374, -217,
	-217, -218, -218, 128, 368, -217, -228, 26, 26, 369,
	-162, 373, -213, -217, 369, -226, 102, -217, 302, 369,
	332, -148, -148, -148, 5, 189, 138, 188, -188, 188,
	-188, -188, 7, -320, -125, 368, 336, -147, 369, -274,
	-256, -217, -222, -217, -274, -256, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, 96, 198, 204, -218, 373,
	-162, -223, -222, -217, -217, -256, 369, 369, 369, -161,
	-217, -217, -217, 369, 7, -44, -173, 133, -253, 373,
	-173, -179, 368, -217, -247, 367, 369, 373, -243, 367,
	373, 376, 349, -244, 368, -151, -242, 306, 306, 105,
	198, 327, -296, -293, -217, -150, -246, -125, -307, 368,
	-304, -305, -131, 368, 368, -109, 99, 272, -192, 105,
	-114, 105, -114, 306, -191, 65, -161, 306, -161, 306,
	-98, 128, 293, 286, -143, 148, -208, 368, -126, 368,
	368, -146, 368, -125, -119, 175, -338, -284, -310, -176,
	-176, -164, 199, 64, 369, -209, -166, -156, -240, 369,
	-99, 72, -99, 7, 367, 369, -97, 210, -96, -125,
	5, -125, 209, 369, -110, -281, 26, 26, -217, -228,
	369, -217, -217, 369, -217, 367, -217, 5, -217, 369,
	369, 369, 369, -321, -125, -217, 369, 369, 369, -223,
	128, 96, 204, 368, -217, 369, 369, 373, 369, 369,
	369, 369, -225, 135, 44, -247, -225, -151, -214, 7,
	-215, -281, 366, -243, -151, 369, -125, -125, -207, 105,
	-297, 65, -298, 57, 112, 70, 198, 200, 318, 230,
	54, 90, 239, 369, 369, 373, -132, -169, 57, -132,
	-217, 368, -150, -151, 198, 90, 198, 90, 83, 314,
	-125, -125, -133, -125, -125, 369, -133, 369, -125, -287,
	303, 146, -150, 368, -151, -141, 30, -150, 208, -120,
	174, -338, -284, -117, -201, 368, 208, -59, -176, 349,
	83, 83, 367, 373, 368, 349, 349, -110, -217, -217,
	369, 369, -148, -315, 221, 369, -218, 128, 368, -228,
	369, -217, -316, 337, -217, -161, -316, 369, -244, 7,
	369, -207, -125, -281, -125, 112, 143, 200, 170, 368,
	-218, -133, -206, -334, 69, 290, -246, -110, -281, -110,
	369, -161, 369, 369, 200, 200, -217, -256, -114, -114,
	306, 306, 306, 306, -220, -131, -125, 219, 369, -150,
	369, 369, -59, 369, -133, -338, -284, -118, 97, -151,
	65, -172, -102, 368, 368, 368, -96, -97, -286, -286,
	369, -148, 44, -218, -228, 369, 369, -317, -318, -125,
	-243, 367, -298, -126, 198, -217, -127, 368, -143, 368,
	-132, -148, 239, -113, 57, -125, -125, 368, 368, 368,
	-133, -206, 369, -143, -206, 368, -284, -119, 320, 199,
	369, -125, -287, -287, 369, -322, 234, 259, -161, 369,
	373, 30, 105, 369, -301, 187, -125, -151, -110, 369,
	-133, -108, 325, -281, -161, -161, -161, 368, -143, -206,
	-143, -150, -120, 272, -209, 369, 369, 369, -323, -324,
	36, 315, 74, -217, -323, -318, -320, 112, -299, -302,
	-300, 208, 129, 220, 277, 369, 369, -146, -217, 369,
	369, -148, -151, -143, 369, -165, -98, -98, -324, 227,
	124, 258, 227, 124, -125, -300, 208, -302, 208, 320,
	93, -301, 369, 369, -206, -209, 26, -303, 195, 251,
	48, 272, -303, -299, -115, 48, 251, -143, -324, 20,
	200, 90,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	636, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	557, 559, 561, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 672, -2, 683, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 649, 651,
	653, 655, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1249, 1176,
	1182, 1183, 1207, 1208, 1209, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 143, 145,
	146, 0, 0, 0, 1178, 1249, 152, 154, 156, 158,
	0, 164, 0, 0, 0, 0, 524, 161, 163, 253,
	1308, 255, 257, 0, 0, 0, 0, 167, 168, 169,
	170, 171, 172, 174, 176, 178, 180, 182, 183, 0,
	0, 0, 0, 0, 252, 250, 205, 206, 0, 235,
	236, 237, 238, 239, 241, 209, 211, 212, 214, 216,
	218, 220, 221, 223, 225, 226, 228, 230, 231, 233,
	0, 0, 259, 265, 266, 267, 269, 270, 271, 272,
	273, 274, 275, 0, 123, 0, 445, 248, 246, 0,
	119, 0, 554, 0, 261, 555, 556, 551, 552, 1335,
	580, 279, 281, 290, 292, 294, -2, -2, 1426, -2,
	303, -2, 311, 1432, 0, 314, 315, 318, -2, 201,
	340, 342, 344, 346, 348, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 369, 371, 373, 374, 375, 0,
	0, 0, 379, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 378, 380, 381, 382, 0, 558, 560,
	562, 0, 514, 674, -2, 647, 648, -2, 0, 678,
	678, 678, 0, 0, 648, 646, 0, 282, 0, 284,
	0, 379, 287, 288, 319, 320, 1161, 1162, 878, 0,
	0, 0, 0, 0, 0, 980, 982, 1398, 1426, 0,
	984, 985, 0, 987, 989, 990, 0, 993, 994, 1146,
	1178, 1192, 1193, 1194, 1195, 0, 0, 1198, 0, 1200,
	1201, 1202, 1048, 1004, -2, -2, 1190, 806, 807, 808,
	809, -2, 1440, 1008, 1011, 1014, 1017, 1018, 1021, 1022,
	0, 1382, 1399, 1400, 1422, 1423, 1431, 1435, 1436, 1406,
	1419, 1407, 1394, 1404, 1417, 1255, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1216, 840, 841, 846, 847, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	849, 582, 564, 573, 582, 566, 567, 568, 569, 570,
	571, 572, 575, 0, 664, 1314, 667, 1189, 665, 650,
	652, 0, 654, 0, 0, 658, 680, 679, 713, 714,
	0, 662, 663, 673, 729, 767, 744, 735, 0, 0,
	2, 68, 0, 1406, 767, 70, 0, 1406, 767, 72,
	0, 77, 0, 1406, 1181, 0, 0, 263, 264, 1186,
	1184, 1185, 0, 147, 148, 149, 150, 0, 0, 1179,
	1155, 1153, 1154, 159, 493, 1406, -2, 516, 493, 520,
	-2, 671, 1406, 596, 254, 256, 0, 166, 0, 609,
	0, 611, 0, 626, 773, 109, 1406, 186, 199, 109,
	1406, 189, 109, 1406, 192, 1174, 109, 1406, 195, 196,
	1406, 198, 249, 0, 0, -2, 242, 244, 1217, 1218,
	1219, 1220, -2, 1440, 240, 210, 213, 215, 217, 219,
	222, 224, 227, 229, 232, 234, -2, 0, 0, 0,
	444, 0, 0, 0, 553, 0, 579, 297, 0, 300,
	0, 302, 1393, -2, -2, 306, 583, 587, 588, 589,
	0, 0, 0, 0, 0, 0, 0, 316, 202, 0,
	376, 377, 385, 386, 124, 125, 337, 338, 0, 389,
	410, 422, 0, 0, 393, 395, 443, 397, 0, 0,
	399, 0, 401, 0, 403, 0, 405, 0, 407, 409,
	411, 423, 413, 673, 415, 0, 417, 421, 0, 426,
	0, 428, 429, 430, 0, 0, 436, 0, 0, 383,
	384, 109, 771, -2, 0, 642, 692, 693, 0, 0,
	0, 0, 676, 677, 0, 0, 0, 638, 639, 283,
	0, 286, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	1085, 1086, 1089, 1090, 1087, 1088, 1091, 1092, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 1095, 1096, 0, 0, 1098, 0, 1100,
	0, 0, 0, 0, 0, 0, 1160, 0, 0, 1097,
	883, 884, 885, 917, 918, 0, 981, 1157, 1150, 983,
	0, 1103, -2, 1104, 0, 0, 986, 991, 992, 1103,
	0, 1145, -2, 0, 1197, 0, 875, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1126,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	843, 854, 851, 850, 827, 0, 826, 824, 0, 828,
	0, 0, 0, 563, -2, 565, 0, 577, 0, 666,
	0, 0, 715, 718, 1166, 1170, 1171, 718, 0, 1163,
	0, 0, 0, 0, 764, 764, 764, 762, 738, 0,
	744, 0, -2, 768, 756, 0, -2, 735, 0, 0,
	769, 0, 78, 548, 88, 0, 548, 548, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 758, 1177, 0, 1151, 1152, 1221, 1222, 1223,
	1224, 1225, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 139, 0, 0, 1172, 1156, 451, 0,
	0, 515, 0, 670, 0, 0, 0, 1406, 523, 1210,
	598, 0, 777, 0, 612, 0, 0, 774, 0, 184,
	0, 107, 108, 0, 187, 0, 190, 0, 0, 193,
	0, 0, 0, 1104, 673, 0, 0, 268, 0, 0,
	673, 0, 1106, 785, 786, 787, 788, 789, 875, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 837, 0, 812, 812, 812, 829,
	830, 838, 839, 844, 845, 856, 857, 859, 861, 855,
	855, 855, 852, 853, 758, 126, 0, 0, 0, 0,
	-2, 308, 0, 585, 0, 590, 328, 329, 330, 592,
	593, 312, 331, 332, 333, 334, 335, 336, 0, 510,
	0, 512, 1203, 0, 309, 321, 310, 313, 0, 203,
	387, 388, 390, 391, 392, 396, 0, 440, 398, 400,
	402, 404, 406, 414, 418, 673, 424, 427, 431, 432,
	433, 434, 0, 0, 0, 513, 0, 645, 690, 691,
	696, 700, 701, 704, 707, 708, 698, 878, 659, 660,
	661, 684, 685, 535, 0, 0, 285, 879, 781, 782,
	831, 832, 833, 834, 835, 880, 881, 0, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, -2, -2,
	-2, -2, -2, -2, -2, -2, 904, 905, 906, 907,
	908, 909, 910, 911, -2, -2, -2, 915, 916, -2,
	1099, 1101, 0, 1160, 0, -2, 0, -2, -2, -2,
	-2, 929, 0, 931, 934, 936, 938, 0, 0, 0,
	0, 1159, 948, 1137, 0, 0, 1078, 1079, 1080, 933,
	0, 0, 1158, 1149, 0, 0, 1102, 988, 0, 0,
	0, 1110, 1144, 1140, 0, 995, 683, 0, 0, 0,
	0, 1002, 0, 1206, 862, 863, 864, 865, 866, 867,
	876, 1058, 0, 0, 0, 1009, 1010, 1012, 1013, 1015,
	1016, 1019, 1020, 0, 0, 0, 1026, 0, 1113, -2,
	-2, -2, -2, -2, -2, -2, 0, 1028, 0, 1030,
	1104, 1123, 0, 0, 951, 0, 0, 0, 0, 1426,
	0, 1033, 1104, 1131, 0, 0, 0, 0, 0, 1104,
	0, 1136, 0, 0, 0, 0, 0, 1044, 0, 1046,
	0, 0, 0, 0, 0, 0, 576, 668, 0, 0,
	777, 0, 0, 0, 1169, 777, 0, 1165, 0, 0,
	0, 0, 0, 759, 763, 760, 761, 0, 0, 744,
	756, 726, 0, 0, 0, 733, 734, 755, 0, 754,
	743, -2, 0, 0, 0, 0, 0, 547, 90, 1406,
	0, 111, 0, 0, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 1180, 129, 0, 1187,
	0, 0, 0, 0, 0, 450, 1186, 452, 454, 455,
	456, 457, 1211, 0, 1211, 0, 0, 0, 0, 0,
	0, 600, 606, 0, 695, 0, 624, 614, 0, 0,
	0, 624, 628, 629, 631, 632, 0, 0, 775, 200,
	109, 109, 1175, 109, 109, 197, 251, 0, 207, 243,
	0, 0, 0, 245, 247, 0, 778, 780, 0, 790,
	0, 138, 0, 0, 0, 0, 301, 0, 584, 591,
	0, 325, 0, 327, 511, 1205, 1204, 0, 204, 442,
	276, 416, 419, 437, 438, 439, 772, 0, 702, 0,
	0, 699, 705, 706, 0, 687, 533, 534, 0, 0,
	0, -2, -2, 0, 0, 0, 949, -2, 930, 932,
	935, 937, 939, 0, 0, 0, 0, 0, 0, 0,
	950, 1103, 0, 1147, 1150, -2, 1105, 1108, 1109, 0,
	0, 1141, 0, 0, 0, 0, 682, 683, 683, 683,
	1001, 0, 0, 0, 0, 0, 0, 1003, 0, 0,
	0, 0, 0, 0, 1025, 0, 1027, 1029, 0, 0,
	1031, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 954, 955, 956, 0, 1103, 1032,
	1129, 1130, 0, 0, 0, 0, 0, 0, 1038, 0,
	1135, 0, 0, 0, 1042, 1043, 1045, 0, 810, 0,
	836, 858, 860, 848, 673, 1188, 710, 1167, 758, 717,
	719, 1168, 710, 1164, 746, 0, 748, 0, 0, 0,
	750, 0, 739, 0, 741, 756, 731, 0, 0, 724,
	0, 723, 744, 752, 0, 0, 770, 89, 537, 0,
	0, 0, 92, 1406, 100, 0, 465, 0, 0, 0,
	0, 0, 550, 101, 1406, 109, 1406, 109, 102, 79,
	548, 80, 0, 543, 0, 536, 81, 0, 545, 0,
	138, 0, 0, 140, 0, 1173, 459, 492, 0, 0,
	1211, 0, 448, 493, 517, 519, 0, 0, 602, 606,
	0, 605, 671, 624, 694, 776, 607, 624, 0, 0,
	0, 616, 613, 610, 777, 0, 0, 0, 0, 185,
	188, 191, 194, 1105, 258, 0, 0, 1107, 0, 783,
	0, 0, 118, 0, 127, 260, 298, 299, 304, 323,
	324, 326, 322, 0, 0, 0, 686, 535, 0, 882,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 1138,
	0, 0, 0, 1149, -2, 1111, 1139, 1143, 0, 996,
	0, 0, 0, 0, 1199, 868, 869, 870, 871, 872,
	873, 874, 0, 1056, 1057, 1061, 0, 0, 1007, 0,
	0, 1112, 1122, 1124, 952, 953, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, -2, -2, -2, 970,
	971, 972, -2, -2, -2, 0, 0, 0, 1125, 0,
	0, 1127, 1128, 1132, 1133, 0, 1035, 1036, 1037, 1134,
	0, 0, 0, 842, 0, 0, 712, 0, 716, 0,
	712, 747, 0, 766, 749, 729, 740, 0, 737, 727,
	0, 728, 0, 756, 0, 0, 736, 0, 0, 0,
	0, 110, 463, 482, 0, 0, 526, 532, 532, 0,
	1005, 1006, 0, 0, 0, 94, 0, 0, 0, 0,
	98, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 141, 446, 0, 453, 0, 0, 0,
	451, 0, 0, 0, 604, 606, 0, 597, 598, 165,
	608, 622, 623, 621, 0, 624, 630, 627, 633, 0,
	0, 120, 0, 0, 784, 791, 136, 1298, 134, 131,
	133, 277, 697, 703, 688, 535, 0, 0, -2, 0,
	942, -2, -2, 1074, 1105, 1148, 1142, 1196, 683, 997,
	999, 1000, 877, 1063, 1060, 0, 1047, 1023, 1024, 1121,
	0, 0, 0, 0, 1105, 1076, 1034, 0, 1040, 1041,
	811, 669, 1052, 0, 0, 720, 1052, 0, 744, 742,
	725, 721, 0, 732, 0, 753, 539, 541, 91, 0,
	464, 0, 467, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 484, 491, 0, 535, 1191, 0, 535,
	0, 0, 0, 0, 0, 106, 0, 0, 549, 0,
	109, 109, 538, 0, 0, 0, 544, 0, 546, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	606, 0, 599, 600, 0, 0, 0, 615, 625, 0,
	0, 0, 779, 0, 0, 0, 0, 689, -2, -2,
	943, 1075, 0, 683, 0, 1049, -2, 0, 0, 0,
	1077, 0, 656, 0, 711, 709, 657, 765, 756, 0,
	751, 93, 0, 468, 469, 1211, 0, 472, 475, 0,
	477, 1213, 459, 0, 488, 489, 527, 528, 531, 529,
	532, 683, 486, 0, 95, 96, 105, 113, 97, 103,
	0, 0, 0, 0, 757, 0, 0, 0, 491, 0,
	481, 459, 449, 491, 0, 0, 601, 602, 0, 0,
	0, 634, 635, 0, 0, 0, 135, 0, 130, 132,
	998, 1066, 0, -2, 0, 978, 1039, 1051, 1053, 0,
	730, 722, 466, 470, 0, 0, 497, 0, 485, 0,
	535, 0, 0, 115, 0, 540, 542, 0, 0, 0,
	0, 459, 491, 447, 459, 0, 603, 604, 0, 618,
	777, 620, 0, 0, 137, 0, 0, 0, 1062, 979,
	0, 0, 0, 476, 502, 0, 0, 0, 530, 996,
	493, 99, 0, 112, 0, 0, 683, 0, 479, 459,
	521, 0, 595, 0, 619, 138, 138, 1059, 1064, 1067,
	-2, 1366, 1246, 0, 1065, 1054, 1055, 0, 478, 498,
	499, 0, 494, 495, 496, 1212, 490, 497, 114, 85,
	87, 0, 0, 480, 491, 777, 121, 122, 0, 1069,
	1070, 1071, 1072, 1073, 471, 500, 0, 501, 0, 0,
	0, 502, 0, 462, 459, 617, 0, 503, 0, 506,
	507, 0, 504, 487, 458, 460, 461, 522, 1068, 505,
	508, 509,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 357, 3, 363, 358, 3,
	368, 369, 361, 359, 373, 360, 370, 362, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 377, 372,
	347, 349, 348, 351, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 366, 3, 367, 364, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 375, 356, 376, 354,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 350,
	57690, 352, 57691, 353, 57692, 355, 57693, 365, 57694, 371,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1124
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex, "match full")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex, "match partial")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex, "match simple")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "no action")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "action set null")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "action set default")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = true
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = false
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = Ascending
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Descending
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2948
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2950
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.str = ""
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.str = ""
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3144
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = ReadOnly
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = ReadWrite
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.str = ""
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.str = ""
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "INSERT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			return helpWith(sqllex, "SELECT")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			return helpWith(sqllex, "VALUES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "TABLE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "SELECT")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			return helpWith(sqllex, "TABLE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3651
		{
			return unimplemented(sqllex, "cte")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = true
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = false
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = false
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = true
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			return helpWith(sqllex, "VALUES")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &From{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3912
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3957
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3994
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = nil
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.str = astFullJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.str = astLeftJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.str = astRightJoin
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.str = astInnerJoin
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4278
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = jsonbColType
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4375
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4406
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4415
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = nil
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4480
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4576
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4608
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4648
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = year
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = month
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = day
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = hour
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = minute
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = month
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = hour
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = minute
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = minute
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = nil
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = second
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4743
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4778
		{
			return unimplemented(sqllex, "at tz")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4986
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5052
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5225
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5278
		{
			return unimplemented(sqllex, "variadic")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5279
		{
			return unimplemented(sqllex, "variadic")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5303
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5319
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5320
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5324
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5342
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5352
		{
			return unimplemented(sqllex, "current role")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5387
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5392
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5401
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5402
		{
			return unimplemented(sqllex, "treat")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5448
		{
			return unimplemented(sqllex, "within group")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5449
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.str = ""
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5546
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5547
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5548
		{
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5552
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5559
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5560
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5561
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5562
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = Any
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = Some
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = All
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = Plus
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = Minus
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = Mult
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = Div
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = Mod
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = Bitand
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = Bitor
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = Pow
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = Bitxor
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = LT
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = GT
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = EQ
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = LE
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = GE
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = NE
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = Like
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = NotLike
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = ILike
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = NotILike
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5917
		{
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5918
		{
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6036
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6080
		{
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6116
		{
			return unimplemented(sqllex, "func const")
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6125
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = DNull
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6152
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.str = ""
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
