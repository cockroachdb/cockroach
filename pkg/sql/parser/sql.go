// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5892

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 33,
	354, 33,
	-2, 508,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 67,
	1, 480,
	197, 480,
	241, 480,
	350, 480,
	352, 480,
	354, 480,
	-2, 490,
	-1, 113,
	1, 483,
	197, 483,
	241, 483,
	350, 483,
	352, 483,
	354, 483,
	-2, 489,
	-1, 131,
	1, 33,
	354, 33,
	-2, 508,
	-1, 512,
	122, 1089,
	293, 1089,
	336, 1089,
	353, 1089,
	-2, 0,
	-1, 523,
	1, 217,
	354, 217,
	-2, 1094,
	-1, 536,
	111, 518,
	170, 518,
	195, 518,
	-2, 486,
	-1, 544,
	111, 517,
	170, 517,
	195, 517,
	-2, 484,
	-1, 697,
	351, 1021,
	-2, 1014,
	-1, 698,
	351, 1022,
	-2, 1015,
	-1, 704,
	5, 688,
	351, 688,
	-2, 1219,
	-1, 729,
	5, 647,
	-2, 1189,
	-1, 730,
	5, 682,
	351, 682,
	-2, 1191,
	-1, 731,
	5, 657,
	-2, 1192,
	-1, 732,
	5, 656,
	-2, 1193,
	-1, 733,
	5, 682,
	351, 682,
	-2, 1196,
	-1, 734,
	5, 682,
	351, 682,
	-2, 1197,
	-1, 735,
	5, 683,
	-2, 1200,
	-1, 736,
	5, 639,
	-2, 1201,
	-1, 737,
	5, 639,
	-2, 1202,
	-1, 738,
	5, 664,
	-2, 1206,
	-1, 739,
	5, 649,
	-2, 1207,
	-1, 740,
	5, 650,
	-2, 1208,
	-1, 741,
	5, 640,
	-2, 1213,
	-1, 742,
	5, 641,
	-2, 1214,
	-1, 743,
	5, 642,
	-2, 1215,
	-1, 744,
	5, 643,
	-2, 1216,
	-1, 745,
	5, 644,
	-2, 1217,
	-1, 746,
	5, 645,
	-2, 1218,
	-1, 747,
	5, 639,
	-2, 1223,
	-1, 748,
	5, 648,
	-2, 1228,
	-1, 749,
	5, 646,
	-2, 1231,
	-1, 750,
	5, 680,
	351, 680,
	-2, 1233,
	-1, 751,
	5, 684,
	-2, 1236,
	-1, 752,
	5, 686,
	-2, 1237,
	-1, 753,
	5, 679,
	351, 679,
	-2, 1242,
	-1, 798,
	211, 506,
	-2, 380,
	-1, 803,
	111, 517,
	170, 517,
	195, 517,
	-2, 487,
	-1, 906,
	102, 490,
	111, 490,
	151, 490,
	170, 490,
	195, 490,
	201, 490,
	304, 490,
	-2, 574,
	-1, 983,
	102, 490,
	111, 490,
	151, 490,
	170, 490,
	195, 490,
	201, 490,
	304, 490,
	-2, 807,
	-1, 992,
	351, 998,
	-2, 986,
	-1, 1237,
	1, 575,
	70, 575,
	102, 575,
	111, 575,
	123, 575,
	127, 575,
	129, 575,
	142, 575,
	151, 575,
	158, 575,
	167, 575,
	170, 575,
	182, 575,
	195, 575,
	197, 575,
	201, 575,
	241, 575,
	243, 575,
	304, 575,
	312, 575,
	323, 575,
	324, 575,
	333, 575,
	350, 575,
	352, 575,
	354, 575,
	355, 575,
	-2, 574,
	-1, 1286,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 723,
	-1, 1287,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 724,
	-1, 1288,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 725,
	-1, 1292,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 729,
	-1, 1293,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 730,
	-1, 1294,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 731,
	-1, 1297,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 736,
	-1, 1303,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 738,
	-1, 1305,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 742,
	-1, 1306,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 743,
	-1, 1307,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 744,
	-1, 1308,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 745,
	-1, 1334,
	206, 880,
	-2, 883,
	-1, 1371,
	122, 920,
	351, 1021,
	-2, 1014,
	-1, 1372,
	122, 921,
	-2, 1185,
	-1, 1373,
	122, 922,
	-2, 1093,
	-1, 1374,
	122, 923,
	-2, 1057,
	-1, 1375,
	122, 924,
	-2, 1074,
	-1, 1376,
	122, 925,
	-2, 1092,
	-1, 1377,
	122, 926,
	-2, 1144,
	-1, 1573,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 737,
	-1, 1574,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 739,
	-1, 1579,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 740,
	-1, 1597,
	206, 879,
	-2, 882,
	-1, 1797,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 741,
	-1, 1802,
	154, 0,
	-2, 757,
	-1, 1812,
	206, 881,
	-2, 884,
	-1, 1854,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 784,
	-1, 1855,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 785,
	-1, 1856,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 786,
	-1, 1860,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 790,
	-1, 1861,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 791,
	-1, 1862,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 792,
	-1, 1966,
	154, 0,
	-2, 758,
	-1, 1969,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 761,
	-1, 1970,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 763,
	-1, 2076,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 762,
	-1, 2077,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 764,
	-1, 2084,
	154, 0,
	-2, 793,
	-1, 2150,
	154, 0,
	-2, 794,
	-1, 2222,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1188,
}

const sqlPrivate = 57344

const sqlLast = 31493

var sqlAct = [...]int{

	698, 2229, 1888, 2266, 2198, 2221, 2106, 2231, 2230, 1120,
	2220, 1245, 1831, 545, 1911, 1253, 2138, 2019, 2033, 393,
	2091, 1127, 2004, 1232, 66, 1033, 1718, 641, 1895, 674,
	2058, 1720, 1458, 1663, 1477, 619, 688, 1541, 140, 904,
	1555, 1083, 140, 1435, 1440, 900, 1894, 1448, 1608, 140,
	1436, 1942, 696, 1491, 1439, 1662, 1332, 140, 988, 1357,
	395, 887, 140, 140, 1123, 1521, 140, 1254, 1691, 140,
	1265, 880, 1233, 1528, 695, 1187, 140, 1761, 369, 1522,
	1115, 1158, 1239, 1473, 1482, 552, 111, 1397, 1109, 1185,
	1342, 776, 668, 1320, 1443, 1084, 1317, 881, 918, 367,
	560, 810, 522, 563, 775, 1023, 812, 1019, 1351, 667,
	623, 979, 564, 1247, 1368, 1220, 891, 569, 1207, 805,
	655, 113, 377, 24, 611, 140, 140, 520, 500, 114,
	819, 140, 820, 132, 1107, 140, 140, 555, 818, 690,
	550, 2020, 518, 111, 864, 385, 922, 649, 136, 626,
	609, 863, 824, 516, 1596, 504, 1775, 123, 2252, 1776,
	1117, 913, 1117, 544, 549, 901, 1117, 1250, 37, 118,
	1246, 2243, 549, 1034, 1261, 1633, 1634, 1240, 1651, 1652,
	1653, 109, 1354, 1730, 2242, 2240, 633, 1261, 2018, 123,
	2238, 1965, 1567, 913, 1209, 120, 497, 503, 1141, 1764,
	1261, 41, 1566, 110, 2192, 553, 2166, 1415, 2155, 2018,
	621, 2154, 2152, 2145, 2183, 1415, 913, 111, 2121, 2118,
	123, 2018, 913, 48, 1422, 1600, 1764, 50, 1648, 1355,
	1601, 112, 1208, 537, 121, 110, 934, 935, 56, 1240,
	57, 536, 964, 965, 966, 2117, 1599, 2116, 2018, 126,
	913, 1261, 2104, 2078, 24, 2018, 1415, 2066, 58, 937,
	913, 1422, 968, 112, 59, 2063, 110, 1489, 913, 1731,
	56, 1867, 57, 572, 1356, 1353, 613, 130, 2055, 1809,
	913, 1261, 1639, 936, 934, 935, 1702, 2054, 2017, 951,
	1261, 2018, 1993, 1476, 112, 1261, 59, 1971, 1432, 1968,
	1261, 56, 1415, 57, 1091, 1955, 1806, 937, 913, 1261,
	1336, 1795, 1790, 129, 1244, 1244, 876, 1771, 1261, 1654,
	1772, 124, 1701, 631, 659, 913, 1607, 59, 125, 618,
	1680, 936, 126, 1681, 1678, 1677, 1676, 1261, 1261, 1261,
	1649, 2021, 1597, 942, 1400, 1261, 60, 115, 131, 1358,
	637, 1118, 61, 1118, 1536, 905, 140, 1118, 934, 935,
	130, 140, 961, 969, 1544, 1518, 2244, 1261, 913, 569,
	68, 69, 62, 1113, 63, 831, 64, 1424, 122, 1414,
	1261, 937, 1415, 65, 790, 1260, 1243, 126, 1261, 1244,
	2236, 942, 2219, 550, 75, 959, 129, 117, 2205, 1214,
	930, 952, 1213, 931, 124, 936, 119, 2147, 566, 2119,
	1998, 125, 1994, 1650, 1986, 130, 1985, 1984, 1980, 126,
	1979, 1978, 1960, 1484, 1126, 1566, 1352, 1208, 1977, 117,
	1249, 1328, 1941, 1886, 97, 1882, 1877, 1876, 1875, 1817,
	1700, 1705, 1685, 116, 1682, 1670, 1661, 130, 1420, 126,
	126, 129, 1633, 1634, 1174, 1632, 898, 1629, 1628, 124,
	117, 1626, 1613, 1612, 1833, 942, 125, 1139, 1548, 1134,
	2195, 650, 123, 1116, 953, 1365, 1364, 130, 130, 1633,
	1634, 656, 1363, 129, 831, 115, 1633, 1634, 1237, 996,
	962, 124, 830, 989, 640, 115, 903, 2182, 125, 1645,
	1646, 1647, 140, 902, 1644, 1642, 1643, 1635, 1636, 1637,
	1638, 1640, 1641, 129, 129, 2181, 140, 115, 110, 2174,
	2168, 2164, 124, 952, 569, 638, 140, 2142, 2101, 125,
	2086, 140, 140, 140, 2075, 140, 1329, 2024, 1633, 1634,
	140, 140, 140, 140, 140, 2016, 112, 115, 115, 2000,
	804, 1991, 1909, 56, 1907, 57, 1906, 960, 1905, 1639,
	1902, 1892, 1801, 963, 1779, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 1767, 569, 1959, 989, 1754, 59,
	1752, 1706, 1709, 1660, 1689, 803, 1639, 1622, 1621, 1618,
	1593, 1588, 1322, 1639, 816, 1546, 953, 1517, 1024, 934,
	935, 1027, 1407, 1362, 1225, 140, 140, 140, 140, 140,
	1119, 140, 786, 1031, 1017, 1016, 938, 939, 940, 941,
	943, 944, 937, 1015, 1014, 1417, 1013, 1012, 140, 140,
	1011, 569, 140, 796, 1010, 799, 792, 637, 395, 1009,
	140, 1008, 807, 807, 1649, 1639, 936, 140, 140, 140,
	1007, 140, 550, 1706, 885, 1006, 1005, 914, 1004, 140,
	808, 766, 774, 934, 935, 1003, 1002, 1001, 920, 771,
	836, 1000, 993, 982, 537, 837, 115, 620, 879, 770,
	761, 653, 536, 2141, 1999, 1973, 937, 884, 945, 946,
	938, 939, 940, 941, 943, 944, 1885, 550, 1687, 1534,
	827, 828, 126, 1649, 1774, 1770, 942, 908, 111, 1226,
	936, 980, 117, 871, 903, 141, 868, 1650, 2157, 874,
	1721, 783, 899, 1633, 1634, 1963, 911, 691, 1777, 835,
	130, 837, 1568, 867, 1029, 1633, 1634, 1240, 905, 1030,
	1684, 1683, 1195, 567, 1472, 1633, 1634, 1572, 1651, 1652,
	1653, 865, 1471, 785, 639, 782, 767, 650, 998, 1124,
	1097, 877, 1193, 569, 784, 140, 129, 1246, 1692, 2059,
	140, 542, 1604, 1834, 124, 396, 1650, 907, 1343, 1194,
	912, 125, 1020, 1562, 569, 569, 1637, 1638, 1640, 1641,
	534, 395, 932, 1925, 921, 924, 2144, 2211, 1648, 859,
	115, 140, 1188, 2258, 1189, 933, 1188, 2048, 1189, 1125,
	1114, 1635, 1636, 1637, 1638, 1640, 1641, 2259, 1635, 1636,
	1637, 1638, 1640, 1641, 607, 992, 604, 1425, 541, 603,
	1639, 1188, 570, 1189, 598, 995, 903, 599, 860, 854,
	140, 1021, 1022, 1025, 140, 1697, 140, 140, 140, 140,
	140, 140, 1639, 1028, 2136, 1183, 140, 2135, 2134, 2133,
	140, 140, 1940, 837, 1939, 527, 1130, 140, 1642, 1643,
	1635, 1636, 1637, 1638, 1640, 1641, 1922, 140, 1190, 1921,
	140, 606, 1190, 1617, 1616, 1615, 1133, 1614, 1649, 1136,
	1098, 1138, 1575, 140, 1515, 1514, 1512, 1087, 1085, 1304,
	1493, 1354, 395, 1493, 1264, 140, 1936, 1190, 866, 1492,
	1649, 140, 1086, 630, 140, 2143, 1957, 1411, 1090, 1110,
	1103, 1228, 1102, 1410, 783, 1275, 140, 1688, 140, 1459,
	1206, 528, 569, 940, 941, 943, 944, 395, 357, 111,
	1227, 1182, 1162, 1132, 526, 1418, 537, 1784, 1355, 537,
	537, 1145, 1144, 1175, 1154, 2108, 1274, 1155, 1156, 1785,
	1552, 1650, 1101, 1100, 916, 566, 561, 784, 1199, 386,
	540, 1165, 1217, 1164, 1169, 1170, 1171, 1172, 1173, 1168,
	2233, 769, 1319, 1650, 1198, 840, 856, 1179, 1180, 530,
	358, 391, 2186, 1356, 1353, 1184, 1343, 387, 928, 543,
	944, 1204, 1319, 1212, 1196, 529, 1927, 925, 1358, 539,
	1218, 1222, 1223, 535, 756, 1750, 111, 985, 531, 1186,
	920, 1197, 841, 605, 388, 839, 1326, 851, 532, 1428,
	1262, 1324, 2249, 2258, 1474, 1475, 1556, 1759, 1252, 2171,
	1430, 1633, 1634, 390, 656, 1248, 1104, 1248, 1340, 1827,
	683, 857, 1263, 1560, 1643, 1635, 1636, 1637, 1638, 1640,
	1641, 1431, 608, 1756, 852, 2264, 2234, 2012, 1358, 1645,
	1646, 1647, 1641, 1429, 1644, 1642, 1643, 1635, 1636, 1637,
	1638, 1640, 1641, 1181, 570, 1202, 1696, 1327, 137, 1449,
	1330, 1698, 352, 1117, 1648, 1201, 1191, 1556, 1018, 354,
	1191, 2013, 1454, 2082, 858, 934, 935, 366, 1266, 1273,
	1077, 1413, 496, 137, 395, 1088, 502, 140, 111, 502,
	140, 1378, 2235, 548, 1358, 1191, 524, 140, 937, 1105,
	779, 361, 2093, 1433, 1934, 140, 140, 1490, 140, 977,
	140, 140, 395, 140, 140, 1352, 2269, 661, 1639, 1419,
	2189, 1620, 936, 389, 360, 359, 1451, 1221, 951, 1236,
	2248, 1466, 140, 673, 2109, 549, 1421, 1887, 140, 1928,
	1916, 1025, 547, 1028, 2190, 612, 612, 2232, 1824, 2257,
	2255, 352, 140, 140, 140, 137, 634, 1022, 1021, 140,
	2032, 506, 1456, 140, 1468, 780, 1426, 845, 764, 781,
	2008, 140, 2009, 658, 140, 351, 1649, 392, 1551, 507,
	140, 395, 942, 823, 890, 2277, 140, 140, 754, 1519,
	140, 2128, 549, 1825, 1524, 140, 822, 1434, 140, 1577,
	1523, 1301, 2011, 1494, 1989, 140, 2127, 1461, 807, 570,
	807, 2014, 1465, 1500, 1502, 140, 1464, 1231, 2099, 1318,
	140, 1538, 140, 1470, 1450, 1462, 2265, 1463, 2247, 140,
	2161, 2047, 111, 1924, 1741, 140, 1537, 894, 2046, 508,
	952, 1737, 1457, 1325, 550, 1525, 1485, 1547, 397, 1650,
	1131, 2044, 2267, 1497, 1118, 821, 897, 506, 1558, 1487,
	570, 1121, 1863, 1564, 624, 1526, 1527, 1533, 1358, 1532,
	567, 562, 892, 1505, 1542, 507, 1520, 1513, 1823, 2199,
	823, 895, 1150, 1178, 1516, 1315, 2276, 1507, 2010, 1092,
	1510, 1912, 822, 362, 2034, 546, 893, 1333, 2100, 1711,
	1313, 1299, 1302, 1990, 1337, 571, 1710, 2268, 1345, 1531,
	1499, 1530, 1480, 953, 1216, 498, 570, 550, 1561, 1571,
	1370, 1370, 1381, 396, 1392, 1215, 495, 1569, 2270, 1606,
	1404, 1405, 1406, 363, 1298, 508, 1096, 2045, 509, 1543,
	1644, 1642, 1643, 1635, 1636, 1637, 1638, 1640, 1641, 123,
	2043, 821, 1151, 779, 1383, 1864, 648, 896, 547, 647,
	800, 1865, 364, 1889, 365, 643, 1578, 642, 1576, 2001,
	1309, 133, 2097, 1550, 934, 935, 644, 3, 1310, 1094,
	1311, 352, 1762, 550, 1316, 1943, 1592, 381, 32, 380,
	31, 1095, 1361, 569, 140, 110, 2098, 937, 2085, 1665,
	894, 1988, 1603, 569, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 1664, 505, 140, 510, 140, 140, 897,
	1800, 936, 1783, 112, 140, 1627, 1529, 140, 1587, 1300,
	56, 140, 57, 1553, 509, 1219, 1704, 1511, 1707, 1508,
	1423, 1242, 862, 861, 895, 1585, 855, 511, 570, 850,
	849, 140, 1667, 1668, 1669, 597, 59, 848, 847, 1040,
	1583, 140, 140, 140, 376, 28, 846, 140, 843, 570,
	570, 140, 140, 140, 140, 140, 396, 762, 1694, 646,
	1106, 942, 1176, 140, 1167, 140, 140, 1695, 1693, 999,
	1312, 1699, 853, 837, 651, 1360, 2228, 1314, 2196, 1633,
	1634, 2042, 140, 635, 1932, 636, 632, 1930, 140, 629,
	1923, 1738, 510, 1723, 1724, 1717, 1725, 140, 140, 32,
	896, 31, 765, 1726, 1460, 1453, 1713, 1203, 1728, 1200,
	1580, 1773, 1192, 1143, 1142, 1733, 524, 140, 140, 952,
	1581, 1732, 1140, 511, 1586, 1712, 352, 1791, 1715, 379,
	17, 524, 798, 524, 1778, 801, 1137, 571, 1135, 1686,
	524, 524, 352, 814, 634, 1749, 1760, 1780, 373, 13,
	1788, 1766, 1765, 111, 1763, 1814, 600, 601, 1719, 126,
	2070, 1769, 1703, 825, 1803, 375, 16, 396, 1782, 117,
	1781, 140, 2259, 1819, 1820, 1821, 28, 1112, 1786, 1751,
	1794, 2072, 1753, 1793, 1792, 1504, 1639, 130, 616, 755,
	1789, 1478, 953, 703, 2178, 374, 14, 570, 1493, 2021,
	758, 842, 396, 1810, 1503, 502, 352, 352, 873, 352,
	1813, 612, 1040, 1040, 372, 12, 2149, 1591, 1944, 378,
	10, 1835, 1703, 129, 1594, 1826, 1828, 1829, 352, 352,
	1582, 124, 137, 382, 829, 826, 1840, 1584, 125, 651,
	352, 1509, 1610, 1611, 1649, 1837, 1870, 352, 352, 352,
	1506, 926, 1479, 140, 1842, 813, 140, 115, 2184, 137,
	617, 17, 2030, 371, 8, 1455, 370, 4, 140, 1871,
	1493, 569, 1452, 1908, 934, 935, 1501, 1893, 1251, 1205,
	13, 395, 140, 1659, 1089, 946, 938, 939, 940, 941,
	943, 944, 571, 1901, 1672, 1032, 2262, 16, 499, 2275,
	1919, 1913, 1633, 1634, 934, 935, 1903, 1890, 2065, 1900,
	833, 832, 934, 935, 1918, 140, 1949, 1650, 140, 870,
	813, 936, 651, 1884, 1883, 1830, 1071, 14, 395, 140,
	140, 1899, 833, 1690, 569, 937, 1679, 1915, 1539, 1412,
	1409, 624, 909, 571, 1408, 1350, 12, 1951, 1266, 1838,
	383, 10, 1953, 919, 1935, 986, 834, 1266, 1843, 936,
	651, 923, 923, 1950, 757, 137, 1948, 1946, 1947, 1975,
	524, 1914, 2194, 2092, 1822, 1956, 1931, 1967, 1933, 396,
	1954, 700, 1962, 1714, 140, 996, 994, 768, 525, 2107,
	1874, 384, 1166, 844, 1945, 8, 1535, 386, 4, 571,
	1224, 1129, 2188, 1981, 1619, 2137, 397, 396, 1644, 1642,
	1643, 1635, 1636, 1637, 1638, 1640, 1641, 2081, 1359, 391,
	997, 49, 1897, 677, 1987, 387, 2002, 1891, 1442, 1441,
	398, 1099, 699, 554, 837, 1369, 1267, 759, 701, 1037,
	524, 702, 1038, 1026, 524, 689, 137, 524, 524, 524,
	524, 524, 388, 140, 929, 1035, 1177, 140, 140, 654,
	524, 524, 1255, 1961, 569, 2022, 1323, 502, 1341, 1602,
	990, 390, 140, 140, 140, 669, 396, 612, 681, 1901,
	634, 140, 680, 140, 1338, 140, 140, 140, 1807, 2015,
	140, 140, 1901, 352, 2035, 1900, 1901, 760, 2037, 1071,
	1071, 2029, 2027, 2025, 2038, 1235, 2031, 2028, 1900, 1540,
	140, 352, 1900, 1559, 1241, 1958, 1149, 1899, 2041, 1469,
	1146, 1153, 1929, 533, 1630, 652, 352, 2062, 1259, 1390,
	1899, 571, 1382, 1379, 1899, 791, 886, 2067, 2064, 890,
	2080, 978, 1256, 789, 2068, 1565, 1416, 878, 1157, 2073,
	615, 614, 571, 571, 140, 1868, 395, 140, 1437, 397,
	2071, 787, 1093, 1427, 2036, 140, 1878, 2087, 971, 970,
	602, 2163, 395, 778, 777, 2095, 1122, 1740, 2263, 2177,
	1926, 389, 2210, 140, 128, 127, 569, 2156, 2090, 1549,
	74, 2112, 894, 140, 30, 29, 93, 2110, 920, 92,
	91, 90, 89, 1901, 2111, 1901, 624, 2113, 88, 87,
	140, 897, 86, 2105, 2125, 140, 2123, 85, 84, 1900,
	83, 1900, 82, 140, 1238, 81, 80, 892, 79, 78,
	77, 76, 521, 73, 72, 392, 895, 2126, 2140, 1257,
	71, 1899, 70, 1899, 140, 2148, 27, 1937, 140, 1938,
	550, 893, 23, 96, 22, 20, 21, 26, 25, 2167,
	18, 2165, 2151, 15, 9, 19, 54, 2159, 55, 2160,
	397, 53, 2172, 52, 569, 51, 11, 47, 2173, 2170,
	2131, 2132, 2169, 46, 140, 140, 2124, 45, 570, 44,
	2176, 43, 42, 1040, 7, 95, 40, 39, 570, 38,
	571, 6, 94, 2120, 5, 397, 1384, 2187, 107, 104,
	106, 103, 896, 105, 108, 140, 1040, 352, 2201, 140,
	1438, 100, 140, 2202, 101, 2193, 2207, 634, 102, 395,
	99, 98, 36, 35, 140, 524, 524, 140, 524, 34,
	352, 352, 33, 1467, 634, 2209, 140, 2216, 2212, 2217,
	2215, 2226, 2218, 2, 2204, 2237, 1, 0, 0, 0,
	0, 1901, 352, 0, 0, 0, 2239, 0, 1483, 2203,
	0, 2208, 2130, 0, 2175, 0, 1040, 1900, 2246, 140,
	2245, 0, 352, 352, 352, 0, 0, 0, 2254, 1498,
	2256, 0, 0, 352, 2260, 0, 2227, 2261, 0, 1899,
	0, 352, 0, 0, 352, 0, 0, 0, 0, 0,
	352, 0, 2272, 2271, 2273, 0, 352, 352, 2274, 0,
	352, 0, 0, 0, 0, 1235, 0, 0, 1235, 0,
	651, 0, 0, 0, 0, 1545, 0, 0, 0, 2061,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	352, 0, 1563, 813, 813, 0, 0, 2012, 0, 352,
	2005, 0, 0, 0, 0, 1483, 1040, 0, 2003, 0,
	0, 0, 2007, 0, 0, 1481, 0, 678, 67, 0,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 2013, 0, 0, 0, 1486, 813, 1488, 0, 0,
	0, 0, 1040, 1040, 0, 0, 651, 0, 0, 0,
	397, 1040, 1040, 2006, 813, 0, 0, 651, 0, 2115,
	0, 0, 0, 624, 0, 0, 0, 0, 0, 624,
	624, 934, 935, 624, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 1040, 123, 0, 0, 0, 0,
	660, 1070, 0, 763, 937, 1039, 0, 0, 1554, 0,
	0, 0, 1073, 919, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 0, 0, 0, 0, 936, 397,
	1071, 0, 793, 794, 795, 0, 570, 0, 0, 538,
	2008, 110, 2009, 551, 0, 0, 396, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 625, 67,
	0, 0, 0, 0, 0, 1384, 1384, 0, 0, 112,
	0, 0, 2011, 0, 1483, 0, 56, 0, 57, 0,
	0, 2014, 0, 0, 0, 0, 0, 2185, 942, 0,
	0, 0, 0, 396, 2191, 1129, 0, 1129, 1708, 570,
	0, 0, 59, 0, 524, 0, 0, 352, 0, 0,
	0, 1722, 0, 1071, 0, 0, 0, 0, 0, 882,
	882, 0, 0, 0, 0, 888, 2213, 2214, 0, 1040,
	0, 352, 0, 1384, 1384, 1384, 0, 0, 0, 0,
	0, 352, 1735, 1736, 0, 0, 952, 1498, 0, 0,
	0, 1742, 1743, 1745, 1747, 1748, 0, 0, 2010, 0,
	0, 0, 0, 1755, 0, 1757, 352, 972, 973, 974,
	975, 976, 0, 0, 1070, 1070, 1072, 984, 1039, 1039,
	0, 0, 352, 0, 0, 1073, 1073, 991, 1235, 0,
	0, 0, 0, 1036, 0, 0, 0, 634, 1235, 934,
	935, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 352, 953,
	1716, 0, 937, 0, 0, 126, 0, 0, 0, 570,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 1071,
	1071, 571, 0, 0, 1729, 0, 936, 0, 1071, 1071,
	0, 571, 0, 130, 1734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1832, 0, 0, 0, 0, 0, 0, 0, 1758,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 624, 551, 124, 0, 0,
	0, 0, 1589, 1590, 125, 0, 942, 0, 0, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 1040,
	0, 396, 0, 368, 1384, 1384, 1147, 0, 1152, 0,
	1257, 624, 0, 0, 1159, 0, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	1072, 570, 0, 1498, 0, 0, 1129, 1896, 0, 0,
	0, 0, 0, 0, 952, 0, 1036, 1036, 1910, 0,
	1656, 1657, 1658, 0, 0, 0, 1040, 0, 0, 0,
	0, 0, 1920, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
	1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
	1384, 1384, 0, 1384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1040, 352, 1071, 0, 634, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1235,
	634, 0, 0, 0, 0, 0, 0, 953, 0, 570,
	0, 0, 0, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 0, 1303, 0, 1305, 1306,
	1307, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	538, 0, 0, 0, 1982, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1366, 1367,
	0, 0, 1380, 0, 1391, 1393, 1398, 1401, 1402, 1403,
	0, 0, 0, 0, 0, 0, 0, 0, 624, 0,
	0, 938, 939, 940, 941, 943, 944, 0, 0, 571,
	0, 0, 0, 1896, 0, 0, 0, 0, 0, 397,
	67, 0, 0, 634, 0, 906, 1896, 634, 1438, 0,
	1896, 1798, 1799, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2039, 2040, 1498, 0, 0, 0, 0, 0,
	0, 2049, 0, 2050, 0, 352, 2052, 2053, 0, 0,
	2056, 352, 0, 0, 0, 0, 397, 0, 981, 0,
	983, 0, 571, 0, 0, 0, 1071, 987, 2069, 0,
	634, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 0,
	1866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2094, 1070, 0, 2096, 0, 1039,
	0, 0, 0, 1071, 0, 352, 1073, 1896, 0, 1896,
	0, 0, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 0, 1039, 352, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 1498, 0, 0, 0, 0, 2051, 0,
	0, 1071, 0, 0, 2057, 0, 0, 0, 0, 0,
	2139, 0, 0, 882, 0, 1235, 0, 0, 888, 0,
	0, 0, 0, 2146, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 1384, 0, 1070, 0,
	0, 0, 1039, 0, 352, 0, 0, 0, 1129, 1073,
	0, 1557, 538, 0, 0, 538, 538, 0, 0, 0,
	0, 1384, 0, 0, 0, 0, 1570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2103, 0,
	0, 67, 0, 0, 2179, 2180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2122, 0, 0, 0,
	0, 0, 0, 1573, 1574, 0, 0, 0, 0, 1579,
	0, 0, 0, 0, 0, 2200, 0, 0, 0, 634,
	625, 0, 352, 0, 397, 1896, 0, 0, 1070, 0,
	1072, 0, 1039, 1384, 2139, 0, 0, 352, 0, 1073,
	397, 1598, 0, 0, 0, 0, 634, 1036, 1605, 0,
	67, 1609, 67, 1072, 571, 0, 0, 2158, 67, 0,
	0, 0, 0, 0, 1070, 1070, 0, 1623, 1039, 1039,
	1036, 0, 0, 1070, 1070, 1073, 1073, 1039, 1039, 2253,
	0, 0, 0, 0, 1073, 1073, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 0, 1321, 0, 1398,
	1398, 1398, 0, 0, 0, 0, 1070, 0, 0, 0,
	1039, 0, 0, 1072, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1036, 0, 0, 0, 0, 2206, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 0, 0, 0, 0,
	1257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2084, 0, 0, 1727, 0, 0, 0,
	0, 1159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 397, 2102, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1768, 0, 0, 0, 1072,
	1072, 1070, 0, 0, 0, 1039, 0, 0, 1072, 1072,
	0, 0, 1073, 0, 0, 0, 1036, 1036, 0, 0,
	0, 882, 0, 0, 0, 1036, 1036, 0, 0, 0,
	2150, 0, 0, 888, 0, 0, 0, 1796, 0, 0,
	1797, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1802, 0, 0, 0, 0, 0, 1036, 0,
	0, 1811, 0, 0, 67, 0, 0, 0, 0, 1815,
	0, 0, 1570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 1839, 0, 0, 0, 1841, 625, 0, 0,
	0, 0, 0, 625, 625, 0, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1872,
	1873, 0, 0, 0, 0, 0, 0, 551, 1879, 1880,
	1881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	0, 0, 0, 0, 1904, 0, 1072, 957, 0, 0,
	0, 0, 0, 0, 937, 0, 0, 968, 0, 0,
	1321, 1070, 0, 1036, 0, 1039, 0, 0, 0, 0,
	1633, 1634, 1073, 1651, 1652, 1653, 0, 0, 936, 0,
	983, 0, 0, 0, 951, 0, 1964, 0, 0, 0,
	934, 935, 0, 954, 955, 956, 964, 965, 966, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 968, 0, 1070, 0,
	0, 0, 1039, 1648, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 1966, 0, 936, 942, 1969,
	1970, 0, 0, 951, 1972, 0, 983, 0, 0, 0,
	0, 1974, 0, 1976, 0, 0, 1070, 961, 969, 0,
	1039, 0, 0, 0, 0, 0, 0, 1073, 0, 1983,
	0, 0, 0, 0, 0, 967, 0, 1639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 952, 942, 0, 0,
	0, 0, 1992, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 67, 1654, 0, 961, 969, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2023, 967, 1649, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 1036, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 67, 0, 953,
	0, 0, 0, 0, 0, 67, 0, 0, 2060, 0,
	958, 0, 0, 0, 0, 962, 0, 0, 0, 625,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 2076,
	2077, 0, 0, 0, 0, 0, 0, 0, 1650, 0,
	1036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 953, 0,
	2089, 1072, 0, 1633, 1634, 0, 1651, 1652, 1653, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 1036, 1805,
	0, 0, 960, 0, 0, 948, 949, 950, 963, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 0,
	0, 0, 0, 0, 0, 0, 1995, 0, 0, 1633,
	1634, 2129, 1651, 1652, 1653, 0, 1648, 0, 0, 0,
	0, 0, 0, 0, 1645, 1646, 1647, 0, 0, 1644,
	1642, 1643, 1635, 1636, 1637, 1638, 1640, 1641, 0, 0,
	888, 960, 0, 0, 948, 949, 950, 963, 0, 947,
	945, 946, 938, 939, 940, 941, 943, 944, 0, 0,
	0, 0, 1648, 0, 0, 1675, 2162, 0, 0, 0,
	1639, 0, 0, 0, 0, 0, 934, 935, 0, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 968, 0, 0, 0, 0, 1654, 0, 0,
	0, 0, 0, 0, 0, 0, 1639, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 1649, 951,
	0, 0, 0, 0, 0, 0, 1655, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 625, 1654, 2225, 2225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1649, 0, 2241, 0, 67, 0,
	0, 0, 0, 942, 0, 0, 0, 2225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1650, 961, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 2225, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 1650, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1645, 1646, 1647,
	0, 0, 1644, 1642, 1643, 1635, 1636, 1637, 1638, 1640,
	1641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 1645, 1646, 1647, 0, 0, 1644, 1642,
	1643, 1635, 1636, 1637, 1638, 1640, 1641, 0, 0, 0,
	0, 2074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	948, 949, 950, 963, 394, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 0, 0, 1595, 0, 67, 0,
	142, 143, 413, 144, 414, 415, 416, 417, 295, 418,
	419, 420, 421, 145, 146, 147, 296, 297, 298, 299,
	148, 300, 301, 422, 149, 302, 303, 150, 151, 423,
	424, 304, 305, 306, 425, 152, 307, 426, 399, 427,
	153, 154, 155, 983, 156, 428, 157, 158, 159, 429,
	400, 160, 161, 430, 431, 433, 432, 434, 435, 436,
	162, 163, 353, 164, 308, 165, 309, 310, 437, 166,
	438, 167, 439, 168, 440, 441, 169, 170, 442, 171,
	443, 0, 444, 311, 172, 173, 174, 312, 313, 445,
	446, 447, 175, 176, 314, 315, 316, 0, 177, 448,
	178, 449, 450, 401, 451, 179, 317, 452, 318, 453,
	180, 181, 182, 183, 319, 320, 403, 454, 187, 455,
	184, 456, 402, 185, 321, 186, 322, 323, 324, 325,
	326, 457, 327, 458, 404, 188, 189, 190, 405, 191,
	192, 193, 459, 195, 194, 460, 328, 406, 196, 407,
	461, 197, 462, 463, 198, 0, 199, 200, 201, 203,
	329, 202, 408, 204, 205, 207, 206, 464, 465, 466,
	330, 208, 331, 209, 210, 467, 211, 468, 469, 212,
	470, 471, 213, 332, 409, 214, 410, 333, 215, 216,
	217, 218, 219, 472, 220, 334, 221, 335, 222, 473,
	223, 224, 225, 226, 227, 336, 228, 229, 474, 230,
	231, 232, 233, 234, 236, 237, 235, 238, 239, 240,
	241, 475, 242, 411, 243, 244, 337, 245, 0, 249,
	250, 251, 252, 476, 254, 338, 253, 255, 256, 477,
	257, 246, 247, 258, 412, 259, 339, 340, 260, 478,
	266, 261, 262, 248, 263, 265, 341, 264, 342, 479,
	267, 480, 268, 269, 270, 271, 272, 273, 274, 481,
	343, 344, 345, 482, 483, 275, 276, 346, 347, 484,
	277, 278, 279, 280, 485, 486, 281, 282, 283, 284,
	487, 285, 488, 348, 286, 287, 288, 349, 350, 489,
	490, 289, 491, 492, 493, 494, 290, 291, 292, 293,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 0, 0, 0, 0, 1229,
	0, 0, 0, 0, 0, 0, 0, 1230, 142, 143,
	413, 144, 414, 415, 416, 417, 295, 418, 419, 420,
	421, 145, 146, 147, 296, 297, 298, 299, 148, 300,
	301, 422, 149, 302, 303, 150, 151, 423, 424, 304,
	305, 306, 425, 152, 307, 426, 399, 427, 153, 154,
	155, 0, 156, 428, 157, 158, 159, 429, 400, 160,
	161, 430, 431, 433, 432, 434, 435, 436, 162, 163,
	353, 164, 308, 165, 309, 310, 437, 166, 438, 167,
	439, 168, 440, 441, 169, 170, 442, 171, 443, 0,
	444, 311, 172, 173, 174, 312, 313, 445, 446, 447,
	175, 176, 314, 315, 316, 0, 177, 448, 178, 449,
	450, 401, 451, 179, 317, 452, 318, 453, 180, 181,
	182, 183, 319, 320, 403, 454, 187, 455, 184, 456,
	402, 185, 321, 186, 322, 323, 324, 325, 326, 457,
	327, 458, 404, 188, 189, 190, 405, 191, 192, 193,
	459, 195, 194, 460, 328, 406, 196, 407, 461, 197,
	462, 463, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 464, 465, 466, 330, 208,
	331, 209, 210, 467, 211, 468, 469, 212, 470, 471,
	213, 332, 409, 214, 410, 333, 215, 216, 217, 218,
	219, 472, 220, 334, 221, 335, 222, 473, 223, 224,
	225, 226, 227, 336, 228, 229, 474, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 475,
	242, 411, 243, 244, 337, 245, 0, 249, 250, 251,
	252, 476, 254, 338, 253, 255, 256, 477, 257, 246,
	247, 258, 412, 259, 339, 340, 260, 478, 266, 261,
	262, 248, 263, 265, 341, 264, 342, 479, 267, 480,
	268, 269, 270, 271, 272, 273, 274, 481, 343, 344,
	345, 482, 483, 275, 276, 346, 347, 484, 277, 278,
	279, 280, 485, 486, 281, 282, 283, 284, 487, 285,
	488, 348, 286, 287, 288, 349, 350, 489, 490, 289,
	491, 492, 493, 494, 290, 291, 292, 293, 294, 0,
	0, 0, 394, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1952, 142, 143,
	413, 144, 414, 415, 416, 417, 295, 418, 419, 420,
	421, 145, 146, 147, 296, 297, 298, 299, 148, 300,
	301, 422, 149, 302, 303, 150, 151, 423, 424, 304,
	305, 306, 425, 152, 307, 426, 399, 427, 153, 154,
	155, 0, 156, 428, 157, 158, 159, 429, 400, 160,
	161, 430, 431, 433, 432, 434, 435, 436, 162, 163,
	353, 164, 308, 165, 309, 310, 437, 166, 438, 167,
	439, 168, 440, 441, 169, 170, 442, 171, 443, 0,
	444, 311, 172, 173, 174, 312, 313, 445, 446, 447,
	175, 176, 314, 315, 316, 0, 177, 448, 178, 449,
	450, 401, 451, 179, 317, 452, 318, 453, 180, 181,
	182, 183, 319, 320, 403, 454, 187, 455, 184, 456,
	402, 185, 321, 186, 322, 323, 324, 325, 326, 457,
	327, 458, 404, 188, 189, 190, 405, 191, 192, 193,
	459, 195, 194, 460, 328, 406, 196, 407, 461, 197,
	462, 463, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 464, 465, 466, 330, 208,
	331, 209, 210, 467, 211, 468, 469, 212, 470, 471,
	213, 332, 409, 214, 410, 333, 215, 216, 217, 218,
	219, 472, 220, 334, 221, 335, 222, 473, 223, 224,
	225, 226, 227, 336, 228, 229, 474, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 475,
	242, 411, 243, 244, 337, 245, 0, 249, 250, 251,
	252, 476, 254, 338, 253, 255, 256, 477, 257, 246,
	247, 258, 412, 259, 339, 340, 260, 478, 266, 261,
	262, 248, 263, 265, 341, 264, 342, 479, 267, 480,
	268, 269, 270, 271, 272, 273, 274, 481, 343, 344,
	345, 482, 483, 275, 276, 346, 347, 484, 277, 278,
	279, 280, 485, 486, 281, 282, 283, 284, 487, 285,
	488, 348, 286, 287, 288, 349, 350, 489, 490, 289,
	491, 492, 493, 494, 290, 291, 292, 293, 294, 394,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 915, 0, 0, 142, 143, 413, 144, 414,
	415, 416, 417, 295, 418, 419, 420, 421, 145, 146,
	147, 296, 297, 298, 299, 148, 300, 301, 422, 149,
	302, 303, 150, 151, 423, 424, 304, 305, 306, 425,
	152, 307, 426, 399, 427, 153, 154, 155, 0, 156,
	428, 157, 158, 159, 429, 400, 160, 161, 430, 431,
	433, 432, 434, 435, 436, 162, 163, 353, 164, 308,
	165, 309, 310, 437, 166, 438, 167, 439, 168, 440,
	441, 169, 170, 442, 171, 443, 0, 444, 311, 172,
	173, 174, 312, 313, 445, 446, 447, 175, 176, 314,
	315, 316, 0, 177, 448, 178, 449, 450, 401, 451,
	179, 317, 452, 318, 453, 180, 181, 182, 183, 319,
	320, 403, 454, 187, 455, 184, 456, 402, 185, 321,
	186, 322, 323, 324, 325, 326, 457, 327, 458, 404,
	188, 189, 190, 405, 191, 192, 193, 459, 195, 194,
	460, 328, 406, 196, 407, 461, 197, 462, 463, 198,
	0, 199, 200, 201, 203, 329, 202, 408, 204, 205,
	207, 206, 464, 465, 466, 330, 208, 331, 209, 210,
	467, 211, 468, 469, 212, 470, 471, 213, 332, 409,
	214, 410, 333, 215, 216, 217, 218, 219, 472, 220,
	334, 221, 335, 222, 473, 223, 224, 225, 226, 227,
	336, 228, 229, 474, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 241, 475, 242, 411, 243,
	244, 337, 245, 0, 249, 250, 251, 252, 476, 254,
	338, 253, 255, 256, 477, 257, 246, 247, 258, 412,
	259, 339, 340, 260, 478, 266, 261, 262, 248, 263,
	265, 341, 264, 342, 479, 267, 480, 268, 269, 270,
	271, 272, 273, 274, 481, 343, 344, 345, 482, 483,
	275, 276, 346, 347, 484, 277, 278, 279, 280, 485,
	486, 281, 282, 283, 284, 487, 285, 488, 348, 286,
	287, 288, 349, 350, 489, 490, 289, 491, 492, 493,
	494, 290, 291, 292, 293, 294, 697, 686, 687, 684,
	685, 676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 143, 0, 144, 0, 0, 0, 0,
	714, 679, 0, 0, 0, 145, 146, 147, 296, 729,
	298, 730, 148, 731, 732, 0, 149, 302, 303, 150,
	151, 682, 713, 733, 734, 306, 0, 152, 725, 0,
	705, 0, 153, 154, 155, 0, 156, 0, 157, 158,
	159, 0, 400, 160, 161, 0, 706, 707, 709, 0,
	708, 710, 162, 163, 353, 164, 735, 165, 736, 737,
	889, 166, 0, 167, 0, 168, 0, 0, 728, 170,
	0, 171, 0, 0, 0, 670, 172, 173, 174, 715,
	716, 693, 0, 0, 175, 176, 738, 739, 740, 0,
	177, 0, 178, 0, 0, 401, 0, 179, 726, 0,
	318, 0, 180, 181, 182, 183, 722, 724, 403, 0,
	187, 0, 184, 0, 402, 185, 741, 186, 742, 743,
	744, 745, 746, 0, 704, 0, 404, 188, 189, 190,
	405, 191, 192, 193, 0, 195, 194, 0, 727, 406,
	196, 407, 0, 197, 0, 0, 198, 0, 199, 200,
	201, 203, 329, 202, 408, 204, 205, 207, 206, 665,
	0, 694, 723, 208, 747, 209, 210, 0, 211, 0,
	0, 212, 0, 0, 213, 332, 409, 214, 410, 717,
	215, 216, 217, 218, 219, 0, 220, 718, 221, 335,
	222, 0, 223, 224, 225, 226, 227, 748, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 241, 0, 242, 411, 243, 244, 671, 245,
	0, 249, 250, 251, 252, 126, 254, 338, 253, 255,
	256, 711, 257, 246, 247, 258, 412, 259, 749, 340,
	260, 0, 266, 261, 262, 248, 263, 265, 750, 264,
	719, 0, 267, 130, 268, 269, 270, 271, 272, 273,
	274, 0, 343, 751, 752, 0, 0, 275, 276, 720,
	721, 692, 277, 278, 279, 280, 0, 0, 281, 282,
	283, 284, 712, 285, 0, 348, 286, 287, 288, 657,
	753, 0, 0, 289, 0, 0, 0, 124, 290, 291,
	292, 293, 294, 666, 125, 0, 0, 0, 0, 664,
	0, 0, 0, 0, 662, 663, 697, 686, 687, 684,
	685, 676, 0, 672, 0, 0, 0, 0, 675, 0,
	0, 0, 142, 143, 1347, 144, 0, 0, 0, 0,
	714, 679, 0, 0, 0, 145, 146, 147, 296, 729,
	298, 730, 148, 731, 732, 0, 149, 302, 303, 150,
	151, 682, 713, 733, 734, 306, 0, 152, 725, 0,
	705, 0, 153, 154, 155, 0, 156, 0, 157, 158,
	159, 0, 400, 160, 161, 0, 706, 707, 709, 0,
	708, 710, 162, 163, 353, 164, 735, 165, 736, 737,
	0, 166, 0, 167, 0, 168, 1348, 0, 728, 170,
	0, 171, 0, 0, 0, 670, 172, 173, 174, 715,
	716, 693, 0, 0, 175, 176, 738, 739, 740, 0,
	177, 0, 178, 0, 0, 401, 0, 179, 726, 0,
	318, 0, 180, 181, 182, 183, 722, 724, 403, 0,
	187, 0, 184, 0, 402, 185, 741, 186, 742, 743,
	744, 745, 746, 0, 704, 0, 404, 188, 189, 190,
	405, 191, 192, 193, 0, 195, 194, 0, 727, 406,
	196, 407, 0, 197, 0, 0, 198, 0, 199, 200,
	201, 203, 329, 202, 408, 204, 205, 207, 206, 665,
	0, 694, 723, 208, 747, 209, 210, 0, 211, 0,
	0, 212, 0, 0, 213, 332, 409, 214, 410, 717,
	215, 216, 217, 218, 219, 0, 220, 718, 221, 335,
	222, 0, 223, 224, 225, 226, 227, 748, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 241, 0, 242, 411, 243, 244, 671, 245,
	0, 249, 250, 251, 252, 0, 254, 338, 253, 255,
	256, 711, 257, 246, 247, 258, 412, 259, 749, 340,
	260, 0, 266, 261, 262, 248, 263, 265, 750, 264,
	719, 0, 267, 0, 268, 269, 270, 271, 272, 273,
	274, 0, 343, 751, 752, 0, 0, 275, 276, 720,
	721, 692, 277, 278, 279, 280, 0, 0, 281, 282,
	283, 284, 712, 285, 0, 348, 286, 287, 288, 349,
	753, 1346, 0, 289, 0, 0, 0, 0, 290, 291,
	292, 293, 294, 666, 0, 0, 0, 0, 0, 664,
	0, 0, 0, 0, 662, 663, 1349, 697, 686, 687,
	684, 685, 676, 672, 1344, 0, 0, 0, 675, 0,
	0, 0, 0, 142, 143, 0, 144, 0, 0, 0,
	0, 714, 679, 0, 0, 0, 145, 146, 147, 296,
	729, 298, 730, 148, 731, 732, 0, 149, 302, 303,
	150, 151, 682, 713, 733, 734, 306, 0, 152, 725,
	0, 705, 0, 153, 154, 155, 0, 156, 0, 157,
	158, 159, 0, 400, 160, 161, 0, 706, 707, 709,
	0, 708, 710, 162, 163, 353, 164, 735, 165, 736,
	737, 0, 166, 0, 167, 0, 168, 0, 0, 728,
	170, 0, 171, 0, 0, 0, 670, 172, 173, 174,
	715, 716, 693, 0, 0, 175, 176, 738, 739, 740,
	0, 177, 0, 178, 0, 0, 401, 0, 179, 726,
	0, 318, 0, 180, 181, 182, 183, 722, 724, 403,
	0, 187, 0, 184, 0, 402, 185, 741, 186, 742,
	743, 744, 745, 746, 0, 704, 0, 404, 188, 189,
	190, 405, 191, 192, 193, 0, 195, 194, 0, 727,
	406, 196, 407, 0, 197, 0, 0, 198, 0, 199,
	200, 201, 203, 329, 202, 408, 204, 205, 207, 206,
	665, 0, 694, 723, 208, 747, 209, 210, 0, 211,
	0, 0, 212, 0, 0, 213, 332, 409, 214, 410,
	717, 215, 216, 217, 218, 219, 0, 220, 718, 221,
	335, 222, 0, 223, 224, 225, 226, 227, 748, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 241, 0, 242, 411, 243, 244, 671,
	245, 0, 249, 250, 251, 252, 126, 254, 338, 253,
	255, 256, 711, 257, 246, 247, 258, 412, 259, 749,
	340, 260, 0, 266, 261, 262, 248, 263, 265, 750,
	264, 719, 0, 267, 130, 268, 269, 270, 271, 272,
	273, 274, 0, 343, 751, 752, 0, 0, 275, 276,
	720, 721, 692, 277, 278, 279, 280, 0, 0, 281,
	282, 283, 284, 712, 285, 0, 348, 286, 287, 288,
	657, 753, 0, 0, 289, 0, 0, 0, 124, 290,
	291, 292, 293, 294, 666, 125, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 662, 663, 697, 686, 687,
	684, 685, 676, 0, 672, 0, 0, 0, 0, 675,
	0, 0, 0, 142, 143, 0, 144, 0, 0, 0,
	0, 714, 679, 0, 0, 0, 145, 146, 147, 296,
	729, 298, 730, 148, 731, 732, 1394, 149, 302, 303,
	150, 151, 682, 713, 733, 734, 306, 0, 152, 725,
	0, 705, 0, 153, 154, 155, 0, 156, 0, 157,
	158, 159, 0, 400, 160, 161, 0, 706, 707, 709,
	0, 708, 710, 162, 163, 353, 164, 735, 165, 736,
	737, 0, 166, 0, 167, 0, 168, 0, 0, 728,
	170, 0, 171, 0, 0, 0, 670, 172, 173, 174,
	715, 716, 693, 0, 0, 175, 176, 738, 739, 740,
	0, 177, 0, 178, 0, 1399, 401, 0, 179, 726,
	0, 318, 0, 180, 181, 182, 183, 722, 724, 403,
	0, 187, 0, 184, 0, 402, 185, 741, 186, 742,
	743, 744, 745, 746, 0, 704, 0, 404, 188, 189,
	190, 405, 191, 192, 193, 0, 195, 194, 1395, 727,
	406, 196, 407, 0, 197, 0, 0, 198, 0, 199,
	200, 201, 203, 329, 202, 408, 204, 205, 207, 206,
	665, 0, 694, 723, 208, 747, 209, 210, 0, 211,
	0, 0, 212, 0, 0, 213, 332, 409, 214, 410,
	717, 215, 216, 217, 218, 219, 0, 220, 718, 221,
	335, 222, 0, 223, 224, 225, 226, 227, 748, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 241, 0, 242, 411, 243, 244, 671,
	245, 0, 249, 250, 251, 252, 0, 254, 338, 253,
	255, 256, 711, 257, 246, 247, 258, 412, 259, 749,
	340, 260, 0, 266, 261, 262, 248, 263, 265, 750,
	264, 719, 0, 267, 0, 268, 269, 270, 271, 272,
	273, 274, 0, 343, 751, 752, 0, 1396, 275, 276,
	720, 721, 692, 277, 278, 279, 280, 0, 0, 281,
	282, 283, 284, 712, 285, 0, 348, 286, 287, 288,
	349, 753, 0, 0, 289, 0, 0, 0, 0, 290,
	291, 292, 293, 294, 666, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 662, 663, 697, 686, 687,
	684, 685, 676, 0, 672, 0, 0, 0, 0, 675,
	0, 0, 0, 142, 143, 0, 144, 0, 0, 0,
	0, 714, 679, 0, 0, 0, 145, 146, 147, 296,
	729, 298, 730, 148, 731, 732, 0, 149, 302, 303,
	150, 151, 682, 713, 733, 734, 306, 0, 152, 725,
	0, 705, 0, 153, 154, 155, 0, 156, 0, 157,
	158, 159, 0, 400, 160, 161, 0, 706, 707, 709,
	0, 708, 710, 162, 163, 353, 164, 735, 165, 736,
	737, 0, 166, 0, 167, 0, 168, 0, 0, 728,
	170, 0, 171, 0, 0, 0, 670, 172, 173, 174,
	715, 716, 693, 0, 0, 175, 176, 738, 739, 740,
	0, 177, 0, 178, 0, 0, 401, 0, 179, 726,
	0, 318, 0, 180, 181, 182, 183, 722, 724, 403,
	0, 187, 0, 184, 0, 402, 185, 741, 186, 742,
	743, 744, 745, 746, 0, 704, 0, 404, 188, 189,
	190, 405, 191, 192, 193, 0, 195, 194, 0, 727,
	406, 196, 407, 0, 197, 0, 0, 198, 0, 199,
	200, 201, 203, 329, 202, 408, 204, 205, 207, 206,
	665, 1787, 694, 723, 208, 747, 209, 210, 0, 211,
	0, 0, 212, 0, 0, 213, 332, 409, 214, 410,
	717, 215, 216, 217, 218, 219, 0, 220, 718, 221,
	335, 222, 0, 223, 224, 225, 226, 227, 748, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 241, 0, 242, 411, 243, 244, 671,
	245, 0, 249, 250, 251, 252, 0, 254, 338, 253,
	255, 256, 711, 257, 246, 247, 258, 412, 259, 749,
	340, 260, 0, 266, 261, 262, 248, 263, 265, 750,
	264, 719, 0, 267, 0, 268, 269, 270, 271, 272,
	273, 274, 0, 343, 751, 752, 0, 0, 275, 276,
	720, 721, 692, 277, 278, 279, 280, 0, 0, 281,
	282, 283, 284, 712, 285, 0, 348, 286, 287, 288,
	349, 753, 0, 0, 289, 0, 0, 0, 0, 290,
	291, 292, 293, 294, 666, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 662, 663, 883, 697, 686,
	687, 684, 685, 676, 672, 0, 0, 0, 0, 675,
	0, 0, 0, 0, 142, 143, 0, 144, 0, 0,
	0, 0, 714, 679, 0, 0, 0, 145, 146, 147,
	296, 729, 298, 730, 148, 731, 732, 0, 149, 302,
	303, 150, 151, 682, 713, 733, 734, 306, 0, 152,
	725, 0, 705, 0, 153, 154, 155, 0, 156, 0,
	157, 158, 159, 0, 400, 160, 161, 0, 706, 707,
	709, 0, 708, 710, 162, 163, 353, 164, 735, 165,
	736, 737, 0, 166, 0, 167, 0, 168, 0, 0,
	728, 170, 0, 171, 0, 0, 0, 670, 172, 173,
	174, 715, 716, 693, 0, 0, 175, 176, 738, 739,
	740, 0, 177, 0, 178, 0, 0, 401, 0, 179,
	726, 0, 318, 0, 180, 181, 182, 183, 722, 724,
	403, 0, 187, 1161, 184, 0, 402, 185, 741, 186,
	742, 743, 744, 745, 746, 0, 704, 0, 404, 188,
	189, 190, 405, 191, 192, 193, 0, 195, 194, 0,
	727, 406, 196, 407, 0, 197, 0, 0, 198, 0,
	199, 200, 201, 203, 329, 202, 408, 204, 205, 207,
	206, 665, 0, 694, 723, 208, 747, 209, 210, 0,
	211, 0, 0, 212, 0, 0, 213, 332, 409, 214,
	410, 717, 215, 216, 217, 218, 219, 0, 220, 718,
	221, 335, 222, 1160, 223, 224, 225, 226, 227, 748,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 241, 0, 242, 411, 243, 244,
	671, 245, 0, 249, 250, 251, 252, 0, 254, 338,
	253, 255, 256, 711, 257, 246, 247, 258, 412, 259,
	749, 340, 260, 0, 266, 261, 262, 248, 263, 265,
	750, 264, 719, 0, 267, 0, 268, 269, 270, 271,
	272, 273, 274, 0, 343, 751, 752, 0, 0, 275,
	276, 720, 721, 692, 277, 278, 279, 280, 0, 0,
	281, 282, 283, 284, 712, 285, 0, 348, 286, 287,
	288, 349, 753, 0, 0, 289, 0, 0, 0, 0,
	290, 291, 292, 293, 294, 666, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 662, 663, 697, 686,
	687, 684, 685, 676, 0, 672, 0, 0, 0, 0,
	675, 0, 0, 0, 142, 143, 0, 144, 0, 0,
	0, 0, 714, 679, 0, 0, 0, 145, 146, 147,
	296, 729, 298, 730, 148, 731, 732, 0, 149, 302,
	303, 150, 151, 682, 713, 733, 734, 306, 0, 152,
	725, 0, 705, 0, 153, 154, 155, 0, 156, 0,
	157, 158, 159, 0, 400, 160, 161, 0, 706, 707,
	709, 0, 708, 710, 162, 163, 353, 164, 735, 165,
	736, 737, 0, 166, 0, 167, 0, 168, 0, 0,
	728, 170, 0, 171, 0, 0, 0, 670, 172, 173,
	174, 715, 716, 693, 0, 0, 175, 176, 738, 739,
	740, 0, 177, 0, 178, 0, 0, 401, 0, 179,
	726, 0, 318, 0, 180, 181, 182, 183, 722, 724,
	403, 0, 187, 0, 184, 0, 402, 185, 741, 186,
	742, 743, 744, 745, 746, 0, 704, 0, 404, 188,
	189, 190, 405, 191, 192, 193, 0, 195, 194, 0,
	727, 406, 196, 407, 0, 197, 0, 0, 198, 0,
	199, 200, 201, 203, 329, 202, 408, 204, 205, 207,
	206, 665, 0, 694, 723, 208, 747, 209, 210, 0,
	211, 0, 0, 212, 0, 0, 213, 332, 409, 214,
	410, 717, 215, 216, 217, 218, 219, 0, 220, 718,
	221, 335, 222, 0, 223, 224, 225, 226, 227, 748,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 241, 0, 242, 411, 243, 244,
	671, 245, 0, 249, 250, 251, 252, 0, 254, 338,
	253, 255, 256, 711, 257, 246, 247, 258, 412, 259,
	749, 340, 260, 0, 266, 261, 262, 248, 263, 265,
	750, 264, 719, 0, 267, 0, 268, 269, 270, 271,
	272, 273, 274, 0, 343, 751, 752, 0, 0, 275,
	276, 720, 721, 692, 277, 278, 279, 280, 0, 0,
	281, 282, 283, 284, 712, 285, 0, 348, 286, 287,
	288, 349, 753, 0, 0, 289, 0, 0, 0, 0,
	290, 291, 292, 293, 294, 666, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 662, 663, 0, 0,
	0, 0, 0, 989, 1339, 672, 0, 0, 0, 0,
	675, 697, 686, 687, 684, 685, 676, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 143, 0,
	144, 0, 0, 0, 0, 714, 679, 0, 0, 0,
	145, 146, 147, 296, 729, 298, 730, 148, 731, 732,
	0, 149, 302, 303, 150, 151, 682, 713, 733, 734,
	306, 0, 152, 725, 0, 705, 0, 153, 154, 155,
	0, 156, 0, 157, 158, 159, 0, 400, 160, 161,
	0, 706, 707, 709, 0, 708, 710, 162, 163, 353,
	164, 735, 165, 736, 737, 0, 166, 0, 167, 0,
	168, 0, 0, 728, 170, 0, 171, 0, 0, 0,
	670, 172, 173, 174, 715, 716, 693, 0, 0, 175,
	176, 738, 739, 740, 0, 177, 0, 178, 0, 0,
	401, 0, 179, 726, 0, 318, 0, 180, 181, 182,
	183, 722, 724, 403, 0, 187, 0, 184, 0, 402,
	185, 741, 186, 742, 743, 744, 745, 746, 0, 704,
	0, 404, 188, 189, 190, 405, 191, 192, 193, 0,
	195, 194, 0, 727, 406, 196, 407, 0, 197, 0,
	0, 198, 0, 199, 200, 201, 203, 329, 202, 408,
	204, 205, 207, 206, 665, 0, 694, 723, 208, 747,
	209, 210, 0, 211, 0, 0, 212, 0, 0, 213,
	332, 409, 214, 410, 717, 215, 216, 217, 218, 219,
	0, 220, 718, 221, 335, 222, 0, 223, 224, 225,
	226, 227, 748, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 241, 0, 242,
	411, 243, 244, 671, 245, 0, 249, 250, 251, 252,
	0, 254, 338, 253, 255, 256, 711, 257, 246, 247,
	258, 412, 259, 749, 340, 260, 0, 266, 261, 262,
	248, 263, 265, 750, 264, 719, 0, 267, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 343, 751, 752,
	0, 0, 275, 276, 720, 721, 692, 277, 278, 279,
	280, 0, 0, 281, 282, 283, 284, 712, 285, 0,
	348, 286, 287, 288, 349, 753, 0, 0, 289, 0,
	0, 0, 0, 290, 291, 292, 293, 294, 666, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 662,
	663, 697, 686, 687, 684, 685, 676, 0, 672, 1869,
	0, 0, 0, 675, 0, 0, 0, 142, 143, 0,
	144, 0, 0, 0, 0, 714, 679, 0, 0, 0,
	145, 146, 147, 296, 729, 298, 730, 148, 731, 732,
	0, 149, 302, 303, 150, 151, 682, 713, 733, 734,
	306, 0, 152, 725, 0, 705, 0, 153, 154, 155,
	0, 156, 0, 157, 158, 159, 0, 400, 160, 161,
	0, 706, 707, 709, 0, 708, 710, 162, 163, 353,
	164, 735, 165, 736, 737, 0, 166, 0, 167, 0,
	168, 0, 0, 728, 170, 0, 171, 0, 0, 0,
	670, 172, 173, 174, 715, 716, 693, 0, 0, 175,
	176, 738, 739, 740, 0, 177, 0, 178, 0, 0,
	401, 0, 179, 726, 0, 318, 0, 180, 181, 182,
	183, 722, 724, 403, 0, 187, 0, 184, 0, 402,
	185, 741, 186, 742, 743, 744, 745, 746, 0, 704,
	0, 404, 188, 189, 190, 405, 191, 192, 193, 0,
	195, 194, 0, 727, 406, 196, 407, 0, 197, 0,
	0, 198, 0, 199, 200, 201, 203, 329, 202, 408,
	204, 205, 207, 206, 665, 0, 694, 723, 208, 747,
	209, 210, 0, 211, 0, 0, 212, 0, 0, 213,
	332, 409, 214, 410, 717, 215, 216, 217, 218, 219,
	0, 220, 718, 221, 335, 222, 0, 223, 224, 225,
	226, 227, 748, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 241, 0, 242,
	411, 243, 244, 671, 245, 0, 249, 250, 251, 252,
	0, 254, 338, 253, 255, 256, 711, 257, 246, 247,
	258, 412, 259, 749, 340, 260, 0, 266, 261, 262,
	248, 263, 265, 750, 264, 719, 0, 267, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 343, 751, 752,
	0, 0, 275, 276, 720, 721, 692, 277, 278, 279,
	280, 0, 0, 281, 282, 283, 284, 712, 285, 0,
	348, 286, 287, 288, 349, 753, 1818, 0, 289, 0,
	0, 0, 0, 290, 291, 292, 293, 294, 666, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 662,
	663, 697, 686, 687, 684, 685, 676, 0, 672, 0,
	0, 0, 0, 675, 0, 0, 0, 142, 143, 0,
	144, 0, 0, 0, 0, 714, 679, 0, 0, 0,
	145, 146, 147, 296, 729, 298, 730, 148, 731, 732,
	0, 149, 302, 303, 150, 151, 682, 713, 733, 734,
	306, 0, 152, 725, 0, 705, 0, 153, 154, 155,
	0, 156, 0, 157, 158, 159, 0, 400, 160, 161,
	0, 706, 707, 709, 0, 708, 710, 162, 163, 353,
	164, 735, 165, 736, 737, 0, 166, 0, 167, 0,
	168, 0, 0, 728, 170, 0, 171, 0, 0, 0,
	670, 172, 173, 174, 715, 716, 693, 0, 0, 175,
	176, 738, 739, 740, 0, 177, 0, 178, 0, 0,
	401, 0, 179, 726, 0, 318, 0, 180, 181, 182,
	183, 722, 724, 403, 0, 187, 0, 184, 0, 402,
	185, 741, 186, 742, 743, 744, 745, 746, 0, 704,
	0, 404, 188, 189, 190, 405, 191, 192, 193, 0,
	195, 194, 0, 727, 406, 196, 407, 0, 197, 0,
	0, 198, 0, 199, 200, 201, 203, 329, 202, 408,
	204, 205, 207, 206, 665, 0, 694, 723, 208, 747,
	209, 210, 0, 211, 0, 0, 212, 0, 0, 213,
	332, 409, 214, 410, 717, 215, 216, 217, 218, 219,
	0, 220, 718, 221, 335, 222, 0, 223, 224, 225,
	226, 227, 748, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 241, 0, 242,
	411, 243, 244, 671, 245, 0, 249, 250, 251, 252,
	0, 254, 338, 253, 255, 256, 711, 257, 246, 247,
	258, 412, 259, 749, 340, 260, 0, 266, 261, 262,
	248, 263, 265, 750, 264, 719, 0, 267, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 343, 751, 752,
	0, 0, 275, 276, 720, 721, 692, 277, 278, 279,
	280, 0, 0, 281, 282, 283, 284, 712, 285, 0,
	348, 286, 287, 288, 349, 753, 0, 0, 289, 0,
	0, 0, 0, 290, 291, 292, 293, 294, 666, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 662,
	663, 697, 686, 687, 684, 685, 676, 0, 672, 1808,
	0, 0, 0, 675, 0, 0, 0, 142, 143, 0,
	144, 0, 0, 0, 0, 714, 679, 0, 0, 0,
	145, 146, 147, 296, 729, 298, 730, 148, 731, 732,
	0, 149, 302, 303, 150, 151, 682, 713, 733, 734,
	306, 0, 152, 725, 0, 705, 0, 153, 154, 155,
	0, 156, 0, 157, 158, 159, 0, 400, 160, 161,
	0, 706, 707, 709, 0, 708, 710, 162, 163, 353,
	164, 735, 165, 736, 737, 889, 166, 0, 167, 0,
	168, 0, 0, 728, 170, 0, 171, 0, 0, 0,
	670, 172, 173, 174, 715, 716, 693, 0, 0, 175,
	176, 738, 739, 740, 0, 177, 0, 178, 0, 0,
	401, 0, 179, 726, 0, 318, 0, 180, 181, 182,
	183, 722, 724, 403, 0, 187, 0, 184, 0, 402,
	185, 741, 186, 742, 743, 744, 745, 746, 0, 704,
	0, 404, 188, 189, 190, 405, 191, 192, 193, 0,
	195, 194, 0, 727, 406, 196, 407, 0, 197, 0,
	0, 198, 0, 199, 200, 201, 203, 329, 202, 408,
	204, 205, 207, 206, 665, 0, 694, 723, 208, 747,
	209, 210, 0, 211, 0, 0, 212, 0, 0, 213,
	332, 409, 214, 410, 717, 215, 216, 217, 218, 219,
	0, 220, 718, 221, 335, 222, 0, 223, 224, 225,
	226, 227, 748, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 241, 0, 242,
	411, 243, 244, 671, 245, 0, 249, 250, 251, 252,
	0, 254, 338, 253, 255, 256, 711, 257, 246, 247,
	258, 412, 259, 749, 340, 260, 0, 266, 261, 262,
	248, 263, 265, 750, 264, 719, 0, 267, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 343, 751, 752,
	0, 0, 275, 276, 720, 721, 692, 277, 278, 279,
	280, 0, 0, 281, 282, 283, 284, 712, 285, 0,
	348, 286, 287, 288, 349, 753, 0, 0, 289, 0,
	0, 0, 0, 290, 291, 292, 293, 294, 666, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 662,
	663, 697, 686, 687, 684, 685, 676, 0, 672, 0,
	0, 0, 0, 675, 0, 0, 0, 142, 143, 0,
	144, 0, 0, 0, 0, 714, 679, 0, 0, 0,
	145, 146, 147, 296, 729, 298, 730, 148, 731, 732,
	0, 149, 302, 303, 150, 151, 682, 713, 733, 734,
	306, 0, 152, 725, 0, 705, 0, 153, 154, 155,
	0, 156, 0, 157, 158, 159, 0, 400, 160, 161,
	0, 706, 707, 709, 0, 708, 710, 162, 163, 353,
	164, 735, 165, 736, 737, 0, 166, 0, 167, 0,
	168, 0, 0, 728, 170, 0, 171, 0, 0, 0,
	670, 172, 173, 174, 715, 716, 693, 0, 0, 175,
	176, 738, 739, 740, 0, 177, 0, 178, 0, 1399,
	401, 0, 179, 726, 0, 318, 0, 180, 181, 182,
	183, 722, 724, 403, 0, 187, 0, 184, 0, 402,
	185, 741, 186, 742, 743, 744, 745, 746, 0, 704,
	0, 404, 188, 189, 190, 405, 191, 192, 193, 0,
	195, 194, 0, 727, 406, 196, 407, 0, 197, 0,
	0, 198, 0, 199, 200, 201, 203, 329, 202, 408,
	204, 205, 207, 206, 665, 0, 694, 723, 208, 747,
	209, 210, 0, 211, 0, 0, 212, 0, 0, 213,
	332, 409, 214, 410, 717, 215, 216, 217, 218, 219,
	0, 220, 718, 221, 335, 222, 0, 223, 224, 225,
	226, 227, 748, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 241, 0, 242,
	411, 243, 244, 671, 245, 0, 249, 250, 251, 252,
	0, 254, 338, 253, 255, 256, 711, 257, 246, 247,
	258, 412, 259, 749, 340, 260, 0, 266, 261, 262,
	248, 263, 265, 750, 264, 719, 0, 267, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 343, 751, 752,
	0, 0, 275, 276, 720, 721, 692, 277, 278, 279,
	280, 0, 0, 281, 282, 283, 284, 712, 285, 0,
	348, 286, 287, 288, 349, 753, 0, 0, 289, 0,
	0, 0, 0, 290, 291, 292, 293, 294, 666, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 662,
	663, 697, 686, 687, 684, 685, 676, 0, 672, 0,
	0, 0, 0, 675, 0, 0, 0, 142, 143, 0,
	144, 0, 0, 0, 0, 714, 679, 0, 0, 0,
	145, 146, 147, 296, 729, 298, 730, 148, 731, 732,
	0, 149, 302, 303, 150, 151, 682, 713, 733, 734,
	306, 0, 152, 725, 0, 705, 0, 153, 154, 155,
	0, 156, 0, 157, 158, 159, 0, 400, 160, 161,
	0, 706, 707, 709, 0, 708, 710, 162, 163, 353,
	164, 735, 165, 736, 737, 0, 166, 0, 167, 0,
	168, 0, 0, 728, 170, 0, 171, 0, 0, 0,
	670, 172, 173, 174, 715, 716, 693, 0, 0, 175,
	176, 738, 739, 740, 0, 177, 0, 178, 0, 0,
	401, 0, 179, 726, 0, 318, 0, 180, 181, 182,
	183, 722, 724, 403, 0, 187, 0, 184, 0, 402,
	185, 741, 186, 742, 743, 744, 745, 746, 0, 704,
	0, 404, 188, 189, 190, 405, 191, 192, 193, 0,
	195, 194, 0, 727, 406, 196, 407, 0, 197, 0,
	0, 198, 0, 199, 200, 201, 203, 329, 202, 408,
	204, 205, 207, 206, 665, 0, 694, 723, 208, 747,
	209, 210, 0, 211, 0, 0, 212, 0, 0, 213,
	332, 409, 214, 410, 717, 215, 216, 217, 218, 219,
	0, 220, 718, 221, 335, 222, 0, 223, 224, 225,
	226, 227, 748, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 241, 0, 242,
	411, 243, 244, 671, 245, 0, 249, 250, 251, 252,
	0, 254, 338, 253, 255, 256, 711, 257, 246, 247,
	258, 412, 259, 749, 340, 260, 0, 266, 261, 262,
	248, 263, 265, 750, 264, 719, 0, 267, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 343, 751, 752,
	0, 0, 275, 276, 720, 721, 692, 277, 278, 279,
	280, 0, 0, 281, 282, 283, 284, 712, 285, 0,
	348, 286, 287, 288, 349, 753, 0, 0, 289, 0,
	0, 0, 0, 290, 291, 292, 293, 294, 666, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 662,
	663, 883, 697, 686, 687, 684, 685, 676, 672, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 142, 143,
	0, 144, 0, 0, 0, 0, 714, 679, 0, 0,
	0, 145, 146, 147, 296, 729, 298, 730, 148, 731,
	732, 0, 149, 302, 303, 150, 151, 682, 713, 733,
	734, 306, 0, 152, 725, 0, 705, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 400, 160,
	161, 0, 706, 707, 709, 0, 708, 710, 162, 163,
	353, 164, 735, 165, 736, 737, 0, 166, 0, 167,
	0, 168, 0, 0, 728, 170, 0, 171, 0, 0,
	0, 670, 172, 173, 174, 715, 716, 693, 0, 0,
	175, 176, 738, 739, 740, 0, 177, 0, 178, 0,
	0, 401, 0, 179, 726, 0, 318, 0, 180, 181,
	182, 183, 722, 724, 403, 0, 187, 0, 184, 0,
	402, 185, 741, 186, 742, 743, 744, 745, 746, 0,
	704, 0, 404, 188, 189, 190, 405, 191, 192, 193,
	0, 195, 194, 0, 727, 406, 196, 407, 0, 197,
	0, 0, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 665, 0, 694, 723, 208,
	747, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 409, 214, 410, 717, 215, 216, 217, 218,
	219, 0, 220, 718, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 748, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 411, 243, 244, 671, 245, 0, 249, 250, 251,
	252, 0, 254, 338, 253, 255, 256, 711, 257, 246,
	247, 258, 412, 259, 749, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 750, 264, 719, 0, 267, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 751,
	752, 0, 0, 275, 276, 720, 721, 692, 277, 278,
	279, 280, 0, 0, 281, 282, 283, 284, 712, 285,
	0, 348, 286, 287, 288, 349, 753, 0, 0, 289,
	0, 0, 0, 0, 290, 291, 292, 293, 294, 666,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	662, 663, 697, 686, 687, 684, 685, 676, 0, 672,
	1334, 0, 0, 0, 675, 0, 0, 0, 142, 143,
	1148, 144, 0, 0, 0, 0, 714, 679, 0, 0,
	0, 145, 146, 147, 296, 729, 298, 730, 148, 731,
	732, 0, 149, 302, 303, 150, 151, 682, 713, 733,
	734, 306, 0, 152, 725, 0, 705, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 400, 160,
	161, 0, 706, 707, 709, 0, 708, 710, 162, 163,
	353, 164, 735, 165, 736, 737, 0, 166, 0, 167,
	0, 168, 0, 0, 728, 170, 0, 171, 0, 0,
	0, 670, 172, 173, 174, 715, 716, 693, 0, 0,
	175, 176, 738, 739, 740, 0, 177, 0, 178, 0,
	0, 401, 0, 179, 726, 0, 318, 0, 180, 181,
	182, 183, 722, 724, 403, 0, 187, 0, 184, 0,
	402, 185, 741, 186, 742, 743, 744, 745, 746, 0,
	704, 0, 404, 188, 189, 190, 405, 191, 192, 193,
	0, 195, 194, 0, 727, 406, 196, 407, 0, 197,
	0, 0, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 665, 0, 694, 723, 208,
	747, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 409, 214, 410, 717, 215, 216, 217, 218,
	219, 0, 220, 718, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 748, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 411, 243, 244, 671, 245, 0, 249, 250, 251,
	252, 0, 254, 338, 253, 255, 256, 711, 257, 246,
	247, 258, 412, 259, 749, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 750, 264, 719, 0, 267, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 751,
	752, 0, 0, 275, 276, 720, 721, 692, 277, 278,
	279, 280, 0, 0, 281, 282, 283, 284, 712, 285,
	0, 348, 286, 287, 288, 349, 753, 0, 0, 289,
	0, 0, 0, 0, 290, 291, 292, 293, 294, 666,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	662, 663, 697, 686, 687, 684, 685, 676, 0, 672,
	0, 0, 0, 0, 675, 0, 0, 0, 142, 143,
	0, 144, 0, 0, 0, 0, 714, 679, 0, 0,
	0, 145, 146, 147, 296, 729, 298, 730, 148, 731,
	732, 0, 149, 302, 303, 150, 151, 682, 713, 733,
	734, 306, 0, 152, 725, 0, 705, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 400, 160,
	2224, 0, 706, 707, 709, 0, 708, 710, 162, 163,
	353, 164, 735, 165, 736, 737, 0, 166, 0, 167,
	0, 168, 0, 0, 728, 170, 0, 171, 0, 0,
	0, 670, 172, 173, 174, 715, 716, 693, 0, 0,
	175, 176, 738, 739, 740, 0, 177, 0, 178, 0,
	0, 401, 0, 179, 726, 0, 318, 0, 180, 181,
	182, 183, 722, 724, 403, 0, 187, 0, 184, 0,
	402, 185, 741, 186, 742, 743, 744, 745, 746, 0,
	704, 0, 404, 188, 189, 190, 405, 191, 192, 193,
	0, 195, 194, 0, 727, 406, 196, 407, 0, 197,
	0, 0, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 665, 0, 694, 723, 208,
	747, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 409, 214, 410, 717, 215, 216, 217, 218,
	219, 0, 220, 718, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 748, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 411, 243, 244, 671, 245, 0, 249, 250, 251,
	252, 0, 254, 338, 253, 255, 256, 711, 257, 246,
	247, 258, 412, 259, 749, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 750, 264, 719, 0, 267, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 751,
	752, 0, 0, 275, 276, 720, 721, 692, 277, 278,
	2223, 280, 0, 0, 281, 282, 283, 284, 712, 285,
	0, 348, 286, 287, 288, 349, 753, 0, 0, 289,
	0, 0, 0, 0, 290, 291, 292, 293, 294, 666,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	662, 663, 697, 686, 687, 684, 685, 676, 0, 672,
	0, 0, 0, 0, 675, 0, 0, 0, 142, 143,
	0, 144, 0, 0, 0, 0, 714, 679, 0, 0,
	0, 145, 146, 147, 296, 729, 298, 730, 148, 731,
	732, 0, 149, 302, 303, 150, 151, 682, 713, 733,
	734, 306, 0, 152, 725, 0, 705, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 400, 160,
	161, 0, 706, 707, 709, 0, 708, 710, 162, 163,
	353, 164, 735, 165, 736, 737, 0, 166, 0, 167,
	0, 168, 0, 0, 728, 170, 0, 171, 0, 0,
	0, 670, 172, 173, 174, 715, 716, 693, 0, 0,
	175, 176, 738, 739, 740, 0, 177, 0, 178, 0,
	0, 401, 0, 179, 726, 0, 318, 0, 180, 181,
	182, 183, 722, 724, 403, 0, 187, 0, 184, 0,
	402, 185, 741, 186, 742, 743, 744, 745, 746, 0,
	704, 0, 404, 188, 189, 190, 405, 191, 192, 193,
	0, 195, 194, 0, 727, 406, 196, 407, 0, 197,
	0, 0, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 665, 0, 694, 723, 208,
	747, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 409, 214, 410, 717, 215, 216, 217, 218,
	219, 0, 220, 718, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 748, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 411, 243, 244, 671, 245, 0, 249, 250, 251,
	252, 0, 254, 338, 253, 255, 256, 711, 257, 246,
	247, 258, 412, 259, 749, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 750, 264, 719, 0, 267, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 751,
	752, 0, 0, 275, 276, 720, 721, 692, 277, 278,
	279, 280, 0, 0, 281, 282, 283, 284, 712, 285,
	0, 348, 286, 287, 288, 349, 753, 0, 0, 289,
	0, 0, 0, 0, 290, 291, 292, 293, 294, 666,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	662, 663, 697, 686, 687, 684, 685, 676, 0, 672,
	0, 0, 0, 0, 675, 0, 0, 0, 142, 143,
	0, 144, 0, 0, 0, 0, 714, 679, 0, 0,
	0, 145, 146, 147, 2222, 729, 298, 730, 148, 731,
	732, 0, 149, 302, 303, 150, 151, 682, 713, 733,
	734, 306, 0, 152, 725, 0, 705, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 400, 160,
	2224, 0, 706, 707, 709, 0, 708, 710, 162, 163,
	353, 164, 735, 165, 736, 737, 0, 166, 0, 167,
	0, 168, 0, 0, 728, 170, 0, 171, 0, 0,
	0, 670, 172, 173, 174, 715, 716, 693, 0, 0,
	175, 176, 738, 739, 740, 0, 177, 0, 178, 0,
	0, 401, 0, 179, 726, 0, 318, 0, 180, 181,
	182, 183, 722, 724, 403, 0, 187, 0, 184, 0,
	402, 185, 741, 186, 742, 743, 744, 745, 746, 0,
	704, 0, 404, 188, 189, 190, 405, 191, 192, 193,
	0, 195, 194, 0, 727, 406, 196, 407, 0, 197,
	0, 0, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 665, 0, 694, 723, 208,
	747, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 409, 214, 410, 717, 215, 216, 217, 218,
	219, 0, 220, 718, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 748, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 411, 243, 244, 671, 245, 0, 249, 250, 251,
	252, 0, 254, 338, 253, 255, 256, 711, 257, 246,
	247, 258, 412, 259, 749, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 750, 264, 719, 0, 267, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 751,
	752, 0, 0, 275, 276, 720, 721, 692, 277, 278,
	2223, 280, 0, 0, 281, 282, 283, 284, 712, 285,
	0, 348, 286, 287, 288, 349, 753, 0, 0, 289,
	0, 0, 0, 0, 290, 291, 292, 293, 294, 666,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	662, 663, 1371, 686, 687, 684, 685, 676, 0, 672,
	0, 0, 0, 0, 675, 0, 0, 0, 142, 143,
	0, 144, 0, 0, 0, 0, 714, 679, 0, 0,
	0, 145, 146, 147, 296, 729, 298, 730, 148, 731,
	732, 0, 149, 302, 303, 150, 151, 682, 713, 733,
	734, 306, 0, 152, 725, 0, 705, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 400, 160,
	161, 0, 706, 707, 709, 0, 708, 710, 162, 163,
	353, 164, 735, 1374, 736, 737, 0, 166, 0, 167,
	0, 168, 0, 0, 728, 170, 0, 171, 0, 0,
	0, 670, 172, 173, 174, 715, 716, 693, 0, 0,
	175, 176, 738, 739, 740, 0, 177, 0, 178, 0,
	0, 401, 0, 179, 726, 0, 318, 0, 180, 181,
	1375, 183, 722, 724, 403, 0, 187, 0, 184, 0,
	402, 185, 741, 186, 742, 743, 744, 745, 746, 0,
	704, 0, 404, 188, 189, 190, 405, 191, 192, 193,
	0, 195, 194, 0, 727, 406, 196, 407, 0, 197,
	0, 0, 198, 0, 199, 1376, 1373, 203, 329, 202,
	408, 204, 205, 207, 206, 665, 0, 694, 723, 208,
	747, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 409, 214, 410, 717, 215, 216, 217, 218,
	219, 0, 220, 718, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 748, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 411, 243, 244, 671, 245, 0, 249, 250, 251,
	1377, 0, 254, 338, 253, 255, 256, 711, 257, 246,
	247, 258, 412, 259, 749, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 750, 264, 719, 0, 267, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 751,
	752, 0, 0, 275, 276, 720, 721, 692, 277, 278,
	279, 280, 0, 0, 281, 282, 283, 284, 712, 285,
	0, 348, 286, 287, 288, 349, 753, 0, 0, 289,
	0, 0, 0, 0, 290, 291, 292, 1372, 294, 666,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	662, 663, 697, 686, 687, 684, 685, 676, 0, 672,
	0, 0, 0, 0, 675, 0, 0, 0, 142, 143,
	0, 144, 0, 0, 0, 0, 714, 679, 0, 0,
	0, 145, 146, 147, 296, 729, 298, 730, 148, 731,
	732, 0, 149, 302, 303, 150, 151, 682, 713, 733,
	734, 306, 0, 152, 725, 0, 705, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 400, 160,
	161, 0, 706, 707, 709, 0, 708, 710, 162, 163,
	353, 164, 735, 165, 736, 737, 0, 166, 0, 167,
	0, 168, 0, 0, 728, 170, 0, 171, 0, 0,
	0, 670, 172, 173, 174, 715, 716, 693, 0, 0,
	175, 176, 738, 739, 740, 0, 177, 0, 178, 0,
	0, 401, 0, 179, 726, 0, 318, 0, 180, 181,
	182, 183, 722, 724, 403, 0, 187, 0, 184, 0,
	402, 185, 741, 186, 742, 743, 744, 745, 746, 0,
	704, 0, 404, 188, 189, 190, 405, 191, 192, 193,
	0, 195, 194, 0, 727, 406, 196, 407, 0, 197,
	0, 0, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 0, 0, 694, 723, 208,
	747, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 409, 214, 410, 717, 215, 216, 217, 218,
	219, 0, 220, 718, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 748, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 411, 243, 244, 1389, 245, 0, 249, 250, 251,
	252, 0, 254, 338, 253, 255, 256, 711, 257, 246,
	247, 258, 412, 259, 749, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 750, 264, 719, 0, 267, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 751,
	752, 0, 0, 275, 276, 720, 721, 692, 277, 278,
	279, 280, 0, 0, 281, 282, 283, 284, 712, 285,
	0, 348, 286, 287, 288, 349, 753, 0, 0, 289,
	0, 0, 0, 0, 290, 291, 292, 293, 294, 0,
	0, 0, 0, 0, 0, 1387, 0, 0, 0, 0,
	1385, 1386, 697, 686, 687, 684, 685, 676, 0, 1388,
	0, 0, 0, 0, 675, 0, 0, 0, 142, 143,
	0, 144, 0, 0, 0, 0, 714, 679, 0, 0,
	0, 145, 146, 147, 296, 729, 298, 730, 148, 731,
	732, 0, 149, 302, 303, 150, 151, 0, 713, 733,
	734, 306, 0, 152, 725, 0, 705, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 400, 160,
	161, 0, 706, 707, 709, 0, 708, 710, 162, 163,
	353, 164, 735, 165, 736, 737, 0, 166, 0, 167,
	0, 168, 0, 0, 728, 170, 0, 171, 0, 0,
	0, 311, 172, 173, 174, 715, 716, 693, 0, 0,
	175, 176, 738, 739, 740, 0, 177, 0, 178, 0,
	0, 401, 0, 179, 726, 0, 318, 0, 180, 181,
	182, 183, 722, 724, 403, 0, 187, 0, 184, 0,
	402, 185, 741, 186, 742, 743, 744, 745, 746, 0,
	704, 0, 404, 188, 189, 190, 405, 191, 192, 193,
	0, 195, 194, 0, 727, 406, 196, 407, 0, 197,
	0, 0, 198, 0, 199, 200, 201, 203, 329, 202,
	408, 204, 205, 207, 206, 0, 0, 694, 723, 208,
	747, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 409, 214, 410, 717, 215, 216, 217, 218,
	219, 0, 220, 718, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 748, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 411, 243, 244, 1389, 245, 0, 249, 250, 251,
	252, 0, 254, 338, 253, 255, 256, 711, 257, 246,
	247, 258, 412, 259, 749, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 750, 264, 719, 0, 267, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 751,
	752, 0, 0, 275, 276, 720, 721, 692, 277, 278,
	279, 280, 0, 0, 281, 282, 283, 284, 712, 285,
	0, 348, 286, 287, 288, 349, 753, 0, 0, 289,
	0, 0, 0, 0, 290, 291, 292, 293, 294, 0,
	0, 697, 686, 687, 684, 685, 676, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 143, 1388,
	144, 0, 0, 0, 675, 714, 679, 0, 0, 0,
	145, 146, 147, 0, 729, 298, 730, 148, 731, 732,
	0, 149, 302, 303, 150, 151, 682, 713, 733, 734,
	306, 0, 152, 725, 0, 705, 0, 153, 154, 155,
	0, 156, 0, 157, 158, 159, 0, 400, 160, 2224,
	0, 706, 707, 709, 0, 708, 710, 162, 163, 353,
	164, 735, 165, 736, 737, 0, 166, 0, 167, 0,
	168, 0, 0, 728, 170, 0, 171, 0, 0, 0,
	670, 172, 173, 174, 715, 716, 693, 0, 0, 175,
	176, 738, 739, 740, 0, 177, 0, 178, 0, 0,
	401, 0, 179, 726, 0, 318, 0, 180, 181, 182,
	183, 722, 724, 0, 0, 187, 0, 184, 0, 402,
	185, 741, 186, 742, 743, 744, 745, 746, 0, 704,
	0, 0, 188, 189, 190, 405, 191, 192, 193, 0,
	195, 194, 0, 727, 406, 196, 0, 0, 197, 0,
	0, 198, 0, 199, 200, 201, 203, 329, 202, 408,
	204, 205, 207, 206, 665, 0, 694, 723, 208, 747,
	209, 210, 0, 211, 0, 0, 212, 0, 0, 213,
	332, 409, 214, 410, 717, 215, 216, 217, 218, 219,
	0, 220, 718, 221, 335, 222, 0, 223, 224, 225,
	226, 227, 748, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 241, 0, 242,
	411, 243, 244, 671, 245, 0, 249, 250, 251, 252,
	0, 254, 338, 253, 255, 256, 711, 257, 246, 247,
	258, 0, 259, 749, 340, 260, 0, 266, 261, 262,
	248, 263, 265, 750, 264, 719, 0, 267, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 343, 751, 752,
	0, 0, 275, 276, 720, 721, 692, 277, 278, 2223,
	280, 0, 0, 281, 282, 283, 284, 712, 285, 0,
	348, 286, 287, 288, 349, 753, 0, 0, 289, 0,
	0, 0, 0, 290, 291, 292, 293, 294, 697, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 662,
	663, 0, 0, 0, 142, 143, 0, 144, 672, 0,
	0, 0, 714, 675, 0, 0, 0, 145, 146, 147,
	296, 297, 298, 299, 148, 300, 301, 0, 149, 302,
	303, 150, 151, 0, 713, 304, 305, 306, 0, 152,
	725, 0, 705, 0, 153, 154, 155, 0, 156, 0,
	157, 158, 159, 0, 400, 160, 161, 0, 706, 707,
	709, 0, 708, 710, 162, 163, 353, 164, 308, 165,
	309, 310, 0, 166, 0, 167, 0, 168, 0, 0,
	169, 170, 0, 171, 0, 0, 0, 311, 172, 173,
	174, 715, 716, 0, 0, 0, 175, 176, 314, 315,
	316, 0, 177, 0, 178, 0, 0, 401, 0, 179,
	726, 0, 318, 0, 180, 181, 182, 183, 722, 724,
	403, 0, 187, 0, 184, 0, 402, 185, 321, 186,
	322, 323, 324, 325, 326, 0, 327, 0, 404, 188,
	189, 190, 405, 191, 192, 193, 0, 195, 194, 0,
	727, 406, 196, 407, 0, 197, 0, 0, 198, 0,
	199, 200, 201, 203, 329, 202, 408, 204, 205, 207,
	206, 0, 0, 0, 723, 208, 331, 209, 210, 0,
	211, 0, 0, 212, 0, 0, 213, 332, 409, 214,
	410, 717, 215, 216, 217, 218, 219, 0, 220, 718,
	221, 335, 222, 0, 223, 224, 225, 226, 227, 336,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 241, 0, 242, 411, 243, 244,
	337, 245, 0, 249, 250, 251, 252, 0, 254, 338,
	253, 255, 256, 711, 257, 246, 247, 258, 412, 259,
	339, 340, 260, 0, 266, 261, 262, 248, 263, 265,
	341, 264, 719, 0, 267, 0, 268, 269, 270, 271,
	272, 273, 274, 0, 343, 344, 345, 0, 0, 275,
	276, 720, 721, 0, 277, 278, 279, 280, 0, 0,
	281, 282, 283, 284, 712, 285, 0, 348, 286, 287,
	288, 349, 350, 0, 0, 289, 0, 568, 0, 0,
	290, 291, 292, 293, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 143, 0, 144, 0, 0, 0,
	0, 295, 0, 0, 0, 1898, 145, 146, 147, 296,
	297, 298, 299, 148, 300, 301, 0, 149, 302, 303,
	150, 151, 0, 0, 304, 305, 306, 0, 152, 307,
	0, 399, 0, 153, 154, 155, 0, 156, 0, 157,
	158, 159, 0, 400, 160, 161, 0, 0, 0, 0,
	0, 0, 0, 162, 163, 353, 164, 308, 165, 309,
	310, 0, 166, 0, 167, 0, 168, 0, 0, 169,
	170, 0, 171, 0, 0, 0, 311, 172, 173, 174,
	312, 313, 0, 0, 0, 175, 176, 314, 315, 316,
	0, 177, 0, 178, 0, 0, 401, 0, 179, 317,
	0, 318, 0, 180, 181, 182, 183, 319, 320, 403,
	0, 187, 0, 184, 0, 402, 185, 321, 186, 322,
	323, 324, 325, 326, 0, 327, 0, 404, 188, 189,
	190, 405, 191, 192, 193, 0, 195, 194, 0, 328,
	406, 196, 407, 0, 197, 0, 0, 198, 0, 199,
	200, 201, 203, 329, 202, 408, 204, 205, 207, 206,
	0, 0, 0, 330, 208, 331, 209, 210, 0, 211,
	0, 0, 212, 0, 0, 213, 332, 409, 214, 410,
	333, 215, 216, 217, 218, 219, 0, 220, 334, 221,
	335, 222, 0, 223, 224, 225, 226, 227, 336, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 241, 0, 242, 411, 243, 244, 337,
	245, 0, 249, 250, 251, 252, 126, 254, 338, 253,
	255, 256, 0, 257, 246, 247, 258, 412, 259, 339,
	340, 260, 0, 266, 261, 262, 248, 263, 265, 341,
	264, 342, 0, 267, 130, 268, 269, 270, 271, 272,
	273, 274, 0, 343, 344, 345, 0, 0, 275, 276,
	346, 347, 0, 277, 278, 279, 280, 0, 0, 281,
	282, 283, 284, 0, 285, 0, 348, 286, 287, 288,
	657, 350, 0, 0, 289, 0, 0, 0, 124, 290,
	291, 292, 293, 294, 0, 125, 568, 565, 0, 566,
	561, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 143, 115, 144, 0, 0, 0, 0,
	295, 0, 0, 0, 0, 145, 146, 147, 296, 297,
	298, 299, 148, 300, 301, 0, 149, 302, 303, 150,
	151, 0, 0, 304, 305, 306, 0, 152, 307, 0,
	399, 0, 153, 154, 155, 0, 156, 0, 157, 158,
	159, 0, 400, 160, 161, 0, 0, 0, 0, 0,
	0, 0, 162, 163, 353, 164, 308, 165, 309, 310,
	1111, 166, 0, 167, 0, 168, 0, 0, 169, 170,
	0, 171, 0, 0, 0, 311, 172, 173, 174, 312,
	313, 558, 0, 0, 175, 176, 314, 315, 316, 0,
	177, 0, 178, 0, 0, 401, 0, 179, 317, 0,
	318, 0, 180, 181, 182, 183, 319, 320, 403, 0,
	187, 0, 184, 0, 402, 185, 321, 186, 322, 323,
	324, 325, 326, 0, 327, 0, 404, 188, 189, 190,
	405, 191, 192, 193, 0, 195, 194, 0, 328, 406,
	196, 407, 0, 197, 0, 0, 198, 0, 199, 200,
	201, 203, 329, 202, 408, 204, 205, 207, 206, 0,
	0, 0, 330, 208, 331, 209, 210, 0, 211, 559,
	0, 212, 0, 0, 213, 332, 409, 214, 410, 333,
	215, 216, 217, 218, 219, 0, 220, 334, 221, 335,
	222, 0, 223, 224, 225, 226, 227, 336, 228, 229,
	0, 230, 231, 232, 233, 234, 236, 237, 235, 238,
	239, 240, 241, 0, 242, 411, 243, 244, 337, 245,
	0, 249, 250, 251, 252, 0, 254, 338, 253, 255,
	256, 0, 257, 246, 247, 258, 412, 259, 339, 340,
	260, 0, 266, 261, 262, 248, 263, 265, 341, 264,
	342, 0, 267, 0, 268, 269, 270, 271, 272, 273,
	274, 0, 343, 344, 345, 0, 0, 275, 276, 346,
	347, 557, 277, 278, 279, 280, 0, 0, 281, 282,
	283, 284, 0, 285, 0, 348, 286, 287, 288, 349,
	350, 0, 0, 289, 0, 0, 0, 0, 290, 291,
	292, 293, 294, 568, 565, 0, 566, 561, 556, 0,
	0, 0, 0, 0, 567, 562, 0, 0, 0, 142,
	143, 0, 144, 0, 0, 0, 0, 295, 0, 0,
	0, 0, 145, 146, 147, 296, 297, 298, 299, 148,
	300, 301, 0, 149, 302, 303, 150, 151, 0, 0,
	304, 305, 306, 0, 152, 307, 0, 399, 0, 153,
	154, 155, 0, 156, 0, 157, 158, 159, 0, 400,
	160, 161, 0, 0, 0, 0, 0, 0, 0, 162,
	163, 353, 164, 308, 165, 309, 310, 1108, 166, 0,
	167, 0, 168, 0, 0, 169, 170, 0, 171, 0,
	0, 0, 311, 172, 173, 174, 312, 313, 558, 0,
	0, 175, 176, 314, 315, 316, 0, 177, 0, 178,
	0, 0, 401, 0, 179, 317, 0, 318, 0, 180,
	181, 182, 183, 319, 320, 403, 0, 187, 0, 184,
	0, 402, 185, 321, 186, 322, 323, 324, 325, 326,
	0, 327, 0, 404, 188, 189, 190, 405, 191, 192,
	193, 0, 195, 194, 0, 328, 406, 196, 407, 0,
	197, 0, 0, 198, 0, 199, 200, 201, 203, 329,
	202, 408, 204, 205, 207, 206, 0, 0, 0, 330,
	208, 331, 209, 210, 0, 211, 559, 0, 212, 0,
	0, 213, 332, 409, 214, 410, 333, 215, 216, 217,
	218, 219, 0, 220, 334, 221, 335, 222, 0, 223,
	224, 225, 226, 227, 336, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 241,
	0, 242, 411, 243, 244, 337, 245, 0, 249, 250,
	251, 252, 0, 254, 338, 253, 255, 256, 0, 257,
	246, 247, 258, 412, 259, 339, 340, 260, 0, 266,
	261, 262, 248, 263, 265, 341, 264, 342, 0, 267,
	0, 268, 269, 270, 271, 272, 273, 274, 0, 343,
	344, 345, 0, 0, 275, 276, 346, 347, 557, 277,
	278, 279, 280, 0, 0, 281, 282, 283, 284, 0,
	285, 0, 348, 286, 287, 288, 349, 350, 0, 0,
	289, 0, 0, 0, 0, 290, 291, 292, 293, 294,
	568, 565, 0, 566, 561, 556, 0, 0, 0, 0,
	0, 567, 562, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 399, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 400, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 788, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 558, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 401,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 403, 0, 187, 0, 184, 0, 402, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	404, 188, 189, 190, 405, 191, 192, 193, 0, 195,
	194, 0, 328, 406, 196, 407, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 408, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 559, 0, 212, 0, 0, 213, 332,
	409, 214, 410, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 411,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	412, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 557, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 0, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 568, 565, 0,
	566, 561, 556, 0, 0, 0, 0, 0, 567, 562,
	0, 0, 0, 142, 143, 0, 144, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 145, 146, 147, 296,
	297, 298, 299, 148, 300, 301, 0, 149, 302, 303,
	150, 151, 0, 0, 304, 305, 306, 0, 152, 307,
	0, 399, 0, 153, 154, 155, 0, 156, 0, 157,
	158, 159, 0, 400, 160, 161, 0, 0, 0, 0,
	0, 0, 0, 162, 163, 353, 164, 308, 165, 309,
	310, 0, 166, 0, 167, 0, 168, 0, 0, 169,
	170, 0, 171, 0, 0, 0, 311, 172, 173, 174,
	312, 313, 558, 0, 0, 175, 176, 314, 315, 316,
	0, 177, 0, 178, 0, 0, 401, 0, 179, 317,
	0, 318, 0, 180, 181, 182, 183, 319, 320, 403,
	0, 187, 0, 184, 0, 402, 185, 321, 186, 322,
	323, 324, 325, 326, 0, 327, 0, 404, 188, 189,
	190, 405, 191, 192, 193, 0, 195, 194, 0, 328,
	406, 196, 407, 0, 197, 0, 0, 198, 0, 199,
	200, 201, 203, 329, 202, 408, 204, 205, 207, 206,
	0, 0, 0, 330, 208, 331, 209, 210, 0, 211,
	559, 0, 212, 0, 0, 213, 332, 409, 214, 410,
	333, 215, 216, 217, 218, 219, 0, 220, 334, 221,
	335, 222, 0, 223, 224, 225, 226, 227, 336, 228,
	229, 0, 230, 231, 232, 233, 234, 236, 237, 235,
	238, 239, 240, 241, 0, 242, 411, 243, 244, 337,
	245, 0, 249, 250, 251, 252, 0, 254, 338, 253,
	255, 256, 0, 257, 246, 247, 258, 412, 259, 339,
	340, 260, 0, 266, 261, 262, 248, 263, 265, 341,
	264, 342, 0, 267, 0, 268, 269, 270, 271, 272,
	273, 274, 0, 343, 344, 345, 0, 0, 275, 276,
	346, 347, 557, 277, 278, 279, 280, 0, 0, 281,
	282, 283, 284, 0, 285, 0, 348, 286, 287, 288,
	349, 350, 0, 139, 289, 0, 0, 0, 0, 290,
	291, 292, 293, 294, 0, 0, 0, 0, 0, 142,
	143, 0, 144, 0, 0, 567, 562, 295, 0, 0,
	0, 0, 145, 146, 147, 296, 297, 298, 299, 148,
	300, 301, 0, 149, 302, 303, 150, 151, 0, 0,
	304, 305, 306, 0, 152, 307, 0, 0, 0, 153,
	154, 155, 0, 156, 0, 157, 158, 159, 0, 0,
	160, 161, 0, 0, 0, 0, 0, 0, 0, 162,
	163, 353, 164, 308, 165, 309, 310, 0, 166, 0,
	167, 0, 168, 0, 0, 169, 170, 0, 171, 0,
	0, 0, 311, 172, 173, 174, 312, 313, 0, 0,
	0, 175, 176, 314, 315, 316, 0, 177, 0, 178,
	0, 0, 0, 0, 179, 317, 0, 318, 0, 180,
	181, 182, 183, 319, 320, 0, 0, 187, 0, 184,
	0, 0, 185, 321, 186, 322, 323, 324, 325, 326,
	0, 327, 0, 0, 188, 189, 190, 0, 191, 192,
	193, 0, 195, 194, 0, 328, 0, 196, 0, 0,
	197, 0, 0, 198, 0, 199, 200, 201, 203, 329,
	202, 0, 204, 205, 207, 206, 0, 0, 0, 330,
	208, 331, 209, 210, 0, 211, 0, 628, 212, 0,
	0, 213, 332, 0, 214, 0, 333, 215, 216, 217,
	218, 219, 0, 220, 334, 221, 335, 222, 0, 223,
	224, 225, 226, 227, 336, 228, 229, 0, 230, 231,
	232, 233, 234, 236, 237, 235, 238, 239, 240, 241,
	0, 242, 0, 243, 244, 337, 245, 0, 249, 250,
	251, 252, 126, 254, 338, 253, 255, 256, 0, 257,
	246, 247, 258, 0, 259, 339, 340, 260, 0, 266,
	261, 262, 248, 263, 265, 341, 264, 342, 0, 267,
	130, 268, 269, 270, 271, 272, 273, 274, 0, 343,
	344, 345, 0, 0, 275, 276, 346, 347, 0, 277,
	278, 279, 280, 0, 0, 281, 282, 283, 284, 0,
	285, 0, 348, 286, 287, 288, 657, 350, 0, 0,
	289, 0, 139, 0, 124, 290, 291, 292, 293, 294,
	0, 125, 0, 0, 0, 0, 0, 0, 142, 143,
	0, 144, 0, 0, 0, 0, 295, 0, 622, 0,
	627, 145, 146, 147, 296, 297, 298, 299, 148, 300,
	301, 0, 149, 302, 303, 150, 151, 0, 0, 304,
	305, 306, 0, 152, 307, 0, 0, 0, 153, 154,
	155, 0, 156, 0, 157, 158, 159, 0, 0, 160,
	161, 0, 0, 0, 0, 0, 0, 0, 162, 163,
	353, 164, 308, 165, 309, 310, 0, 166, 0, 167,
	0, 168, 0, 0, 169, 170, 0, 171, 0, 0,
	0, 311, 172, 173, 174, 312, 313, 0, 0, 0,
	175, 176, 314, 315, 316, 0, 177, 0, 178, 0,
	0, 0, 0, 179, 317, 0, 318, 0, 180, 181,
	182, 183, 319, 320, 0, 0, 187, 0, 184, 0,
	0, 185, 321, 186, 322, 323, 324, 325, 326, 0,
	327, 0, 0, 188, 189, 190, 0, 191, 192, 193,
	0, 195, 194, 0, 328, 0, 196, 0, 0, 197,
	0, 0, 198, 0, 199, 200, 201, 203, 329, 202,
	0, 204, 205, 207, 206, 0, 0, 0, 330, 208,
	331, 209, 210, 0, 211, 0, 0, 212, 0, 0,
	213, 332, 0, 214, 0, 333, 215, 216, 217, 218,
	219, 0, 220, 334, 221, 335, 222, 0, 223, 224,
	225, 226, 227, 336, 228, 229, 0, 230, 231, 232,
	233, 234, 236, 237, 235, 238, 239, 240, 241, 0,
	242, 0, 243, 244, 337, 245, 0, 249, 250, 251,
	252, 126, 254, 338, 253, 255, 256, 0, 257, 246,
	247, 258, 0, 259, 339, 340, 260, 0, 266, 261,
	262, 248, 263, 265, 341, 264, 342, 0, 267, 130,
	268, 269, 270, 271, 272, 273, 274, 0, 343, 344,
	345, 0, 0, 275, 276, 346, 347, 0, 277, 278,
	279, 280, 0, 0, 281, 282, 283, 284, 0, 285,
	0, 348, 286, 287, 288, 657, 350, 0, 0, 289,
	0, 139, 0, 124, 290, 291, 292, 293, 294, 0,
	125, 0, 0, 0, 0, 0, 0, 142, 143, 0,
	144, 0, 0, 0, 0, 295, 0, 0, 0, 115,
	145, 146, 147, 296, 297, 298, 299, 148, 300, 301,
	0, 149, 302, 303, 150, 151, 0, 0, 304, 305,
	306, 0, 152, 307, 0, 0, 0, 153, 154, 155,
	0, 156, 0, 157, 158, 159, 0, 0, 160, 161,
	0, 0, 0, 0, 0, 0, 0, 162, 163, 353,
	164, 308, 165, 309, 310, 0, 166, 0, 167, 0,
	168, 0, 0, 169, 170, 0, 171, 0, 0, 0,
	311, 172, 173, 174, 312, 313, 0, 0, 0, 175,
	176, 314, 315, 316, 0, 177, 0, 178, 0, 0,
	0, 0, 179, 317, 0, 318, 0, 180, 181, 182,
	183, 319, 320, 0, 0, 187, 0, 184, 0, 0,
	185, 321, 186, 322, 323, 324, 325, 326, 0, 327,
	0, 0, 188, 189, 190, 0, 191, 192, 193, 0,
	195, 194, 0, 328, 0, 196, 0, 0, 197, 0,
	0, 198, 0, 199, 200, 201, 203, 329, 202, 0,
	204, 205, 207, 206, 0, 0, 0, 330, 208, 331,
	209, 210, 0, 211, 0, 628, 212, 0, 0, 213,
	332, 0, 214, 0, 333, 215, 216, 217, 218, 219,
	0, 220, 334, 221, 335, 222, 0, 223, 224, 225,
	226, 227, 336, 228, 229, 0, 230, 231, 232, 233,
	234, 236, 237, 235, 238, 239, 240, 241, 0, 242,
	0, 243, 244, 337, 245, 0, 249, 250, 251, 252,
	0, 254, 338, 253, 255, 256, 0, 257, 246, 247,
	258, 0, 259, 339, 340, 260, 0, 266, 261, 262,
	248, 263, 265, 341, 264, 342, 0, 267, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 343, 344, 345,
	0, 0, 275, 276, 346, 347, 0, 277, 278, 279,
	280, 0, 0, 281, 282, 283, 284, 0, 285, 0,
	348, 286, 287, 288, 349, 350, 0, 0, 289, 0,
	139, 0, 0, 290, 291, 292, 293, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 622, 0, 627, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 0, 0, 289, 0, 0,
	139, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 917, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 0, 0, 289, 0, 139,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 143, 0, 144, 0,
	0, 0, 0, 295, 0, 0, 0, 1258, 145, 146,
	147, 296, 297, 298, 299, 148, 300, 301, 0, 149,
	302, 303, 150, 151, 0, 0, 304, 305, 306, 0,
	152, 307, 0, 0, 0, 153, 154, 155, 0, 156,
	0, 157, 158, 159, 0, 0, 160, 161, 0, 0,
	0, 0, 0, 0, 0, 162, 163, 353, 164, 308,
	165, 309, 310, 0, 166, 0, 167, 0, 168, 0,
	0, 169, 170, 0, 171, 0, 0, 0, 311, 172,
	173, 174, 312, 313, 0, 0, 0, 175, 176, 314,
	315, 316, 0, 177, 0, 178, 0, 0, 0, 0,
	179, 317, 0, 318, 0, 180, 181, 182, 183, 319,
	320, 0, 0, 187, 0, 184, 0, 0, 185, 321,
	186, 322, 323, 324, 325, 326, 0, 327, 0, 0,
	188, 189, 190, 0, 191, 192, 193, 0, 195, 194,
	0, 328, 0, 196, 0, 0, 197, 0, 0, 198,
	0, 199, 200, 201, 203, 329, 202, 0, 204, 205,
	207, 206, 0, 0, 0, 330, 208, 331, 209, 210,
	0, 211, 0, 0, 212, 0, 0, 213, 332, 0,
	214, 0, 333, 215, 216, 217, 218, 219, 0, 220,
	334, 221, 335, 222, 0, 223, 224, 225, 226, 227,
	336, 228, 229, 0, 230, 231, 232, 233, 234, 236,
	237, 235, 238, 239, 240, 241, 0, 242, 0, 243,
	244, 337, 245, 0, 249, 250, 251, 252, 0, 254,
	338, 253, 255, 256, 0, 257, 246, 247, 258, 0,
	259, 339, 340, 260, 0, 266, 261, 262, 248, 263,
	265, 341, 264, 342, 0, 267, 0, 268, 269, 270,
	271, 272, 273, 274, 0, 343, 344, 345, 0, 0,
	275, 276, 346, 347, 0, 277, 278, 279, 280, 0,
	0, 281, 282, 283, 284, 0, 285, 0, 348, 286,
	287, 288, 349, 350, 0, 0, 289, 0, 139, 0,
	0, 290, 291, 292, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 143, 0, 144, 0, 0,
	0, 0, 295, 0, 0, 0, 1833, 145, 146, 147,
	296, 297, 298, 299, 148, 300, 301, 0, 149, 302,
	303, 150, 151, 0, 0, 304, 305, 306, 0, 152,
	307, 0, 0, 0, 153, 154, 155, 0, 156, 0,
	157, 158, 159, 0, 0, 160, 161, 0, 0, 0,
	0, 0, 0, 0, 162, 163, 353, 164, 308, 165,
	309, 310, 0, 166, 0, 167, 0, 168, 0, 0,
	169, 170, 0, 171, 0, 0, 0, 311, 172, 173,
	174, 312, 313, 0, 0, 0, 175, 176, 314, 315,
	316, 0, 177, 0, 178, 0, 0, 0, 0, 179,
	317, 0, 318, 0, 180, 181, 182, 183, 319, 320,
	0, 0, 187, 0, 184, 0, 0, 185, 321, 186,
	322, 323, 324, 325, 326, 0, 327, 0, 0, 188,
	189, 190, 0, 191, 192, 193, 0, 195, 194, 0,
	328, 0, 196, 0, 0, 197, 0, 0, 198, 0,
	199, 200, 201, 203, 329, 202, 0, 204, 205, 207,
	206, 0, 0, 0, 330, 208, 331, 209, 210, 0,
	211, 0, 0, 212, 0, 0, 213, 332, 0, 214,
	0, 333, 215, 216, 217, 218, 219, 0, 220, 334,
	221, 335, 222, 0, 223, 224, 225, 226, 227, 336,
	228, 229, 0, 230, 231, 232, 233, 234, 236, 237,
	235, 238, 239, 240, 241, 0, 242, 0, 243, 244,
	337, 245, 0, 249, 250, 251, 252, 0, 254, 338,
	253, 255, 256, 0, 257, 246, 247, 258, 0, 259,
	339, 340, 260, 0, 266, 261, 262, 248, 263, 265,
	341, 264, 342, 0, 267, 0, 268, 269, 270, 271,
	272, 273, 274, 0, 343, 344, 345, 0, 0, 275,
	276, 346, 347, 0, 277, 278, 279, 280, 0, 0,
	281, 282, 283, 284, 0, 285, 0, 348, 286, 287,
	288, 349, 350, 0, 0, 289, 0, 0, 0, 0,
	290, 291, 292, 293, 294, 697, 686, 687, 684, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 143, 0, 144, 910, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 729, 298,
	730, 148, 731, 732, 0, 149, 302, 303, 150, 151,
	0, 0, 733, 734, 306, 0, 152, 307, 0, 399,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 400, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 735, 165, 736, 737, 0,
	166, 0, 167, 0, 168, 0, 0, 728, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	693, 0, 0, 175, 176, 738, 739, 740, 0, 177,
	0, 178, 0, 0, 401, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 403, 0, 187,
	0, 184, 0, 402, 185, 741, 186, 742, 743, 744,
	745, 746, 0, 704, 0, 404, 188, 189, 190, 405,
	191, 192, 193, 0, 195, 194, 0, 328, 406, 196,
	407, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 408, 204, 205, 207, 206, 0, 0,
	694, 330, 208, 747, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 409, 214, 410, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 748, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 411, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 412, 259, 749, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 750, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 751, 752, 0, 0, 275, 276, 346, 347,
	692, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 753,
	568, 565, 289, 0, 0, 838, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 399, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 400, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 401,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 403, 0, 187, 0, 184, 0, 402, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	404, 188, 189, 190, 405, 191, 192, 193, 0, 195,
	194, 0, 328, 406, 196, 407, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 408, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	409, 214, 410, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 411,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	412, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 135, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 134, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	568, 565, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 138, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 399, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 400, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 401,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 403, 0, 187, 0, 184, 0, 402, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	404, 188, 189, 190, 405, 191, 192, 193, 0, 195,
	194, 0, 328, 406, 196, 407, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 408, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	409, 214, 410, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 411,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	412, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	568, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 138, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 399, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 400, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 401,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 403, 0, 187, 0, 184, 0, 402, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	404, 188, 189, 190, 405, 191, 192, 193, 0, 195,
	194, 0, 328, 406, 196, 407, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 408, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	409, 214, 410, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 411,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	412, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 1449, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 1447, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 1446, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 1451, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 0, 0, 187,
	1444, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	1450, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 1445, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	1449, 152, 307, 0, 0, 1496, 153, 154, 155, 0,
	156, 1447, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 1451, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	1495, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 1450, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 1499, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 1234, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 628, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 1163, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	875, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 628, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 869, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 628,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 645, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 356, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 355,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 1746, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	1744, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 1739, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 501, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 1128, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 927, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 0, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 872, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	817, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 815, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	811, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 809, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	806, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 802, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 202, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 343, 344, 345, 0, 0, 275, 276, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	797, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 772, 0, 152, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 197, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 523, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 337, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 255, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 519, 344, 345, 0, 0, 275, 773, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 217, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 226,
	227, 336, 610, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 245, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 139, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 0, 0, 0,
	0, 142, 143, 0, 144, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 145, 146, 147, 296, 297, 298,
	299, 148, 300, 301, 0, 149, 302, 303, 150, 151,
	0, 0, 304, 305, 306, 0, 513, 307, 0, 0,
	0, 153, 154, 155, 0, 156, 0, 157, 158, 159,
	0, 0, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 162, 163, 353, 164, 308, 165, 309, 310, 0,
	166, 0, 167, 0, 168, 0, 0, 169, 170, 0,
	171, 0, 0, 0, 311, 172, 173, 174, 312, 313,
	0, 0, 0, 175, 176, 314, 315, 316, 0, 177,
	0, 178, 0, 0, 0, 0, 179, 317, 0, 318,
	0, 180, 181, 182, 183, 319, 320, 0, 0, 187,
	0, 184, 0, 0, 185, 321, 186, 322, 323, 324,
	325, 326, 0, 327, 0, 0, 188, 189, 190, 0,
	191, 192, 193, 0, 195, 194, 0, 328, 0, 196,
	0, 0, 512, 0, 0, 198, 0, 199, 200, 201,
	203, 329, 523, 0, 204, 205, 207, 206, 0, 0,
	0, 330, 208, 331, 209, 210, 0, 211, 0, 0,
	212, 0, 0, 213, 332, 0, 214, 0, 333, 215,
	216, 217, 218, 219, 0, 220, 334, 221, 335, 222,
	0, 223, 224, 225, 226, 227, 336, 228, 229, 0,
	230, 231, 232, 233, 234, 236, 237, 235, 238, 239,
	240, 241, 0, 242, 0, 243, 244, 514, 245, 0,
	249, 250, 251, 252, 0, 254, 338, 253, 515, 256,
	0, 257, 246, 247, 258, 0, 259, 339, 340, 260,
	0, 266, 261, 262, 248, 263, 265, 341, 264, 342,
	0, 267, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 519, 344, 345, 0, 0, 275, 517, 346, 347,
	0, 277, 278, 279, 280, 0, 0, 281, 282, 283,
	284, 0, 285, 0, 348, 286, 287, 288, 349, 350,
	139, 0, 289, 0, 0, 0, 0, 290, 291, 292,
	293, 294, 0, 0, 0, 0, 142, 143, 0, 144,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 145,
	146, 147, 296, 297, 298, 299, 148, 300, 301, 0,
	149, 302, 303, 150, 151, 0, 0, 304, 305, 306,
	0, 152, 307, 0, 0, 0, 153, 154, 155, 0,
	156, 0, 157, 158, 159, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 162, 163, 353, 164,
	308, 165, 309, 310, 0, 166, 0, 167, 0, 168,
	0, 0, 169, 170, 0, 171, 0, 0, 0, 311,
	172, 173, 174, 312, 313, 0, 0, 0, 175, 176,
	314, 315, 316, 0, 177, 0, 178, 0, 0, 0,
	0, 179, 317, 0, 318, 0, 180, 181, 182, 183,
	319, 320, 0, 0, 187, 0, 184, 0, 0, 185,
	321, 186, 322, 323, 324, 325, 326, 0, 327, 0,
	0, 188, 189, 190, 0, 191, 192, 193, 0, 195,
	194, 0, 328, 0, 196, 0, 0, 197, 0, 0,
	198, 0, 199, 200, 201, 203, 329, 202, 0, 204,
	205, 207, 206, 0, 0, 0, 330, 208, 331, 209,
	210, 0, 211, 0, 0, 212, 0, 0, 213, 332,
	0, 214, 0, 333, 215, 216, 0, 218, 219, 0,
	220, 334, 221, 335, 222, 0, 223, 224, 225, 0,
	227, 336, 228, 229, 0, 230, 231, 232, 233, 234,
	236, 237, 235, 238, 239, 240, 241, 0, 242, 0,
	243, 244, 337, 0, 0, 249, 250, 251, 252, 0,
	254, 338, 253, 255, 256, 0, 257, 246, 247, 258,
	0, 259, 339, 340, 260, 0, 266, 261, 262, 248,
	263, 265, 341, 264, 342, 0, 267, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 343, 344, 345, 0,
	0, 275, 276, 346, 347, 0, 277, 278, 279, 280,
	0, 0, 281, 282, 283, 284, 0, 285, 0, 348,
	286, 287, 288, 349, 350, 0, 0, 289, 0, 0,
	0, 0, 290, 291, 292, 293, 294, 934, 935, 0,
	954, 955, 956, 964, 965, 966, 0, 0, 0, 0,
	0, 0, 0, 957, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 968, 0, 934, 935, 0, 954, 955,
	956, 964, 965, 966, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 936, 0, 0, 0, 937, 0,
	951, 968, 0, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 936, 0, 0, 0, 937, 0, 951, 968,
	0, 0, 934, 935, 0, 954, 955, 956, 964, 965,
	966, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	936, 0, 0, 0, 942, 937, 951, 0, 968, 0,
	934, 935, 0, 954, 955, 956, 964, 965, 966, 0,
	0, 0, 0, 961, 969, 0, 957, 0, 0, 936,
	0, 0, 942, 937, 0, 951, 968, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 969, 0, 0, 0, 959, 936, 0, 0,
	942, 0, 952, 951, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	969, 0, 0, 0, 959, 0, 0, 958, 0, 942,
	952, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 969,
	0, 0, 959, 0, 0, 958, 0, 942, 952, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 961, 969, 0, 0,
	0, 959, 0, 958, 0, 0, 0, 952, 0, 0,
	0, 962, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 959,
	0, 0, 958, 0, 0, 952, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	953, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 962, 0, 0, 0,
	0, 0, 1674, 0, 0, 0, 960, 0, 953, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 962, 0, 0, 0, 0, 0,
	1673, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 1625, 0,
	0, 0, 0, 960, 0, 0, 948, 949, 950, 963,
	0, 947, 945, 946, 938, 939, 940, 941, 943, 944,
	0, 0, 0, 0, 2197, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 948, 949, 950, 963, 0, 947,
	945, 946, 938, 939, 940, 941, 943, 944, 0, 0,
	934, 935, 2153, 954, 955, 956, 964, 965, 966, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 968, 0, 934, 935,
	0, 954, 955, 956, 964, 965, 966, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 936, 0, 0,
	0, 937, 0, 951, 968, 0, 934, 935, 0, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 936, 0, 0, 0, 937,
	0, 951, 968, 0, 0, 934, 935, 0, 954, 955,
	956, 964, 965, 966, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 936, 0, 0, 0, 942, 937, 951,
	0, 968, 0, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 0, 0, 0, 0, 961, 969, 0, 957,
	0, 0, 936, 0, 0, 942, 937, 0, 951, 968,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 969, 0, 0, 0, 959,
	936, 0, 0, 942, 0, 952, 951, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 969, 0, 0, 0, 959, 0, 0,
	958, 0, 942, 952, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 969, 0, 0, 959, 0, 0, 958, 0,
	942, 952, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 953, 961,
	969, 0, 0, 0, 959, 0, 958, 0, 0, 0,
	952, 0, 0, 0, 962, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 959, 0, 0, 958, 0, 0, 952, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 953, 948, 949, 950, 963, 0, 947,
	945, 946, 938, 939, 940, 941, 943, 944, 0, 962,
	0, 0, 2114, 0, 0, 0, 0, 0, 0, 960,
	0, 953, 948, 949, 950, 963, 0, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 0, 962, 0, 0,
	2088, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	948, 949, 950, 963, 0, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 0, 0, 0, 0, 2083, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 0, 0, 2079, 0, 0,
	0, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 934, 935, 2026, 954, 955, 956, 964,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 968,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	936, 0, 0, 0, 937, 0, 951, 968, 0, 934,
	935, 0, 954, 955, 956, 964, 965, 966, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 936, 0,
	0, 0, 937, 0, 951, 968, 0, 0, 934, 935,
	0, 954, 955, 956, 964, 965, 966, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 936, 0, 0, 0,
	942, 937, 951, 0, 968, 0, 934, 935, 0, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 961,
	969, 0, 957, 0, 0, 936, 0, 0, 942, 937,
	0, 951, 968, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 969, 0,
	0, 0, 959, 936, 0, 0, 942, 0, 952, 951,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 969, 0, 0, 0,
	959, 0, 0, 958, 0, 942, 952, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 969, 0, 0, 959, 0,
	0, 958, 0, 942, 952, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 961, 969, 0, 0, 0, 959, 0, 958,
	0, 0, 0, 952, 0, 0, 0, 962, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 959, 0, 0, 958, 0,
	0, 952, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 960, 0, 953, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 962, 0, 0, 1997, 0, 0, 0, 0,
	0, 0, 960, 0, 953, 948, 949, 950, 963, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 0,
	962, 0, 0, 1996, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 1917, 0, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 948, 949, 950, 963, 0, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 0, 0, 1633, 1634,
	1836, 1651, 1652, 1653, 0, 0, 0, 960, 0, 0,
	948, 949, 950, 963, 1804, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 0, 0, 934, 935, 1812, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 937,
	0, 1648, 968, 0, 934, 935, 0, 954, 955, 956,
	964, 965, 966, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 936, 0, 0, 0, 937, 0, 951,
	968, 0, 0, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 936, 0, 0, 0, 1639, 937, 951, 0, 968,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	936, 0, 1478, 942, 937, 0, 951, 968, 0, 0,
	0, 0, 1654, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 969, 0, 0, 0, 0, 936, 0,
	0, 942, 2251, 1649, 951, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 969, 0, 0, 0, 959, 0, 0, 0, 0,
	942, 952, 1665, 1479, 0, 1664, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	969, 0, 0, 959, 0, 0, 958, 0, 942, 952,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 1650, 961, 969, 0,
	0, 0, 959, 0, 958, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	2250, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	959, 0, 0, 958, 0, 0, 952, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 1645, 1646, 1647, 0, 0, 1644, 1642, 1643,
	1635, 1636, 1637, 1638, 1640, 1641, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 953,
	948, 949, 950, 963, 0, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 0, 962, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 948, 949,
	950, 963, 0, 947, 945, 946, 938, 939, 940, 941,
	943, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 948, 949, 950, 963, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 1211,
	0, 0, 0, 0, 0, 934, 935, 0, 954, 955,
	956, 964, 965, 966, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 1210, 0, 0, 937, 0,
	0, 968, 0, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 936, 0, 0, 0, 937, 0, 951, 968,
	0, 0, 0, 0, 0, 0, 0, 934, 935, 0,
	954, 955, 956, 964, 965, 966, 0, 0, 0, 0,
	936, 0, 0, 957, 0, 0, 951, 0, 0, 0,
	937, 0, 0, 968, 0, 934, 935, 0, 954, 955,
	956, 964, 965, 966, 0, 0, 0, 0, 0, 0,
	0, 957, 942, 0, 936, 0, 0, 0, 937, 0,
	951, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 969, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 936, 0, 0, 0, 0, 0, 951, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	969, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 942, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 961, 969, 958, 0, 0, 952, 0,
	0, 0, 942, 0, 0, 0, 0, 1671, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 969, 958, 549, 0, 959, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 958, 0, 962,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 953, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 0, 1816, 0, 0, 962,
	0, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 1666, 0, 0, 937, 0, 0, 968,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	936, 0, 0, 0, 937, 0, 951, 968, 0, 934,
	935, 0, 954, 955, 956, 964, 965, 966, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 936, 1624,
	0, 0, 937, 0, 951, 968, 0, 0, 934, 935,
	0, 954, 955, 956, 964, 965, 966, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 936, 0, 0, 0,
	942, 937, 951, 0, 968, 0, 934, 935, 0, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 961,
	969, 0, 957, 0, 0, 936, 0, 0, 942, 937,
	0, 951, 968, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 969, 0,
	0, 0, 959, 936, 0, 0, 942, 0, 952, 951,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 969, 0, 0, 0,
	959, 0, 0, 958, 0, 942, 952, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 969, 0, 0, 959, 0,
	0, 958, 0, 942, 952, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 1631, 0, 0, 0, 0, 0,
	0, 953, 961, 969, 0, 0, 0, 959, 0, 958,
	0, 0, 0, 952, 0, 0, 0, 962, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 959, 0, 0, 958, 0,
	0, 952, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	1633, 1634, 0, 1651, 1652, 1653, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 960, 0, 953, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 960, 1648, 953, 948, 949, 950, 963, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1639, 0, 960,
	0, 0, 948, 949, 950, 963, 0, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	948, 949, 950, 963, 1654, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 934, 935, 0, 954, 955, 956,
	964, 965, 966, 0, 0, 1649, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	968, 0, 934, 935, 0, 954, 955, 956, 964, 965,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 937, 0, 951, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 951, 0, 0, 1650, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 969, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 969,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 952,
	0, 0, 0, 0, 1645, 1646, 1647, 0, 0, 1644,
	1642, 1643, 1635, 1636, 1637, 1638, 1640, 1641, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 1049, 1078, 1041, 1069,
	1068, 0, 953, 1043, 1042, 0, 0, 0, 0, 1080,
	1079, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 1066, 1065, 962, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 1061, 1062, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 948, 949,
	950, 963, 0, 947, 945, 946, 938, 939, 940, 941,
	943, 944, 1052, 1051, 1053, 1054, 1055, 1056, 1057, 0,
	1077, 0, 0, 960, 0, 0, 948, 949, 950, 963,
	0, 947, 945, 946, 938, 939, 940, 941, 943, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 1045, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 1050, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 1270, 1268, 1269,
	1272, 1271, 0, 0, 0, 1059, 1049, 1078, 1041, 1069,
	1068, 0, 0, 1043, 1042, 0, 0, 0, 0, 1080,
	1079, 0, 0, 1046, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 506, 0, 0, 0, 0,
	0, 0, 1074, 0, 1066, 1065, 1044, 0, 0, 1075,
	1076, 0, 0, 576, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 0, 0, 0, 0,
	0, 1048, 1063, 1061, 1062, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 0,
	0, 577, 0, 0, 0, 0, 583, 584, 0, 0,
	593, 0, 1052, 1051, 1053, 1054, 1055, 1056, 1057, 0,
	1077, 0, 0, 508, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 1045, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 1050, 0, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 581, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 587, 0,
	0, 582, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 1046, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 1075,
	1076, 0, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 590,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 595, 0, 0,
	0, 511, 0, 0, 0, 0, 588, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 594,
}
var sqlPact = [...]int{

	134, -1000, -6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17951, -1000, -1000,
	-1000, 22046, -1000, -1000, -1000, -1000, -1000, -1000, 21731, 847,
	1109, -1000, -1000, -1000, -1000, -1000, 22046, 2372, 1778, 5335,
	1200, 22046, 17951, 1189, 1778, 23306, -1000, -1000, 23306, 1187,
	-1000, -1000, -1000, -1000, -1000, 27401, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 663, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 709,
	708, 196, 689, -1000, 1021, -4, 14763, 31181, 538, 541,
	538, 538, 533, 742, 27086, 22046, 1616, -26, -1000, 326,
	15717, 134, 620, -32, 18581, 22046, -1000, -3, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 403, -3, -1000, -1000, 21416, -1000, 1387, 1236, 1233,
	20156, -1000, -1000, -1000, -1000, -1000, 330, -1000, 13453, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1006, -1000, -31, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11118, 329, 1385, 11118, 1001,
	-1000, 22046, -1000, -1000, -1000, 1283, -1000, -1000, -1000, -1000,
	-1000, 426, 1835, 720, 328, 26771, -1000, 975, -1000, 425,
	631, -1000, -1000, 14436, 31, 20156, -1000, 11118, 11118, 11118,
	26456, 22046, 22046, 1251, 26141, -1000, 1021, -1000, -1000, 25826,
	25511, 25196, 24881, 24566, -1000, 1115, 1591, 1591, 1591, 1640,
	140, 132, 196, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1753, -1000, -1000, -1000, -1000, 1799, -1000, -1000,
	-1000, -1000, -1000, 1283, 17636, 764, 1596, 1376, -1000, 1000,
	1374, 1366, 1365, 1358, 1357, -1000, 806, -1000, 1403, 544,
	-1000, 1354, 831, 518, -1000, 1351, 1350, 975, -1000, 975,
	-1000, -1000, -1000, 615, 23306, 21101, 24251, 22046, 20786, -39,
	22046, -1000, 327, -39, 9757, 9757, -1000, -1000, 326, -1000,
	9077, 1919, 449, -191, 152, 406, -1000, 15079, 16994, -1000,
	17636, 18581, -32, -75, -1000, -1000, -1000, 5008, 690, 16036,
	-3, -1000, -1000, -1000, -1000, -1000, 20156, 22046, 22046, 747,
	23936, 370, -1000, 11118, 48, -1000, -1000, 326, 17951, 900,
	30338, -1000, 11118, 11118, 11118, 11118, 11118, 933, 362, -1000,
	325, 322, 6343, -1000, -1000, 1798, -1000, -1000, -1000, 144,
	-1000, -1000, 11118, -3, -1000, -1000, -1000, -1000, 321, 1831,
	-1000, 484, -1000, -1000, -1000, 432, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1400, 320, 316, 315, -1000,
	-1000, -1000, -1000, 314, 307, 305, 304, 299, 290, 288,
	283, 279, 276, 275, 273, 272, 264, 263, 881, -1000,
	461, -1000, -1000, 461, 461, -1000, 247, 247, 250, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 247, -1000, -1000,
	-1000, 407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 262,
	1715, 31108, 17636, 30338, 17951, -1000, -1000, -1000, -1000, 22046,
	11118, -1000, 1704, 975, -51, -1000, -1000, -1000, -1000, 1151,
	1235, 562, 958, 14109, 13782, 1555, -1000, -1000, -1000, 20,
	5335, 118, -1000, 30338, 30338, 30338, 259, 1104, 434, 73,
	23621, 434, 1093, -1000, 1115, 114, 1485, -1000, 114, 1483,
	112, 1469, -1000, -158, -1000, 1461, -75, 1460, -1000, 1018,
	1211, 10438, 1199, 11118, 196, -1000, -1000, 196, 196, 7364,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20471,
	-1000, -1000, 711, 22046, 1395, 17951, 22046, 22046, 22046, 22046,
	22046, -1000, -1000, 197, 1393, 22046, 1145, -1000, -1000, 22046,
	22046, 802, 574, -1000, -51, -1000, 23306, -1000, 785, 1459,
	492, 734, 1456, 861, 851, 1454, 22046, -39, 1699, 22046,
	72, -1000, 29825, -1000, 72, -1000, 47, -1000, 30338, -1000,
	1197, 1186, 15717, 1307, 953, 953, 953, -1000, 253, 359,
	406, 4340, 11118, -1000, 19841, 957, 23, 136, 1919, -1000,
	22046, 404, -1000, 22046, -1000, -1000, -1000, 1349, 34, -1000,
	-1000, 444, 79, 1698, 79, 16356, -1000, 22046, 33, 30338,
	1356, 18896, 611, -1000, 30908, 31108, 5335, 635, 11118, 11118,
	11118, 11118, 11118, 11118, 11118, 11118, 11118, 11118, 11118, 11118,
	11118, 11118, 11118, 11118, 11118, 11118, 11118, 11118, 11118, 11118,
	1195, 11118, 606, 11118, 11118, 11118, 11118, 1221, 970, 241,
	1004, -1000, 1744, 1744, 1744, 30704, 30704, 185, 362, -1000,
	11118, -1000, 10098, 132, 29396, -45, -1000, -1000, -1000, 7704,
	456, 30338, -3, 6002, -1000, 1788, 816, 1413, 1295, 252,
	130, 124, 123, 11118, 11118, 11798, 11798, 11118, 12138, 11118,
	11118, 6683, 11118, 11118, 11118, 11118, 11118, 11118, -1000, 251,
	-1000, -1000, -1000, -1000, 1787, -1000, -1000, 1783, -1000, 633,
	627, 1782, -4, 27, -1000, 596, -1000, -1000, -1000, -1000,
	97, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 250, 881, 247, 247, 247, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 407, -1000, -1000, 461, 461,
	461, -1000, -1000, -94, -1000, 1348, -1000, 428, 25, 531,
	-51, 975, 805, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1830, -57, -1000, -1000,
	-57, -1000, -1000, 5335, -1000, -1000, 20156, -1000, -1000, 19211,
	1692, 1452, -1000, 891, -1000, 1685, 22046, 995, 1085, -1000,
	645, 1451, -1000, -1000, 22046, 22046, -1000, 22046, -1000, 22046,
	22046, 5335, 22046, 22046, -1000, -1000, -1000, 30338, -1000, 401,
	-1000, -1000, 30338, 788, 1237, -1000, 1237, -62, -1000, 29481,
	1183, 22046, -1000, -1000, -1000, -1000, -1000, 22046, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 166, -1000, -1000, -1000,
	-1000, 22046, 22046, 22046, -1000, -88, 844, -1000, 19526, 1661,
	1589, 1570, 20156, 1667, -4, 1347, 1658, -4, 1345, 603,
	22046, 602, 601, 20156, -1000, 246, 13, 444, 9757, 15717,
	5335, -1000, 444, 9077, -1000, 15717, 15717, 1144, 1181, 15717,
	-1000, -1000, -1000, -1000, 19841, 347, 406, 19841, -1000, 1781,
	1184, 12, -1000, -1000, 22046, 244, -1000, 406, 116, 1270,
	1015, -1000, 686, 1341, 22046, 795, 11118, 856, -1000, 15398,
	466, 22046, 795, 70, -1000, -1000, -1000, 396, 22046, -1000,
	-1000, 11118, -1000, -1000, 22046, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 417, 589, 589, 653, 653,
	653, 653, 1752, 1394, 2589, 348, 226, 226, 226, 2371,
	274, 274, 226, 226, 226, 30704, 30366, 1095, 11118, 11118,
	599, 950, 241, 1095, 11118, 1095, 1095, 1095, 1095, -1000,
	1381, -1000, -1000, -1000, -1000, 1336, 240, 12138, 12138, -1000,
	-1000, -1000, 6343, 12478, -1000, -1000, -1000, -1000, 239, 11118,
	-1000, 4006, -205, -10, -1000, -1000, 11118, -104, -125, -1000,
	-1000, 674, -1000, 11118, -1000, -29, 11118, 11118, 11118, 111,
	110, -1000, 594, -1000, 592, 591, 590, -1000, 238, 946,
	237, 236, 11118, -1000, -1000, -1000, 30309, 28093, 109, 1333,
	-155, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 106, 105,
	30281, -155, 103, 3939, -1000, 12138, 12138, 12138, 6343, 232,
	94, 29453, -155, 30253, 9417, 9417, 9417, 93, 29915, 11118,
	-155, 28065, 28037, 3650, -16, -17, -18, 1779, -22, 92,
	411, 410, 90, -1000, -1000, 31108, -1000, 349, 577, -1000,
	1776, 443, 17636, 22046, -1000, 1228, -1000, -1000, 783, -1000,
	867, -1000, 14763, -1000, -1000, 88, -30, -69, 31108, -1000,
	-1000, -1000, -1000, -1000, 22046, 302, 22046, 22046, -1000, 231,
	1177, 1170, -4, 22046, 1828, -4, 22046, 1442, 1509, 384,
	22046, -1000, 114, 114, -1000, 112, -1000, -1000, -75, 788,
	-1000, 11118, 1775, -1000, -1000, -1000, 7364, -1000, -1000, -1000,
	22046, -173, -86, -1000, -1000, -1000, -1000, -1000, 404, 810,
	22046, 22046, 22046, -1000, -1000, 1084, 22991, 1077, 31108, 230,
	22046, 22046, 22676, 22361, 22046, 781, -4, -1000, 229, -4,
	-1000, 227, 22046, 829, 22046, 22046, 803, -4, -1000, 1285,
	-1000, -156, 1919, -1000, 1285, -1000, -1000, 1144, -1000, 223,
	11118, 15717, -1000, 355, -1000, -35, -1000, 19841, -1000, 354,
	-199, -1000, 392, -1000, 406, 213, 22046, 19841, -1000, 443,
	1330, 667, -1000, 685, -1000, -1000, 7023, 30338, -1000, 795,
	1576, -40, -1000, -1000, -1000, 444, 16356, 15717, 9077, -41,
	30338, -86, 11118, 1095, 1095, 11118, 12138, 12138, -1000, 1095,
	-1000, -1000, -1000, -1000, -1000, 1328, 211, 11118, 31108, 29368,
	3893, -46, -1000, 8737, -76, -1000, 11118, -1000, 29056, -1000,
	-1000, 228, 1505, -1000, 11118, 29887, 87, 8397, -1000, 29853,
	-37, -37, -1000, 1819, 1130, 1046, 872, 756, 1768, -1000,
	16675, 450, 964, 29028, 30908, 31108, -1000, 11118, -1000, -1000,
	1321, 11118, -1000, 30908, 31108, 12138, 12138, 12138, 12138, 12138,
	12138, 12138, 12138, 12138, 12138, 12138, 12138, 12138, 12138, 12138,
	12138, 12138, 12138, 12138, 1198, 12138, 1742, 1742, 1742, -84,
	8057, -1000, 1310, 1321, 11118, 11118, 31108, 86, 85, 84,
	-1000, 11118, -155, 11118, 11118, 11118, -1000, -1000, -1000, 83,
	-1000, 1767, -1000, -1000, -1000, -1000, -1000, 1766, -1000, 346,
	81, -1000, 968, -1000, -86, -1000, -1000, -1000, -1000, -1000,
	1255, -1000, 19211, -1000, 210, 22046, 13134, 209, 1035, 11118,
	207, 205, -1000, 203, -1000, -1000, 201, 22046, 1157, 384,
	18266, -1000, 434, -1000, -1000, -1000, 972, 28999, -1000, 1610,
	5335, 22046, -1000, -1000, -1000, 586, 583, 1437, -1000, 1076,
	-1000, 479, 909, -1000, 1434, 1045, 1431, 1045, -1000, -88,
	841, -1000, 11118, -1000, 11118, -1000, 571, -1000, -1000, 569,
	80, 1286, 1624, -1000, 15717, 1286, -1000, 22046, 30338, -1000,
	-191, -1000, 1759, -1000, -1000, 1184, -1000, 4678, 19841, 22046,
	-47, -1000, -1000, 17636, 626, -1000, -123, -1000, -1000, 225,
	-4, 795, -1000, -129, -1000, 389, 1714, 1095, 3630, 165,
	11118, 31108, 30732, -53, 11118, 11118, -1000, -55, -1000, 11118,
	335, 30338, -1000, -1000, -1000, 30338, 11118, 1814, 11118, 76,
	69, 68, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	66, -1000, -1000, 27716, 11118, 65, -1000, 64, 62, 30338,
	1310, 30338, -1000, -1000, 442, 442, 725, 725, 725, 725,
	1742, 713, 469, 528, 1031, 1031, 1031, 1519, 476, 476,
	1031, 1031, 1031, 1309, 1140, 200, 30550, 11118, -60, -1000,
	-1000, -1000, 30338, 30338, 60, -1000, -1000, -1000, -155, 3591,
	28971, 28943, -1000, 58, 334, -1000, -1000, 198, -1000, 1262,
	-1000, 2253, 13134, 194, -64, -1000, 284, 1592, 11118, -1000,
	-1000, 186, 22046, -1000, 28603, 13134, 22046, 19211, 1682, 13134,
	993, 1161, 384, 18266, -1000, 645, -1000, -1000, -1000, 1610,
	-1000, 22046, 22046, 22046, 1428, -1000, -1000, 1193, 1180, 506,
	22046, -1000, 22046, -1000, 22046, 22046, 22046, -65, -74, 22046,
	22046, -1000, 445, 11118, 11118, 1919, 445, -87, 406, -1000,
	-1000, -1000, 1751, -1000, -95, -1000, -131, 17321, 1515, 22046,
	1566, -1000, -1000, 183, 11118, 11118, 30732, -99, -1000, 1095,
	1095, -1000, 28575, -1000, 30338, -1000, 29853, -1000, -1000, -1000,
	-1000, 893, -1000, 28546, -1000, -1000, -1000, -1000, 12138, 1306,
	179, 31108, 28518, -1000, -1000, 11118, -1000, -1000, -1000, -1000,
	1818, 924, -1000, 22046, -1000, 5335, 22046, 1292, 1059, -1000,
	-1000, 1169, 177, 12138, 22046, -100, 13134, 887, 13134, 1610,
	-3, 5335, 1610, 28490, 6002, -105, -1000, -107, -133, 57,
	-4, -134, 22046, -1000, 384, 18266, -1000, 1509, -1000, -1000,
	-1000, -1000, 22046, 1047, -1000, 1032, 11118, -1000, 31108, 1045,
	1045, -1000, 566, 565, 564, 561, -1000, -1000, -1000, 22046,
	30338, -155, -1000, -1000, 19841, 333, -1000, -1000, 176, -3,
	608, -139, 22046, -1000, -1000, 5662, 1095, 1095, -1000, -1000,
	55, 964, 1622, -1000, 735, 12138, 31108, -140, -1000, 28150,
	-144, -1000, 382, 22046, 1013, -1000, -1000, 22046, 1073, -1000,
	-1000, 11118, 30550, 170, 887, -146, 1255, 169, -1000, -1000,
	-1000, -1000, -1000, -1000, 1592, -29, -1000, -1000, 811, 1255,
	-1000, 887, 168, 18266, -1000, 1157, -1000, -1000, -1000, 30338,
	1587, -1000, -1000, 22046, 22046, 164, 146, -141, -1000, 1678,
	-1000, -1000, 11118, 732, -1000, 444, -1000, -1000, 927, 11118,
	735, -148, -1000, -1000, 1818, -1000, -1000, 1817, 119, -1000,
	-1000, 1425, 28122, 1133, 22046, 1255, 887, -1000, 22046, 1610,
	46, 22046, -1000, 1255, 13134, -1000, 1161, 485, 5335, -1000,
	-1000, 11118, 11118, 22046, 113, -37, 16356, -1000, 40, 11458,
	11458, -155, -1000, -1000, -1000, 22046, 1416, -1000, 980, 857,
	38, -1000, 1255, -162, -1000, -1000, 73, -1000, -167, -1000,
	-1000, 11118, -1000, -168, -181, -1000, -1000, 14, -153, -1000,
	-1000, -1000, 12807, 1042, 786, 29424, -1000, -194, 22046, -1000,
	983, 982, 726, -1000, -1000, -1000, -1000, -1000, -1000, 1133,
	887, 30338, -1000, -1000, 1814, -1000, 1720, -1000, -1000, -1000,
	-1000, -1000, 1017, -1000, -1000, 1531, -1000, 496, 1098, 1098,
	980, 1255, 10778, -1000, -1000, -1000, -1000, 1729, -1000, -1000,
	1127, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2206, 2203, 1407, 1716, 2192, 2189, 2183, 2182, 2181,
	2180, 2178, 2174, 2171, 2164, 2163, 2161, 2160, 2159, 2158,
	2154, 2152, 2151, 2149, 2147, 2146, 2145, 2144, 1713, 2142,
	2141, 2139, 2137, 2133, 2127, 1669, 2126, 1664, 2125, 2123,
	2121, 2118, 2116, 1645, 1615, 2115, 78, 99, 1598, 2114,
	2113, 1579, 2110, 2108, 2107, 2106, 2105, 2104, 122, 2103,
	2102, 2096, 2092, 2090, 2084, 2083, 142, 153, 2082, 1494,
	2081, 2080, 2079, 2078, 2076, 2075, 2072, 2070, 2068, 2067,
	2062, 2059, 2058, 2052, 2051, 2050, 2049, 2046, 155, 2045,
	2044, 1419, 1417, 2040, 2039, 20, 2038, 68, 2037, 24,
	129, 2327, 121, 2035, 2034, 2032, 2030, 34, 75, 89,
	2029, 80, 2028, 2027, 32, 26, 14, 18, 2026, 91,
	2024, 2023, 1050, 21, 2021, 2020, 128, 2019, 36, 17,
	1163, 148, 146, 106, 101, 2018, 2013, 2012, 2011, 43,
	2008, 2, 2001, 2000, 9, 48, 13, 1998, 46, 50,
	1997, 1996, 118, 1995, 65, 98, 1401, 102, 119, 344,
	1993, 71, 15, 67, 1992, 1991, 141, 27, 1986, 35,
	77, 138, 1985, 40, 152, 115, 73, 116, 114, 1983,
	1982, 1979, 87, 1975, 108, 59, 1974, 1973, 53, 1972,
	130, 132, 1970, 1969, 83, 1966, 113, 1965, 1963, 151,
	144, 104, 6, 44, 54, 11, 1397, 1395, 111, 56,
	45, 37, 1959, 1904, 1384, 1147, 29, 92, 55, 33,
	93, 51, 58, 139, 25, 1947, 1934, 109, 1932, 1928,
	1925, 1920, 1919, 90, 1918, 1916, 61, 137, 72, 23,
	39, 81, 28, 79, 149, 110, 147, 97, 1912, 82,
	120, 1909, 173, 1905, 1895, 1831, 105, 1893, 1892, 1891,
	1814, 1650, 1643, 727, 1889, 1888, 1639, 1014, 1887, 1886,
	70, 1885, 107, 103, 1883, 134, 127, 19, 1882, 112,
	100, 88, 1881, 95, 41, 0, 1218, 715, 1880, 94,
	47, 1879, 1878, 1877, 1876, 22, 1, 7, 4, 8,
	3, 74, 52, 1873, 1872, 124, 85, 64, 1871, 150,
	1870, 1868, 1867, 30, 1855, 16, 1854, 12, 1853, 1852,
	10, 5, 1850, 1846, 133, 1843, 84, 1842, 1683, 1841,
	145, 1839, 1838, 1485, 31, 96,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 7, 8, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 109,
	109, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 106, 106, 111, 111,
	111, 113, 113, 110, 110, 105, 105, 20, 56, 283,
	283, 284, 284, 94, 94, 98, 98, 95, 96, 96,
	97, 97, 27, 27, 27, 22, 22, 22, 23, 24,
	25, 28, 28, 28, 28, 28, 28, 35, 36, 36,
	36, 36, 36, 37, 37, 37, 37, 37, 42, 42,
	40, 40, 39, 39, 38, 38, 41, 41, 158, 158,
	157, 157, 160, 160, 43, 43, 46, 46, 46, 46,
	46, 47, 47, 47, 47, 47, 47, 47, 47, 251,
	251, 250, 45, 225, 225, 48, 183, 183, 49, 49,
	49, 49, 50, 57, 324, 324, 324, 328, 328, 329,
	329, 330, 330, 330, 330, 330, 330, 330, 326, 326,
	54, 54, 93, 61, 61, 61, 61, 61, 61, 63,
	65, 62, 62, 62, 64, 64, 66, 66, 66, 66,
	67, 67, 67, 67, 68, 68, 138, 138, 276, 275,
	275, 281, 281, 281, 136, 136, 136, 136, 136, 137,
	137, 137, 274, 274, 274, 274, 282, 282, 282, 282,
	282, 282, 280, 280, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 81, 81, 88, 88, 88, 88, 88, 88,
	70, 75, 75, 75, 71, 76, 77, 78, 78, 78,
	72, 72, 80, 80, 80, 79, 85, 85, 85, 85,
	82, 82, 82, 83, 83, 86, 86, 86, 73, 74,
	87, 84, 84, 84, 44, 325, 325, 327, 327, 52,
	31, 31, 32, 32, 139, 139, 140, 140, 204, 204,
	204, 204, 141, 141, 112, 112, 112, 203, 293, 293,
	294, 294, 294, 294, 294, 294, 295, 295, 295, 295,
	295, 295, 295, 291, 291, 292, 289, 289, 290, 290,
	290, 290, 331, 331, 202, 202, 144, 144, 298, 298,
	298, 298, 296, 296, 296, 296, 296, 299, 297, 300,
	300, 300, 300, 300, 237, 237, 237, 90, 33, 118,
	118, 34, 30, 30, 187, 187, 148, 148, 242, 242,
	242, 129, 129, 107, 107, 107, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 188, 188, 189,
	189, 53, 55, 60, 89, 89, 89, 21, 21, 26,
	26, 59, 333, 333, 125, 125, 125, 125, 126, 126,
	199, 199, 200, 200, 201, 201, 201, 120, 119, 121,
	121, 29, 29, 114, 114, 115, 115, 116, 116, 117,
	117, 334, 334, 51, 51, 92, 132, 132, 196, 196,
	196, 198, 198, 197, 197, 197, 173, 173, 173, 91,
	153, 153, 162, 162, 163, 163, 248, 164, 164, 58,
	58, 101, 101, 99, 99, 99, 99, 99, 99, 100,
	100, 102, 102, 102, 102, 102, 102, 102, 104, 306,
	306, 306, 309, 309, 305, 307, 307, 308, 308, 332,
	332, 174, 174, 174, 143, 142, 142, 146, 146, 145,
	147, 147, 241, 241, 241, 171, 171, 171, 171, 190,
	190, 191, 191, 192, 192, 193, 193, 193, 194, 194,
	195, 195, 170, 170, 221, 221, 103, 103, 152, 152,
	154, 154, 211, 211, 211, 212, 212, 210, 210, 210,
	210, 243, 243, 243, 243, 243, 243, 243, 322, 322,
	322, 323, 323, 240, 240, 244, 244, 244, 244, 244,
	244, 238, 238, 238, 238, 239, 239, 249, 249, 177,
	177, 177, 177, 175, 175, 176, 176, 245, 245, 245,
	245, 172, 172, 246, 246, 246, 205, 205, 252, 252,
	252, 270, 270, 151, 151, 151, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 254, 254, 254, 254, 256, 256, 256,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 269, 269,
	269, 269, 269, 257, 257, 264, 264, 265, 265, 266,
	267, 258, 258, 259, 259, 260, 261, 268, 268, 268,
	268, 272, 272, 262, 262, 262, 262, 262, 263, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 185, 185, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 215, 215, 215,
	215, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 301, 301, 301, 301, 301, 301, 301, 303,
	303, 304, 304, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 310, 310, 311, 311, 313, 313, 314, 314,
	315, 316, 316, 316, 317, 318, 318, 312, 312, 319,
	319, 319, 320, 320, 321, 321, 321, 321, 321, 227,
	227, 227, 228, 228, 229, 235, 235, 235, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 127, 127, 127, 127, 127, 159,
	159, 224, 224, 222, 222, 222, 226, 226, 178, 178,
	271, 271, 271, 271, 271, 271, 271, 179, 179, 179,
	186, 180, 180, 181, 181, 181, 181, 181, 181, 218,
	219, 182, 182, 182, 220, 220, 230, 234, 234, 233,
	232, 232, 231, 231, 208, 208, 209, 209, 207, 206,
	167, 167, 166, 166, 165, 165, 335, 335, 236, 236,
	168, 168, 169, 161, 161, 247, 247, 247, 247, 155,
	155, 134, 134, 156, 156, 130, 130, 133, 133, 131,
	131, 131, 131, 149, 149, 150, 150, 128, 128, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	273, 273, 273, 223, 122, 122, 122, 123, 123, 124,
	124, 278, 278, 278, 279, 279, 279, 279, 277, 277,
	277, 277, 277, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 1, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 6, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 4, 6,
	4, 6, 4, 6, 3, 5, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 2, 1, 1, 1, 1, 1, 3, 4,
	5, 3, 2, 6, 3, 4, 3, 3, 3, 3,
	1, 3, 3, 1, 2, 2, 1, 0, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 1, 1, 1, 1, 1, 2,
	3, 4, 4, 4, 4, 2, 4, 4, 4, 4,
	4, 4, 2, 3, 3, 2, 4, 5, 4, 5,
	2, 3, 3, 4, 2, 4, 3, 3, 4, 4,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 3,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 4, 3,
	0, 6, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 3, 2, 1, 1, 1, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 1, 4, 4, 4, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -27, -28, -49,
	-35, -36, -37, -48, -43, -50, -44, -51, -52, -45,
	-56, -55, -57, -60, -58, -53, -54, -61, -69, -89,
	-90, -91, -92, -5, -6, -7, -8, 34, -23, -24,
	-25, 67, -29, -30, -31, -32, -33, -34, 89, -308,
	93, -38, -39, -40, -42, -41, 104, 106, 124, 130,
	212, 218, 238, 240, 242, 249, -99, -101, 236, 237,
	-62, -63, -64, -65, -93, 260, -70, -71, -72, -73,
	-74, -75, -76, -77, -78, -79, -80, -81, -82, -83,
	-84, -85, -86, -87, -21, -26, -59, 300, -9, -10,
	-13, -12, -11, -16, -18, -15, -17, -19, -14, 47,
	69, -306, 97, -102, -100, 351, 309, 263, 35, 272,
	61, 100, 244, 23, 325, 332, 253, -103, -104, 317,
	281, 354, -324, -156, 281, 82, -131, -122, 344, 4,
	-285, -287, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 48, 55, 60, 61, 62, 64, 66, 67, 68,
	71, 72, 80, 81, 83, 85, 89, 91, 93, 96,
	97, 99, 104, 105, 106, 112, 113, 118, 120, 125,
	130, 131, 132, 133, 140, 143, 145, 138, 155, 156,
	157, 159, 160, 161, 164, 163, 168, 171, 174, 176,
	177, 178, 181, 179, 183, 184, 186, 185, 191, 193,
	194, 196, 199, 202, 205, 208, 209, 210, 211, 212,
	214, 216, 218, 220, 221, 222, 223, 224, 226, 227,
	229, 230, 231, 232, 233, 236, 234, 235, 237, 238,
	239, 240, 242, 244, 245, 247, 261, 262, 273, 249,
	250, 251, 252, 256, 254, 257, 258, 260, 263, 265,
	268, 271, 272, 274, 277, 275, 270, 280, 282, 283,
	284, 285, 286, 287, 288, 295, 296, 300, 301, 302,
	303, 306, 307, 308, 309, 311, 314, 315, 316, 321,
	326, 327, 328, 329, 330, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 51, 52, 53, 56, 84, 86,
	87, 103, 107, 108, 114, 115, 116, 126, 128, 134,
	135, 144, 146, 147, 148, 149, 150, 152, 166, 180,
	190, 192, 203, 207, 215, 217, 225, 246, 255, 266,
	267, 276, 278, 290, 291, 292, 297, 298, 313, 317,
	318, -130, -122, 82, -122, 218, 22, 91, 143, 308,
	307, 22, 214, 254, 283, 285, -122, -47, 351, -46,
	-4, -28, -37, -48, -43, -44, -69, -58, -35, -51,
	-91, -92, -328, 22, -329, -330, 69, 97, 124, 253,
	143, 91, 307, -277, 4, -285, -287, -286, -288, 58,
	70, 123, 142, 136, 154, 158, 167, 169, 182, 204,
	206, 243, 264, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 49, 50, 54, 57, 59, 65, 69,
	73, 74, 76, 75, 77, 78, 79, 88, 90, 92,
	94, 95, 98, 100, 102, 109, 110, 111, 119, 121,
	122, 124, 127, 129, 137, 139, 141, 151, 153, 162,
	165, 170, 172, 173, 187, 188, 189, 195, 197, 198,
	200, 201, 213, 219, 228, 241, 253, 259, 269, 279,
	281, 289, 293, 294, 299, 304, 305, 310, 312, 319,
	320, 322, 323, 324, 325, 156, -122, -324, 156, -328,
	-126, 249, -122, -126, -88, 257, 4, 22, 82, 181,
	259, 290, 171, 55, 246, 257, -67, 296, -66, 290,
	-276, -68, -157, 181, -122, -332, 281, 156, 222, 296,
	281, 310, 320, -187, 82, 305, -100, -102, -101, 320,
	281, 139, 82, 310, -145, -146, 304, 151, 102, 201,
	-99, -101, -306, -281, -274, -237, 9, 299, 109, 197,
	-280, 8, 343, -273, -279, 5, 7, 342, 4, -285,
	-287, -286, -88, 257, 34, 55, 22, 60, 83, 125,
	139, 140, 160, 65, 66, 221, 171, 157, 295, 161,
	258, 282, 296, 69, 311, 286, 105, -333, 296, 296,
	-333, -333, -125, 296, 293, 281, 139, 82, 320, -309,
	226, -305, -122, -309, -142, -143, 22, 94, 355, -169,
	351, -243, 349, -245, -130, -101, -244, 351, 198, -3,
	293, 355, -156, -149, -122, -207, -206, 353, 122, 351,
	-166, -167, -206, -207, -122, 22, 122, 153, 153, -246,
	-245, -130, -183, 351, -251, -250, -279, 317, 197, 355,
	-213, -215, 342, 343, 337, 187, 331, -227, -217, -230,
	103, 246, 351, -130, -216, 356, 9, -303, -101, 29,
	-228, -229, 49, -122, 7, 8, 5, 6, -128, -254,
	-223, -263, 299, 109, 189, -301, -302, 4, -285, -278,
	-255, -265, -259, -262, 152, 58, 74, 75, 78, 76,
	79, 259, 310, 50, 28, 107, 108, 207, 215, 278,
	297, 298, 134, 190, 135, 56, 126, 166, 96, 37,
	39, 41, 42, 51, 52, 84, 86, 87, 114, 115,
	116, 144, 146, 147, 148, 149, 150, 192, 225, 266,
	276, 291, 292, 318, -286, -266, -267, -260, -261, -268,
	-225, 351, 122, -213, 197, -122, -88, 330, 2, 261,
	351, -67, 53, 296, -200, -201, -119, -120, -121, 155,
	220, 224, 330, 293, 336, 122, -281, -138, 88, -160,
	353, -172, -245, -213, -213, -213, -157, 134, -122, -157,
	139, -122, 134, -145, -146, -158, 134, -157, -158, 134,
	-134, 134, -133, -130, -122, 134, -149, 134, -171, -190,
	-191, 170, 111, 195, -174, 22, 94, -174, -174, 44,
	352, 352, 8, 7, 7, -88, -283, -280, 9, 261,
	221, 258, 55, 122, -325, 197, 122, 122, 122, 122,
	122, 221, 258, 119, 295, 122, 155, 220, 273, 281,
	320, 122, 122, -199, -200, -199, 293, -126, -245, 134,
	-130, -133, 134, -122, -245, 134, 355, -309, -150, 351,
	-161, -247, -213, 344, -161, -169, -168, -236, -213, 88,
	70, -177, 158, 182, 123, 167, 243, 142, 7, -47,
	-210, 356, 351, 344, -240, 332, -101, -244, -243, -130,
	351, -283, -131, 355, -277, 344, 274, 352, -155, -130,
	-167, -246, -132, -130, -132, 260, -122, 30, -159, -213,
	352, 355, -324, -330, 10, 11, 57, 33, 342, 343,
	344, 345, 117, 346, 347, 340, 341, 339, 334, 335,
	336, 63, 175, 248, 13, 14, 15, 26, 200, 169,
	331, 136, 264, 337, 16, 17, 18, 154, 36, 137,
	-127, -135, -213, -213, -213, -213, -213, 206, -165, -208,
	349, -101, 351, -101, -213, -159, 7, -101, -222, 349,
	-231, -213, -166, 351, 5, 351, 5, -310, 326, 119,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 217, -272,
	321, -272, -272, -256, 351, -256, -257, 351, -256, 327,
	332, 351, 30, -224, -252, -253, -255, -264, -258, -262,
	-263, 40, 46, 45, 288, 180, 255, 267, 313, 38,
	196, 145, 144, 146, 147, 148, 149, 150, 266, 37,
	225, 115, 116, 114, 96, 87, 86, 192, 42, 41,
	-266, -267, -260, -261, 84, 291, 292, 152, 39, 52,
	51, 318, 276, -284, -283, -324, -66, -276, -159, 30,
	-200, 355, 168, -137, 174, 186, 131, 198, 328, -282,
	5, 4, -223, -237, 88, 171, -263, -275, 88, -281,
	-275, 88, 72, 353, -277, -111, 355, 48, 239, 351,
	-144, 187, -118, -307, 325, -144, 351, -123, 134, -122,
	-307, 187, -171, -111, 355, 103, -111, 103, -111, 355,
	103, 356, 103, 103, -191, -190, -192, -213, 22, -195,
	113, 183, -213, -215, -100, -100, -100, -147, -241, -213,
	219, 139, -157, 22, 262, -276, -327, 119, -324, -276,
	-276, -276, -276, -276, 257, -47, 119, -122, 168, -276,
	-276, 281, 139, 281, -126, -109, 234, -108, 21, 23,
	97, 315, 103, 270, 287, 250, 270, 287, 250, 234,
	103, 234, 234, 103, -305, 30, -149, -152, 355, 122,
	30, 4, -152, 355, 352, 158, 158, -243, -177, 158,
	-175, 204, -175, -175, -322, 351, 350, -240, -277, 349,
	357, -159, -239, -238, 30, -122, 202, 352, -130, -249,
	333, -122, 122, 352, 355, -205, 323, -196, -58, 351,
	88, 30, -196, -162, -163, -248, -164, -130, 351, -122,
	352, 355, -47, -250, 293, -270, -252, -269, 230, 231,
	229, 233, 232, -252, -277, 290, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, 169, 136,
	264, 36, 137, -213, 293, -213, -213, -213, -213, 179,
	187, 189, 299, 109, 306, 94, 193, -335, 279, 32,
	-220, -101, 351, -235, 27, 269, 22, -227, 246, 351,
	-208, -213, -209, -159, 352, 352, 355, -159, -226, 350,
	-222, -234, -233, 322, 352, -159, 319, 22, 94, 344,
	7, -184, 329, 178, 85, 132, 177, -185, 252, -311,
	112, 127, 351, 352, 352, 352, -213, -213, -178, -271,
	-159, 4, 329, 178, 85, 132, 177, 252, -178, -179,
	-213, -159, -180, -214, -215, 342, 343, 337, 351, 246,
	-181, -213, -159, -213, 43, 165, 294, -182, -213, 122,
	-159, -213, -213, -213, -159, -159, -159, 351, 7, 7,
	290, 290, 7, -46, 352, 355, -151, 29, 349, -184,
	351, -249, 355, 122, 352, 296, -201, -136, 224, 268,
	235, 256, 355, -277, -245, -139, -149, -140, -122, -204,
	-203, -291, -292, -289, 139, 305, 110, 65, -290, 54,
	219, 121, 30, 103, 211, 30, 197, 187, -114, 284,
	103, -157, -158, -158, -133, -134, -277, -122, -149, -193,
	-273, 351, 343, -194, 246, 247, 355, -107, 31, 92,
	159, -130, -326, -122, 257, -47, -130, -133, -130, 355,
	293, -188, 65, 59, -203, 134, 59, -289, -122, 305,
	-188, 65, -188, 65, 65, -245, 33, -58, 122, 33,
	-58, 122, 293, -133, 293, 293, -245, 351, 352, -205,
	-247, -154, -243, -277, -205, -236, -243, -243, -176, 312,
	197, 158, -243, -238, 352, -323, 7, -240, -239, 7,
	-212, -211, 120, 185, 352, -122, 351, -240, 352, -94,
	133, 193, 274, 122, -130, -173, 241, -213, -173, -198,
	197, -155, 317, -122, -173, -153, 355, 122, 336, -155,
	-213, -326, 330, -213, -213, 293, -335, 279, -220, -213,
	179, 189, 299, 109, 306, 94, 193, 122, 351, -214,
	-214, -159, -217, 351, -159, 350, 359, 352, -213, 350,
	350, 355, -232, -233, 98, -213, -146, 355, -145, -213,
	-159, -159, 352, 352, 293, 293, 293, 293, 351, -316,
	205, 351, 351, -213, 30, 355, 352, 122, 352, 352,
	-186, 213, 352, 10, 11, 342, 343, 344, 345, 117,
	346, 347, 340, 341, 339, 334, 335, 336, 63, 175,
	248, 13, 14, 15, 154, 137, -214, -214, -214, -159,
	351, 352, -218, -219, 122, 119, 30, -182, -182, -182,
	352, 122, -159, 355, 355, 355, 352, 352, 352, 7,
	352, 355, 352, 330, 330, 352, -252, 349, 350, 7,
	7, -97, 325, -283, -326, -119, 303, 62, 224, -281,
	352, 352, 355, -252, -123, 139, 351, -123, -122, 351,
	159, 159, -58, -157, 5, -58, -130, 103, -115, 99,
	-334, 336, -122, -111, -111, -111, -194, -213, -241, -130,
	356, 355, -249, -108, -130, -122, -122, 187, -203, 134,
	-113, 187, -122, -122, 134, -122, 134, -122, -122, -109,
	234, -58, 351, -58, 351, -122, 234, -122, -130, 234,
	-46, -170, 127, -249, 355, -170, -176, 351, -213, -243,
	350, 352, 355, -239, 350, 355, 358, 336, -240, 351,
	-149, -238, -97, 122, 280, 274, -161, 188, -173, 64,
	352, -205, -163, -154, -236, 352, -213, -213, -214, -214,
	122, 351, -213, -224, 26, 26, 352, -159, 352, 355,
	-209, -213, 352, -222, 100, -213, 289, 352, 319, -146,
	-146, -146, 5, 178, 132, 177, -185, 177, -185, -185,
	7, -317, -122, 351, 323, -145, 352, -270, -252, -213,
	-218, -213, -270, -252, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, 94, 187, 193, -214, 355, -159, 352,
	-219, -218, -213, -213, -252, 352, 352, 352, -159, -213,
	-213, -213, 352, 7, 7, 350, 352, 199, -141, 138,
	-204, -293, 351, -123, -148, -242, -122, -304, 351, -301,
	-302, -128, 351, -290, -213, 351, 351, 351, -144, 351,
	-122, -116, 164, -334, -280, -307, 198, 352, -107, -277,
	-122, 293, 293, 103, 187, 314, -106, 97, 260, -189,
	103, -111, 103, -111, 293, -188, 65, -159, -159, 293,
	293, 352, -221, 129, 44, -243, -221, -149, -210, 7,
	-211, -277, 349, -239, -149, 352, -284, 290, -197, 351,
	197, -58, -173, 336, 26, 26, -213, -224, 352, -213,
	-213, 352, -213, 350, -213, 5, -213, 352, 352, 352,
	352, -318, -122, -213, 352, 352, 352, -219, 122, 94,
	193, 351, -213, 352, 352, 355, 352, 352, 352, 350,
	351, 137, -294, 65, -295, 57, 110, 69, 187, 189,
	305, 219, 54, 88, 228, -148, 351, 352, 355, -129,
	-166, 57, -129, -213, 351, -149, 352, -148, -149, -139,
	30, -148, 197, -117, 163, -334, -280, -114, -107, -122,
	-122, -203, 103, 187, 88, 187, 88, 81, 301, -122,
	-122, -130, -122, -122, 352, 352, -122, -130, -313, 324,
	-213, -159, -313, 352, -240, 7, 352, -216, -128, -122,
	95, -149, 65, -169, -101, 351, -213, -213, 352, 352,
	-146, -312, 210, 352, -214, 122, 351, -224, 352, -213,
	-96, -95, 5, 208, -122, -277, -122, 110, 134, 189,
	159, 351, -214, -130, 352, -148, -202, -331, 68, 277,
	-242, -107, -277, -107, 352, -159, 352, 352, 352, 352,
	-58, 352, -130, -334, -280, -115, -203, 189, 189, -213,
	-252, -111, -111, 293, 293, 293, 293, -314, -315, -122,
	-239, 350, 351, 307, 188, 352, -122, 352, -146, 44,
	-214, -224, 352, 352, 355, 352, -98, 336, -130, -295,
	-123, 187, -213, -124, 351, -202, 352, -141, 351, -129,
	-146, 228, -141, -202, 351, -280, -116, -110, 57, -122,
	-122, 351, 351, 355, 30, -159, 260, -205, -319, 223,
	247, -159, 352, -95, 5, 351, 103, 352, -298, 176,
	-122, -141, -202, -149, -107, 352, -130, -141, -148, -117,
	-105, 312, -277, -159, -159, -315, -317, -146, -162, 352,
	-320, -321, 36, 302, 72, -213, -320, -149, 110, -296,
	-299, -297, 197, 123, 209, 265, 352, -141, 352, -144,
	352, -213, 352, 352, 352, -205, -321, 216, 118, 246,
	216, 118, 352, -122, -297, 197, -299, 197, 307, 91,
	-298, -202, 26, -112, 48, 239, -300, 184, 239, 48,
	260, -300, -296, -141, -321, 20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 34, 35, 36, 37, 0, 105, 106,
	107, 0, 111, 112, 113, 114, 115, 116, 0, 0,
	0, 123, 124, 125, 126, 127, 0, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 479, -2, 0, 0,
	193, 194, 195, 196, 197, 0, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 414, 415, 416, 510, 38, 39,
	40, 41, 42, 45, 46, 47, 48, 43, 44, 0,
	385, 507, 0, -2, 518, 0, 0, 0, 423, 0,
	423, 423, 427, 0, 0, 0, 516, 493, 494, 0,
	0, -2, 0, 174, 0, 1055, 983, 989, 990, 1014,
	1015, 1016, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 0, 985, 1055, 168, 1114, 170, 0, 0, 0,
	0, 118, 119, 120, 121, 122, 167, 144, 0, 151,
	152, 153, 154, 155, 156, 157, 158, 146, 147, 148,
	149, 150, 0, 177, 178, 179, 181, 182, 183, 184,
	185, 186, 187, 304, 1028, 1029, 1030, 1031, 1032, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 0, 164, 0, 0, 0,
	413, 1141, 429, 411, 190, 0, 264, 265, 266, 267,
	268, 0, -2, 1043, 1229, 1147, 202, 1168, 210, 1235,
	0, 213, 218, -2, 140, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 0, 384, -2, 489, 490, 0,
	0, 0, 0, 0, -2, 0, 513, 513, 513, 0,
	0, 490, 0, 192, 221, 222, 223, 232, 233, 234,
	235, 374, 0, 376, 242, 243, 1010, 0, 1024, 1025,
	1026, 1027, 262, 0, 0, 0, 265, 0, 275, 306,
	0, 0, 0, 0, 0, 282, 0, 285, 0, 0,
	290, 294, 0, 0, 300, 0, 0, 431, 422, 431,
	419, 420, 421, 424, 0, 0, 0, 0, 0, 499,
	1120, 502, 996, 500, 0, 0, 515, 514, 0, 546,
	0, 498, 508, 560, 597, 574, 565, 0, 0, 2,
	0, 0, 175, 176, 993, 991, 992, 0, 0, 0,
	986, 962, 960, 961, 169, 171, 0, 0, 0, 0,
	603, 597, 165, 0, 0, 159, 161, 1241, 0, 0,
	309, 705, 0, 0, 0, 0, 0, 0, 797, 799,
	1203, 1229, 0, 801, 802, 0, 804, 806, 807, 0,
	810, 811, 953, 985, 999, 1000, 1001, 1002, 0, 0,
	1005, 0, 1007, 1008, 1009, 853, 820, -2, -2, 997,
	633, 634, 635, 636, -2, 1243, 824, 826, 828, 830,
	831, 832, 833, 0, 1187, 1204, 1205, 1225, 1226, 1234,
	1238, 1239, 1211, 1222, 1212, 1199, 1209, 1220, 1061, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1023, 667, 668, 673, 674, 676,
	0, 0, 0, 412, 0, 428, 191, 269, 198, 0,
	0, 201, 1198, 1168, 204, 432, 434, 435, 436, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 141,
	0, 80, 601, 108, 109, 110, 357, 1211, -2, 357,
	1018, 506, 1211, -2, 0, 80, 1211, 138, 80, 1211,
	80, 1211, 981, 988, 134, 1211, 136, 1211, 485, 527,
	528, 0, 0, 0, 0, 511, 512, 0, 0, 0,
	481, 482, 375, 1012, 1011, 263, 270, 89, 90, 0,
	283, 291, 0, 0, 308, 0, 0, 0, 0, 0,
	0, 284, 292, 508, 0, 0, 0, 296, 297, 0,
	0, 0, 0, 417, 430, 418, 0, 426, 0, 1211,
	597, 0, 1211, 0, 0, 1211, 0, 501, 0, 0,
	549, 973, 977, 978, 549, 547, 0, 970, 968, 969,
	0, 0, 0, 0, 594, 594, 594, 592, 568, 0,
	574, 0, 0, 598, 586, 0, -2, 565, 0, 599,
	0, 588, 984, 0, 958, 959, 102, 0, 0, 979,
	963, 607, 0, 456, 0, 0, 604, 0, 0, 909,
	508, 0, 0, 180, 0, 0, 0, 0, 888, 889,
	890, 891, 892, 893, 896, 897, 894, 895, 898, 899,
	900, 0, 0, 0, 901, 902, 903, 0, 0, 905,
	0, 907, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 904, 710, 711, 712, 734, 735, 0, 798, 964,
	957, 800, 0, -2, 909, 0, 803, 808, 809, 0,
	0, 952, -2, 0, 1004, 0, 702, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 670,
	681, 678, 677, 654, 0, 653, 651, 0, 655, 0,
	0, 0, 508, 0, 911, 615, 616, 617, 618, 619,
	702, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 664, 0, 639, 639, 639, 656, 657,
	665, 666, 671, 672, 683, 684, 686, 688, 682, 682,
	682, 679, 680, 588, 91, 0, 199, 0, 0, 0,
	205, 0, 0, 437, 229, 230, 231, 439, 440, 211,
	236, 237, 238, 239, 240, 241, 0, 206, 208, 219,
	207, 209, 212, 0, 142, 377, 0, 78, 79, 315,
	0, 0, 378, 0, 505, 0, 0, 0, 1211, 1017,
	444, 0, 488, 128, 0, 0, 130, 0, 132, 0,
	0, 0, 0, 0, 525, 526, 529, 533, 534, 537,
	540, 541, 531, 705, 495, 496, 497, 519, 520, 395,
	0, 0, 271, 272, 273, 274, 276, 0, 305, 277,
	278, 279, 280, 281, 286, 288, 508, 293, 295, 298,
	299, 0, 0, 0, 425, 49, 408, 59, 0, 408,
	408, 0, 0, 0, 0, 55, 0, 0, 57, 0,
	0, 0, 0, 0, 503, 0, 0, 607, 0, 0,
	0, 976, 607, 0, 972, 0, 0, 0, 0, 0,
	589, 593, 590, 591, 0, 0, 574, 586, 557, 0,
	0, 0, 564, 585, 0, 584, 573, -2, 0, 94,
	0, 994, 0, 0, 0, 468, 0, 468, 458, 0,
	0, 0, 468, 471, 472, 474, 475, 0, 0, 605,
	166, 0, 145, 160, 0, 706, 611, 612, 658, 659,
	660, 661, 662, 707, 708, 0, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, -2, -2, -2, 726,
	727, 728, -2, -2, -2, 732, 733, -2, 906, 908,
	0, 967, 0, -2, 0, -2, -2, -2, -2, 746,
	0, 748, 751, 753, 755, 0, 0, 0, 0, 966,
	765, 944, 0, 0, 885, 886, 887, 750, 0, 0,
	965, 956, 0, 0, -2, 805, 0, 0, 0, 915,
	916, 951, 947, 0, 812, 518, 0, 0, 0, 0,
	0, 1013, 689, 690, 691, 692, 693, 694, 703, 863,
	0, 0, 0, 825, 827, 829, 0, 0, 0, 0,
	919, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	909, 929, 0, 0, 768, 0, 0, 0, 0, 1229,
	0, 909, 937, 0, 0, 0, 0, 0, 909, 0,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 163, 0, 608, 610, 0, 620,
	0, 101, 0, 0, 200, 0, 433, 438, 0, 226,
	0, 228, 0, 143, 602, 0, 0, 314, 993, 316,
	318, 319, 320, 321, 1018, 0, 1018, 0, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 452,
	0, 139, 80, 80, 982, 80, 987, 135, 137, 0,
	535, 0, 0, 532, 538, 539, 0, 522, 393, 394,
	0, 0, 307, 188, 287, 289, 301, 302, 588, 0,
	0, 0, 0, 407, 61, 1211, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	54, 0, 0, 0, 0, 0, 0, 508, 995, 543,
	974, 588, 550, 975, 543, 971, 576, 0, 578, 0,
	0, 0, 580, 0, 569, 0, 571, 586, 562, 0,
	0, 555, 0, 554, 574, 582, 0, 0, 600, 101,
	0, 0, 103, 0, 980, 117, 0, 606, 453, 468,
	0, 0, 460, 457, 455, 607, 0, 0, 0, 0,
	910, 172, 0, -2, -2, 0, 0, 0, 766, -2,
	747, 749, 752, 754, 756, 0, 0, 0, 0, 0,
	0, 0, 767, 0, 0, 954, 957, -2, 910, 913,
	914, 0, 0, 948, 0, 0, 0, 0, 517, 518,
	518, 518, 818, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 836, 0, 837, 838,
	0, 0, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 771, 772, 773, 0,
	0, 840, 935, 936, 0, 0, 0, 0, 0, 0,
	845, 0, 942, 0, 0, 0, 849, 850, 851, 0,
	637, 0, 663, 685, 687, 675, 912, 0, 613, 0,
	0, 88, 0, 92, 173, 203, 224, 225, 227, 220,
	323, 356, 0, 329, 0, 1018, 0, 0, 0, 0,
	0, 0, 312, 357, 379, 381, 0, 0, 448, 452,
	0, 451, 506, 129, 131, 133, 0, 0, 521, 395,
	0, 0, 303, 60, 397, 0, 0, 0, 63, 1211,
	71, 0, 410, 72, 1211, 80, 1211, 80, 73, 50,
	408, 51, 0, 52, 0, 405, 0, 396, 403, 0,
	0, 545, 0, 548, 0, 545, 577, 0, 596, 579,
	560, 570, 0, 567, 558, 0, 559, 0, 586, 0,
	0, 566, 87, 0, 0, 104, 466, 467, 454, 465,
	0, 468, 473, 470, 476, 0, 709, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 945, 0, 880, 0,
	0, 956, -2, 917, 946, 950, 0, 813, 0, 0,
	0, 0, 1006, 695, 696, 697, 698, 699, 700, 701,
	0, 861, 862, 866, 0, 0, 823, 0, 0, 918,
	928, 930, 769, 770, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, -2, -2, -2, 787, 788, 789,
	-2, -2, -2, 0, 0, 0, 931, 0, 0, 883,
	933, 934, 939, 940, 0, 842, 843, 844, 941, 0,
	0, 0, 669, 0, 0, 614, 621, 0, 310, 0,
	317, 327, 0, 0, 0, 386, 392, 392, 0, 821,
	822, 0, 0, 346, 0, 0, 0, 315, 0, 0,
	0, 450, 452, 0, 443, 444, 530, 536, 523, 395,
	189, 0, 0, 0, 0, 81, 65, 0, 0, 0,
	0, 69, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 504, 857, 0, 0, 551, 857, 0, 574, 572,
	556, 552, 0, 563, 0, 583, 93, 0, 0, 0,
	0, 459, 469, 0, 0, 0, -2, 0, 759, -2,
	-2, 879, 910, 955, 949, 1003, 518, 814, 816, 817,
	704, 868, 865, 0, 852, 834, 835, 927, 0, 0,
	0, 0, 910, 882, 841, 0, 847, 848, 638, 609,
	0, 0, 328, 0, 331, 0, 0, 0, 0, 337,
	338, 0, 0, 0, 0, 0, 0, 355, 0, 395,
	998, 0, 395, 0, 0, 0, 348, 0, 0, 0,
	0, 0, 0, 441, 452, 0, 445, 446, 524, 399,
	401, 62, 0, 0, 77, 0, 0, 409, 0, 80,
	80, 398, 0, 0, 0, 0, 406, 404, 491, 0,
	544, 542, 492, 595, 586, 0, 581, 587, 0, 0,
	0, 0, 0, 477, 478, 0, -2, -2, 760, 881,
	0, 518, 0, 854, -2, 0, 0, 0, 884, 0,
	0, 98, 96, 0, 0, 332, 333, 1018, 0, 336,
	339, 0, 341, 1020, 355, 0, 323, 0, 352, 353,
	387, 388, 391, 389, 392, 518, 345, 350, 0, 323,
	313, 355, 0, 0, 447, 448, 64, 66, 67, 76,
	84, 68, 74, 0, 0, 0, 0, 856, 858, 0,
	561, 553, 0, 0, 462, 607, 464, 815, 871, 0,
	-2, 0, 795, 846, 0, 100, 97, 0, 0, 330,
	334, 0, 0, 361, 0, 323, 355, 349, 0, 395,
	0, 0, 311, 323, 0, 449, 450, 86, 0, 400,
	402, 0, 0, 0, 0, 518, 0, 463, 0, 0,
	0, 867, 796, 99, 95, 0, 0, 340, 366, 0,
	0, 343, 323, 0, 390, 813, 357, 382, 0, 442,
	70, 0, 83, 0, 0, 859, 860, 0, 607, 864,
	869, 872, -2, 1171, 1052, 0, 870, 0, 0, 342,
	362, 363, 0, 358, 359, 360, 1019, 344, 354, 361,
	355, 85, 56, 58, 0, 461, 0, 874, 875, 876,
	877, 878, 326, 335, 364, 0, 365, 0, 0, 0,
	366, 323, 0, 322, 324, 325, 367, 0, 370, 371,
	0, 368, 351, 383, 873, 369, 372, 373,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:957
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:981
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:985
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1041
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1064
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1074
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = nil
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = DropCascade
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = DropRestrict
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = DropDefault
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1137
		{
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			return unimplemented(sqllex, "alter using")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1141
		{
		}
	case 87:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.str = ""
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1216
		{
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &CancelTransaction{ID: sqlDollar[3].union.expr()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1280
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{ /* SKIP DOC */
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{ /* SKIP DOC */
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{ /* SKIP DOC */
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1606
		{
			return unimplemented(sqllex, "set local")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			return unimplemented(sqllex, "set from current")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1693
		{
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = Low
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = Normal
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = High
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.str = "client_encoding"
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2005
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2009
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2114
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = DropDefault
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2128
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			return unimplemented(sqllex, "match full")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			return unimplemented(sqllex, "match partial")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2335
		{
			return unimplemented(sqllex, "match simple")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2336
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2343
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2346
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
			return unimplemented(sqllex, "no action")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2359
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			return unimplemented(sqllex, "action set null")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2361
		{
			return unimplemented(sqllex, "action set default")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = true
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = false
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2469
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2472
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = Ascending
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = Descending
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2513
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2515
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = true
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = false
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2549
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2608
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.str = ""
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.str = ""
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = ReadOnly
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = ReadWrite
		}
	case 441:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.str = ""
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2864
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3096
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3103
		{
			return unimplemented(sqllex, "cte")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3111
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = true
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = false
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = false
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = true
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3139
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3206
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &From{}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3353
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3371
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3398
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3415
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = nil
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = true
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = false
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.str = astFullJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.str = astLeftJoin
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.str = astRightJoin
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.str = astInnerJoin
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3597
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3598
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3684
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3697
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3723
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3795
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = nil
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3956
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3988
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4028
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = year
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = month
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = day
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = hour
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = minute
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = month
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = hour
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = minute
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = minute
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = nil
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = second
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4123
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4158
		{
			return unimplemented(sqllex, "at tz")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4392
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4618
		{
			return unimplemented(sqllex, "variadic")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4619
		{
			return unimplemented(sqllex, "variadic")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4642
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			return unimplemented(sqllex, "func_application")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4663
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			return unimplemented(sqllex, "current role")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			return unimplemented(sqllex, "current user")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			return unimplemented(sqllex, "session user")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			return unimplemented(sqllex, "user")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4720
		{
			return unimplemented(sqllex, "treat")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4764
		{
			return unimplemented(sqllex, "within group")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4765
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = Window(nil)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.str = ""
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4862
		{
			return unimplemented(sqllex, "frame range")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4863
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4864
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4868
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4874
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4875
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4876
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4877
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4878
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = Any
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = Some
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = All
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = Plus
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = Minus
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = Mult
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = Div
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = FloorDiv
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = Mod
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = Bitand
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = Bitor
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = Pow
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = Bitxor
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = LT
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = GT
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = EQ
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = LE
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = GE
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = NE
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = Like
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = NotLike
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = ILike
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = NotILike
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5242
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5243
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5361
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5405
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5441
		{
			return unimplemented(sqllex, "func const")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5450
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = DNull
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5477
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.str = ""
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
