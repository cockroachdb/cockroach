// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LEVEL = 57524
const LIKE = 57525
const LIMIT = 57526
const LOCAL = 57527
const LOCALTIME = 57528
const LOCALTIMESTAMP = 57529
const LOW = 57530
const LSHIFT = 57531
const MATCH = 57532
const MINUTE = 57533
const MONTH = 57534
const NAN = 57535
const NAME = 57536
const NAMES = 57537
const NATURAL = 57538
const NEXT = 57539
const NO = 57540
const NO_INDEX_JOIN = 57541
const NORMAL = 57542
const NOT = 57543
const NOTHING = 57544
const NULL = 57545
const NULLIF = 57546
const NULLS = 57547
const NUMERIC = 57548
const OF = 57549
const OFF = 57550
const OFFSET = 57551
const OID = 57552
const ON = 57553
const ONLY = 57554
const OPTIONS = 57555
const OR = 57556
const ORDER = 57557
const ORDINALITY = 57558
const OUT = 57559
const OUTER = 57560
const OVER = 57561
const OVERLAPS = 57562
const OVERLAY = 57563
const PARENT = 57564
const PARTIAL = 57565
const PARTITION = 57566
const PASSWORD = 57567
const PAUSE = 57568
const PLACING = 57569
const PLANS = 57570
const POSITION = 57571
const PRECEDING = 57572
const PRECISION = 57573
const PREPARE = 57574
const PRIMARY = 57575
const PRIORITY = 57576
const QUERIES = 57577
const QUERY = 57578
const RANGE = 57579
const READ = 57580
const REAL = 57581
const RECURSIVE = 57582
const REF = 57583
const REFERENCES = 57584
const REGCLASS = 57585
const REGPROC = 57586
const REGPROCEDURE = 57587
const REGNAMESPACE = 57588
const REGTYPE = 57589
const REMOVE_PATH = 57590
const RENAME = 57591
const REPEATABLE = 57592
const RELEASE = 57593
const RESET = 57594
const RESTORE = 57595
const RESTRICT = 57596
const RESUME = 57597
const RETURNING = 57598
const REVOKE = 57599
const RIGHT = 57600
const ROLLBACK = 57601
const ROLLUP = 57602
const ROW = 57603
const ROWS = 57604
const RSHIFT = 57605
const SAVEPOINT = 57606
const SCATTER = 57607
const SEARCH = 57608
const SECOND = 57609
const SELECT = 57610
const SEQUENCES = 57611
const SERIAL = 57612
const SERIALIZABLE = 57613
const SESSION = 57614
const SESSIONS = 57615
const SESSION_USER = 57616
const SET = 57617
const SETTING = 57618
const SETTINGS = 57619
const SHOW = 57620
const SIMILAR = 57621
const SIMPLE = 57622
const SMALLINT = 57623
const SMALLSERIAL = 57624
const SNAPSHOT = 57625
const SOME = 57626
const SPLIT = 57627
const SQL = 57628
const START = 57629
const STATUS = 57630
const STDIN = 57631
const STRICT = 57632
const STRING = 57633
const STORE = 57634
const STORING = 57635
const SUBSTRING = 57636
const SYMMETRIC = 57637
const SYSTEM = 57638
const TABLE = 57639
const TABLES = 57640
const TEMP = 57641
const TEMPLATE = 57642
const TEMPORARY = 57643
const TESTING_RANGES = 57644
const TESTING_RELOCATE = 57645
const TEXT = 57646
const THEN = 57647
const TIME = 57648
const TIMESTAMP = 57649
const TIMESTAMPTZ = 57650
const TO = 57651
const TRAILING = 57652
const TRACE = 57653
const TRANSACTION = 57654
const TREAT = 57655
const TRIM = 57656
const TRUE = 57657
const TRUNCATE = 57658
const TYPE = 57659
const UNBOUNDED = 57660
const UNCOMMITTED = 57661
const UNION = 57662
const UNIQUE = 57663
const UNKNOWN = 57664
const UPDATE = 57665
const UPSERT = 57666
const USE = 57667
const USER = 57668
const USERS = 57669
const USING = 57670
const UUID = 57671
const VALID = 57672
const VALIDATE = 57673
const VALUE = 57674
const VALUES = 57675
const VARCHAR = 57676
const VARIADIC = 57677
const VIEW = 57678
const VARYING = 57679
const WHEN = 57680
const WHERE = 57681
const WINDOW = 57682
const WITH = 57683
const WITHIN = 57684
const WITHOUT = 57685
const WRITE = 57686
const YEAR = 57687
const ZONE = 57688
const NOT_LA = 57689
const WITH_LA = 57690
const AS_LA = 57691
const CONTAINED_BY = 57692
const HAS_SOME_KEY = 57693
const HAS_ALL_KEYS = 57694
const POSTFIXOP = 57695
const UMINUS = 57696
const HELPTOKEN = 57697

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6634

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	375, 53,
	-2, 686,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	153, 538,
	-2, 0,
	-1, 62,
	96, 686,
	157, 686,
	323, 686,
	324, 686,
	-2, 0,
	-1, 72,
	107, 661,
	117, 661,
	165, 661,
	184, 661,
	209, 661,
	215, 661,
	320, 661,
	-2, 650,
	-1, 105,
	4, 688,
	20, 688,
	21, 688,
	23, 688,
	28, 688,
	33, 688,
	34, 688,
	35, 688,
	36, 688,
	37, 688,
	38, 688,
	39, 688,
	40, 688,
	41, 688,
	42, 688,
	44, 688,
	45, 688,
	46, 688,
	47, 688,
	48, 688,
	51, 688,
	52, 688,
	53, 688,
	55, 688,
	56, 688,
	60, 688,
	61, 688,
	62, 688,
	64, 688,
	65, 688,
	66, 688,
	67, 688,
	69, 688,
	71, 688,
	72, 688,
	75, 688,
	76, 688,
	77, 688,
	85, 688,
	86, 688,
	87, 688,
	88, 688,
	89, 688,
	90, 688,
	91, 688,
	92, 688,
	94, 688,
	96, 688,
	98, 688,
	101, 688,
	102, 688,
	104, 688,
	108, 688,
	109, 688,
	110, 688,
	111, 688,
	112, 688,
	113, 688,
	114, 688,
	122, 688,
	123, 688,
	124, 688,
	125, 688,
	126, 688,
	128, 688,
	130, 688,
	135, 688,
	136, 688,
	138, 688,
	141, 688,
	142, 688,
	145, 688,
	146, 688,
	147, 688,
	148, 688,
	151, 688,
	152, 688,
	154, 688,
	157, 688,
	158, 688,
	159, 688,
	160, 688,
	161, 688,
	162, 688,
	163, 688,
	164, 688,
	166, 688,
	169, 688,
	170, 688,
	171, 688,
	173, 688,
	174, 688,
	175, 688,
	177, 688,
	178, 688,
	180, 688,
	182, 688,
	185, 688,
	188, 688,
	190, 688,
	191, 688,
	192, 688,
	193, 688,
	194, 688,
	195, 688,
	197, 688,
	198, 688,
	199, 688,
	200, 688,
	204, 688,
	205, 688,
	206, 688,
	207, 688,
	208, 688,
	210, 688,
	212, 688,
	213, 688,
	216, 688,
	217, 688,
	219, 688,
	221, 688,
	222, 688,
	223, 688,
	224, 688,
	225, 688,
	226, 688,
	228, 688,
	229, 688,
	230, 688,
	231, 688,
	232, 688,
	234, 688,
	235, 688,
	236, 688,
	237, 688,
	238, 688,
	239, 688,
	240, 688,
	241, 688,
	243, 688,
	244, 688,
	245, 688,
	246, 688,
	247, 688,
	249, 688,
	250, 688,
	251, 688,
	252, 688,
	253, 688,
	254, 688,
	255, 688,
	257, 688,
	259, 688,
	260, 688,
	261, 688,
	262, 688,
	264, 688,
	265, 688,
	266, 688,
	267, 688,
	269, 688,
	270, 688,
	271, 688,
	272, 688,
	273, 688,
	275, 688,
	276, 688,
	277, 688,
	278, 688,
	280, 688,
	281, 688,
	282, 688,
	283, 688,
	285, 688,
	286, 688,
	287, 688,
	288, 688,
	289, 688,
	290, 688,
	291, 688,
	292, 688,
	293, 688,
	294, 688,
	296, 688,
	298, 688,
	299, 688,
	300, 688,
	301, 688,
	302, 688,
	303, 688,
	304, 688,
	306, 688,
	307, 688,
	308, 688,
	311, 688,
	312, 688,
	313, 688,
	314, 688,
	316, 688,
	317, 688,
	318, 688,
	319, 688,
	322, 688,
	323, 688,
	324, 688,
	325, 688,
	327, 688,
	329, 688,
	330, 688,
	331, 688,
	332, 688,
	333, 688,
	334, 688,
	337, 688,
	342, 688,
	343, 688,
	344, 688,
	345, 688,
	346, 688,
	-2, 0,
	-1, 121,
	107, 660,
	117, 660,
	165, 660,
	184, 660,
	209, 660,
	215, 660,
	320, 660,
	-2, 653,
	-1, 127,
	1, 587,
	169, 587,
	234, 587,
	238, 587,
	374, 587,
	375, 587,
	-2, 0,
	-1, 129,
	1, 587,
	374, 587,
	375, 587,
	-2, 0,
	-1, 130,
	1, 587,
	374, 587,
	375, 587,
	-2, 0,
	-1, 131,
	1, 591,
	374, 591,
	375, 591,
	-2, 0,
	-1, 138,
	4, 694,
	5, 694,
	6, 694,
	7, 694,
	8, 694,
	9, 694,
	20, 694,
	21, 694,
	23, 694,
	28, 694,
	29, 694,
	33, 694,
	34, 694,
	35, 694,
	36, 694,
	37, 694,
	38, 694,
	39, 694,
	40, 694,
	41, 694,
	42, 694,
	44, 694,
	45, 694,
	46, 694,
	47, 694,
	48, 694,
	49, 694,
	50, 694,
	51, 694,
	52, 694,
	53, 694,
	55, 694,
	56, 694,
	58, 694,
	60, 694,
	61, 694,
	62, 694,
	64, 694,
	65, 694,
	66, 694,
	67, 694,
	69, 694,
	71, 694,
	72, 694,
	74, 694,
	75, 694,
	76, 694,
	77, 694,
	79, 694,
	80, 694,
	81, 694,
	83, 694,
	84, 694,
	85, 694,
	86, 694,
	87, 694,
	88, 694,
	89, 694,
	90, 694,
	91, 694,
	92, 694,
	94, 694,
	96, 694,
	98, 694,
	101, 694,
	102, 694,
	104, 694,
	108, 694,
	109, 694,
	110, 694,
	111, 694,
	112, 694,
	113, 694,
	114, 694,
	115, 694,
	116, 694,
	122, 694,
	123, 694,
	124, 694,
	125, 694,
	126, 694,
	128, 694,
	130, 694,
	133, 694,
	135, 694,
	136, 694,
	138, 694,
	141, 694,
	142, 694,
	145, 694,
	146, 694,
	147, 694,
	148, 694,
	149, 694,
	151, 694,
	152, 694,
	154, 694,
	156, 694,
	157, 694,
	158, 694,
	159, 694,
	160, 694,
	161, 694,
	162, 694,
	163, 694,
	164, 694,
	166, 694,
	168, 694,
	169, 694,
	170, 694,
	171, 694,
	172, 694,
	173, 694,
	174, 694,
	175, 694,
	177, 694,
	178, 694,
	180, 694,
	181, 694,
	182, 694,
	183, 694,
	185, 694,
	188, 694,
	190, 694,
	191, 694,
	192, 694,
	193, 694,
	194, 694,
	195, 694,
	196, 694,
	197, 694,
	198, 694,
	199, 694,
	200, 694,
	201, 694,
	203, 694,
	204, 694,
	205, 694,
	206, 694,
	207, 694,
	208, 694,
	210, 694,
	213, 694,
	216, 694,
	217, 694,
	218, 694,
	219, 694,
	220, 694,
	221, 694,
	222, 694,
	223, 694,
	224, 694,
	225, 694,
	226, 694,
	228, 694,
	229, 694,
	230, 694,
	231, 694,
	232, 694,
	234, 694,
	235, 694,
	236, 694,
	237, 694,
	238, 694,
	239, 694,
	240, 694,
	241, 694,
	243, 694,
	244, 694,
	245, 694,
	246, 694,
	247, 694,
	249, 694,
	250, 694,
	251, 694,
	252, 694,
	253, 694,
	254, 694,
	255, 694,
	257, 694,
	258, 694,
	259, 694,
	260, 694,
	261, 694,
	262, 694,
	264, 694,
	265, 694,
	266, 694,
	267, 694,
	269, 694,
	270, 694,
	271, 694,
	272, 694,
	273, 694,
	274, 694,
	275, 694,
	276, 694,
	277, 694,
	278, 694,
	279, 694,
	280, 694,
	281, 694,
	282, 694,
	283, 694,
	285, 694,
	286, 694,
	287, 694,
	288, 694,
	289, 694,
	290, 694,
	291, 694,
	292, 694,
	293, 694,
	294, 694,
	296, 694,
	298, 694,
	299, 694,
	300, 694,
	301, 694,
	302, 694,
	303, 694,
	304, 694,
	306, 694,
	307, 694,
	308, 694,
	311, 694,
	312, 694,
	313, 694,
	314, 694,
	315, 694,
	316, 694,
	317, 694,
	318, 694,
	319, 694,
	322, 694,
	323, 694,
	324, 694,
	325, 694,
	326, 694,
	327, 694,
	329, 694,
	330, 694,
	331, 694,
	332, 694,
	333, 694,
	334, 694,
	337, 694,
	342, 694,
	343, 694,
	344, 694,
	345, 694,
	346, 694,
	347, 694,
	357, 694,
	362, 694,
	363, 694,
	364, 694,
	371, 694,
	377, 694,
	-2, 0,
	-1, 141,
	1, 53,
	375, 53,
	-2, 686,
	-1, 506,
	132, 1299,
	309, 1299,
	352, 1299,
	373, 1299,
	-2, 0,
	-1, 507,
	132, 1248,
	309, 1248,
	352, 1248,
	373, 1248,
	-2, 0,
	-1, 509,
	132, 1357,
	309, 1357,
	352, 1357,
	373, 1357,
	-2, 0,
	-1, 511,
	132, 1379,
	309, 1379,
	352, 1379,
	373, 1379,
	-2, 0,
	-1, 518,
	132, 1304,
	309, 1304,
	352, 1304,
	373, 1304,
	-2, 324,
	-1, 544,
	1, 402,
	370, 402,
	372, 402,
	374, 402,
	375, 402,
	-2, 0,
	-1, 545,
	1, 454,
	129, 454,
	370, 454,
	372, 454,
	374, 454,
	375, 454,
	-2, 0,
	-1, 551,
	1, 416,
	370, 416,
	372, 416,
	374, 416,
	375, 416,
	-2, 0,
	-1, 553,
	1, 420,
	370, 420,
	372, 420,
	374, 420,
	375, 420,
	-2, 0,
	-1, 556,
	1, 428,
	370, 428,
	372, 428,
	374, 428,
	375, 428,
	-2, 0,
	-1, 557,
	1, 433,
	370, 433,
	372, 433,
	374, 433,
	375, 433,
	-2, 0,
	-1, 560,
	1, 443,
	370, 443,
	372, 443,
	374, 443,
	375, 443,
	-2, 0,
	-1, 574,
	117, 696,
	184, 696,
	209, 696,
	-2, 656,
	-1, 577,
	117, 695,
	184, 695,
	209, 695,
	-2, 654,
	-1, 634,
	371, 1226,
	-2, 1219,
	-1, 635,
	371, 1227,
	-2, 1220,
	-1, 641,
	5, 873,
	371, 873,
	-2, 1431,
	-1, 666,
	5, 832,
	-2, 1400,
	-1, 667,
	5, 867,
	371, 867,
	-2, 1402,
	-1, 668,
	5, 842,
	-2, 1403,
	-1, 669,
	5, 841,
	-2, 1404,
	-1, 670,
	5, 867,
	371, 867,
	-2, 1407,
	-1, 671,
	5, 867,
	371, 867,
	-2, 1408,
	-1, 672,
	5, 868,
	-2, 1411,
	-1, 673,
	5, 824,
	-2, 1412,
	-1, 674,
	5, 824,
	-2, 1413,
	-1, 675,
	5, 849,
	-2, 1417,
	-1, 676,
	5, 834,
	-2, 1418,
	-1, 677,
	5, 835,
	-2, 1419,
	-1, 678,
	5, 825,
	-2, 1425,
	-1, 679,
	5, 826,
	-2, 1426,
	-1, 680,
	5, 827,
	-2, 1427,
	-1, 681,
	5, 828,
	-2, 1428,
	-1, 682,
	5, 829,
	-2, 1429,
	-1, 683,
	5, 830,
	-2, 1430,
	-1, 684,
	5, 824,
	-2, 1435,
	-1, 685,
	5, 833,
	-2, 1440,
	-1, 686,
	5, 831,
	-2, 1443,
	-1, 687,
	5, 865,
	371, 865,
	-2, 1445,
	-1, 688,
	5, 869,
	-2, 1448,
	-1, 689,
	5, 871,
	-2, 1449,
	-1, 690,
	5, 864,
	371, 864,
	-2, 1454,
	-1, 875,
	225, 684,
	-2, 531,
	-1, 879,
	211, 1223,
	-2, 0,
	-1, 914,
	1, 215,
	370, 215,
	372, 215,
	374, 215,
	375, 215,
	-2, 659,
	-1, 921,
	4, 1453,
	10, 1453,
	11, 1453,
	13, 1453,
	14, 1453,
	15, 1453,
	16, 1453,
	17, 1453,
	18, 1453,
	20, 1453,
	21, 1453,
	23, 1453,
	26, 1453,
	28, 1453,
	30, 1453,
	33, 1453,
	34, 1453,
	35, 1453,
	36, 1453,
	37, 1453,
	38, 1453,
	39, 1453,
	40, 1453,
	41, 1453,
	42, 1453,
	44, 1453,
	45, 1453,
	46, 1453,
	47, 1453,
	48, 1453,
	51, 1453,
	52, 1453,
	53, 1453,
	55, 1453,
	56, 1453,
	57, 1453,
	60, 1453,
	61, 1453,
	62, 1453,
	63, 1453,
	64, 1453,
	65, 1453,
	66, 1453,
	67, 1453,
	69, 1453,
	70, 1453,
	71, 1453,
	72, 1453,
	74, 1453,
	75, 1453,
	76, 1453,
	77, 1453,
	85, 1453,
	86, 1453,
	87, 1453,
	88, 1453,
	89, 1453,
	90, 1453,
	91, 1453,
	92, 1453,
	94, 1453,
	96, 1453,
	98, 1453,
	101, 1453,
	102, 1453,
	104, 1453,
	108, 1453,
	109, 1453,
	110, 1453,
	111, 1453,
	112, 1453,
	113, 1453,
	114, 1453,
	118, 1453,
	119, 1453,
	120, 1453,
	121, 1453,
	122, 1453,
	123, 1453,
	124, 1453,
	125, 1453,
	126, 1453,
	127, 1453,
	128, 1453,
	130, 1453,
	133, 1453,
	135, 1453,
	136, 1453,
	138, 1453,
	141, 1453,
	142, 1453,
	145, 1453,
	146, 1453,
	147, 1453,
	148, 1453,
	149, 1453,
	150, 1453,
	151, 1453,
	152, 1453,
	154, 1453,
	156, 1453,
	157, 1453,
	158, 1453,
	159, 1453,
	160, 1453,
	161, 1453,
	162, 1453,
	163, 1453,
	164, 1453,
	166, 1453,
	168, 1453,
	169, 1453,
	170, 1453,
	171, 1453,
	172, 1453,
	173, 1453,
	174, 1453,
	175, 1453,
	177, 1453,
	178, 1453,
	180, 1453,
	181, 1453,
	182, 1453,
	183, 1453,
	185, 1453,
	188, 1453,
	189, 1453,
	190, 1453,
	191, 1453,
	192, 1453,
	193, 1453,
	194, 1453,
	195, 1453,
	196, 1453,
	197, 1453,
	198, 1453,
	199, 1453,
	200, 1453,
	204, 1453,
	205, 1453,
	206, 1453,
	207, 1453,
	208, 1453,
	210, 1453,
	213, 1453,
	214, 1453,
	216, 1453,
	217, 1453,
	219, 1453,
	221, 1453,
	222, 1453,
	223, 1453,
	224, 1453,
	225, 1453,
	226, 1453,
	228, 1453,
	229, 1453,
	230, 1453,
	231, 1453,
	232, 1453,
	234, 1453,
	235, 1453,
	236, 1453,
	237, 1453,
	238, 1453,
	239, 1453,
	240, 1453,
	241, 1453,
	243, 1453,
	244, 1453,
	245, 1453,
	246, 1453,
	247, 1453,
	248, 1453,
	249, 1453,
	250, 1453,
	251, 1453,
	252, 1453,
	253, 1453,
	254, 1453,
	255, 1453,
	257, 1453,
	258, 1453,
	259, 1453,
	260, 1453,
	261, 1453,
	262, 1453,
	263, 1453,
	264, 1453,
	265, 1453,
	266, 1453,
	267, 1453,
	269, 1453,
	270, 1453,
	271, 1453,
	272, 1453,
	273, 1453,
	275, 1453,
	276, 1453,
	277, 1453,
	278, 1453,
	279, 1453,
	280, 1453,
	281, 1453,
	282, 1453,
	283, 1453,
	285, 1453,
	286, 1453,
	287, 1453,
	288, 1453,
	289, 1453,
	290, 1453,
	291, 1453,
	292, 1453,
	293, 1453,
	294, 1453,
	296, 1453,
	298, 1453,
	299, 1453,
	300, 1453,
	301, 1453,
	302, 1453,
	303, 1453,
	304, 1453,
	306, 1453,
	307, 1453,
	308, 1453,
	311, 1453,
	312, 1453,
	313, 1453,
	314, 1453,
	316, 1453,
	317, 1453,
	318, 1453,
	319, 1453,
	322, 1453,
	323, 1453,
	324, 1453,
	325, 1453,
	327, 1453,
	329, 1453,
	330, 1453,
	331, 1453,
	332, 1453,
	333, 1453,
	334, 1453,
	337, 1453,
	342, 1453,
	343, 1453,
	344, 1453,
	345, 1453,
	346, 1453,
	347, 1453,
	348, 1453,
	350, 1453,
	351, 1453,
	352, 1453,
	353, 1453,
	354, 1453,
	355, 1453,
	356, 1453,
	357, 1453,
	359, 1453,
	360, 1453,
	361, 1453,
	362, 1453,
	363, 1453,
	364, 1453,
	365, 1453,
	366, 1453,
	367, 1453,
	369, 1453,
	372, 1453,
	373, 1453,
	376, 1453,
	377, 1453,
	-2, 0,
	-1, 934,
	132, 1357,
	309, 1357,
	352, 1357,
	373, 1357,
	-2, 0,
	-1, 951,
	132, 1379,
	309, 1379,
	352, 1379,
	373, 1379,
	-2, 0,
	-1, 952,
	169, 599,
	234, 599,
	238, 599,
	-2, 312,
	-1, 1021,
	117, 695,
	184, 695,
	209, 695,
	-2, 657,
	-1, 1100,
	107, 661,
	117, 661,
	165, 661,
	184, 661,
	209, 661,
	215, 661,
	320, 661,
	-2, 1002,
	-1, 1110,
	371, 1203,
	-2, 1191,
	-1, 1128,
	372, 1115,
	-2, 0,
	-1, 1154,
	169, 599,
	234, 599,
	238, 599,
	-2, 594,
	-1, 1182,
	372, 1115,
	-2, 0,
	-1, 1186,
	107, 661,
	117, 661,
	165, 661,
	184, 661,
	209, 661,
	215, 661,
	320, 661,
	-2, 757,
	-1, 1326,
	169, 599,
	234, 599,
	238, 599,
	-2, 314,
	-1, 1424,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 908,
	-1, 1425,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 909,
	-1, 1426,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 910,
	-1, 1427,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 911,
	-1, 1428,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 912,
	-1, 1429,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 913,
	-1, 1430,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 914,
	-1, 1431,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 915,
	-1, 1440,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 924,
	-1, 1441,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 925,
	-1, 1442,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 926,
	-1, 1445,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 931,
	-1, 1451,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 933,
	-1, 1453,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 937,
	-1, 1454,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 938,
	-1, 1455,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 939,
	-1, 1456,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 940,
	-1, 1525,
	132, 1126,
	371, 1226,
	-2, 1219,
	-1, 1526,
	132, 1127,
	-2, 1396,
	-1, 1527,
	132, 1128,
	-2, 1303,
	-1, 1528,
	132, 1129,
	-2, 1266,
	-1, 1529,
	132, 1130,
	-2, 1283,
	-1, 1530,
	132, 1131,
	-2, 1302,
	-1, 1531,
	132, 1132,
	-2, 1354,
	-1, 1610,
	1, 758,
	74, 758,
	107, 758,
	117, 758,
	133, 758,
	137, 758,
	139, 758,
	156, 758,
	165, 758,
	172, 758,
	181, 758,
	184, 758,
	196, 758,
	209, 758,
	211, 758,
	215, 758,
	256, 758,
	258, 758,
	320, 758,
	328, 758,
	339, 758,
	340, 758,
	349, 758,
	370, 758,
	372, 758,
	374, 758,
	375, 758,
	376, 758,
	-2, 757,
	-1, 1753,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 932,
	-1, 1754,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 934,
	-1, 1759,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 935,
	-1, 1777,
	220, 1086,
	-2, 1088,
	-1, 2007,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 936,
	-1, 2012,
	168, 0,
	-2, 952,
	-1, 2021,
	220, 1087,
	-2, 1089,
	-1, 2063,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 979,
	-1, 2064,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 980,
	-1, 2065,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 981,
	-1, 2069,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 985,
	-1, 2070,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 986,
	-1, 2071,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 987,
	-1, 2203,
	168, 0,
	-2, 953,
	-1, 2206,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 956,
	-1, 2207,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 958,
	-1, 2327,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 957,
	-1, 2328,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 959,
	-1, 2335,
	168, 0,
	-2, 988,
	-1, 2411,
	168, 0,
	-2, 989,
	-1, 2488,
	36, 0,
	149, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 1399,
}

const sqlPrivate = 57344

const sqlLast = 42653

var sqlAct = [...]int{

	635, 2159, 2487, 2533, 2496, 2361, 1676, 2462, 2497, 1989,
	2498, 1226, 2040, 1684, 2416, 2486, 1482, 1320, 633, 2308,
	2274, 2169, 1268, 2260, 2193, 632, 693, 594, 1747, 578,
	972, 2126, 71, 2125, 739, 1656, 610, 2191, 1955, 2341,
	1321, 180, 1660, 869, 1655, 180, 2240, 1233, 1184, 1673,
	1893, 1843, 1180, 180, 1163, 766, 611, 1957, 1872, 1229,
	2185, 1605, 180, 1963, 1685, 1623, 1269, 180, 180, 1606,
	1659, 180, 2096, 1880, 180, 1614, 1106, 1398, 1842, 1788,
	1505, 403, 180, 1649, 625, 586, 120, 1481, 449, 1480,
	1403, 1731, 1351, 1743, 955, 1024, 1192, 1194, 1222, 1164,
	464, 25, 605, 1468, 1554, 1489, 1465, 1347, 446, 517,
	954, 904, 745, 1138, 1499, 1657, 901, 1142, 894, 1663,
	1592, 974, 915, 727, 1678, 748, 1171, 1579, 1521, 497,
	604, 121, 1095, 180, 180, 1025, 1350, 171, 1154, 627,
	1023, 180, 510, 1240, 891, 475, 176, 122, 120, 725,
	1153, 2275, 538, 1776, 1029, 1677, 583, 2110, 1246, 2529,
	2111, 1248, 1248, 1217, 1248, 1181, 2005, 180, 180, 180,
	180, 768, 582, 582, 2511, 180, 180, 746, 2273, 2508,
	2507, 2504, 2484, 1699, 1699, 1217, 1714, 2483, 1213, 2457,
	2452, 1714, 1972, 1707, 2322, 2448, 2440, 2413, 1681, 1217,
	2273, 1707, 577, 755, 759, 489, 765, 1973, 2391, 2388,
	2386, 857, 2273, 1217, 2273, 2372, 2371, 2349, 592, 1217,
	2273, 1217, 2346, 1699, 2329, 2296, 1217, 120, 1707, 1699,
	2294, 2272, 2253, 2205, 1699, 2273, 1217, 1707, 1650, 2184,
	2179, 1581, 25, 1654, 1654, 1813, 1814, 2106, 1831, 1832,
	1833, 2107, 575, 2458, 2016, 1983, 1944, 628, 1699, 1945,
	1217, 2202, 1869, 1860, 39, 2099, 1217, 1861, 574, 1858,
	1857, 1714, 1856, 1699, 1699, 40, 1699, 587, 1780, 753,
	757, 763, 1718, 729, 1781, 1650, 1699, 1502, 43, 2322,
	1706, 1813, 1814, 514, 1707, 1698, 1653, 1586, 1828, 1699,
	1654, 1585, 1261, 731, 2099, 732, 1262, 1580, 2000, 1612,
	2076, 2018, 1714, 1217, 49, 1945, 1746, 1729, 1329, 1158,
	138, 1484, 1040, 1041, 855, 1070, 1071, 1072, 1080, 1081,
	1082, 936, 861, 1699, 1787, 141, 933, 2276, 1073, 1503,
	932, 931, 138, 60, 930, 1043, 929, 928, 1084, 140,
	61, 927, 126, 62, 926, 925, 1813, 1814, 924, 1831,
	1832, 1833, 1819, 923, 1348, 922, 733, 1249, 1249, 1042,
	1249, 140, 2201, 138, 730, 1062, 570, 569, 568, 536,
	535, 534, 1059, 533, 532, 139, 64, 531, 1504, 1501,
	530, 529, 528, 132, 527, 526, 525, 524, 523, 522,
	133, 521, 140, 1834, 520, 1040, 1041, 139, 1819, 1828,
	505, 180, 504, 180, 180, 503, 180, 502, 501, 437,
	436, 180, 435, 123, 1829, 434, 1888, 180, 1043, 433,
	1065, 1066, 1067, 1068, 418, 585, 417, 409, 139, 1048,
	180, 180, 180, 180, 180, 123, 132, 408, 1518, 918,
	407, 1972, 1042, 133, 406, 399, 398, 164, 163, 162,
	161, 1077, 1085, 759, 1506, 160, 159, 65, 158, 157,
	1829, 180, 156, 1819, 155, 154, 1680, 153, 765, 908,
	1083, 583, 152, 1354, 180, 1580, 151, 1189, 1185, 1254,
	1247, 150, 1382, 124, 67, 1075, 68, 149, 1830, 148,
	180, 1063, 147, 146, 1040, 1041, 145, 144, 143, 138,
	180, 142, 1036, 1733, 1834, 1516, 470, 1514, 967, 101,
	873, 1512, 1048, 877, 2503, 2485, 1074, 1043, 2472, 2467,
	2408, 2389, 2239, 2315, 2235, 1829, 2231, 2230, 140, 893,
	2223, 918, 1500, 2222, 1830, 2221, 2217, 2216, 2215, 897,
	897, 1042, 2214, 1813, 1814, 2208, 868, 2190, 2090, 898,
	1069, 2085, 2084, 2083, 2026, 1947, 1943, 1900, 1712, 1265,
	916, 1896, 180, 1865, 139, 1064, 1862, 1850, 1841, 1812,
	1809, 970, 132, 1808, 1063, 1825, 1826, 1827, 1806, 133,
	1793, 1078, 1792, 937, 1824, 1822, 1823, 1815, 1816, 1817,
	1818, 1820, 1821, 1777, 1022, 1610, 40, 740, 759, 1830,
	1036, 965, 123, 1476, 1114, 1183, 1107, 1035, 1098, 43,
	1232, 1048, 1182, 2042, 866, 2475, 1102, 2443, 742, 2437,
	181, 2436, 2427, 2425, 691, 2403, 2402, 2401, 2358, 2337,
	2323, 2302, 583, 1815, 1816, 1817, 1818, 1820, 1821, 2293,
	952, 1709, 949, 861, 1021, 2279, 2228, 2167, 1064, 1076,
	2165, 2164, 1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079,
	1819, 1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050,
	2162, 2134, 2133, 126, 1020, 2114, 2102, 2011, 2232, 1933,
	1927, 1913, 968, 2314, 1912, 1987, 1825, 1826, 1827, 1040,
	1041, 138, 1898, 1868, 1840, 1824, 1822, 1823, 1815, 1816,
	1817, 1818, 1820, 1821, 1802, 1801, 1798, 64, 575, 1349,
	1742, 1773, 1043, 1477, 1768, 180, 1470, 180, 1741, 1143,
	140, 1146, 598, 1597, 574, 1032, 1033, 1566, 1510, 1225,
	741, 1037, 1040, 1041, 1161, 1150, 1042, 1136, 1135, 1134,
	180, 180, 1062, 1133, 1053, 1051, 1052, 1044, 1045, 1046,
	1047, 1049, 1050, 1132, 1131, 1043, 139, 1162, 1130, 1169,
	1129, 1128, 1110, 1127, 132, 1126, 1339, 1338, 1125, 1348,
	1345, 133, 583, 1913, 1140, 1141, 746, 1190, 1124, 1042,
	1167, 1886, 1144, 1123, 1122, 1121, 1120, 1119, 65, 1118,
	1111, 769, 1147, 1099, 123, 770, 1098, 1065, 1066, 1067,
	1068, 948, 940, 912, 2419, 2321, 1048, 2210, 1517, 2189,
	2109, 2105, 1779, 1598, 124, 67, 1107, 68, 1985, 1096,
	120, 1813, 1814, 1183, 1717, 1958, 2325, 2324, 2318, 964,
	138, 2112, 1974, 1148, 1650, 1185, 1018, 470, 1149, 1936,
	101, 1930, 1202, 1179, 1157, 918, 180, 1926, 1046, 1047,
	1049, 1050, 768, 867, 1864, 1342, 1155, 1266, 180, 140,
	692, 1335, 1863, 1752, 1574, 1187, 1159, 1716, 1063, 961,
	180, 1116, 1990, 1152, 2342, 1515, 180, 1513, 180, 1231,
	180, 1511, 1230, 1677, 180, 1215, 438, 2043, 411, 1490,
	1139, 1968, 2470, 1784, 1223, 139, 2121, 1817, 1818, 1820,
	1821, 1012, 1224, 132, 1703, 2447, 1463, 1218, 423, 2526,
	133, 2527, 759, 2287, 1241, 720, 1241, 1719, 2383, 1259,
	1997, 718, 1461, 2382, 2380, 180, 180, 1069, 1314, 2379,
	1237, 1539, 918, 123, 180, 2153, 2150, 180, 1004, 2118,
	1013, 1195, 1064, 1196, 716, 722, 1195, 1343, 1196, 2117,
	1502, 581, 1616, 1797, 713, 1324, 1796, 1308, 768, 1795,
	1794, 2145, 1755, 1702, 1040, 1041, 741, 180, 1645, 424,
	1113, 442, 180, 415, 1641, 1638, 1452, 180, 180, 1156,
	180, 1710, 180, 1624, 180, 1616, 180, 1043, 893, 854,
	2299, 1570, 1216, 1336, 1615, 1569, 1203, 180, 1413, 1211,
	1457, 640, 1503, 180, 180, 1195, 962, 1196, 1458, 580,
	1459, 1042, 1674, 1355, 1464, 1210, 1200, 1380, 572, 2157,
	1239, 2363, 1197, 1242, 2158, 620, 2446, 1197, 1467, 180,
	1467, 1813, 1814, 768, 1201, 1208, 1940, 441, 1053, 1051,
	1052, 1044, 1045, 1046, 1047, 1049, 1050, 1251, 1986, 963,
	1253, 1504, 1501, 1209, 1256, 1220, 484, 1308, 1308, 582,
	1627, 711, 2481, 1263, 1359, 998, 177, 949, 1039, 919,
	404, 1322, 1264, 920, 1474, 947, 1356, 120, 419, 1472,
	1326, 1048, 2518, 1243, 1506, 1379, 1197, 444, 1412, 1050,
	1352, 1340, 487, 177, 2136, 1183, 495, 1404, 1411, 500,
	1370, 1722, 1965, 999, 2541, 977, 1935, 519, 2036, 2430,
	1102, 1385, 1998, 1724, 1363, 2454, 2093, 1929, 1492, 1204,
	1137, 583, 1460, 1248, 1349, 1346, 583, 1506, 1490, 1462,
	400, 1524, 1524, 1537, 1725, 426, 425, 1557, 2526, 1669,
	2455, 1561, 1562, 1564, 1224, 2333, 1723, 180, 1819, 180,
	1384, 575, 180, 1383, 575, 575, 1744, 1745, 728, 728,
	695, 919, 1626, 180, 579, 920, 404, 1394, 1381, 1924,
	1395, 1396, 768, 2385, 1487, 180, 165, 1996, 1821, 180,
	1017, 440, 180, 410, 1506, 1485, 180, 1578, 1275, 1093,
	180, 2536, 404, 404, 761, 404, 180, 1151, 1800, 746,
	177, 858, 2143, 180, 768, 1500, 1549, 416, 180, 1344,
	443, 583, 412, 1966, 1475, 746, 180, 1478, 1611, 1599,
	439, 1449, 413, 180, 1327, 714, 759, 1600, 1617, 1378,
	1323, 714, 759, 1193, 180, 1613, 180, 1593, 180, 765,
	1609, 180, 2364, 180, 1532, 180, 180, 1003, 180, 180,
	1625, 1198, 724, 918, 715, 723, 1198, 180, 1965, 1647,
	1603, 168, 1628, 1630, 714, 1360, 2092, 2137, 1011, 2197,
	1688, 1364, 1576, 1365, 582, 1366, 1575, 1367, 2499, 1368,
	2517, 765, 765, 476, 1697, 1584, 1594, 1595, 1275, 1275,
	1590, 1757, 1635, 1466, 1206, 1765, 1374, 1376, 401, 2033,
	1643, 2268, 1633, 432, 1187, 1620, 481, 563, 1639, 953,
	2542, 1763, 477, 573, 1646, 1198, 1044, 1045, 1046, 1047,
	1049, 1050, 1402, 427, 2525, 591, 2094, 169, 2523, 1249,
	985, 1679, 2307, 1679, 1447, 1450, 1473, 120, 978, 1358,
	2269, 2534, 1038, 120, 478, 768, 1705, 1691, 2034, 946,
	897, 483, 897, 180, 1028, 1671, 1694, 1683, 943, 1692,
	1700, 1693, 1695, 1027, 402, 935, 1939, 480, 1446, 180,
	180, 180, 1704, 180, 916, 1701, 979, 2422, 1174, 976,
	1711, 2547, 2516, 1815, 1816, 1817, 1818, 1820, 1821, 1760,
	564, 958, 180, 2500, 1713, 2374, 2226, 2535, 2373, 1761,
	1730, 1177, 2356, 1766, 1334, 1735, 765, 1737, 2283, 759,
	1144, 170, 1147, 2072, 969, 1170, 563, 1591, 2537, 2120,
	1141, 1140, 1909, 694, 1506, 958, 1175, 1905, 1751, 1720,
	1026, 1672, 1207, 2286, 591, 1008, 519, 1238, 875, 519,
	2285, 880, 589, 1227, 563, 1390, 883, 120, 2264, 1170,
	2265, 1332, 404, 2032, 1894, 1028, 959, 2463, 1373, 1027,
	960, 1330, 591, 1333, 1448, 519, 519, 404, 905, 858,
	1734, 166, 2170, 2309, 1174, 919, 958, 1771, 479, 920,
	2267, 1736, 769, 2501, 1774, 1738, 770, 1740, 637, 2270,
	959, 2546, 2357, 583, 960, 590, 519, 1177, 565, 564,
	1009, 1790, 1791, 1176, 2227, 871, 870, 173, 1174, 519,
	167, 1762, 1786, 1172, 958, 2073, 2282, 1915, 1764, 1391,
	1883, 2074, 1175, 1895, 1914, 944, 1026, 564, 1750, 428,
	1588, 1177, 1587, 482, 890, 519, 888, 1173, 580, 986,
	2502, 959, 492, 486, 1758, 960, 1756, 1172, 2284, 879,
	2160, 1839, 1882, 2300, 1010, 2354, 1175, 1938, 1557, 1557,
	1557, 2241, 919, 1852, 1772, 2097, 920, 583, 2266, 1509,
	429, 1173, 180, 768, 2336, 3, 1870, 566, 180, 180,
	2225, 1876, 180, 1007, 1783, 2156, 2355, 180, 769, 996,
	180, 994, 770, 469, 33, 1844, 992, 404, 180, 1176,
	430, 2010, 431, 1877, 180, 180, 180, 565, 746, 567,
	180, 468, 32, 180, 746, 746, 1941, 1807, 746, 180,
	180, 180, 180, 180, 467, 29, 1767, 1715, 1875, 180,
	466, 77, 180, 1176, 1652, 565, 180, 1889, 1308, 1644,
	1902, 465, 76, 990, 988, 180, 1847, 1848, 1849, 1899,
	1589, 1890, 1906, 462, 21, 180, 1885, 180, 1637, 180,
	1016, 1015, 180, 769, 982, 1928, 180, 770, 886, 1881,
	1871, 180, 1845, 180, 941, 1308, 463, 22, 1910, 1866,
	180, 1942, 856, 859, 860, 1371, 566, 461, 27, 712,
	460, 19, 1362, 180, 918, 458, 18, 1117, 1953, 889,
	1901, 887, 1946, 583, 1948, 918, 180, 1223, 1002, 2495,
	491, 485, 588, 1006, 566, 1910, 1223, 751, 567, 995,
	1923, 993, 459, 17, 1308, 1925, 991, 1508, 2268, 1214,
	2460, 2261, 2257, 1932, 1982, 33, 2141, 1970, 2139, 2119,
	1954, 180, 2259, 1675, 1668, 1991, 567, 2263, 1258, 2023,
	500, 1393, 728, 32, 453, 14, 454, 15, 1949, 1257,
	1255, 1952, 1961, 1252, 1984, 1250, 29, 2269, 1950, 1967,
	2396, 1212, 77, 989, 987, 404, 404, 2004, 1975, 452,
	13, 2013, 1956, 76, 1981, 1308, 457, 11, 451, 9,
	2262, 180, 1205, 1199, 981, 21, 1030, 1992, 885, 1993,
	1994, 1307, 769, 2527, 1995, 2320, 770, 456, 7, 2028,
	2029, 2030, 1999, 2319, 2003, 455, 6, 1353, 22, 717,
	719, 1308, 1308, 2001, 450, 5, 736, 2186, 2398, 27,
	1308, 1308, 19, 1748, 769, 1001, 1632, 18, 770, 471,
	1616, 1976, 1977, 1616, 1978, 1979, 737, 2178, 2022, 1631,
	1540, 2017, 1629, 1648, 1640, 1636, 2019, 1867, 2086, 1572,
	1573, 1404, 2047, 1308, 17, 2432, 2035, 2037, 2038, 1275,
	1404, 2052, 2044, 1031, 180, 2264, 2276, 2265, 980, 2049,
	180, 177, 2410, 919, 2078, 2046, 2242, 920, 1034, 180,
	180, 1642, 1634, 404, 2051, 2459, 14, 2305, 15, 1749,
	1682, 1307, 1307, 2082, 1670, 1236, 1275, 2267, 1667, 493,
	746, 404, 2079, 404, 1577, 404, 2270, 1325, 2077, 1244,
	1267, 13, 2131, 738, 2115, 2532, 2545, 2348, 11, 2130,
	9, 1813, 1814, 2247, 2149, 2113, 180, 2155, 180, 2100,
	2152, 2108, 1274, 2101, 120, 180, 2098, 2095, 918, 7,
	1040, 1041, 2166, 1727, 1726, 1275, 2188, 6, 2091, 2116,
	519, 177, 2039, 180, 180, 1727, 5, 2123, 2180, 177,
	1988, 1891, 519, 2146, 1859, 769, 1728, 2151, 2172, 770,
	1571, 180, 1568, 2154, 1567, 2163, 1498, 1104, 2132, 2212,
	2144, 180, 2183, 1040, 1041, 2266, 768, 1040, 1041, 1688,
	746, 2147, 519, 2031, 2171, 2147, 2161, 519, 1951, 2173,
	2176, 2147, 177, 519, 2174, 519, 1275, 519, 2175, 519,
	1043, 519, 2182, 2199, 2204, 1114, 1112, 2181, 1308, 1014,
	1005, 1000, 1372, 180, 2187, 997, 983, 945, 519, 519,
	1042, 1328, 1274, 1274, 1042, 571, 2362, 474, 1361, 984,
	1887, 2200, 1275, 1275, 1596, 2453, 2218, 1799, 2415, 1874,
	2332, 1275, 1275, 1507, 519, 1878, 1879, 1115, 2140, 1884,
	2142, 53, 2128, 614, 2258, 2122, 1662, 1661, 771, 1337,
	636, 1523, 1405, 768, 180, 180, 710, 638, 1272, 639,
	180, 2224, 1273, 180, 1275, 1145, 626, 1270, 913, 1686,
	1341, 1310, 1471, 768, 180, 180, 1488, 1782, 180, 180,
	180, 1108, 606, 618, 617, 1486, 939, 1892, 1964, 2313,
	1389, 2238, 1739, 1386, 1960, 180, 746, 2138, 2245, 414,
	180, 1810, 180, 911, 180, 180, 180, 2244, 2236, 2277,
	2252, 180, 2131, 1546, 180, 1538, 1534, 918, 2246, 2130,
	1019, 2248, 2256, 1168, 1094, 180, 180, 2280, 2249, 1687,
	2281, 966, 918, 1971, 2298, 2251, 1708, 1160, 1397, 735,
	2290, 2131, 734, 1331, 1721, 1087, 2131, 2295, 2130, 1086,
	721, 2424, 500, 2130, 728, 957, 2301, 858, 1540, 1540,
	2303, 2306, 2311, 956, 1228, 1908, 2540, 2431, 404, 2135,
	2304, 1310, 1310, 769, 2469, 137, 134, 770, 2132, 136,
	1608, 135, 1937, 2312, 404, 80, 31, 404, 2310, 2326,
	30, 1621, 100, 99, 98, 404, 97, 96, 95, 94,
	93, 404, 92, 2331, 2317, 91, 90, 2132, 404, 89,
	88, 2338, 2132, 1651, 87, 1308, 86, 85, 180, 2344,
	180, 1658, 768, 180, 84, 83, 82, 515, 858, 1275,
	512, 180, 79, 78, 1540, 1540, 1540, 768, 28, 404,
	2316, 1690, 24, 519, 2345, 104, 519, 23, 519, 75,
	404, 404, 2131, 1696, 858, 2347, 2370, 74, 26, 2130,
	2350, 16, 1621, 2366, 10, 2365, 2368, 2360, 180, 20,
	2381, 918, 58, 59, 1308, 180, 57, 2352, 56, 1224,
	55, 2131, 12, 180, 180, 918, 918, 51, 2130, 50,
	48, 47, 2367, 46, 919, 45, 2387, 8, 920, 103,
	42, 2394, 41, 180, 2392, 919, 102, 2404, 180, 920,
	2397, 2395, 116, 2399, 2376, 180, 2384, 113, 2132, 115,
	2412, 2405, 2409, 2426, 1308, 2406, 2407, 2393, 112, 114,
	118, 2104, 117, 110, 1309, 2420, 108, 109, 111, 107,
	180, 180, 106, 119, 2147, 38, 180, 2132, 37, 36,
	2428, 2441, 2439, 35, 918, 34, 2, 2442, 1732, 180,
	2429, 1, 2421, 918, 918, 0, 2390, 1769, 1770, 2418,
	0, 2435, 0, 0, 404, 404, 404, 2445, 404, 0,
	2450, 2451, 2438, 0, 2444, 0, 180, 2456, 180, 1169,
	0, 180, 0, 768, 583, 0, 0, 404, 0, 1271,
	0, 2476, 0, 0, 2478, 0, 2477, 2377, 2378, 0,
	0, 0, 0, 2473, 2474, 2482, 0, 2466, 0, 180,
	0, 1874, 2131, 2465, 0, 2480, 0, 2468, 0, 2130,
	0, 2492, 2494, 2493, 1309, 1309, 180, 2479, 0, 2510,
	2505, 0, 180, 1836, 1837, 1838, 1275, 1260, 2471, 1540,
	1540, 2515, 1307, 2513, 2514, 2512, 180, 0, 0, 1040,
	1041, 0, 0, 0, 0, 0, 0, 2524, 2522, 0,
	0, 2509, 0, 2528, 0, 0, 0, 2530, 1688, 2531,
	0, 0, 1043, 0, 0, 0, 0, 0, 2132, 1307,
	0, 2538, 2543, 2539, 0, 2544, 0, 0, 0, 1271,
	1271, 0, 0, 0, 0, 1275, 1042, 0, 1540, 1540,
	1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
	1540, 1540, 1540, 1540, 1540, 1540, 1540, 0, 1540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 2243, 919, 0,
	0, 0, 920, 0, 0, 1275, 0, 0, 0, 0,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 1048, 404, 0, 0,
	0, 473, 0, 404, 404, 0, 0, 404, 0, 0,
	0, 0, 1608, 1274, 0, 1608, 769, 0, 0, 1307,
	770, 0, 0, 1897, 0, 0, 0, 0, 0, 404,
	1903, 1904, 0, 0, 0, 1621, 0, 0, 1911, 0,
	0, 0, 0, 0, 1916, 1917, 1919, 1921, 1922, 0,
	1274, 0, 476, 0, 404, 1307, 1307, 1931, 1063, 615,
	72, 1934, 0, 0, 1307, 1307, 0, 0, 0, 0,
	404, 1813, 1814, 0, 0, 481, 0, 0, 2008, 2009,
	1236, 477, 1236, 0, 519, 0, 0, 404, 0, 0,
	0, 1959, 0, 0, 0, 0, 404, 1307, 1969, 1274,
	0, 0, 0, 769, 0, 404, 0, 770, 472, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 1732, 0,
	0, 0, 72, 769, 1828, 0, 0, 770, 473, 0,
	0, 1732, 1064, 0, 0, 0, 480, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 0, 2075, 0, 0,
	1274, 0, 0, 0, 0, 0, 404, 919, 0, 0,
	0, 920, 1310, 0, 0, 0, 0, 0, 0, 476,
	576, 0, 919, 584, 0, 0, 920, 0, 1819, 1813,
	1814, 0, 0, 0, 0, 0, 1274, 1274, 0, 0,
	747, 72, 481, 0, 0, 1274, 1274, 0, 477, 1310,
	0, 0, 0, 0, 0, 0, 2041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1051,
	1052, 1044, 1045, 1046, 1047, 1049, 1050, 0, 1274, 0,
	478, 0, 0, 0, 0, 0, 0, 479, 0, 0,
	1829, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	1040, 1041, 1307, 480, 0, 0, 0, 0, 0, 862,
	864, 0, 769, 0, 0, 0, 770, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 769, 0, 0,
	0, 770, 0, 0, 0, 0, 0, 0, 0, 404,
	0, 0, 482, 0, 0, 1608, 1819, 1042, 0, 0,
	0, 0, 0, 0, 858, 1608, 0, 0, 0, 1310,
	0, 919, 0, 0, 1830, 920, 0, 0, 0, 2127,
	0, 0, 0, 0, 0, 919, 919, 0, 1540, 920,
	920, 0, 2148, 0, 0, 0, 2148, 1813, 1814, 0,
	0, 0, 2148, 938, 0, 1310, 1310, 1813, 1814, 942,
	0, 1621, 0, 1236, 1310, 1310, 0, 0, 1829, 0,
	2168, 0, 0, 0, 479, 0, 0, 1048, 0, 0,
	0, 0, 1540, 0, 0, 0, 596, 0, 404, 404,
	0, 0, 0, 0, 0, 1813, 1814, 1310, 1831, 1832,
	1833, 0, 0, 1274, 919, 0, 2194, 0, 920, 0,
	0, 2015, 0, 919, 919, 0, 2196, 920, 920, 0,
	1824, 1822, 1823, 1815, 1816, 1817, 1818, 1820, 1821, 482,
	0, 0, 0, 0, 0, 1309, 0, 0, 0, 1063,
	0, 0, 1830, 769, 0, 0, 0, 770, 1828, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 2219, 0,
	0, 0, 0, 0, 1819, 0, 0, 1088, 1089, 1090,
	1091, 1092, 1309, 0, 1819, 0, 0, 1101, 0, 1307,
	1040, 1041, 0, 0, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1271, 0, 0, 1043, 0, 0, 0, 0, 584, 2237,
	404, 0, 1819, 1064, 0, 404, 0, 0, 858, 0,
	0, 1309, 0, 0, 0, 0, 1829, 1042, 0, 1608,
	858, 0, 0, 2254, 2255, 1621, 1829, 1271, 1307, 1822,
	1823, 1815, 1816, 1817, 1818, 1820, 1821, 2335, 0, 2127,
	858, 0, 0, 1834, 0, 2288, 0, 2289, 0, 404,
	2291, 2292, 1310, 0, 0, 0, 404, 0, 0, 2297,
	0, 0, 0, 0, 1829, 0, 0, 0, 2127, 0,
	858, 1658, 1309, 2127, 0, 0, 1271, 0, 1307, 0,
	0, 2359, 0, 0, 0, 0, 0, 1048, 0, 0,
	1830, 0, 1165, 1165, 0, 0, 0, 0, 0, 596,
	1830, 1052, 1044, 1045, 1046, 1047, 1049, 1050, 1309, 1309,
	1274, 0, 0, 0, 0, 0, 0, 1309, 1309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 576, 1271, 1830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2411, 1063,
	1309, 0, 0, 0, 0, 0, 0, 1097, 0, 1100,
	0, 0, 0, 1621, 0, 2351, 1105, 0, 2353, 1274,
	0, 0, 0, 1271, 1271, 0, 404, 0, 0, 2127,
	0, 0, 1271, 1271, 0, 0, 1824, 1822, 1823, 1815,
	1816, 1817, 1818, 1820, 1821, 0, 0, 0, 1823, 1815,
	1816, 1817, 1818, 1820, 1821, 2148, 0, 0, 2127, 0,
	0, 0, 0, 404, 0, 1271, 0, 0, 0, 1274,
	858, 0, 0, 1064, 0, 1825, 1826, 1827, 2194, 2194,
	0, 0, 0, 0, 1824, 1822, 1823, 1815, 1816, 1817,
	1818, 1820, 1821, 0, 0, 0, 0, 0, 2417, 0,
	0, 0, 0, 1608, 0, 0, 0, 0, 0, 0,
	1236, 0, 0, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2433, 2434, 0, 0, 0,
	0, 404, 0, 0, 72, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 2449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 0, 0, 0, 0,
	596, 596, 1044, 1045, 1046, 1047, 1049, 1050, 1310, 0,
	0, 2464, 0, 858, 0, 0, 404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	1271, 858, 0, 0, 1387, 0, 1392, 404, 0, 0,
	0, 0, 1399, 0, 0, 0, 0, 0, 0, 0,
	0, 2521, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 0, 1451, 0, 1453, 1454, 1455,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 0, 1479, 0, 0, 0, 0, 0,
	0, 1101, 0, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	1519, 1520, 0, 0, 1536, 0, 1548, 1550, 1555, 1558,
	1559, 1560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1040, 1041, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0,
	0, 60, 1309, 0, 0, 0, 1073, 0, 61, 0,
	126, 62, 0, 1043, 0, 0, 1084, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 0, 0,
	0, 0, 0, 1062, 64, 0, 0, 0, 0, 576,
	1059, 0, 576, 576, 0, 0, 0, 0, 0, 0,
	0, 1309, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 1066,
	1067, 1068, 0, 0, 0, 1469, 0, 1048, 0, 0,
	0, 1309, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 0, 0, 1100, 0, 65, 1271, 0, 0, 1077,
	1085, 0, 1813, 1814, 0, 1831, 1832, 1833, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 124, 67, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 138, 0, 1063,
	0, 1369, 0, 0, 470, 0, 1271, 101, 0, 0,
	0, 0, 0, 0, 0, 1828, 0, 1178, 0, 0,
	0, 0, 747, 0, 1074, 0, 140, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 0, 0, 1186, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 43, 1069, 72,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 1064, 0, 0, 0, 133, 0, 1819,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 1078,
	72, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 1835, 0, 1753, 1754, 0, 0, 0, 0,
	1759, 72, 60, 447, 0, 0, 0, 72, 0, 61,
	1834, 126, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 0, 0, 0,
	0, 1829, 1778, 0, 0, 40, 0, 0, 1785, 0,
	0, 1789, 0, 0, 0, 64, 0, 1076, 43, 0,
	1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079, 1803, 1053,
	1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050, 0, 0,
	0, 0, 0, 0, 49, 0, 1855, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 1555,
	1555, 1555, 0, 60, 0, 1830, 0, 0, 0, 0,
	61, 72, 126, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 1165, 0,
	0, 0, 0, 596, 0, 1040, 1041, 0, 1070, 1071,
	1072, 1080, 1081, 1082, 0, 0, 64, 0, 0, 0,
	0, 1073, 124, 67, 0, 68, 0, 0, 1043, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 470, 0, 0, 101, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 1062, 0,
	1469, 0, 1825, 1826, 1827, 1059, 0, 140, 0, 0,
	0, 1824, 1822, 1823, 1815, 1816, 1817, 1818, 1820, 1821,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1962, 0, 65, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 1065, 1066, 1067, 1068, 1980, 133, 0,
	0, 0, 1048, 124, 67, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 596, 596, 0, 0, 0, 138,
	0, 123, 0, 0, 1077, 1085, 470, 596, 0, 101,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 2002,
	0, 0, 0, 1083, 1399, 0, 0, 0, 140, 0,
	2006, 0, 0, 2007, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 1063, 2012, 0, 0, 0, 0,
	0, 747, 0, 0, 2020, 0, 0, 747, 747, 0,
	0, 747, 2024, 0, 139, 1980, 0, 0, 0, 1074,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 2048, 0, 0, 0, 2050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 448, 1069, 72, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 2080, 2081, 0, 0, 0, 0, 0, 0,
	0, 2087, 2088, 2089, 1078, 0, 0, 72, 0, 0,
	72, 0, 0, 0, 0, 0, 39, 0, 0, 0,
	584, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	2103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2124, 0, 0, 0, 1813, 1814, 49, 1831, 1832, 1833,
	0, 0, 1076, 0, 0, 1054, 1055, 1061, 1060, 1056,
	1057, 1058, 1079, 0, 1053, 1051, 1052, 1044, 1045, 1046,
	1047, 1049, 1050, 0, 0, 60, 0, 0, 0, 0,
	0, 1854, 61, 0, 126, 62, 0, 0, 0, 0,
	0, 0, 0, 1165, 0, 0, 0, 1828, 0, 0,
	0, 0, 596, 1040, 1041, 0, 1070, 1071, 1072, 1080,
	1081, 1082, 0, 0, 0, 0, 0, 0, 64, 1073,
	0, 0, 0, 0, 0, 0, 1043, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 2203, 0,
	0, 0, 2206, 2207, 0, 0, 2209, 0, 0, 0,
	1042, 0, 0, 2211, 0, 2213, 1062, 0, 0, 0,
	0, 1819, 0, 1059, 0, 0, 0, 0, 0, 1040,
	1041, 2220, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 72, 0,
	0, 0, 1043, 0, 0, 1084, 0, 0, 0, 65,
	0, 0, 1834, 747, 2229, 0, 0, 0, 0, 0,
	0, 1065, 1066, 1067, 1068, 0, 1042, 0, 0, 0,
	1048, 0, 1062, 1829, 0, 124, 67, 0, 68, 1059,
	0, 0, 0, 0, 0, 1813, 1814, 0, 1831, 1832,
	1833, 138, 1077, 1085, 0, 0, 0, 0, 470, 0,
	0, 101, 0, 0, 0, 0, 0, 2278, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 1075, 1065, 1066, 1067,
	1068, 0, 1063, 0, 0, 0, 1048, 0, 1828, 0,
	0, 0, 0, 747, 0, 0, 0, 1830, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 1074, 1077, 1085,
	0, 0, 1813, 1814, 132, 1831, 1832, 1833, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 1083, 2014, 2327,
	2328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 1075, 0, 123, 0, 0, 0, 1063, 0,
	0, 0, 1819, 0, 0, 0, 1064, 0, 0, 0,
	2340, 0, 0, 0, 0, 1828, 0, 0, 0, 2343,
	0, 0, 1078, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1825, 1826, 1827, 0, 0, 0,
	0, 0, 0, 1824, 1822, 1823, 1815, 1816, 1817, 1818,
	1820, 1821, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 2375, 1829, 0, 0, 0, 0, 747,
	0, 0, 1064, 0, 0, 0, 0, 0, 0, 1819,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	1076, 0, 0, 1054, 1055, 1061, 1060, 1056, 1057, 1058,
	1079, 0, 1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049,
	1050, 0, 0, 0, 0, 0, 0, 0, 0, 1853,
	1834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2423, 0, 1830, 0,
	0, 1829, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 1054,
	1055, 1061, 1060, 1056, 1057, 1058, 1079, 0, 1053, 1051,
	1052, 1044, 1045, 1046, 1047, 1049, 1050, 0, 0, 596,
	0, 0, 0, 0, 0, 1805, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1825, 1826, 1827, 0, 0,
	0, 0, 2491, 2491, 1824, 1822, 1823, 1815, 1816, 1817,
	1818, 1820, 1821, 0, 0, 0, 0, 0, 2506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2491, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1825, 1826, 1827, 767, 0, 0, 0, 0,
	2491, 1824, 1822, 1823, 1815, 1816, 1817, 1818, 1820, 1821,
	0, 182, 183, 773, 184, 774, 775, 776, 777, 341,
	778, 779, 780, 781, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 782, 189, 348, 349, 190, 191,
	783, 784, 350, 351, 352, 785, 192, 353, 786, 772,
	787, 193, 194, 195, 0, 197, 198, 199, 196, 788,
	200, 1100, 201, 202, 789, 696, 203, 204, 205, 790,
	791, 793, 792, 794, 795, 796, 206, 207, 405, 208,
	354, 209, 355, 356, 797, 210, 798, 211, 799, 212,
	800, 801, 213, 214, 802, 215, 803, 0, 804, 357,
	216, 218, 217, 219, 358, 359, 805, 697, 806, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	807, 223, 808, 809, 698, 810, 224, 363, 811, 364,
	812, 0, 225, 226, 0, 0, 227, 228, 365, 366,
	700, 813, 367, 232, 814, 229, 815, 699, 230, 368,
	231, 369, 370, 371, 372, 373, 816, 374, 817, 701,
	233, 234, 235, 702, 236, 237, 238, 818, 240, 239,
	819, 375, 703, 241, 704, 820, 242, 821, 822, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 823, 824, 825, 377, 253, 378, 254, 255,
	826, 256, 827, 828, 257, 829, 830, 258, 379, 706,
	259, 707, 380, 260, 261, 262, 263, 264, 831, 265,
	381, 266, 382, 267, 832, 268, 269, 270, 271, 272,
	383, 273, 274, 833, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 834, 287, 708,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 835,
	299, 385, 298, 300, 301, 836, 302, 291, 292, 303,
	709, 304, 386, 387, 305, 837, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 838, 313, 839, 314,
	315, 316, 317, 318, 319, 320, 840, 390, 391, 392,
	841, 842, 321, 322, 393, 394, 843, 323, 324, 325,
	326, 844, 845, 327, 328, 329, 330, 846, 331, 847,
	395, 332, 333, 334, 396, 397, 848, 849, 335, 850,
	851, 852, 853, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 767, 0, 0, 0, 0, 0,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 1602,
	182, 183, 773, 184, 774, 775, 776, 777, 341, 778,
	779, 780, 781, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 782, 189, 348, 349, 190, 191, 783,
	784, 350, 351, 352, 785, 192, 353, 786, 772, 787,
	193, 194, 195, 0, 197, 198, 199, 196, 788, 200,
	0, 201, 202, 789, 696, 203, 204, 205, 790, 791,
	793, 792, 794, 795, 796, 206, 207, 405, 208, 354,
	209, 355, 356, 797, 210, 798, 211, 799, 212, 800,
	801, 213, 214, 802, 215, 803, 0, 804, 357, 216,
	218, 217, 219, 358, 359, 805, 697, 806, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 807,
	223, 808, 809, 698, 810, 224, 363, 811, 364, 812,
	0, 225, 226, 0, 0, 227, 228, 365, 366, 700,
	813, 367, 232, 814, 229, 815, 699, 230, 368, 231,
	369, 370, 371, 372, 373, 816, 374, 817, 701, 233,
	234, 235, 702, 236, 237, 238, 818, 240, 239, 819,
	375, 703, 241, 704, 820, 242, 821, 822, 243, 0,
	244, 245, 246, 248, 376, 247, 705, 249, 250, 252,
	251, 823, 824, 825, 377, 253, 378, 254, 255, 826,
	256, 827, 828, 257, 829, 830, 258, 379, 706, 259,
	707, 380, 260, 261, 262, 263, 264, 831, 265, 381,
	266, 382, 267, 832, 268, 269, 270, 271, 272, 383,
	273, 274, 833, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 834, 287, 708, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 835, 299,
	385, 298, 300, 301, 836, 302, 291, 292, 303, 709,
	304, 386, 387, 305, 837, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 838, 313, 839, 314, 315,
	316, 317, 318, 319, 320, 840, 390, 391, 392, 841,
	842, 321, 322, 393, 394, 843, 323, 324, 325, 326,
	844, 845, 327, 328, 329, 330, 846, 331, 847, 395,
	332, 333, 334, 396, 397, 848, 849, 335, 850, 851,
	852, 853, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 767, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2250,
	182, 183, 773, 184, 774, 775, 776, 777, 341, 778,
	779, 780, 781, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 782, 189, 348, 349, 190, 191, 783,
	784, 350, 351, 352, 785, 192, 353, 786, 772, 787,
	193, 194, 195, 0, 197, 198, 199, 196, 788, 200,
	0, 201, 202, 789, 696, 203, 204, 205, 790, 791,
	793, 792, 794, 795, 796, 206, 207, 405, 208, 354,
	209, 355, 356, 797, 210, 798, 211, 799, 212, 800,
	801, 213, 214, 802, 215, 803, 0, 804, 357, 216,
	218, 217, 219, 358, 359, 805, 697, 806, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 807,
	223, 808, 809, 698, 810, 224, 363, 811, 364, 812,
	0, 225, 226, 0, 0, 227, 228, 365, 366, 700,
	813, 367, 232, 814, 229, 815, 699, 230, 368, 231,
	369, 370, 371, 372, 373, 816, 374, 817, 701, 233,
	234, 235, 702, 236, 237, 238, 818, 240, 239, 819,
	375, 703, 241, 704, 820, 242, 821, 822, 243, 0,
	244, 245, 246, 248, 376, 247, 705, 249, 250, 252,
	251, 823, 824, 825, 377, 253, 378, 254, 255, 826,
	256, 827, 828, 257, 829, 830, 258, 379, 706, 259,
	707, 380, 260, 261, 262, 263, 264, 831, 265, 381,
	266, 382, 267, 832, 268, 269, 270, 271, 272, 383,
	273, 274, 833, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 834, 287, 708, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 835, 299,
	385, 298, 300, 301, 836, 302, 291, 292, 303, 709,
	304, 386, 387, 305, 837, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 838, 313, 839, 314, 315,
	316, 317, 318, 319, 320, 840, 390, 391, 392, 841,
	842, 321, 322, 393, 394, 843, 323, 324, 325, 326,
	844, 845, 327, 328, 329, 330, 846, 331, 847, 395,
	332, 333, 334, 396, 397, 848, 849, 335, 850, 851,
	852, 853, 336, 337, 338, 339, 340, 0, 0, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1219, 182, 183, 773, 184, 774,
	775, 776, 777, 341, 778, 779, 780, 781, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 782, 189,
	348, 349, 190, 191, 783, 784, 350, 351, 352, 785,
	192, 353, 786, 772, 787, 193, 194, 195, 0, 197,
	198, 199, 196, 788, 200, 0, 201, 202, 789, 696,
	203, 204, 205, 790, 791, 793, 792, 794, 795, 796,
	206, 207, 405, 208, 354, 209, 355, 356, 797, 210,
	798, 211, 799, 212, 800, 801, 213, 214, 802, 215,
	803, 0, 804, 357, 216, 218, 217, 219, 358, 359,
	805, 697, 806, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 807, 223, 808, 809, 698, 810,
	224, 363, 811, 364, 812, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 700, 813, 367, 232, 814, 229,
	815, 699, 230, 368, 231, 369, 370, 371, 372, 373,
	816, 374, 817, 701, 233, 234, 235, 702, 236, 237,
	238, 818, 240, 239, 819, 375, 703, 241, 704, 820,
	242, 821, 822, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 823, 824, 825, 377,
	253, 378, 254, 255, 826, 256, 827, 828, 257, 829,
	830, 258, 379, 706, 259, 707, 380, 260, 261, 262,
	263, 264, 831, 265, 381, 266, 382, 267, 832, 268,
	269, 270, 271, 272, 383, 273, 274, 833, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 834, 287, 708, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 835, 299, 385, 298, 300, 301, 836,
	302, 291, 292, 303, 709, 304, 386, 387, 305, 837,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	838, 313, 839, 314, 315, 316, 317, 318, 319, 320,
	840, 390, 391, 392, 841, 842, 321, 322, 393, 394,
	843, 323, 324, 325, 326, 844, 845, 327, 328, 329,
	330, 846, 331, 847, 395, 332, 333, 334, 396, 397,
	848, 849, 335, 850, 851, 852, 853, 336, 337, 338,
	339, 340, 1497, 0, 634, 623, 624, 621, 622, 613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 1494, 184, 0, 0, 0, 0, 651, 616,
	0, 0, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 696, 203, 204, 205, 0, 643,
	644, 646, 0, 645, 647, 206, 207, 405, 208, 672,
	209, 673, 674, 0, 210, 0, 211, 0, 212, 1495,
	0, 665, 214, 0, 215, 0, 0, 0, 607, 216,
	218, 217, 219, 652, 653, 630, 697, 0, 0, 0,
	0, 0, 220, 221, 675, 676, 677, 0, 222, 0,
	223, 0, 0, 698, 0, 224, 663, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 659, 661, 700,
	0, 367, 232, 0, 229, 0, 699, 230, 678, 231,
	679, 680, 681, 682, 683, 0, 641, 0, 701, 233,
	234, 235, 702, 236, 237, 238, 0, 240, 239, 0,
	664, 703, 241, 704, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 705, 249, 250, 252,
	251, 602, 0, 631, 660, 253, 684, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 706, 259,
	707, 654, 260, 261, 262, 263, 264, 0, 265, 655,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 685,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 608, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 648, 302, 291, 292, 303, 709,
	304, 686, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 687, 309, 310, 656, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 688, 689, 0,
	0, 321, 322, 657, 658, 629, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 649, 331, 0, 395,
	332, 333, 334, 396, 690, 1493, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 603, 0, 634,
	623, 624, 621, 622, 613, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 1496, 182, 183, 0, 184, 0,
	0, 609, 1491, 651, 616, 0, 0, 612, 185, 186,
	187, 342, 666, 344, 667, 188, 668, 669, 0, 189,
	348, 349, 190, 191, 619, 650, 670, 671, 352, 0,
	192, 662, 0, 642, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 696,
	203, 204, 205, 0, 643, 644, 646, 0, 645, 647,
	206, 207, 405, 208, 672, 209, 673, 674, 597, 210,
	0, 211, 0, 212, 0, 0, 665, 214, 0, 215,
	0, 0, 0, 607, 216, 218, 217, 219, 652, 653,
	630, 697, 0, 0, 0, 0, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 608, 290, 0, 294,
	295, 296, 297, 138, 299, 385, 298, 300, 301, 648,
	302, 291, 292, 303, 709, 304, 686, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 687, 309, 310, 656,
	0, 313, 140, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 688, 689, 0, 0, 321, 322, 657, 658,
	629, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 649, 331, 0, 395, 332, 333, 334, 921, 690,
	0, 0, 335, 0, 0, 0, 132, 336, 337, 338,
	339, 340, 603, 133, 585, 0, 634, 623, 624, 621,
	622, 613, 601, 0, 0, 0, 0, 599, 600, 0,
	0, 0, 182, 183, 0, 184, 1103, 0, 0, 0,
	651, 616, 612, 0, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 205,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	607, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	0, 0, 0, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 602, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	138, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 140,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 921, 690, 0, 0, 335,
	0, 0, 0, 132, 336, 337, 338, 339, 340, 603,
	133, 634, 623, 624, 621, 622, 613, 0, 0, 601,
	0, 0, 0, 0, 599, 600, 0, 182, 183, 0,
	184, 0, 0, 1103, 0, 651, 616, 0, 0, 612,
	185, 186, 187, 342, 666, 344, 667, 188, 668, 669,
	0, 189, 348, 349, 190, 191, 619, 650, 670, 671,
	352, 0, 192, 662, 0, 642, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 0, 0, 0, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 659, 661, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 602, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 608, 290,
	0, 294, 295, 296, 297, 138, 299, 385, 298, 300,
	301, 648, 302, 291, 292, 303, 709, 304, 686, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 687, 309,
	310, 656, 0, 313, 140, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 688, 689, 0, 0, 321, 322,
	657, 658, 629, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 649, 331, 0, 395, 332, 333, 334,
	921, 690, 0, 0, 335, 0, 0, 0, 132, 336,
	337, 338, 339, 340, 603, 133, 634, 623, 624, 621,
	622, 613, 0, 0, 601, 0, 0, 0, 0, 599,
	600, 0, 182, 183, 0, 184, 0, 0, 1103, 0,
	651, 616, 0, 0, 612, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 1551, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 205,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	607, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	0, 0, 0, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 1556, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 1552, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 602, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 1553, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	593, 0, 634, 623, 624, 621, 622, 613, 0, 601,
	0, 0, 0, 0, 599, 600, 0, 0, 182, 183,
	0, 184, 0, 609, 0, 0, 651, 616, 0, 612,
	0, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 597, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 595,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 0, 634, 623, 624,
	621, 622, 613, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 182, 183, 0, 184, 0, 0, 609,
	0, 651, 616, 0, 0, 612, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 2177, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 0, 634, 623, 624, 621, 622, 613, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 1166, 182, 183,
	0, 184, 0, 0, 609, 0, 651, 616, 0, 0,
	612, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 1401, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 1400, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 0, 634, 623, 624,
	621, 622, 613, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 182, 183, 0, 184, 0, 0, 609,
	0, 651, 616, 0, 0, 612, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 597, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 595, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 0, 634, 623, 624, 621, 622, 613, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 182, 183,
	0, 184, 0, 0, 609, 0, 651, 616, 0, 0,
	612, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 597, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 0, 634, 623, 624,
	621, 622, 613, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 182, 183, 0, 184, 0, 0, 609,
	0, 651, 616, 0, 0, 612, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 2027, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 0, 634, 623, 624, 621, 622, 613, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 182, 183,
	0, 184, 0, 0, 609, 0, 651, 616, 0, 0,
	612, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 0, 634, 623, 624,
	621, 622, 613, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 1166, 182, 183, 0, 184, 0, 0, 609,
	0, 651, 616, 0, 0, 612, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 1556, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 1604, 0, 634, 623, 624, 621, 622, 613, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 0, 182,
	183, 0, 184, 0, 609, 0, 0, 651, 616, 0,
	612, 0, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 619, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 0, 0, 0,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 659, 661, 700, 0,
	367, 232, 0, 229, 0, 699, 230, 678, 231, 679,
	680, 681, 682, 683, 0, 641, 0, 701, 233, 234,
	235, 702, 236, 237, 238, 0, 240, 239, 0, 664,
	703, 241, 704, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	602, 0, 631, 660, 253, 684, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 706, 259, 707,
	654, 260, 261, 262, 263, 264, 0, 265, 655, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 685, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	608, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 648, 302, 291, 292, 303, 709, 304,
	686, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	687, 309, 310, 656, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 688, 689, 0, 0,
	321, 322, 657, 658, 629, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 649, 331, 0, 395, 332,
	333, 334, 396, 690, 0, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 603, 1565, 0, 634,
	623, 624, 621, 622, 613, 0, 601, 0, 0, 0,
	0, 599, 600, 0, 0, 182, 183, 0, 184, 0,
	609, 0, 0, 651, 616, 0, 612, 0, 185, 186,
	187, 342, 666, 344, 667, 188, 668, 669, 0, 189,
	348, 349, 190, 191, 619, 650, 670, 671, 352, 0,
	192, 662, 0, 642, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 696,
	203, 204, 205, 0, 643, 644, 646, 0, 645, 647,
	206, 207, 405, 208, 672, 209, 673, 674, 0, 210,
	0, 211, 0, 212, 0, 0, 665, 214, 0, 215,
	0, 0, 0, 607, 216, 218, 217, 219, 652, 653,
	630, 697, 0, 0, 0, 0, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 608, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 648,
	302, 291, 292, 303, 709, 304, 686, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 687, 309, 310, 656,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 688, 689, 0, 0, 321, 322, 657, 658,
	629, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 649, 331, 0, 395, 332, 333, 334, 396, 690,
	0, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 603, 1563, 0, 634, 623, 624, 621, 622,
	613, 0, 601, 0, 0, 0, 0, 599, 600, 0,
	0, 182, 183, 0, 184, 0, 609, 0, 0, 651,
	616, 0, 612, 0, 185, 186, 187, 342, 666, 344,
	667, 188, 668, 669, 0, 189, 348, 349, 190, 191,
	619, 650, 670, 671, 352, 0, 192, 662, 0, 642,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 209, 673, 674, 0, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 0,
	0, 0, 0, 220, 221, 675, 676, 677, 0, 222,
	0, 223, 0, 0, 698, 0, 224, 663, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 659, 661,
	700, 0, 367, 232, 0, 229, 0, 699, 230, 678,
	231, 679, 680, 681, 682, 683, 0, 641, 0, 701,
	233, 234, 235, 702, 236, 237, 238, 0, 240, 239,
	0, 664, 703, 241, 704, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 602, 0, 631, 660, 253, 684, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 706,
	259, 707, 654, 260, 261, 262, 263, 264, 0, 265,
	655, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	685, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 708,
	288, 289, 608, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 648, 302, 291, 292, 303,
	709, 304, 686, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 687, 309, 310, 656, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 688, 689,
	0, 0, 321, 322, 657, 658, 629, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 649, 331, 0,
	395, 332, 333, 334, 396, 690, 0, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 603, 1547,
	0, 634, 623, 624, 621, 622, 613, 0, 601, 0,
	0, 0, 0, 599, 600, 0, 0, 182, 183, 0,
	184, 0, 609, 0, 0, 651, 616, 0, 612, 0,
	185, 186, 187, 342, 666, 344, 667, 188, 668, 669,
	0, 189, 348, 349, 190, 191, 619, 650, 670, 671,
	352, 0, 192, 662, 0, 642, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 0, 0, 0, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 659, 661, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 602, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 608, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 648, 302, 291, 292, 303, 709, 304, 686, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 687, 309,
	310, 656, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 688, 689, 0, 0, 321, 322,
	657, 658, 629, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 649, 331, 0, 395, 332, 333, 334,
	396, 690, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 603, 1535, 0, 634, 623, 624,
	621, 622, 613, 0, 601, 0, 0, 0, 0, 599,
	600, 0, 0, 182, 183, 0, 184, 0, 609, 0,
	0, 651, 616, 0, 612, 0, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 1533, 0, 1525, 623, 624, 621, 622, 613, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 0, 182,
	183, 0, 184, 0, 609, 0, 0, 651, 616, 0,
	612, 0, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 619, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 1528,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 0, 0, 0,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 1529, 0, 0, 227, 228, 659, 661, 700, 0,
	367, 232, 0, 229, 0, 699, 230, 678, 231, 679,
	680, 681, 682, 683, 0, 641, 0, 701, 233, 234,
	235, 702, 236, 237, 238, 0, 240, 239, 0, 664,
	703, 241, 704, 0, 242, 0, 0, 243, 0, 244,
	1530, 1527, 248, 376, 247, 705, 249, 250, 252, 251,
	602, 0, 631, 660, 253, 684, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 706, 259, 707,
	654, 260, 261, 262, 263, 264, 0, 265, 655, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 685, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	608, 290, 0, 294, 295, 296, 1531, 0, 299, 385,
	298, 300, 301, 648, 302, 291, 292, 303, 709, 304,
	686, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	687, 309, 310, 656, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 688, 689, 0, 0,
	321, 322, 657, 658, 629, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 649, 331, 0, 395, 332,
	333, 334, 396, 690, 0, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 1526, 340, 603, 1522, 0, 1525,
	623, 624, 621, 622, 613, 0, 601, 0, 0, 0,
	0, 599, 600, 0, 0, 182, 183, 0, 184, 0,
	609, 0, 0, 651, 616, 0, 612, 0, 185, 186,
	187, 342, 666, 344, 667, 188, 668, 669, 0, 189,
	348, 349, 190, 191, 619, 650, 670, 671, 352, 0,
	192, 662, 0, 642, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 696,
	203, 204, 205, 0, 643, 644, 646, 0, 645, 647,
	206, 207, 405, 208, 672, 1528, 673, 674, 0, 210,
	0, 211, 0, 212, 0, 0, 665, 214, 0, 215,
	0, 0, 0, 607, 216, 218, 217, 219, 652, 653,
	630, 697, 0, 0, 0, 0, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 1529, 0, 0,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 1530, 1527, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 608, 290, 0, 294,
	295, 296, 1531, 0, 299, 385, 298, 300, 301, 648,
	302, 291, 292, 303, 709, 304, 686, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 687, 309, 310, 656,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 688, 689, 0, 0, 321, 322, 657, 658,
	629, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 649, 331, 0, 395, 332, 333, 334, 396, 690,
	0, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	1526, 340, 603, 0, 634, 623, 624, 621, 622, 613,
	0, 0, 601, 0, 0, 0, 0, 599, 600, 0,
	182, 183, 0, 184, 0, 0, 609, 0, 651, 616,
	0, 0, 612, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 696, 203, 204, 205, 0, 643,
	644, 646, 0, 645, 647, 206, 207, 405, 208, 672,
	209, 673, 674, 0, 210, 0, 211, 0, 212, 0,
	0, 665, 214, 0, 215, 0, 0, 0, 607, 216,
	218, 217, 219, 652, 653, 630, 697, 0, 0, 0,
	0, 0, 220, 221, 675, 676, 677, 0, 222, 0,
	223, 0, 0, 698, 0, 224, 663, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 659, 661, 700,
	0, 367, 232, 0, 229, 0, 699, 230, 678, 231,
	679, 680, 681, 682, 683, 0, 641, 0, 701, 233,
	234, 235, 702, 236, 237, 238, 0, 240, 239, 0,
	664, 703, 241, 704, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 705, 249, 250, 252,
	251, 602, 0, 631, 660, 253, 684, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 706, 259,
	707, 654, 260, 261, 262, 263, 264, 0, 265, 655,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 685,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 608, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 648, 302, 291, 292, 303, 709,
	304, 686, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 687, 309, 310, 656, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 688, 689, 0,
	0, 321, 322, 657, 658, 629, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 649, 331, 0, 395,
	332, 333, 334, 396, 690, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 603, 0, 634,
	623, 624, 621, 622, 613, 0, 0, 601, 0, 0,
	0, 0, 599, 600, 0, 182, 183, 1388, 184, 1107,
	0, 609, 0, 651, 616, 0, 0, 612, 185, 186,
	187, 342, 666, 344, 667, 188, 668, 669, 0, 189,
	348, 349, 190, 191, 619, 650, 670, 671, 352, 0,
	192, 662, 0, 642, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 696,
	203, 204, 205, 0, 643, 644, 646, 0, 645, 647,
	206, 207, 405, 208, 672, 209, 673, 674, 0, 210,
	0, 211, 0, 212, 0, 0, 665, 214, 0, 215,
	0, 0, 0, 607, 216, 218, 217, 219, 652, 653,
	630, 697, 0, 0, 0, 0, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 663, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 659, 661, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 664, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 602, 0, 631, 660,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 654, 260, 261, 262,
	263, 264, 0, 265, 655, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 608, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 648,
	302, 291, 292, 303, 709, 304, 686, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 687, 309, 310, 656,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 688, 689, 0, 0, 321, 322, 657, 658,
	629, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 649, 331, 0, 395, 332, 333, 334, 396, 690,
	0, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 603, 865, 0, 634, 623, 624, 621, 622,
	613, 0, 601, 0, 0, 0, 0, 599, 600, 0,
	0, 182, 183, 0, 184, 0, 609, 0, 0, 651,
	616, 0, 612, 0, 185, 186, 187, 342, 666, 344,
	667, 188, 668, 669, 0, 189, 348, 349, 190, 191,
	619, 650, 670, 671, 352, 0, 192, 662, 0, 642,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 209, 673, 674, 0, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 0,
	0, 0, 0, 220, 221, 675, 676, 677, 0, 222,
	0, 223, 0, 0, 698, 0, 224, 663, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 659, 661,
	700, 0, 367, 232, 0, 229, 0, 699, 230, 678,
	231, 679, 680, 681, 682, 683, 0, 641, 0, 701,
	233, 234, 235, 702, 236, 237, 238, 0, 240, 239,
	0, 664, 703, 241, 704, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 602, 0, 631, 660, 253, 684, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 706,
	259, 707, 654, 260, 261, 262, 263, 264, 0, 265,
	655, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	685, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 708,
	288, 289, 608, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 648, 302, 291, 292, 303,
	709, 304, 686, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 687, 309, 310, 656, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 688, 689,
	0, 0, 321, 322, 657, 658, 629, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 649, 331, 0,
	395, 332, 333, 334, 396, 690, 0, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 603, 863,
	0, 634, 623, 624, 621, 622, 613, 0, 601, 0,
	0, 0, 0, 599, 600, 0, 0, 182, 183, 0,
	184, 0, 609, 0, 0, 651, 616, 0, 612, 0,
	185, 186, 187, 342, 666, 344, 667, 188, 668, 669,
	0, 189, 348, 349, 190, 191, 619, 650, 670, 671,
	352, 0, 192, 662, 0, 642, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 0, 0, 0, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 659, 661, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 602, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 608, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 648, 302, 291, 292, 303, 709, 304, 686, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 687, 309,
	310, 656, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 688, 689, 0, 0, 321, 322,
	657, 658, 629, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 649, 331, 0, 395, 332, 333, 334,
	396, 690, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 603, 0, 634, 623, 624, 621,
	622, 613, 0, 0, 601, 0, 0, 0, 0, 599,
	600, 0, 182, 183, 0, 184, 0, 0, 609, 0,
	651, 616, 0, 0, 612, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 2490,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	607, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	0, 0, 0, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 602, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	2489, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	0, 634, 623, 624, 621, 622, 613, 0, 0, 601,
	0, 0, 0, 0, 599, 600, 0, 182, 183, 0,
	184, 0, 0, 609, 0, 651, 616, 0, 0, 612,
	185, 186, 187, 342, 666, 344, 667, 188, 668, 669,
	0, 189, 348, 349, 190, 191, 619, 650, 670, 671,
	352, 0, 192, 662, 0, 642, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 0, 0, 0, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 659, 661, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 602, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 608, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 648, 302, 291, 292, 303, 709, 304, 686, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 687, 309,
	310, 656, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 688, 689, 0, 0, 321, 322,
	657, 658, 629, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 649, 331, 0, 395, 332, 333, 334,
	396, 690, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 603, 0, 634, 623, 624, 621,
	622, 613, 0, 0, 601, 0, 0, 0, 0, 599,
	600, 0, 182, 183, 0, 184, 0, 0, 609, 0,
	651, 616, 0, 0, 612, 185, 186, 187, 2488, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 2490,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	607, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	0, 0, 0, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 602, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	2489, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	0, 634, 623, 624, 621, 622, 613, 0, 0, 601,
	0, 0, 0, 0, 599, 600, 0, 182, 183, 0,
	184, 0, 0, 609, 0, 651, 616, 0, 0, 612,
	185, 186, 187, 342, 666, 344, 667, 188, 668, 669,
	0, 189, 348, 349, 190, 191, 619, 650, 670, 671,
	352, 0, 192, 662, 0, 642, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 696, 203, 204, 205, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 0, 0, 0, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 659, 661, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 0, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 1545, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 648, 302, 291, 292, 303, 709, 304, 686, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 687, 309,
	310, 656, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 688, 689, 0, 0, 321, 322,
	657, 658, 629, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 649, 331, 0, 395, 332, 333, 334,
	396, 690, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 634, 623, 624, 621,
	622, 613, 0, 0, 1543, 0, 0, 0, 0, 1541,
	1542, 0, 182, 183, 0, 184, 0, 0, 1544, 0,
	651, 616, 0, 0, 612, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 0, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 205,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	0, 0, 0, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 0, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 1545, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 634, 623, 624, 621, 622, 613, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 1544, 0, 651, 616, 0, 0, 612,
	185, 186, 187, 0, 666, 344, 667, 188, 668, 669,
	0, 189, 348, 349, 190, 191, 619, 650, 670, 671,
	352, 0, 192, 662, 0, 642, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 696, 203, 204, 2490, 0, 643, 644, 646, 0,
	645, 647, 206, 207, 405, 208, 672, 209, 673, 674,
	0, 210, 0, 211, 0, 212, 0, 0, 665, 214,
	0, 215, 0, 0, 0, 607, 216, 218, 217, 219,
	652, 653, 630, 697, 0, 0, 0, 0, 0, 220,
	221, 675, 676, 677, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 663, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 659, 661, 0, 0, 367, 232,
	0, 229, 0, 699, 230, 678, 231, 679, 680, 681,
	682, 683, 0, 641, 0, 0, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 664, 703, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 602, 0,
	631, 660, 253, 684, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 654, 260,
	261, 262, 263, 264, 0, 265, 655, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 685, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 608, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 648, 302, 291, 292, 303, 0, 304, 686, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 687, 309,
	310, 656, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 688, 689, 0, 0, 321, 322,
	657, 658, 629, 323, 324, 2489, 326, 0, 0, 327,
	328, 329, 330, 649, 331, 0, 395, 332, 333, 334,
	396, 690, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 599,
	600, 0, 182, 183, 0, 184, 0, 0, 609, 0,
	651, 0, 0, 0, 612, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 650, 350, 351, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 205,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 652, 653, 0, 697, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 0, 0, 0, 660, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 657, 658, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 914,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 2129, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 772, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 696, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 697, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	698, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 700, 0, 367, 232,
	0, 229, 0, 699, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 701, 233, 234, 235, 702,
	236, 237, 238, 0, 240, 239, 0, 375, 703, 241,
	704, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 705, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 706, 259, 707, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 708, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 138, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 709, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 140, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	921, 397, 0, 0, 335, 0, 0, 0, 132, 336,
	337, 338, 339, 340, 585, 133, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 123, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 750, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	138, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 140,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 921, 397, 0, 0, 335,
	0, 0, 0, 132, 336, 337, 338, 339, 340, 0,
	133, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 744, 0, 1188, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 750,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 138, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 140, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	921, 397, 0, 0, 335, 0, 0, 0, 132, 336,
	337, 338, 339, 340, 585, 133, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 744, 0, 1188, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	138, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 140,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 921, 397, 0, 0, 335,
	0, 0, 0, 132, 336, 337, 338, 339, 340, 1873,
	133, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 123, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 750,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 743, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 744, 0, 749, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 750, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 744, 0, 749, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 750, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 744, 0, 749, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 1221, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 1689, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 2042, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 634,
	623, 624, 621, 622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 1191, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 666, 344, 667, 188, 668, 669, 0, 189,
	348, 349, 190, 191, 0, 0, 670, 671, 352, 0,
	192, 353, 0, 772, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 696,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 672, 209, 673, 674, 0, 210,
	0, 211, 0, 212, 0, 0, 665, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	630, 697, 0, 0, 0, 0, 0, 220, 221, 675,
	676, 677, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 678, 231, 679, 680, 681, 682, 683,
	0, 641, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 375, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 0, 0, 631, 377,
	253, 684, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 685, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 709, 304, 686, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 687, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 688, 689, 0, 0, 321, 322, 393, 394,
	629, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 690,
	0, 490, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 175, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 174, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 172, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 178, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	175, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	174, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 179,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 178, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 175, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 174, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 179, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 178,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 971, 0, 917, 975, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	772, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 697, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 375, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 709, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 917, 975, 335,
	0, 0, 973, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 772, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 697,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 375, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 709, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 917, 975,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 772, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 696, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	697, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 700, 0, 367, 232, 0, 229, 0,
	699, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 701, 233, 234, 235, 702, 236, 237, 238,
	0, 240, 239, 0, 375, 703, 241, 704, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 706, 259, 707, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 709, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 917,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 772, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 696,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 697, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 375, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 709, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	179, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	1624, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 1622, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 1666, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 1627, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 1664,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 1626,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 1665, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 179, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 1624, 192, 353, 0, 0, 1619, 193, 194, 195,
	0, 197, 198, 199, 196, 1622, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 1627, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 1618, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	1626, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 1625, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 892, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 750, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 756, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 758, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 750, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 752, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 754, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 750, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 422, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 421, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 420, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 179, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 1607, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 179,
	2195, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	179, 2195, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 2192,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 179, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 750,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 1377, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 1375, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	179, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 1357, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 516, 335, 179, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 950, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 518, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 513, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 1235, 335, 179, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 1234, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	516, 335, 179, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 950, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 518, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 513, 391, 392, 0, 0, 321,
	951, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 516, 335, 179, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 507, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 518, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 934, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 513, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 910, 335,
	179, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 909, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 907, 335, 179, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 906, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 903, 335, 179, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 902, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	900, 335, 179, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 899, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 896, 335, 179, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 895,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 179, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 182, 183, 884, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 882,
	335, 179, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 881, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 878, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 876, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 872, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 874, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 762, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	764, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 760,
	335, 179, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 516, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 507, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 506, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 518, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 508, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 509, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 513, 391, 392,
	0, 0, 321, 511, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 498, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 499,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 496, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 488, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 445,
	335, 179, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 179, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 179, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 1920, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 179, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 1918, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 179, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 1907, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 179, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 499, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 179, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 1245, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 0, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 179, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 726, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 179,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 0,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 0, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 0, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 1040, 1041, 0, 1070, 1071, 1072, 1080, 1081,
	1082, 0, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 1040, 1041, 0,
	1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0, 1042,
	0, 0, 0, 1073, 0, 1062, 0, 0, 0, 0,
	1043, 0, 1059, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1042, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 1066, 1067, 1068, 0, 0, 0, 0, 0, 1048,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1077, 1085, 0, 0, 1065, 1066, 1067, 1068, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 1077, 1085, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1040, 1041, 0, 1083, 0, 0, 1080, 1081,
	1082, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	1075, 0, 0, 0, 0, 1043, 1063, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1042,
	1069, 1074, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1040, 1041,
	0, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0,
	0, 1078, 0, 0, 1073, 1069, 0, 0, 0, 0,
	0, 1043, 0, 0, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 1066, 1067, 1068, 0, 1042, 1078, 0, 0, 1048,
	0, 1062, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1077, 1085, 0, 0, 0, 0, 0, 0, 1076,
	0, 0, 1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079,
	0, 1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050,
	0, 0, 0, 0, 2461, 1075, 1065, 1066, 1067, 1068,
	0, 1063, 0, 0, 1076, 1048, 0, 1054, 1055, 1061,
	1060, 1056, 1057, 1058, 1079, 0, 1053, 1051, 1052, 1044,
	1045, 1046, 1047, 1049, 1050, 0, 0, 1077, 1085, 2414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 1075, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1040, 1041,
	0, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0,
	0, 1078, 1074, 0, 1073, 0, 0, 0, 0, 0,
	0, 1043, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 1069, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 1064, 0, 0, 1040, 1041, 0, 1070, 1071, 1072,
	1080, 1081, 1082, 0, 0, 0, 0, 1078, 0, 1076,
	1073, 0, 0, 0, 0, 0, 0, 1043, 0, 1079,
	1084, 1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050,
	0, 0, 0, 0, 0, 0, 1065, 1066, 1067, 1068,
	0, 1042, 0, 0, 0, 1048, 0, 1062, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 1085, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 1054, 1055,
	1061, 1060, 1056, 1057, 1058, 1079, 1083, 1053, 1051, 1052,
	1044, 1045, 1046, 1047, 1049, 1050, 0, 0, 0, 0,
	2369, 1075, 1065, 1066, 1067, 1068, 0, 1063, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 1077, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 1075, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1040, 1041, 0, 1070, 1071, 1072,
	1080, 1081, 1082, 0, 0, 0, 0, 1078, 1074, 0,
	1073, 0, 0, 0, 0, 0, 0, 1043, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1042, 1069, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 1076, 0, 0, 1054, 1055,
	1061, 1060, 1056, 1057, 1058, 1079, 0, 1053, 1051, 1052,
	1044, 1045, 1046, 1047, 1049, 1050, 0, 0, 0, 0,
	2339, 0, 1065, 1066, 1067, 1068, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 1040, 1041, 0, 1070,
	1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0, 0,
	0, 0, 1073, 1077, 1085, 0, 0, 0, 0, 1043,
	0, 1076, 1084, 0, 1054, 1055, 1061, 1060, 1056, 1057,
	1058, 1079, 1083, 1053, 1051, 1052, 1044, 1045, 1046, 1047,
	1049, 1050, 0, 1042, 0, 0, 2334, 1075, 0, 1062,
	0, 0, 0, 1063, 0, 0, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 1066, 1067, 1068, 0, 0,
	0, 0, 1069, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 1077, 1085, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1040, 1041, 0, 1070,
	1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0, 0,
	1074, 0, 1073, 0, 0, 0, 0, 0, 0, 1043,
	0, 1076, 1084, 0, 1054, 1055, 1061, 1060, 1056, 1057,
	1058, 1079, 0, 1053, 1051, 1052, 1044, 1045, 1046, 1047,
	1049, 1050, 0, 1042, 1069, 0, 2330, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1064,
	0, 0, 1040, 1041, 0, 1070, 1071, 1072, 1080, 1081,
	1082, 0, 0, 0, 0, 1078, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 1066, 1067, 1068, 0, 1042,
	0, 0, 0, 1048, 0, 1062, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1085, 0, 0, 0,
	0, 0, 0, 1076, 0, 0, 1054, 1055, 1061, 1060,
	1056, 1057, 1058, 1079, 1083, 1053, 1051, 1052, 1044, 1045,
	1046, 1047, 1049, 1050, 0, 0, 0, 0, 2271, 1075,
	1065, 1066, 1067, 1068, 0, 1063, 0, 0, 0, 1048,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 1077, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 1075, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1040, 1041, 0, 1070, 1071, 1072, 1080, 1081,
	1082, 0, 0, 0, 0, 1078, 1074, 0, 1073, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1042,
	1069, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 1076, 0, 0, 1054, 1055, 1061, 1060,
	1056, 1057, 1058, 1079, 0, 1053, 1051, 1052, 1044, 1045,
	1046, 1047, 1049, 1050, 0, 0, 0, 0, 2234, 0,
	1065, 1066, 1067, 1068, 0, 0, 0, 0, 0, 1048,
	0, 0, 0, 0, 1040, 1041, 0, 1070, 1071, 1072,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 0, 0,
	1073, 1077, 1085, 0, 0, 0, 0, 1043, 0, 1076,
	1084, 0, 1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079,
	1083, 1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050,
	0, 1042, 0, 0, 2233, 1075, 0, 1062, 0, 0,
	0, 1063, 0, 0, 1059, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 1066, 1067, 1068, 0, 0, 0, 0,
	1069, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 1077, 1085, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1040, 1041, 0, 1070, 1071, 1072,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 1074, 0,
	1073, 0, 0, 0, 0, 0, 0, 1043, 0, 1076,
	1084, 0, 1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079,
	0, 1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050,
	0, 1042, 1069, 0, 2198, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 1064, 0, 0,
	1040, 1041, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0,
	0, 0, 0, 1078, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 1066, 1067, 1068, 0, 1042, 0, 0,
	0, 1048, 0, 1062, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 1085, 0, 0, 0, 0, 0,
	0, 1076, 0, 0, 1054, 1055, 1061, 1060, 1056, 1057,
	1058, 1079, 1083, 1053, 1051, 1052, 1044, 1045, 1046, 1047,
	1049, 1050, 0, 0, 0, 0, 2045, 1075, 1065, 1066,
	1067, 1068, 0, 1063, 0, 0, 0, 1048, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1074, 1077,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 1075, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1040, 1041, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0,
	0, 0, 0, 1078, 1074, 0, 1073, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 1069, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 1076, 0, 0, 1054, 1055, 1061, 1060, 1056, 1057,
	1058, 1079, 0, 1053, 1051, 1052, 1044, 1045, 1046, 1047,
	1049, 1050, 0, 0, 0, 0, 2021, 0, 1065, 1066,
	1067, 1068, 0, 0, 0, 0, 0, 1048, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	1085, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079, 1083, 1053,
	1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050, 0, 0,
	0, 0, 1483, 1075, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1040, 1041, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0,
	0, 0, 0, 0, 1074, 0, 1073, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 1069, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 1064, 0, 0, 1040, 1041, 0, 1070,
	1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0, 1078,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 1043,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 1066,
	1067, 1068, 0, 1042, 0, 0, 0, 1048, 2520, 1062,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	1085, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079, 1083, 1053,
	1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050, 0, 0,
	1775, 0, 0, 1075, 1065, 1066, 1067, 1068, 0, 1063,
	0, 0, 0, 1048, 0, 1845, 0, 0, 1844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 1077, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2519, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 1075,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	1583, 0, 0, 1064, 0, 0, 1040, 1041, 0, 1070,
	1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0, 1078,
	1074, 0, 1073, 0, 0, 0, 1582, 0, 0, 1043,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1042, 1069, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 1076, 0, 0,
	1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079, 0, 1053,
	1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050, 0, 0,
	0, 0, 0, 0, 1065, 1066, 1067, 1068, 0, 0,
	0, 0, 0, 1048, 0, 0, 0, 0, 1040, 1041,
	0, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0,
	0, 0, 0, 0, 1073, 1077, 1085, 0, 0, 1748,
	0, 1043, 0, 1076, 1084, 0, 1054, 1055, 1061, 1060,
	1056, 1057, 1058, 1079, 1083, 1053, 1051, 1052, 1044, 1045,
	1046, 1047, 1049, 1050, 0, 1042, 0, 0, 0, 1075,
	0, 1062, 0, 0, 0, 1063, 0, 0, 1059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 1749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 1066, 1067, 1068,
	0, 0, 0, 0, 1069, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 1077, 1085, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1040, 1041,
	0, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0,
	0, 0, 1074, 0, 1073, 0, 0, 0, 0, 0,
	0, 1043, 0, 1076, 1084, 0, 1054, 1055, 1061, 1060,
	1056, 1057, 1058, 1079, 0, 1053, 1051, 1052, 1044, 1045,
	1046, 1047, 1049, 1050, 0, 1042, 1069, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 1064, 0, 0, 0, 1040, 1041, 0, 1070, 1071,
	1072, 1080, 1081, 1082, 0, 0, 0, 1078, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 1066, 1067, 1068,
	0, 0, 1042, 0, 0, 1048, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1077, 1085, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 1054, 1055,
	1061, 1060, 1056, 1057, 1058, 1079, 1083, 1053, 1051, 1052,
	1044, 1045, 1046, 1047, 1049, 1050, 0, 0, 0, 0,
	0, 1075, 0, 1065, 1066, 1067, 1068, 1063, 0, 0,
	0, 0, 1048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 582, 1077, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 1075, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 1040, 1041, 0, 1070, 1071,
	1072, 1080, 1081, 1082, 0, 0, 0, 1078, 0, 1074,
	0, 1073, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1042, 1069, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 1076, 0, 0, 1054, 1055,
	1061, 1060, 1056, 1057, 1058, 1079, 0, 1053, 1051, 1052,
	1044, 1045, 1046, 1047, 1049, 1050, 0, 0, 0, 0,
	2025, 0, 0, 1065, 1066, 1067, 1068, 0, 0, 0,
	0, 0, 1048, 0, 0, 0, 0, 1851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1077, 1085, 0, 0, 0, 0,
	0, 0, 1076, 0, 0, 1054, 1055, 1061, 1060, 1056,
	1057, 1058, 1079, 1083, 1053, 1051, 1052, 1044, 1045, 1046,
	1047, 1049, 1050, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1040, 1041, 0, 1070, 1071,
	1072, 1080, 1081, 1082, 0, 0, 0, 0, 0, 1074,
	0, 1073, 0, 0, 0, 1846, 0, 0, 1043, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1042, 1069, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 1064, 0,
	0, 1040, 1041, 0, 1070, 1071, 1072, 1080, 1081, 1082,
	0, 0, 0, 0, 1078, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 1066, 1067, 1068, 0, 1042, 0,
	0, 0, 1048, 0, 1062, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1077, 1085, 0, 0, 0, 0,
	0, 0, 1076, 0, 0, 1054, 1055, 1061, 1060, 1056,
	1057, 1058, 1079, 1083, 1053, 1051, 1052, 1044, 1045, 1046,
	1047, 1049, 1050, 0, 0, 0, 0, 0, 1075, 1065,
	1066, 1067, 1068, 0, 1063, 0, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1074,
	1077, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 1075, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 1040, 1041, 0, 1070, 1071, 1072, 1080, 1081, 1082,
	0, 0, 0, 0, 1078, 1074, 0, 1073, 0, 0,
	0, 1804, 0, 0, 1043, 0, 0, 1084, 1811, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1042, 1069,
	0, 0, 0, 0, 1062, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 1076, 0, 0, 1054, 1055, 1061, 1060, 1056,
	1057, 1058, 1079, 0, 1053, 1051, 1052, 1044, 1045, 1046,
	1047, 1049, 1050, 0, 0, 0, 0, 0, 0, 1065,
	1066, 1067, 1068, 0, 0, 0, 0, 0, 1048, 0,
	0, 0, 0, 1040, 1041, 0, 1070, 1071, 1072, 1080,
	1081, 1082, 0, 0, 0, 0, 0, 0, 0, 1073,
	1077, 1085, 0, 0, 0, 0, 1043, 0, 1076, 1084,
	0, 1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079, 1083,
	1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050, 0,
	1042, 0, 0, 0, 1075, 0, 1062, 0, 0, 0,
	1063, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 1066, 1067, 1068, 0, 0, 0, 0, 1069,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 1077, 1085, 0, 0, 0, 0, 0, 0,
	1078, 1040, 1041, 0, 1070, 1071, 1072, 1080, 1081, 1082,
	0, 1083, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 1043, 0, 1075, 1084, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1042, 0,
	0, 0, 0, 0, 1062, 0, 0, 1074, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079, 0,
	1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050, 0,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 1065,
	1066, 1067, 1068, 0, 0, 0, 0, 0, 1048, 0,
	0, 0, 1078, 1040, 1041, 0, 1070, 1071, 1072, 1080,
	1081, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 1085, 0, 0, 0, 0, 1043, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 0, 0, 1075, 0, 1062, 0, 0, 0,
	1063, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 1054, 1055, 1061, 1060, 1056, 1057, 1058,
	1079, 0, 1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049,
	1050, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 1066, 1067, 1068, 0, 0, 0, 0, 1069,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 1077, 1085, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	40, 127, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 1076, 49,
	0, 1054, 1055, 1061, 1060, 1056, 1057, 1058, 1079, 0,
	1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049, 1050, 0,
	52, 1069, 0, 0, 54, 0, 0, 0, 60, 0,
	0, 130, 0, 0, 0, 61, 1064, 126, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 1040, 1041,
	63, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 1059, 0,
	1076, 0, 0, 1054, 1055, 1061, 1060, 1056, 1057, 1058,
	1079, 0, 1053, 1051, 1052, 1044, 1045, 1046, 1047, 1049,
	1050, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 0, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 0, 1065, 1066, 1067, 1068,
	0, 0, 0, 0, 0, 1048, 0, 73, 124, 67,
	0, 68, 0, 69, 0, 131, 0, 0, 0, 0,
	70, 0, 0, 0, 138, 0, 0, 1077, 1085, 0,
	0, 81, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 1288, 0,
	0, 1075, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 1296, 1285, 1315, 1276, 1306, 1305, 132, 0, 1278,
	1277, 0, 0, 0, 133, 1317, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 123, 0, 0,
	4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 1311, 0, 1303, 1302, 0, 0, 0,
	0, 0, 0, 0, 0, 1301, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 1298,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1284, 0, 0, 0, 0,
	0, 0, 1289, 1287, 1290, 1291, 1292, 1293, 1294, 0,
	1314, 0, 0, 0, 0, 1076, 0, 0, 1054, 1055,
	1061, 1060, 1056, 1057, 1058, 1079, 0, 1053, 1051, 1052,
	1044, 1045, 1046, 1047, 1049, 1050, 0, 0, 1280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 1286, 0, 0, 0, 0, 1288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1297, 0, 0, 0, 1408, 1406, 1407,
	1410, 1409, 1296, 1285, 1315, 1276, 1306, 1305, 0, 0,
	1278, 1277, 0, 0, 0, 0, 1317, 1316, 0, 0,
	0, 0, 0, 0, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 0, 537, 0, 563,
	0, 0, 0, 0, 1311, 0, 1303, 1302, 1279, 0,
	0, 1312, 1313, 0, 0, 0, 1301, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	0, 0, 0, 1283, 0, 0, 0, 0, 1318, 1300,
	1298, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 0, 0, 0, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 0, 1284, 0, 559, 0,
	0, 0, 0, 1289, 1287, 1290, 1291, 1292, 1293, 1294,
	0, 1314, 564, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 0, 0, 0, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1304, 0, 0, 0, 1286, 0, 0, 0, 0,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546, 547,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 0, 548,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 0, 0, 0, 0, 1281, 0, 0, 0, 0,
	565, 0, 0, 0, 0, 0, 1295, 1282, 0, 0,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 1312, 1313, 0, 0, 0, 0, 0, 0,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1283, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 556, 566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 0, 0, 0, 561, 0, 0,
	0, 567, 0, 0, 0, 0, 554, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 560,
}
var sqlPact = [...]int{

	41736, -1000, -40, -1000, -1000, -1000, 137, -1000, -1000, -1000,
	134, 133, 132, -1000, 129, 128, 125, 123, 117, 112,
	108, 103, 101, 100, 98, -1000, 95, -1000, -1000, -1000,
	-1000, 94, 92, 91, 86, 85, 84, 83, -1000, 1184,
	21573, 82, 81, 1138, 35238, 80, 76, 73, 63, 896,
	62, 60, 25573, 822, 1311, 55, 51, 48, 46, 45,
	894, 34907, 3941, 2726, 1064, 1551, 34573, 21239, 1550, 2599,
	34239, -1000, -1000, 33905, 44, 43, 41, 38, 36, -1000,
	-1000, 33571, 30, 27, 25, 24, 23, 22, 21, 20,
	18, 17, 16, 13, 10, 9, -1000, 7, 6, 5,
	-1000, 42325, 4, 3, 2, 1026, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	74, -1000, 854, 433, 1450, 8138, 793, 962, 952, 929,
	923, 953, 37224, 35238, 0, -71, -8, -1000, 1834, 605,
	18842, 41736, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 25239, 24905, 33237, 32903,
	6065, 690, -1000, -52, 22237, 35238, -1000, -41, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14357, 14011, 492, -41, -1000, -1000, -1000, -1000, -1000,
	32569, -1000, 32235, 31901, 1406, 31567, -1000, -1000, -1000, -1000,
	31233, -1000, -1000, 1676, 1544, 1542, 24571, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 30902,
	30568, 30234, 29900, 29566, 442, -1000, -1000, -1000, 17117, -1000,
	-1000, -1000, -1000, -9, -1000, -11, -1000, -16, -19, -20,
	-23, -1000, -27, -28, -1000, -30, -33, -1000, -34, -38,
	29232, 1164, -1000, -1000, -45, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35238, -1000, 15047, -1000, 441, -1000, 1552,
	-1000, 15047, -1000, 1157, -1000, -1000, -1000, -1000, -1000, 35238,
	-1000, -1000, -1000, -1000, -1000, -1000, 2045, 1083, 440, 28898,
	-1000, 1317, -1000, 533, 707, -1000, -1000, -1000, 9173, 145,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1422,
	22582, 1113, 1833, 1672, 2044, 1338, 1652, 1651, 1604, 1599,
	1597, 2043, 840, 2039, 1716, 946, 2038, 1591, 1276, 614,
	2037, 1539, 1538, -1000, -1000, -1000, -1000, 844, -1000, -1000,
	-1000, 26897, -1000, -1000, 854, -1000, -1000, -1000, 1256, 1784,
	1784, 1784, 1854, 245, 238, -1000, 74, -1000, 1313, -1000,
	1076, -1000, -1000, -1000, -1000, -1000, 41313, -1000, -1000, 15047,
	15047, 15047, 15047, 15047, 979, 460, -1000, 435, 432, 7447,
	-1000, -1000, 1990, -1000, -1000, -1000, 247, -1000, -1000, 15047,
	-41, -1000, -1000, -1000, -1000, 429, 2031, -1000, 609, -1000,
	-1000, -1000, 539, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1578, 428, 426, 425, -1000, 424, -1000, -1000,
	423, 422, 417, 407, 404, 402, 400, 399, 397, 393,
	392, 382, 378, 377, 376, 899, -1000, 563, -1000, -1000,
	563, 563, -1000, 358, 358, 360, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 358, -1000, -1000, -1000, 500, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	374, 861, 1266, -1000, -1000, 1266, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 680, 36562, -57, 35238, -1000, 373, -57,
	-1000, -1000, 369, -1000, 10208, 10208, -1000, -1000, -1000, -1000,
	-1000, 9518, 1385, -1000, 3840, -212, 251, 497, -1000, 17807,
	20561, -1000, -1000, 994, 1695, 741, -1000, 880, 1694, 469,
	-1000, 1193, -1000, 760, 1673, -189, 1628, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 22913, 22237, -52, -63, -1000, -1000,
	-1000, 5720, 41313, -1000, 41313, -1000, 776, 19530, -41, -1000,
	-1000, -1000, -1000, 368, 1252, 551, -1000, 249, -1000, 28564,
	551, 1246, -1000, -1000, -1000, 26897, -1000, 35238, -1000, 35238,
	-1000, 818, -1000, 36893, 114, 1667, -1000, -1000, 114, 1665,
	-1000, 113, 1662, -1000, -1000, 1085, 1661, -1000, -63, 1650,
	-1000, -1000, 15047, -70, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 605, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28230, 21905, 1220, 496, 41313, 1900,
	42245, 22913, 41313, 21905, -1000, -1000, 35238, -1000, 15047, -1000,
	1897, 1232, -58, -1000, -1000, -1000, -1000, -1000, 1289, 1273,
	659, 772, 9173, 9173, 1750, -1000, 110, 6065, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 27896, -1000, -1000, -1000,
	1072, 35238, -1000, -1000, 1573, -1000, 21905, 35238, -1000, 35238,
	-1000, 35238, -1000, 35238, -1000, 35238, -1000, -1000, -1000, -1000,
	-1000, 3559, -1000, 1566, -1000, -1000, 35238, -1000, 1286, -1000,
	-1000, -1000, 27565, 27231, -1000, 942, 730, -1000, -1000, 116,
	-1000, -1000, 1256, -1000, 1155, 1352, 13665, 1332, 15047, 74,
	-1000, -1000, 74, 74, 8828, -1000, -1000, -1000, 35238, -1000,
	42034, 42245, 6065, 702, 15047, 15047, 15047, 15047, 15047, 15047,
	15047, 15047, 15047, 15047, 15047, 15047, 15047, 15047, 15047, 15047,
	15047, 15047, 15047, 15047, 15047, 15047, 15047, 15047, 15047, 15047,
	15047, 15047, 15047, 15047, 15047, 15047, 1195, 15047, 677, 15047,
	15047, 15047, 15047, 817, 1008, 355, 1062, -1000, 1950, 1950,
	1950, 41583, 41583, 352, 460, -1000, 15047, -1000, 52, 15047,
	238, 39540, -55, 7102, -1000, -1000, -1000, 13320, 561, 41313,
	-41, 6410, -1000, 1989, 870, 1615, 1442, 367, 519, 515,
	513, 446, 15047, 15047, 12975, 12629, 12283, 15737, 11937, 15047,
	7792, 15047, 15047, 15047, 15047, 11591, 11245, -1000, 366, -1000,
	-1000, -1000, -1000, 1987, -1000, -1000, 1985, -1000, 699, 695,
	1983, 1805, 528, -1000, -58, -1000, 36562, -1000, 35238, -57,
	1894, 35238, -1000, 109, -1000, 40176, -1000, 109, -75, -1000,
	1370, 1368, 19186, 1255, 1029, 1029, 1029, -1000, 362, 453,
	497, 5011, 10899, -1000, 25904, 1034, 140, 233, 17462, 1385,
	-1000, 35238, -67, 936, -1000, 24237, 1794, 1791, 1778, 26897,
	1869, 52, 1799, 1536, 676, 26897, 1798, 675, 1868, 52,
	1517, 669, 35238, 6065, 1797, 495, -1000, 35238, -1000, -1000,
	-1000, 1512, -76, -1000, -1000, 23906, 1888, 1646, -1000, 924,
	-1000, 1884, 35238, 1154, 1240, -1000, -1000, 722, 1645, 554,
	105, 1880, 105, 19873, -1000, 35238, -1000, 35238, -1000, -1000,
	35238, -1000, 35238, -1000, 35238, 35238, -1000, 35238, 35238, -77,
	41313, 4333, 23575, 664, -1000, 586, 23906, 572, -82, -1000,
	622, -1000, -1000, -1000, -1000, 197, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	360, 899, 358, 358, 358, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 500, -1000, -1000, 563, 563, 563, -1000, -1000,
	-64, -1000, 1505, 525, -90, 615, -58, -1000, 1266, -1000,
	873, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2030, -1000, 1956, -1000, -1000, 1979,
	-59, -1000, -59, -1000, 6065, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35238, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 241, -1000, -1000, -1000, -1000, -1000, -1000, 35238, 35238,
	35238, -1000, 26897, -1000, -1000, -1000, -1000, 41313, -1000, 357,
	-1000, -1000, 41313, 905, 1383, -1000, 1383, -60, -1000, 40298,
	1365, 35238, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 527, 494, 494, 732, 732, 732, 732,
	1997, 2870, 3090, 2489, 38082, 38082, 38082, 38082, 38082, 38082,
	38082, 38082, 395, 964, 964, 395, 395, 395, 395, 395,
	38082, 38082, 38082, 41583, 41461, 689, 15047, 15047, 663, 1006,
	355, 689, 15047, 689, 689, 689, 689, -1000, 1206, -1000,
	-1000, -1000, -1000, 1504, 353, 15737, 15737, -1000, -1000, -1000,
	7447, 16082, -1000, -1000, -1000, -1000, 350, 15047, -1000, 39730,
	-227, 231, -153, -1000, 15047, 452, -92, -1000, 800, -1000,
	15047, -1000, -42, 15047, 15047, 15047, 220, -1000, 218, -1000,
	661, -1000, 660, 657, 654, -1000, 345, 989, 344, 343,
	15047, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41191,
	4519, 216, -1000, 1495, -153, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 211, -1000, 208, -1000, 41001, -153, 207, 3782,
	-1000, 15737, 15737, 15737, 7447, 333, 206, -1000, 39986, -1000,
	40935, 10553, 10553, 10553, 205, 40745, 15047, -153, 4453, 4065,
	3640, -100, -102, -1000, -103, -1000, 1977, -109, 204, 526,
	518, 201, 1560, -1000, 1802, -1000, -1000, 332, -110, 554,
	10208, 18497, 6065, -1000, 554, 9518, -1000, 19186, 19186, 1351,
	1358, 19186, -1000, -1000, -1000, -1000, 25904, 419, 497, 25904,
	-1000, 1974, 1334, 199, -1000, -1000, -1000, 35238, 331, -1000,
	497, 195, 935, 35238, 35238, 35238, -1000, -1000, 1236, 36231,
	1231, 42245, 35238, -1000, 323, 320, 1361, 1354, 35238, 35238,
	35900, 35569, 35238, 930, 52, -1000, 511, 319, 35238, 878,
	505, 35238, 52, -1000, 318, 35238, 867, -1000, 503, 1421,
	1169, -1000, 757, 1494, 35238, 194, -116, -61, 42245, -1000,
	-1000, -1000, -1000, -1000, 35238, 412, 35238, 52, 35238, 2013,
	52, 35238, 1642, 1688, 483, 35238, 1352, 15047, 1012, -1000,
	18152, 568, 35238, 856, 75, -1000, -1000, -1000, 490, 35238,
	-1000, -1000, 114, 114, -1000, 113, 1085, -63, -1000, 15047,
	-1000, -1000, 35238, 22913, -117, -1000, -1000, 42245, -1000, 459,
	688, -1000, 1973, 541, 22913, 35238, 9173, 9173, -1000, 1355,
	-1000, -1000, 868, -1000, 884, -1000, -1000, -1000, -1000, 9173,
	-1000, -68, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 905,
	-1000, 15047, 1968, -1000, -1000, -1000, 8828, -1000, -1000, -1000,
	35238, -211, 15047, 689, 689, 15047, 15737, 15737, -1000, 689,
	-1000, -1000, -1000, -1000, -1000, 1479, 316, 15047, 42245, 4662,
	3005, -118, -1000, 15047, -65, -1000, 15047, -1000, 39474, -1000,
	-1000, 457, 1654, -1000, 15047, 40555, 192, 9863, -1000, 40488,
	-43, -43, -1000, 2008, 1271, 1167, 927, 827, 1965, -1000,
	20217, 558, 1069, 39284, 42034, 42245, -1000, 15047, -1000, -1000,
	1473, 15047, -1000, 42034, 42245, 15737, 15737, 15737, 15737, 15737,
	15737, 15737, 15737, 15737, 15737, 15737, 15737, 15737, 15737, 15737,
	15737, 15737, 15737, 15737, 1324, 15737, 1931, 1931, 1931, -66,
	15047, -1000, 1553, 1473, 15047, 15047, 42245, 191, 190, 189,
	-1000, 15047, -153, 15047, 15047, 15047, -1000, -1000, -1000, 186,
	-1000, 1961, -1000, -1000, -1000, -1000, 1039, -1000, 572, -1000,
	1438, -1000, -111, -1000, 1385, -1000, 1438, -1000, -1000, 1351,
	-1000, 315, 15047, 19186, -1000, 451, -1000, -125, -1000, 25904,
	-1000, 450, -219, -1000, 489, -1000, 497, 314, 35238, 25904,
	-1000, -1000, -1000, 650, 640, 1641, -1000, 1228, -1000, 576,
	-1000, 939, 15047, 16772, 311, 310, 1002, -1000, 1640, 1085,
	1638, 1085, -1000, -67, 903, -1000, 20905, 15047, -1000, 637,
	20905, -1000, -1000, 15047, -1000, 636, 20905, 541, 1463, 733,
	-1000, 745, -1000, 1408, -1000, 23906, 309, 35238, 290, -1000,
	289, -1000, -1000, 286, 35238, 1304, 483, 23244, -1000, 551,
	856, -1000, 41313, -1000, 856, 8483, 1790, -132, -1000, -1000,
	-1000, 554, 19873, 19186, 9518, -133, -1000, -1000, -1000, -1000,
	41313, -68, 1762, 1762, -1000, 1959, -1000, 449, 185, -1000,
	26566, -1000, -68, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35238, 1067, 39162, -1000, 1812, 6065, 1993, 689, 346, 235,
	15047, 42245, 41858, -139, 15047, 15047, -1000, 183, 15047, 447,
	41313, -1000, -1000, -1000, 41313, 15047, 1994, 15047, 180, 176,
	175, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 174,
	-1000, -1000, 37555, 15047, 173, -1000, 171, 168, 41313, 1553,
	41313, -1000, -1000, 543, 543, 821, 821, 821, 821, 1931,
	2967, 281, 2799, 2681, 2681, 2681, 2957, 1031, 1031, 2681,
	2681, 2681, 1458, 1307, 285, 4394, 15047, 165, -1000, -1000,
	41313, 41313, 164, -1000, -1000, -1000, -153, 312, 38972, 38906,
	-1000, 162, 6065, 35238, 35238, 160, 1432, 1852, -1000, 19186,
	1432, -1000, 35238, 41313, -1000, -212, -1000, 1936, -1000, -1000,
	1334, -1000, 5370, 25904, 35238, -140, -1000, 35238, 35238, 35238,
	1634, -1000, 1684, -1000, 38716, -141, -1000, 280, 1829, 15047,
	-1000, -1000, 284, 16772, 35238, -1000, 1325, 1357, 606, 35238,
	-1000, 35238, -1000, 35238, 35238, 35238, -1000, 278, -41, -142,
	35238, -1000, -147, 35238, -1000, -1000, 22913, 694, -1000, -1000,
	1413, -1000, 16772, 270, 35238, 23906, 1877, 16772, 1131, 1306,
	483, 23244, -1000, 722, -1000, -1000, -69, -1000, 322, 52,
	856, -1000, -72, -1000, 486, 1737, -1000, 1729, 445, -1000,
	-1000, -87, 269, -1000, 485, 484, -1000, -1000, -1000, -1000,
	1812, 15047, 15047, 41858, -148, -1000, 689, 689, -1000, 38594,
	-1000, 41313, -1000, 40488, -1000, -1000, -1000, -1000, 931, -1000,
	38404, -1000, -1000, -1000, -1000, 15737, 1452, 268, 42245, 38338,
	-1000, -1000, 15047, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	544, 15047, 15047, 1385, 544, -150, 497, -1000, -1000, -1000,
	1930, -1000, -155, -1000, -1000, -1000, -1000, 35238, -1000, 35238,
	-1000, 6065, 35238, 1449, 1209, -1000, -1000, 1329, 267, 15737,
	35238, -1000, 959, 16772, 1812, -41, 6065, 1812, 38148, 6410,
	-156, -157, 1205, -1000, 1202, 15047, -1000, 42245, 1085, 1085,
	-1000, 630, 625, 15047, 624, -1000, 619, -1000, -105, 20905,
	961, -162, 16772, -163, 159, 52, -164, 35238, -1000, 483,
	23244, -1000, 1688, 1680, 35238, 1770, -1000, -1000, 266, 265,
	264, -1000, 26235, 26235, 22913, 22913, -1000, 689, 689, -1000,
	-1000, 158, 1069, 1848, -1000, 4585, 15737, 42245, -175, -1000,
	37927, -1000, 35238, 41313, -153, -1000, -1000, 25904, 444, -1000,
	-1000, 1257, -1000, -1000, 35238, 1186, -1000, -1000, 15047, 4394,
	262, 1408, 261, -1000, -1000, -1000, -1000, -1000, -1000, 1829,
	-42, -1000, 877, -1000, -1000, 41313, 1818, -1000, -1000, 35238,
	35238, -43, 260, 258, -1000, 35238, 959, -176, -1000, 1408,
	-1000, 959, 256, 23244, -1000, 1304, 713, -177, 35238, -1000,
	-1000, 6755, 22913, 22913, -1000, -182, -1000, -1000, -1000, 888,
	15047, 4585, -183, -1000, -1000, -123, -1000, 1875, -1000, -1000,
	-1000, -1000, 1632, 37892, 1277, 35238, -1000, 35238, 1812, 157,
	35238, 574, 6065, -1000, -1000, 156, 15047, 15047, 254, 1408,
	959, -1000, 1408, 16772, -1000, 1306, 797, -1000, 554, -1000,
	-185, -190, -1000, 153, 15392, 15392, -153, -1000, 35238, 252,
	1603, -1000, 1077, 1270, 152, -191, -1000, -1000, 249, -1000,
	15047, -1000, 1994, -192, -193, 35238, -1000, 1408, -1000, -198,
	-1000, 19873, -1000, 541, 541, -1000, -1000, -1000, 16427, 1162,
	831, 39920, -1000, -1000, -1000, 35238, -1000, 1127, 1123, 825,
	-1000, -1000, -1000, -1000, -1000, 1277, 41313, -1000, -1000, -213,
	-1000, 959, -184, -1000, -1000, 1909, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1717, -1000, 596, 1153, 1153, 1077, 1066,
	1408, -1000, 14702, -1000, 1916, -1000, -1000, 1298, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2401, 2396, 1585, 1834, 2395, 2393, 2389, 2388, 2385,
	2383, 2382, 2379, 2378, 2377, 2376, 2373, 2372, 2370, 2369,
	2368, 2359, 2357, 2352, 1825, 2346, 1817, 2342, 2340, 2339,
	2337, 1798, 2335, 2333, 2331, 2330, 2329, 2327, 1796, 2322,
	1789, 2320, 2318, 2316, 2313, 2312, 1766, 2309, 88, 108,
	1764, 2304, 2301, 1732, 1705, 1700, 2298, 1697, 2297, 2289,
	1686, 1663, 2287, 100, 2285, 2282, 2278, 1651, 1640, 2273,
	2272, 2270, 142, 2267, 1634, 2266, 2265, 2264, 2257, 2256,
	2254, 2250, 2249, 2246, 2245, 2242, 2240, 2239, 2238, 2237,
	2236, 2234, 2233, 2232, 152, 2230, 2226, 1621, 1603, 2225,
	2222, 24, 37, 9, 60, 32, 147, 2679, 131, 2221,
	2219, 2216, 2215, 2214, 2209, 28, 97, 96, 2207, 158,
	2206, 2205, 49, 38, 21, 19, 2204, 94, 2203, 2195,
	1035, 47, 2191, 2190, 129, 2189, 84, 20, 36, 146,
	143, 111, 116, 2185, 2184, 2183, 44, 115, 1, 2182,
	2179, 11, 79, 29, 2178, 33, 35, 2177, 2176, 127,
	2173, 58, 98, 1517, 109, 118, 16, 87, 2171, 54,
	13, 64, 2169, 2164, 151, 43, 2163, 34, 72, 140,
	2160, 63, 154, 120, 73, 126, 128, 2156, 2155, 2153,
	104, 2143, 114, 80, 2141, 2139, 75, 2137, 95, 135,
	2134, 2133, 2132, 93, 2130, 124, 2129, 2128, 150, 138,
	110, 5, 42, 70, 6, 1516, 1515, 132, 89, 52,
	50, 2127, 2487, 941, 732, 56, 102, 78, 51, 103,
	46, 76, 139, 22, 2126, 2125, 130, 2124, 2123, 2122,
	2121, 2117, 105, 2116, 2112, 27, 2110, 69, 61, 48,
	77, 31, 487, 125, 112, 144, 99, 2109, 83, 122,
	2108, 66, 2107, 2106, 1498, 117, 2105, 2102, 2099, 1433,
	1170, 1011, 257, 2098, 2097, 870, 26, 2096, 2092, 90,
	2091, 113, 107, 92, 136, 293, 55, 2090, 121, 30,
	2089, 40, 17, 0, 634, 630, 2088, 119, 65, 2087,
	2086, 2085, 2084, 23, 4, 10, 7, 8, 3, 25,
	18, 2083, 2082, 123, 85, 59, 2081, 149, 2077, 2073,
	2070, 39, 2068, 14, 2067, 12, 2066, 2065, 15, 2,
	2064, 2060, 137, 2059, 91, 2058, 1849, 2057, 145, 2056,
	2055, 1699, 2051, 57, 106,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 9, 6, 6, 6,
	6, 6, 11, 11, 12, 20, 15, 22, 10, 18,
	16, 14, 14, 19, 19, 117, 117, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 114, 114, 119, 119, 119, 121, 121, 118,
	118, 113, 113, 24, 24, 61, 61, 104, 54, 54,
	54, 291, 291, 292, 292, 100, 100, 101, 101, 101,
	101, 102, 102, 103, 103, 103, 30, 30, 30, 26,
	26, 26, 26, 26, 27, 27, 28, 28, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 38, 38, 39, 39, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 45, 45, 45, 43, 43, 43, 42, 42, 42,
	41, 41, 41, 44, 44, 44, 165, 165, 164, 164,
	168, 168, 46, 46, 46, 46, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 49, 49, 49, 49, 49, 49, 49, 260,
	260, 259, 47, 47, 234, 234, 50, 50, 191, 191,
	51, 51, 51, 51, 51, 52, 52, 62, 62, 332,
	332, 332, 336, 336, 337, 337, 338, 338, 338, 338,
	338, 338, 338, 334, 334, 57, 57, 57, 57, 58,
	58, 58, 59, 59, 99, 99, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 68, 68, 68, 70, 67,
	67, 67, 69, 69, 69, 69, 71, 71, 72, 72,
	72, 72, 72, 73, 73, 285, 283, 283, 284, 284,
	144, 144, 144, 144, 144, 145, 145, 145, 290, 290,
	290, 290, 290, 290, 289, 289, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 86, 86, 86, 94, 94, 94, 94,
	94, 94, 94, 75, 75, 80, 80, 80, 80, 80,
	76, 76, 81, 81, 82, 82, 83, 83, 83, 83,
	83, 83, 77, 77, 77, 77, 85, 85, 85, 85,
	84, 84, 90, 90, 90, 90, 90, 90, 87, 87,
	87, 87, 88, 88, 88, 91, 91, 91, 91, 78,
	78, 79, 79, 92, 92, 93, 93, 93, 93, 93,
	89, 89, 89, 333, 333, 335, 335, 55, 55, 34,
	34, 35, 35, 146, 146, 147, 147, 213, 213, 213,
	213, 148, 148, 120, 120, 120, 212, 301, 301, 302,
	302, 302, 302, 302, 302, 303, 303, 303, 303, 303,
	303, 303, 299, 299, 300, 297, 297, 298, 298, 298,
	298, 339, 339, 211, 211, 151, 151, 306, 306, 306,
	306, 304, 304, 304, 304, 304, 307, 305, 308, 308,
	308, 308, 308, 246, 246, 246, 96, 96, 36, 36,
	126, 126, 37, 37, 33, 33, 33, 195, 195, 155,
	155, 251, 251, 251, 137, 137, 115, 115, 115, 17,
	13, 13, 13, 13, 13, 13, 23, 23, 21, 21,
	196, 196, 197, 197, 56, 56, 60, 60, 65, 65,
	95, 95, 95, 95, 95, 95, 25, 25, 25, 25,
	29, 29, 29, 29, 64, 64, 341, 341, 133, 133,
	133, 133, 134, 134, 208, 208, 209, 209, 342, 342,
	210, 210, 210, 128, 127, 129, 129, 32, 32, 32,
	122, 122, 123, 123, 124, 124, 125, 125, 343, 343,
	53, 53, 53, 98, 98, 140, 140, 205, 205, 205,
	207, 207, 206, 206, 206, 181, 181, 181, 97, 97,
	160, 160, 170, 170, 171, 171, 257, 172, 172, 63,
	63, 107, 107, 105, 105, 105, 105, 105, 105, 106,
	106, 106, 108, 108, 108, 108, 108, 108, 108, 111,
	111, 111, 112, 112, 112, 110, 110, 314, 314, 314,
	317, 317, 313, 315, 315, 316, 316, 340, 340, 182,
	182, 182, 150, 149, 149, 153, 153, 152, 154, 154,
	250, 250, 250, 179, 179, 179, 179, 200, 200, 198,
	198, 199, 199, 201, 201, 202, 202, 202, 203, 203,
	204, 204, 178, 178, 230, 230, 109, 109, 109, 159,
	159, 159, 161, 161, 220, 220, 220, 221, 221, 219,
	219, 219, 219, 252, 252, 252, 252, 252, 252, 252,
	252, 330, 330, 330, 331, 331, 249, 249, 253, 253,
	253, 253, 253, 253, 247, 247, 247, 247, 248, 248,
	258, 258, 185, 185, 185, 185, 183, 183, 184, 184,
	254, 254, 254, 254, 180, 180, 255, 255, 255, 214,
	214, 261, 261, 261, 279, 279, 158, 158, 158, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 263, 263,
	263, 263, 265, 265, 265, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 278, 278, 278, 278, 278, 266, 266,
	273, 273, 274, 274, 275, 276, 267, 267, 268, 268,
	269, 270, 277, 277, 277, 277, 281, 281, 271, 271,
	271, 271, 271, 272, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 193, 193,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 224, 224, 224, 224, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 309, 309, 309,
	309, 309, 309, 309, 309, 311, 311, 312, 312, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 318,
	318, 319, 319, 321, 321, 322, 322, 323, 324, 324,
	324, 325, 326, 326, 320, 320, 327, 327, 327, 328,
	328, 329, 329, 329, 329, 329, 236, 236, 237, 238,
	244, 244, 244, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 135,
	135, 135, 135, 135, 167, 167, 166, 166, 233, 233,
	231, 231, 235, 235, 186, 186, 280, 280, 280, 280,
	280, 280, 280, 187, 187, 187, 194, 188, 188, 189,
	189, 189, 189, 189, 227, 228, 190, 190, 190, 229,
	229, 239, 243, 243, 242, 241, 241, 240, 240, 217,
	217, 218, 218, 216, 215, 175, 175, 174, 174, 173,
	173, 344, 344, 245, 245, 176, 176, 177, 169, 169,
	256, 256, 256, 256, 162, 162, 142, 142, 163, 163,
	138, 138, 141, 141, 139, 139, 139, 139, 156, 156,
	157, 157, 136, 136, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 282, 282, 282, 232, 130,
	130, 130, 131, 131, 132, 132, 287, 287, 287, 288,
	288, 288, 288, 286, 286, 286, 286, 286, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 4, 6, 6, 6, 5, 5, 7, 7,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 2, 6, 2, 1, 12, 12,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 4, 6, 7, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 2, 7, 3, 2, 2, 2, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 1,
	3, 1, 5, 2, 3, 0, 3, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 2, 6, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 2, 1, 2, 2,
	3, 2, 4, 3, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 7, 7, 7, 4, 5,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 3,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	1, 3, 3, 1, 1, 6, 6, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 5, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 374, -4, -24, -26, -30, -31,
	-51, -38, -39, -40, -50, -46, -52, -53, -54, -55,
	-47, -61, -60, -62, -65, -63, -56, -57, -66, -74,
	-95, -96, -97, -98, -5, -6, -7, -8, -9, 23,
	34, -27, -28, 47, 71, -32, -33, -34, -35, 73,
	-36, -37, 94, -316, 98, -41, -42, -43, -45, -44,
	102, 109, 112, 134, 145, 226, 232, 253, 255, 257,
	264, -105, -107, 251, -58, -59, -67, -68, -69, -70,
	-99, 275, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, 278, -25, -29, -64, 316, -11, -12, -15, -14,
	-16, -13, -20, -22, -19, -21, -23, -17, -18, -10,
	-314, -108, -106, 371, 252, 325, 111, 35, 287, 61,
	105, 259, 341, 348, -111, -109, -110, -112, 268, 333,
	297, 375, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 2, 297, 336, 87, 153,
	237, -332, 2, -163, 297, 87, -139, -130, 364, 4,
	-293, -295, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 48, 55, 60, 61, 62, 67, 64, 65, 66,
	69, 71, 72, 75, 76, 77, 85, 86, 88, 90,
	94, 96, 98, 101, 102, 104, 109, 111, 110, 112,
	122, 123, 128, 130, 135, 141, 142, 145, 146, 154,
	157, 159, 152, 169, 170, 171, 173, 174, 175, 178,
	177, 182, 185, 188, 190, 191, 192, 195, 193, 197,
	198, 200, 199, 205, 207, 208, 210, 213, 216, 219,
	222, 223, 224, 225, 226, 228, 230, 232, 234, 235,
	236, 237, 238, 240, 241, 243, 244, 245, 246, 247,
	251, 249, 250, 252, 253, 254, 255, 257, 259, 260,
	262, 276, 277, 288, 264, 265, 266, 267, 271, 269,
	272, 273, 275, 278, 280, 283, 286, 287, 289, 292,
	293, 290, 285, 296, 298, 299, 300, 301, 302, 303,
	304, 311, 312, 316, 317, 318, 319, 322, 323, 324,
	325, 327, 330, 331, 332, 337, 342, 343, 344, 345,
	346, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 89, 91, 92, 108, 113, 114,
	124, 125, 126, 136, 138, 147, 148, 151, 158, 160,
	161, 162, 163, 164, 166, 180, 194, 204, 206, 217,
	221, 229, 231, 239, 261, 270, 281, 282, 291, 294,
	306, 307, 308, 313, 314, 329, 333, 334, 374, 374,
	2, 170, 236, -138, -130, 87, 374, 374, 374, 374,
	297, 2, 326, 336, -195, 87, 321, 374, 374, -130,
	232, 22, 2, 96, 157, 324, 323, 22, 228, 269,
	299, 301, 2, 374, 374, 374, 374, 374, 2, 336,
	297, 153, 87, 326, -130, 2, -49, 2, 371, -48,
	-4, -31, -40, -50, -46, -24, -26, -38, -54, -53,
	-55, -57, -61, -60, -63, -67, -68, -74, -97, -98,
	275, -336, 2, 22, -337, -338, 73, 102, 134, 268,
	157, 96, 323, 297, 2, 170, 2, -130, 2, -332,
	2, 170, 2, -336, 2, -130, 2, -134, 2, 264,
	-130, 374, 374, 374, 374, 374, 185, 55, 261, 272,
	-72, 312, -71, 306, -285, -73, 2, -164, 195, -130,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 2, -94, 272,
	34, 55, 22, 60, 88, 135, 153, 154, 174, 68,
	69, 235, 185, 171, 311, 175, 273, 298, 312, 73,
	327, 302, 110, 4, 87, 195, 274, 306, 374, 374,
	374, -340, 2, 297, -106, -108, -107, -152, -153, 320,
	165, 107, 215, -105, -107, 2, -314, -94, 272, 2,
	55, 22, -283, 2, -245, 211, -222, 93, -224, 362,
	363, 357, 201, 347, -236, -226, -239, 108, 261, 371,
	-138, -225, 377, 9, -311, -107, 29, -237, -238, 49,
	-130, 7, 8, 5, 6, -136, -263, -232, -272, 315,
	115, 203, -309, -310, 4, -293, -287, -264, -274, -268,
	-271, 166, 58, 79, 80, 83, 81, 84, 274, 326,
	50, 28, 113, 114, 221, 229, 294, 313, 314, 147,
	204, 148, 56, 136, 180, 101, 37, 39, 41, 42,
	51, 52, 89, 91, 92, 124, 125, 126, 158, 160,
	161, 162, 163, 164, 206, 239, 281, 291, 307, 308,
	334, -294, -275, -276, -269, -270, 74, 116, 133, 156,
	149, 168, 172, 181, 183, 196, 218, 220, 258, 279,
	-277, 278, -341, 2, 312, 312, 2, -341, 2, -341,
	2, -133, 2, 312, 309, -317, 240, -313, -130, -317,
	374, 374, 376, 374, -149, -150, 2, 22, 99, -177,
	2, 371, -252, 2, 369, -254, -138, -107, -253, 371,
	212, -3, 2, -254, 147, -138, 2, -254, 147, -138,
	2, -130, 2, -141, 147, -138, -286, 4, -293, -295,
	-294, -296, 58, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 49, 50, 54, 57, 59, 68, 73,
	78, 79, 81, 80, 82, 83, 84, 93, 95, 97,
	99, 100, 103, 105, 107, 115, 117, 129, 131, 132,
	134, 137, 139, 150, 153, 155, 165, 167, 176, 179,
	184, 186, 187, 201, 202, 203, 209, 211, 212, 214,
	215, 227, 233, 242, 256, 268, 274, 284, 295, 297,
	305, 309, 310, 315, 320, 321, 326, 328, 335, 336,
	338, 339, 340, 341, 309, 376, -163, -156, -130, -216,
	-215, 373, -222, 2, -222, 2, 132, 371, -174, -175,
	-215, -216, 2, -164, 147, -130, 2, -164, 2, 153,
	-130, 147, 2, -130, 22, 132, 2, 167, 2, 167,
	2, -255, 2, -254, -165, 147, 2, -164, -165, 147,
	2, -142, 147, 2, -141, -130, 147, 2, -156, 147,
	2, -191, 371, -260, 2, -259, -288, 4, -293, -295,
	-294, 333, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 272, 211, 376, -164, -222, -234,
	371, 132, -222, 211, -130, 2, 276, 2, 371, -72,
	53, 312, -209, 2, -210, -127, -128, -129, 169, 234,
	238, 346, 309, 352, 132, -283, -168, 373, -94, 2,
	-291, 2, -289, 9, -288, 5, 276, 2, 235, 273,
	55, 132, 2, 2, -333, 2, 211, 132, 2, 132,
	2, 132, 2, 132, 2, 132, 2, 2, 235, 273,
	2, 129, 2, 311, 2, 2, 132, 2, 169, 234,
	288, 2, 297, 336, 2, 132, 132, 346, 2, -180,
	-254, -152, -153, -179, -198, -199, 184, 117, 209, -182,
	22, 99, -182, -182, 44, 372, 372, -94, 276, 2,
	10, 11, 57, 33, 362, 363, 364, 365, 127, 366,
	367, 360, 361, 359, 350, 351, 354, 355, 356, 70,
	353, 352, 63, 189, 263, 118, 119, 120, 121, 248,
	13, 14, 15, 26, 214, 183, 347, 149, 279, 357,
	16, 17, 18, 168, 36, 150, -135, -143, -222, -222,
	-222, -222, -222, 220, -173, -217, 369, -107, 371, 371,
	-107, -222, -166, 371, 7, -107, -231, 369, -240, -222,
	-174, 371, 5, 371, 5, -318, 342, 129, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 231, -281, 337,
	-281, -281, -265, 371, -265, -266, 371, -265, 343, 348,
	371, 346, 22, -208, -209, -208, 309, -134, 376, -317,
	-157, 371, -177, -169, -256, -222, 364, -169, -176, -245,
	74, -185, 172, 196, 133, 181, 258, 156, 7, -49,
	-219, 377, 371, 364, -249, 348, -107, -253, 371, -252,
	-138, 371, -117, 249, -116, 21, 23, 102, 331, 108,
	285, 303, 111, 265, 249, 108, 111, 249, 285, 303,
	265, 249, 108, 377, 111, -291, -139, 376, -286, 364,
	289, 372, -162, -138, -175, 371, -151, 201, -126, -315,
	341, -151, 371, -131, 147, 2, -130, -315, 201, -255,
	-140, -138, -140, 275, -130, 30, -119, 376, 48, 254,
	108, -119, 108, -119, 376, 108, -119, 108, 108, -166,
	-222, 372, 376, -332, -338, 73, 371, 30, -233, -261,
	-262, -264, -273, -267, -271, -272, 40, 46, 45, 304,
	194, 270, 282, 329, 151, 38, 210, 159, 4, 158,
	160, 161, 162, 163, 164, 281, 37, 239, 125, 126,
	124, 101, 92, 91, 206, 42, 41, -275, -276, -269,
	-270, 89, 307, 308, 166, 39, 52, 51, 334, 291,
	-292, -291, -332, -285, -166, 30, -209, 2, -342, 376,
	182, -145, 188, 200, 141, 212, 344, -290, 5, 4,
	-232, -246, 93, 185, -272, 8, 363, -282, 7, 362,
	-284, -283, -284, 77, 373, -286, -164, 22, 277, 2,
	-285, -335, 129, -332, -285, -285, -285, -285, -285, 272,
	-49, 129, -130, 182, -285, 2, -285, 2, 297, 153,
	297, -119, 376, -179, -199, -198, -201, -222, 22, -204,
	123, 197, -222, -224, -106, -106, -106, -154, -250, -222,
	233, 153, -285, -279, -261, -278, 244, 245, 243, 247,
	246, -261, -286, 306, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, 183, 149, 279, 36,
	150, -222, 309, -222, -222, -222, -222, 193, 201, 203,
	315, 115, 322, 99, 207, -344, 295, 32, -229, -107,
	371, -244, 27, 284, 22, -236, 261, 371, -217, -222,
	-218, -167, -166, 372, 376, -167, -235, -231, -243, -242,
	338, 372, -166, 335, 22, 99, 364, 2, 7, -192,
	345, 192, 90, 142, 191, -193, 267, -319, 122, 137,
	371, 372, 2, 372, 2, 372, 2, 372, 2, -222,
	-222, -186, 2, -280, -166, 4, 345, 192, 90, 142,
	191, 267, -186, 2, -187, 2, -222, -166, -188, -223,
	-224, 362, 363, 357, 371, 261, -189, 2, -222, -167,
	-222, 43, 179, 310, -190, -222, 132, -166, -222, -222,
	-222, -166, -166, 2, -166, 2, 371, 7, 7, 306,
	306, 7, 64, 65, 346, -134, -313, 30, -156, -159,
	376, 132, 30, 4, -159, 376, 372, 172, 172, -252,
	-185, 172, -183, 218, -183, -183, -330, 371, 370, -249,
	-286, 369, 378, -167, 2, -248, -247, 30, -130, 216,
	372, -138, 376, 309, -196, 68, 59, -212, 147, 59,
	-297, -130, 68, -298, 54, 321, 233, 131, -196, 68,
	-196, 68, 68, -254, 33, -63, 66, 132, 309, -254,
	66, 309, 33, -63, 132, 309, -141, -286, 66, -258,
	349, -130, 132, 372, 376, -146, -156, -147, -130, -213,
	-212, -299, -300, -297, 153, 321, 116, 30, 108, 225,
	30, 211, 201, -122, 300, 108, -214, 339, -205, -63,
	371, 93, 30, -205, -170, -171, -257, -172, -138, 371,
	-130, -164, -165, -165, -141, -142, -130, -156, 372, 376,
	-49, -259, 309, 328, -147, -48, 372, 376, -158, 29,
	369, -192, 371, -258, 376, 132, 352, 309, 372, 312,
	-210, -144, 238, 283, 250, 271, 8, 7, 7, 376,
	-286, -334, -130, 272, -49, -138, -141, -138, -254, -202,
	-282, 371, 363, -203, 261, 262, 376, -115, 31, 97,
	173, -138, 346, -222, -222, 309, -344, 295, -229, -222,
	193, 203, 315, 115, 322, 99, 207, 132, 371, -223,
	-223, -166, -226, 371, -166, 370, 380, 372, -222, 370,
	370, 376, -241, -242, 103, -222, -153, 376, -152, -222,
	-166, -166, 372, 372, 309, 309, 309, 309, 371, -324,
	219, 371, 371, -222, 30, 376, 372, 132, 372, 372,
	-194, 227, 372, 10, 11, 362, 363, 364, 365, 127,
	366, 367, 360, 361, 359, 350, 351, 352, 63, 189,
	263, 13, 14, 15, 168, 150, -223, -223, -223, -166,
	371, 372, -227, -228, 132, 129, 30, -190, -190, -190,
	372, 132, -166, 376, 376, 376, 372, 372, 372, 7,
	372, 376, 372, 346, 346, 372, 129, 65, 371, 372,
	-214, -256, -161, 2, -252, -286, -214, -245, -252, -252,
	-184, 328, 211, 172, -252, -247, 372, -331, 7, -249,
	-248, 7, -221, -220, 130, 199, 372, -130, 371, -249,
	372, -116, -138, -130, -130, 201, -212, 147, -121, 201,
	-261, -130, 371, 371, 173, 173, -130, -130, 147, -130,
	147, -130, -130, -117, 249, -63, 346, 371, -138, 249,
	346, -130, -63, 371, -130, 249, 346, -100, 146, 207,
	289, 132, -138, 372, 372, 376, -131, 153, -131, -63,
	-164, 5, -63, -138, 108, -123, 104, -343, 352, -130,
	-200, -198, -222, -181, -207, 256, 211, -162, 333, -130,
	-181, -160, 376, 132, 352, -162, -119, -119, -119, -119,
	-222, -334, -291, 372, -261, 369, 370, 7, 7, -103,
	341, -291, -334, -283, -283, -127, 319, 62, 238, -283,
	376, -203, -222, -250, -138, 377, -222, -222, -223, -223,
	132, 371, -222, -233, 26, 26, 372, -167, 376, -218,
	-222, 372, -231, 105, -222, 305, 372, 335, -153, -153,
	-153, 5, 192, 142, 191, -193, 191, -193, -193, 7,
	-325, -130, 371, 339, -152, 372, -279, -261, -222, -227,
	-222, -279, -261, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, 99, 201, 207, -223, 376, -167, -228, -227,
	-222, -222, -261, 372, 372, 372, -166, -222, -222, -222,
	372, 7, 237, 87, 297, -48, -178, 137, -258, 376,
	-178, -184, 371, -222, -252, 370, 372, 376, -248, 370,
	376, 379, 352, -249, 371, -156, -247, 309, 309, 108,
	201, 330, -301, -298, -222, -155, -251, -130, -312, 371,
	-309, -310, -136, 371, 371, -114, 102, 275, -197, 108,
	-119, 108, -119, 309, -196, 68, -225, -136, -130, -166,
	309, -225, -166, 309, -225, -103, 132, 296, 289, -148,
	152, -213, 371, -131, 371, 371, -151, 371, -130, -124,
	178, -343, -289, -315, -181, -181, -169, 202, 67, 372,
	-214, -171, -161, -245, 372, -104, 75, -104, 7, 370,
	372, -102, 213, -101, -130, 5, -130, 212, 372, -115,
	-286, 26, 26, -222, -233, 372, -222, -222, 372, -222,
	370, -222, 5, -222, 372, 372, 372, 372, -326, -130,
	-222, 372, 372, 372, -228, 132, 99, 207, 371, -222,
	372, 372, 376, 372, 372, 372, -286, -130, -138, 372,
	-230, 139, 44, -252, -230, -156, -219, 7, -220, -286,
	369, -248, -156, 372, -130, -130, -212, 108, -302, 68,
	-303, 57, 116, 73, 201, 203, 321, 233, 54, 93,
	242, 372, 372, 376, -137, -174, 57, -137, -222, 371,
	-155, -156, 201, 93, 201, 93, 86, 317, -130, -130,
	-138, -130, -130, 371, 372, -138, 372, -130, -292, 306,
	150, -155, 371, -156, -146, 30, -155, 211, -125, 177,
	-343, -289, -122, -206, 371, 211, -63, -181, 352, 86,
	86, 370, 376, 371, 352, 352, -115, -222, -222, 372,
	372, -153, -320, 224, 372, -223, 132, 371, -233, 372,
	-222, -321, 340, -222, -166, -321, 372, -249, 7, 372,
	-212, -130, -286, -130, 116, 147, 203, 173, 371, -223,
	-138, -211, -339, 72, 293, -251, -115, -286, -115, 372,
	-166, 372, 372, 203, 203, -222, -261, -119, -119, 309,
	309, -166, 309, 309, -225, 222, 372, -155, 372, 372,
	-63, 372, -138, -343, -289, -123, 100, -156, 68, -177,
	-107, 371, 371, 371, -101, -102, -291, -291, 372, -153,
	44, -223, -233, 372, 372, -322, -323, -130, -248, 370,
	-303, -131, 201, -222, -132, 371, -148, 371, -137, -153,
	242, -118, 57, -130, -130, -153, 371, 371, -138, -211,
	372, -148, -211, 371, -289, -124, 323, 202, 372, -130,
	-292, -292, 372, -327, 237, 262, -166, 372, 376, 30,
	108, 372, -306, 190, -130, -156, -115, 372, -138, -113,
	328, -286, 372, -166, -166, 371, -148, -211, -148, -155,
	-125, 275, -214, 372, 372, 372, -328, -329, 36, 318,
	77, -222, -328, -323, -325, 116, -304, -307, -305, 211,
	133, 223, 280, 372, 372, -151, -222, 372, 372, -156,
	-148, 372, -170, -103, -103, -329, 230, 128, 261, 230,
	128, -130, -305, 211, -307, 211, 323, 96, -306, 372,
	-211, -214, 26, -308, 198, 254, 48, 275, -308, -304,
	-120, 48, 254, -148, -329, 20, 203, 93,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 62, 0,
	0, 149, 151, 0, 0, 158, 160, 162, 164, -2,
	167, 169, 0, 0, 0, 180, 182, 184, 186, 188,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 649, -2, 0, 285, 287, 296, 298, 300, 302,
	303, 0, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 368, 370, 372, 374, 375, 377, 379,
	381, 0, 570, 572, 574, -2, 64, 65, 66, 67,
	68, 69, 77, 78, 79, 80, 71, 73, 74, 76,
	685, -2, 696, 0, 0, 0, 0, -2, 0, -2,
	-2, -2, 0, 0, 662, 664, 666, 668, -2, 0,
	0, -2, 7, 12, 14, 16, 19, 21, 23, 25,
	27, 29, 31, 33, 35, 37, 39, 42, 48, 50,
	52, 55, 57, 59, 61, 63, 0, 0, 0, 0,
	0, 0, 124, 269, 0, 1264, 1188, 1194, 1195, 1219,
	1220, 1221, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 150, 152,
	153, 0, 0, 0, 1190, 1264, 159, 161, 163, 165,
	0, 171, 0, 0, 0, 0, 537, 168, 170, 260,
	1324, 262, 264, 0, 0, 0, 0, 174, 175, 176,
	177, 178, 179, 181, 183, 185, 187, 189, 190, 0,
	0, 0, 0, 0, 259, 257, 212, 213, 0, 242,
	243, 244, 245, 246, 248, 216, 218, 219, 221, 223,
	225, 227, 228, 230, 232, 233, 235, 237, 238, 240,
	0, 0, 266, 272, 273, 274, 276, 277, 278, 279,
	280, 281, 282, 0, 130, 0, 458, 255, 253, 0,
	126, 0, 567, 0, 268, 568, 569, 564, 565, 1351,
	593, 286, 288, 297, 299, 301, -2, -2, 1441, -2,
	310, -2, 318, 1447, 0, 321, 322, 325, -2, 208,
	347, 349, 351, 353, 355, 357, 359, 361, 363, 365,
	367, 369, 371, 373, 376, 378, 380, 382, 383, 0,
	0, 0, 387, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 386, 388, 389, 390, 0, 571, 573,
	575, 0, 527, 687, -2, 660, 661, -2, 0, 691,
	691, 691, 0, 0, 661, 659, 0, 289, 0, 291,
	0, 387, 294, 295, 326, 327, 1173, 1174, 890, 0,
	0, 0, 0, 0, 0, 992, 994, 1414, 1441, 0,
	996, 997, 0, 999, 1001, 1002, 0, 1005, 1006, 1158,
	1190, 1204, 1205, 1206, 1207, 0, 0, 1210, 0, 1212,
	1213, 1214, 1060, 1016, -2, -2, 1202, 818, 819, 820,
	821, -2, 1455, 1020, 1023, 1026, 1029, 1030, 1033, 1034,
	0, 1398, 1415, 1416, 1437, 1438, 1446, 1450, 1451, 1422,
	1434, 1423, 1410, 1420, 1432, 1270, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1228, 852, 853, 858, 859, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	861, 0, 595, 577, 586, 595, 579, 580, 581, 582,
	583, 584, 585, 588, 0, 677, 1330, 680, 1201, 678,
	663, 665, 0, 667, 0, 0, 671, 693, 692, 726,
	727, 0, 675, 676, 686, 742, 780, 757, 748, 0,
	0, 2, 70, 0, 1422, 780, 72, 0, 1422, 780,
	75, 0, 81, 0, 1422, 1193, 0, 1233, 1234, 1235,
	1236, 1237, 1455, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 0, 0, 270, 271, 1198, 1196,
	1197, 0, 154, 155, 156, 157, 0, 0, 1191, 1167,
	1165, 1166, 166, 506, 1422, -2, 529, 506, 533, -2,
	684, 1422, 609, 261, 263, 0, 173, 0, 622, 0,
	624, 0, 639, 786, 116, 1422, 193, 206, 116, 1422,
	196, 116, 1422, 199, 1186, 116, 1422, 202, 203, 1422,
	205, 256, 0, 0, -2, 249, 251, 1229, 1230, 1231,
	1232, -2, 247, 217, 220, 222, 224, 226, 229, 231,
	234, 236, 239, 241, -2, 0, 0, 0, 457, 0,
	0, 0, 566, 0, 592, 304, 0, 307, 0, 309,
	1409, -2, -2, 313, 596, 600, 601, 602, 0, 0,
	0, 0, 0, 0, 0, 323, 209, 0, 384, 385,
	393, 394, 131, 132, 344, 345, 0, 397, 418, 430,
	0, 0, 401, 403, 456, 405, 0, 0, 407, 0,
	409, 0, 411, 0, 413, 0, 415, 417, 419, 431,
	421, 686, 423, 0, 425, 429, 0, 434, 0, 436,
	437, 438, 0, 0, 444, 0, 0, 391, 392, 116,
	784, -2, 0, 655, 705, 706, 0, 0, 0, 0,
	689, 690, 0, 0, 0, 651, 652, 290, 0, 293,
	0, 0, 0, 0, 1093, 1094, 1095, 1096, 1097, 1098,
	1101, 1102, 1099, 1100, 1103, 1104, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 1107, 1108, 0, 0, 1110, 0, 1112, 0, 0,
	0, 0, 0, 0, 1172, 0, 0, 1109, 895, 896,
	897, 929, 930, 0, 993, 1169, 1162, 995, 0, 1115,
	-2, 1116, 0, 0, 998, 1003, 1004, 1115, 0, 1157,
	-2, 0, 1209, 0, 887, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1138, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 855, 866,
	863, 862, 839, 0, 838, 836, 0, 840, 0, 0,
	0, 0, 0, 576, -2, 578, 0, 590, 0, 679,
	0, 0, 728, 731, 1178, 1182, 1183, 731, 0, 1175,
	0, 0, 0, 0, 777, 777, 777, 775, 751, 0,
	757, 0, -2, 781, 769, 0, -2, 748, 0, 0,
	782, 0, 82, 561, 95, 0, 561, 561, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 771, 1189, 0, 1163, 1164,
	146, 0, 0, 1184, 1168, 464, 0, 0, 528, 0,
	683, 0, 0, 0, 1422, 536, 1222, 611, 0, 790,
	0, 625, 0, 0, 787, 0, 191, 0, 114, 115,
	0, 194, 0, 197, 0, 0, 200, 0, 0, 0,
	1116, 686, 0, 0, 275, 0, 0, 686, 0, 1118,
	798, 799, 800, 801, 802, 887, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	849, 0, 824, 824, 824, 841, 842, 850, 851, 856,
	857, 868, 869, 871, 873, 867, 867, 867, 864, 865,
	771, 133, 0, 0, 0, 0, -2, 315, 0, 598,
	0, 603, 335, 336, 337, 605, 606, 319, 338, 339,
	340, 341, 342, 343, 0, 523, 0, 525, 1215, 0,
	316, 328, 317, 320, 0, 210, 395, 396, 398, 399,
	400, 404, 0, 453, 406, 408, 410, 412, 414, 422,
	426, 686, 432, 435, 439, 440, 441, 442, 0, 0,
	0, 526, 0, 658, 703, 704, 709, 713, 714, 717,
	720, 721, 711, 890, 672, 673, 674, 697, 698, 548,
	0, 0, 292, 891, 794, 795, 843, 844, 845, 846,
	847, 892, 893, 0, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, -2, -2, -2, -2, -2, -2,
	-2, -2, 916, 917, 918, 919, 920, 921, 922, 923,
	-2, -2, -2, 927, 928, -2, 1111, 1113, 0, 1172,
	0, -2, 0, -2, -2, -2, -2, 941, 0, 943,
	946, 948, 950, 0, 0, 0, 0, 1171, 960, 1149,
	0, 0, 1090, 1091, 1092, 945, 0, 0, 1170, 1161,
	0, 0, 1114, 1000, 0, 0, 0, 1122, 1156, 1152,
	0, 1007, 696, 0, 0, 0, 0, 1014, 0, 1218,
	874, 875, 876, 877, 878, 879, 888, 1070, 0, 0,
	0, 1021, 1022, 1024, 1025, 1027, 1028, 1031, 1032, 0,
	0, 0, 1038, 0, 1125, -2, -2, -2, -2, -2,
	-2, -2, 0, 1040, 0, 1042, 1116, 1135, 0, 0,
	963, 0, 0, 0, 0, 1441, 0, 1045, 1116, 1143,
	0, 0, 0, 0, 0, 1116, 0, 1148, 0, 0,
	0, 0, 0, 1056, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 448, 0, 589, 681, 0, 0, 790,
	0, 0, 0, 1181, 790, 0, 1177, 0, 0, 0,
	0, 0, 772, 776, 773, 774, 0, 0, 757, 769,
	739, 0, 0, 0, 746, 747, 768, 0, 767, 756,
	-2, 0, 0, 0, 0, 0, 560, 97, 1422, 0,
	118, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 1192, 0, 136,
	0, 1199, 0, 0, 0, 0, 0, 463, 1198, 465,
	467, 468, 469, 470, 1223, 0, 1223, 0, 0, 0,
	0, 0, 0, 613, 619, 0, 708, 0, 637, 627,
	0, 0, 0, 637, 641, 642, 644, 645, 0, 0,
	788, 207, 116, 116, 1187, 116, 116, 204, 258, 0,
	214, 250, 0, 0, 0, 252, 254, 0, 791, 793,
	0, 803, 0, 145, 0, 0, 0, 0, 308, 0,
	597, 604, 0, 332, 0, 334, 524, 1217, 1216, 0,
	211, 455, 283, 424, 427, 450, 451, 452, 785, 0,
	715, 0, 0, 712, 718, 719, 0, 700, 546, 547,
	0, 0, 0, -2, -2, 0, 0, 0, 961, -2,
	942, 944, 947, 949, 951, 0, 0, 0, 0, 0,
	0, 0, 962, 1115, 0, 1159, 1162, -2, 1117, 1120,
	1121, 0, 0, 1153, 0, 0, 0, 0, 695, 696,
	696, 696, 1013, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 0, 0, 0, 0, 1037, 0, 1039, 1041,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 967, 968, 0,
	1115, 1044, 1141, 1142, 0, 0, 0, 0, 0, 0,
	1050, 0, 1147, 0, 0, 0, 1054, 1055, 1057, 0,
	822, 0, 848, 870, 872, 860, 0, 449, 686, 1200,
	723, 1179, 771, 730, 732, 1180, 723, 1176, 759, 0,
	761, 0, 0, 0, 763, 0, 752, 0, 754, 769,
	744, 0, 0, 737, 0, 736, 757, 765, 0, 0,
	783, 96, 550, 0, 0, 0, 99, 1422, 107, 0,
	478, 0, 0, 0, 0, 0, 563, 108, 1422, 116,
	1422, 116, 109, 83, 561, 84, 0, 0, 556, 0,
	0, 549, 85, 0, 558, 0, 0, 145, 0, 0,
	147, 0, 1185, 472, 505, 0, 0, 1223, 0, 461,
	506, 530, 532, 0, 0, 615, 619, 0, 618, 684,
	637, 707, 789, 620, 637, 0, 0, 0, 629, 626,
	623, 790, 0, 0, 0, 0, 192, 195, 198, 201,
	1117, 265, 0, 0, 1119, 0, 796, 0, 0, 125,
	0, 134, 267, 305, 306, 311, 330, 331, 333, 329,
	0, 0, 0, 699, 548, 0, 894, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1150, 0, 0, 0,
	1161, -2, 1123, 1151, 1155, 0, 1008, 0, 0, 0,
	0, 1211, 880, 881, 882, 883, 884, 885, 886, 0,
	1068, 1069, 1073, 0, 0, 1019, 0, 0, 1124, 1134,
	1136, 964, 965, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, -2, -2, -2, 982, 983, 984, -2,
	-2, -2, 0, 0, 0, 1137, 0, 0, 1139, 1140,
	1144, 1145, 0, 1047, 1048, 1049, 1146, 0, 0, 0,
	854, 0, 0, 0, 0, 0, 725, 0, 729, 0,
	725, 760, 0, 779, 762, 742, 753, 0, 750, 740,
	0, 741, 0, 769, 0, 0, 749, 0, 0, 0,
	0, 117, 476, 495, 0, 0, 539, 545, 545, 0,
	1017, 1018, 0, 0, 0, 101, 0, 0, 0, 0,
	105, 0, 111, 0, 0, 0, 90, 0, 0, 0,
	0, 89, 0, 0, 88, 123, 0, 0, 148, 459,
	0, 466, 0, 0, 0, 464, 0, 0, 0, 617,
	619, 0, 610, 611, 172, 621, 635, 636, 634, 0,
	637, 643, 640, 646, 0, 0, 127, 0, 0, 797,
	804, 143, 1314, 141, 138, 140, 284, 710, 716, 701,
	548, 0, 0, -2, 0, 954, -2, -2, 1086, 1117,
	1160, 1154, 1208, 696, 1009, 1011, 1012, 889, 1075, 1072,
	0, 1059, 1035, 1036, 1133, 0, 0, 0, 0, 1117,
	1088, 1046, 0, 1052, 1053, 823, 445, 446, 447, 682,
	1064, 0, 0, 733, 1064, 0, 757, 755, 738, 734,
	0, 745, 0, 766, 552, 554, 98, 0, 477, 0,
	480, 0, 0, 0, 0, 486, 487, 0, 0, 0,
	0, 497, 504, 0, 548, 1203, 0, 548, 0, 0,
	0, 0, 0, 113, 0, 0, 562, 0, 116, 116,
	551, 0, 0, 0, 0, 557, 0, 559, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 619,
	0, 612, 613, 0, 0, 0, 628, 638, 0, 0,
	0, 792, 0, 0, 0, 0, 702, -2, -2, 955,
	1087, 0, 696, 0, 1061, -2, 0, 0, 0, 1089,
	0, 669, 0, 724, 722, 670, 778, 769, 0, 764,
	100, 0, 481, 482, 1223, 0, 485, 488, 0, 490,
	1225, 472, 0, 501, 502, 540, 541, 544, 542, 545,
	696, 499, 0, 102, 103, 112, 120, 104, 110, 0,
	0, 696, 0, 0, 770, 0, 504, 0, 494, 472,
	462, 504, 0, 0, 614, 615, 0, 0, 0, 647,
	648, 0, 0, 0, 142, 0, 137, 139, 1010, 1078,
	0, -2, 0, 990, 1051, 1063, 1065, 0, 743, 735,
	479, 483, 0, 0, 510, 0, 498, 0, 548, 0,
	0, 122, 0, 553, 555, 0, 0, 0, 0, 472,
	504, 460, 472, 0, 616, 617, 0, 631, 790, 633,
	0, 0, 144, 0, 0, 0, 1074, 991, 0, 0,
	0, 489, 515, 0, 0, 0, 543, 1008, 506, 106,
	0, 119, 0, 0, 0, 0, 492, 472, 534, 0,
	608, 0, 632, 145, 145, 1071, 1076, 1079, -2, 1382,
	1261, 0, 1077, 1066, 1067, 0, 491, 511, 512, 0,
	507, 508, 509, 1224, 503, 510, 121, 92, 94, 0,
	493, 504, 790, 128, 129, 0, 1081, 1082, 1083, 1084,
	1085, 484, 513, 0, 514, 0, 0, 0, 515, 475,
	472, 630, 0, 516, 0, 519, 520, 0, 517, 500,
	471, 473, 474, 535, 1080, 518, 521, 522,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 360, 3, 366, 361, 3,
	371, 372, 364, 362, 376, 363, 373, 365, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 380, 375,
	350, 352, 351, 354, 377, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 369, 3, 370, 367, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 378, 359, 379, 357,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 353, 57693, 355, 57694, 356,
	57695, 358, 57696, 368, 57697, 374, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:867
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:879
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "ALTER")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:994
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1043
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1055
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1064
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1073
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1142
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1165
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = nil
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = DropCascade
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = DropRestrict
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = DropDefault
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1237
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1238
		{
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			return unimplemented(sqllex, "alter using")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1242
		{
		}
	case 123:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.str = "CSV"
		}
	case 128:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "CREATE")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "DELETE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "DROP")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1581
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			return helpWith(sqllex, "DELETE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "INSERT")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{ /* SKIP DOC */
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			return helpWith(sqllex, "GRANT")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "RESET")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1890
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			return helpWith(sqllex, "RESET")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1916
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1924
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{ /* SKIP DOC */
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1932
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			return unimplemented(sqllex, "set local")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1999
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2021
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			return unimplemented(sqllex, "set from current")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = Low
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = Normal
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = High
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2138
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			return helpWith(sqllex, "SHOW")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.str = "client_encoding"
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2386
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2426
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2430
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2434
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2442
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2448
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2452
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2456
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2589
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = DropDefault
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			return unimplemented(sqllex, "match full")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2809
		{
			return unimplemented(sqllex, "match partial")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			return unimplemented(sqllex, "match simple")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2811
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2821
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2824
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			return unimplemented(sqllex, "no action")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			return unimplemented(sqllex, "action set null")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			return unimplemented(sqllex, "action set default")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2872
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2876
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2937
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = true
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = false
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2968
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2972
		{
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = Ascending
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = Descending
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3012
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3014
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = true
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = false
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3123
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3136
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.str = ""
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.str = ""
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = ReadOnly
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = ReadWrite
		}
	case 607:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.str = ""
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.str = ""
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			return helpWith(sqllex, "INSERT")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3399
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 638:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3439
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3603
		{
			return helpWith(sqllex, "SELECT")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3604
		{
			return helpWith(sqllex, "VALUES")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3605
		{
			return helpWith(sqllex, "TABLE")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			return helpWith(sqllex, "SELECT")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3695
		{
			return helpWith(sqllex, "TABLE")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3706
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3715
		{
			return unimplemented(sqllex, "cte")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3719
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3723
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3727
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = true
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = false
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = false
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = true
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3751
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3822
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3874
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			return helpWith(sqllex, "VALUES")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &From{}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3976
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4021
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4058
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = nil
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = false
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.str = astFullJoin
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.str = astLeftJoin
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.str = astRightJoin
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.str = astInnerJoin
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4242
		{
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4342
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4350
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4385
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4475
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = nil
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4540
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4636
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4668
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4708
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 870:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = year
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = month
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = day
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = hour
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = minute
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = month
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = hour
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = minute
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = minute
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = nil
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = second
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4803
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4838
		{
			return unimplemented(sqllex, "at tz")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5112
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5285
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5338
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5339
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5352
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5379
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5380
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5384
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5411
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5412
		{
			return unimplemented(sqllex, "current role")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5421
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5442
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5447
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5452
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5461
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5462
		{
			return unimplemented(sqllex, "treat")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5499
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5508
		{
			return unimplemented(sqllex, "within group")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5509
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.str = ""
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5606
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5607
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5608
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5612
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5618
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5619
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5620
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5621
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5622
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = Any
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = Some
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = All
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = Plus
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = Minus
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = Mult
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = Div
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = Mod
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = Bitand
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = Bitor
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = Pow
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = Bitxor
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = LT
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = GT
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = EQ
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = LE
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = GE
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = NE
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = Like
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = NotLike
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = ILike
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = NotILike
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5977
		{
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5978
		{
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6140
		{
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6176
		{
			return unimplemented(sqllex, "func const")
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6185
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = DNull
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6212
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.str = ""
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6253
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
