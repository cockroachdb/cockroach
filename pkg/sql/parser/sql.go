// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRANSACTION = 57620
const TREAT = 57621
const TRIM = 57622
const TRUE = 57623
const TRUNCATE = 57624
const TYPE = 57625
const UNBOUNDED = 57626
const UNCOMMITTED = 57627
const UNION = 57628
const UNIQUE = 57629
const UNKNOWN = 57630
const UPDATE = 57631
const UPSERT = 57632
const USER = 57633
const USERS = 57634
const USING = 57635
const VALID = 57636
const VALIDATE = 57637
const VALUE = 57638
const VALUES = 57639
const VARCHAR = 57640
const VARIADIC = 57641
const VIEW = 57642
const VARYING = 57643
const WHEN = 57644
const WHERE = 57645
const WINDOW = 57646
const WITH = 57647
const WITHIN = 57648
const WITHOUT = 57649
const YEAR = 57650
const ZONE = 57651
const NOT_LA = 57652
const WITH_LA = 57653
const AS_LA = 57654
const POSTFIXOP = 57655
const UMINUS = 57656

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5518

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	333, 31,
	-2, 437,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	1, 410,
	187, 410,
	227, 410,
	329, 410,
	331, 410,
	333, 410,
	-2, 420,
	-1, 66,
	1, 413,
	187, 413,
	227, 413,
	329, 413,
	331, 413,
	333, 413,
	-2, 419,
	-1, 75,
	1, 31,
	333, 31,
	-2, 437,
	-1, 438,
	1, 200,
	333, 200,
	-2, 1011,
	-1, 482,
	108, 447,
	160, 447,
	185, 447,
	-2, 416,
	-1, 485,
	108, 446,
	160, 446,
	185, 446,
	-2, 414,
	-1, 626,
	108, 446,
	160, 446,
	185, 446,
	-2, 417,
	-1, 686,
	330, 943,
	-2, 936,
	-1, 687,
	330, 944,
	-2, 937,
	-1, 693,
	5, 612,
	330, 612,
	-2, 1122,
	-1, 717,
	5, 573,
	-2, 1096,
	-1, 718,
	5, 606,
	330, 606,
	-2, 1098,
	-1, 719,
	5, 581,
	-2, 1099,
	-1, 720,
	5, 580,
	-2, 1100,
	-1, 721,
	5, 606,
	330, 606,
	-2, 1103,
	-1, 722,
	5, 606,
	330, 606,
	-2, 1104,
	-1, 723,
	5, 607,
	-2, 1107,
	-1, 724,
	5, 567,
	-2, 1108,
	-1, 725,
	5, 567,
	-2, 1109,
	-1, 726,
	5, 588,
	-2, 1113,
	-1, 727,
	5, 568,
	-2, 1118,
	-1, 728,
	5, 569,
	-2, 1119,
	-1, 729,
	5, 570,
	-2, 1120,
	-1, 730,
	5, 571,
	-2, 1121,
	-1, 731,
	5, 567,
	-2, 1126,
	-1, 732,
	5, 574,
	-2, 1131,
	-1, 733,
	5, 572,
	-2, 1134,
	-1, 734,
	5, 604,
	330, 604,
	-2, 1136,
	-1, 735,
	5, 608,
	-2, 1139,
	-1, 736,
	5, 610,
	-2, 1140,
	-1, 737,
	5, 603,
	330, 603,
	-2, 1144,
	-1, 1012,
	99, 420,
	108, 420,
	144, 420,
	160, 420,
	185, 420,
	191, 420,
	286, 420,
	-2, 731,
	-1, 1021,
	330, 920,
	-2, 908,
	-1, 1240,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 647,
	-1, 1241,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 648,
	-1, 1242,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 649,
	-1, 1246,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 653,
	-1, 1247,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 654,
	-1, 1248,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 655,
	-1, 1251,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 660,
	-1, 1257,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 662,
	-1, 1259,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 666,
	-1, 1260,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 667,
	-1, 1261,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 668,
	-1, 1262,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 669,
	-1, 1289,
	196, 802,
	-2, 805,
	-1, 1318,
	117, 842,
	330, 943,
	-2, 936,
	-1, 1319,
	117, 843,
	-2, 1092,
	-1, 1320,
	117, 844,
	-2, 1010,
	-1, 1321,
	117, 845,
	-2, 978,
	-1, 1322,
	117, 846,
	-2, 994,
	-1, 1323,
	117, 847,
	-2, 1009,
	-1, 1324,
	117, 848,
	-2, 1057,
	-1, 1484,
	99, 420,
	108, 420,
	144, 420,
	160, 420,
	185, 420,
	191, 420,
	286, 420,
	-2, 503,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 661,
	-1, 1489,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 663,
	-1, 1494,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 664,
	-1, 1512,
	196, 801,
	-2, 804,
	-1, 1704,
	1, 504,
	69, 504,
	99, 504,
	108, 504,
	118, 504,
	122, 504,
	124, 504,
	137, 504,
	144, 504,
	149, 504,
	157, 504,
	160, 504,
	172, 504,
	185, 504,
	187, 504,
	191, 504,
	227, 504,
	229, 504,
	286, 504,
	293, 504,
	303, 504,
	304, 504,
	312, 504,
	329, 504,
	331, 504,
	333, 504,
	334, 504,
	-2, 503,
	-1, 1706,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 665,
	-1, 1711,
	147, 0,
	-2, 681,
	-1, 1721,
	196, 803,
	-2, 806,
	-1, 1755,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 708,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 709,
	-1, 1757,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 710,
	-1, 1761,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 714,
	-1, 1762,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 715,
	-1, 1763,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 716,
	-1, 1884,
	147, 0,
	-2, 682,
	-1, 1887,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 685,
	-1, 1888,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 687,
	-1, 1994,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 686,
	-1, 1995,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 688,
	-1, 2002,
	147, 0,
	-2, 717,
	-1, 2058,
	147, 0,
	-2, 718,
	-1, 2123,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	310, 0,
	316, 0,
	-2, 1095,
}

const sqlPrivate = 57344

const sqlLast = 29409

var sqlAct = [...]int{

	687, 2122, 2100, 1658, 2147, 2064, 2101, 2121, 1928, 2102,
	1114, 1849, 1204, 1699, 927, 1106, 1732, 1700, 1482, 1875,
	486, 685, 1974, 307, 677, 1806, 51, 1668, 933, 1212,
	684, 1860, 1605, 88, 88, 88, 1479, 1792, 663, 1954,
	1455, 493, 65, 531, 1606, 309, 88, 88, 88, 291,
	1174, 88, 1854, 1179, 88, 1457, 1469, 507, 1175, 1193,
	774, 549, 88, 88, 1573, 776, 782, 1219, 1405, 1676,
	88, 88, 813, 1523, 88, 1572, 1017, 88, 88, 88,
	88, 1685, 1287, 88, 88, 65, 1178, 753, 929, 1075,
	750, 1115, 1066, 1146, 1399, 491, 1344, 662, 1347, 1211,
	1464, 1297, 657, 1274, 1217, 1271, 797, 1130, 953, 646,
	300, 22, 298, 30, 1098, 876, 1200, 65, 1166, 297,
	16, 299, 8, 612, 786, 755, 1315, 1008, 1139, 647,
	613, 656, 280, 886, 550, 544, 543, 783, 1047, 958,
	1807, 485, 522, 439, 541, 1051, 1108, 1182, 496, 630,
	66, 629, 878, 628, 679, 80, 425, 874, 435, 416,
	790, 537, 84, 494, 611, 1987, 1511, 306, 1988, 1143,
	799, 505, 799, 67, 512, 515, 634, 505, 436, 1111,
	2138, 799, 428, 779, 1107, 490, 22, 2117, 30, 279,
	1805, 293, 20, 2112, 490, 16, 1149, 8, 1480, 2111,
	961, 962, 1149, 2108, 2098, 1214, 779, 1136, 814, 769,
	1149, 1417, 64, 1144, 513, 1416, 483, 2093, 472, 2089,
	779, 2060, 779, 964, 1136, 2054, 2036, 2032, 779, 1805,
	779, 1515, 961, 962, 498, 960, 1516, 2027, 42, 482,
	2026, 473, 1996, 2042, 1102, 1136, 963, 43, 1984, 71,
	1467, 808, 978, 1145, 1142, 964, 1981, 1968, 1965, 1982,
	1805, 779, 1963, 1939, 1099, 1805, 779, 20, 959, 44,
	1938, 961, 962, 1805, 1910, 1768, 73, 1149, 963, 504,
	1889, 1886, 510, 1149, 1136, 517, 1467, 88, 88, 88,
	88, 88, 1878, 553, 964, 1149, 1826, 1825, 1804, 1149,
	1149, 1805, 969, 1715, 1718, 1644, 1149, 74, 1105, 1639,
	1590, 1588, 1105, 1591, 1149, 69, 1441, 963, 1064, 491,
	1587, 70, 1586, 1149, 1147, 1149, 1514, 1512, 1149, 1445,
	1149, 1149, 71, 1444, 969, 1208, 779, 1522, 779, 1153,
	68, 1099, 1149, 1148, 1135, 1104, 1149, 1136, 1105, 800,
	1063, 800, 1291, 1062, 807, 979, 1203, 808, 551, 73,
	800, 1161, 642, 1102, 922, 921, 868, 867, 779, 520,
	566, 503, 75, 969, 526, 1483, 1808, 887, 71, 900,
	587, 1868, 2136, 71, 505, 2120, 515, 979, 2107, 2069,
	74, 2055, 55, 1966, 1141, 641, 961, 962, 69, 1915,
	1911, 1903, 1902, 1901, 70, 73, 1897, 1896, 1895, 1840,
	73, 1834, 88, 1783, 1778, 1777, 1140, 1025, 1776, 964,
	306, 1726, 530, 1110, 980, 1447, 547, 88, 1416, 1704,
	88, 88, 1675, 546, 546, 1648, 74, 1595, 1592, 1580,
	1571, 74, 963, 1542, 1539, 1538, 1536, 1528, 1527, 69,
	1443, 746, 959, 1361, 932, 70, 980, 803, 1481, 798,
	1312, 1311, 641, 640, 1283, 64, 528, 1734, 925, 68,
	2081, 1018, 88, 68, 68, 88, 2039, 88, 88, 88,
	2025, 88, 2024, 2023, 2015, 2013, 2004, 1991, 1977, 1961,
	1925, 42, 538, 1908, 1880, 1843, 88, 1831, 969, 1811,
	43, 1710, 1690, 627, 1543, 1544, 1666, 88, 974, 972,
	973, 965, 966, 967, 968, 970, 971, 1664, 1663, 1661,
	553, 88, 44, 1543, 1544, 1646, 1614, 309, 553, 1613,
	88, 1570, 1532, 1531, 1508, 88, 88, 88, 1503, 88,
	974, 972, 973, 965, 966, 967, 968, 970, 971, 1276,
	780, 1432, 746, 1390, 1833, 1388, 626, 575, 88, 88,
	1375, 745, 1284, 1374, 576, 1354, 88, 1310, 88, 961,
	962, 1207, 505, 88, 788, 1558, 1052, 1055, 1059, 1045,
	553, 553, 965, 966, 967, 968, 970, 971, 309, 1044,
	88, 2119, 964, 88, 1043, 88, 88, 88, 88, 88,
	88, 1543, 1544, 88, 747, 306, 1549, 1042, 88, 88,
	744, 901, 569, 571, 1041, 963, 88, 1040, 1039, 1038,
	619, 1375, 622, 1037, 88, 1549, 1036, 787, 616, 1035,
	1034, 614, 505, 791, 791, 1033, 71, 931, 1032, 1031,
	883, 883, 1030, 88, 483, 55, 88, 1029, 89, 1022,
	64, 802, 526, 1011, 805, 512, 515, 773, 68, 643,
	926, 858, 508, 73, 645, 637, 638, 482, 573, 562,
	560, 2091, 866, 1986, 1891, 1869, 42, 738, 1559, 529,
	618, 1865, 1839, 778, 1838, 43, 1693, 1018, 491, 1543,
	1544, 888, 1199, 310, 74, 811, 789, 792, 1543, 1544,
	1198, 1426, 69, 1549, 957, 1866, 1425, 44, 70, 967,
	968, 970, 971, 936, 579, 1009, 2029, 1989, 1458, 1837,
	1418, 860, 311, 862, 924, 1099, 861, 1692, 1057, 1483,
	581, 864, 1058, 903, 1594, 896, 1593, 895, 889, 1487,
	538, 603, 1024, 582, 1855, 1027, 930, 1560, 1400, 88,
	908, 865, 480, 580, 1107, 1735, 1298, 88, 1519, 1048,
	1014, 88, 1412, 809, 607, 1601, 2072, 680, 2133, 88,
	88, 905, 923, 88, 909, 910, 911, 912, 913, 939,
	88, 938, 940, 2134, 2031, 483, 916, 917, 483, 483,
	756, 955, 757, 1819, 88, 1152, 88, 88, 608, 88,
	1549, 1076, 88, 465, 88, 88, 1438, 88, 949, 553,
	1069, 950, 951, 1021, 287, 1545, 1546, 1547, 1548, 1550,
	1551, 71, 763, 471, 466, 470, 1949, 1948, 1947, 78,
	55, 1554, 1552, 1553, 1545, 1546, 1547, 1548, 1550, 1551,
	756, 761, 757, 283, 1946, 489, 1061, 1645, 73, 65,
	1080, 1082, 1629, 1559, 65, 1628, 762, 1127, 505, 1598,
	1049, 1050, 920, 758, 1079, 1597, 515, 1830, 288, 1068,
	505, 1053, 1068, 1490, 551, 1625, 1431, 1056, 1067, 74,
	1430, 1429, 1358, 77, 1060, 971, 1428, 69, 1258, 579,
	488, 1118, 284, 70, 1150, 2030, 515, 1101, 756, 515,
	757, 309, 1096, 1095, 1072, 1093, 1092, 615, 88, 746,
	519, 1357, 292, 758, 1547, 1548, 1550, 1551, 1229, 88,
	88, 88, 1560, 1194, 1165, 1133, 88, 88, 580, 919,
	558, 475, 1132, 88, 1134, 1122, 1632, 490, 476, 1113,
	1125, 554, 1126, 1128, 1634, 1930, 1123, 1124, 546, 1402,
	546, 1273, 784, 1273, 1087, 1078, 2104, 1090, 1330, 481,
	902, 88, 766, 477, 309, 1298, 1085, 1616, 572, 2079,
	555, 758, 478, 793, 1209, 1280, 1147, 1653, 1097, 2144,
	1278, 764, 1109, 2133, 1109, 600, 1053, 1228, 1056, 1468,
	1386, 590, 1155, 1050, 1049, 1143, 765, 2095, 1154, 309,
	289, 1650, 1201, 1202, 1131, 1551, 1554, 1552, 1553, 1545,
	1546, 1547, 1548, 1550, 1551, 76, 1168, 515, 1170, 601,
	2096, 767, 1281, 505, 740, 591, 1543, 1544, 589, 1406,
	1437, 604, 487, 1476, 290, 1077, 766, 2105, 1472, 1144,
	754, 1651, 2155, 286, 285, 799, 1172, 739, 1147, 79,
	1395, 1392, 1171, 771, 1410, 764, 1169, 1475, 1215, 2018,
	770, 918, 557, 1439, 759, 788, 88, 88, 88, 1470,
	765, 578, 88, 1046, 1962, 88, 1360, 1473, 1197, 1145,
	1142, 88, 88, 88, 88, 88, 1189, 1623, 2106, 1210,
	1065, 605, 1471, 88, 1406, 1295, 88, 88, 1543, 1544,
	2143, 1269, 414, 553, 1006, 577, 88, 1862, 1543, 1544,
	1288, 88, 1147, 88, 759, 1157, 1267, 1292, 1617, 1530,
	88, 1300, 2000, 1686, 1703, 1368, 1159, 1472, 1549, 1477,
	88, 1173, 1317, 1317, 1328, 1285, 1339, 491, 1282, 490,
	1931, 606, 1351, 1352, 1353, 1160, 1475, 1800, 417, 1474,
	1147, 88, 88, 1362, 1306, 1633, 1673, 1158, 1684, 2103,
	1255, 1325, 553, 1364, 650, 578, 1473, 2150, 554, 422,
	1220, 1227, 759, 1385, 418, 310, 554, 1408, 2132, 1263,
	1801, 1559, 1414, 1492, 88, 1272, 88, 1264, 88, 1265,
	1363, 2142, 88, 1270, 1394, 2130, 88, 555, 1848, 419,
	1549, 1191, 594, 1404, 311, 555, 567, 1279, 787, 565,
	1549, 1398, 1446, 1861, 1448, 633, 417, 787, 421, 88,
	1141, 2156, 883, 632, 800, 1764, 1906, 505, 554, 554,
	1420, 1941, 1421, 1422, 1940, 1411, 310, 422, 1474, 1923,
	1401, 2161, 418, 2010, 1419, 491, 1600, 1371, 1486, 65,
	1560, 1367, 1815, 1559, 1192, 1253, 1256, 555, 555, 1818,
	937, 928, 945, 1559, 873, 311, 1817, 419, 1649, 1434,
	1435, 1796, 2065, 1797, 55, 631, 1436, 1440, 1387, 915,
	869, 1389, 1372, 1252, 1876, 1442, 421, 1669, 1863, 1453,
	1850, 1266, 894, 893, 2148, 887, 884, 632, 1268, 1924,
	633, 1799, 871, 491, 1377, 577, 1376, 1681, 1680, 1802,
	536, 1765, 1462, 1460, 872, 1463, 1215, 1766, 1907, 420,
	1133, 1521, 1560, 1485, 1478, 946, 1466, 1132, 820, 1134,
	535, 1450, 1560, 623, 2160, 1423, 1553, 1545, 1546, 1547,
	1548, 1550, 1551, 1814, 1877, 1424, 2149, 488, 1659, 631,
	899, 1841, 692, 1397, 1921, 1677, 1465, 1816, 742, 1309,
	1493, 1491, 491, 2003, 2099, 2151, 1905, 1574, 1709, 423,
	1631, 1537, 1502, 1254, 897, 1506, 1922, 1403, 1449, 1151,
	1507, 1798, 1452, 1509, 1103, 1091, 1372, 420, 1088, 610,
	609, 602, 599, 598, 597, 596, 741, 1611, 1518, 1131,
	1612, 1525, 1526, 595, 592, 1575, 1610, 1552, 1553, 1545,
	1546, 1547, 1548, 1550, 1551, 534, 527, 88, 88, 1545,
	1546, 1547, 1548, 1550, 1551, 1028, 907, 1308, 2062, 1789,
	1621, 1640, 1619, 852, 1569, 1599, 1454, 423, 1577, 1578,
	1579, 1195, 88, 1187, 1129, 1582, 88, 806, 88, 898,
	961, 962, 804, 801, 796, 88, 772, 554, 553, 672,
	768, 1596, 1500, 1603, 760, 1665, 1723, 1956, 88, 1456,
	2134, 88, 635, 964, 533, 501, 1662, 1498, 1637, 1624,
	584, 309, 891, 88, 532, 1958, 555, 1626, 1620, 1627,
	1622, 1630, 85, 85, 281, 3, 963, 1679, 1694, 1205,
	1682, 81, 1084, 2020, 1695, 408, 409, 410, 1641, 1643,
	427, 1385, 1670, 440, 1118, 1215, 1635, 1642, 1671, 65,
	1068, 427, 440, 1652, 1654, 1655, 1083, 1691, 1683, 497,
	497, 88, 1660, 281, 1638, 1808, 281, 281, 516, 281,
	1495, 636, 85, 523, 502, 1728, 1729, 1730, 1672, 310,
	1496, 1068, 969, 588, 1501, 1687, 1688, 1081, 1206, 464,
	524, 585, 2057, 304, 25, 1215, 1678, 413, 1215, 639,
	525, 509, 303, 24, 1468, 1089, 1712, 1086, 311, 2043,
	1698, 302, 23, 1846, 521, 846, 1190, 301, 11, 1186,
	1112, 305, 10, 1722, 1719, 956, 295, 9, 88, 88,
	88, 863, 1738, 294, 7, 979, 1736, 1716, 845, 888,
	885, 1743, 310, 296, 4, 88, 1741, 424, 467, 468,
	88, 812, 88, 1472, 88, 88, 88, 1138, 2158, 88,
	88, 2159, 553, 2092, 1809, 1611, 2046, 1771, 1612, 25,
	1873, 311, 1475, 1784, 1610, 1656, 1812, 310, 24, 1772,
	961, 962, 1497, 1788, 1470, 961, 962, 23, 1647, 1499,
	689, 1589, 1473, 11, 88, 88, 1785, 10, 1163, 1769,
	1427, 553, 9, 1813, 980, 1359, 311, 1471, 964, 7,
	1779, 88, 88, 1611, 1356, 88, 1612, 1355, 1611, 4,
	1305, 1612, 1610, 553, 1842, 88, 963, 1610, 1829, 1847,
	474, 963, 88, 1543, 1544, 961, 962, 1164, 1872, 1836,
	1858, 1859, 1871, 1015, 1864, 1845, 1163, 1162, 1893, 491,
	2078, 1822, 1844, 1881, 1955, 1851, 1731, 1828, 1451, 820,
	820, 1852, 1853, 1025, 1474, 88, 1023, 1929, 415, 906,
	593, 1867, 1689, 1220, 1739, 2094, 281, 539, 281, 440,
	440, 554, 1220, 1744, 1870, 1898, 1529, 1973, 551, 972,
	973, 965, 966, 967, 968, 970, 971, 1999, 1307, 1026,
	41, 1608, 666, 1790, 1602, 1181, 1180, 1857, 1215, 1215,
	555, 312, 1215, 1885, 892, 1775, 688, 877, 1316, 1221,
	88, 743, 88, 690, 309, 88, 817, 691, 948, 818,
	1054, 678, 815, 88, 1116, 1277, 1904, 859, 1296, 309,
	554, 1517, 1019, 658, 670, 669, 1293, 1919, 559, 1933,
	1874, 54, 1935, 574, 434, 1409, 1832, 1611, 944, 1196,
	1612, 1835, 1934, 941, 88, 1618, 1610, 479, 1916, 555,
	1540, 820, 561, 1917, 1337, 1329, 1326, 617, 749, 88,
	1932, 788, 553, 1007, 1117, 1951, 88, 586, 1415, 1137,
	644, 952, 500, 499, 88, 1611, 1176, 583, 1612, 1950,
	870, 563, 88, 1156, 1610, 1000, 1964, 997, 469, 2012,
	1188, 88, 88, 1370, 2154, 1985, 568, 2019, 1983, 440,
	440, 1976, 1957, 1979, 1972, 1959, 1615, 1990, 2071, 1993,
	1927, 72, 1980, 2028, 820, 1953, 1970, 1396, 29, 26,
	1937, 21, 1971, 819, 19, 1998, 18, 28, 17, 848,
	27, 15, 88, 14, 13, 12, 40, 1944, 1945, 39,
	38, 427, 2014, 37, 281, 36, 440, 621, 440, 1992,
	624, 35, 6, 5, 2, 820, 1969, 88, 88, 1,
	2009, 0, 0, 0, 0, 497, 2008, 847, 2017, 88,
	0, 1215, 2016, 88, 0, 0, 281, 0, 0, 0,
	2037, 553, 2035, 0, 0, 0, 0, 2038, 88, 0,
	85, 2005, 0, 0, 88, 0, 846, 846, 491, 281,
	309, 88, 88, 0, 281, 281, 281, 2047, 794, 2045,
	2041, 0, 0, 0, 2052, 0, 0, 2049, 0, 845,
	845, 0, 0, 2050, 88, 0, 88, 281, 281, 88,
	2056, 309, 0, 0, 0, 85, 65, 85, 1943, 2068,
	0, 2040, 440, 0, 2048, 0, 2044, 0, 1967, 2082,
	0, 0, 2084, 88, 2073, 2083, 88, 0, 2080, 440,
	2053, 0, 440, 2086, 85, 440, 440, 440, 440, 440,
	2088, 1611, 914, 2090, 1612, 2087, 2077, 440, 440, 0,
	1610, 0, 2085, 0, 2067, 427, 0, 2059, 0, 0,
	88, 0, 88, 935, 0, 2109, 0, 2116, 0, 0,
	2114, 0, 0, 0, 0, 0, 0, 2113, 846, 0,
	88, 0, 497, 0, 2127, 523, 554, 0, 0, 2131,
	2118, 2129, 0, 0, 0, 2135, 2070, 0, 0, 88,
	0, 845, 2074, 2075, 2076, 2141, 2139, 0, 0, 310,
	2137, 0, 2140, 0, 0, 555, 0, 0, 2153, 2152,
	2115, 0, 0, 2157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2097, 0, 311, 0,
	2162, 846, 0, 1800, 0, 0, 1793, 0, 0, 0,
	0, 0, 0, 0, 1791, 0, 0, 1118, 1795, 0,
	0, 0, 0, 0, 845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1801, 0, 0, 0,
	0, 1331, 846, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 1073, 1794, 0, 0,
	281, 816, 0, 0, 0, 845, 0, 0, 281, 1094,
	1504, 1505, 281, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 1120, 1121, 0, 281, 0,
	0, 281, 0, 440, 440, 0, 440, 0, 0, 0,
	0, 820, 0, 0, 667, 52, 0, 0, 0, 0,
	554, 0, 0, 0, 0, 0, 0, 1796, 0, 1797,
	0, 1566, 1567, 1568, 0, 0, 0, 0, 0, 0,
	0, 0, 820, 820, 0, 0, 0, 648, 648, 555,
	0, 820, 820, 0, 819, 819, 751, 1799, 52, 554,
	848, 848, 0, 0, 0, 1802, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	484, 554, 0, 492, 820, 0, 0, 0, 555, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 847, 847,
	0, 0, 0, 0, 0, 0, 0, 1167, 0, 0,
	555, 0, 0, 0, 0, 0, 0, 0, 281, 281,
	281, 0, 0, 0, 0, 281, 1177, 0, 0, 0,
	0, 0, 523, 0, 0, 0, 0, 1798, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	961, 962, 848, 0, 0, 0, 1331, 1331, 0, 942,
	0, 947, 310, 0, 0, 0, 0, 954, 0, 0,
	1707, 1708, 0, 964, 0, 0, 0, 310, 0, 1001,
	1002, 1003, 1004, 1005, 0, 0, 0, 0, 0, 1013,
	847, 311, 0, 0, 0, 0, 963, 0, 820, 1020,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 819,
	0, 0, 0, 0, 0, 848, 0, 1331, 1331, 1331,
	554, 0, 0, 0, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 0, 1767, 281, 1365, 1366, 846, 555,
	819, 1073, 969, 847, 1373, 0, 848, 0, 0, 0,
	1378, 1379, 1381, 1383, 1384, 0, 0, 0, 0, 0,
	0, 845, 1391, 0, 0, 1393, 281, 0, 0, 846,
	846, 0, 0, 0, 0, 281, 0, 492, 846, 846,
	281, 0, 1413, 0, 847, 0, 0, 0, 0, 281,
	0, 0, 845, 845, 0, 979, 0, 820, 0, 281,
	0, 845, 845, 0, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 0, 0, 0, 0, 0, 0, 0,
	1167, 1167, 0, 0, 0, 0, 0, 0, 0, 554,
	0, 0, 816, 816, 845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 0, 0, 935, 0, 935, 0, 440, 555, 0,
	0, 281, 0, 0, 980, 1459, 1331, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 310,
	0, 0, 0, 0, 0, 0, 820, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 1543, 1544, 0, 1561, 1562, 1563,
	1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
	1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 0,
	1331, 0, 0, 0, 816, 846, 0, 0, 0, 0,
	973, 965, 966, 967, 968, 970, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1558, 0, 845, 0,
	1926, 0, 0, 0, 0, 0, 0, 648, 484, 0,
	0, 0, 820, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 0, 1257, 816, 1259, 1260,
	1261, 1262, 0, 0, 0, 0, 1549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1286, 0, 961,
	962, 0, 0, 0, 0, 0, 1565, 0, 0, 0,
	0, 0, 0, 0, 0, 1607, 0, 0, 816, 1313,
	1314, 1564, 964, 1327, 846, 1338, 1340, 1345, 1348, 1349,
	1350, 0, 0, 0, 0, 0, 819, 0, 0, 1559,
	0, 0, 848, 0, 2002, 963, 0, 845, 0, 0,
	751, 0, 0, 0, 0, 0, 281, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 819, 0,
	0, 0, 0, 848, 848, 0, 819, 819, 0, 0,
	847, 1657, 848, 848, 0, 1073, 0, 935, 0, 484,
	0, 0, 484, 484, 1667, 1407, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 281, 1560, 819,
	281, 847, 847, 846, 1010, 848, 1012, 0, 0, 0,
	847, 847, 1702, 1016, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 1433, 0, 0,
	0, 0, 2058, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 847, 979, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 1555, 1556, 1557,
	0, 954, 1554, 1552, 1553, 1545, 1546, 1547, 1548, 1550,
	1551, 0, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	52, 0, 0, 980, 0, 0, 0, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 1786, 1787, 1073,
	1488, 1489, 0, 819, 0, 52, 1494, 52, 0, 848,
	1331, 0, 0, 1607, 523, 0, 0, 0, 0, 1820,
	0, 1821, 52, 281, 1823, 1824, 0, 52, 1827, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	1543, 1544, 0, 1561, 1562, 1563, 1520, 847, 0, 1524,
	0, 0, 0, 0, 0, 0, 0, 0, 1533, 0,
	0, 1607, 0, 523, 1177, 0, 1607, 0, 0, 0,
	965, 966, 967, 968, 970, 971, 0, 0, 0, 0,
	281, 281, 0, 1013, 281, 0, 0, 0, 0, 1345,
	1345, 1345, 1558, 0, 1702, 0, 0, 0, 0, 0,
	0, 1879, 0, 0, 816, 0, 0, 0, 1331, 0,
	0, 0, 819, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 1604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1899, 816, 816, 0, 0, 0,
	0, 0, 1549, 0, 816, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 648, 0, 847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 0, 0, 0, 0, 1216, 0, 816, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1073,
	0, 1918, 0, 0, 1920, 1559, 0, 0, 0, 0,
	0, 819, 281, 0, 0, 1607, 0, 848, 0, 0,
	0, 1275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1543, 1544, 0, 1561, 1562, 1563,
	1952, 0, 0, 523, 0, 1705, 0, 0, 1706, 0,
	1883, 0, 0, 1607, 0, 847, 0, 0, 281, 0,
	1711, 0, 0, 0, 0, 1975, 0, 0, 0, 1720,
	0, 0, 0, 281, 1560, 0, 0, 1724, 0, 0,
	1433, 1702, 0, 0, 0, 0, 1558, 0, 0, 0,
	523, 1702, 0, 0, 0, 1740, 0, 0, 0, 1742,
	0, 0, 0, 0, 0, 0, 0, 819, 0, 0,
	0, 52, 0, 848, 52, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 1773, 1774, 0, 492, 1549, 0, 0, 0,
	0, 1780, 1781, 1782, 0, 0, 0, 0, 0, 0,
	0, 847, 0, 1555, 1556, 1557, 2021, 2022, 1554, 1552,
	1553, 1545, 1546, 1547, 1548, 1550, 1551, 1810, 2033, 0,
	0, 1564, 2034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 523, 0, 1559,
	0, 0, 0, 1702, 0, 0, 0, 0, 0, 0,
	1702, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 2066, 0, 523, 0, 0, 281, 0,
	816, 0, 52, 0, 0, 1856, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 1607,
	0, 0, 1975, 0, 0, 1702, 0, 0, 1560, 0,
	0, 0, 0, 0, 0, 0, 0, 1884, 0, 0,
	0, 1887, 1888, 0, 0, 0, 1890, 0, 0, 0,
	0, 1275, 0, 1892, 0, 1894, 0, 0, 0, 281,
	0, 523, 0, 1900, 0, 0, 0, 0, 0, 0,
	0, 1012, 0, 0, 0, 0, 0, 961, 962, 2128,
	981, 982, 983, 991, 992, 993, 0, 0, 0, 816,
	0, 0, 0, 984, 0, 0, 1909, 0, 1702, 0,
	964, 0, 0, 995, 0, 0, 0, 1555, 1556, 1557,
	0, 0, 1554, 1552, 1553, 1545, 1546, 1547, 1548, 1550,
	1551, 0, 0, 963, 0, 0, 0, 0, 0, 978,
	1012, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	1978, 0, 0, 0, 0, 0, 0, 0, 988, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1994, 1995, 1216, 0, 994, 961, 962, 0, 981, 982,
	983, 991, 992, 993, 0, 0, 986, 0, 0, 0,
	0, 984, 979, 0, 0, 0, 0, 0, 964, 0,
	2007, 995, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2011, 0, 0, 0, 985, 0, 0,
	0, 963, 1216, 0, 0, 1216, 0, 978, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 961, 962, 0,
	981, 982, 983, 991, 992, 993, 0, 0, 0, 751,
	0, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	964, 980, 0, 995, 0, 0, 0, 0, 1543, 1544,
	0, 1561, 1562, 1563, 0, 0, 989, 969, 0, 0,
	0, 0, 0, 963, 1882, 0, 0, 0, 0, 978,
	0, 0, 0, 0, 0, 0, 988, 996, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 0, 987, 0, 969,
	975, 976, 977, 990, 0, 974, 972, 973, 965, 966,
	967, 968, 970, 971, 0, 985, 0, 0, 988, 996,
	2110, 1912, 0, 0, 0, 0, 0, 0, 0, 0,
	1549, 0, 961, 962, 994, 981, 982, 983, 991, 992,
	993, 0, 0, 2126, 2126, 0, 986, 0, 984, 0,
	0, 0, 979, 0, 52, 964, 0, 0, 995, 980,
	0, 0, 0, 0, 0, 1564, 0, 0, 0, 0,
	0, 2126, 0, 0, 989, 0, 0, 985, 963, 0,
	0, 0, 0, 1559, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1216, 1216, 0, 0, 1216,
	0, 0, 0, 0, 0, 0, 2126, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 980, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 987, 989, 0, 975, 976,
	977, 990, 0, 974, 972, 973, 965, 966, 967, 968,
	970, 971, 1560, 988, 996, 0, 0, 0, 0, 1585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	975, 976, 977, 990, 0, 974, 972, 973, 965, 966,
	967, 968, 970, 971, 0, 0, 0, 0, 0, 0,
	0, 1584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1555, 1556, 1557, 0, 0, 1554, 1552, 1553, 1545,
	1546, 1547, 1548, 1550, 1551, 0, 0, 0, 0, 0,
	0, 0, 1960, 0, 0, 0, 980, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 0, 0, 0, 0, 0, 0, 1216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 987, 0, 0, 975, 976, 977, 990, 0,
	974, 972, 973, 965, 966, 967, 968, 970, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1012, 0, 0, 0,
	0, 0, 0, 0, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	90, 91, 327, 92, 328, 329, 330, 331, 228, 332,
	333, 334, 335, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 336, 97, 235, 236, 98, 337, 338,
	237, 238, 239, 339, 99, 240, 340, 313, 341, 100,
	101, 102, 0, 103, 342, 104, 105, 106, 343, 314,
	107, 108, 344, 345, 346, 347, 348, 349, 109, 110,
	282, 111, 241, 112, 242, 243, 350, 113, 351, 114,
	352, 353, 354, 115, 116, 355, 117, 356, 0, 357,
	244, 118, 119, 120, 245, 246, 358, 359, 360, 121,
	122, 247, 0, 123, 361, 124, 362, 363, 315, 364,
	125, 248, 365, 249, 366, 126, 127, 128, 129, 250,
	251, 317, 367, 133, 368, 130, 369, 316, 131, 252,
	132, 253, 254, 255, 370, 256, 371, 318, 134, 319,
	135, 136, 372, 138, 137, 373, 257, 320, 139, 321,
	374, 140, 375, 376, 141, 0, 142, 143, 144, 146,
	258, 145, 322, 147, 148, 150, 149, 377, 378, 379,
	259, 151, 260, 152, 153, 380, 154, 381, 382, 155,
	383, 384, 156, 261, 323, 157, 324, 262, 158, 159,
	160, 161, 385, 263, 162, 264, 163, 386, 164, 165,
	166, 167, 265, 168, 169, 387, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 388, 181, 325,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 389,
	267, 192, 193, 194, 390, 195, 185, 186, 196, 326,
	197, 268, 269, 198, 391, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 392, 205, 393, 206, 207, 208,
	209, 210, 394, 272, 273, 274, 395, 396, 211, 275,
	276, 397, 212, 213, 214, 215, 398, 399, 216, 217,
	218, 400, 219, 401, 220, 221, 222, 277, 278, 402,
	403, 223, 404, 405, 406, 407, 224, 225, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 308, 0, 0, 0, 0, 0, 0, 1696, 0,
	0, 0, 0, 0, 0, 0, 1697, 90, 91, 327,
	92, 328, 329, 330, 331, 228, 332, 333, 334, 335,
	93, 94, 95, 229, 230, 231, 232, 96, 233, 234,
	336, 97, 235, 236, 98, 337, 338, 237, 238, 239,
	339, 99, 240, 340, 313, 341, 100, 101, 102, 0,
	103, 342, 104, 105, 106, 343, 314, 107, 108, 344,
	345, 346, 347, 348, 349, 109, 110, 282, 111, 241,
	112, 242, 243, 350, 113, 351, 114, 352, 353, 354,
	115, 116, 355, 117, 356, 0, 357, 244, 118, 119,
	120, 245, 246, 358, 359, 360, 121, 122, 247, 0,
	123, 361, 124, 362, 363, 315, 364, 125, 248, 365,
	249, 366, 126, 127, 128, 129, 250, 251, 317, 367,
	133, 368, 130, 369, 316, 131, 252, 132, 253, 254,
	255, 370, 256, 371, 318, 134, 319, 135, 136, 372,
	138, 137, 373, 257, 320, 139, 321, 374, 140, 375,
	376, 141, 0, 142, 143, 144, 146, 258, 145, 322,
	147, 148, 150, 149, 377, 378, 379, 259, 151, 260,
	152, 153, 380, 154, 381, 382, 155, 383, 384, 156,
	261, 323, 157, 324, 262, 158, 159, 160, 161, 385,
	263, 162, 264, 163, 386, 164, 165, 166, 167, 265,
	168, 169, 387, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 388, 181, 325, 182, 183, 266,
	184, 0, 188, 189, 190, 191, 389, 267, 192, 193,
	194, 390, 195, 185, 186, 196, 326, 197, 268, 269,
	198, 391, 204, 199, 200, 187, 201, 203, 270, 202,
	271, 392, 205, 393, 206, 207, 208, 209, 210, 394,
	272, 273, 274, 395, 396, 211, 275, 276, 397, 212,
	213, 214, 215, 398, 399, 216, 217, 218, 400, 219,
	401, 220, 221, 222, 277, 278, 402, 403, 223, 404,
	405, 406, 407, 224, 225, 226, 227, 0, 0, 0,
	308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2051, 90, 91, 327, 92,
	328, 329, 330, 331, 228, 332, 333, 334, 335, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 336,
	97, 235, 236, 98, 337, 338, 237, 238, 239, 339,
	99, 240, 340, 313, 341, 100, 101, 102, 0, 103,
	342, 104, 105, 106, 343, 314, 107, 108, 344, 345,
	346, 347, 348, 349, 109, 110, 282, 111, 241, 112,
	242, 243, 350, 113, 351, 114, 352, 353, 354, 115,
	116, 355, 117, 356, 0, 357, 244, 118, 119, 120,
	245, 246, 358, 359, 360, 121, 122, 247, 0, 123,
	361, 124, 362, 363, 315, 364, 125, 248, 365, 249,
	366, 126, 127, 128, 129, 250, 251, 317, 367, 133,
	368, 130, 369, 316, 131, 252, 132, 253, 254, 255,
	370, 256, 371, 318, 134, 319, 135, 136, 372, 138,
	137, 373, 257, 320, 139, 321, 374, 140, 375, 376,
	141, 0, 142, 143, 144, 146, 258, 145, 322, 147,
	148, 150, 149, 377, 378, 379, 259, 151, 260, 152,
	153, 380, 154, 381, 382, 155, 383, 384, 156, 261,
	323, 157, 324, 262, 158, 159, 160, 161, 385, 263,
	162, 264, 163, 386, 164, 165, 166, 167, 265, 168,
	169, 387, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 388, 181, 325, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 389, 267, 192, 193, 194,
	390, 195, 185, 186, 196, 326, 197, 268, 269, 198,
	391, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	392, 205, 393, 206, 207, 208, 209, 210, 394, 272,
	273, 274, 395, 396, 211, 275, 276, 397, 212, 213,
	214, 215, 398, 399, 216, 217, 218, 400, 219, 401,
	220, 221, 222, 277, 278, 402, 403, 223, 404, 405,
	406, 407, 224, 225, 226, 227, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 90, 91, 327, 92, 328, 329, 330, 331,
	228, 332, 333, 334, 335, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 336, 97, 235, 236, 98,
	337, 338, 237, 238, 239, 339, 99, 240, 340, 313,
	341, 100, 101, 102, 0, 103, 342, 104, 105, 106,
	343, 314, 107, 108, 344, 345, 346, 347, 348, 349,
	109, 110, 282, 111, 241, 112, 242, 243, 350, 113,
	351, 114, 352, 353, 354, 115, 116, 355, 117, 356,
	0, 357, 244, 118, 119, 120, 245, 246, 358, 359,
	360, 121, 122, 247, 0, 123, 361, 124, 362, 363,
	315, 364, 125, 248, 365, 249, 366, 126, 127, 128,
	129, 250, 251, 317, 367, 133, 368, 130, 369, 316,
	131, 252, 132, 253, 254, 255, 370, 256, 371, 318,
	134, 319, 135, 136, 372, 138, 137, 373, 257, 320,
	139, 321, 374, 140, 375, 376, 141, 0, 142, 143,
	144, 146, 258, 145, 322, 147, 148, 150, 149, 377,
	378, 379, 259, 151, 260, 152, 153, 380, 154, 381,
	382, 155, 383, 384, 156, 261, 323, 157, 324, 262,
	158, 159, 160, 161, 385, 263, 162, 264, 163, 386,
	164, 165, 166, 167, 265, 168, 169, 387, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 388,
	181, 325, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 389, 267, 192, 193, 194, 390, 195, 185, 186,
	196, 326, 197, 268, 269, 198, 391, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 392, 205, 393, 206,
	207, 208, 209, 210, 394, 272, 273, 274, 395, 396,
	211, 275, 276, 397, 212, 213, 214, 215, 398, 399,
	216, 217, 218, 400, 219, 401, 220, 221, 222, 277,
	278, 402, 403, 223, 404, 405, 406, 407, 224, 225,
	226, 227, 686, 675, 676, 673, 674, 665, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 702, 668, 0, 0,
	0, 93, 94, 95, 229, 717, 231, 718, 96, 719,
	720, 0, 97, 235, 236, 98, 671, 701, 721, 722,
	239, 0, 99, 713, 0, 694, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 314, 107, 108,
	0, 695, 697, 0, 696, 698, 109, 110, 282, 111,
	723, 112, 724, 725, 752, 113, 0, 114, 0, 0,
	0, 716, 116, 0, 117, 0, 0, 0, 659, 118,
	119, 120, 703, 704, 682, 0, 0, 121, 122, 726,
	0, 123, 0, 124, 0, 0, 315, 0, 125, 714,
	0, 249, 0, 126, 127, 128, 129, 710, 712, 317,
	0, 133, 0, 130, 0, 316, 131, 727, 132, 728,
	729, 730, 0, 693, 0, 318, 134, 319, 135, 136,
	0, 138, 137, 0, 715, 320, 139, 321, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	322, 147, 148, 150, 149, 654, 0, 683, 711, 151,
	731, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 323, 157, 324, 705, 158, 159, 160, 161,
	0, 706, 162, 264, 163, 0, 164, 165, 166, 167,
	732, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 325, 182, 183,
	660, 184, 0, 188, 189, 190, 191, 71, 267, 192,
	193, 194, 699, 195, 185, 186, 196, 326, 197, 733,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 734,
	202, 707, 0, 205, 73, 206, 207, 208, 209, 210,
	0, 272, 735, 736, 0, 0, 211, 708, 709, 681,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 700,
	219, 0, 220, 221, 222, 556, 737, 0, 0, 223,
	0, 0, 0, 69, 224, 225, 226, 227, 655, 70,
	0, 0, 0, 0, 653, 0, 0, 0, 0, 651,
	652, 686, 675, 676, 673, 674, 665, 0, 661, 0,
	0, 0, 0, 664, 0, 0, 0, 90, 91, 1302,
	92, 0, 0, 0, 0, 702, 668, 0, 0, 0,
	93, 94, 95, 229, 717, 231, 718, 96, 719, 720,
	0, 97, 235, 236, 98, 671, 701, 721, 722, 239,
	0, 99, 713, 0, 694, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 314, 107, 108, 0,
	695, 697, 0, 696, 698, 109, 110, 282, 111, 723,
	112, 724, 725, 0, 113, 0, 114, 0, 1303, 0,
	716, 116, 0, 117, 0, 0, 0, 659, 118, 119,
	120, 703, 704, 682, 0, 0, 121, 122, 726, 0,
	123, 0, 124, 0, 0, 315, 0, 125, 714, 0,
	249, 0, 126, 127, 128, 129, 710, 712, 317, 0,
	133, 0, 130, 0, 316, 131, 727, 132, 728, 729,
	730, 0, 693, 0, 318, 134, 319, 135, 136, 0,
	138, 137, 0, 715, 320, 139, 321, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 322,
	147, 148, 150, 149, 654, 0, 683, 711, 151, 731,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 323, 157, 324, 705, 158, 159, 160, 161, 0,
	706, 162, 264, 163, 0, 164, 165, 166, 167, 732,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 325, 182, 183, 660,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 699, 195, 185, 186, 196, 326, 197, 733, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 734, 202,
	707, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 735, 736, 0, 0, 211, 708, 709, 681, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 700, 219,
	0, 220, 221, 222, 277, 737, 1301, 0, 223, 0,
	0, 0, 0, 224, 225, 226, 227, 655, 0, 0,
	0, 0, 0, 653, 0, 0, 0, 0, 651, 652,
	1304, 686, 675, 676, 673, 674, 665, 661, 1299, 0,
	0, 0, 664, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 702, 668, 0, 0, 0,
	93, 94, 95, 229, 717, 231, 718, 96, 719, 720,
	0, 97, 235, 236, 98, 671, 701, 721, 722, 239,
	0, 99, 713, 0, 694, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 314, 107, 108, 0,
	695, 697, 0, 696, 698, 109, 110, 282, 111, 723,
	112, 724, 725, 0, 113, 0, 114, 0, 0, 0,
	716, 116, 0, 117, 0, 0, 0, 659, 118, 119,
	120, 703, 704, 682, 0, 0, 121, 122, 726, 0,
	123, 0, 124, 0, 0, 315, 0, 125, 714, 0,
	249, 0, 126, 127, 128, 129, 710, 712, 317, 0,
	133, 0, 130, 0, 316, 131, 727, 132, 728, 729,
	730, 0, 693, 0, 318, 134, 319, 135, 136, 0,
	138, 137, 0, 715, 320, 139, 321, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 322,
	147, 148, 150, 149, 654, 0, 683, 711, 151, 731,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 323, 157, 324, 705, 158, 159, 160, 161, 0,
	706, 162, 264, 163, 0, 164, 165, 166, 167, 732,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 325, 182, 183, 660,
	184, 0, 188, 189, 190, 191, 71, 267, 192, 193,
	194, 699, 195, 185, 186, 196, 326, 197, 733, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 734, 202,
	707, 0, 205, 73, 206, 207, 208, 209, 210, 0,
	272, 735, 736, 0, 0, 211, 708, 709, 681, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 700, 219,
	0, 220, 221, 222, 556, 737, 0, 0, 223, 0,
	0, 0, 69, 224, 225, 226, 227, 655, 70, 0,
	0, 0, 0, 653, 0, 0, 0, 0, 651, 652,
	686, 675, 676, 673, 674, 665, 0, 661, 0, 0,
	0, 0, 664, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 702, 668, 0, 0, 0, 93,
	94, 95, 229, 717, 231, 718, 96, 719, 720, 1341,
	97, 235, 236, 98, 671, 701, 721, 722, 239, 0,
	99, 713, 0, 694, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 314, 107, 108, 0, 695,
	697, 0, 696, 698, 109, 110, 282, 111, 723, 112,
	724, 725, 0, 113, 0, 114, 0, 0, 0, 716,
	116, 0, 117, 0, 0, 0, 659, 118, 119, 120,
	703, 704, 682, 0, 0, 121, 122, 726, 0, 123,
	0, 124, 0, 1346, 315, 0, 125, 714, 0, 249,
	0, 126, 127, 128, 129, 710, 712, 317, 0, 133,
	0, 130, 0, 316, 131, 727, 132, 728, 729, 730,
	0, 693, 0, 318, 134, 319, 135, 136, 0, 138,
	137, 1342, 715, 320, 139, 321, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 322, 147,
	148, 150, 149, 654, 0, 683, 711, 151, 731, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	323, 157, 324, 705, 158, 159, 160, 161, 0, 706,
	162, 264, 163, 0, 164, 165, 166, 167, 732, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 325, 182, 183, 660, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	699, 195, 185, 186, 196, 326, 197, 733, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 734, 202, 707,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	735, 736, 0, 1343, 211, 708, 709, 681, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 700, 219, 0,
	220, 221, 222, 277, 737, 0, 0, 223, 0, 0,
	0, 0, 224, 225, 226, 227, 655, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 0, 651, 652, 686,
	675, 676, 673, 674, 665, 0, 661, 0, 0, 0,
	0, 664, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 702, 668, 0, 0, 0, 93, 94,
	95, 229, 717, 231, 718, 96, 719, 720, 0, 97,
	235, 236, 98, 671, 701, 721, 722, 239, 0, 99,
	713, 0, 694, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 314, 107, 108, 0, 695, 697,
	0, 696, 698, 109, 110, 282, 111, 723, 112, 724,
	725, 0, 113, 0, 114, 0, 0, 0, 716, 116,
	0, 117, 0, 0, 0, 659, 118, 119, 120, 703,
	704, 682, 0, 0, 121, 122, 726, 0, 123, 0,
	124, 0, 0, 315, 0, 125, 714, 0, 249, 0,
	126, 127, 128, 129, 710, 712, 317, 0, 133, 0,
	130, 0, 316, 131, 727, 132, 728, 729, 730, 0,
	693, 0, 318, 134, 319, 135, 136, 0, 138, 137,
	0, 715, 320, 139, 321, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 322, 147, 148,
	150, 149, 654, 1636, 683, 711, 151, 731, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 323,
	157, 324, 705, 158, 159, 160, 161, 0, 706, 162,
	264, 163, 0, 164, 165, 166, 167, 732, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 325, 182, 183, 660, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 699,
	195, 185, 186, 196, 326, 197, 733, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 734, 202, 707, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 735,
	736, 0, 0, 211, 708, 709, 681, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 700, 219, 0, 220,
	221, 222, 277, 737, 0, 0, 223, 0, 0, 0,
	0, 224, 225, 226, 227, 655, 0, 0, 0, 0,
	0, 653, 0, 0, 0, 0, 651, 652, 649, 686,
	675, 676, 673, 674, 665, 661, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 702, 668, 0, 0, 0, 93, 94,
	95, 229, 717, 231, 718, 96, 719, 720, 0, 97,
	235, 236, 98, 671, 701, 721, 722, 239, 0, 99,
	713, 0, 694, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 314, 107, 108, 0, 695, 697,
	0, 696, 698, 109, 110, 282, 111, 723, 112, 724,
	725, 0, 113, 0, 114, 0, 0, 0, 716, 116,
	0, 117, 0, 0, 0, 659, 118, 119, 120, 703,
	704, 682, 0, 0, 121, 122, 726, 0, 123, 0,
	124, 0, 0, 315, 0, 125, 714, 0, 249, 0,
	126, 127, 128, 129, 710, 712, 317, 0, 133, 0,
	130, 0, 316, 131, 727, 132, 728, 729, 730, 0,
	693, 0, 318, 134, 319, 135, 136, 0, 138, 137,
	0, 715, 320, 139, 321, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 322, 147, 148,
	150, 149, 654, 0, 683, 711, 151, 731, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 323,
	157, 324, 705, 158, 159, 160, 161, 0, 706, 162,
	264, 163, 0, 164, 165, 166, 167, 732, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 325, 182, 183, 660, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 699,
	195, 185, 186, 196, 326, 197, 733, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 734, 202, 707, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 735,
	736, 0, 0, 211, 708, 709, 681, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 700, 219, 0, 220,
	221, 222, 277, 737, 0, 0, 223, 0, 0, 0,
	0, 224, 225, 226, 227, 655, 0, 0, 0, 0,
	0, 653, 0, 0, 0, 0, 651, 652, 0, 0,
	0, 0, 0, 1018, 1294, 661, 0, 0, 0, 0,
	664, 686, 675, 676, 673, 674, 665, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 702, 668, 0, 0, 0,
	93, 94, 95, 229, 717, 231, 718, 96, 719, 720,
	0, 97, 235, 236, 98, 671, 701, 721, 722, 239,
	0, 99, 713, 0, 694, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 314, 107, 108, 0,
	695, 697, 0, 696, 698, 109, 110, 282, 111, 723,
	112, 724, 725, 0, 113, 0, 114, 0, 0, 0,
	716, 116, 0, 117, 0, 0, 0, 659, 118, 119,
	120, 703, 704, 682, 0, 0, 121, 122, 726, 0,
	123, 0, 124, 0, 0, 315, 0, 125, 714, 0,
	249, 0, 126, 127, 128, 129, 710, 712, 317, 0,
	133, 0, 130, 0, 316, 131, 727, 132, 728, 729,
	730, 0, 693, 0, 318, 134, 319, 135, 136, 0,
	138, 137, 0, 715, 320, 139, 321, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 258, 145, 322,
	147, 148, 150, 149, 654, 0, 683, 711, 151, 731,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 323, 157, 324, 705, 158, 159, 160, 161, 0,
	706, 162, 264, 163, 0, 164, 165, 166, 167, 732,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 325, 182, 183, 660,
	184, 0, 188, 189, 190, 191, 0, 267, 192, 193,
	194, 699, 195, 185, 186, 196, 326, 197, 733, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 734, 202,
	707, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 735, 736, 0, 0, 211, 708, 709, 681, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 700, 219,
	0, 220, 221, 222, 277, 737, 0, 0, 223, 0,
	0, 0, 0, 224, 225, 226, 227, 655, 0, 0,
	0, 0, 0, 653, 0, 0, 0, 0, 651, 652,
	686, 675, 676, 673, 674, 665, 0, 661, 1770, 0,
	0, 0, 664, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 702, 668, 0, 0, 0, 93,
	94, 95, 229, 717, 231, 718, 96, 719, 720, 0,
	97, 235, 236, 98, 671, 701, 721, 722, 239, 0,
	99, 713, 0, 694, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 314, 107, 108, 0, 695,
	697, 0, 696, 698, 109, 110, 282, 111, 723, 112,
	724, 725, 0, 113, 0, 114, 0, 0, 0, 716,
	116, 0, 117, 0, 0, 0, 659, 118, 119, 120,
	703, 704, 682, 0, 0, 121, 122, 726, 0, 123,
	0, 124, 0, 0, 315, 0, 125, 714, 0, 249,
	0, 126, 127, 128, 129, 710, 712, 317, 0, 133,
	0, 130, 0, 316, 131, 727, 132, 728, 729, 730,
	0, 693, 0, 318, 134, 319, 135, 136, 0, 138,
	137, 0, 715, 320, 139, 321, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 322, 147,
	148, 150, 149, 654, 0, 683, 711, 151, 731, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	323, 157, 324, 705, 158, 159, 160, 161, 0, 706,
	162, 264, 163, 0, 164, 165, 166, 167, 732, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 325, 182, 183, 660, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	699, 195, 185, 186, 196, 326, 197, 733, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 734, 202, 707,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	735, 736, 0, 0, 211, 708, 709, 681, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 700, 219, 0,
	220, 221, 222, 277, 737, 1727, 0, 223, 0, 0,
	0, 0, 224, 225, 226, 227, 655, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 0, 651, 652, 686,
	675, 676, 673, 674, 665, 0, 661, 0, 0, 0,
	0, 664, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 702, 668, 0, 0, 0, 93, 94,
	95, 229, 717, 231, 718, 96, 719, 720, 0, 97,
	235, 236, 98, 671, 701, 721, 722, 239, 0, 99,
	713, 0, 694, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 314, 107, 108, 0, 695, 697,
	0, 696, 698, 109, 110, 282, 111, 723, 112, 724,
	725, 0, 113, 0, 114, 0, 0, 0, 716, 116,
	0, 117, 0, 0, 0, 659, 118, 119, 120, 703,
	704, 682, 0, 0, 121, 122, 726, 0, 123, 0,
	124, 0, 0, 315, 0, 125, 714, 0, 249, 0,
	126, 127, 128, 129, 710, 712, 317, 0, 133, 0,
	130, 0, 316, 131, 727, 132, 728, 729, 730, 0,
	693, 0, 318, 134, 319, 135, 136, 0, 138, 137,
	0, 715, 320, 139, 321, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 322, 147, 148,
	150, 149, 654, 0, 683, 711, 151, 731, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 323,
	157, 324, 705, 158, 159, 160, 161, 0, 706, 162,
	264, 163, 0, 164, 165, 166, 167, 732, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 325, 182, 183, 660, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 699,
	195, 185, 186, 196, 326, 197, 733, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 734, 202, 707, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 735,
	736, 0, 0, 211, 708, 709, 681, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 700, 219, 0, 220,
	221, 222, 277, 737, 0, 0, 223, 0, 0, 0,
	0, 224, 225, 226, 227, 655, 0, 0, 0, 0,
	0, 653, 0, 0, 0, 0, 651, 652, 686, 675,
	676, 673, 674, 665, 0, 661, 1717, 0, 0, 0,
	664, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 702, 668, 0, 0, 0, 93, 94, 95,
	229, 717, 231, 718, 96, 719, 720, 0, 97, 235,
	236, 98, 671, 701, 721, 722, 239, 0, 99, 713,
	0, 694, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 314, 107, 108, 0, 695, 697, 0,
	696, 698, 109, 110, 282, 111, 723, 112, 724, 725,
	752, 113, 0, 114, 0, 0, 0, 716, 116, 0,
	117, 0, 0, 0, 659, 118, 119, 120, 703, 704,
	682, 0, 0, 121, 122, 726, 0, 123, 0, 124,
	0, 0, 315, 0, 125, 714, 0, 249, 0, 126,
	127, 128, 129, 710, 712, 317, 0, 133, 0, 130,
	0, 316, 131, 727, 132, 728, 729, 730, 0, 693,
	0, 318, 134, 319, 135, 136, 0, 138, 137, 0,
	715, 320, 139, 321, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 322, 147, 148, 150,
	149, 654, 0, 683, 711, 151, 731, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 323, 157,
	324, 705, 158, 159, 160, 161, 0, 706, 162, 264,
	163, 0, 164, 165, 166, 167, 732, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 325, 182, 183, 660, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 699, 195,
	185, 186, 196, 326, 197, 733, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 734, 202, 707, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 735, 736,
	0, 0, 211, 708, 709, 681, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 700, 219, 0, 220, 221,
	222, 277, 737, 0, 0, 223, 0, 0, 0, 0,
	224, 225, 226, 227, 655, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 651, 652, 686, 675, 676,
	673, 674, 665, 0, 661, 0, 0, 0, 0, 664,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 702, 668, 0, 0, 0, 93, 94, 95, 229,
	717, 231, 718, 96, 719, 720, 0, 97, 235, 236,
	98, 671, 701, 721, 722, 239, 0, 99, 713, 0,
	694, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 314, 107, 108, 0, 695, 697, 0, 696,
	698, 109, 110, 282, 111, 723, 112, 724, 725, 0,
	113, 0, 114, 0, 0, 0, 716, 116, 0, 117,
	0, 0, 0, 659, 118, 119, 120, 703, 704, 682,
	0, 0, 121, 122, 726, 0, 123, 0, 124, 0,
	1346, 315, 0, 125, 714, 0, 249, 0, 126, 127,
	128, 129, 710, 712, 317, 0, 133, 0, 130, 0,
	316, 131, 727, 132, 728, 729, 730, 0, 693, 0,
	318, 134, 319, 135, 136, 0, 138, 137, 0, 715,
	320, 139, 321, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 322, 147, 148, 150, 149,
	654, 0, 683, 711, 151, 731, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 323, 157, 324,
	705, 158, 159, 160, 161, 0, 706, 162, 264, 163,
	0, 164, 165, 166, 167, 732, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 325, 182, 183, 660, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 699, 195, 185,
	186, 196, 326, 197, 733, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 734, 202, 707, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 735, 736, 0,
	0, 211, 708, 709, 681, 212, 213, 214, 215, 0,
	0, 216, 217, 218, 700, 219, 0, 220, 221, 222,
	277, 737, 0, 0, 223, 0, 0, 0, 0, 224,
	225, 226, 227, 655, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 651, 652, 686, 675, 676, 673,
	674, 665, 0, 661, 0, 0, 0, 0, 664, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	702, 668, 0, 0, 0, 93, 94, 95, 229, 717,
	231, 718, 96, 719, 720, 0, 97, 235, 236, 98,
	671, 701, 721, 722, 239, 0, 99, 713, 0, 694,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 314, 107, 108, 0, 695, 697, 0, 696, 698,
	109, 110, 282, 111, 723, 112, 724, 725, 0, 113,
	0, 114, 0, 0, 0, 716, 116, 0, 117, 0,
	0, 0, 659, 118, 119, 120, 703, 704, 682, 0,
	0, 121, 122, 726, 0, 123, 0, 124, 0, 0,
	315, 0, 125, 714, 0, 249, 0, 126, 127, 128,
	129, 710, 712, 317, 0, 133, 0, 130, 0, 316,
	131, 727, 132, 728, 729, 730, 0, 693, 0, 318,
	134, 319, 135, 136, 0, 138, 137, 0, 715, 320,
	139, 321, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 322, 147, 148, 150, 149, 654,
	0, 683, 711, 151, 731, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 323, 157, 324, 705,
	158, 159, 160, 161, 0, 706, 162, 264, 163, 0,
	164, 165, 166, 167, 732, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 325, 182, 183, 660, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 699, 195, 185, 186,
	196, 326, 197, 733, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 734, 202, 707, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 735, 736, 0, 0,
	211, 708, 709, 681, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 700, 219, 0, 220, 221, 222, 277,
	737, 0, 0, 223, 0, 0, 0, 0, 224, 225,
	226, 227, 655, 0, 0, 0, 0, 0, 653, 0,
	0, 0, 0, 651, 652, 686, 675, 676, 673, 674,
	665, 0, 661, 1289, 0, 0, 0, 664, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 702,
	668, 0, 0, 0, 93, 94, 95, 229, 717, 231,
	718, 96, 719, 720, 0, 97, 235, 236, 98, 671,
	701, 721, 722, 239, 0, 99, 713, 0, 694, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	314, 107, 108, 0, 695, 697, 0, 696, 698, 109,
	110, 282, 111, 723, 112, 724, 725, 0, 113, 0,
	114, 0, 0, 0, 716, 116, 0, 117, 0, 0,
	0, 659, 118, 119, 120, 703, 704, 682, 0, 0,
	121, 122, 726, 0, 123, 0, 124, 0, 0, 315,
	0, 125, 714, 0, 249, 0, 126, 127, 128, 129,
	710, 712, 317, 0, 133, 0, 130, 0, 316, 131,
	727, 132, 728, 729, 730, 0, 693, 0, 318, 134,
	319, 135, 136, 0, 138, 137, 0, 715, 320, 139,
	321, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 258, 145, 322, 147, 148, 150, 149, 654, 0,
	683, 711, 151, 731, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 261, 323, 157, 324, 705, 158,
	159, 160, 161, 0, 706, 162, 264, 163, 0, 164,
	165, 166, 167, 732, 168, 169, 0, 170, 171, 172,
	173, 174, 176, 177, 175, 178, 179, 180, 0, 181,
	325, 182, 183, 660, 184, 0, 188, 189, 190, 191,
	0, 267, 192, 193, 194, 699, 195, 185, 186, 196,
	326, 197, 733, 269, 198, 0, 204, 199, 200, 187,
	201, 203, 734, 202, 707, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 272, 735, 736, 0, 0, 211,
	708, 709, 681, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 700, 219, 0, 220, 221, 222, 277, 737,
	0, 0, 223, 0, 0, 0, 0, 224, 225, 226,
	227, 655, 0, 0, 0, 0, 0, 653, 0, 0,
	0, 0, 651, 652, 649, 686, 675, 676, 673, 674,
	665, 661, 0, 0, 0, 0, 664, 0, 0, 0,
	0, 90, 91, 943, 92, 0, 0, 0, 0, 702,
	668, 0, 0, 0, 93, 94, 95, 229, 717, 231,
	718, 96, 719, 720, 0, 97, 235, 236, 98, 671,
	701, 721, 722, 239, 0, 99, 713, 0, 694, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	314, 107, 108, 0, 695, 697, 0, 696, 698, 109,
	110, 282, 111, 723, 112, 724, 725, 0, 113, 0,
	114, 0, 0, 0, 716, 116, 0, 117, 0, 0,
	0, 659, 118, 119, 120, 703, 704, 682, 0, 0,
	121, 122, 726, 0, 123, 0, 124, 0, 0, 315,
	0, 125, 714, 0, 249, 0, 126, 127, 128, 129,
	710, 712, 317, 0, 133, 0, 130, 0, 316, 131,
	727, 132, 728, 729, 730, 0, 693, 0, 318, 134,
	319, 135, 136, 0, 138, 137, 0, 715, 320, 139,
	321, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 258, 145, 322, 147, 148, 150, 149, 654, 0,
	683, 711, 151, 731, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 261, 323, 157, 324, 705, 158,
	159, 160, 161, 0, 706, 162, 264, 163, 0, 164,
	165, 166, 167, 732, 168, 169, 0, 170, 171, 172,
	173, 174, 176, 177, 175, 178, 179, 180, 0, 181,
	325, 182, 183, 660, 184, 0, 188, 189, 190, 191,
	0, 267, 192, 193, 194, 699, 195, 185, 186, 196,
	326, 197, 733, 269, 198, 0, 204, 199, 200, 187,
	201, 203, 734, 202, 707, 0, 205, 0, 206, 207,
	208, 209, 210, 0, 272, 735, 736, 0, 0, 211,
	708, 709, 681, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 700, 219, 0, 220, 221, 222, 277, 737,
	0, 0, 223, 0, 0, 0, 0, 224, 225, 226,
	227, 655, 0, 0, 0, 0, 0, 653, 0, 0,
	0, 0, 651, 652, 686, 675, 676, 673, 674, 665,
	0, 661, 0, 0, 0, 0, 664, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 702, 668,
	0, 0, 0, 93, 94, 95, 229, 717, 231, 718,
	96, 719, 720, 0, 97, 235, 236, 98, 671, 701,
	721, 722, 239, 0, 99, 713, 0, 694, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 314,
	107, 2125, 0, 695, 697, 0, 696, 698, 109, 110,
	282, 111, 723, 112, 724, 725, 0, 113, 0, 114,
	0, 0, 0, 716, 116, 0, 117, 0, 0, 0,
	659, 118, 119, 120, 703, 704, 682, 0, 0, 121,
	122, 726, 0, 123, 0, 124, 0, 0, 315, 0,
	125, 714, 0, 249, 0, 126, 127, 128, 129, 710,
	712, 317, 0, 133, 0, 130, 0, 316, 131, 727,
	132, 728, 729, 730, 0, 693, 0, 318, 134, 319,
	135, 136, 0, 138, 137, 0, 715, 320, 139, 321,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 322, 147, 148, 150, 149, 654, 0, 683,
	711, 151, 731, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 323, 157, 324, 705, 158, 159,
	160, 161, 0, 706, 162, 264, 163, 0, 164, 165,
	166, 167, 732, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 325,
	182, 183, 660, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 699, 195, 185, 186, 196, 326,
	197, 733, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 734, 202, 707, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 735, 736, 0, 0, 211, 708,
	709, 681, 212, 213, 2124, 215, 0, 0, 216, 217,
	218, 700, 219, 0, 220, 221, 222, 277, 737, 0,
	0, 223, 0, 0, 0, 0, 224, 225, 226, 227,
	655, 0, 0, 0, 0, 0, 653, 0, 0, 0,
	0, 651, 652, 686, 675, 676, 673, 674, 665, 0,
	661, 0, 0, 0, 0, 664, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 702, 668, 0,
	0, 0, 93, 94, 95, 2123, 717, 231, 718, 96,
	719, 720, 0, 97, 235, 236, 98, 671, 701, 721,
	722, 239, 0, 99, 713, 0, 694, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 314, 107,
	2125, 0, 695, 697, 0, 696, 698, 109, 110, 282,
	111, 723, 112, 724, 725, 0, 113, 0, 114, 0,
	0, 0, 716, 116, 0, 117, 0, 0, 0, 659,
	118, 119, 120, 703, 704, 682, 0, 0, 121, 122,
	726, 0, 123, 0, 124, 0, 0, 315, 0, 125,
	714, 0, 249, 0, 126, 127, 128, 129, 710, 712,
	317, 0, 133, 0, 130, 0, 316, 131, 727, 132,
	728, 729, 730, 0, 693, 0, 318, 134, 319, 135,
	136, 0, 138, 137, 0, 715, 320, 139, 321, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 322, 147, 148, 150, 149, 654, 0, 683, 711,
	151, 731, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 261, 323, 157, 324, 705, 158, 159, 160,
	161, 0, 706, 162, 264, 163, 0, 164, 165, 166,
	167, 732, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 325, 182,
	183, 660, 184, 0, 188, 189, 190, 191, 0, 267,
	192, 193, 194, 699, 195, 185, 186, 196, 326, 197,
	733, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	734, 202, 707, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 735, 736, 0, 0, 211, 708, 709,
	681, 212, 213, 2124, 215, 0, 0, 216, 217, 218,
	700, 219, 0, 220, 221, 222, 277, 737, 0, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 655,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 0,
	651, 652, 686, 675, 676, 673, 674, 665, 0, 661,
	0, 0, 0, 0, 664, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 702, 668, 0, 0,
	0, 93, 94, 95, 229, 717, 231, 718, 96, 719,
	720, 0, 97, 235, 236, 98, 671, 701, 721, 722,
	239, 0, 99, 713, 0, 694, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 314, 107, 108,
	0, 695, 697, 0, 696, 698, 109, 110, 282, 111,
	723, 112, 724, 725, 0, 113, 0, 114, 0, 0,
	0, 716, 116, 0, 117, 0, 0, 0, 659, 118,
	119, 120, 703, 704, 682, 0, 0, 121, 122, 726,
	0, 123, 0, 124, 0, 0, 315, 0, 125, 714,
	0, 249, 0, 126, 127, 128, 129, 710, 712, 317,
	0, 133, 0, 130, 0, 316, 131, 727, 132, 728,
	729, 730, 0, 693, 0, 318, 134, 319, 135, 136,
	0, 138, 137, 0, 715, 320, 139, 321, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	322, 147, 148, 150, 149, 654, 0, 683, 711, 151,
	731, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 323, 157, 324, 705, 158, 159, 160, 161,
	0, 706, 162, 264, 163, 0, 164, 165, 166, 167,
	732, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 325, 182, 183,
	660, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 699, 195, 185, 186, 196, 326, 197, 733,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 734,
	202, 707, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 735, 736, 0, 0, 211, 708, 709, 681,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 700,
	219, 0, 220, 221, 222, 277, 737, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 655, 0,
	0, 0, 0, 0, 653, 0, 0, 0, 0, 651,
	652, 1318, 675, 676, 673, 674, 665, 0, 661, 0,
	0, 0, 0, 664, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 702, 668, 0, 0, 0,
	93, 94, 95, 229, 717, 231, 718, 96, 719, 720,
	0, 97, 235, 236, 98, 671, 701, 721, 722, 239,
	0, 99, 713, 0, 694, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 314, 107, 108, 0,
	695, 697, 0, 696, 698, 109, 110, 282, 111, 723,
	1321, 724, 725, 0, 113, 0, 114, 0, 0, 0,
	716, 116, 0, 117, 0, 0, 0, 659, 118, 119,
	120, 703, 704, 682, 0, 0, 121, 122, 726, 0,
	123, 0, 124, 0, 0, 315, 0, 125, 714, 0,
	249, 0, 126, 127, 1322, 129, 710, 712, 317, 0,
	133, 0, 130, 0, 316, 131, 727, 132, 728, 729,
	730, 0, 693, 0, 318, 134, 319, 135, 136, 0,
	138, 137, 0, 715, 320, 139, 321, 0, 140, 0,
	0, 141, 0, 142, 1323, 1320, 146, 258, 145, 322,
	147, 148, 150, 149, 654, 0, 683, 711, 151, 731,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	261, 323, 157, 324, 705, 158, 159, 160, 161, 0,
	706, 162, 264, 163, 0, 164, 165, 166, 167, 732,
	168, 169, 0, 170, 171, 172, 173, 174, 176, 177,
	175, 178, 179, 180, 0, 181, 325, 182, 183, 660,
	184, 0, 188, 189, 190, 1324, 0, 267, 192, 193,
	194, 699, 195, 185, 186, 196, 326, 197, 733, 269,
	198, 0, 204, 199, 200, 187, 201, 203, 734, 202,
	707, 0, 205, 0, 206, 207, 208, 209, 210, 0,
	272, 735, 736, 0, 0, 211, 708, 709, 681, 212,
	213, 214, 215, 0, 0, 216, 217, 218, 700, 219,
	0, 220, 221, 222, 277, 737, 0, 0, 223, 0,
	0, 0, 0, 224, 225, 1319, 227, 655, 0, 0,
	0, 0, 0, 653, 0, 0, 0, 0, 651, 652,
	686, 675, 676, 673, 674, 665, 0, 661, 0, 0,
	0, 0, 664, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 702, 668, 0, 0, 0, 93,
	94, 95, 229, 717, 231, 718, 96, 719, 720, 0,
	97, 235, 236, 98, 671, 701, 721, 722, 239, 0,
	99, 713, 0, 694, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 314, 107, 108, 0, 695,
	697, 0, 696, 698, 109, 110, 282, 111, 723, 112,
	724, 725, 0, 113, 0, 114, 0, 0, 0, 716,
	116, 0, 117, 0, 0, 0, 659, 118, 119, 120,
	703, 704, 682, 0, 0, 121, 122, 726, 0, 123,
	0, 124, 0, 0, 315, 0, 125, 714, 0, 249,
	0, 126, 127, 128, 129, 710, 712, 317, 0, 133,
	0, 130, 0, 316, 131, 727, 132, 728, 729, 730,
	0, 693, 0, 318, 134, 319, 135, 136, 0, 138,
	137, 0, 715, 320, 139, 321, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 322, 147,
	148, 150, 149, 0, 0, 683, 711, 151, 731, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	323, 157, 324, 705, 158, 159, 160, 161, 0, 706,
	162, 264, 163, 0, 164, 165, 166, 167, 732, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 325, 182, 183, 1336, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	699, 195, 185, 186, 196, 326, 197, 733, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 734, 202, 707,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	735, 736, 0, 0, 211, 708, 709, 681, 212, 213,
	214, 215, 0, 0, 216, 217, 218, 700, 219, 0,
	220, 221, 222, 277, 737, 0, 0, 223, 0, 0,
	0, 0, 224, 225, 226, 227, 0, 0, 0, 0,
	0, 0, 1334, 0, 0, 0, 0, 1332, 1333, 686,
	675, 676, 673, 674, 665, 0, 1335, 0, 0, 0,
	0, 664, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 702, 668, 0, 0, 0, 93, 94,
	95, 229, 717, 231, 718, 96, 719, 720, 0, 97,
	235, 236, 98, 0, 701, 721, 722, 239, 0, 99,
	713, 0, 694, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 314, 107, 108, 0, 695, 697,
	0, 696, 698, 109, 110, 282, 111, 723, 112, 724,
	725, 0, 113, 0, 114, 0, 0, 0, 716, 116,
	0, 117, 0, 0, 0, 244, 118, 119, 120, 703,
	704, 682, 0, 0, 121, 122, 726, 0, 123, 0,
	124, 0, 0, 315, 0, 125, 714, 0, 249, 0,
	126, 127, 128, 129, 710, 712, 317, 0, 133, 0,
	130, 0, 316, 131, 727, 132, 728, 729, 730, 0,
	693, 0, 318, 134, 319, 135, 136, 0, 138, 137,
	0, 715, 320, 139, 321, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 258, 145, 322, 147, 148,
	150, 149, 0, 0, 683, 711, 151, 731, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 261, 323,
	157, 324, 705, 158, 159, 160, 161, 0, 706, 162,
	264, 163, 0, 164, 165, 166, 167, 732, 168, 169,
	0, 170, 171, 172, 173, 174, 176, 177, 175, 178,
	179, 180, 0, 181, 325, 182, 183, 1336, 184, 0,
	188, 189, 190, 191, 0, 267, 192, 193, 194, 699,
	195, 185, 186, 196, 326, 197, 733, 269, 198, 0,
	204, 199, 200, 187, 201, 203, 734, 202, 707, 0,
	205, 0, 206, 207, 208, 209, 210, 0, 272, 735,
	736, 0, 0, 211, 708, 709, 681, 212, 213, 214,
	215, 0, 0, 216, 217, 218, 700, 219, 0, 220,
	221, 222, 277, 737, 0, 0, 223, 0, 0, 0,
	0, 224, 225, 226, 227, 0, 0, 686, 675, 676,
	673, 674, 665, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 1335, 92, 0, 0, 0,
	664, 702, 668, 0, 0, 0, 93, 94, 95, 0,
	717, 231, 718, 96, 719, 720, 0, 97, 235, 236,
	98, 671, 701, 721, 722, 239, 0, 99, 713, 0,
	694, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 314, 107, 2125, 0, 695, 697, 0, 696,
	698, 109, 110, 282, 111, 723, 112, 724, 725, 0,
	113, 0, 114, 0, 0, 0, 716, 116, 0, 117,
	0, 0, 0, 659, 118, 119, 120, 703, 704, 682,
	0, 0, 121, 122, 726, 0, 123, 0, 124, 0,
	0, 315, 0, 125, 714, 0, 249, 0, 126, 127,
	128, 129, 710, 712, 0, 0, 133, 0, 130, 0,
	316, 131, 727, 132, 728, 729, 730, 0, 693, 0,
	0, 134, 319, 135, 136, 0, 138, 137, 0, 715,
	320, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 258, 145, 322, 147, 148, 150, 149,
	654, 0, 683, 711, 151, 731, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 261, 323, 157, 324,
	705, 158, 159, 160, 161, 0, 706, 162, 264, 163,
	0, 164, 165, 166, 167, 732, 168, 169, 0, 170,
	171, 172, 173, 174, 176, 177, 175, 178, 179, 180,
	0, 181, 325, 182, 183, 660, 184, 0, 188, 189,
	190, 191, 0, 267, 192, 193, 194, 699, 195, 185,
	186, 196, 0, 197, 733, 269, 198, 0, 204, 199,
	200, 187, 201, 203, 734, 202, 707, 0, 205, 0,
	206, 207, 208, 209, 210, 0, 272, 735, 736, 0,
	0, 211, 708, 709, 681, 212, 213, 2124, 215, 0,
	0, 216, 217, 218, 700, 219, 0, 220, 221, 222,
	277, 737, 0, 0, 223, 0, 0, 0, 0, 224,
	225, 226, 227, 686, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 652, 0, 0, 0, 90,
	91, 0, 92, 661, 0, 0, 0, 702, 664, 0,
	0, 0, 93, 94, 95, 229, 230, 231, 232, 96,
	233, 234, 0, 97, 235, 236, 98, 0, 701, 237,
	238, 239, 0, 99, 713, 0, 694, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 314, 107,
	108, 0, 695, 697, 0, 696, 698, 109, 110, 282,
	111, 241, 112, 242, 243, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 244,
	118, 119, 120, 703, 704, 0, 0, 0, 121, 122,
	247, 0, 123, 0, 124, 0, 0, 315, 0, 125,
	714, 0, 249, 0, 126, 127, 128, 129, 710, 712,
	317, 0, 133, 0, 130, 0, 316, 131, 252, 132,
	253, 254, 255, 0, 256, 0, 318, 134, 319, 135,
	136, 0, 138, 137, 0, 715, 320, 139, 321, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 322, 147, 148, 150, 149, 0, 0, 0, 711,
	151, 260, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 261, 323, 157, 324, 705, 158, 159, 160,
	161, 0, 706, 162, 264, 163, 0, 164, 165, 166,
	167, 265, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 325, 182,
	183, 266, 184, 0, 188, 189, 190, 191, 0, 267,
	192, 193, 194, 699, 195, 185, 186, 196, 326, 197,
	268, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	270, 202, 707, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 273, 274, 0, 0, 211, 708, 709,
	0, 212, 213, 214, 215, 552, 0, 216, 217, 218,
	700, 219, 0, 220, 221, 222, 277, 278, 0, 0,
	223, 90, 91, 0, 92, 224, 225, 226, 227, 228,
	0, 0, 0, 0, 93, 94, 95, 229, 230, 231,
	232, 96, 233, 234, 0, 97, 235, 236, 98, 1609,
	0, 237, 238, 239, 0, 99, 240, 0, 313, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	314, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 282, 111, 241, 112, 242, 243, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 244, 118, 119, 120, 245, 246, 0, 0, 0,
	121, 122, 247, 0, 123, 0, 124, 0, 0, 315,
	0, 125, 248, 0, 249, 0, 126, 127, 128, 129,
	250, 251, 317, 0, 133, 0, 130, 0, 316, 131,
	252, 132, 253, 254, 255, 0, 256, 0, 318, 134,
	319, 135, 136, 0, 138, 137, 0, 257, 320, 139,
	321, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 258, 145, 322, 147, 148, 150, 149, 0, 0,
	0, 259, 151, 260, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 261, 323, 157, 324, 262, 158,
	159, 160, 161, 0, 263, 162, 264, 163, 0, 164,
	165, 166, 167, 265, 168, 169, 0, 170, 171, 172,
	173, 174, 176, 177, 175, 178, 179, 180, 0, 181,
	325, 182, 183, 266, 184, 0, 188, 189, 190, 191,
	71, 267, 192, 193, 194, 0, 195, 185, 186, 196,
	326, 197, 268, 269, 198, 0, 204, 199, 200, 187,
	201, 203, 270, 202, 271, 0, 205, 73, 206, 207,
	208, 209, 210, 0, 272, 273, 274, 0, 0, 211,
	275, 276, 0, 212, 213, 214, 215, 0, 0, 216,
	217, 218, 0, 219, 0, 220, 221, 222, 556, 278,
	0, 0, 223, 0, 0, 0, 69, 224, 225, 226,
	227, 0, 70, 552, 777, 0, 887, 884, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 68, 92, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 93, 94, 95, 229, 230, 231, 232, 96,
	233, 234, 0, 97, 235, 236, 98, 0, 0, 237,
	238, 239, 0, 99, 240, 0, 313, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 314, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 282,
	111, 241, 112, 242, 243, 890, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 244,
	118, 119, 120, 245, 246, 881, 0, 0, 121, 122,
	247, 0, 123, 0, 124, 0, 0, 315, 0, 125,
	248, 0, 249, 0, 126, 127, 128, 129, 250, 251,
	317, 0, 133, 0, 130, 0, 316, 131, 252, 132,
	253, 254, 255, 0, 256, 0, 318, 134, 319, 135,
	136, 0, 138, 137, 0, 257, 320, 139, 321, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 322, 147, 148, 150, 149, 0, 0, 0, 259,
	151, 260, 152, 153, 0, 154, 882, 0, 155, 0,
	0, 156, 261, 323, 157, 324, 262, 158, 159, 160,
	161, 0, 263, 162, 264, 163, 0, 164, 165, 166,
	167, 265, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 325, 182,
	183, 266, 184, 0, 188, 189, 190, 191, 0, 267,
	192, 193, 194, 0, 195, 185, 186, 196, 326, 197,
	268, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	270, 202, 271, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 273, 274, 0, 0, 211, 275, 276,
	880, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	0, 219, 0, 220, 221, 222, 277, 278, 552, 777,
	223, 887, 884, 879, 0, 224, 225, 226, 227, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	888, 885, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 313, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 314, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	875, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	881, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 315, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 317, 0, 133, 0, 130,
	0, 316, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 318, 134, 319, 135, 136, 0, 138, 137, 0,
	257, 320, 139, 321, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 322, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 882, 0, 155, 0, 0, 156, 261, 323, 157,
	324, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 325, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 326, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 880, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 552, 777, 223, 887, 884, 879, 0,
	224, 225, 226, 227, 0, 0, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 888, 885, 228, 0, 0,
	0, 0, 93, 94, 95, 229, 230, 231, 232, 96,
	233, 234, 0, 97, 235, 236, 98, 0, 0, 237,
	238, 239, 0, 99, 240, 0, 313, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 314, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 282,
	111, 241, 112, 242, 243, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 244,
	118, 119, 120, 245, 246, 881, 0, 0, 121, 122,
	247, 0, 123, 0, 124, 0, 0, 315, 0, 125,
	248, 0, 249, 0, 126, 127, 128, 129, 250, 251,
	317, 0, 133, 0, 130, 0, 316, 131, 252, 132,
	253, 254, 255, 0, 256, 0, 318, 134, 319, 135,
	136, 0, 138, 137, 0, 257, 320, 139, 321, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 258,
	145, 322, 147, 148, 150, 149, 0, 0, 0, 259,
	151, 260, 152, 153, 0, 154, 882, 0, 155, 0,
	0, 156, 261, 323, 157, 324, 262, 158, 159, 160,
	161, 0, 263, 162, 264, 163, 0, 164, 165, 166,
	167, 265, 168, 169, 0, 170, 171, 172, 173, 174,
	176, 177, 175, 178, 179, 180, 0, 181, 325, 182,
	183, 266, 184, 0, 188, 189, 190, 191, 0, 267,
	192, 193, 194, 0, 195, 185, 186, 196, 326, 197,
	268, 269, 198, 0, 204, 199, 200, 187, 201, 203,
	270, 202, 271, 0, 205, 0, 206, 207, 208, 209,
	210, 0, 272, 273, 274, 0, 0, 211, 275, 276,
	880, 212, 213, 214, 215, 0, 0, 216, 217, 218,
	0, 219, 0, 220, 221, 222, 277, 278, 87, 0,
	223, 0, 0, 0, 0, 224, 225, 226, 227, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	888, 885, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 506, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 71, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	73, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 556, 278, 0, 0, 223, 87, 0, 0, 69,
	224, 225, 226, 227, 0, 70, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	228, 0, 1213, 0, 1218, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 71, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 73, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 0, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 556,
	278, 0, 0, 223, 87, 0, 0, 69, 224, 225,
	226, 227, 0, 70, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 228, 0,
	0, 0, 68, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 506, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 0, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 87, 0, 0, 0, 224, 225, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 228, 0, 1213, 0,
	1218, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 785,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	1119, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 1734, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 0, 0, 0, 0,
	224, 225, 226, 227, 686, 675, 676, 673, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 748, 0, 0, 0, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 717, 231, 718,
	96, 719, 720, 0, 97, 235, 236, 98, 0, 0,
	721, 722, 239, 0, 99, 240, 0, 313, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 314,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 723, 112, 724, 725, 0, 113, 0, 114,
	0, 0, 0, 716, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 682, 0, 0, 121,
	122, 726, 0, 123, 0, 124, 0, 0, 315, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 317, 0, 133, 0, 130, 0, 316, 131, 727,
	132, 728, 729, 730, 0, 693, 0, 318, 134, 319,
	135, 136, 0, 138, 137, 0, 257, 320, 139, 321,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 322, 147, 148, 150, 149, 0, 0, 683,
	259, 151, 731, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 323, 157, 324, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 732, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 325,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 326,
	197, 733, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 734, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 735, 736, 0, 0, 211, 275,
	276, 681, 212, 213, 214, 215, 552, 777, 216, 217,
	218, 775, 219, 0, 220, 221, 222, 277, 737, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 313,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 314, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	315, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 317, 0, 133, 0, 130, 0, 316,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 318,
	134, 319, 135, 136, 0, 138, 137, 0, 257, 320,
	139, 321, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 322, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 323, 157, 324, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 325, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 326, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 83, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	82, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 552, 777, 0, 0,
	224, 225, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 86, 0, 0,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 313,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 314, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	315, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 317, 0, 133, 0, 130, 0, 316,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 318,
	134, 319, 135, 136, 0, 138, 137, 0, 257, 320,
	139, 321, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 322, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 323, 157, 324, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 325, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 326, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	0, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 552, 223, 0, 0, 0, 0,
	224, 225, 226, 227, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 86, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 313, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 314,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 315, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 317, 0, 133, 0, 130, 0, 316, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 318, 134, 319,
	135, 136, 0, 138, 137, 0, 257, 320, 139, 321,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 322, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 323, 157, 324, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 325,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 326,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 1076, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 1074, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 1185,
	0, 121, 122, 247, 0, 123, 0, 124, 1079, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 1183, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 1078,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 1184,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 1076, 99, 240,
	0, 0, 1071, 100, 101, 102, 0, 103, 1074, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	1079, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 1070, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 1078, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 1077, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 1701, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 250, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 506, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 904, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 810, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	506, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 564, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 518, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 506, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 511, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 506, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 412, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 411, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 1382, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 1380, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 1369, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 934,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 426, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 795, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 0,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 625, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 620, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 570, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 250,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 438, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 437, 273, 274, 0, 0, 433, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 250, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 438, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 437, 273, 274, 0, 0,
	433, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 548, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 168, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	99, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 545, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 266, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 193, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 272,
	273, 274, 0, 0, 211, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 542, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 160, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 166, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 184, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 87, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	90, 91, 0, 92, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 93, 94, 95, 229, 230, 231, 232,
	96, 233, 234, 0, 97, 235, 236, 98, 0, 0,
	237, 238, 239, 0, 99, 240, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	282, 111, 241, 112, 242, 243, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	244, 118, 119, 120, 245, 246, 0, 0, 0, 121,
	122, 247, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 248, 0, 249, 0, 126, 127, 128, 129, 540,
	251, 0, 0, 133, 0, 130, 0, 0, 131, 252,
	132, 253, 254, 255, 0, 256, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 257, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	258, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	259, 151, 260, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 261, 0, 157, 0, 262, 158, 159,
	160, 161, 0, 263, 162, 264, 163, 0, 164, 165,
	166, 167, 265, 168, 169, 0, 170, 171, 172, 173,
	174, 176, 177, 175, 178, 179, 180, 0, 181, 0,
	182, 183, 266, 184, 0, 188, 189, 190, 191, 0,
	267, 192, 193, 194, 0, 195, 185, 186, 196, 0,
	197, 268, 269, 198, 0, 204, 199, 200, 187, 201,
	203, 270, 202, 271, 0, 205, 0, 206, 207, 208,
	209, 210, 0, 272, 273, 274, 0, 0, 211, 275,
	276, 0, 212, 213, 214, 215, 87, 0, 216, 217,
	218, 0, 219, 0, 220, 221, 222, 277, 278, 0,
	0, 223, 90, 91, 0, 92, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 93, 94, 95, 229, 230,
	231, 232, 96, 233, 234, 0, 97, 235, 236, 98,
	0, 0, 237, 238, 239, 0, 99, 240, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 282, 111, 241, 112, 242, 243, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 244, 118, 119, 120, 245, 246, 0, 0,
	0, 121, 122, 247, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 248, 0, 249, 0, 126, 127, 128,
	129, 514, 251, 0, 0, 133, 0, 130, 0, 0,
	131, 252, 132, 253, 254, 255, 0, 256, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 257, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 258, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 259, 151, 260, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 261, 0, 157, 0, 262,
	158, 159, 160, 161, 0, 263, 162, 264, 163, 0,
	164, 165, 166, 167, 265, 168, 169, 0, 170, 171,
	172, 173, 174, 176, 177, 175, 178, 179, 180, 0,
	181, 0, 182, 183, 266, 184, 0, 188, 189, 190,
	191, 0, 267, 192, 193, 194, 0, 195, 185, 186,
	196, 0, 197, 268, 269, 198, 0, 204, 199, 200,
	187, 201, 203, 270, 202, 271, 0, 205, 0, 206,
	207, 208, 209, 210, 0, 272, 273, 274, 0, 0,
	211, 275, 276, 0, 212, 213, 214, 215, 87, 0,
	216, 217, 218, 0, 219, 0, 220, 221, 222, 277,
	278, 0, 0, 223, 90, 91, 0, 92, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 93, 94, 95,
	229, 230, 231, 232, 96, 233, 234, 0, 97, 235,
	236, 98, 0, 0, 237, 238, 239, 0, 99, 240,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 282, 111, 241, 112, 242, 243,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 244, 118, 119, 120, 245, 246,
	0, 0, 0, 121, 122, 247, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 248, 0, 249, 0, 126,
	127, 128, 129, 250, 251, 0, 0, 133, 0, 130,
	0, 0, 131, 252, 132, 253, 254, 255, 0, 256,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	257, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 258, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 259, 151, 260, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 261, 0, 157,
	0, 262, 158, 159, 160, 161, 0, 263, 162, 264,
	163, 0, 164, 165, 166, 167, 265, 495, 169, 0,
	170, 171, 172, 173, 174, 176, 177, 175, 178, 179,
	180, 0, 181, 0, 182, 183, 266, 184, 0, 188,
	189, 190, 191, 0, 267, 192, 193, 194, 0, 195,
	185, 186, 196, 0, 197, 268, 269, 198, 0, 204,
	199, 200, 187, 201, 203, 270, 202, 271, 0, 205,
	0, 206, 207, 208, 209, 210, 0, 272, 273, 274,
	0, 0, 211, 275, 276, 0, 212, 213, 214, 215,
	87, 0, 216, 217, 218, 0, 219, 0, 220, 221,
	222, 277, 278, 0, 0, 223, 90, 91, 0, 92,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 93,
	94, 95, 229, 230, 231, 232, 96, 233, 234, 0,
	97, 235, 236, 98, 0, 0, 237, 238, 239, 0,
	431, 240, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 282, 111, 241, 112,
	242, 243, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 244, 118, 119, 120,
	245, 246, 0, 0, 0, 121, 122, 247, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 248, 0, 249,
	0, 126, 127, 128, 129, 250, 251, 0, 0, 133,
	0, 130, 0, 0, 131, 252, 132, 253, 254, 255,
	0, 256, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 257, 0, 139, 0, 0, 429, 0, 0,
	141, 0, 142, 143, 144, 146, 258, 438, 0, 147,
	148, 150, 149, 0, 0, 0, 259, 151, 260, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 261,
	0, 157, 0, 262, 158, 159, 160, 161, 0, 263,
	162, 264, 163, 0, 164, 165, 166, 167, 265, 168,
	169, 0, 170, 171, 172, 173, 174, 176, 177, 175,
	178, 179, 180, 0, 181, 0, 182, 183, 432, 184,
	0, 188, 189, 190, 191, 0, 267, 192, 430, 194,
	0, 195, 185, 186, 196, 0, 197, 268, 269, 198,
	0, 204, 199, 200, 187, 201, 203, 270, 202, 271,
	0, 205, 0, 206, 207, 208, 209, 210, 0, 437,
	273, 274, 0, 0, 433, 275, 276, 0, 212, 213,
	214, 215, 87, 0, 216, 217, 218, 0, 219, 0,
	220, 221, 222, 277, 278, 0, 0, 223, 90, 91,
	0, 92, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 93, 94, 95, 229, 230, 231, 232, 96, 233,
	234, 0, 97, 235, 236, 98, 0, 0, 237, 238,
	239, 0, 99, 240, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 282, 111,
	241, 112, 242, 243, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 244, 118,
	119, 120, 245, 246, 0, 0, 0, 121, 122, 247,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 248,
	0, 249, 0, 126, 127, 128, 129, 250, 251, 0,
	0, 133, 0, 130, 0, 0, 131, 252, 132, 253,
	254, 255, 0, 256, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 257, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 258, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 259, 151,
	260, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 261, 0, 157, 0, 262, 158, 159, 0, 161,
	0, 263, 162, 264, 163, 0, 164, 165, 0, 167,
	265, 168, 169, 0, 170, 171, 172, 173, 174, 176,
	177, 175, 178, 179, 180, 0, 181, 0, 182, 183,
	266, 0, 0, 188, 189, 190, 191, 0, 267, 192,
	193, 194, 0, 195, 185, 186, 196, 0, 197, 268,
	269, 198, 0, 204, 199, 200, 187, 201, 203, 270,
	202, 271, 0, 205, 0, 206, 207, 208, 209, 210,
	0, 272, 273, 274, 0, 0, 211, 275, 276, 0,
	212, 213, 214, 215, 0, 0, 216, 217, 218, 0,
	219, 0, 220, 221, 222, 277, 278, 0, 0, 223,
	0, 0, 0, 0, 224, 225, 226, 227, 961, 962,
	0, 981, 982, 983, 991, 992, 993, 0, 0, 0,
	0, 0, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 995, 0, 0, 0, 0, 0,
	961, 962, 0, 981, 982, 983, 991, 992, 993, 0,
	0, 0, 0, 0, 963, 0, 984, 0, 0, 0,
	978, 0, 0, 964, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 1543, 1544, 0,
	1561, 1562, 1563, 0, 0, 0, 0, 0, 0, 988,
	996, 0, 0, 1714, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 994, 0, 0, 961, 962,
	0, 981, 982, 983, 991, 992, 993, 986, 0, 0,
	0, 988, 996, 979, 984, 0, 0, 0, 0, 1558,
	0, 964, 0, 0, 995, 0, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 986,
	0, 0, 0, 0, 963, 979, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1549,
	985, 0, 0, 1543, 1544, 0, 1561, 1562, 1563, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 0, 1713,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	969, 0, 0, 0, 1564, 961, 962, 0, 981, 982,
	983, 991, 992, 993, 980, 0, 0, 0, 0, 988,
	996, 984, 1559, 0, 0, 1558, 0, 0, 964, 989,
	0, 995, 0, 0, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 963, 0, 979, 0, 0, 0, 978, 987, 0,
	0, 975, 976, 977, 990, 0, 974, 972, 973, 965,
	966, 967, 968, 970, 971, 1549, 0, 0, 985, 0,
	0, 0, 1583, 0, 0, 0, 0, 0, 0, 0,
	987, 1560, 0, 975, 976, 977, 990, 0, 974, 972,
	973, 965, 966, 967, 968, 970, 971, 969, 0, 0,
	1564, 0, 0, 0, 1535, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 0, 988, 996, 1559, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	0, 0, 994, 961, 962, 0, 981, 982, 983, 991,
	992, 993, 0, 0, 986, 0, 0, 0, 0, 984,
	979, 0, 0, 0, 0, 0, 964, 0, 0, 995,
	1555, 1556, 1557, 0, 0, 1554, 1552, 1553, 1545, 1546,
	1547, 1548, 1550, 1551, 0, 985, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 978, 0, 1560, 987, 0,
	0, 975, 976, 977, 990, 0, 974, 972, 973, 965,
	966, 967, 968, 970, 971, 0, 0, 0, 0, 2063,
	1543, 1544, 0, 1561, 1562, 1563, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 969, 0, 961, 962, 0,
	981, 982, 983, 991, 992, 993, 0, 0, 0, 0,
	0, 0, 0, 984, 988, 996, 0, 0, 0, 0,
	964, 0, 1558, 995, 0, 0, 1555, 1556, 1557, 0,
	994, 1554, 1552, 1553, 1545, 1546, 1547, 1548, 1550, 1551,
	0, 0, 986, 963, 0, 0, 0, 0, 979, 978,
	0, 0, 0, 0, 0, 987, 0, 0, 975, 976,
	977, 990, 0, 974, 972, 973, 965, 966, 967, 968,
	970, 971, 1549, 985, 0, 0, 2061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 962, 0, 981, 982, 983, 991, 992, 993, 969,
	0, 0, 0, 0, 0, 0, 984, 1564, 0, 0,
	0, 0, 0, 964, 0, 0, 995, 980, 988, 996,
	0, 0, 0, 0, 0, 1559, 0, 0, 0, 0,
	0, 0, 989, 0, 994, 0, 963, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 987, 1560, 0, 975, 976, 977, 990,
	0, 974, 972, 973, 965, 966, 967, 968, 970, 971,
	0, 988, 996, 0, 2006, 0, 0, 0, 0, 0,
	0, 980, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 986,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 1555, 1556, 1557, 0, 0, 1554, 1552,
	1553, 1545, 1546, 1547, 1548, 1550, 1551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	975, 976, 977, 990, 0, 974, 972, 973, 965, 966,
	967, 968, 970, 971, 980, 0, 961, 962, 2001, 981,
	982, 983, 991, 992, 993, 0, 0, 0, 0, 989,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 964,
	961, 962, 995, 981, 982, 983, 991, 992, 993, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 963, 964, 0, 0, 995, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	987, 0, 978, 975, 976, 977, 990, 0, 974, 972,
	973, 965, 966, 967, 968, 970, 971, 0, 0, 0,
	0, 1997, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 961, 962, 0, 981, 982, 983, 991,
	992, 993, 0, 0, 0, 0, 0, 988, 996, 984,
	0, 0, 969, 0, 0, 0, 964, 0, 0, 995,
	0, 0, 0, 994, 0, 0, 0, 0, 0, 0,
	0, 988, 996, 0, 0, 986, 0, 0, 0, 963,
	0, 979, 0, 0, 0, 978, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 986,
	0, 0, 0, 0, 0, 979, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 0, 988, 996, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 989, 0, 0, 0, 0,
	994, 0, 0, 0, 980, 0, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 979, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 975,
	976, 977, 990, 0, 974, 972, 973, 965, 966, 967,
	968, 970, 971, 0, 0, 0, 0, 1936, 0, 0,
	987, 0, 0, 975, 976, 977, 990, 980, 974, 972,
	973, 965, 966, 967, 968, 970, 971, 0, 0, 0,
	0, 1914, 989, 961, 962, 0, 981, 982, 983, 991,
	992, 993, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 995,
	0, 0, 0, 0, 0, 961, 962, 0, 981, 982,
	983, 991, 992, 993, 0, 0, 0, 0, 0, 963,
	0, 984, 0, 0, 0, 978, 0, 0, 964, 0,
	0, 995, 0, 987, 0, 0, 975, 976, 977, 990,
	0, 974, 972, 973, 965, 966, 967, 968, 970, 971,
	0, 963, 0, 0, 1913, 0, 0, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 962, 969, 981, 982, 983, 991,
	992, 993, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 988, 996, 964, 0, 0, 995,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	994, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 986, 0, 0, 978, 988, 996, 979, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 986, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 988, 996, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 0, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 979, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 975, 976, 977, 990,
	0, 974, 972, 973, 965, 966, 967, 968, 970, 971,
	0, 0, 0, 0, 1803, 0, 0, 980, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 975, 976,
	977, 990, 989, 974, 972, 973, 965, 966, 967, 968,
	970, 971, 0, 0, 0, 0, 1737, 0, 961, 962,
	0, 981, 982, 983, 991, 992, 993, 0, 0, 0,
	0, 0, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 963, 0, 975, 976, 977, 990,
	978, 974, 972, 973, 965, 966, 967, 968, 970, 971,
	0, 0, 0, 0, 1721, 0, 961, 962, 0, 981,
	982, 983, 991, 992, 993, 0, 0, 0, 0, 0,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 995, 0, 0, 0, 0, 0, 961, 962,
	969, 981, 982, 983, 991, 992, 993, 0, 0, 0,
	0, 0, 963, 0, 984, 0, 0, 0, 978, 988,
	996, 964, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 986, 0, 0,
	978, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 994, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 0, 988,
	996, 979, 980, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 994, 0, 989, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 986, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 975, 976, 977, 990, 989, 974, 972, 973, 965,
	966, 967, 968, 970, 971, 0, 0, 0, 0, 1674,
	0, 0, 980, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 961, 962,
	0, 981, 982, 983, 991, 992, 993, 0, 0, 0,
	0, 0, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 995, 0, 987, 0, 0, 975,
	976, 977, 990, 0, 974, 972, 973, 965, 966, 967,
	968, 970, 971, 0, 963, 0, 0, 1290, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 975, 976, 977, 990, 0, 974, 972, 973, 965,
	966, 967, 968, 970, 971, 0, 0, 1510, 0, 0,
	0, 961, 962, 0, 981, 982, 983, 991, 992, 993,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	969, 2146, 0, 0, 964, 0, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	996, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 978, 0, 994, 0, 0, 961, 962,
	0, 981, 982, 983, 991, 992, 993, 986, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 969, 963, 1575, 0, 0, 1574, 0,
	978, 0, 2145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 988, 996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 979, 989, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	996, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 987, 0,
	0, 975, 976, 977, 990, 980, 974, 972, 973, 965,
	966, 967, 968, 970, 971, 0, 0, 0, 961, 962,
	989, 981, 982, 983, 991, 992, 993, 0, 0, 0,
	0, 0, 0, 0, 984, 0, 0, 0, 0, 1205,
	0, 964, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 963, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	0, 987, 0, 0, 975, 976, 977, 990, 0, 974,
	972, 973, 965, 966, 967, 968, 970, 971, 1206, 0,
	0, 0, 0, 0, 0, 999, 0, 0, 0, 0,
	0, 961, 962, 0, 981, 982, 983, 991, 992, 993,
	969, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 998, 0, 0, 964, 0, 0, 995, 987, 988,
	996, 975, 976, 977, 990, 0, 974, 972, 973, 965,
	966, 967, 968, 970, 971, 994, 0, 963, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 961, 962, 0, 981, 982,
	983, 991, 992, 993, 0, 0, 0, 0, 0, 0,
	0, 984, 988, 996, 0, 0, 0, 0, 964, 0,
	0, 995, 980, 0, 0, 0, 0, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	986, 963, 0, 0, 0, 0, 979, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 987, 0,
	0, 975, 976, 977, 990, 0, 974, 972, 973, 965,
	966, 967, 968, 970, 971, 980, 988, 996, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	989, 0, 994, 961, 962, 0, 981, 982, 983, 991,
	992, 993, 0, 0, 986, 0, 0, 0, 0, 984,
	979, 0, 0, 0, 0, 0, 964, 0, 0, 995,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 490, 0, 0, 963,
	0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 987, 0, 0, 975, 976, 977, 990, 0, 974,
	972, 973, 965, 966, 967, 968, 970, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 969, 0, 961, 962, 0,
	981, 982, 983, 991, 992, 993, 0, 0, 0, 0,
	0, 0, 0, 984, 988, 996, 0, 0, 0, 0,
	964, 0, 0, 995, 0, 0, 0, 0, 0, 0,
	994, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 986, 963, 0, 0, 0, 0, 979, 978,
	0, 0, 0, 0, 0, 987, 0, 0, 975, 976,
	977, 990, 0, 974, 972, 973, 965, 966, 967, 968,
	970, 971, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 962, 0, 981, 982, 983, 991, 992, 993, 969,
	0, 0, 0, 0, 1581, 0, 984, 0, 0, 0,
	1576, 0, 0, 964, 0, 0, 995, 980, 988, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 994, 0, 963, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 979, 0, 0, 1725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 987, 0, 0, 975, 976, 977, 990,
	0, 974, 972, 973, 965, 966, 967, 968, 970, 971,
	0, 988, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 980, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 986,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	975, 976, 977, 990, 0, 974, 972, 973, 965, 966,
	967, 968, 970, 971, 980, 961, 962, 0, 981, 982,
	983, 991, 992, 993, 0, 0, 0, 0, 0, 989,
	0, 984, 0, 0, 0, 0, 0, 0, 964, 961,
	962, 995, 981, 982, 983, 991, 992, 993, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 1534,
	0, 963, 964, 0, 0, 995, 0, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	987, 978, 0, 975, 976, 977, 990, 0, 974, 972,
	973, 965, 966, 967, 968, 970, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 961, 962, 0, 981, 982, 983, 991, 992,
	993, 0, 0, 0, 0, 0, 988, 996, 984, 0,
	0, 969, 0, 0, 0, 964, 0, 0, 995, 0,
	0, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	988, 996, 0, 0, 986, 0, 0, 0, 963, 0,
	979, 0, 0, 0, 978, 0, 994, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 0, 986, 0,
	0, 0, 0, 0, 979, 985, 0, 32, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 1541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 985,
	0, 0, 0, 58, 969, 0, 0, 0, 0, 34,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 980,
	0, 0, 0, 988, 996, 0, 0, 0, 0, 0,
	47, 0, 0, 0, 989, 0, 0, 42, 0, 994,
	59, 961, 962, 980, 46, 0, 43, 991, 992, 993,
	0, 986, 0, 0, 0, 0, 0, 979, 989, 0,
	0, 0, 48, 0, 964, 0, 0, 995, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 978, 0, 987, 0, 0, 975, 976,
	977, 990, 0, 974, 972, 973, 965, 966, 967, 968,
	970, 971, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 975, 976, 977, 990, 980, 974, 972, 973,
	965, 966, 967, 968, 970, 971, 0, 0, 0, 0,
	0, 989, 0, 969, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 988, 996, 0, 0, 61, 62, 33, 0,
	0, 49, 0, 60, 0, 0, 0, 0, 50, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 53, 0,
	986, 55, 0, 0, 0, 0, 979, 0, 0, 0,
	57, 0, 987, 0, 0, 975, 976, 977, 990, 73,
	974, 972, 973, 965, 966, 967, 968, 970, 971, 0,
	0, 0, 0, 961, 962, 63, 981, 982, 983, 991,
	992, 993, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 964, 0, 69, 995,
	0, 0, 0, 0, 70, 0, 0, 0, 836, 828,
	853, 821, 844, 843, 0, 980, 823, 822, 0, 963,
	0, 855, 854, 68, 0, 978, 0, 0, 0, 0,
	989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 849, 0, 841, 840, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 441,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 442, 0, 0,
	0, 987, 0, 0, 988, 996, 0, 990, 0, 974,
	972, 973, 965, 966, 967, 968, 970, 971, 0, 0,
	831, 830, 832, 833, 834, 0, 852, 0, 0, 443,
	0, 0, 986, 0, 446, 0, 0, 0, 979, 451,
	452, 0, 0, 460, 0, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 445, 447, 836, 828, 853,
	821, 844, 843, 842, 0, 823, 822, 829, 0, 0,
	855, 854, 0, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 448, 0, 1224, 1222, 1223,
	1226, 1225, 849, 0, 841, 840, 0, 980, 0, 449,
	450, 0, 0, 839, 0, 0, 0, 0, 0, 0,
	0, 826, 989, 0, 0, 0, 453, 0, 0, 0,
	0, 838, 835, 827, 0, 0, 455, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 0, 0, 850, 851, 0, 0, 831,
	830, 832, 833, 834, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 987, 454, 0, 975, 976, 977, 990,
	825, 974, 972, 973, 965, 966, 967, 968, 970, 971,
	0, 0, 842, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 456, 444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 457, 0, 462, 0, 0, 0, 458, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 0, 0, 461, 0, 0,
	0, 835, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 850, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856,
}
var sqlPact = [...]int{

	28693, -1000, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 749, 16254, 16254, 20232, -1000, -1000, -1000, -1000, -1000,
	-1000, 754, 734, 582, 5172, 20232, 20232, 19950, 1080, 1080,
	21642, -1000, -1000, 25026, -1000, 29065, 525, 546, 525, 525,
	547, 21642, 20232, 665, 672, 139, -1000, 746, 10, 24744,
	20232, 1453, 37, 18258, 332, 28693, 19668, 24462, 20232, 19386,
	634, 35, 16834, 20232, -1000, 42, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1299,
	349, 42, -1000, 1298, 1184, 1164, 18258, 24180, 23898, 23616,
	23334, -1000, 12451, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 796, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 340, 339,
	-1000, 19104, -1000, 1022, -1000, 36, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1019, -1000, 20232, -1000, -1000, 23052,
	22770, 722, 338, 957, -1000, -1000, 613, 434, 1475, -1000,
	48, -1000, 1499, 782, -1000, -1000, 1287, -1000, 1015, 1286,
	1278, 1277, 1276, 1275, -1000, 776, -1000, 1274, 432, 883,
	498, -1000, 1273, 1272, 957, -1000, 957, -1000, -1000, -1000,
	631, 21642, -1000, -1000, 18258, -1000, 22488, 20232, 20232, 1199,
	22206, -1000, 746, -1000, -1000, -1000, 1115, 1450, 1450, 1450,
	1525, 132, 131, 139, 28, 20232, -1000, 334, 28, 9321,
	9321, -1000, -1000, 332, -1000, 229, 15384, -1000, 8364, -1000,
	819, 1364, 586, 800, 1360, -126, 839, 832, 1356, 15972,
	16834, 35, 34, -1000, -1000, -1000, 4866, 15972, 693, 14538,
	42, -1000, -1000, -1000, 18258, 20232, 20232, 728, 21924, -1000,
	1354, 125, 1353, -1000, 123, 1352, -1000, 123, 1347, 23,
	-1000, -1000, -1000, -1000, -1000, -1000, 332, 18822, 20232, 1591,
	29110, -1000, 10598, -1000, -1000, 16254, 1148, 16254, -1000, -1000,
	1571, -1000, 20232, 10598, -1000, 33, 32, 1122, 1138, 13054,
	12759, 1411, 1288, -1000, -1000, -1000, 47, 5172, 713, 18540,
	-1000, -1000, 20232, 1312, 16254, 20232, 20232, 20232, 20232, 20232,
	-1000, -1000, 20232, -1000, 1121, -1000, -1000, 20232, 20232, 795,
	596, -1000, 31, 30, -1000, 21642, -1000, 134, -1000, 330,
	1084, 441, 124, 21360, 441, 1083, -1000, 1115, -1000, 1030,
	1189, 9641, 1152, 10598, 139, -1000, -1000, 139, 139, 10598,
	-1000, -1000, 20232, 28, 1565, 20232, 118, -1000, 27871, -1000,
	-1000, 10598, 10598, 10598, 10598, 10598, 908, 387, -1000, 328,
	323, 6117, -1000, -1000, 1706, -1000, -1000, -1000, 143, -1000,
	-1000, 10598, 42, -1000, -1000, -1000, -1000, 319, 1731, -1000,
	412, -1000, -1000, -1000, 439, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1311, 317, 312, -1000, -1000, -1000,
	-1000, 309, 308, 305, 300, 299, 296, 293, 289, 288,
	287, 284, 277, 264, 259, 249, 868, -1000, 458, -1000,
	-1000, 458, 458, -1000, 246, 246, 247, -1000, -1000, -1000,
	-1000, 246, -1000, -1000, -1000, 421, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 248, 118, -1000, -1000, -1000, 20232, 19,
	-1000, 28642, -1000, -16, 814, -1000, 17694, 1493, 1462, 1438,
	18258, 1544, 10, 1271, 1542, 10, 1268, 630, 20232, 20232,
	627, 626, 18258, 413, -1000, -1000, -1000, -1000, -1000, 20232,
	-1000, -1000, 29, -1000, -1000, 1267, 14, -1000, -1000, 451,
	93, 1560, 93, 14820, -1000, 20232, 20232, -1000, 20232, -1000,
	-1000, 20232, -1000, 20232, 20232, -1000, 20232, 144, 17130, 877,
	1344, 726, 10, 13, -1000, 1598, -1000, -1000, -1000, -1000,
	86, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 247, 868,
	246, 246, 246, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	421, -1000, -1000, 458, 458, 458, -1000, -1000, 12, 28642,
	618, -1000, 1262, 517, -1000, 438, 8, 863, 1157, 904,
	-1000, -1000, -1000, -1000, 27, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1709, -1000, -1000, 1700, 27,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1728,
	5172, -1000, -1000, -1000, -1000, -1000, -1000, 20232, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20232, 20232,
	20232, 863, 1157, -1000, -1000, 18258, 17412, 1559, 1343, 885,
	-1000, 1556, 20232, 1014, 1077, -1000, 655, 1341, -1000, -1000,
	-1000, -1000, 28642, -1000, 370, -1000, -1000, 28642, 770, 1203,
	-1000, 1203, 22, -1000, 27778, -1000, 241, 4, 451, 9321,
	14240, 28971, 29110, 5172, 645, 10598, 10598, 10598, 10598, 10598,
	10598, 10598, 10598, 10598, 10598, 10598, 10598, 10598, 10598, 10598,
	10598, 10598, 10598, 10598, 10598, 10598, 10598, 1124, 10598, 612,
	10598, 10598, 10598, 10598, 1010, 921, 219, 953, 5172, -1000,
	-1000, 1695, 1695, 1695, 27598, 27598, 232, 387, -1000, 10598,
	-1000, 9002, 131, 27186, 18, -1000, -1000, -1000, 7075, 454,
	28642, 42, 5797, -1000, 1683, 912, 1318, 1237, 237, 130,
	129, 10598, 10598, 10917, 10917, 10598, 11236, 10598, 10598, 6436,
	10598, 10598, 10598, 10598, 10598, 10598, -1000, 235, -1000, -1000,
	-1000, -1000, 1680, -1000, -1000, 1677, -1000, 638, 609, 1668,
	451, 122, 8364, -1000, 877, 20232, 20232, 20232, -1000, -1000,
	1074, 21078, 1070, 29110, 20232, -1000, 233, 230, 1156, 1154,
	20232, 20232, 20796, 20514, 20232, 769, 10, -1000, 225, 10,
	-1000, 223, 20232, 830, -1000, 20232, 20232, 829, 1225, 1028,
	-1000, 443, 15972, 690, 1260, 20232, 802, 10598, 867, -1000,
	13942, 465, 20232, 802, 94, -1000, -1000, -1000, 405, 20232,
	-1000, -1000, -1000, 125, -1000, 123, 123, -1000, -1000, 18258,
	-1000, -1000, -1000, -1000, -1000, -1000, 29110, 378, 373, -1000,
	1663, 610, -1000, 605, 604, 600, -1000, 221, -1000, 10598,
	20232, 20232, 1157, -1000, -1000, -1000, -1000, 745, -1000, 852,
	-1000, 13349, -1000, -1000, -1000, -1000, -18, -1000, -1000, -1000,
	413, -1000, -1000, -1000, 119, 2, -5, 29110, -1000, -1000,
	-1000, -1000, -1000, 20232, 291, 20232, 10, 20232, -1000, 1723,
	10, 20232, 1336, 1373, 403, 20232, 770, -1000, 10598, 1661,
	-1000, -1000, -1000, 10598, -1000, -1000, -1000, 10, -1000, 1234,
	-1000, -48, 1505, 1026, -137, 128, 418, -1000, 13644, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 430,
	386, 386, 559, 559, 559, 559, 1645, 2420, 2809, 1440,
	28781, 28781, 28781, 222, 261, 261, 28781, 28781, 28781, 27598,
	3882, 190, 10598, 10598, 597, 919, 219, 190, 10598, 190,
	190, 190, 190, -1000, 1371, -1000, -1000, -1000, -1000, 1255,
	208, 11236, 11236, -1000, -1000, -1000, 6117, 11555, -1000, -1000,
	-1000, -1000, -1000, 204, 10598, -1000, 27218, -172, -4, -1000,
	-1000, 10598, -3, -98, -1000, -1000, 663, -1000, 10598, -1000,
	3, 10598, 10598, 10598, 117, 116, -1000, 924, 203, 202,
	10598, -1000, -1000, 28559, 25640, 115, 1254, -124, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 114, 113, 28535, -124, 112,
	2694, -1000, 11236, 11236, 11236, 6117, 201, 109, 27541, -124,
	28310, 8683, 8683, 8683, 108, 28217, 10598, -124, 25608, 3747,
	3685, -9, -11, -20, 1654, -21, 107, 427, 425, 106,
	1234, -1000, -1000, -1000, -1000, 589, 583, 1335, -1000, 1069,
	-1000, 471, -1000, 748, 10598, 12169, 199, 196, 873, -1000,
	1332, 998, 1330, 998, -1000, -16, 811, -1000, 10598, -1000,
	10598, -1000, 579, -1000, -1000, 576, 443, 1253, 671, -1000,
	966, -1000, -1000, 685, -1000, -1000, 6755, 28642, -1000, 802,
	1471, -22, -1000, -1000, -1000, 451, 14820, 14240, 8364, -26,
	-1000, -1000, -1000, 877, -1000, 518, 1651, 104, 1100, 874,
	810, 738, 1638, 28642, -18, -18, -1000, -1000, -1000, -1000,
	-1000, 20232, -1000, 1215, -1000, 17412, 189, 20232, 188, -1000,
	187, -1000, -1000, 176, 20232, 1133, 403, 16552, -1000, 441,
	968, 27118, -1000, 101, 1231, 1522, -1000, 14240, 1159, 1158,
	14240, 1009, 929, 929, 929, -1000, 172, 397, 357, 418,
	4240, 10598, 17976, 932, 64, 98, 1505, 10598, 190, 190,
	10598, 11236, 11236, -1000, 190, -1000, -1000, -1000, -1000, -1000,
	1251, 171, 10598, 29110, 25823, 25717, -28, -1000, 8045, -30,
	-1000, 10598, -1000, 26863, -1000, -1000, 359, 1369, -1000, 10598,
	28113, 90, 7726, -1000, 27975, -6, -6, -1000, 1721, -1000,
	15102, 452, 948, 26795, 28971, 29110, -1000, 10598, -1000, -1000,
	1250, 10598, -1000, 28971, 29110, 11236, 11236, 11236, 11236, 11236,
	11236, 11236, 11236, 11236, 11236, 11236, 11236, 11236, 11236, 11236,
	11236, 11236, 11236, 11236, 1134, 11236, 1693, 1693, 1693, -59,
	7407, -1000, 1291, 1250, 10598, 10598, 29110, 87, 84, 83,
	-1000, 10598, -124, 10598, 10598, 10598, -1000, -1000, -1000, 82,
	-1000, 1636, -1000, -1000, -1000, -1000, 1231, 20232, 20232, 20232,
	1329, -1000, 2110, -1000, 26763, -33, -1000, 320, 1479, 10598,
	-1000, -1000, 169, 12169, 20232, -1000, 1166, 1180, 510, 20232,
	-1000, 20232, -1000, 20232, 20232, 20232, -34, -35, 20232, 20232,
	-1000, 15972, 594, 167, -1000, -66, -1000, -1000, 224, 10,
	802, -1000, -84, -1000, 404, -1000, 355, 353, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 78, -1000, -1000, 1219,
	-1000, 12169, 165, 20232, 17412, 1553, 12169, 1011, 1137, 403,
	16552, -1000, 655, -1000, -1000, -1000, 440, 10598, 10598, 1505,
	14240, 14240, 920, 1139, 14240, -1000, -1000, -1000, -1000, 352,
	374, 346, 12451, 418, 17976, -1000, 1633, 1169, -39, -1000,
	-1000, 20232, 164, -1000, 418, 1640, 190, 3778, 3274, 10598,
	29110, 28963, -50, 10598, 10598, -1000, -51, -1000, 10598, 345,
	28642, -1000, -1000, -1000, 28642, 10598, 1713, 10598, 77, 76,
	75, -1000, -1000, -1000, 25308, 10598, 72, -1000, 71, 70,
	28642, 1291, 28642, -1000, -1000, 591, 591, 679, 679, 679,
	679, 1693, 1016, 1098, 1088, 513, 513, 513, 688, 494,
	494, 513, 513, 513, 1249, 1135, 163, 26070, 10598, -57,
	-1000, -1000, -1000, 28642, 28642, 69, -1000, -1000, -1000, -124,
	3547, 26523, 26440, -1000, 68, 440, -1000, -1000, -1000, 20232,
	-1000, 20232, -1000, 5172, 20232, 1247, 1060, -1000, -1000, 1149,
	160, 11236, 20232, -1000, 878, 12169, 1468, 42, 5172, 1468,
	26416, 5797, -61, -68, 1055, -1000, 1052, 10598, -1000, 29110,
	998, 998, -1000, 568, 552, 551, 550, -1000, -1000, -90,
	15690, 1719, 1375, 20232, 1421, -1000, -1000, 159, -1000, -1000,
	-1000, 876, -69, 12169, -73, 62, 10, -74, 20232, -1000,
	403, 16552, -1000, 1373, -1000, 20232, 28642, -124, -1000, 920,
	-1000, 158, 10598, 14240, -1000, -137, -1000, -75, -1000, 418,
	-83, 17976, -1000, 344, -169, -1000, 402, -1000, 418, 157,
	20232, 17976, 10598, 10598, 28963, -89, -1000, 190, 190, -1000,
	26190, -1000, 28642, -1000, 27975, -1000, -1000, -1000, 922, -1000,
	26097, -1000, -1000, -1000, -1000, 11236, 1246, 156, 29110, 25993,
	-1000, -1000, 10598, -1000, -1000, -1000, -1000, -1000, 1094, -1000,
	-1000, 20232, 1066, -1000, -1000, 10598, 26070, 155, 1215, 154,
	-1000, -1000, -1000, -1000, -1000, -1000, 1479, 3, -1000, 844,
	-1000, -1000, 28642, 1447, -1000, -1000, 20232, 20232, 153, 152,
	-1000, 150, 42, -94, -1000, 401, 606, -104, 20232, -1000,
	-1000, 5478, 20232, 878, -105, -1000, 1215, -1000, 878, 146,
	16552, -1000, 1133, -91, -1000, 1549, -1000, 20232, 28642, -1000,
	418, -1000, 1629, 17976, 144, -1000, -1000, 1169, -1000, 4557,
	17976, 20232, -106, -1000, 190, 190, -1000, -1000, 60, 948,
	1518, -1000, 3090, 11236, 29110, -110, -1000, 25855, -1000, -1000,
	1328, 25748, 1106, 20232, -1000, 20232, 1468, 58, 20232, 473,
	5172, -1000, -1000, 10598, 10598, 10598, 1719, -1000, -1000, 1715,
	724, -1000, 451, -1000, 140, 1215, 878, -1000, 1215, 12169,
	-1000, 1137, 20232, 137, -112, 17976, -1000, -1000, 342, -1000,
	-1000, 1626, -1000, -114, -1000, -1000, 787, 10598, 3090, -127,
	-1000, -1000, 1257, -1000, 972, 838, 57, -128, -1000, -1000,
	124, -1000, 10598, -1000, -132, -138, -6, -1000, -1000, 14820,
	-1000, 20232, -1000, 1215, -1000, -144, -1000, -1000, -1000, -1000,
	-1000, 418, 262, -1000, 54, 10279, 10279, -124, -1000, 20232,
	-1000, 1008, 991, 694, -1000, -1000, -1000, -1000, -1000, 1106,
	28642, -1000, -1000, 51, -119, -151, -1000, 878, 17976, -1000,
	-1000, -1000, -1000, 11863, 987, 747, 27458, -1000, -1000, -1000,
	1381, -1000, 479, 1120, 1120, 972, 1713, -1000, 995, 1215,
	-1000, 1602, -1000, -1000, -1000, -1000, -1000, -1000, 1611, -1000,
	-1000, 1155, -1000, -1000, -1000, -1000, -1000, -1000, 9960, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1949, 1944, 1495, 1613, 1943, 1942, 1603, 1941, 1935,
	1933, 1930, 1929, 1926, 121, 1596, 1591, 49, 1587, 1925,
	107, 1924, 1923, 1921, 119, 1920, 1918, 1917, 1916, 191,
	1914, 1911, 110, 1581, 1572, 1563, 1909, 1908, 112, 1907,
	39, 1905, 94, 1903, 26, 173, 2274, 150, 1901, 1898,
	1896, 12, 125, 87, 1887, 106, 1884, 1883, 59, 40,
	27, 11, 1880, 123, 130, 1459, 28, 1879, 1878, 156,
	1877, 24, 25, 97, 162, 160, 136, 144, 1875, 1873,
	1870, 1867, 50, 1866, 3, 1863, 1862, 14, 73, 20,
	1861, 32, 58, 1860, 1859, 139, 1858, 99, 124, 1501,
	143, 135, 98, 1857, 109, 10, 91, 1854, 1853, 140,
	43, 1848, 57, 100, 153, 1847, 68, 176, 81, 31,
	56, 126, 1846, 1845, 1844, 96, 1842, 128, 93, 1840,
	1837, 92, 1835, 151, 149, 1833, 1829, 116, 1828, 146,
	1826, 1825, 158, 182, 1824, 1823, 164, 1821, 8, 53,
	86, 15, 1484, 1474, 127, 82, 36, 19, 1820, 1807,
	958, 1164, 38, 102, 75, 64, 103, 69, 76, 154,
	72, 1818, 1816, 131, 1815, 1814, 1813, 1812, 1811, 101,
	1808, 1805, 90, 152, 17, 13, 18, 108, 44, 29,
	104, 205, 161, 129, 1804, 114, 134, 61, 208, 1802,
	1801, 1660, 145, 1800, 1799, 1797, 1396, 1358, 1352, 767,
	1796, 1793, 1047, 1024, 1791, 1789, 67, 1788, 138, 133,
	1787, 157, 178, 23, 1786, 65, 60, 115, 1784, 137,
	66, 0, 677, 648, 1781, 147, 89, 1776, 1775, 1774,
	1773, 37, 2, 9, 5, 6, 4, 30, 21, 1772,
	1771, 148, 41, 88, 1770, 163, 1769, 1768, 1767, 52,
	1757, 22, 1756, 16, 1755, 1745, 7, 1, 1742, 1741,
	155, 1740, 118, 1739, 1567, 1738, 159, 1737, 1700, 1559,
	55, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 229, 229, 230, 230, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 197, 197, 196, 19,
	171, 171, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 270, 270, 270, 274, 274,
	275, 275, 276, 276, 276, 276, 276, 276, 276, 272,
	272, 27, 31, 31, 31, 31, 31, 31, 147, 143,
	143, 145, 145, 145, 145, 64, 142, 142, 142, 142,
	144, 144, 144, 144, 222, 221, 221, 227, 227, 227,
	79, 79, 79, 79, 79, 80, 80, 80, 220, 220,
	220, 220, 228, 228, 228, 228, 228, 228, 81, 81,
	81, 226, 226, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 18, 271, 271, 273,
	273, 33, 33, 34, 34, 35, 35, 35, 35, 10,
	10, 11, 11, 82, 82, 83, 83, 150, 150, 150,
	150, 84, 84, 56, 56, 56, 149, 239, 239, 240,
	240, 240, 240, 240, 240, 241, 241, 241, 241, 241,
	241, 241, 237, 237, 238, 235, 235, 236, 236, 236,
	236, 277, 277, 148, 148, 87, 87, 244, 244, 244,
	244, 242, 242, 242, 242, 242, 245, 243, 246, 246,
	246, 246, 246, 183, 183, 183, 37, 12, 62, 62,
	13, 9, 9, 130, 130, 91, 91, 188, 188, 188,
	72, 72, 51, 51, 51, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 131, 131, 132, 132,
	25, 30, 36, 36, 36, 36, 36, 279, 279, 68,
	68, 68, 68, 69, 69, 146, 146, 146, 146, 146,
	63, 8, 8, 58, 58, 59, 59, 60, 60, 61,
	61, 280, 280, 24, 24, 24, 75, 75, 139, 139,
	139, 141, 141, 140, 140, 140, 116, 116, 116, 38,
	96, 96, 105, 105, 106, 106, 194, 107, 107, 29,
	29, 46, 46, 44, 44, 44, 44, 44, 44, 45,
	45, 47, 47, 47, 47, 47, 47, 47, 252, 252,
	252, 255, 255, 251, 253, 253, 254, 254, 278, 278,
	117, 117, 117, 86, 85, 85, 89, 89, 88, 90,
	90, 187, 114, 114, 114, 114, 133, 133, 134, 134,
	135, 135, 136, 136, 136, 137, 137, 138, 138, 113,
	113, 167, 167, 48, 48, 95, 95, 97, 97, 157,
	157, 157, 158, 158, 156, 156, 156, 156, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 268, 268, 268,
	269, 269, 186, 186, 190, 190, 190, 190, 190, 190,
	184, 184, 184, 184, 185, 185, 195, 195, 120, 120,
	120, 120, 118, 118, 119, 119, 191, 191, 191, 191,
	115, 115, 192, 192, 192, 151, 151, 198, 198, 198,
	216, 216, 94, 94, 94, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 200, 200, 200, 200, 202, 202, 202, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 215, 215, 215, 215, 215, 203, 203, 210,
	210, 211, 211, 212, 213, 204, 204, 205, 205, 206,
	207, 214, 214, 214, 214, 218, 218, 208, 208, 208,
	208, 208, 209, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 128, 128, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 161, 161, 161, 161, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 247, 247, 247, 247,
	247, 247, 247, 249, 249, 250, 250, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 256, 256, 257, 257, 259, 259,
	260, 260, 261, 262, 262, 262, 263, 264, 264, 258,
	258, 265, 265, 265, 266, 266, 267, 267, 267, 267,
	267, 173, 173, 173, 174, 174, 175, 181, 181, 181,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 70, 70, 70, 70,
	70, 102, 102, 170, 170, 168, 168, 168, 172, 172,
	121, 121, 217, 217, 217, 217, 217, 217, 217, 122,
	122, 122, 129, 123, 123, 124, 124, 124, 124, 124,
	124, 164, 165, 125, 125, 125, 166, 166, 176, 180,
	180, 179, 178, 178, 177, 177, 154, 154, 155, 155,
	153, 152, 110, 110, 109, 109, 108, 108, 281, 281,
	182, 182, 111, 111, 112, 104, 104, 193, 193, 193,
	193, 98, 98, 77, 77, 99, 99, 73, 73, 76,
	76, 74, 74, 74, 74, 92, 92, 93, 93, 71,
	71, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 219, 219, 219, 169, 65, 65, 65, 66,
	66, 67, 67, 224, 224, 224, 225, 225, 225, 225,
	223, 223, 223, 223, 223, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 2, 3,
	3, 2, 3, 3, 4, 2, 3, 4, 3, 3,
	4, 4, 2, 5, 5, 6, 2, 2, 0, 2,
	0, 6, 6, 5, 5, 4, 12, 4, 12, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 5, 2, 0,
	6, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 7, 4,
	6, 3, 1, 5, 6, 9, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 225, 66, -8, -9, -10, -11, -12,
	-13, -254, 94, 103, 125, 206, 101, 87, 119, 228,
	235, -44, -46, 245, -147, 248, 35, 257, 60, 97,
	230, 223, 224, 282, 68, -252, -47, -45, 330, 305,
	311, 239, -48, 266, 297, 333, 266, 134, 80, 300,
	-270, -99, 266, 80, -74, -65, 323, 4, -231, -233,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	103, 109, 110, 113, 115, 120, 125, 126, 127, 128,
	135, 138, 140, 133, 148, 150, 151, 154, 153, 158,
	161, 164, 166, 167, 168, 171, 169, 173, 174, 176,
	175, 181, 183, 184, 186, 189, 192, 195, 198, 199,
	200, 201, 204, 206, 208, 209, 210, 211, 213, 214,
	216, 217, 218, 219, 220, 223, 221, 222, 224, 225,
	226, 228, 230, 231, 233, 246, 247, 258, 235, 236,
	237, 238, 241, 242, 243, 245, 248, 250, 253, 256,
	257, 259, 262, 260, 255, 265, 267, 268, 269, 270,
	271, 278, 282, 283, 284, 285, 288, 289, 290, 292,
	294, 295, 296, 301, 306, 307, 308, 309, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 50, 51, 52,
	55, 82, 84, 85, 100, 104, 105, 111, 121, 123,
	129, 130, 139, 141, 142, 143, 145, 156, 170, 180,
	182, 193, 197, 203, 205, 212, 232, 240, 251, 252,
	261, 263, 273, 274, 275, 279, 280, 297, 298, -270,
	-73, -65, 80, 89, 138, 290, 289, 80, 134, 266,
	300, -17, 330, -29, -7, -15, -4, -24, -38, -14,
	-32, -18, -33, -34, -35, -16, 23, -223, 4, -231,
	-233, -232, -234, 57, 69, 118, 137, 131, 147, 149,
	157, 159, 172, 194, 196, 229, 249, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 48, 49, 53,
	56, 58, 64, 68, 72, 73, 74, 75, 76, 77,
	86, 88, 90, 91, 92, 95, 97, 99, 106, 107,
	108, 114, 116, 117, 119, 122, 124, 132, 134, 136,
	144, 146, 152, 155, 160, 162, 163, 177, 178, 179,
	185, 187, 188, 190, 191, 202, 207, 215, 227, 239,
	244, 254, 264, 266, 272, 276, 277, 281, 286, 287,
	291, 293, 299, 300, 302, 303, 304, 305, -65, -65,
	-65, 206, 22, -274, 22, -275, -276, 68, 94, 119,
	239, 138, 89, 289, -274, -69, 235, -65, -143, 161,
	242, 54, 232, 278, -144, -142, -222, 273, 171, -100,
	-65, 4, 22, 54, 244, 80, 59, 81, 120, 134,
	135, 64, 65, 151, 209, 161, 243, 267, 273, 278,
	68, 292, 269, 102, -279, 278, 278, -279, -279, -68,
	278, 276, -69, -222, -278, 266, 266, 291, 300, -130,
	80, 287, -45, -47, -46, -88, -89, 286, 144, 99,
	191, -44, -46, -252, -255, 213, -251, -65, -255, -85,
	-86, 22, 91, 334, -191, -73, 188, -112, 330, -3,
	-191, 129, -73, -76, 129, -73, -65, -191, 129, 276,
	334, -99, -92, -65, -153, -152, 332, 117, 117, 330,
	-109, -110, -152, -153, 117, 146, 146, -192, -191, -65,
	129, -77, 129, -76, -101, 129, -100, -101, 129, -197,
	-196, -225, 4, -231, -233, -232, 297, 266, 134, -171,
	330, -126, 330, -65, 22, 187, 334, 187, -65, -143,
	52, -143, 246, 330, -145, -63, -64, 148, 208, 276,
	315, 117, 309, -81, 5, 86, -103, 332, 54, 246,
	209, 243, 117, -271, 187, 117, 117, 117, 117, 117,
	209, 243, 117, 309, 148, 208, 258, 266, 300, 117,
	117, -146, -63, -64, -146, 276, -69, -115, -191, -100,
	129, -65, -100, 134, -65, 129, -88, -89, -114, -133,
	-134, 160, 108, 185, -117, 22, 91, -117, -117, 44,
	331, 331, 334, -255, -93, 330, -104, -193, -159, 323,
	-161, 321, 322, 316, 177, 310, -173, -163, -176, 100,
	232, 330, -73, -162, 335, 9, -249, -46, 29, -174,
	-175, 48, -65, 7, 8, 5, 6, -71, -200, -169,
	-209, 281, 106, 179, -247, -248, 4, -231, -224, -201,
	-211, -205, -208, 145, 57, 73, 76, 74, 77, 244,
	291, 49, 28, 104, 105, 197, 203, 263, 279, 280,
	129, 180, 130, 55, 121, 156, 93, 37, 39, 41,
	42, 50, 51, 82, 84, 85, 111, 139, 141, 142,
	143, 182, 212, 251, 261, 274, 275, 298, -232, -212,
	-213, -206, -207, -214, -104, -112, 323, -73, 330, -111,
	-182, -159, 86, -53, 221, -52, 21, 23, 94, 295,
	100, 255, 270, 236, 255, 270, 236, 221, 100, 335,
	221, 221, 100, -229, -226, 9, -225, 5, -74, 334,
	-223, 323, -230, -229, 259, 331, -98, -73, -110, -192,
	-75, -73, -75, 245, -65, 30, 100, -55, 334, 47,
	226, 100, -55, 334, 100, -55, 100, 331, 334, -191,
	129, -76, 30, -170, -198, -199, -201, -210, -204, -208,
	-209, 40, 46, 45, 271, 170, 240, 252, 38, 186,
	140, 139, 141, 142, 143, 251, 37, 212, 111, 93,
	85, 84, 182, 42, 41, -212, -213, -206, -207, 82,
	274, 275, 145, 39, 51, 50, 298, 261, -102, -159,
	-270, -276, -270, 30, -142, -222, -102, 334, 334, 158,
	-80, 164, 176, 126, -221, 86, -227, -220, -183, 9,
	281, 106, 187, -226, 8, 322, -219, 7, 321, -221,
	86, 71, -228, 5, 4, -169, -183, 86, 161, -209,
	332, -223, 247, -100, 22, -222, -273, 114, -270, -222,
	-222, -222, -222, -222, -65, 158, -222, -222, 266, 134,
	266, 334, 334, -69, -55, 334, 330, -87, 177, -253,
	305, -87, 330, -66, 129, -65, -253, 177, -114, -134,
	-133, -135, -159, 22, -138, 110, 173, -159, -161, -45,
	-45, -45, -90, -187, -159, -251, 30, -92, -95, 334,
	117, 10, 11, 56, 33, 321, 322, 323, 324, 112,
	325, 326, 319, 320, 318, 313, 314, 315, 62, 165,
	234, 13, 14, 15, 26, 190, 159, 310, 131, 249,
	316, 16, 17, 18, 147, 36, 132, -70, 30, 4,
	-78, -159, -159, -159, -159, -159, 196, -108, -154, 328,
	-46, 330, -46, -159, -102, 7, -46, -168, 328, -177,
	-159, -109, 330, 5, 330, 5, -256, 306, 114, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 205, -218, 301, -218,
	-218, -202, 330, -202, -203, 330, -202, 307, 311, 330,
	-95, -73, 334, 331, 334, 276, -131, 64, 58, -149,
	129, 58, -235, -65, 64, -236, 53, 287, 207, 116,
	-131, 64, -131, 64, 64, -191, 33, -29, 117, 33,
	-29, 117, 276, -76, -65, 276, 276, -191, -195, 312,
	-65, -195, 334, 117, 331, 334, -151, 303, -139, -29,
	330, 86, 30, -139, -105, -106, -194, -107, -73, 330,
	-65, -65, -76, -77, -100, -101, -101, -17, -196, 100,
	-20, -29, -24, -38, -14, 331, 334, -94, 29, -127,
	330, 308, 168, 83, 127, 167, -128, 238, 331, 334,
	276, 117, 278, 331, -64, -63, -79, 211, 253, 222,
	241, 334, 8, 7, 7, -223, -272, -65, -73, -76,
	-73, -64, -63, -191, -82, -92, -83, -65, -150, -149,
	-237, -238, -235, 134, 287, 107, 30, 100, -62, 201,
	30, 187, 177, -58, 268, 100, -136, -219, 330, 322,
	-137, 232, 233, 334, -51, 31, 90, 330, 331, -151,
	-193, -97, -189, 328, -191, -73, -46, -190, 330, -216,
	-198, -215, 217, 218, 216, 220, 219, -198, -223, 273,
	-159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
	-159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
	-159, -159, 159, 131, 249, 36, 132, -159, 276, -159,
	-159, -159, -159, 169, 177, 179, 281, 106, 288, 91,
	183, -281, 264, 32, -166, -46, 330, -181, 27, 254,
	22, -223, -173, 232, 330, -154, -159, -155, -102, 331,
	331, 334, -102, -172, 329, -168, -180, -179, 302, 331,
	-102, 299, 22, 91, 323, 7, -127, -257, 109, 122,
	330, 331, 331, -159, -159, -121, -217, -102, 4, 308,
	168, 83, 127, 167, 238, -121, -122, -159, -102, -123,
	-160, -161, 321, 322, 316, 330, 232, -124, -159, -102,
	-159, 43, 155, 277, -125, -159, 117, -102, -159, -159,
	-159, -102, -102, -102, 330, 7, 7, 273, 273, 7,
	-151, 331, -182, -52, -73, -65, -65, 177, -149, 129,
	-57, 177, -198, -65, 330, 330, 150, 150, -65, -65,
	129, -65, 129, -65, -65, -53, 221, -29, 330, -29,
	330, -65, 221, -65, -73, 221, -39, 128, 183, -42,
	305, -229, 259, 117, -73, -116, 227, -159, -116, -141,
	187, -98, 297, -65, -116, -96, 334, 117, 315, -98,
	-55, -55, -55, -191, -198, 328, 328, 7, 276, 276,
	276, 276, 330, -159, -272, -272, -63, 285, 61, 211,
	-227, 334, -195, 331, 331, 334, -66, 134, -66, -29,
	-100, 5, -29, -73, 100, -59, 96, -280, 315, -65,
	-137, -159, -187, -20, -113, 122, -195, 334, 69, -120,
	149, 172, 118, 157, 229, 137, 7, 103, -32, -156,
	335, 330, -186, 311, -46, -190, -189, 309, -159, -159,
	276, -281, 264, -166, -159, 169, 179, 281, 106, 288,
	91, 183, 117, 330, -160, -160, -102, -163, 330, -102,
	329, 338, 331, -159, 329, 329, 334, -178, -179, 95,
	-159, -89, 334, -88, -159, -102, -102, 331, 331, -262,
	195, 330, 330, -159, 30, 334, 331, 117, 331, 331,
	-129, 202, 331, 10, 11, 321, 322, 323, 324, 112,
	325, 326, 319, 320, 318, 313, 314, 315, 62, 165,
	234, 13, 14, 15, 147, 132, -160, -160, -160, -102,
	330, 331, -164, -165, 117, 114, 30, -125, -125, -125,
	331, 117, -102, 334, 334, 334, 331, 331, 331, 7,
	331, 334, 331, 309, 309, 331, -113, 276, 276, 100,
	177, 294, -239, -236, -159, -91, -188, -65, -250, 330,
	-247, -248, -71, 330, 330, -50, 94, 245, -132, 100,
	-55, 100, -55, 276, -131, 64, -102, -102, 276, 276,
	-42, 117, 265, 189, 259, -104, 178, -116, 63, 331,
	-151, -106, -97, -182, 331, 329, 7, 7, 331, 168,
	127, 167, -128, 167, -128, -128, 7, -65, -84, 133,
	-150, 330, -66, 330, 330, -87, 330, -65, -60, 154,
	-280, -226, -253, 188, 331, 331, -167, 124, 44, -189,
	149, 149, -189, -120, 149, -118, 194, -118, -118, -268,
	330, -17, 330, 329, -186, -223, 328, 336, -102, -185,
	-184, 30, -65, 192, 331, -159, -159, -160, -160, 117,
	330, -159, -170, 26, 26, 331, -102, 331, 334, -155,
	-159, 331, -168, 97, -159, 272, 331, 299, -89, -89,
	-89, 5, -263, -65, 330, 303, -88, 331, -216, -198,
	-159, -164, -159, -216, -198, -160, -160, -160, -160, -160,
	-160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
	-160, -160, -160, -160, 91, 177, 183, -160, 334, -102,
	331, -165, -164, -159, -159, -198, 331, 331, 331, -102,
	-159, -159, -159, 331, 7, -167, -65, -65, -149, 100,
	-240, 64, -241, 56, 107, 68, 177, 179, 287, 207,
	53, 86, 215, 331, 331, 334, -72, -109, 56, -72,
	-159, 330, -91, -92, 177, 86, 177, 86, 79, 283,
	-65, -65, -73, -65, -65, 331, 331, -65, -73, -230,
	273, 330, -140, 330, 187, -29, -116, 315, 329, 329,
	331, 132, -91, 330, -92, -82, 30, -91, 187, -61,
	153, -280, -226, -58, -259, 304, -159, -102, -189, -189,
	-119, 293, 187, 149, -189, 329, 331, -269, 7, 329,
	-197, -186, -185, 7, -158, -157, 115, 175, 331, -65,
	330, -186, 26, 26, -159, -170, 331, -159, -159, 331,
	-159, 329, -159, 5, -159, 331, 331, 331, -264, -65,
	-159, 331, 331, 331, -165, 117, 91, 183, 330, -159,
	331, 331, 334, 331, 331, 331, -259, -149, -65, -223,
	-65, 107, 129, 179, 150, 330, -160, -73, -148, -277,
	67, 262, -188, -51, -223, -51, 331, -102, 331, 331,
	179, 179, -159, -198, -55, -55, 276, 276, 276, 276,
	-162, -71, -65, -41, -40, 5, 92, -92, 64, -112,
	-46, 330, 198, 331, -91, 331, 331, -29, 331, -73,
	-280, -226, -59, -260, -261, -65, -119, 330, -159, -189,
	-156, 331, 334, -186, 331, -185, 329, 334, 337, 315,
	-186, 330, -92, -184, -159, -159, 331, 331, -89, -258,
	200, 331, -160, 117, 330, -170, 331, -159, -241, -66,
	177, -159, -67, 330, -84, 330, -72, -89, 215, -54,
	56, -65, -65, 330, 330, 330, 334, 331, -43, 315,
	289, 178, 331, -65, -65, -148, 331, -84, -148, 330,
	-226, -60, 334, 30, -92, -186, 7, -185, -17, -157,
	-223, 328, -185, -92, 331, 331, -89, 44, -160, -170,
	331, 331, 100, 331, -244, 166, -65, -92, -51, 331,
	-73, -49, 293, -223, -102, -102, -102, -40, 5, 245,
	-151, 330, -84, -148, -84, -91, -61, -261, -263, 331,
	-184, 329, 7, 331, -265, 210, 233, -102, 331, 107,
	-242, -245, -243, 187, 118, 199, 250, 331, 331, -87,
	-159, 331, 331, -89, -105, -92, -84, 331, -186, 329,
	331, -266, -267, 36, 284, 71, -159, -266, -65, -243,
	187, -245, 187, 289, 89, -244, 331, -151, 331, -148,
	-185, -267, 204, 113, 232, 204, 113, -246, 174, 226,
	47, 245, -246, -242, -56, 47, 226, -84, 26, 20,
	179, 86, -267,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 437, 0, 0, 0, 0, 0, 0,
	0, 409, -2, 0, 157, 0, 358, 0, 358, 358,
	362, 0, 0, 439, 324, 436, -2, 447, 0, 0,
	0, 445, 423, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 976, 905, 911, 912, 936, 937, 938,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 0,
	0, 907, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 0, 236, 950, 951,
	952, 953, 954, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 121, 128,
	129, 1029, 131, 0, 138, 139, 140, 142, 143, 144,
	145, 146, 147, 148, 0, 351, 1054, 364, 152, 1006,
	1059, 964, 1132, 1077, 160, 170, 0, 1138, -2, 174,
	97, 203, 204, 0, 208, 209, 0, 211, 238, 0,
	0, 0, 0, 0, 218, 0, 221, 225, 0, 0,
	0, 232, 0, 0, 369, 357, 369, 354, 355, 356,
	359, 0, 350, 151, 0, 438, 0, 0, 0, 0,
	0, 323, -2, 419, 420, -2, 0, 442, 442, 442,
	0, 0, 420, 0, 428, 1034, 431, 918, 429, 0,
	0, 444, 443, 0, 424, 526, 0, 473, 0, 2,
	0, 1116, 526, 0, 1116, 910, 0, 0, 1116, 0,
	0, 136, 137, 915, 913, 914, 0, 0, 0, 0,
	908, 884, 882, 883, 0, 0, 0, 0, 532, 87,
	1116, 55, 1116, 903, 55, 1116, 95, 55, 1116, 0,
	116, 118, 946, 947, 948, 949, 1143, 0, 0, 0,
	0, 126, 0, 130, 132, 0, 0, 0, 363, 153,
	1105, 155, 0, 0, 159, 161, 162, 0, 0, 0,
	0, 0, 0, 173, 198, 199, 98, 0, 0, 0,
	219, 222, 0, 240, 0, 0, 0, 0, 0, 0,
	220, 223, 0, 226, 0, 228, 229, 0, 0, 0,
	0, 352, 365, 366, 353, 0, 361, 55, 530, 296,
	1116, 435, 296, 940, 435, 1116, -2, 0, 415, 454,
	455, 0, 0, 0, 0, 440, 441, 0, 0, 0,
	411, 412, 0, 430, 0, 0, 476, 895, 899, 900,
	629, 0, 0, 0, 0, 0, 0, 721, 723, 1110,
	1132, 0, 725, 726, 0, 728, 730, 731, 0, 734,
	735, 875, 907, 921, 922, 923, 924, 0, 0, 927,
	0, 929, 930, 931, 775, 744, -2, -2, 919, 561,
	562, 563, 564, -2, 1145, 748, 750, 752, 753, 754,
	755, 0, 1094, 1111, 1112, 1128, 1129, 1137, 1141, 1142,
	1116, 1125, 1117, 1106, 1114, 1123, 981, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 945, 591,
	592, 597, 598, 600, 476, 474, 527, 528, 0, 0,
	892, 890, 891, 32, 347, 34, 0, 347, 347, 0,
	0, 0, 0, 245, 0, 0, 247, 0, 0, 0,
	0, 0, 0, 517, 64, 65, 201, 202, 906, 0,
	880, 881, 517, 66, 77, 0, 0, 901, 885, 536,
	0, 386, 0, 0, 533, 0, 0, 89, 0, 53,
	54, 0, 91, 0, 0, 93, 0, 437, 0, 0,
	1116, 0, 437, 0, 833, 544, 545, 546, 547, 548,
	626, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 568, 569, 570, 571, 572, 573, 574, 588, 0,
	567, 567, 567, 580, 581, 589, 590, 595, 596, 607,
	608, 610, 612, 606, 606, 606, 603, 604, 0, 831,
	0, 141, 0, 0, 156, 0, 0, 0, 0, 0,
	165, 185, 186, 187, 166, 168, 175, 177, 178, 179,
	188, 189, 190, 191, 313, 0, 315, 932, 0, 167,
	169, 171, 172, 192, 193, 194, 195, 196, 197, 0,
	0, 99, 207, 205, 206, 210, 212, 0, 237, 213,
	214, 215, 216, 217, 224, 227, 230, 231, 0, 0,
	0, 0, 0, 360, 316, 0, 254, 0, 0, 319,
	434, 0, 0, 0, 1116, 939, 374, 0, 418, 452,
	453, 456, 460, 461, 464, 467, 468, 458, 629, 425,
	426, 427, 448, 449, 334, 432, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 810, 811, 812, 813, 814,
	815, 818, 819, 816, 817, 820, 821, 822, 0, 0,
	0, 823, 824, 825, 0, 0, 827, 0, 829, 0,
	0, 0, 0, 0, 0, 889, 0, 0, 0, 898,
	826, 634, 635, 636, 658, 659, 0, 722, 886, 879,
	724, 0, -2, 831, 0, 727, 732, 733, 0, 0,
	874, -2, 0, 926, 0, 626, 777, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 854, 860, 0, 0,
	0, 0, 0, 0, 0, 0, 576, 594, 605, 602,
	601, 578, 0, 577, 575, 0, 579, 0, 0, 0,
	536, 0, 0, 894, 0, 0, 0, 0, 346, 36,
	1116, 0, 57, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	244, 0, 0, 0, 909, 0, 0, 0, 69, 0,
	916, 76, 0, 0, 0, 0, 398, 0, 398, 388,
	0, 0, 0, 398, 401, 402, 404, 405, 0, 0,
	534, 88, 904, 55, 96, 55, 55, 102, 117, 0,
	119, 122, 123, 124, 125, 120, 0, 537, 539, 549,
	0, 613, 614, 615, 616, 617, 618, 627, 127, 0,
	0, 0, 0, 158, 163, 164, 370, 0, 182, 0,
	184, 0, 314, 934, 933, 100, 239, 149, 233, 234,
	517, 367, 368, 531, 0, 0, 253, 915, 255, 257,
	258, 259, 260, 940, 0, 940, 0, 0, 317, 0,
	0, 0, 0, 376, 382, 0, 0, 462, 0, 0,
	459, 465, 466, 0, 451, 332, 333, 437, 917, 470,
	896, 517, 477, 0, 487, 526, 503, 492, 0, 630,
	540, 541, 582, 583, 584, 585, 586, 631, 632, 0,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	-2, -2, -2, 650, 651, 652, -2, -2, -2, 656,
	657, -2, 828, 830, 0, 889, 0, -2, 0, -2,
	-2, -2, -2, 670, 0, 672, 675, 677, 679, 0,
	0, 0, 0, 888, 689, 866, 0, 0, 807, 808,
	809, 897, 674, 0, 0, 887, 878, 0, 0, -2,
	729, 0, 0, 0, 837, 838, 873, 869, 0, 736,
	447, 0, 0, 0, 0, 0, 935, 785, 0, 0,
	0, 749, 751, 0, 0, 0, 0, 841, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 831, 851, 0,
	0, 692, 0, 0, 0, 0, 1132, 0, 831, 859,
	0, 0, 0, 0, 0, 831, 0, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	470, 529, 893, 35, 336, 0, 0, 0, 38, 1116,
	46, 0, 268, 0, 0, 0, 0, 0, 349, 47,
	1116, 55, 1116, 55, 48, 33, 347, 241, 0, 242,
	0, 340, 0, 335, 338, 0, 76, 0, 0, 63,
	0, 67, 78, 0, 902, 86, 0, 535, 383, 398,
	0, 0, 390, 387, 385, 536, 0, 0, 0, 0,
	90, 92, 94, 0, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 133, 134, 154, 180, 181, 183,
	176, 0, 235, 262, 295, 0, 0, 940, 0, 251,
	296, 318, 320, 0, 0, 378, 382, 0, 381, 435,
	0, 0, 450, 0, 472, 0, 475, 0, 0, 0,
	0, 0, 523, 523, 523, 521, 497, 437, 0, 503,
	0, 0, 515, 0, -2, 492, 0, 0, -2, -2,
	0, 0, 0, 690, -2, 671, 673, 676, 678, 680,
	0, 0, 0, 0, 0, 0, 0, 691, 0, 0,
	876, 879, -2, 832, 835, 836, 0, 0, 870, 0,
	0, 0, 0, 446, 447, 447, 447, 742, 0, 743,
	0, 0, 0, 0, 0, 0, 758, 0, 759, 760,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 696, 697, 0,
	0, 762, 857, 858, 0, 0, 0, 0, 0, 0,
	767, 0, 864, 0, 0, 0, 771, 772, 773, 0,
	565, 0, 587, 609, 611, 599, 472, 0, 0, 0,
	0, 56, 266, 285, 0, 0, 325, 331, 331, 0,
	745, 746, 0, 0, 0, 40, 0, 0, 0, 0,
	44, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 79, 396, 397, 384, 395, 0,
	398, 403, 400, 406, 0, 542, 0, 0, 550, 619,
	620, 621, 622, 623, 624, 625, 0, 150, 249, 0,
	256, 0, 0, 0, 254, 0, 0, 0, 380, 382,
	0, 373, 374, 457, 463, 433, 779, 0, 0, 478,
	0, 0, 0, 0, 0, 518, 522, 519, 520, 0,
	0, 0, 0, 503, 515, 484, 0, 0, 0, 491,
	514, 0, 513, 502, -2, 633, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 867, 0, 802, 0, 0,
	878, -2, 839, 868, 872, 0, 737, 0, 0, 0,
	0, 928, 783, 784, 788, 0, 0, 747, 0, 0,
	840, 850, 852, 693, 694, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, -2, -2, -2, 711, 712,
	713, -2, -2, -2, 0, 0, 0, 853, 0, 0,
	805, 855, 856, 861, 862, 0, 764, 765, 766, 863,
	0, 0, 0, 593, 0, 779, 342, 344, 37, 0,
	267, 0, 270, 0, 0, 0, 0, 276, 277, 0,
	0, 0, 0, 287, 294, 0, 334, 920, 0, 334,
	0, 0, 0, 0, 0, 52, 0, 0, 348, 0,
	55, 55, 337, 0, 0, 0, 0, 341, 339, 68,
	0, 0, 0, 0, 0, 389, 399, 0, 543, 538,
	628, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	382, 0, 375, 376, 421, 0, 471, 469, 505, 0,
	507, 0, 0, 0, 509, 487, 498, 0, 500, 503,
	0, 515, 489, 0, 0, 482, 0, 481, 503, 511,
	0, 0, 0, 0, -2, 0, 683, -2, -2, 801,
	832, 877, 871, 925, 447, 738, 740, 741, 790, 787,
	0, 774, 756, 757, 849, 0, 0, 0, 0, 832,
	804, 763, 0, 769, 770, 566, 422, 39, 0, 271,
	272, 940, 0, 275, 278, 0, 280, 942, 262, 0,
	291, 292, 326, 327, 330, 328, 331, 447, 289, 0,
	41, 42, 51, 59, 43, 49, 0, 0, 0, 0,
	516, 0, 0, 0, 73, 71, 0, 0, 0, 407,
	408, 0, 0, 294, 0, 284, 262, 252, 294, 0,
	0, 377, 378, 778, 780, 0, 506, 0, 525, 508,
	503, 499, 0, 515, 437, 496, 485, 0, 486, 0,
	515, 0, 0, 493, -2, -2, 684, 803, 0, 447,
	0, 776, -2, 0, 0, 0, 806, 0, 269, 273,
	0, 0, 300, 0, 288, 0, 334, 0, 0, 61,
	0, 343, 345, 0, 0, 0, 0, 75, 72, 0,
	0, 392, 536, 394, 0, 262, 294, 250, 262, 0,
	379, 380, 0, 0, 0, 0, 501, 494, 0, 483,
	479, 0, 490, 0, 512, 739, 793, 0, -2, 0,
	719, 768, 0, 279, 305, 0, 0, 0, 329, 737,
	296, 45, 0, 58, 0, 0, 447, 74, 70, 0,
	393, 0, 282, 262, 321, 0, 372, 781, 782, 524,
	488, 503, 0, 510, 0, 0, 0, 789, 720, 0,
	281, 301, 302, 0, 297, 298, 299, 941, 293, 300,
	60, 246, 248, 0, 536, 0, 283, 294, 515, 480,
	786, 791, 794, -2, 1080, 973, 0, 792, 274, 303,
	0, 304, 0, 0, 0, 305, 0, 391, 265, 262,
	495, 0, 796, 797, 798, 799, 800, 306, 0, 309,
	310, 0, 307, 290, 261, 263, 264, 322, 0, 308,
	311, 312, 795,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 319, 3, 325, 320, 3,
	330, 331, 323, 321, 334, 322, 332, 324, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 338, 333,
	313, 315, 314, 3, 335, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 328, 3, 329, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 336, 318, 337, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 317, 57656, 327, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:781
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:912
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1062
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1686
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1710
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1714
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1718
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1761
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1765
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1771
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1775
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1779
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1783
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = DropDefault
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			return unimplemented(sqllex)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2076
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2085
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2086
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return unimplemented(sqllex)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
			return unimplemented(sqllex)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return unimplemented(sqllex)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return unimplemented(sqllex)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = true
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = false
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			return unimplemented(sqllex)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2209
		{
			return unimplemented(sqllex)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = Ascending
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = Descending
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2267
		{
			return unimplemented(sqllex)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2268
		{
			return unimplemented(sqllex)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = true
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = false
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2282
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2325
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.str = ""
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.str = ""
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.str = ""
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.str = ""
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.str = ""
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.str = ""
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2448
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2524
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2547
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			return unimplemented(sqllex)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			return unimplemented(sqllex)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			return unimplemented(sqllex)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			return unimplemented(sqllex)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			return unimplemented(sqllex)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2783
		{
			return unimplemented(sqllex)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2787
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
			return unimplemented(sqllex)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2791
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2795
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = true
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = false
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = false
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = true
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2819
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2988
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &From{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3024
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3042
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3069
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3086
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = nil
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = true
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = false
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.str = astFullJoin
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.str = astLeftJoin
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.str = astRightJoin
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.str = astInnerJoin
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3271
		{
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3370
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3385
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3394
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3462
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = nil
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3607
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3639
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3679
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = year
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = month
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = day
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = hour
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = minute
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = month
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = hour
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = minute
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = minute
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = nil
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = second
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3774
		{
			return unimplemented(sqllex)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3809
		{
			return unimplemented(sqllex)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			return unimplemented(sqllex)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4043
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4216
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4269
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4270
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4293
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			return unimplemented(sqllex)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			return unimplemented(sqllex)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4314
		{
			return unimplemented(sqllex)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			return unimplemented(sqllex)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			return unimplemented(sqllex)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			return unimplemented(sqllex)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			return unimplemented(sqllex)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4363
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4407
		{
			return unimplemented(sqllex)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4408
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = Window(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.str = ""
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			return unimplemented(sqllex)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			return unimplemented(sqllex)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4507
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			return unimplemented(sqllex)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4511
		{
			return unimplemented(sqllex)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4517
		{
			return unimplemented(sqllex)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4518
		{
			return unimplemented(sqllex)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			return unimplemented(sqllex)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4520
		{
			return unimplemented(sqllex)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4521
		{
			return unimplemented(sqllex)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = Any
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = Some
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = All
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = Plus
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = Minus
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = Mult
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = Div
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = FloorDiv
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = Mod
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = Bitand
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = Bitor
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = Pow
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = Bitxor
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = LT
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = GT
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = EQ
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = LE
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = GE
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = NE
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = Like
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = NotLike
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = ILike
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = NotILike
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4886
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5048
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5084
		{
			return unimplemented(sqllex)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5093
		{
			return unimplemented(sqllex)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = DNull
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.str = ""
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
