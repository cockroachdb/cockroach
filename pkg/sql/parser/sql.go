// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOAD = 57513
const LOCAL = 57514
const LOCALTIME = 57515
const LOCALTIMESTAMP = 57516
const LOW = 57517
const LSHIFT = 57518
const MATCH = 57519
const MINUTE = 57520
const MONTH = 57521
const NAN = 57522
const NAME = 57523
const NAMES = 57524
const NATURAL = 57525
const NEXT = 57526
const NO = 57527
const NO_INDEX_JOIN = 57528
const NORMAL = 57529
const NOT = 57530
const NOTHING = 57531
const NULL = 57532
const NULLIF = 57533
const NULLS = 57534
const NUMERIC = 57535
const OF = 57536
const OFF = 57537
const OFFSET = 57538
const OID = 57539
const ON = 57540
const ONLY = 57541
const OPTIONS = 57542
const OR = 57543
const ORDER = 57544
const ORDINALITY = 57545
const OUT = 57546
const OUTER = 57547
const OVER = 57548
const OVERLAPS = 57549
const OVERLAY = 57550
const PARENT = 57551
const PARTIAL = 57552
const PARTITION = 57553
const PASSWORD = 57554
const PAUSE = 57555
const PLACING = 57556
const PLANS = 57557
const POSITION = 57558
const PRECEDING = 57559
const PRECISION = 57560
const PREPARE = 57561
const PRIMARY = 57562
const PRIORITY = 57563
const QUERIES = 57564
const QUERY = 57565
const RANGE = 57566
const READ = 57567
const REAL = 57568
const RECURSIVE = 57569
const REF = 57570
const REFERENCES = 57571
const REGCLASS = 57572
const REGPROC = 57573
const REGPROCEDURE = 57574
const REGNAMESPACE = 57575
const REGTYPE = 57576
const RENAME = 57577
const REPEATABLE = 57578
const RELEASE = 57579
const RESET = 57580
const RESTORE = 57581
const RESTRICT = 57582
const RESUME = 57583
const RETURNING = 57584
const REVOKE = 57585
const RIGHT = 57586
const ROLLBACK = 57587
const ROLLUP = 57588
const ROW = 57589
const ROWS = 57590
const RSHIFT = 57591
const SAVEPOINT = 57592
const SCATTER = 57593
const SEARCH = 57594
const SECOND = 57595
const SELECT = 57596
const SEQUENCES = 57597
const SERIAL = 57598
const SERIALIZABLE = 57599
const SESSION = 57600
const SESSIONS = 57601
const SESSION_USER = 57602
const SET = 57603
const SETTING = 57604
const SETTINGS = 57605
const SHOW = 57606
const SIMILAR = 57607
const SIMPLE = 57608
const SMALLINT = 57609
const SMALLSERIAL = 57610
const SNAPSHOT = 57611
const SOME = 57612
const SPLIT = 57613
const SQL = 57614
const START = 57615
const STATUS = 57616
const STDIN = 57617
const STRICT = 57618
const STRING = 57619
const STORING = 57620
const SUBSTRING = 57621
const SYMMETRIC = 57622
const SYSTEM = 57623
const TABLE = 57624
const TABLES = 57625
const TEMP = 57626
const TEMPLATE = 57627
const TEMPORARY = 57628
const TESTING_RANGES = 57629
const TESTING_RELOCATE = 57630
const TEXT = 57631
const THEN = 57632
const TIME = 57633
const TIMESTAMP = 57634
const TIMESTAMPTZ = 57635
const TO = 57636
const TRAILING = 57637
const TRACE = 57638
const TRANSACTION = 57639
const TREAT = 57640
const TRIM = 57641
const TRUE = 57642
const TRUNCATE = 57643
const TYPE = 57644
const UNBOUNDED = 57645
const UNCOMMITTED = 57646
const UNION = 57647
const UNIQUE = 57648
const UNKNOWN = 57649
const UPDATE = 57650
const UPSERT = 57651
const USE = 57652
const USER = 57653
const USERS = 57654
const USING = 57655
const UUID = 57656
const VALID = 57657
const VALIDATE = 57658
const VALUE = 57659
const VALUES = 57660
const VARCHAR = 57661
const VARIADIC = 57662
const VIEW = 57663
const VARYING = 57664
const WHEN = 57665
const WHERE = 57666
const WINDOW = 57667
const WITH = 57668
const WITHIN = 57669
const WITHOUT = 57670
const WRITE = 57671
const YEAR = 57672
const ZONE = 57673
const NOT_LA = 57674
const WITH_LA = 57675
const AS_LA = 57676
const POSTFIXOP = 57677
const UMINUS = 57678

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5891

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 34,
	355, 34,
	-2, 508,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	1, 480,
	198, 480,
	242, 480,
	351, 480,
	353, 480,
	355, 480,
	-2, 490,
	-1, 114,
	1, 483,
	198, 483,
	242, 483,
	351, 483,
	353, 483,
	355, 483,
	-2, 489,
	-1, 132,
	1, 34,
	355, 34,
	-2, 508,
	-1, 514,
	122, 1090,
	294, 1090,
	337, 1090,
	354, 1090,
	-2, 0,
	-1, 525,
	1, 217,
	355, 217,
	-2, 1095,
	-1, 537,
	111, 518,
	170, 518,
	196, 518,
	-2, 486,
	-1, 545,
	111, 517,
	170, 517,
	196, 517,
	-2, 484,
	-1, 698,
	352, 1021,
	-2, 1014,
	-1, 699,
	352, 1022,
	-2, 1015,
	-1, 705,
	5, 688,
	352, 688,
	-2, 1220,
	-1, 730,
	5, 647,
	-2, 1190,
	-1, 731,
	5, 682,
	352, 682,
	-2, 1192,
	-1, 732,
	5, 657,
	-2, 1193,
	-1, 733,
	5, 656,
	-2, 1194,
	-1, 734,
	5, 682,
	352, 682,
	-2, 1197,
	-1, 735,
	5, 682,
	352, 682,
	-2, 1198,
	-1, 736,
	5, 683,
	-2, 1201,
	-1, 737,
	5, 639,
	-2, 1202,
	-1, 738,
	5, 639,
	-2, 1203,
	-1, 739,
	5, 664,
	-2, 1207,
	-1, 740,
	5, 649,
	-2, 1208,
	-1, 741,
	5, 650,
	-2, 1209,
	-1, 742,
	5, 640,
	-2, 1214,
	-1, 743,
	5, 641,
	-2, 1215,
	-1, 744,
	5, 642,
	-2, 1216,
	-1, 745,
	5, 643,
	-2, 1217,
	-1, 746,
	5, 644,
	-2, 1218,
	-1, 747,
	5, 645,
	-2, 1219,
	-1, 748,
	5, 639,
	-2, 1224,
	-1, 749,
	5, 648,
	-2, 1229,
	-1, 750,
	5, 646,
	-2, 1232,
	-1, 751,
	5, 680,
	352, 680,
	-2, 1234,
	-1, 752,
	5, 684,
	-2, 1237,
	-1, 753,
	5, 686,
	-2, 1238,
	-1, 754,
	5, 679,
	352, 679,
	-2, 1243,
	-1, 798,
	212, 506,
	-2, 380,
	-1, 803,
	111, 517,
	170, 517,
	196, 517,
	-2, 487,
	-1, 906,
	102, 490,
	111, 490,
	151, 490,
	170, 490,
	196, 490,
	202, 490,
	305, 490,
	-2, 574,
	-1, 983,
	102, 490,
	111, 490,
	151, 490,
	170, 490,
	196, 490,
	202, 490,
	305, 490,
	-2, 807,
	-1, 992,
	352, 998,
	-2, 986,
	-1, 1237,
	1, 575,
	70, 575,
	102, 575,
	111, 575,
	123, 575,
	127, 575,
	129, 575,
	142, 575,
	151, 575,
	158, 575,
	167, 575,
	170, 575,
	183, 575,
	196, 575,
	198, 575,
	202, 575,
	242, 575,
	244, 575,
	305, 575,
	313, 575,
	324, 575,
	325, 575,
	334, 575,
	351, 575,
	353, 575,
	355, 575,
	356, 575,
	-2, 574,
	-1, 1286,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 723,
	-1, 1287,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 724,
	-1, 1288,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 725,
	-1, 1292,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 729,
	-1, 1293,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 730,
	-1, 1294,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 731,
	-1, 1297,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 736,
	-1, 1303,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 738,
	-1, 1305,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 742,
	-1, 1306,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 743,
	-1, 1307,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 744,
	-1, 1308,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 745,
	-1, 1334,
	207, 880,
	-2, 883,
	-1, 1371,
	122, 920,
	352, 1021,
	-2, 1014,
	-1, 1372,
	122, 921,
	-2, 1186,
	-1, 1373,
	122, 922,
	-2, 1094,
	-1, 1374,
	122, 923,
	-2, 1057,
	-1, 1375,
	122, 924,
	-2, 1074,
	-1, 1376,
	122, 925,
	-2, 1093,
	-1, 1377,
	122, 926,
	-2, 1145,
	-1, 1573,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 737,
	-1, 1574,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 739,
	-1, 1579,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 740,
	-1, 1597,
	207, 879,
	-2, 882,
	-1, 1797,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 741,
	-1, 1802,
	154, 0,
	-2, 757,
	-1, 1812,
	207, 881,
	-2, 884,
	-1, 1854,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 784,
	-1, 1855,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 785,
	-1, 1856,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 786,
	-1, 1860,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 790,
	-1, 1861,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 791,
	-1, 1862,
	13, 0,
	14, 0,
	15, 0,
	335, 0,
	336, 0,
	337, 0,
	-2, 792,
	-1, 1966,
	154, 0,
	-2, 758,
	-1, 1969,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 761,
	-1, 1970,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 763,
	-1, 2076,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 762,
	-1, 2077,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 764,
	-1, 2084,
	154, 0,
	-2, 793,
	-1, 2150,
	154, 0,
	-2, 794,
	-1, 2222,
	36, 0,
	136, 0,
	169, 0,
	265, 0,
	332, 0,
	338, 0,
	-2, 1189,
}

const sqlPrivate = 57344

const sqlLast = 32031

var sqlAct = [...]int{

	699, 1888, 2221, 2229, 2198, 2230, 2266, 2231, 1120, 2106,
	2220, 1245, 1253, 1831, 2033, 2091, 2138, 1911, 2019, 1718,
	1033, 1232, 1895, 546, 1477, 1383, 67, 2004, 1400, 1127,
	675, 642, 1894, 1720, 620, 904, 1436, 1458, 2058, 141,
	1440, 1435, 141, 1541, 1663, 395, 1555, 1083, 1491, 141,
	1522, 1942, 689, 379, 25, 900, 1662, 141, 1448, 697,
	397, 561, 1123, 141, 141, 1265, 1439, 141, 696, 887,
	141, 1521, 880, 1608, 1254, 1691, 1233, 141, 988, 371,
	1528, 1185, 1187, 1473, 1158, 1332, 553, 112, 1761, 1239,
	1109, 1084, 1357, 777, 1482, 1342, 669, 1320, 918, 1397,
	1317, 881, 1443, 812, 564, 810, 776, 1351, 369, 1368,
	624, 979, 1247, 1023, 668, 565, 656, 805, 570, 1019,
	1207, 891, 612, 1220, 522, 502, 141, 141, 114, 819,
	818, 1107, 141, 133, 820, 556, 141, 141, 115, 691,
	922, 520, 2020, 551, 112, 864, 524, 650, 387, 137,
	627, 610, 863, 506, 824, 1775, 518, 1596, 1776, 1246,
	1117, 124, 1117, 2252, 2243, 550, 913, 1261, 1117, 550,
	901, 2242, 124, 634, 1261, 2240, 1354, 1730, 2018, 1261,
	1250, 2238, 622, 1567, 913, 1209, 25, 1633, 1634, 545,
	2192, 1566, 2183, 1415, 1240, 505, 2166, 499, 2155, 2018,
	2152, 2154, 2145, 1415, 1422, 913, 2121, 111, 554, 2018,
	2118, 2117, 2116, 913, 2018, 913, 1764, 1764, 111, 112,
	1115, 1633, 1634, 1355, 1651, 1652, 1653, 2104, 2078, 2066,
	2018, 1415, 913, 1633, 1634, 113, 1141, 1965, 1208, 127,
	2063, 538, 56, 913, 57, 2055, 113, 2054, 1261, 2017,
	1261, 537, 2018, 56, 1240, 57, 1993, 934, 935, 1261,
	954, 955, 956, 964, 965, 966, 1600, 131, 59, 1356,
	1353, 1601, 573, 957, 1648, 1489, 1422, 1731, 614, 59,
	937, 1971, 1968, 968, 1261, 1415, 1648, 1955, 1633, 1634,
	913, 1651, 1652, 1653, 1639, 1806, 1795, 1790, 1261, 1244,
	1244, 1867, 1771, 130, 936, 1772, 1701, 1809, 913, 913,
	951, 125, 1680, 1678, 1677, 1681, 1261, 1261, 126, 1261,
	1599, 1676, 1034, 1607, 1261, 1261, 1597, 1544, 1639, 1261,
	1261, 1518, 1424, 1414, 913, 1261, 1415, 116, 1702, 1260,
	1639, 1648, 1261, 1476, 1358, 1243, 127, 1214, 1244, 1432,
	1213, 1091, 1118, 1649, 1118, 1336, 930, 876, 141, 931,
	1118, 632, 660, 141, 942, 1654, 619, 132, 638, 2021,
	905, 570, 1113, 791, 131, 142, 2244, 2236, 1536, 2219,
	2205, 2147, 567, 961, 969, 2119, 1998, 1649, 898, 1994,
	831, 1986, 127, 1985, 127, 1639, 1484, 551, 1984, 1649,
	1980, 967, 118, 127, 124, 1979, 1978, 1174, 1977, 1941,
	130, 1886, 1882, 118, 1705, 1655, 959, 1566, 125, 1208,
	131, 1352, 131, 952, 1960, 126, 1650, 1877, 1876, 1875,
	1817, 131, 1654, 1700, 1685, 398, 1682, 1670, 1661, 1632,
	1629, 1628, 1626, 1420, 1249, 1328, 1613, 1612, 958, 1548,
	111, 1365, 1364, 1363, 1649, 831, 130, 1237, 130, 996,
	1650, 989, 903, 116, 125, 639, 830, 130, 1139, 902,
	1134, 126, 1650, 651, 1126, 125, 1116, 1833, 113, 1633,
	1634, 2195, 126, 2182, 2181, 56, 657, 57, 2174, 2168,
	116, 2164, 116, 571, 2142, 2101, 953, 641, 1633, 1634,
	2086, 116, 2075, 2024, 141, 2016, 2000, 1991, 1909, 1907,
	1906, 59, 962, 1905, 1902, 1892, 1801, 1779, 141, 1643,
	1635, 1636, 1637, 1638, 1640, 1641, 570, 1650, 141, 903,
	1767, 1754, 141, 141, 141, 1752, 141, 1633, 1634, 1706,
	1709, 141, 141, 141, 141, 141, 1645, 1646, 1647, 1660,
	1329, 1644, 1642, 1643, 1635, 1636, 1637, 1638, 1640, 1641,
	1622, 804, 1689, 1644, 1642, 1643, 1635, 1636, 1637, 1638,
	1640, 1641, 1621, 1618, 1593, 2141, 570, 1588, 1959, 960,
	1322, 816, 948, 949, 950, 963, 1639, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 1546, 1517, 755, 2157,
	1024, 1027, 1407, 1995, 1362, 1639, 141, 141, 141, 141,
	141, 803, 141, 1645, 1646, 1647, 787, 1225, 1644, 1642,
	1643, 1635, 1636, 1637, 1638, 1640, 1641, 1706, 1119, 141,
	141, 1031, 570, 141, 1017, 127, 1016, 837, 793, 397,
	1015, 141, 1014, 1013, 1639, 118, 1012, 1011, 141, 141,
	141, 1010, 141, 1009, 885, 551, 1008, 1007, 399, 808,
	141, 767, 1006, 131, 1649, 775, 638, 836, 934, 935,
	1005, 1004, 1003, 920, 772, 1002, 1001, 1000, 796, 908,
	799, 993, 538, 928, 914, 982, 116, 807, 807, 884,
	621, 937, 537, 837, 879, 640, 771, 762, 654, 130,
	551, 1999, 985, 827, 828, 1973, 1885, 125, 1774, 1770,
	112, 871, 1417, 1226, 126, 936, 572, 868, 568, 1472,
	874, 934, 935, 911, 1534, 1633, 1634, 1471, 835, 989,
	1687, 867, 899, 116, 980, 784, 1721, 1650, 1633, 1634,
	1963, 1777, 1568, 786, 937, 1240, 571, 1195, 905, 1029,
	1684, 1683, 1097, 865, 1030, 1572, 783, 768, 651, 998,
	1124, 1692, 2059, 877, 570, 1604, 141, 1193, 936, 1246,
	1834, 141, 1343, 1020, 951, 1562, 1354, 1925, 785, 907,
	2211, 859, 912, 2259, 1194, 570, 570, 1188, 2144, 1189,
	924, 2258, 397, 932, 2048, 921, 934, 935, 1697, 1425,
	1088, 141, 608, 535, 599, 1188, 995, 1189, 1125, 933,
	692, 600, 1635, 1636, 1637, 1638, 1640, 1641, 605, 937,
	860, 604, 854, 1355, 2136, 837, 2135, 992, 942, 1642,
	1643, 1635, 1636, 1637, 1638, 1640, 1641, 1114, 2134, 2133,
	141, 903, 1940, 936, 141, 1639, 141, 141, 141, 141,
	141, 141, 1025, 1939, 1021, 1022, 141, 757, 1922, 607,
	141, 141, 1028, 1190, 1130, 1921, 1617, 141, 1616, 1356,
	1353, 1615, 1637, 1638, 1640, 1641, 1614, 141, 359, 1575,
	141, 1190, 1098, 1188, 543, 1189, 1515, 952, 1514, 1512,
	1304, 1493, 756, 141, 1449, 1087, 549, 1936, 1264, 1085,
	866, 571, 397, 942, 1649, 141, 1688, 2143, 631, 508,
	1957, 141, 1086, 1411, 141, 784, 1206, 1110, 1410, 1103,
	1090, 1275, 704, 1102, 1459, 1183, 141, 509, 141, 528,
	360, 1231, 570, 1784, 1182, 1132, 1227, 397, 1319, 2108,
	112, 542, 1493, 1217, 1358, 548, 1319, 1228, 1492, 1785,
	1145, 571, 1552, 538, 1144, 2012, 538, 538, 785, 1190,
	953, 1451, 1175, 1154, 856, 916, 1155, 1156, 1165, 572,
	1164, 1169, 1170, 1171, 1172, 1173, 1248, 1650, 1248, 1168,
	770, 1927, 1274, 1326, 1179, 1180, 1162, 510, 1324, 2013,
	1343, 2186, 1184, 925, 1358, 1827, 550, 890, 2249, 1204,
	2258, 1750, 606, 531, 1301, 1212, 944, 571, 1474, 1475,
	2269, 1333, 851, 1556, 398, 1218, 1759, 112, 1337, 1222,
	1223, 1352, 1345, 2264, 920, 2171, 1133, 536, 662, 1136,
	857, 1138, 532, 1418, 1370, 1370, 1381, 1252, 1392, 1262,
	1696, 609, 533, 1756, 1404, 1405, 1406, 657, 1263, 852,
	894, 947, 945, 946, 938, 939, 940, 941, 943, 944,
	1450, 1202, 1199, 1641, 1560, 1201, 1698, 363, 1340, 897,
	1358, 1635, 1636, 1637, 1638, 1640, 1641, 1181, 1198, 2233,
	1454, 1018, 1191, 858, 541, 892, 1117, 511, 2082, 2008,
	1330, 2009, 1327, 977, 895, 362, 361, 1186, 1196, 547,
	1191, 2093, 529, 1620, 1299, 1302, 934, 935, 1556, 550,
	893, 1824, 1413, 544, 397, 1197, 1378, 141, 840, 112,
	141, 2011, 780, 540, 572, 1530, 1934, 141, 2189, 937,
	2014, 940, 941, 943, 944, 141, 141, 1298, 141, 571,
	141, 141, 397, 141, 141, 1928, 1499, 2267, 1419, 2109,
	1221, 1236, 2190, 936, 1887, 841, 1916, 1825, 839, 1433,
	571, 571, 141, 507, 2232, 512, 2234, 398, 141, 530,
	2257, 896, 2255, 1421, 572, 1585, 2032, 1490, 1191, 1025,
	1468, 1028, 141, 141, 141, 1456, 1577, 1466, 781, 141,
	1583, 845, 782, 141, 1318, 765, 513, 659, 1426, 1022,
	1021, 141, 2268, 2248, 141, 1101, 1100, 2010, 567, 562,
	141, 397, 823, 942, 1551, 2265, 141, 141, 2277, 1519,
	141, 385, 2235, 2270, 1524, 141, 2128, 1434, 141, 1494,
	572, 1325, 1358, 1300, 1989, 141, 822, 399, 1500, 1502,
	1529, 2127, 2099, 1464, 2161, 141, 1465, 1924, 1507, 1538,
	141, 1510, 141, 1462, 1470, 1463, 1523, 1266, 1273, 141,
	364, 1580, 1537, 112, 2044, 141, 1526, 1527, 388, 684,
	1532, 1581, 952, 1547, 1741, 1586, 551, 398, 1118, 1737,
	1863, 1461, 807, 1525, 807, 1485, 1487, 508, 1457, 1104,
	393, 1497, 1131, 1121, 1558, 821, 389, 388, 1823, 1564,
	365, 1533, 2247, 1505, 1513, 509, 2199, 571, 138, 1542,
	1520, 354, 398, 1178, 1516, 2047, 1150, 1092, 356, 393,
	2276, 823, 2046, 390, 1428, 389, 368, 822, 894, 366,
	1912, 367, 498, 138, 1990, 1430, 504, 2034, 890, 504,
	2100, 1096, 392, 1589, 1590, 953, 526, 897, 1561, 551,
	1711, 1591, 390, 1077, 1710, 1480, 1431, 1569, 1594, 1571,
	1531, 780, 572, 1219, 2043, 510, 1216, 1215, 1429, 1606,
	500, 392, 895, 1105, 1864, 1543, 1610, 1611, 497, 649,
	1865, 1582, 648, 572, 572, 1094, 821, 1151, 1584, 548,
	399, 894, 800, 1889, 644, 613, 613, 1095, 2001, 1550,
	1578, 354, 1576, 643, 134, 138, 635, 2097, 383, 33,
	897, 1656, 1657, 1658, 1943, 551, 3, 1659, 382, 32,
	1592, 1762, 2045, 570, 141, 1361, 892, 2085, 1672, 759,
	1988, 2098, 598, 570, 1664, 895, 1800, 1603, 946, 938,
	939, 940, 941, 943, 944, 141, 1783, 141, 141, 896,
	1627, 893, 1587, 391, 141, 378, 29, 141, 381, 17,
	1553, 141, 375, 13, 1511, 511, 377, 16, 376, 14,
	1508, 1423, 374, 12, 1704, 1242, 1707, 380, 10, 373,
	8, 141, 391, 862, 837, 372, 4, 861, 855, 398,
	850, 141, 141, 141, 1667, 1668, 1669, 141, 849, 848,
	399, 141, 141, 141, 141, 141, 1712, 394, 847, 1715,
	846, 843, 896, 141, 1693, 141, 141, 398, 1694, 1695,
	758, 763, 647, 1699, 1665, 1176, 1167, 999, 853, 1360,
	572, 2228, 141, 636, 2196, 399, 394, 1738, 141, 2042,
	633, 33, 637, 512, 568, 563, 1932, 141, 141, 630,
	1930, 32, 1923, 1726, 601, 602, 1717, 1460, 1453, 1773,
	1751, 1728, 1203, 1753, 1200, 1192, 1143, 141, 141, 1142,
	1140, 1137, 1733, 1040, 513, 1135, 1814, 1791, 1732, 1719,
	1778, 2012, 1769, 1780, 2005, 2070, 398, 1749, 29, 1478,
	2259, 17, 2003, 1112, 1106, 13, 2007, 1760, 2072, 16,
	1713, 14, 1798, 1799, 112, 12, 1788, 701, 1766, 1803,
	10, 1763, 8, 1765, 1504, 2013, 825, 1789, 4, 617,
	1071, 141, 1807, 2178, 1781, 1782, 2021, 645, 384, 1786,
	1315, 842, 354, 1819, 1820, 1821, 1493, 2006, 1794, 1793,
	1493, 1792, 1503, 2149, 1944, 1313, 1501, 829, 934, 935,
	1479, 1509, 1506, 2184, 2030, 1070, 1455, 1452, 1251, 1205,
	1089, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1813, 1866, 1810, 1723, 1724, 1039, 1725, 1840, 826, 1868,
	1837, 618, 674, 1032, 501, 936, 1835, 2262, 2275, 1842,
	1878, 1633, 1634, 141, 934, 935, 141, 1870, 1826, 1828,
	1829, 2065, 399, 934, 935, 2008, 1309, 2009, 141, 1949,
	1871, 570, 1908, 1884, 1310, 1883, 1311, 937, 833, 832,
	1316, 397, 141, 1830, 353, 1893, 833, 1690, 1686, 1679,
	399, 1539, 1412, 1409, 1408, 1040, 1040, 2011, 1350, 986,
	834, 936, 1975, 1913, 1918, 2194, 2014, 2092, 1822, 1901,
	1714, 1703, 996, 994, 769, 141, 1900, 1903, 141, 1890,
	527, 2107, 386, 766, 1166, 1899, 1919, 844, 397, 141,
	141, 1937, 1914, 1938, 570, 1915, 1535, 526, 1224, 2188,
	1981, 1619, 1071, 1071, 2137, 2081, 1359, 354, 571, 1935,
	1953, 526, 798, 526, 1947, 801, 997, 49, 571, 399,
	526, 526, 354, 814, 635, 1945, 1954, 1946, 1897, 1950,
	678, 1703, 1967, 1951, 625, 2002, 1948, 1070, 1070, 1891,
	1442, 1956, 1441, 2010, 141, 400, 1312, 1099, 1962, 700,
	555, 1369, 1267, 1314, 1961, 837, 760, 702, 1037, 703,
	1038, 1026, 1153, 690, 1035, 655, 1255, 1039, 1039, 1323,
	1341, 1602, 990, 670, 682, 681, 1338, 761, 1540, 1559,
	1958, 1149, 1469, 1146, 1929, 504, 354, 354, 873, 354,
	534, 613, 1630, 653, 1390, 1987, 1382, 1379, 792, 886,
	978, 1256, 790, 1565, 1416, 878, 1157, 616, 354, 354,
	615, 1437, 138, 141, 788, 1093, 1427, 141, 141, 971,
	354, 970, 603, 2163, 570, 779, 2022, 354, 354, 354,
	778, 926, 141, 141, 141, 2015, 1122, 1740, 2263, 138,
	2177, 141, 1926, 141, 2210, 141, 141, 141, 2027, 2025,
	141, 141, 2031, 2028, 2038, 1901, 2035, 1266, 1838, 2029,
	129, 128, 1900, 2037, 2156, 2090, 1266, 1843, 1901, 1549,
	141, 1899, 1901, 75, 2041, 1900, 1931, 31, 1933, 1900,
	30, 94, 93, 2061, 1899, 2036, 92, 91, 1899, 90,
	89, 88, 87, 86, 2064, 2062, 85, 84, 2067, 1874,
	83, 82, 81, 80, 79, 78, 2071, 77, 2073, 523,
	2080, 74, 73, 72, 141, 71, 397, 141, 28, 24,
	2068, 97, 2087, 23, 2084, 141, 21, 22, 27, 26,
	19, 572, 397, 18, 15, 9, 20, 54, 55, 53,
	52, 572, 51, 141, 11, 138, 570, 1384, 47, 2102,
	526, 2110, 46, 141, 2111, 45, 44, 2113, 43, 2105,
	42, 2095, 920, 2115, 7, 652, 96, 2125, 40, 39,
	141, 6, 95, 5, 108, 141, 105, 2112, 2123, 1901,
	1129, 1901, 107, 141, 104, 106, 1900, 109, 1900, 101,
	102, 103, 100, 2126, 2120, 1899, 2140, 1899, 99, 37,
	36, 35, 34, 2, 141, 1, 571, 2124, 141, 0,
	0, 0, 551, 0, 0, 2148, 398, 2151, 2167, 526,
	0, 2150, 0, 526, 2165, 138, 526, 526, 526, 526,
	526, 2172, 2159, 0, 570, 1177, 929, 2160, 0, 526,
	526, 2173, 0, 2169, 141, 141, 504, 0, 0, 2170,
	0, 0, 0, 2176, 0, 0, 613, 0, 0, 635,
	0, 0, 0, 398, 0, 0, 0, 2187, 0, 571,
	0, 0, 354, 0, 0, 141, 0, 2201, 0, 141,
	2193, 2185, 141, 0, 1235, 2207, 2202, 0, 2191, 397,
	354, 0, 0, 1241, 141, 2175, 0, 141, 0, 0,
	0, 2209, 1073, 0, 2204, 354, 141, 1259, 2216, 2218,
	2215, 2226, 0, 0, 2237, 2203, 0, 2208, 0, 2217,
	2213, 2214, 0, 0, 0, 2239, 0, 0, 0, 0,
	652, 0, 0, 0, 2212, 2246, 1040, 1901, 0, 141,
	2245, 0, 2227, 0, 1900, 813, 0, 2256, 2254, 0,
	0, 0, 0, 1899, 2260, 0, 0, 0, 0, 1040,
	2261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2273, 2272, 2274, 2271, 0, 0, 0,
	2131, 2132, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 0, 0, 0, 1071, 0, 0, 870,
	813, 0, 652, 0, 0, 0, 0, 0, 1070, 1040,
	1633, 1634, 0, 1651, 1652, 1653, 0, 0, 0, 572,
	124, 625, 909, 0, 0, 0, 1964, 0, 0, 399,
	0, 1070, 0, 919, 0, 0, 0, 0, 1039, 0,
	652, 923, 923, 0, 0, 0, 1384, 1384, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 1039, 0, 1648, 1073, 1073, 111, 0, 0, 0,
	1036, 2130, 0, 0, 0, 0, 399, 0, 0, 0,
	0, 398, 572, 0, 0, 0, 354, 0, 0, 1438,
	0, 1070, 0, 0, 113, 0, 635, 398, 0, 1040,
	0, 56, 0, 57, 526, 526, 0, 526, 0, 354,
	354, 571, 1467, 635, 1384, 1384, 1384, 1639, 0, 0,
	0, 1039, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 354, 0, 0, 0, 1040, 1040, 1483, 0, 0,
	0, 0, 0, 0, 1040, 1040, 1071, 0, 0, 0,
	0, 354, 354, 354, 1654, 1072, 1072, 0, 1498, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	354, 0, 0, 354, 0, 0, 1649, 1040, 0, 354,
	0, 1070, 1071, 1071, 0, 354, 354, 0, 0, 354,
	0, 1071, 1071, 0, 1235, 0, 0, 1235, 0, 571,
	0, 0, 0, 0, 1545, 0, 934, 935, 0, 0,
	0, 1039, 572, 0, 354, 0, 0, 1070, 1070, 354,
	0, 1563, 0, 0, 1071, 0, 1070, 1070, 354, 937,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 1036, 1036, 0, 0, 0, 1039, 1039, 1650,
	0, 127, 0, 936, 398, 0, 1039, 1039, 0, 1070,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 399, 1384, 1384, 0, 0, 0,
	0, 0, 1040, 942, 0, 130, 0, 0, 1257, 0,
	399, 0, 0, 125, 661, 0, 0, 764, 0, 0,
	126, 0, 1633, 1634, 572, 1645, 1646, 1647, 0, 0,
	1644, 1642, 1643, 1635, 1636, 1637, 1638, 1640, 1641, 116,
	0, 124, 0, 0, 0, 0, 794, 795, 0, 1071,
	934, 935, 0, 0, 1384, 1384, 1384, 1384, 1384, 1384,
	1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
	1384, 1384, 1384, 937, 1384, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 1070, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	0, 0, 0, 0, 1129, 0, 1129, 1708, 0, 0,
	0, 0, 572, 526, 1039, 113, 354, 0, 0, 0,
	1722, 0, 56, 0, 57, 0, 0, 0, 0, 1639,
	0, 0, 882, 882, 0, 0, 0, 0, 888, 0,
	354, 0, 0, 0, 0, 0, 679, 68, 59, 0,
	354, 1735, 1736, 0, 0, 0, 1498, 942, 0, 0,
	1742, 1743, 1745, 1747, 1748, 0, 0, 399, 0, 0,
	0, 0, 1755, 0, 1757, 354, 0, 0, 0, 0,
	972, 973, 974, 975, 976, 0, 0, 0, 1649, 0,
	984, 354, 1040, 0, 0, 0, 0, 1235, 0, 652,
	991, 0, 0, 0, 68, 0, 635, 1235, 0, 0,
	0, 0, 0, 934, 935, 0, 952, 0, 0, 0,
	0, 0, 813, 813, 0, 0, 354, 354, 0, 938,
	939, 940, 941, 943, 944, 1073, 937, 0, 0, 1071,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 1040,
	0, 0, 0, 0, 0, 0, 0, 0, 1073, 539,
	936, 1650, 0, 552, 1486, 813, 1488, 0, 0, 0,
	0, 0, 127, 0, 1070, 652, 0, 0, 626, 68,
	1832, 0, 118, 813, 0, 0, 652, 1040, 0, 953,
	0, 0, 625, 0, 0, 0, 1071, 0, 625, 625,
	131, 0, 625, 0, 1039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1073, 0,
	942, 0, 0, 0, 0, 0, 1072, 1554, 0, 0,
	0, 1070, 919, 0, 1071, 0, 130, 0, 1147, 0,
	1152, 919, 0, 0, 125, 0, 1159, 0, 0, 1072,
	0, 126, 1644, 1642, 1643, 1635, 1636, 1637, 1638, 1640,
	1641, 1039, 1498, 0, 0, 1129, 1896, 0, 0, 1070,
	370, 0, 934, 935, 0, 0, 0, 1910, 0, 952,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 0,
	0, 1920, 0, 0, 0, 937, 0, 0, 0, 1039,
	0, 0, 0, 0, 0, 0, 0, 1384, 1073, 1072,
	0, 0, 0, 1036, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 354, 0, 0, 635, 0, 0,
	0, 0, 1384, 0, 0, 0, 1036, 0, 1235, 635,
	0, 0, 0, 0, 1073, 1073, 0, 0, 0, 0,
	0, 0, 953, 1073, 1073, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
	1291, 1292, 1293, 1294, 1295, 1296, 1297, 0, 1303, 942,
	1305, 1306, 1307, 1308, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 1982, 0, 0, 1036, 1331, 0, 1072,
	0, 0, 0, 0, 1384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 0, 0,
	1366, 1367, 0, 0, 1380, 0, 1391, 1393, 1398, 1401,
	1402, 1403, 0, 0, 0, 1072, 1072, 0, 952, 1716,
	0, 0, 0, 0, 1072, 1072, 938, 939, 940, 941,
	943, 944, 1896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 1729, 0, 1896, 635, 1438, 0, 1896,
	0, 0, 0, 1734, 0, 0, 0, 1072, 0, 0,
	0, 2039, 2040, 1498, 0, 0, 1036, 0, 0, 0,
	2049, 0, 2050, 0, 354, 2052, 2053, 0, 1758, 2056,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 625, 0, 0, 2069, 0, 635,
	0, 1073, 1036, 1036, 0, 0, 0, 0, 0, 0,
	0, 1036, 1036, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1257,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2094, 1036, 0, 2096, 0, 0, 0,
	0, 0, 0, 0, 354, 0, 1896, 0, 1896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	539, 0, 1498, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 1072, 0, 0, 0, 0, 0, 0, 2139,
	0, 0, 0, 0, 1235, 882, 0, 0, 0, 0,
	888, 0, 2146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 0, 0, 1129, 0, 0,
	0, 0, 0, 1557, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 906, 0, 0, 1570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2179, 2180, 0, 0, 0, 0, 1036,
	0, 1633, 1634, 0, 1651, 1652, 1653, 0, 0, 0,
	0, 1073, 0, 0, 0, 1573, 1574, 1805, 981, 0,
	983, 1579, 0, 0, 2200, 0, 0, 987, 635, 0,
	0, 354, 0, 0, 1896, 0, 0, 0, 0, 0,
	0, 0, 0, 2139, 0, 0, 354, 625, 0, 0,
	0, 0, 0, 1598, 1648, 635, 0, 0, 0, 0,
	1605, 0, 0, 1609, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1623,
	0, 0, 0, 0, 0, 0, 0, 0, 2253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 984, 1073, 0, 1639, 0,
	0, 1398, 1398, 1398, 0, 934, 935, 0, 954, 955,
	956, 964, 965, 966, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 968, 0, 0, 0, 1654, 1633, 1634, 0, 1651,
	1652, 1653, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 936, 0, 0, 0, 0, 1649, 951, 0,
	0, 539, 0, 0, 539, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1727, 1036,
	0, 0, 0, 1159, 0, 0, 0, 1072, 0, 1648,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2051, 0, 0,
	0, 0, 942, 2057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	1650, 961, 969, 0, 0, 0, 1036, 1768, 0, 0,
	0, 0, 0, 1639, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 68, 0, 882, 959, 0, 0, 68, 0, 0,
	0, 952, 0, 0, 1036, 888, 0, 0, 0, 1796,
	1654, 0, 1797, 0, 0, 0, 0, 2103, 0, 0,
	0, 0, 0, 0, 1802, 0, 958, 0, 0, 0,
	0, 0, 1649, 1811, 0, 2122, 1321, 0, 0, 0,
	0, 1815, 0, 0, 1570, 0, 1645, 1646, 1647, 0,
	0, 1644, 1642, 1643, 1635, 1636, 1637, 1638, 1640, 1641,
	0, 0, 0, 0, 1839, 0, 0, 0, 1841, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	962, 0, 0, 0, 0, 0, 2158, 957, 0, 68,
	0, 1872, 1873, 0, 937, 1650, 0, 968, 0, 0,
	1879, 1880, 1881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	948, 949, 950, 963, 0, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 2206, 0, 0, 0, 0, 0,
	0, 1675, 0, 0, 0, 0, 0, 0, 942, 1257,
	0, 1645, 1646, 1647, 0, 0, 1644, 1642, 1643, 1635,
	1636, 1637, 1638, 1640, 1641, 0, 0, 961, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 934, 935, 0, 967, 0, 0, 964, 965,
	966, 0, 0, 0, 0, 0, 0, 1966, 0, 0,
	959, 1969, 1970, 68, 0, 937, 1972, 952, 968, 0,
	0, 0, 0, 1974, 0, 1976, 0, 0, 0, 0,
	0, 68, 0, 0, 68, 0, 0, 0, 0, 936,
	0, 1983, 958, 0, 0, 951, 626, 0, 0, 0,
	0, 0, 626, 626, 0, 0, 626, 1633, 1634, 0,
	1651, 1652, 1653, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1804, 1992, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 2023, 962, 0, 934, 935,
	1648, 954, 955, 956, 964, 965, 966, 0, 961, 969,
	0, 0, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 968, 0, 0, 0, 0, 1321,
	0, 1633, 1634, 0, 1651, 1652, 1653, 0, 0, 0,
	2060, 959, 0, 0, 0, 936, 0, 0, 952, 983,
	0, 951, 0, 0, 1639, 0, 0, 0, 0, 0,
	0, 2076, 2077, 960, 0, 0, 948, 949, 950, 963,
	0, 947, 945, 946, 938, 939, 940, 941, 943, 944,
	0, 0, 0, 0, 1648, 0, 0, 1674, 0, 0,
	0, 1654, 2089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 1649, 0, 983, 0, 0, 0, 0,
	0, 953, 0, 0, 961, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 1639, 0,
	0, 0, 967, 2129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 68, 0, 0, 0, 1650, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 1649, 2162, 0,
	0, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 68, 953, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1650, 0, 1645, 1646, 1647, 0, 0, 1644, 1642, 1643,
	1635, 1636, 1637, 1638, 1640, 1641, 2225, 2225, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2225,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 0, 0, 0, 1673, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1645, 1646, 1647, 2225,
	0, 1644, 1642, 1643, 1635, 1636, 1637, 1638, 1640, 1641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 687, 688, 685, 686, 677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 715, 680, 0, 0, 0, 146,
	147, 148, 298, 730, 300, 731, 149, 732, 733, 0,
	150, 304, 305, 151, 152, 683, 714, 734, 735, 308,
	0, 153, 726, 0, 706, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 402, 161, 162, 0,
	707, 708, 710, 0, 709, 711, 163, 164, 355, 165,
	736, 166, 737, 738, 889, 167, 0, 168, 0, 169,
	0, 626, 729, 171, 0, 172, 0, 0, 0, 671,
	173, 174, 175, 716, 717, 694, 0, 0, 176, 177,
	739, 740, 741, 0, 178, 0, 179, 68, 0, 403,
	0, 180, 727, 0, 320, 0, 181, 182, 183, 184,
	723, 725, 405, 0, 188, 0, 185, 0, 404, 186,
	742, 187, 743, 744, 745, 746, 747, 0, 705, 0,
	406, 189, 190, 191, 407, 192, 193, 194, 0, 196,
	195, 0, 728, 408, 197, 409, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 410,
	206, 207, 209, 208, 666, 0, 695, 724, 210, 748,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 411, 216, 412, 718, 217, 218, 219, 220, 221,
	0, 222, 719, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 749, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	413, 245, 246, 672, 247, 0, 251, 252, 253, 254,
	127, 256, 340, 255, 257, 258, 712, 259, 248, 249,
	260, 414, 261, 750, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 751, 266, 720, 0, 269, 131, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 752, 753,
	2074, 0, 277, 278, 721, 722, 693, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 713, 287, 0,
	350, 288, 289, 290, 658, 754, 0, 0, 291, 0,
	0, 0, 125, 292, 293, 294, 295, 296, 667, 126,
	0, 0, 0, 0, 665, 0, 0, 0, 0, 663,
	664, 0, 0, 396, 0, 0, 0, 0, 673, 0,
	0, 0, 0, 676, 0, 0, 0, 68, 0, 143,
	144, 415, 145, 416, 417, 418, 419, 297, 420, 421,
	422, 423, 146, 147, 148, 298, 299, 300, 301, 149,
	302, 303, 424, 150, 304, 305, 151, 152, 425, 426,
	306, 307, 308, 427, 153, 309, 428, 401, 429, 154,
	155, 156, 983, 157, 430, 158, 159, 160, 431, 402,
	161, 162, 432, 433, 435, 434, 436, 437, 438, 163,
	164, 355, 165, 310, 166, 311, 312, 439, 167, 440,
	168, 441, 169, 442, 443, 170, 171, 444, 172, 445,
	0, 446, 313, 173, 174, 175, 314, 315, 447, 448,
	449, 176, 177, 316, 317, 318, 0, 178, 450, 179,
	451, 452, 403, 453, 180, 319, 454, 320, 455, 181,
	182, 183, 184, 321, 322, 405, 456, 188, 457, 185,
	458, 404, 186, 323, 187, 324, 325, 326, 327, 328,
	459, 329, 460, 406, 189, 190, 191, 407, 192, 193,
	194, 461, 196, 195, 462, 330, 408, 197, 409, 463,
	198, 199, 464, 465, 200, 0, 201, 202, 203, 205,
	331, 204, 410, 206, 207, 209, 208, 466, 467, 468,
	332, 210, 333, 211, 212, 469, 213, 470, 471, 214,
	472, 473, 215, 334, 411, 216, 412, 335, 217, 218,
	219, 220, 221, 474, 222, 336, 223, 337, 224, 475,
	225, 226, 227, 228, 229, 338, 230, 231, 476, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 477, 244, 413, 245, 246, 339, 247, 0, 251,
	252, 253, 254, 478, 256, 340, 255, 257, 258, 479,
	259, 248, 249, 260, 414, 261, 341, 342, 262, 480,
	268, 263, 264, 250, 265, 267, 343, 266, 344, 481,
	269, 482, 270, 271, 272, 273, 274, 275, 276, 483,
	345, 346, 347, 484, 485, 277, 278, 348, 349, 486,
	279, 280, 281, 282, 487, 488, 283, 284, 285, 286,
	489, 287, 490, 350, 288, 289, 290, 351, 352, 491,
	492, 291, 493, 494, 495, 496, 292, 293, 294, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 0, 0, 0, 0, 1229,
	0, 0, 0, 0, 0, 0, 0, 1230, 143, 144,
	415, 145, 416, 417, 418, 419, 297, 420, 421, 422,
	423, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 424, 150, 304, 305, 151, 152, 425, 426, 306,
	307, 308, 427, 153, 309, 428, 401, 429, 154, 155,
	156, 0, 157, 430, 158, 159, 160, 431, 402, 161,
	162, 432, 433, 435, 434, 436, 437, 438, 163, 164,
	355, 165, 310, 166, 311, 312, 439, 167, 440, 168,
	441, 169, 442, 443, 170, 171, 444, 172, 445, 0,
	446, 313, 173, 174, 175, 314, 315, 447, 448, 449,
	176, 177, 316, 317, 318, 0, 178, 450, 179, 451,
	452, 403, 453, 180, 319, 454, 320, 455, 181, 182,
	183, 184, 321, 322, 405, 456, 188, 457, 185, 458,
	404, 186, 323, 187, 324, 325, 326, 327, 328, 459,
	329, 460, 406, 189, 190, 191, 407, 192, 193, 194,
	461, 196, 195, 462, 330, 408, 197, 409, 463, 198,
	199, 464, 465, 200, 0, 201, 202, 203, 205, 331,
	204, 410, 206, 207, 209, 208, 466, 467, 468, 332,
	210, 333, 211, 212, 469, 213, 470, 471, 214, 472,
	473, 215, 334, 411, 216, 412, 335, 217, 218, 219,
	220, 221, 474, 222, 336, 223, 337, 224, 475, 225,
	226, 227, 228, 229, 338, 230, 231, 476, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	477, 244, 413, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 478, 256, 340, 255, 257, 258, 479, 259,
	248, 249, 260, 414, 261, 341, 342, 262, 480, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 481, 269,
	482, 270, 271, 272, 273, 274, 275, 276, 483, 345,
	346, 347, 484, 485, 277, 278, 348, 349, 486, 279,
	280, 281, 282, 487, 488, 283, 284, 285, 286, 489,
	287, 490, 350, 288, 289, 290, 351, 352, 491, 492,
	291, 493, 494, 495, 496, 292, 293, 294, 295, 296,
	0, 0, 0, 396, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1952, 143,
	144, 415, 145, 416, 417, 418, 419, 297, 420, 421,
	422, 423, 146, 147, 148, 298, 299, 300, 301, 149,
	302, 303, 424, 150, 304, 305, 151, 152, 425, 426,
	306, 307, 308, 427, 153, 309, 428, 401, 429, 154,
	155, 156, 0, 157, 430, 158, 159, 160, 431, 402,
	161, 162, 432, 433, 435, 434, 436, 437, 438, 163,
	164, 355, 165, 310, 166, 311, 312, 439, 167, 440,
	168, 441, 169, 442, 443, 170, 171, 444, 172, 445,
	0, 446, 313, 173, 174, 175, 314, 315, 447, 448,
	449, 176, 177, 316, 317, 318, 0, 178, 450, 179,
	451, 452, 403, 453, 180, 319, 454, 320, 455, 181,
	182, 183, 184, 321, 322, 405, 456, 188, 457, 185,
	458, 404, 186, 323, 187, 324, 325, 326, 327, 328,
	459, 329, 460, 406, 189, 190, 191, 407, 192, 193,
	194, 461, 196, 195, 462, 330, 408, 197, 409, 463,
	198, 199, 464, 465, 200, 0, 201, 202, 203, 205,
	331, 204, 410, 206, 207, 209, 208, 466, 467, 468,
	332, 210, 333, 211, 212, 469, 213, 470, 471, 214,
	472, 473, 215, 334, 411, 216, 412, 335, 217, 218,
	219, 220, 221, 474, 222, 336, 223, 337, 224, 475,
	225, 226, 227, 228, 229, 338, 230, 231, 476, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 477, 244, 413, 245, 246, 339, 247, 0, 251,
	252, 253, 254, 478, 256, 340, 255, 257, 258, 479,
	259, 248, 249, 260, 414, 261, 341, 342, 262, 480,
	268, 263, 264, 250, 265, 267, 343, 266, 344, 481,
	269, 482, 270, 271, 272, 273, 274, 275, 276, 483,
	345, 346, 347, 484, 485, 277, 278, 348, 349, 486,
	279, 280, 281, 282, 487, 488, 283, 284, 285, 286,
	489, 287, 490, 350, 288, 289, 290, 351, 352, 491,
	492, 291, 493, 494, 495, 496, 292, 293, 294, 295,
	296, 396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 143, 144, 415,
	145, 416, 417, 418, 419, 297, 420, 421, 422, 423,
	146, 147, 148, 298, 299, 300, 301, 149, 302, 303,
	424, 150, 304, 305, 151, 152, 425, 426, 306, 307,
	308, 427, 153, 309, 428, 401, 429, 154, 155, 156,
	0, 157, 430, 158, 159, 160, 431, 402, 161, 162,
	432, 433, 435, 434, 436, 437, 438, 163, 164, 355,
	165, 310, 166, 311, 312, 439, 167, 440, 168, 441,
	169, 442, 443, 170, 171, 444, 172, 445, 0, 446,
	313, 173, 174, 175, 314, 315, 447, 448, 449, 176,
	177, 316, 317, 318, 0, 178, 450, 179, 451, 452,
	403, 453, 180, 319, 454, 320, 455, 181, 182, 183,
	184, 321, 322, 405, 456, 188, 457, 185, 458, 404,
	186, 323, 187, 324, 325, 326, 327, 328, 459, 329,
	460, 406, 189, 190, 191, 407, 192, 193, 194, 461,
	196, 195, 462, 330, 408, 197, 409, 463, 198, 199,
	464, 465, 200, 0, 201, 202, 203, 205, 331, 204,
	410, 206, 207, 209, 208, 466, 467, 468, 332, 210,
	333, 211, 212, 469, 213, 470, 471, 214, 472, 473,
	215, 334, 411, 216, 412, 335, 217, 218, 219, 220,
	221, 474, 222, 336, 223, 337, 224, 475, 225, 226,
	227, 228, 229, 338, 230, 231, 476, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 243, 477,
	244, 413, 245, 246, 339, 247, 0, 251, 252, 253,
	254, 478, 256, 340, 255, 257, 258, 479, 259, 248,
	249, 260, 414, 261, 341, 342, 262, 480, 268, 263,
	264, 250, 265, 267, 343, 266, 344, 481, 269, 482,
	270, 271, 272, 273, 274, 275, 276, 483, 345, 346,
	347, 484, 485, 277, 278, 348, 349, 486, 279, 280,
	281, 282, 487, 488, 283, 284, 285, 286, 489, 287,
	490, 350, 288, 289, 290, 351, 352, 491, 492, 291,
	493, 494, 495, 496, 292, 293, 294, 295, 296, 698,
	687, 688, 685, 686, 677, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 144, 1347, 145, 0,
	0, 0, 0, 715, 680, 0, 0, 0, 146, 147,
	148, 298, 730, 300, 731, 149, 732, 733, 0, 150,
	304, 305, 151, 152, 683, 714, 734, 735, 308, 0,
	153, 726, 0, 706, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 402, 161, 162, 0, 707,
	708, 710, 0, 709, 711, 163, 164, 355, 165, 736,
	166, 737, 738, 0, 167, 0, 168, 0, 169, 1348,
	0, 729, 171, 0, 172, 0, 0, 0, 671, 173,
	174, 175, 716, 717, 694, 0, 0, 176, 177, 739,
	740, 741, 0, 178, 0, 179, 0, 0, 403, 0,
	180, 727, 0, 320, 0, 181, 182, 183, 184, 723,
	725, 405, 0, 188, 0, 185, 0, 404, 186, 742,
	187, 743, 744, 745, 746, 747, 0, 705, 0, 406,
	189, 190, 191, 407, 192, 193, 194, 0, 196, 195,
	0, 728, 408, 197, 409, 0, 198, 199, 0, 0,
	200, 0, 201, 202, 203, 205, 331, 204, 410, 206,
	207, 209, 208, 666, 0, 695, 724, 210, 748, 211,
	212, 0, 213, 0, 0, 214, 0, 0, 215, 334,
	411, 216, 412, 718, 217, 218, 219, 220, 221, 0,
	222, 719, 223, 337, 224, 0, 225, 226, 227, 228,
	229, 749, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 243, 0, 244, 413,
	245, 246, 672, 247, 0, 251, 252, 253, 254, 0,
	256, 340, 255, 257, 258, 712, 259, 248, 249, 260,
	414, 261, 750, 342, 262, 0, 268, 263, 264, 250,
	265, 267, 751, 266, 720, 0, 269, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 345, 752, 753, 0,
	0, 277, 278, 721, 722, 693, 279, 280, 281, 282,
	0, 0, 283, 284, 285, 286, 713, 287, 0, 350,
	288, 289, 290, 351, 754, 1346, 0, 291, 0, 0,
	0, 0, 292, 293, 294, 295, 296, 667, 0, 0,
	0, 0, 0, 665, 0, 0, 0, 0, 663, 664,
	1349, 698, 687, 688, 685, 686, 677, 673, 1344, 0,
	0, 0, 676, 0, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 715, 680, 0, 0, 0,
	146, 147, 148, 298, 730, 300, 731, 149, 732, 733,
	0, 150, 304, 305, 151, 152, 683, 714, 734, 735,
	308, 0, 153, 726, 0, 706, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 402, 161, 162,
	0, 707, 708, 710, 0, 709, 711, 163, 164, 355,
	165, 736, 166, 737, 738, 0, 167, 0, 168, 0,
	169, 0, 0, 729, 171, 0, 172, 0, 0, 0,
	671, 173, 174, 175, 716, 717, 694, 0, 0, 176,
	177, 739, 740, 741, 0, 178, 0, 179, 0, 0,
	403, 0, 180, 727, 0, 320, 0, 181, 182, 183,
	184, 723, 725, 405, 0, 188, 0, 185, 0, 404,
	186, 742, 187, 743, 744, 745, 746, 747, 0, 705,
	0, 406, 189, 190, 191, 407, 192, 193, 194, 0,
	196, 195, 0, 728, 408, 197, 409, 0, 198, 199,
	0, 0, 200, 0, 201, 202, 203, 205, 331, 204,
	410, 206, 207, 209, 208, 666, 0, 695, 724, 210,
	748, 211, 212, 0, 213, 0, 0, 214, 0, 0,
	215, 334, 411, 216, 412, 718, 217, 218, 219, 220,
	221, 0, 222, 719, 223, 337, 224, 0, 225, 226,
	227, 228, 229, 749, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 243, 0,
	244, 413, 245, 246, 672, 247, 0, 251, 252, 253,
	254, 127, 256, 340, 255, 257, 258, 712, 259, 248,
	249, 260, 414, 261, 750, 342, 262, 0, 268, 263,
	264, 250, 265, 267, 751, 266, 720, 0, 269, 131,
	270, 271, 272, 273, 274, 275, 276, 0, 345, 752,
	753, 0, 0, 277, 278, 721, 722, 693, 279, 280,
	281, 282, 0, 0, 283, 284, 285, 286, 713, 287,
	0, 350, 288, 289, 290, 658, 754, 0, 0, 291,
	0, 0, 0, 125, 292, 293, 294, 295, 296, 667,
	126, 0, 0, 0, 0, 665, 0, 0, 0, 0,
	663, 664, 698, 687, 688, 685, 686, 677, 0, 673,
	0, 0, 0, 0, 676, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 715, 680, 0, 0,
	0, 146, 147, 148, 298, 730, 300, 731, 149, 732,
	733, 1394, 150, 304, 305, 151, 152, 683, 714, 734,
	735, 308, 0, 153, 726, 0, 706, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 402, 161,
	162, 0, 707, 708, 710, 0, 709, 711, 163, 164,
	355, 165, 736, 166, 737, 738, 0, 167, 0, 168,
	0, 169, 0, 0, 729, 171, 0, 172, 0, 0,
	0, 671, 173, 174, 175, 716, 717, 694, 0, 0,
	176, 177, 739, 740, 741, 0, 178, 0, 179, 0,
	1399, 403, 0, 180, 727, 0, 320, 0, 181, 182,
	183, 184, 723, 725, 405, 0, 188, 0, 185, 0,
	404, 186, 742, 187, 743, 744, 745, 746, 747, 0,
	705, 0, 406, 189, 190, 191, 407, 192, 193, 194,
	0, 196, 195, 1395, 728, 408, 197, 409, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 410, 206, 207, 209, 208, 666, 0, 695, 724,
	210, 748, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 411, 216, 412, 718, 217, 218, 219,
	220, 221, 0, 222, 719, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 749, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 413, 245, 246, 672, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 712, 259,
	248, 249, 260, 414, 261, 750, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 751, 266, 720, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	752, 753, 0, 1396, 277, 278, 721, 722, 693, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 713,
	287, 0, 350, 288, 289, 290, 351, 754, 0, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	667, 0, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 663, 664, 698, 687, 688, 685, 686, 677, 0,
	673, 0, 0, 0, 0, 676, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 715, 680, 0,
	0, 0, 146, 147, 148, 298, 730, 300, 731, 149,
	732, 733, 0, 150, 304, 305, 151, 152, 683, 714,
	734, 735, 308, 0, 153, 726, 0, 706, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 402,
	161, 162, 0, 707, 708, 710, 0, 709, 711, 163,
	164, 355, 165, 736, 166, 737, 738, 0, 167, 0,
	168, 0, 169, 0, 0, 729, 171, 0, 172, 0,
	0, 0, 671, 173, 174, 175, 716, 717, 694, 0,
	0, 176, 177, 739, 740, 741, 0, 178, 0, 179,
	0, 0, 403, 0, 180, 727, 0, 320, 0, 181,
	182, 183, 184, 723, 725, 405, 0, 188, 0, 185,
	0, 404, 186, 742, 187, 743, 744, 745, 746, 747,
	0, 705, 0, 406, 189, 190, 191, 407, 192, 193,
	194, 0, 196, 195, 0, 728, 408, 197, 409, 0,
	198, 199, 0, 0, 200, 0, 201, 202, 203, 205,
	331, 204, 410, 206, 207, 209, 208, 666, 1787, 695,
	724, 210, 748, 211, 212, 0, 213, 0, 0, 214,
	0, 0, 215, 334, 411, 216, 412, 718, 217, 218,
	219, 220, 221, 0, 222, 719, 223, 337, 224, 0,
	225, 226, 227, 228, 229, 749, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 0, 244, 413, 245, 246, 672, 247, 0, 251,
	252, 253, 254, 0, 256, 340, 255, 257, 258, 712,
	259, 248, 249, 260, 414, 261, 750, 342, 262, 0,
	268, 263, 264, 250, 265, 267, 751, 266, 720, 0,
	269, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	345, 752, 753, 0, 0, 277, 278, 721, 722, 693,
	279, 280, 281, 282, 0, 0, 283, 284, 285, 286,
	713, 287, 0, 350, 288, 289, 290, 351, 754, 0,
	0, 291, 0, 0, 0, 0, 292, 293, 294, 295,
	296, 667, 0, 0, 0, 0, 0, 665, 0, 0,
	0, 0, 663, 664, 883, 698, 687, 688, 685, 686,
	677, 673, 0, 0, 0, 0, 676, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 715,
	680, 0, 0, 0, 146, 147, 148, 298, 730, 300,
	731, 149, 732, 733, 0, 150, 304, 305, 151, 152,
	683, 714, 734, 735, 308, 0, 153, 726, 0, 706,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 402, 161, 162, 0, 707, 708, 710, 0, 709,
	711, 163, 164, 355, 165, 736, 166, 737, 738, 0,
	167, 0, 168, 0, 169, 0, 0, 729, 171, 0,
	172, 0, 0, 0, 671, 173, 174, 175, 716, 717,
	694, 0, 0, 176, 177, 739, 740, 741, 0, 178,
	0, 179, 0, 0, 403, 0, 180, 727, 0, 320,
	0, 181, 182, 183, 184, 723, 725, 405, 0, 188,
	1161, 185, 0, 404, 186, 742, 187, 743, 744, 745,
	746, 747, 0, 705, 0, 406, 189, 190, 191, 407,
	192, 193, 194, 0, 196, 195, 0, 728, 408, 197,
	409, 0, 198, 199, 0, 0, 200, 0, 201, 202,
	203, 205, 331, 204, 410, 206, 207, 209, 208, 666,
	0, 695, 724, 210, 748, 211, 212, 0, 213, 0,
	0, 214, 0, 0, 215, 334, 411, 216, 412, 718,
	217, 218, 219, 220, 221, 0, 222, 719, 223, 337,
	224, 1160, 225, 226, 227, 228, 229, 749, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 243, 0, 244, 413, 245, 246, 672, 247,
	0, 251, 252, 253, 254, 0, 256, 340, 255, 257,
	258, 712, 259, 248, 249, 260, 414, 261, 750, 342,
	262, 0, 268, 263, 264, 250, 265, 267, 751, 266,
	720, 0, 269, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 345, 752, 753, 0, 0, 277, 278, 721,
	722, 693, 279, 280, 281, 282, 0, 0, 283, 284,
	285, 286, 713, 287, 0, 350, 288, 289, 290, 351,
	754, 0, 0, 291, 0, 0, 0, 0, 292, 293,
	294, 295, 296, 667, 0, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 663, 664, 698, 687, 688, 685,
	686, 677, 0, 673, 0, 0, 0, 0, 676, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	715, 680, 0, 0, 0, 146, 147, 148, 298, 730,
	300, 731, 149, 732, 733, 0, 150, 304, 305, 151,
	152, 683, 714, 734, 735, 308, 0, 153, 726, 0,
	706, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 402, 161, 162, 0, 707, 708, 710, 0,
	709, 711, 163, 164, 355, 165, 736, 166, 737, 738,
	0, 167, 0, 168, 0, 169, 0, 0, 729, 171,
	0, 172, 0, 0, 0, 671, 173, 174, 175, 716,
	717, 694, 0, 0, 176, 177, 739, 740, 741, 0,
	178, 0, 179, 0, 0, 403, 0, 180, 727, 0,
	320, 0, 181, 182, 183, 184, 723, 725, 405, 0,
	188, 0, 185, 0, 404, 186, 742, 187, 743, 744,
	745, 746, 747, 0, 705, 0, 406, 189, 190, 191,
	407, 192, 193, 194, 0, 196, 195, 0, 728, 408,
	197, 409, 0, 198, 199, 0, 0, 200, 0, 201,
	202, 203, 205, 331, 204, 410, 206, 207, 209, 208,
	666, 0, 695, 724, 210, 748, 211, 212, 0, 213,
	0, 0, 214, 0, 0, 215, 334, 411, 216, 412,
	718, 217, 218, 219, 220, 221, 0, 222, 719, 223,
	337, 224, 0, 225, 226, 227, 228, 229, 749, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 243, 0, 244, 413, 245, 246, 672,
	247, 0, 251, 252, 253, 254, 0, 256, 340, 255,
	257, 258, 712, 259, 248, 249, 260, 414, 261, 750,
	342, 262, 0, 268, 263, 264, 250, 265, 267, 751,
	266, 720, 0, 269, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 345, 752, 753, 0, 0, 277, 278,
	721, 722, 693, 279, 280, 281, 282, 0, 0, 283,
	284, 285, 286, 713, 287, 0, 350, 288, 289, 290,
	351, 754, 0, 0, 291, 0, 0, 0, 0, 292,
	293, 294, 295, 296, 667, 0, 0, 0, 0, 0,
	665, 0, 0, 0, 0, 663, 664, 0, 0, 0,
	0, 0, 989, 1339, 673, 0, 0, 0, 0, 676,
	698, 687, 688, 685, 686, 677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 715, 680, 0, 0, 0, 146,
	147, 148, 298, 730, 300, 731, 149, 732, 733, 0,
	150, 304, 305, 151, 152, 683, 714, 734, 735, 308,
	0, 153, 726, 0, 706, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 402, 161, 162, 0,
	707, 708, 710, 0, 709, 711, 163, 164, 355, 165,
	736, 166, 737, 738, 0, 167, 0, 168, 0, 169,
	0, 0, 729, 171, 0, 172, 0, 0, 0, 671,
	173, 174, 175, 716, 717, 694, 0, 0, 176, 177,
	739, 740, 741, 0, 178, 0, 179, 0, 0, 403,
	0, 180, 727, 0, 320, 0, 181, 182, 183, 184,
	723, 725, 405, 0, 188, 0, 185, 0, 404, 186,
	742, 187, 743, 744, 745, 746, 747, 0, 705, 0,
	406, 189, 190, 191, 407, 192, 193, 194, 0, 196,
	195, 0, 728, 408, 197, 409, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 410,
	206, 207, 209, 208, 666, 0, 695, 724, 210, 748,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 411, 216, 412, 718, 217, 218, 219, 220, 221,
	0, 222, 719, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 749, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	413, 245, 246, 672, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 712, 259, 248, 249,
	260, 414, 261, 750, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 751, 266, 720, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 752, 753,
	0, 0, 277, 278, 721, 722, 693, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 713, 287, 0,
	350, 288, 289, 290, 351, 754, 0, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 667, 0,
	0, 0, 0, 0, 665, 0, 0, 0, 0, 663,
	664, 698, 687, 688, 685, 686, 677, 0, 673, 1869,
	0, 0, 0, 676, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 715, 680, 0, 0, 0,
	146, 147, 148, 298, 730, 300, 731, 149, 732, 733,
	0, 150, 304, 305, 151, 152, 683, 714, 734, 735,
	308, 0, 153, 726, 0, 706, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 402, 161, 162,
	0, 707, 708, 710, 0, 709, 711, 163, 164, 355,
	165, 736, 166, 737, 738, 0, 167, 0, 168, 0,
	169, 0, 0, 729, 171, 0, 172, 0, 0, 0,
	671, 173, 174, 175, 716, 717, 694, 0, 0, 176,
	177, 739, 740, 741, 0, 178, 0, 179, 0, 0,
	403, 0, 180, 727, 0, 320, 0, 181, 182, 183,
	184, 723, 725, 405, 0, 188, 0, 185, 0, 404,
	186, 742, 187, 743, 744, 745, 746, 747, 0, 705,
	0, 406, 189, 190, 191, 407, 192, 193, 194, 0,
	196, 195, 0, 728, 408, 197, 409, 0, 198, 199,
	0, 0, 200, 0, 201, 202, 203, 205, 331, 204,
	410, 206, 207, 209, 208, 666, 0, 695, 724, 210,
	748, 211, 212, 0, 213, 0, 0, 214, 0, 0,
	215, 334, 411, 216, 412, 718, 217, 218, 219, 220,
	221, 0, 222, 719, 223, 337, 224, 0, 225, 226,
	227, 228, 229, 749, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 243, 0,
	244, 413, 245, 246, 672, 247, 0, 251, 252, 253,
	254, 0, 256, 340, 255, 257, 258, 712, 259, 248,
	249, 260, 414, 261, 750, 342, 262, 0, 268, 263,
	264, 250, 265, 267, 751, 266, 720, 0, 269, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 345, 752,
	753, 0, 0, 277, 278, 721, 722, 693, 279, 280,
	281, 282, 0, 0, 283, 284, 285, 286, 713, 287,
	0, 350, 288, 289, 290, 351, 754, 1818, 0, 291,
	0, 0, 0, 0, 292, 293, 294, 295, 296, 667,
	0, 0, 0, 0, 0, 665, 0, 0, 0, 0,
	663, 664, 698, 687, 688, 685, 686, 677, 0, 673,
	0, 0, 0, 0, 676, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 715, 680, 0, 0,
	0, 146, 147, 148, 298, 730, 300, 731, 149, 732,
	733, 0, 150, 304, 305, 151, 152, 683, 714, 734,
	735, 308, 0, 153, 726, 0, 706, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 402, 161,
	162, 0, 707, 708, 710, 0, 709, 711, 163, 164,
	355, 165, 736, 166, 737, 738, 0, 167, 0, 168,
	0, 169, 0, 0, 729, 171, 0, 172, 0, 0,
	0, 671, 173, 174, 175, 716, 717, 694, 0, 0,
	176, 177, 739, 740, 741, 0, 178, 0, 179, 0,
	0, 403, 0, 180, 727, 0, 320, 0, 181, 182,
	183, 184, 723, 725, 405, 0, 188, 0, 185, 0,
	404, 186, 742, 187, 743, 744, 745, 746, 747, 0,
	705, 0, 406, 189, 190, 191, 407, 192, 193, 194,
	0, 196, 195, 0, 728, 408, 197, 409, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 410, 206, 207, 209, 208, 666, 0, 695, 724,
	210, 748, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 411, 216, 412, 718, 217, 218, 219,
	220, 221, 0, 222, 719, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 749, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 413, 245, 246, 672, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 712, 259,
	248, 249, 260, 414, 261, 750, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 751, 266, 720, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	752, 753, 0, 0, 277, 278, 721, 722, 693, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 713,
	287, 0, 350, 288, 289, 290, 351, 754, 0, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	667, 0, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 663, 664, 698, 687, 688, 685, 686, 677, 0,
	673, 1808, 0, 0, 0, 676, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 715, 680, 0,
	0, 0, 146, 147, 148, 298, 730, 300, 731, 149,
	732, 733, 0, 150, 304, 305, 151, 152, 683, 714,
	734, 735, 308, 0, 153, 726, 0, 706, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 402,
	161, 162, 0, 707, 708, 710, 0, 709, 711, 163,
	164, 355, 165, 736, 166, 737, 738, 889, 167, 0,
	168, 0, 169, 0, 0, 729, 171, 0, 172, 0,
	0, 0, 671, 173, 174, 175, 716, 717, 694, 0,
	0, 176, 177, 739, 740, 741, 0, 178, 0, 179,
	0, 0, 403, 0, 180, 727, 0, 320, 0, 181,
	182, 183, 184, 723, 725, 405, 0, 188, 0, 185,
	0, 404, 186, 742, 187, 743, 744, 745, 746, 747,
	0, 705, 0, 406, 189, 190, 191, 407, 192, 193,
	194, 0, 196, 195, 0, 728, 408, 197, 409, 0,
	198, 199, 0, 0, 200, 0, 201, 202, 203, 205,
	331, 204, 410, 206, 207, 209, 208, 666, 0, 695,
	724, 210, 748, 211, 212, 0, 213, 0, 0, 214,
	0, 0, 215, 334, 411, 216, 412, 718, 217, 218,
	219, 220, 221, 0, 222, 719, 223, 337, 224, 0,
	225, 226, 227, 228, 229, 749, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 0, 244, 413, 245, 246, 672, 247, 0, 251,
	252, 253, 254, 0, 256, 340, 255, 257, 258, 712,
	259, 248, 249, 260, 414, 261, 750, 342, 262, 0,
	268, 263, 264, 250, 265, 267, 751, 266, 720, 0,
	269, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	345, 752, 753, 0, 0, 277, 278, 721, 722, 693,
	279, 280, 281, 282, 0, 0, 283, 284, 285, 286,
	713, 287, 0, 350, 288, 289, 290, 351, 754, 0,
	0, 291, 0, 0, 0, 0, 292, 293, 294, 295,
	296, 667, 0, 0, 0, 0, 0, 665, 0, 0,
	0, 0, 663, 664, 698, 687, 688, 685, 686, 677,
	0, 673, 0, 0, 0, 0, 676, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 715, 680,
	0, 0, 0, 146, 147, 148, 298, 730, 300, 731,
	149, 732, 733, 0, 150, 304, 305, 151, 152, 683,
	714, 734, 735, 308, 0, 153, 726, 0, 706, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	402, 161, 162, 0, 707, 708, 710, 0, 709, 711,
	163, 164, 355, 165, 736, 166, 737, 738, 0, 167,
	0, 168, 0, 169, 0, 0, 729, 171, 0, 172,
	0, 0, 0, 671, 173, 174, 175, 716, 717, 694,
	0, 0, 176, 177, 739, 740, 741, 0, 178, 0,
	179, 0, 1399, 403, 0, 180, 727, 0, 320, 0,
	181, 182, 183, 184, 723, 725, 405, 0, 188, 0,
	185, 0, 404, 186, 742, 187, 743, 744, 745, 746,
	747, 0, 705, 0, 406, 189, 190, 191, 407, 192,
	193, 194, 0, 196, 195, 0, 728, 408, 197, 409,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 410, 206, 207, 209, 208, 666, 0,
	695, 724, 210, 748, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 411, 216, 412, 718, 217,
	218, 219, 220, 221, 0, 222, 719, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 749, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 413, 245, 246, 672, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	712, 259, 248, 249, 260, 414, 261, 750, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 751, 266, 720,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 752, 753, 0, 0, 277, 278, 721, 722,
	693, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 713, 287, 0, 350, 288, 289, 290, 351, 754,
	0, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 667, 0, 0, 0, 0, 0, 665, 0,
	0, 0, 0, 663, 664, 698, 687, 688, 685, 686,
	677, 0, 673, 0, 0, 0, 0, 676, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 715,
	680, 0, 0, 0, 146, 147, 148, 298, 730, 300,
	731, 149, 732, 733, 0, 150, 304, 305, 151, 152,
	683, 714, 734, 735, 308, 0, 153, 726, 0, 706,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 402, 161, 162, 0, 707, 708, 710, 0, 709,
	711, 163, 164, 355, 165, 736, 166, 737, 738, 0,
	167, 0, 168, 0, 169, 0, 0, 729, 171, 0,
	172, 0, 0, 0, 671, 173, 174, 175, 716, 717,
	694, 0, 0, 176, 177, 739, 740, 741, 0, 178,
	0, 179, 0, 0, 403, 0, 180, 727, 0, 320,
	0, 181, 182, 183, 184, 723, 725, 405, 0, 188,
	0, 185, 0, 404, 186, 742, 187, 743, 744, 745,
	746, 747, 0, 705, 0, 406, 189, 190, 191, 407,
	192, 193, 194, 0, 196, 195, 0, 728, 408, 197,
	409, 0, 198, 199, 0, 0, 200, 0, 201, 202,
	203, 205, 331, 204, 410, 206, 207, 209, 208, 666,
	0, 695, 724, 210, 748, 211, 212, 0, 213, 0,
	0, 214, 0, 0, 215, 334, 411, 216, 412, 718,
	217, 218, 219, 220, 221, 0, 222, 719, 223, 337,
	224, 0, 225, 226, 227, 228, 229, 749, 230, 231,
	0, 232, 233, 234, 235, 236, 238, 239, 237, 240,
	241, 242, 243, 0, 244, 413, 245, 246, 672, 247,
	0, 251, 252, 253, 254, 0, 256, 340, 255, 257,
	258, 712, 259, 248, 249, 260, 414, 261, 750, 342,
	262, 0, 268, 263, 264, 250, 265, 267, 751, 266,
	720, 0, 269, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 345, 752, 753, 0, 0, 277, 278, 721,
	722, 693, 279, 280, 281, 282, 0, 0, 283, 284,
	285, 286, 713, 287, 0, 350, 288, 289, 290, 351,
	754, 0, 0, 291, 0, 0, 0, 0, 292, 293,
	294, 295, 296, 667, 0, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 663, 664, 883, 698, 687, 688,
	685, 686, 677, 673, 0, 0, 0, 0, 676, 0,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 715, 680, 0, 0, 0, 146, 147, 148, 298,
	730, 300, 731, 149, 732, 733, 0, 150, 304, 305,
	151, 152, 683, 714, 734, 735, 308, 0, 153, 726,
	0, 706, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 402, 161, 162, 0, 707, 708, 710,
	0, 709, 711, 163, 164, 355, 165, 736, 166, 737,
	738, 0, 167, 0, 168, 0, 169, 0, 0, 729,
	171, 0, 172, 0, 0, 0, 671, 173, 174, 175,
	716, 717, 694, 0, 0, 176, 177, 739, 740, 741,
	0, 178, 0, 179, 0, 0, 403, 0, 180, 727,
	0, 320, 0, 181, 182, 183, 184, 723, 725, 405,
	0, 188, 0, 185, 0, 404, 186, 742, 187, 743,
	744, 745, 746, 747, 0, 705, 0, 406, 189, 190,
	191, 407, 192, 193, 194, 0, 196, 195, 0, 728,
	408, 197, 409, 0, 198, 199, 0, 0, 200, 0,
	201, 202, 203, 205, 331, 204, 410, 206, 207, 209,
	208, 666, 0, 695, 724, 210, 748, 211, 212, 0,
	213, 0, 0, 214, 0, 0, 215, 334, 411, 216,
	412, 718, 217, 218, 219, 220, 221, 0, 222, 719,
	223, 337, 224, 0, 225, 226, 227, 228, 229, 749,
	230, 231, 0, 232, 233, 234, 235, 236, 238, 239,
	237, 240, 241, 242, 243, 0, 244, 413, 245, 246,
	672, 247, 0, 251, 252, 253, 254, 0, 256, 340,
	255, 257, 258, 712, 259, 248, 249, 260, 414, 261,
	750, 342, 262, 0, 268, 263, 264, 250, 265, 267,
	751, 266, 720, 0, 269, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 345, 752, 753, 0, 0, 277,
	278, 721, 722, 693, 279, 280, 281, 282, 0, 0,
	283, 284, 285, 286, 713, 287, 0, 350, 288, 289,
	290, 351, 754, 0, 0, 291, 0, 0, 0, 0,
	292, 293, 294, 295, 296, 667, 0, 0, 0, 0,
	0, 665, 0, 0, 0, 0, 663, 664, 698, 687,
	688, 685, 686, 677, 0, 673, 1334, 0, 0, 0,
	676, 0, 0, 0, 143, 144, 1148, 145, 0, 0,
	0, 0, 715, 680, 0, 0, 0, 146, 147, 148,
	298, 730, 300, 731, 149, 732, 733, 0, 150, 304,
	305, 151, 152, 683, 714, 734, 735, 308, 0, 153,
	726, 0, 706, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 402, 161, 162, 0, 707, 708,
	710, 0, 709, 711, 163, 164, 355, 165, 736, 166,
	737, 738, 0, 167, 0, 168, 0, 169, 0, 0,
	729, 171, 0, 172, 0, 0, 0, 671, 173, 174,
	175, 716, 717, 694, 0, 0, 176, 177, 739, 740,
	741, 0, 178, 0, 179, 0, 0, 403, 0, 180,
	727, 0, 320, 0, 181, 182, 183, 184, 723, 725,
	405, 0, 188, 0, 185, 0, 404, 186, 742, 187,
	743, 744, 745, 746, 747, 0, 705, 0, 406, 189,
	190, 191, 407, 192, 193, 194, 0, 196, 195, 0,
	728, 408, 197, 409, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 410, 206, 207,
	209, 208, 666, 0, 695, 724, 210, 748, 211, 212,
	0, 213, 0, 0, 214, 0, 0, 215, 334, 411,
	216, 412, 718, 217, 218, 219, 220, 221, 0, 222,
	719, 223, 337, 224, 0, 225, 226, 227, 228, 229,
	749, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 413, 245,
	246, 672, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 712, 259, 248, 249, 260, 414,
	261, 750, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 751, 266, 720, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 752, 753, 0, 0,
	277, 278, 721, 722, 693, 279, 280, 281, 282, 0,
	0, 283, 284, 285, 286, 713, 287, 0, 350, 288,
	289, 290, 351, 754, 0, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 667, 0, 0, 0,
	0, 0, 665, 0, 0, 0, 0, 663, 664, 698,
	687, 688, 685, 686, 677, 0, 673, 0, 0, 0,
	0, 676, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 715, 680, 0, 0, 0, 146, 147,
	148, 298, 730, 300, 731, 149, 732, 733, 0, 150,
	304, 305, 151, 152, 683, 714, 734, 735, 308, 0,
	153, 726, 0, 706, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 402, 161, 2224, 0, 707,
	708, 710, 0, 709, 711, 163, 164, 355, 165, 736,
	166, 737, 738, 0, 167, 0, 168, 0, 169, 0,
	0, 729, 171, 0, 172, 0, 0, 0, 671, 173,
	174, 175, 716, 717, 694, 0, 0, 176, 177, 739,
	740, 741, 0, 178, 0, 179, 0, 0, 403, 0,
	180, 727, 0, 320, 0, 181, 182, 183, 184, 723,
	725, 405, 0, 188, 0, 185, 0, 404, 186, 742,
	187, 743, 744, 745, 746, 747, 0, 705, 0, 406,
	189, 190, 191, 407, 192, 193, 194, 0, 196, 195,
	0, 728, 408, 197, 409, 0, 198, 199, 0, 0,
	200, 0, 201, 202, 203, 205, 331, 204, 410, 206,
	207, 209, 208, 666, 0, 695, 724, 210, 748, 211,
	212, 0, 213, 0, 0, 214, 0, 0, 215, 334,
	411, 216, 412, 718, 217, 218, 219, 220, 221, 0,
	222, 719, 223, 337, 224, 0, 225, 226, 227, 228,
	229, 749, 230, 231, 0, 232, 233, 234, 235, 236,
	238, 239, 237, 240, 241, 242, 243, 0, 244, 413,
	245, 246, 672, 247, 0, 251, 252, 253, 254, 0,
	256, 340, 255, 257, 258, 712, 259, 248, 249, 260,
	414, 261, 750, 342, 262, 0, 268, 263, 264, 250,
	265, 267, 751, 266, 720, 0, 269, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 345, 752, 753, 0,
	0, 277, 278, 721, 722, 693, 279, 280, 2223, 282,
	0, 0, 283, 284, 285, 286, 713, 287, 0, 350,
	288, 289, 290, 351, 754, 0, 0, 291, 0, 0,
	0, 0, 292, 293, 294, 295, 296, 667, 0, 0,
	0, 0, 0, 665, 0, 0, 0, 0, 663, 664,
	698, 687, 688, 685, 686, 677, 0, 673, 0, 0,
	0, 0, 676, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 715, 680, 0, 0, 0, 146,
	147, 148, 298, 730, 300, 731, 149, 732, 733, 0,
	150, 304, 305, 151, 152, 683, 714, 734, 735, 308,
	0, 153, 726, 0, 706, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 402, 161, 162, 0,
	707, 708, 710, 0, 709, 711, 163, 164, 355, 165,
	736, 166, 737, 738, 0, 167, 0, 168, 0, 169,
	0, 0, 729, 171, 0, 172, 0, 0, 0, 671,
	173, 174, 175, 716, 717, 694, 0, 0, 176, 177,
	739, 740, 741, 0, 178, 0, 179, 0, 0, 403,
	0, 180, 727, 0, 320, 0, 181, 182, 183, 184,
	723, 725, 405, 0, 188, 0, 185, 0, 404, 186,
	742, 187, 743, 744, 745, 746, 747, 0, 705, 0,
	406, 189, 190, 191, 407, 192, 193, 194, 0, 196,
	195, 0, 728, 408, 197, 409, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 410,
	206, 207, 209, 208, 666, 0, 695, 724, 210, 748,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 411, 216, 412, 718, 217, 218, 219, 220, 221,
	0, 222, 719, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 749, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	413, 245, 246, 672, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 712, 259, 248, 249,
	260, 414, 261, 750, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 751, 266, 720, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 752, 753,
	0, 0, 277, 278, 721, 722, 693, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 713, 287, 0,
	350, 288, 289, 290, 351, 754, 0, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 667, 0,
	0, 0, 0, 0, 665, 0, 0, 0, 0, 663,
	664, 698, 687, 688, 685, 686, 677, 0, 673, 0,
	0, 0, 0, 676, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 715, 680, 0, 0, 0,
	146, 147, 148, 2222, 730, 300, 731, 149, 732, 733,
	0, 150, 304, 305, 151, 152, 683, 714, 734, 735,
	308, 0, 153, 726, 0, 706, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 402, 161, 2224,
	0, 707, 708, 710, 0, 709, 711, 163, 164, 355,
	165, 736, 166, 737, 738, 0, 167, 0, 168, 0,
	169, 0, 0, 729, 171, 0, 172, 0, 0, 0,
	671, 173, 174, 175, 716, 717, 694, 0, 0, 176,
	177, 739, 740, 741, 0, 178, 0, 179, 0, 0,
	403, 0, 180, 727, 0, 320, 0, 181, 182, 183,
	184, 723, 725, 405, 0, 188, 0, 185, 0, 404,
	186, 742, 187, 743, 744, 745, 746, 747, 0, 705,
	0, 406, 189, 190, 191, 407, 192, 193, 194, 0,
	196, 195, 0, 728, 408, 197, 409, 0, 198, 199,
	0, 0, 200, 0, 201, 202, 203, 205, 331, 204,
	410, 206, 207, 209, 208, 666, 0, 695, 724, 210,
	748, 211, 212, 0, 213, 0, 0, 214, 0, 0,
	215, 334, 411, 216, 412, 718, 217, 218, 219, 220,
	221, 0, 222, 719, 223, 337, 224, 0, 225, 226,
	227, 228, 229, 749, 230, 231, 0, 232, 233, 234,
	235, 236, 238, 239, 237, 240, 241, 242, 243, 0,
	244, 413, 245, 246, 672, 247, 0, 251, 252, 253,
	254, 0, 256, 340, 255, 257, 258, 712, 259, 248,
	249, 260, 414, 261, 750, 342, 262, 0, 268, 263,
	264, 250, 265, 267, 751, 266, 720, 0, 269, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 345, 752,
	753, 0, 0, 277, 278, 721, 722, 693, 279, 280,
	2223, 282, 0, 0, 283, 284, 285, 286, 713, 287,
	0, 350, 288, 289, 290, 351, 754, 0, 0, 291,
	0, 0, 0, 0, 292, 293, 294, 295, 296, 667,
	0, 0, 0, 0, 0, 665, 0, 0, 0, 0,
	663, 664, 1371, 687, 688, 685, 686, 677, 0, 673,
	0, 0, 0, 0, 676, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 715, 680, 0, 0,
	0, 146, 147, 148, 298, 730, 300, 731, 149, 732,
	733, 0, 150, 304, 305, 151, 152, 683, 714, 734,
	735, 308, 0, 153, 726, 0, 706, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 402, 161,
	162, 0, 707, 708, 710, 0, 709, 711, 163, 164,
	355, 165, 736, 1374, 737, 738, 0, 167, 0, 168,
	0, 169, 0, 0, 729, 171, 0, 172, 0, 0,
	0, 671, 173, 174, 175, 716, 717, 694, 0, 0,
	176, 177, 739, 740, 741, 0, 178, 0, 179, 0,
	0, 403, 0, 180, 727, 0, 320, 0, 181, 182,
	1375, 184, 723, 725, 405, 0, 188, 0, 185, 0,
	404, 186, 742, 187, 743, 744, 745, 746, 747, 0,
	705, 0, 406, 189, 190, 191, 407, 192, 193, 194,
	0, 196, 195, 0, 728, 408, 197, 409, 0, 198,
	199, 0, 0, 200, 0, 201, 1376, 1373, 205, 331,
	204, 410, 206, 207, 209, 208, 666, 0, 695, 724,
	210, 748, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 411, 216, 412, 718, 217, 218, 219,
	220, 221, 0, 222, 719, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 749, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 413, 245, 246, 672, 247, 0, 251, 252,
	253, 1377, 0, 256, 340, 255, 257, 258, 712, 259,
	248, 249, 260, 414, 261, 750, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 751, 266, 720, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	752, 753, 0, 0, 277, 278, 721, 722, 693, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 713,
	287, 0, 350, 288, 289, 290, 351, 754, 0, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 1372, 296,
	667, 0, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 663, 664, 698, 687, 688, 685, 686, 677, 0,
	673, 0, 0, 0, 0, 676, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 715, 680, 0,
	0, 0, 146, 147, 148, 298, 730, 300, 731, 149,
	732, 733, 0, 150, 304, 305, 151, 152, 683, 714,
	734, 735, 308, 0, 153, 726, 0, 706, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 402,
	161, 162, 0, 707, 708, 710, 0, 709, 711, 163,
	164, 355, 165, 736, 166, 737, 738, 0, 167, 0,
	168, 0, 169, 0, 0, 729, 171, 0, 172, 0,
	0, 0, 671, 173, 174, 175, 716, 717, 694, 0,
	0, 176, 177, 739, 740, 741, 0, 178, 0, 179,
	0, 0, 403, 0, 180, 727, 0, 320, 0, 181,
	182, 183, 184, 723, 725, 405, 0, 188, 0, 185,
	0, 404, 186, 742, 187, 743, 744, 745, 746, 747,
	0, 705, 0, 406, 189, 190, 191, 407, 192, 193,
	194, 0, 196, 195, 0, 728, 408, 197, 409, 0,
	198, 199, 0, 0, 200, 0, 201, 202, 203, 205,
	331, 204, 410, 206, 207, 209, 208, 0, 0, 695,
	724, 210, 748, 211, 212, 0, 213, 0, 0, 214,
	0, 0, 215, 334, 411, 216, 412, 718, 217, 218,
	219, 220, 221, 0, 222, 719, 223, 337, 224, 0,
	225, 226, 227, 228, 229, 749, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 0, 244, 413, 245, 246, 1389, 247, 0, 251,
	252, 253, 254, 0, 256, 340, 255, 257, 258, 712,
	259, 248, 249, 260, 414, 261, 750, 342, 262, 0,
	268, 263, 264, 250, 265, 267, 751, 266, 720, 0,
	269, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	345, 752, 753, 0, 0, 277, 278, 721, 722, 693,
	279, 280, 281, 282, 0, 0, 283, 284, 285, 286,
	713, 287, 0, 350, 288, 289, 290, 351, 754, 0,
	0, 291, 0, 0, 0, 0, 292, 293, 294, 295,
	296, 0, 0, 0, 0, 0, 0, 1387, 0, 0,
	0, 0, 1385, 1386, 698, 687, 688, 685, 686, 677,
	0, 1388, 0, 0, 0, 0, 676, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 715, 680,
	0, 0, 0, 146, 147, 148, 298, 730, 300, 731,
	149, 732, 733, 0, 150, 304, 305, 151, 152, 0,
	714, 734, 735, 308, 0, 153, 726, 0, 706, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	402, 161, 162, 0, 707, 708, 710, 0, 709, 711,
	163, 164, 355, 165, 736, 166, 737, 738, 0, 167,
	0, 168, 0, 169, 0, 0, 729, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 716, 717, 694,
	0, 0, 176, 177, 739, 740, 741, 0, 178, 0,
	179, 0, 0, 403, 0, 180, 727, 0, 320, 0,
	181, 182, 183, 184, 723, 725, 405, 0, 188, 0,
	185, 0, 404, 186, 742, 187, 743, 744, 745, 746,
	747, 0, 705, 0, 406, 189, 190, 191, 407, 192,
	193, 194, 0, 196, 195, 0, 728, 408, 197, 409,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 410, 206, 207, 209, 208, 0, 0,
	695, 724, 210, 748, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 411, 216, 412, 718, 217,
	218, 219, 220, 221, 0, 222, 719, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 749, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 413, 245, 246, 1389, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	712, 259, 248, 249, 260, 414, 261, 750, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 751, 266, 720,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 752, 753, 0, 0, 277, 278, 721, 722,
	693, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 713, 287, 0, 350, 288, 289, 290, 351, 754,
	0, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 698, 687, 688, 685, 686, 677,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 144, 1388, 145, 0, 0, 0, 676, 715, 680,
	0, 0, 0, 146, 147, 148, 0, 730, 300, 731,
	149, 732, 733, 0, 150, 304, 305, 151, 152, 683,
	714, 734, 735, 308, 0, 153, 726, 0, 706, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	402, 161, 2224, 0, 707, 708, 710, 0, 709, 711,
	163, 164, 355, 165, 736, 166, 737, 738, 0, 167,
	0, 168, 0, 169, 0, 0, 729, 171, 0, 172,
	0, 0, 0, 671, 173, 174, 175, 716, 717, 694,
	0, 0, 176, 177, 739, 740, 741, 0, 178, 0,
	179, 0, 0, 403, 0, 180, 727, 0, 320, 0,
	181, 182, 183, 184, 723, 725, 0, 0, 188, 0,
	185, 0, 404, 186, 742, 187, 743, 744, 745, 746,
	747, 0, 705, 0, 0, 189, 190, 191, 407, 192,
	193, 194, 0, 196, 195, 0, 728, 408, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 410, 206, 207, 209, 208, 666, 0,
	695, 724, 210, 748, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 411, 216, 412, 718, 217,
	218, 219, 220, 221, 0, 222, 719, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 749, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 413, 245, 246, 672, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	712, 259, 248, 249, 260, 0, 261, 750, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 751, 266, 720,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 752, 753, 0, 0, 277, 278, 721, 722,
	693, 279, 280, 2223, 282, 0, 0, 283, 284, 285,
	286, 713, 287, 0, 350, 288, 289, 290, 351, 754,
	0, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 698, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 0, 0, 143, 144,
	0, 145, 673, 0, 0, 0, 715, 676, 0, 0,
	0, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 714, 306,
	307, 308, 0, 153, 726, 0, 706, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 402, 161,
	162, 0, 707, 708, 710, 0, 709, 711, 163, 164,
	355, 165, 310, 166, 311, 312, 0, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 716, 717, 0, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 403, 0, 180, 727, 0, 320, 0, 181, 182,
	183, 184, 723, 725, 405, 0, 188, 0, 185, 0,
	404, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 406, 189, 190, 191, 407, 192, 193, 194,
	0, 196, 195, 0, 728, 408, 197, 409, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 410, 206, 207, 209, 208, 0, 0, 0, 724,
	210, 333, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 411, 216, 412, 718, 217, 218, 219,
	220, 221, 0, 222, 719, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 413, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 712, 259,
	248, 249, 260, 414, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 720, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	346, 347, 0, 0, 277, 278, 721, 722, 0, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 713,
	287, 0, 350, 288, 289, 290, 351, 352, 0, 0,
	291, 0, 569, 0, 0, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 297, 0, 0, 0,
	1898, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 0, 306,
	307, 308, 0, 153, 309, 0, 401, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 402, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 310, 166, 311, 312, 0, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 0, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 403, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 321, 322, 405, 0, 188, 0, 185, 0,
	404, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 406, 189, 190, 191, 407, 192, 193, 194,
	0, 196, 195, 0, 330, 408, 197, 409, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 410, 206, 207, 209, 208, 0, 0, 0, 332,
	210, 333, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 411, 216, 412, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 413, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 127, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 414, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 0, 269,
	131, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	346, 347, 0, 0, 277, 278, 348, 349, 0, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 658, 352, 0, 0,
	291, 0, 0, 0, 125, 292, 293, 294, 295, 296,
	0, 126, 569, 566, 0, 567, 562, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 144,
	116, 145, 0, 0, 0, 0, 297, 0, 0, 0,
	0, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 0, 306,
	307, 308, 0, 153, 309, 0, 401, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 402, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 310, 166, 311, 312, 1111, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 559, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 403, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 321, 322, 405, 0, 188, 0, 185, 0,
	404, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 406, 189, 190, 191, 407, 192, 193, 194,
	0, 196, 195, 0, 330, 408, 197, 409, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 410, 206, 207, 209, 208, 0, 0, 0, 332,
	210, 333, 211, 212, 0, 213, 560, 0, 214, 0,
	0, 215, 334, 411, 216, 412, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 413, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 414, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	346, 347, 0, 0, 277, 278, 348, 349, 558, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 351, 352, 0, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	569, 566, 0, 567, 562, 557, 0, 0, 0, 0,
	0, 568, 563, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 146,
	147, 148, 298, 299, 300, 301, 149, 302, 303, 0,
	150, 304, 305, 151, 152, 0, 0, 306, 307, 308,
	0, 153, 309, 0, 401, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 402, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 355, 165,
	310, 166, 311, 312, 1108, 167, 0, 168, 0, 169,
	0, 0, 170, 171, 0, 172, 0, 0, 0, 313,
	173, 174, 175, 314, 315, 559, 0, 0, 176, 177,
	316, 317, 318, 0, 178, 0, 179, 0, 0, 403,
	0, 180, 319, 0, 320, 0, 181, 182, 183, 184,
	321, 322, 405, 0, 188, 0, 185, 0, 404, 186,
	323, 187, 324, 325, 326, 327, 328, 0, 329, 0,
	406, 189, 190, 191, 407, 192, 193, 194, 0, 196,
	195, 0, 330, 408, 197, 409, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 410,
	206, 207, 209, 208, 0, 0, 0, 332, 210, 333,
	211, 212, 0, 213, 560, 0, 214, 0, 0, 215,
	334, 411, 216, 412, 335, 217, 218, 219, 220, 221,
	0, 222, 336, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 338, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	413, 245, 246, 339, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 0, 259, 248, 249,
	260, 414, 261, 341, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 343, 266, 344, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 346, 347,
	0, 0, 277, 278, 348, 349, 558, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 0, 287, 0,
	350, 288, 289, 290, 351, 352, 0, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 569, 566,
	0, 567, 562, 557, 0, 0, 0, 0, 0, 568,
	563, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 297, 0, 0, 0, 0, 146, 147, 148,
	298, 299, 300, 301, 149, 302, 303, 0, 150, 304,
	305, 151, 152, 0, 0, 306, 307, 308, 0, 153,
	309, 0, 401, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 402, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 355, 165, 310, 166,
	311, 312, 789, 167, 0, 168, 0, 169, 0, 0,
	170, 171, 0, 172, 0, 0, 0, 313, 173, 174,
	175, 314, 315, 559, 0, 0, 176, 177, 316, 317,
	318, 0, 178, 0, 179, 0, 0, 403, 0, 180,
	319, 0, 320, 0, 181, 182, 183, 184, 321, 322,
	405, 0, 188, 0, 185, 0, 404, 186, 323, 187,
	324, 325, 326, 327, 328, 0, 329, 0, 406, 189,
	190, 191, 407, 192, 193, 194, 0, 196, 195, 0,
	330, 408, 197, 409, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 410, 206, 207,
	209, 208, 0, 0, 0, 332, 210, 333, 211, 212,
	0, 213, 560, 0, 214, 0, 0, 215, 334, 411,
	216, 412, 335, 217, 218, 219, 220, 221, 0, 222,
	336, 223, 337, 224, 0, 225, 226, 227, 228, 229,
	338, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 413, 245,
	246, 339, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 0, 259, 248, 249, 260, 414,
	261, 341, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 343, 266, 344, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 346, 347, 0, 0,
	277, 278, 348, 349, 558, 279, 280, 281, 282, 0,
	0, 283, 284, 285, 286, 0, 287, 0, 350, 288,
	289, 290, 351, 352, 0, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 569, 566, 0, 567,
	562, 557, 0, 0, 0, 0, 0, 568, 563, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 146, 147, 148, 298, 299,
	300, 301, 149, 302, 303, 0, 150, 304, 305, 151,
	152, 0, 0, 306, 307, 308, 0, 153, 309, 0,
	401, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 402, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 355, 165, 310, 166, 311, 312,
	0, 167, 0, 168, 0, 169, 0, 0, 170, 171,
	0, 172, 0, 0, 0, 313, 173, 174, 175, 314,
	315, 559, 0, 0, 176, 177, 316, 317, 318, 0,
	178, 0, 179, 0, 0, 403, 0, 180, 319, 0,
	320, 0, 181, 182, 183, 184, 321, 322, 405, 0,
	188, 0, 185, 0, 404, 186, 323, 187, 324, 325,
	326, 327, 328, 0, 329, 0, 406, 189, 190, 191,
	407, 192, 193, 194, 0, 196, 195, 0, 330, 408,
	197, 409, 0, 198, 199, 0, 0, 200, 0, 201,
	202, 203, 205, 331, 204, 410, 206, 207, 209, 208,
	0, 0, 0, 332, 210, 333, 211, 212, 0, 213,
	560, 0, 214, 0, 0, 215, 334, 411, 216, 412,
	335, 217, 218, 219, 220, 221, 0, 222, 336, 223,
	337, 224, 0, 225, 226, 227, 228, 229, 338, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 243, 0, 244, 413, 245, 246, 339,
	247, 0, 251, 252, 253, 254, 0, 256, 340, 255,
	257, 258, 0, 259, 248, 249, 260, 414, 261, 341,
	342, 262, 0, 268, 263, 264, 250, 265, 267, 343,
	266, 344, 0, 269, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 345, 346, 347, 0, 0, 277, 278,
	348, 349, 558, 279, 280, 281, 282, 0, 0, 283,
	284, 285, 286, 0, 287, 0, 350, 288, 289, 290,
	351, 352, 0, 140, 291, 0, 0, 0, 0, 292,
	293, 294, 295, 296, 0, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 568, 563, 297, 0, 0,
	0, 0, 146, 147, 148, 298, 299, 300, 301, 149,
	302, 303, 0, 150, 304, 305, 151, 152, 0, 0,
	306, 307, 308, 0, 153, 309, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	161, 162, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 355, 165, 310, 166, 311, 312, 0, 167, 0,
	168, 0, 169, 0, 0, 170, 171, 0, 172, 0,
	0, 0, 313, 173, 174, 175, 314, 315, 0, 0,
	0, 176, 177, 316, 317, 318, 0, 178, 0, 179,
	0, 0, 0, 0, 180, 319, 0, 320, 0, 181,
	182, 183, 184, 321, 322, 0, 0, 188, 0, 185,
	0, 0, 186, 323, 187, 324, 325, 326, 327, 328,
	0, 329, 0, 0, 189, 190, 191, 0, 192, 193,
	194, 0, 196, 195, 0, 330, 0, 197, 0, 0,
	198, 199, 0, 0, 200, 0, 201, 202, 203, 205,
	331, 204, 0, 206, 207, 209, 208, 0, 0, 0,
	332, 210, 333, 211, 212, 0, 213, 0, 629, 214,
	0, 0, 215, 334, 0, 216, 0, 335, 217, 218,
	219, 220, 221, 0, 222, 336, 223, 337, 224, 0,
	225, 226, 227, 228, 229, 338, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 0, 244, 0, 245, 246, 339, 247, 0, 251,
	252, 253, 254, 127, 256, 340, 255, 257, 258, 0,
	259, 248, 249, 260, 0, 261, 341, 342, 262, 0,
	268, 263, 264, 250, 265, 267, 343, 266, 344, 0,
	269, 131, 270, 271, 272, 273, 274, 275, 276, 0,
	345, 346, 347, 0, 0, 277, 278, 348, 349, 0,
	279, 280, 281, 282, 0, 0, 283, 284, 285, 286,
	0, 287, 0, 350, 288, 289, 290, 658, 352, 0,
	0, 291, 0, 140, 0, 125, 292, 293, 294, 295,
	296, 0, 126, 0, 0, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 297, 0, 623,
	0, 628, 146, 147, 148, 298, 299, 300, 301, 149,
	302, 303, 0, 150, 304, 305, 151, 152, 0, 0,
	306, 307, 308, 0, 153, 309, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	161, 162, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 355, 165, 310, 166, 311, 312, 0, 167, 0,
	168, 0, 169, 0, 0, 170, 171, 0, 172, 0,
	0, 0, 313, 173, 174, 175, 314, 315, 0, 0,
	0, 176, 177, 316, 317, 318, 0, 178, 0, 179,
	0, 0, 0, 0, 180, 319, 0, 320, 0, 181,
	182, 183, 184, 321, 322, 0, 0, 188, 0, 185,
	0, 0, 186, 323, 187, 324, 325, 326, 327, 328,
	0, 329, 0, 0, 189, 190, 191, 0, 192, 193,
	194, 0, 196, 195, 0, 330, 0, 197, 0, 0,
	198, 199, 0, 0, 200, 0, 201, 202, 203, 205,
	331, 204, 0, 206, 207, 209, 208, 0, 0, 0,
	332, 210, 333, 211, 212, 0, 213, 0, 0, 214,
	0, 0, 215, 334, 0, 216, 0, 335, 217, 218,
	219, 220, 221, 0, 222, 336, 223, 337, 224, 0,
	225, 226, 227, 228, 229, 338, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 0, 244, 0, 245, 246, 339, 247, 0, 251,
	252, 253, 254, 127, 256, 340, 255, 257, 258, 0,
	259, 248, 249, 260, 0, 261, 341, 342, 262, 0,
	268, 263, 264, 250, 265, 267, 343, 266, 344, 0,
	269, 131, 270, 271, 272, 273, 274, 275, 276, 0,
	345, 346, 347, 0, 0, 277, 278, 348, 349, 0,
	279, 280, 281, 282, 0, 0, 283, 284, 285, 286,
	0, 287, 0, 350, 288, 289, 290, 658, 352, 0,
	0, 291, 0, 140, 0, 125, 292, 293, 294, 295,
	296, 0, 126, 0, 0, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 297, 0, 0,
	0, 116, 146, 147, 148, 298, 299, 300, 301, 149,
	302, 303, 0, 150, 304, 305, 151, 152, 0, 0,
	306, 307, 308, 0, 153, 309, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	161, 162, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 355, 165, 310, 166, 311, 312, 0, 167, 0,
	168, 0, 169, 0, 0, 170, 171, 0, 172, 0,
	0, 0, 313, 173, 174, 175, 314, 315, 0, 0,
	0, 176, 177, 316, 317, 318, 0, 178, 0, 179,
	0, 0, 0, 0, 180, 319, 0, 320, 0, 181,
	182, 183, 184, 321, 322, 0, 0, 188, 0, 185,
	0, 0, 186, 323, 187, 324, 325, 326, 327, 328,
	0, 329, 0, 0, 189, 190, 191, 0, 192, 193,
	194, 0, 196, 195, 0, 330, 0, 197, 0, 0,
	198, 199, 0, 0, 200, 0, 201, 202, 203, 205,
	331, 204, 0, 206, 207, 209, 208, 0, 0, 0,
	332, 210, 333, 211, 212, 0, 213, 0, 629, 214,
	0, 0, 215, 334, 0, 216, 0, 335, 217, 218,
	219, 220, 221, 0, 222, 336, 223, 337, 224, 0,
	225, 226, 227, 228, 229, 338, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 0, 244, 0, 245, 246, 339, 247, 0, 251,
	252, 253, 254, 0, 256, 340, 255, 257, 258, 0,
	259, 248, 249, 260, 0, 261, 341, 342, 262, 0,
	268, 263, 264, 250, 265, 267, 343, 266, 344, 0,
	269, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	345, 346, 347, 0, 0, 277, 278, 348, 349, 0,
	279, 280, 281, 282, 0, 0, 283, 284, 285, 286,
	0, 287, 0, 350, 288, 289, 290, 351, 352, 0,
	0, 291, 0, 140, 0, 0, 292, 293, 294, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 297, 0, 623,
	0, 628, 146, 147, 148, 298, 299, 300, 301, 149,
	302, 303, 0, 150, 304, 305, 151, 152, 0, 0,
	306, 307, 308, 0, 153, 309, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	161, 162, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 355, 165, 310, 166, 311, 312, 0, 167, 0,
	168, 0, 169, 0, 0, 170, 171, 0, 172, 0,
	0, 0, 313, 173, 174, 175, 314, 315, 0, 0,
	0, 176, 177, 316, 317, 318, 0, 178, 0, 179,
	0, 0, 0, 0, 180, 319, 0, 320, 0, 181,
	182, 183, 184, 321, 322, 0, 0, 188, 0, 185,
	0, 0, 186, 323, 187, 324, 325, 326, 327, 328,
	0, 329, 0, 0, 189, 190, 191, 0, 192, 193,
	194, 0, 196, 195, 0, 330, 0, 197, 0, 0,
	198, 199, 0, 0, 200, 0, 201, 202, 203, 205,
	331, 204, 0, 206, 207, 209, 208, 0, 0, 0,
	332, 210, 333, 211, 212, 0, 213, 0, 0, 214,
	0, 0, 215, 334, 0, 216, 0, 335, 217, 218,
	219, 220, 221, 0, 222, 336, 223, 337, 224, 0,
	225, 226, 227, 228, 229, 338, 230, 231, 0, 232,
	233, 234, 235, 236, 238, 239, 237, 240, 241, 242,
	243, 0, 244, 0, 245, 246, 339, 247, 0, 251,
	252, 253, 254, 0, 256, 340, 255, 257, 258, 0,
	259, 248, 249, 260, 0, 261, 341, 342, 262, 0,
	268, 263, 264, 250, 265, 267, 343, 266, 344, 0,
	269, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	345, 346, 347, 0, 0, 277, 278, 348, 349, 0,
	279, 280, 281, 282, 0, 0, 283, 284, 285, 286,
	0, 287, 0, 350, 288, 289, 290, 351, 352, 0,
	0, 291, 0, 0, 140, 0, 292, 293, 294, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 917, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 153, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 321, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	0, 0, 291, 0, 140, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 1258, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 153, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 321, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	0, 0, 291, 0, 140, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 1833, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 153, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 321, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	0, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 698, 687, 688, 685, 686, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 144,
	0, 145, 910, 0, 0, 0, 297, 0, 0, 0,
	0, 146, 147, 148, 298, 730, 300, 731, 149, 732,
	733, 0, 150, 304, 305, 151, 152, 0, 0, 734,
	735, 308, 0, 153, 309, 0, 401, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 402, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 736, 166, 737, 738, 0, 167, 0, 168,
	0, 169, 0, 0, 729, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 694, 0, 0,
	176, 177, 739, 740, 741, 0, 178, 0, 179, 0,
	0, 403, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 321, 322, 405, 0, 188, 0, 185, 0,
	404, 186, 742, 187, 743, 744, 745, 746, 747, 0,
	705, 0, 406, 189, 190, 191, 407, 192, 193, 194,
	0, 196, 195, 0, 330, 408, 197, 409, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 410, 206, 207, 209, 208, 0, 0, 695, 332,
	210, 748, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 411, 216, 412, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 749, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 413, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 414, 261, 750, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 751, 266, 344, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	752, 753, 0, 0, 277, 278, 348, 349, 693, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 351, 754, 569, 566,
	291, 0, 0, 838, 0, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 297, 0, 0, 0, 0, 146, 147, 148,
	298, 299, 300, 301, 149, 302, 303, 0, 150, 304,
	305, 151, 152, 0, 0, 306, 307, 308, 0, 153,
	309, 0, 401, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 402, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 355, 165, 310, 166,
	311, 312, 0, 167, 0, 168, 0, 169, 0, 0,
	170, 171, 0, 172, 0, 0, 0, 313, 173, 174,
	175, 314, 315, 0, 0, 0, 176, 177, 316, 317,
	318, 0, 178, 0, 179, 0, 0, 403, 0, 180,
	319, 0, 320, 0, 181, 182, 183, 184, 321, 322,
	405, 0, 188, 0, 185, 0, 404, 186, 323, 187,
	324, 325, 326, 327, 328, 0, 329, 0, 406, 189,
	190, 191, 407, 192, 193, 194, 0, 196, 195, 0,
	330, 408, 197, 409, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 410, 206, 207,
	209, 208, 0, 0, 0, 332, 210, 333, 211, 212,
	0, 213, 0, 0, 214, 0, 0, 215, 334, 411,
	216, 412, 335, 217, 218, 219, 220, 221, 0, 222,
	336, 223, 337, 224, 0, 225, 226, 227, 228, 229,
	338, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 413, 245,
	246, 339, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 0, 259, 248, 249, 260, 414,
	261, 341, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 343, 266, 344, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 346, 347, 0, 0,
	277, 278, 348, 349, 0, 279, 280, 281, 282, 0,
	0, 283, 284, 285, 286, 0, 287, 0, 350, 288,
	289, 290, 351, 352, 140, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 0, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 153, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 136, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 321, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 135, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	569, 566, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 297, 139, 0, 0, 0, 146,
	147, 148, 298, 299, 300, 301, 149, 302, 303, 0,
	150, 304, 305, 151, 152, 0, 0, 306, 307, 308,
	0, 153, 309, 0, 401, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 402, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 355, 165,
	310, 166, 311, 312, 0, 167, 0, 168, 0, 169,
	0, 0, 170, 171, 0, 172, 0, 0, 0, 313,
	173, 174, 175, 314, 315, 0, 0, 0, 176, 177,
	316, 317, 318, 0, 178, 0, 179, 0, 0, 403,
	0, 180, 319, 0, 320, 0, 181, 182, 183, 184,
	321, 322, 405, 0, 188, 0, 185, 0, 404, 186,
	323, 187, 324, 325, 326, 327, 328, 0, 329, 0,
	406, 189, 190, 191, 407, 192, 193, 194, 0, 196,
	195, 0, 330, 408, 197, 409, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 410,
	206, 207, 209, 208, 0, 0, 0, 332, 210, 333,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 411, 216, 412, 335, 217, 218, 219, 220, 221,
	0, 222, 336, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 338, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	413, 245, 246, 339, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 0, 259, 248, 249,
	260, 414, 261, 341, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 343, 266, 344, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 346, 347,
	0, 0, 277, 278, 348, 349, 0, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 0, 287, 0,
	350, 288, 289, 290, 351, 352, 140, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 146, 147, 148, 298, 299,
	300, 301, 149, 302, 303, 0, 150, 304, 305, 151,
	152, 0, 0, 306, 307, 308, 0, 153, 309, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 355, 165, 310, 166, 311, 312,
	0, 167, 0, 168, 0, 169, 0, 0, 170, 171,
	0, 172, 0, 0, 0, 313, 173, 174, 175, 314,
	315, 0, 0, 0, 176, 177, 316, 317, 318, 0,
	178, 0, 179, 0, 0, 0, 0, 180, 319, 0,
	320, 0, 181, 182, 183, 184, 321, 322, 0, 0,
	188, 0, 185, 0, 0, 186, 323, 187, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 189, 190, 191,
	0, 192, 193, 194, 0, 196, 195, 0, 330, 0,
	197, 0, 0, 198, 199, 0, 0, 200, 0, 201,
	202, 203, 205, 331, 204, 0, 206, 207, 209, 208,
	0, 0, 0, 332, 210, 333, 211, 212, 0, 213,
	0, 0, 214, 0, 0, 215, 334, 0, 216, 0,
	335, 217, 218, 219, 220, 221, 0, 222, 336, 223,
	337, 224, 0, 225, 226, 227, 228, 229, 338, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 243, 0, 244, 0, 245, 246, 339,
	247, 0, 251, 252, 253, 254, 0, 256, 340, 255,
	257, 258, 0, 259, 248, 249, 260, 0, 261, 341,
	342, 262, 0, 268, 263, 264, 250, 265, 267, 343,
	266, 344, 0, 269, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 345, 346, 347, 0, 0, 277, 278,
	348, 349, 0, 279, 280, 281, 282, 0, 0, 283,
	284, 285, 286, 0, 287, 0, 350, 288, 289, 290,
	351, 352, 569, 0, 291, 0, 0, 0, 0, 292,
	293, 294, 295, 296, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 297, 139, 0, 0,
	0, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 0, 306,
	307, 308, 0, 153, 309, 0, 401, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 402, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 310, 166, 311, 312, 0, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 0, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 403, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 321, 322, 405, 0, 188, 0, 185, 0,
	404, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 406, 189, 190, 191, 407, 192, 193, 194,
	0, 196, 195, 0, 330, 408, 197, 409, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 410, 206, 207, 209, 208, 0, 0, 0, 332,
	210, 333, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 411, 216, 412, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 413, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 414, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	346, 347, 0, 0, 277, 278, 348, 349, 0, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 351, 352, 140, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 297, 0, 0, 0, 0, 146, 147, 148,
	298, 299, 300, 301, 149, 302, 303, 0, 150, 304,
	305, 151, 152, 0, 0, 306, 307, 308, 1449, 153,
	309, 0, 0, 0, 154, 155, 156, 0, 157, 1447,
	158, 159, 160, 0, 0, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 355, 165, 310, 166,
	311, 312, 0, 167, 0, 168, 0, 169, 0, 0,
	170, 171, 0, 172, 0, 0, 0, 313, 173, 174,
	175, 314, 315, 0, 1446, 0, 176, 177, 316, 317,
	318, 0, 178, 0, 179, 1451, 0, 0, 0, 180,
	319, 0, 320, 0, 181, 182, 183, 184, 321, 322,
	0, 0, 188, 1444, 185, 0, 0, 186, 323, 187,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 189,
	190, 191, 0, 192, 193, 194, 0, 196, 195, 0,
	330, 0, 197, 0, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 0, 206, 207,
	209, 208, 0, 0, 0, 332, 210, 333, 211, 212,
	0, 213, 0, 0, 214, 0, 0, 215, 334, 0,
	216, 0, 335, 217, 218, 219, 220, 221, 0, 222,
	336, 223, 337, 224, 1450, 225, 226, 227, 228, 229,
	338, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 0, 245,
	246, 339, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 0, 259, 248, 249, 260, 0,
	261, 341, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 343, 266, 344, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 346, 347, 0, 0,
	277, 278, 348, 349, 0, 279, 280, 281, 282, 0,
	1445, 283, 284, 285, 286, 0, 287, 0, 350, 288,
	289, 290, 351, 352, 140, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 0, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 1449, 153, 309, 0, 0, 1496,
	154, 155, 156, 0, 157, 1447, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 1451, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 1495, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	1450, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 1499, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	140, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 297, 0, 1234, 0, 0, 146,
	147, 148, 298, 299, 300, 301, 149, 302, 303, 0,
	150, 304, 305, 151, 152, 0, 0, 306, 307, 308,
	0, 153, 309, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 355, 165,
	310, 166, 311, 312, 0, 167, 0, 168, 0, 169,
	0, 0, 170, 171, 0, 172, 0, 0, 0, 313,
	173, 174, 175, 314, 315, 0, 0, 0, 176, 177,
	316, 317, 318, 0, 178, 0, 179, 0, 0, 0,
	0, 180, 319, 0, 320, 0, 181, 182, 183, 184,
	321, 322, 0, 0, 188, 0, 185, 0, 0, 186,
	323, 187, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 189, 190, 191, 0, 192, 193, 194, 0, 196,
	195, 0, 330, 0, 197, 0, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 0,
	206, 207, 209, 208, 0, 0, 0, 332, 210, 333,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 0, 216, 0, 335, 217, 218, 219, 220, 221,
	0, 222, 336, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 338, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	0, 245, 246, 339, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 0, 259, 248, 249,
	260, 0, 261, 341, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 343, 266, 344, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 346, 347,
	0, 0, 277, 278, 348, 349, 0, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 0, 287, 0,
	350, 288, 289, 290, 351, 352, 140, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 146, 147, 148, 298, 299,
	300, 301, 149, 302, 303, 0, 150, 304, 305, 151,
	152, 0, 0, 306, 307, 308, 0, 153, 309, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 355, 165, 310, 166, 311, 312,
	0, 167, 0, 168, 0, 169, 0, 0, 170, 171,
	0, 172, 0, 0, 0, 313, 173, 174, 175, 314,
	315, 0, 0, 0, 176, 177, 316, 317, 318, 0,
	178, 0, 179, 0, 0, 0, 0, 180, 319, 0,
	320, 0, 181, 182, 183, 184, 321, 322, 0, 0,
	188, 0, 185, 0, 0, 186, 323, 187, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 189, 190, 191,
	0, 192, 193, 194, 0, 196, 195, 0, 330, 0,
	197, 0, 0, 198, 199, 0, 0, 200, 0, 201,
	202, 203, 205, 331, 204, 0, 206, 207, 209, 208,
	0, 0, 0, 332, 210, 333, 211, 212, 0, 213,
	0, 629, 214, 0, 0, 215, 334, 0, 216, 0,
	335, 217, 218, 219, 220, 221, 0, 222, 336, 223,
	337, 224, 0, 225, 226, 227, 228, 229, 338, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 243, 0, 244, 0, 245, 246, 339,
	247, 0, 251, 252, 253, 254, 0, 256, 340, 255,
	257, 258, 0, 259, 248, 249, 260, 0, 261, 341,
	342, 262, 0, 268, 263, 264, 250, 265, 267, 343,
	266, 344, 0, 269, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 345, 346, 347, 0, 0, 277, 278,
	348, 349, 0, 279, 280, 281, 282, 0, 0, 283,
	284, 285, 286, 0, 287, 0, 350, 288, 289, 290,
	351, 352, 140, 0, 291, 0, 0, 0, 0, 292,
	293, 294, 295, 296, 0, 0, 0, 0, 143, 144,
	1163, 145, 0, 0, 0, 0, 297, 0, 0, 0,
	0, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 0, 306,
	307, 308, 0, 153, 309, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 310, 166, 311, 312, 0, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 0, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 0, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 321, 322, 0, 0, 188, 0, 185, 0,
	0, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 189, 190, 191, 0, 192, 193, 194,
	0, 196, 195, 0, 330, 0, 197, 0, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 0, 206, 207, 209, 208, 0, 0, 0, 332,
	210, 333, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 0, 216, 0, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 0, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 0, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	346, 347, 0, 0, 277, 278, 348, 349, 0, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 351, 352, 140, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 297, 0, 0, 0, 0, 146, 147, 148,
	298, 299, 300, 301, 149, 302, 303, 0, 150, 304,
	305, 151, 152, 0, 0, 306, 307, 308, 0, 153,
	309, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 355, 165, 310, 166,
	311, 312, 0, 167, 0, 168, 0, 169, 0, 0,
	170, 171, 0, 172, 0, 0, 0, 313, 173, 174,
	175, 314, 315, 0, 0, 0, 176, 177, 316, 317,
	318, 0, 178, 0, 179, 0, 0, 0, 0, 180,
	319, 0, 320, 0, 181, 182, 183, 184, 875, 322,
	0, 0, 188, 0, 185, 0, 0, 186, 323, 187,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 189,
	190, 191, 0, 192, 193, 194, 0, 196, 195, 0,
	330, 0, 197, 0, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 0, 206, 207,
	209, 208, 0, 0, 0, 332, 210, 333, 211, 212,
	0, 213, 0, 629, 214, 0, 0, 215, 334, 0,
	216, 0, 335, 217, 218, 219, 220, 221, 0, 222,
	336, 223, 337, 224, 0, 225, 226, 227, 228, 229,
	338, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 0, 245,
	246, 339, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 0, 259, 248, 249, 260, 0,
	261, 341, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 343, 266, 344, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 346, 347, 0, 0,
	277, 278, 348, 349, 0, 279, 280, 281, 282, 0,
	0, 283, 284, 285, 286, 0, 287, 0, 350, 288,
	289, 290, 351, 352, 140, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 0, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 153, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 869, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 629,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	140, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 143, 144, 646, 145,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 146,
	147, 148, 298, 299, 300, 301, 149, 302, 303, 0,
	150, 304, 305, 151, 152, 0, 0, 306, 307, 308,
	0, 153, 309, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 355, 165,
	310, 166, 311, 312, 0, 167, 0, 168, 0, 169,
	0, 0, 170, 171, 0, 172, 0, 0, 0, 313,
	173, 174, 175, 314, 315, 0, 0, 0, 176, 177,
	316, 317, 318, 0, 178, 0, 179, 0, 0, 0,
	0, 180, 319, 0, 320, 0, 181, 182, 183, 184,
	321, 322, 0, 0, 188, 0, 185, 0, 0, 186,
	323, 187, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 189, 190, 191, 0, 192, 193, 194, 0, 196,
	195, 0, 330, 0, 197, 0, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 0,
	206, 207, 209, 208, 0, 0, 0, 332, 210, 333,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 0, 216, 0, 335, 217, 218, 219, 220, 221,
	0, 222, 336, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 338, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	0, 245, 246, 339, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 0, 259, 248, 249,
	260, 0, 261, 341, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 343, 266, 344, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 346, 347,
	0, 0, 277, 278, 348, 349, 0, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 0, 287, 0,
	350, 288, 289, 290, 351, 352, 140, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 0, 0,
	0, 0, 143, 144, 358, 145, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 146, 147, 148, 298, 299,
	300, 301, 149, 302, 303, 0, 150, 304, 305, 151,
	152, 0, 0, 306, 307, 308, 0, 153, 309, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 355, 165, 310, 166, 311, 312,
	0, 167, 0, 168, 0, 169, 0, 0, 170, 171,
	0, 172, 0, 0, 0, 313, 173, 174, 175, 314,
	315, 0, 0, 0, 176, 177, 316, 317, 318, 0,
	178, 0, 179, 0, 0, 0, 0, 180, 319, 0,
	320, 0, 181, 182, 183, 184, 321, 322, 0, 0,
	188, 0, 185, 0, 0, 186, 323, 187, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 189, 190, 191,
	0, 192, 193, 194, 0, 196, 195, 0, 330, 0,
	197, 0, 0, 198, 199, 0, 0, 200, 0, 201,
	202, 203, 205, 331, 204, 0, 206, 207, 209, 208,
	0, 0, 0, 332, 210, 333, 211, 212, 0, 213,
	0, 0, 214, 0, 0, 215, 334, 0, 216, 0,
	335, 217, 218, 219, 220, 221, 0, 222, 336, 223,
	337, 357, 0, 225, 226, 227, 228, 229, 338, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 243, 0, 244, 0, 245, 246, 339,
	247, 0, 251, 252, 253, 254, 0, 256, 340, 255,
	257, 258, 0, 259, 248, 249, 260, 0, 261, 341,
	342, 262, 0, 268, 263, 264, 250, 265, 267, 343,
	266, 344, 0, 269, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 345, 346, 347, 0, 0, 277, 278,
	348, 349, 0, 279, 280, 281, 282, 0, 0, 283,
	284, 285, 286, 0, 287, 0, 350, 288, 289, 290,
	351, 352, 140, 0, 291, 0, 0, 0, 0, 292,
	293, 294, 295, 296, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 297, 0, 0, 0,
	0, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 0, 306,
	307, 308, 0, 153, 309, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 310, 166, 311, 312, 0, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 0, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 0, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 321, 322, 0, 0, 188, 0, 185, 0,
	0, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 189, 190, 191, 0, 192, 193, 194,
	0, 196, 195, 0, 330, 0, 197, 0, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 0, 206, 207, 209, 208, 0, 0, 0, 332,
	210, 333, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 0, 216, 0, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 0, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 0, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	346, 347, 0, 0, 277, 278, 348, 349, 0, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 351, 352, 140, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 297, 0, 0, 0, 0, 146, 147, 148,
	298, 299, 300, 301, 149, 302, 303, 0, 150, 304,
	305, 151, 152, 0, 0, 306, 307, 308, 0, 153,
	309, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 355, 165, 310, 166,
	311, 312, 0, 167, 0, 168, 0, 169, 0, 0,
	170, 171, 0, 172, 0, 0, 0, 313, 173, 174,
	175, 314, 315, 0, 0, 0, 176, 177, 316, 317,
	318, 0, 178, 0, 179, 0, 0, 0, 0, 180,
	319, 0, 320, 0, 181, 182, 183, 184, 1746, 322,
	0, 0, 188, 0, 185, 0, 0, 186, 323, 187,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 189,
	190, 191, 0, 192, 193, 194, 0, 196, 195, 0,
	330, 0, 197, 0, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 0, 206, 207,
	209, 208, 0, 0, 0, 332, 210, 333, 211, 212,
	0, 213, 0, 0, 214, 0, 0, 215, 334, 0,
	216, 0, 335, 217, 218, 219, 220, 221, 0, 222,
	336, 223, 337, 224, 0, 225, 226, 227, 228, 229,
	338, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 0, 245,
	246, 339, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 0, 259, 248, 249, 260, 0,
	261, 341, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 343, 266, 344, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 346, 347, 0, 0,
	277, 278, 348, 349, 0, 279, 280, 281, 282, 0,
	0, 283, 284, 285, 286, 0, 287, 0, 350, 288,
	289, 290, 351, 352, 140, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 0, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 153, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 1744, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	140, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 146,
	147, 148, 298, 299, 300, 301, 149, 302, 303, 0,
	150, 304, 305, 151, 152, 0, 0, 306, 307, 308,
	0, 153, 309, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 355, 165,
	310, 166, 311, 312, 0, 167, 0, 168, 0, 169,
	0, 0, 170, 171, 0, 172, 0, 0, 0, 313,
	173, 174, 175, 314, 315, 0, 0, 0, 176, 177,
	316, 317, 318, 0, 178, 0, 179, 0, 0, 0,
	0, 180, 319, 0, 320, 0, 181, 182, 183, 184,
	1739, 322, 0, 0, 188, 0, 185, 0, 0, 186,
	323, 187, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 189, 190, 191, 0, 192, 193, 194, 0, 196,
	195, 0, 330, 0, 197, 0, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 0,
	206, 207, 209, 208, 0, 0, 0, 332, 210, 333,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 0, 216, 0, 335, 217, 218, 219, 220, 221,
	0, 222, 336, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 338, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	0, 245, 246, 339, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 0, 259, 248, 249,
	260, 0, 261, 341, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 343, 266, 344, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 346, 347,
	0, 0, 277, 278, 348, 349, 0, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 0, 287, 0,
	350, 288, 289, 290, 351, 352, 140, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 146, 147, 148, 298, 299,
	300, 301, 149, 302, 303, 0, 150, 304, 305, 151,
	152, 0, 0, 306, 307, 308, 0, 153, 309, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 355, 165, 310, 166, 311, 312,
	0, 167, 0, 168, 0, 169, 0, 0, 170, 171,
	0, 172, 0, 0, 0, 313, 173, 174, 175, 314,
	315, 0, 0, 0, 176, 177, 316, 317, 318, 0,
	178, 0, 179, 0, 0, 0, 0, 180, 319, 0,
	320, 0, 181, 182, 183, 184, 321, 322, 0, 0,
	188, 0, 185, 0, 0, 186, 323, 187, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 189, 190, 191,
	0, 192, 193, 194, 0, 196, 195, 0, 330, 0,
	197, 0, 0, 198, 199, 0, 0, 200, 0, 201,
	202, 203, 205, 331, 204, 0, 206, 207, 209, 208,
	0, 0, 0, 332, 210, 333, 211, 212, 0, 213,
	0, 0, 214, 0, 0, 215, 334, 0, 216, 0,
	335, 217, 218, 219, 220, 221, 0, 222, 336, 223,
	337, 224, 0, 225, 226, 227, 228, 229, 338, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 243, 0, 244, 0, 245, 246, 339,
	247, 0, 503, 252, 253, 254, 0, 256, 340, 255,
	257, 258, 0, 259, 248, 249, 260, 0, 261, 341,
	342, 262, 0, 268, 263, 264, 250, 265, 267, 343,
	266, 344, 0, 269, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 345, 346, 347, 0, 0, 277, 278,
	348, 349, 0, 279, 280, 281, 282, 0, 0, 283,
	284, 285, 286, 0, 287, 0, 350, 288, 289, 290,
	351, 352, 140, 0, 291, 0, 0, 0, 0, 292,
	293, 294, 295, 296, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 297, 0, 0, 0,
	0, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 0, 306,
	307, 308, 0, 153, 309, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 310, 166, 311, 312, 0, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 0, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 0, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 1128, 322, 0, 0, 188, 0, 185, 0,
	0, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 189, 190, 191, 0, 192, 193, 194,
	0, 196, 195, 0, 330, 0, 197, 0, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 0, 206, 207, 209, 208, 0, 0, 0, 332,
	210, 333, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 0, 216, 0, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 0, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 0, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	346, 347, 0, 0, 277, 278, 348, 349, 0, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 351, 352, 140, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 297, 0, 927, 0, 0, 146, 147, 148,
	298, 299, 300, 301, 149, 302, 303, 0, 150, 304,
	305, 151, 152, 0, 0, 306, 307, 308, 0, 153,
	309, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 355, 165, 310, 166,
	311, 312, 0, 167, 0, 168, 0, 169, 0, 0,
	170, 171, 0, 172, 0, 0, 0, 313, 173, 174,
	175, 314, 315, 0, 0, 0, 176, 177, 316, 317,
	318, 0, 178, 0, 179, 0, 0, 0, 0, 180,
	319, 0, 320, 0, 181, 182, 183, 184, 321, 322,
	0, 0, 188, 0, 185, 0, 0, 186, 323, 187,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 189,
	190, 191, 0, 192, 193, 194, 0, 196, 195, 0,
	330, 0, 197, 0, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 0, 206, 207,
	209, 208, 0, 0, 0, 332, 210, 333, 211, 212,
	0, 213, 0, 0, 214, 0, 0, 215, 334, 0,
	216, 0, 335, 217, 218, 219, 220, 221, 0, 222,
	336, 223, 337, 224, 0, 225, 226, 227, 228, 229,
	338, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 0, 245,
	246, 339, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 0, 0, 248, 249, 260, 0,
	261, 341, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 343, 266, 344, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 346, 347, 0, 0,
	277, 278, 348, 349, 0, 279, 280, 281, 282, 0,
	0, 283, 284, 285, 286, 0, 287, 0, 350, 288,
	289, 290, 351, 352, 140, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 0, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 153, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 872, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	140, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 146,
	147, 148, 298, 299, 300, 301, 149, 302, 303, 0,
	150, 304, 305, 151, 152, 0, 0, 306, 307, 308,
	0, 153, 309, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 355, 165,
	310, 166, 311, 312, 0, 167, 0, 168, 0, 169,
	0, 0, 170, 171, 0, 172, 0, 0, 0, 313,
	173, 174, 175, 314, 315, 0, 0, 0, 176, 177,
	316, 317, 318, 0, 178, 0, 179, 0, 0, 0,
	0, 180, 319, 0, 320, 0, 181, 182, 183, 184,
	817, 322, 0, 0, 188, 0, 185, 0, 0, 186,
	323, 187, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 189, 190, 191, 0, 192, 193, 194, 0, 196,
	195, 0, 330, 0, 197, 0, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 0,
	206, 207, 209, 208, 0, 0, 0, 332, 210, 333,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 0, 216, 0, 335, 217, 218, 219, 220, 221,
	0, 222, 336, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 338, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	0, 245, 246, 339, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 0, 259, 248, 249,
	260, 0, 261, 341, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 343, 266, 344, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 346, 347,
	0, 0, 277, 278, 348, 349, 0, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 0, 287, 0,
	350, 288, 289, 290, 351, 352, 140, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 146, 147, 148, 298, 299,
	300, 301, 149, 302, 303, 0, 150, 304, 305, 151,
	152, 0, 0, 306, 307, 308, 0, 153, 309, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 355, 165, 310, 166, 311, 312,
	0, 167, 0, 168, 0, 169, 0, 0, 170, 171,
	0, 172, 0, 0, 0, 313, 173, 174, 175, 314,
	315, 0, 0, 0, 176, 177, 316, 317, 318, 0,
	178, 0, 179, 0, 0, 0, 0, 180, 319, 0,
	320, 0, 181, 182, 183, 184, 815, 322, 0, 0,
	188, 0, 185, 0, 0, 186, 323, 187, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 189, 190, 191,
	0, 192, 193, 194, 0, 196, 195, 0, 330, 0,
	197, 0, 0, 198, 199, 0, 0, 200, 0, 201,
	202, 203, 205, 331, 204, 0, 206, 207, 209, 208,
	0, 0, 0, 332, 210, 333, 211, 212, 0, 213,
	0, 0, 214, 0, 0, 215, 334, 0, 216, 0,
	335, 217, 218, 219, 220, 221, 0, 222, 336, 223,
	337, 224, 0, 225, 226, 227, 228, 229, 338, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 243, 0, 244, 0, 245, 246, 339,
	247, 0, 251, 252, 253, 254, 0, 256, 340, 255,
	257, 258, 0, 259, 248, 249, 260, 0, 261, 341,
	342, 262, 0, 268, 263, 264, 250, 265, 267, 343,
	266, 344, 0, 269, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 345, 346, 347, 0, 0, 277, 278,
	348, 349, 0, 279, 280, 281, 282, 0, 0, 283,
	284, 285, 286, 0, 287, 0, 350, 288, 289, 290,
	351, 352, 140, 0, 291, 0, 0, 0, 0, 292,
	293, 294, 295, 296, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 297, 0, 0, 0,
	0, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 0, 306,
	307, 308, 0, 153, 309, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 310, 166, 311, 312, 0, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 0, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 0, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 811, 322, 0, 0, 188, 0, 185, 0,
	0, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 189, 190, 191, 0, 192, 193, 194,
	0, 196, 195, 0, 330, 0, 197, 0, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	204, 0, 206, 207, 209, 208, 0, 0, 0, 332,
	210, 333, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 0, 216, 0, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 0, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 0, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 345,
	346, 347, 0, 0, 277, 278, 348, 349, 0, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 351, 352, 140, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 297, 0, 0, 0, 0, 146, 147, 148,
	298, 299, 300, 301, 149, 302, 303, 0, 150, 304,
	305, 151, 152, 0, 0, 306, 307, 308, 0, 153,
	309, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 355, 165, 310, 166,
	311, 312, 0, 167, 0, 168, 0, 169, 0, 0,
	170, 171, 0, 172, 0, 0, 0, 313, 173, 174,
	175, 314, 315, 0, 0, 0, 176, 177, 316, 317,
	318, 0, 178, 0, 179, 0, 0, 0, 0, 180,
	319, 0, 320, 0, 181, 182, 183, 184, 809, 322,
	0, 0, 188, 0, 185, 0, 0, 186, 323, 187,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 189,
	190, 191, 0, 192, 193, 194, 0, 196, 195, 0,
	330, 0, 197, 0, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 0, 206, 207,
	209, 208, 0, 0, 0, 332, 210, 333, 211, 212,
	0, 213, 0, 0, 214, 0, 0, 215, 334, 0,
	216, 0, 335, 217, 218, 219, 220, 221, 0, 222,
	336, 223, 337, 224, 0, 225, 226, 227, 228, 229,
	338, 230, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 0, 245,
	246, 339, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 0, 259, 248, 249, 260, 0,
	261, 341, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 343, 266, 344, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 346, 347, 0, 0,
	277, 278, 348, 349, 0, 279, 280, 281, 282, 0,
	0, 283, 284, 285, 286, 0, 287, 0, 350, 288,
	289, 290, 351, 352, 140, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 0, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 153, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 806, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 199, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 204, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 339, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 257, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 345, 346, 347, 0, 0, 277, 278, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	140, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 146,
	147, 148, 298, 299, 300, 301, 149, 302, 303, 0,
	150, 304, 305, 151, 152, 0, 0, 306, 307, 308,
	0, 153, 309, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 355, 165,
	310, 166, 311, 312, 0, 167, 0, 168, 0, 169,
	0, 0, 170, 171, 0, 172, 0, 0, 0, 313,
	173, 174, 175, 314, 315, 0, 0, 0, 176, 177,
	316, 317, 318, 0, 178, 0, 179, 0, 0, 0,
	0, 180, 319, 0, 320, 0, 181, 182, 183, 184,
	802, 322, 0, 0, 188, 0, 185, 0, 0, 186,
	323, 187, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 189, 190, 191, 0, 192, 193, 194, 0, 196,
	195, 0, 330, 0, 197, 0, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 0,
	206, 207, 209, 208, 0, 0, 0, 332, 210, 333,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 0, 216, 0, 335, 217, 218, 219, 220, 221,
	0, 222, 336, 223, 337, 224, 0, 225, 226, 227,
	228, 229, 338, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	0, 245, 246, 339, 247, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 0, 259, 248, 249,
	260, 0, 261, 341, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 343, 266, 344, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 346, 347,
	0, 0, 277, 278, 348, 349, 0, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 0, 287, 0,
	350, 288, 289, 290, 351, 352, 140, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 146, 147, 148, 298, 299,
	300, 301, 149, 302, 303, 0, 150, 304, 305, 151,
	152, 0, 0, 306, 307, 308, 0, 153, 309, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 355, 165, 310, 166, 311, 312,
	0, 167, 0, 168, 0, 169, 0, 0, 170, 171,
	0, 172, 0, 0, 0, 313, 173, 174, 175, 314,
	315, 0, 0, 0, 176, 177, 316, 317, 318, 0,
	178, 0, 179, 0, 0, 0, 0, 180, 319, 0,
	320, 0, 181, 182, 183, 184, 797, 322, 0, 0,
	188, 0, 185, 0, 0, 186, 323, 187, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 189, 190, 191,
	0, 192, 193, 194, 0, 196, 195, 0, 330, 0,
	197, 0, 0, 198, 199, 0, 0, 200, 0, 201,
	202, 203, 205, 331, 204, 0, 206, 207, 209, 208,
	0, 0, 0, 332, 210, 333, 211, 212, 0, 213,
	0, 0, 214, 0, 0, 215, 334, 0, 216, 0,
	335, 217, 218, 219, 220, 221, 0, 222, 336, 223,
	337, 224, 0, 225, 226, 227, 228, 229, 338, 230,
	231, 0, 232, 233, 234, 235, 236, 238, 239, 237,
	240, 241, 242, 243, 0, 244, 0, 245, 246, 339,
	247, 0, 251, 252, 253, 254, 0, 256, 340, 255,
	257, 258, 0, 259, 248, 249, 260, 0, 261, 341,
	342, 262, 0, 268, 263, 264, 250, 265, 267, 343,
	266, 344, 0, 269, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 345, 346, 347, 0, 0, 277, 278,
	348, 349, 0, 279, 280, 281, 282, 0, 0, 283,
	284, 285, 286, 0, 287, 0, 350, 288, 289, 290,
	351, 352, 140, 0, 291, 0, 0, 0, 0, 292,
	293, 294, 295, 296, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 297, 0, 0, 0,
	0, 146, 147, 148, 298, 299, 300, 301, 149, 302,
	303, 0, 150, 304, 305, 151, 152, 0, 0, 306,
	307, 773, 0, 153, 309, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	355, 165, 310, 166, 311, 312, 0, 167, 0, 168,
	0, 169, 0, 0, 170, 171, 0, 172, 0, 0,
	0, 313, 173, 174, 175, 314, 315, 0, 0, 0,
	176, 177, 316, 317, 318, 0, 178, 0, 179, 0,
	0, 0, 0, 180, 319, 0, 320, 0, 181, 182,
	183, 184, 321, 322, 0, 0, 188, 0, 185, 0,
	0, 186, 323, 187, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 189, 190, 191, 0, 192, 193, 194,
	0, 196, 195, 0, 330, 0, 197, 0, 0, 198,
	199, 0, 0, 200, 0, 201, 202, 203, 205, 331,
	525, 0, 206, 207, 209, 208, 0, 0, 0, 332,
	210, 333, 211, 212, 0, 213, 0, 0, 214, 0,
	0, 215, 334, 0, 216, 0, 335, 217, 218, 219,
	220, 221, 0, 222, 336, 223, 337, 224, 0, 225,
	226, 227, 228, 229, 338, 230, 231, 0, 232, 233,
	234, 235, 236, 238, 239, 237, 240, 241, 242, 243,
	0, 244, 0, 245, 246, 339, 247, 0, 251, 252,
	253, 254, 0, 256, 340, 255, 257, 258, 0, 259,
	248, 249, 260, 0, 261, 341, 342, 262, 0, 268,
	263, 264, 250, 265, 267, 343, 266, 344, 0, 269,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 521,
	346, 347, 0, 0, 277, 774, 348, 349, 0, 279,
	280, 281, 282, 0, 0, 283, 284, 285, 286, 0,
	287, 0, 350, 288, 289, 290, 351, 352, 140, 0,
	291, 0, 0, 0, 0, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 297, 0, 0, 0, 0, 146, 147, 148,
	298, 299, 300, 301, 149, 302, 303, 0, 150, 304,
	305, 151, 152, 0, 0, 306, 307, 308, 0, 153,
	309, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 355, 165, 310, 166,
	311, 312, 0, 167, 0, 168, 0, 169, 0, 0,
	170, 171, 0, 172, 0, 0, 0, 313, 173, 174,
	175, 314, 315, 0, 0, 0, 176, 177, 316, 317,
	318, 0, 178, 0, 179, 0, 0, 0, 0, 180,
	319, 0, 320, 0, 181, 182, 183, 184, 321, 322,
	0, 0, 188, 0, 185, 0, 0, 186, 323, 187,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 189,
	190, 191, 0, 192, 193, 194, 0, 196, 195, 0,
	330, 0, 197, 0, 0, 198, 199, 0, 0, 200,
	0, 201, 202, 203, 205, 331, 204, 0, 206, 207,
	209, 208, 0, 0, 0, 332, 210, 333, 211, 212,
	0, 213, 0, 0, 214, 0, 0, 215, 334, 0,
	216, 0, 335, 217, 218, 219, 220, 221, 0, 222,
	336, 223, 337, 224, 0, 225, 226, 227, 228, 229,
	338, 611, 231, 0, 232, 233, 234, 235, 236, 238,
	239, 237, 240, 241, 242, 243, 0, 244, 0, 245,
	246, 339, 247, 0, 251, 252, 253, 254, 0, 256,
	340, 255, 257, 258, 0, 259, 248, 249, 260, 0,
	261, 341, 342, 262, 0, 268, 263, 264, 250, 265,
	267, 343, 266, 344, 0, 269, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 345, 346, 347, 0, 0,
	277, 278, 348, 349, 0, 279, 280, 281, 282, 0,
	0, 283, 284, 285, 286, 0, 287, 0, 350, 288,
	289, 290, 351, 352, 140, 0, 291, 0, 0, 0,
	0, 292, 293, 294, 295, 296, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 297, 0,
	0, 0, 0, 146, 147, 148, 298, 299, 300, 301,
	149, 302, 303, 0, 150, 304, 305, 151, 152, 0,
	0, 306, 307, 308, 0, 515, 309, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 355, 165, 310, 166, 311, 312, 0, 167,
	0, 168, 0, 169, 0, 0, 170, 171, 0, 172,
	0, 0, 0, 313, 173, 174, 175, 314, 315, 0,
	0, 0, 176, 177, 316, 317, 318, 0, 178, 0,
	179, 0, 0, 0, 0, 180, 319, 0, 320, 0,
	181, 182, 183, 184, 321, 322, 0, 0, 188, 0,
	185, 0, 0, 186, 323, 187, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 189, 190, 191, 0, 192,
	193, 194, 0, 196, 195, 0, 330, 0, 197, 0,
	0, 198, 514, 0, 0, 200, 0, 201, 202, 203,
	205, 331, 525, 0, 206, 207, 209, 208, 0, 0,
	0, 332, 210, 333, 211, 212, 0, 213, 0, 0,
	214, 0, 0, 215, 334, 0, 216, 0, 335, 217,
	218, 219, 220, 221, 0, 222, 336, 223, 337, 224,
	0, 225, 226, 227, 228, 229, 338, 230, 231, 0,
	232, 233, 234, 235, 236, 238, 239, 237, 240, 241,
	242, 243, 0, 244, 0, 245, 246, 516, 247, 0,
	251, 252, 253, 254, 0, 256, 340, 255, 517, 258,
	0, 259, 248, 249, 260, 0, 261, 341, 342, 262,
	0, 268, 263, 264, 250, 265, 267, 343, 266, 344,
	0, 269, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 521, 346, 347, 0, 0, 277, 519, 348, 349,
	0, 279, 280, 281, 282, 0, 0, 283, 284, 285,
	286, 0, 287, 0, 350, 288, 289, 290, 351, 352,
	140, 0, 291, 0, 0, 0, 0, 292, 293, 294,
	295, 296, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 146,
	147, 148, 298, 299, 300, 301, 149, 302, 303, 0,
	150, 304, 305, 151, 152, 0, 0, 306, 307, 308,
	0, 153, 309, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 355, 165,
	310, 166, 311, 312, 0, 167, 0, 168, 0, 169,
	0, 0, 170, 171, 0, 172, 0, 0, 0, 313,
	173, 174, 175, 314, 315, 0, 0, 0, 176, 177,
	316, 317, 318, 0, 178, 0, 179, 0, 0, 0,
	0, 180, 319, 0, 320, 0, 181, 182, 183, 184,
	321, 322, 0, 0, 188, 0, 185, 0, 0, 186,
	323, 187, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 189, 190, 191, 0, 192, 193, 194, 0, 196,
	195, 0, 330, 0, 197, 0, 0, 198, 199, 0,
	0, 200, 0, 201, 202, 203, 205, 331, 204, 0,
	206, 207, 209, 208, 0, 0, 0, 332, 210, 333,
	211, 212, 0, 213, 0, 0, 214, 0, 0, 215,
	334, 0, 216, 0, 335, 217, 218, 0, 220, 221,
	0, 222, 336, 223, 337, 224, 0, 225, 226, 227,
	0, 229, 338, 230, 231, 0, 232, 233, 234, 235,
	236, 238, 239, 237, 240, 241, 242, 243, 0, 244,
	0, 245, 246, 339, 0, 0, 251, 252, 253, 254,
	0, 256, 340, 255, 257, 258, 0, 259, 248, 249,
	260, 0, 261, 341, 342, 262, 0, 268, 263, 264,
	250, 265, 267, 343, 266, 344, 0, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 345, 346, 347,
	0, 0, 277, 278, 348, 349, 0, 279, 280, 281,
	282, 0, 0, 283, 284, 285, 286, 0, 287, 0,
	350, 288, 289, 290, 351, 352, 0, 0, 291, 0,
	0, 0, 0, 292, 293, 294, 295, 296, 934, 935,
	0, 954, 955, 956, 964, 965, 966, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 968, 0, 934, 935, 0, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 936, 0, 0, 0, 937,
	0, 951, 968, 0, 934, 935, 0, 954, 955, 956,
	964, 965, 966, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 936, 0, 0, 0, 937, 0, 951,
	968, 0, 0, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 936, 0, 0, 0, 942, 937, 951, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 969, 0, 0, 0, 0,
	936, 0, 0, 942, 0, 0, 951, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 969, 0, 0, 0, 959, 0, 0,
	0, 942, 0, 0, 952, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 969, 0, 0, 0, 959, 0, 0, 0, 958,
	942, 0, 952, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	969, 0, 0, 959, 0, 0, 0, 958, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 959, 0, 0, 958, 0, 0, 0, 952,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 953, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 962, 0,
	0, 0, 0, 0, 1625, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 2197,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 0, 0, 2153, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 948, 949,
	950, 963, 0, 947, 945, 946, 938, 939, 940, 941,
	943, 944, 0, 0, 934, 935, 2114, 954, 955, 956,
	964, 965, 966, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	968, 0, 934, 935, 0, 954, 955, 956, 964, 965,
	966, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 936, 0, 0, 0, 937, 0, 951, 968, 0,
	934, 935, 0, 954, 955, 956, 964, 965, 966, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 936,
	0, 0, 0, 937, 0, 951, 968, 0, 0, 934,
	935, 0, 954, 955, 956, 964, 965, 966, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 936, 0, 0,
	0, 942, 937, 951, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 969, 0, 0, 0, 0, 936, 0, 0, 942,
	0, 0, 951, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 969,
	0, 0, 0, 959, 0, 0, 0, 942, 0, 0,
	952, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 969, 0, 0,
	0, 959, 0, 0, 0, 958, 942, 0, 952, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 969, 0, 0, 959,
	0, 0, 0, 958, 0, 0, 952, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 959, 0,
	0, 958, 0, 0, 0, 952, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 953, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 962, 0, 0, 2088, 0, 0,
	0, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 0, 0, 2083, 0, 0, 0, 0,
	0, 0, 960, 0, 0, 948, 949, 950, 963, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 0,
	0, 0, 0, 2079, 0, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 948, 949, 950, 963, 0, 947,
	945, 946, 938, 939, 940, 941, 943, 944, 0, 0,
	934, 935, 2026, 954, 955, 956, 964, 965, 966, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 968, 0, 934, 935,
	0, 954, 955, 956, 964, 965, 966, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 936, 0, 0,
	0, 937, 0, 951, 968, 0, 934, 935, 0, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 936, 0, 0, 0, 937,
	0, 951, 968, 0, 0, 934, 935, 0, 954, 955,
	956, 964, 965, 966, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 936, 0, 0, 0, 942, 937, 951,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 969, 0, 0,
	0, 0, 936, 0, 0, 942, 0, 0, 951, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 969, 0, 0, 0, 959,
	0, 0, 0, 942, 0, 0, 952, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 969, 0, 0, 0, 959, 0, 0,
	0, 958, 942, 0, 952, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 969, 0, 0, 959, 0, 0, 0, 958,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 959, 0, 0, 958, 0, 0,
	0, 952, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 960, 0, 953, 948, 949, 950, 963, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 0,
	962, 0, 0, 1997, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 1996, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 1917,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	948, 949, 950, 963, 0, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 0, 0, 934, 935, 1836, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 968, 0, 934, 935, 0, 954, 955, 956,
	964, 965, 966, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 936, 0, 0, 0, 937, 0, 951,
	968, 0, 934, 935, 0, 954, 955, 956, 964, 965,
	966, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 936, 0, 0, 0, 937, 0, 951, 968, 0,
	0, 0, 0, 0, 0, 0, 934, 935, 0, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 936,
	0, 0, 957, 942, 0, 951, 0, 0, 0, 937,
	0, 0, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 969, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 936, 0, 0, 0, 0, 0, 951,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 969, 0, 0, 0, 959, 0, 0, 0, 942,
	0, 0, 952, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 969,
	0, 0, 0, 959, 0, 0, 0, 958, 0, 0,
	952, 0, 0, 942, 2251, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 961, 969, 0, 958, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 959, 0, 0, 0, 0,
	0, 962, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 2250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 953, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 1812,
	0, 962, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 124, 0, 1595, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 119, 0, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 110, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 41, 0, 111, 0, 0,
	0, 0, 0, 0, 934, 935, 0, 954, 955, 956,
	964, 965, 966, 0, 0, 0, 0, 48, 0, 0,
	957, 50, 0, 0, 0, 113, 0, 937, 122, 0,
	968, 0, 56, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 58, 0, 0, 0, 0, 951, 59, 0,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 1478, 0, 937, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 942, 0, 1665, 951, 0, 1664, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 1479, 0, 0, 0, 62, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 69, 70, 63, 942, 64,
	952, 65, 0, 123, 0, 0, 0, 0, 66, 0,
	0, 0, 127, 0, 0, 0, 0, 961, 969, 76,
	0, 0, 118, 0, 0, 958, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 967, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 952, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 953, 0, 0, 130, 0, 0, 0,
	0, 0, 958, 0, 125, 0, 0, 0, 0, 962,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1211, 0, 0, 0, 0, 0, 934, 935,
	953, 954, 955, 956, 964, 965, 966, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 962, 0, 1210, 0,
	0, 937, 0, 0, 968, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 936, 0, 0, 0, 0,
	0, 951, 0, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 968,
	0, 0, 0, 960, 0, 0, 948, 949, 950, 963,
	0, 947, 945, 946, 938, 939, 940, 941, 943, 944,
	936, 0, 0, 0, 0, 942, 951, 0, 0, 0,
	0, 0, 0, 0, 934, 935, 0, 954, 955, 956,
	964, 965, 966, 0, 961, 969, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	968, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	942, 936, 0, 0, 952, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 952,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	961, 969, 0, 0, 958, 550, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 935, 953, 954, 955, 956, 964, 965, 966,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 962,
	0, 0, 0, 0, 937, 960, 0, 968, 948, 949,
	950, 963, 0, 947, 945, 946, 938, 939, 940, 941,
	943, 944, 0, 0, 1816, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 951, 0, 934, 935, 0, 954,
	955, 956, 964, 965, 966, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 1666, 0, 0, 937,
	0, 0, 968, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 936, 0, 0, 0, 0, 942, 951,
	0, 0, 0, 1671, 0, 0, 0, 934, 935, 0,
	954, 955, 956, 964, 965, 966, 0, 961, 969, 0,
	0, 0, 0, 957, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 968, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 942, 936, 0, 0, 952, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 952, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 961, 969, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1631, 0, 960, 0, 0, 948, 949, 950, 963,
	0, 947, 945, 946, 938, 939, 940, 941, 943, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 935, 953, 954, 955, 956,
	964, 965, 966, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 962, 0, 1624, 0, 0, 937, 960, 0,
	968, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 951, 0, 934,
	935, 0, 954, 955, 956, 964, 965, 966, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 968, 0, 0, 0, 960,
	0, 0, 948, 949, 950, 963, 0, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 936, 0, 0, 0,
	0, 942, 951, 0, 0, 0, 0, 0, 0, 0,
	934, 935, 0, 954, 955, 956, 964, 965, 966, 0,
	961, 969, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 968, 0, 967, 934,
	935, 0, 954, 955, 956, 964, 965, 966, 0, 0,
	0, 0, 0, 959, 0, 0, 942, 936, 0, 0,
	952, 0, 937, 951, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 936, 0, 0, 0,
	0, 0, 951, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 952, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 961, 969, 0, 0,
	958, 0, 0, 0, 0, 0, 942, 0, 0, 962,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 969, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 952, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 962, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 960, 0, 0, 948, 949, 950, 963, 953, 947,
	945, 946, 938, 939, 940, 941, 943, 944, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 934, 935, 0, 954, 955, 956, 964, 965,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 968, 0,
	0, 0, 960, 0, 0, 948, 949, 950, 963, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 936,
	0, 0, 0, 0, 0, 951, 0, 0, 0, 0,
	0, 960, 0, 0, 948, 949, 950, 963, 0, 947,
	945, 946, 938, 939, 940, 941, 943, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 1049, 1078, 1041, 1069, 1068, 961, 969,
	1043, 1042, 0, 0, 0, 0, 1080, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 952, 1074,
	0, 1066, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	1061, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	1051, 1053, 1054, 1055, 1056, 1057, 0, 1077, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 1270, 1268, 1269, 1272, 1271,
	0, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 1046, 1059, 1049, 1078, 1041, 1069, 1068, 0, 0,
	1043, 1042, 1058, 1047, 0, 0, 1080, 1079, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 1075, 1076, 0,
	0, 0, 508, 0, 0, 0, 0, 0, 0, 1074,
	0, 1066, 1065, 0, 0, 0, 0, 0, 0, 1048,
	577, 1064, 0, 0, 1081, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 0, 0, 0, 0, 1063,
	1061, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 0, 0, 578, 0,
	0, 0, 0, 584, 585, 0, 0, 594, 0, 1052,
	1051, 1053, 1054, 1055, 1056, 1057, 0, 1077, 0, 0,
	510, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 1045, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 1050, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 588, 0, 0, 583, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 1046, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 1075, 1076, 0,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1048,
	0, 0, 0, 0, 1081, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 591, 512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 596, 0, 0, 0, 513,
	0, 0, 0, 0, 589, 593, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595,
}
var sqlPact = [...]int{

	29858, -1000, 12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18080, -1000,
	-1000, 22188, -1000, -1000, -1000, -1000, -1000, -1000, 21872, 787,
	1045, -1000, -1000, -1000, -1000, -1000, 22188, 2628, 1199, 5767,
	-1000, 1222, 22188, 18080, 1214, 1199, 23452, -1000, -1000, 23452,
	905, -1000, -1000, -1000, -1000, -1000, 27560, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 647, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	946, 721, 140, 802, -1000, 794, -15, 14882, 31718, 507,
	514, 507, 507, 524, 720, 27244, 22188, 1597, 10, -1000,
	338, 15839, 29858, 614, 5, 18712, 22188, -1000, 14, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 343, 14, -1000, -1000, 21556, -1000, 1400,
	1229, 1226, 20292, -1000, -1000, -1000, -1000, -1000, 346, -1000,
	13568, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 999, -1000, 6, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11226, 345, 1399,
	11226, 997, -1000, 22188, -1000, -1000, -1000, 1283, -1000, -1000,
	-1000, -1000, -1000, 426, 1762, 718, 344, 26928, -1000, 967,
	-1000, 425, 621, -1000, -1000, 14554, 19, 20292, -1000, 11226,
	11226, 26612, 22188, 22188, 1253, 26296, -1000, 794, -1000, -1000,
	25980, 25664, 25348, 25032, 24716, -1000, 1125, 1594, 1594, 1594,
	1603, 113, 102, 140, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1721, -1000, -1000, -1000, -1000, 1743, -1000,
	-1000, -1000, -1000, -1000, 1283, 17764, 896, 1576, 1389, -1000,
	993, 1388, 1386, 1377, 1376, 1368, -1000, 790, -1000, 1409,
	526, -1000, 1366, 809, 499, -1000, 1365, 1361, 967, -1000,
	967, -1000, -1000, -1000, 606, 23452, 21240, 24400, 22188, 20924,
	1, 22188, -1000, 342, 1, 9861, 9861, -1000, -1000, 338,
	-1000, 9179, 1268, 381, -187, 117, 415, -1000, 15199, 17120,
	-1000, 17764, 18712, 5, -48, -1000, -1000, -1000, 5439, 690,
	16159, 14, -1000, -1000, -1000, -1000, -1000, 20292, 22188, 22188,
	732, 24084, 184, -1000, 11226, 3, -1000, -1000, 338, 18080,
	1228, 30979, -1000, 11226, 11226, 11226, 11226, 11226, 886, 384,
	-1000, 334, 333, 6437, -1000, -1000, 1742, -1000, -1000, -1000,
	111, -1000, -1000, 11226, 14, -1000, -1000, -1000, -1000, 329,
	1758, -1000, 454, -1000, -1000, -1000, 432, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1408, 325, 324, 323,
	-1000, -1000, -1000, -1000, 320, 319, 318, 310, 305, 304,
	301, 299, 295, 294, 291, 290, 288, 284, 282, 863,
	-1000, 451, -1000, -1000, 451, 451, -1000, 248, 248, 249,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 248, -1000,
	-1000, -1000, 421, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	279, 1663, 31645, 17764, 30979, 18080, -1000, -1000, -1000, -1000,
	22188, 11226, -1000, 1630, 967, -5, -1000, -1000, -1000, -1000,
	1149, 1210, 553, 1201, 14226, 13898, 1521, -1000, -1000, -1000,
	18, 5767, 120, -1000, 30979, 30979, 276, 1105, 434, 122,
	23768, 434, 1104, -1000, 1125, 114, 1472, -1000, 114, 1468,
	112, 1467, -1000, -121, -1000, 1466, -48, 1463, -1000, 1016,
	1216, 10544, 1203, 11226, 140, -1000, -1000, 140, 140, 7461,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20608,
	-1000, -1000, 707, 22188, 1407, 18080, 22188, 22188, 22188, 22188,
	22188, -1000, -1000, 149, 1406, 22188, 1145, -1000, -1000, 22188,
	22188, 795, 643, -1000, -5, -1000, 23452, -1000, 862, 1462,
	496, 827, 1461, 830, 826, 1459, 22188, 1, 1629, 22188,
	63, -1000, 30218, -1000, 63, -1000, -6, -1000, 30979, -1000,
	1209, 1208, 15839, 1205, 945, 945, 945, -1000, 265, 362,
	415, 4769, 11226, -1000, 19976, 948, 37, 104, 1268, -1000,
	22188, 411, -1000, 22188, -1000, -1000, -1000, 1353, -8, -1000,
	-1000, 445, 92, 1628, 92, 16480, -1000, 22188, -14, 30979,
	2297, 19028, 604, -1000, 31425, 31645, 5767, 630, 11226, 11226,
	11226, 11226, 11226, 11226, 11226, 11226, 11226, 11226, 11226, 11226,
	11226, 11226, 11226, 11226, 11226, 11226, 11226, 11226, 11226, 11226,
	968, 11226, 596, 11226, 11226, 11226, 11226, 1536, 914, 228,
	961, -1000, 1703, 1703, 1703, 31069, 31069, 198, 384, -1000,
	11226, -1000, 10203, 102, 29504, -1, -1000, -1000, -1000, 7802,
	449, 30979, 14, 6095, -1000, 1741, 691, 1417, 1298, 252,
	100, 99, 98, 11226, 11226, 11908, 11908, 11226, 12249, 11226,
	11226, 6778, 11226, 11226, 11226, 11226, 11226, 11226, -1000, 250,
	-1000, -1000, -1000, -1000, 1737, -1000, -1000, 1736, -1000, 627,
	622, 1735, -15, -20, -1000, 683, -1000, -1000, -1000, -1000,
	91, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 249, 863, 248, 248, 248, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 421, -1000, -1000, 451, 451,
	451, -1000, -1000, -80, -1000, 1349, -1000, 441, -21, 502,
	-5, 967, 1099, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1757, -7, -1000, -1000,
	-7, -1000, -1000, 5767, -1000, -1000, 20292, -1000, -1000, 19344,
	1627, 1455, -1000, 868, -1000, 1626, 22188, 987, 1100, -1000,
	639, 1454, -1000, -1000, 22188, 22188, -1000, 22188, -1000, 22188,
	22188, 5767, 22188, 22188, -1000, -1000, -1000, 30979, -1000, 375,
	-1000, -1000, 30979, 761, 1238, -1000, 1238, -13, -1000, 29981,
	1196, 22188, -1000, -1000, -1000, -1000, -1000, 22188, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 138, -1000, -1000, -1000,
	-1000, 22188, 22188, 22188, -1000, -81, 883, -1000, 19660, 1581,
	1577, 1549, 20292, 1619, -15, 1348, 1618, -15, 1342, 595,
	22188, 594, 592, 20292, -1000, 245, -22, 445, 9861, 15839,
	5767, -1000, 445, 9179, -1000, 15839, 15839, 927, 1202, 15839,
	-1000, -1000, -1000, -1000, 19976, 371, 415, 19976, -1000, 1734,
	1189, -26, -1000, -1000, 22188, 244, -1000, 415, 96, 1266,
	1020, -1000, 677, 1338, 22188, 771, 11226, 866, -1000, 15519,
	457, 22188, 771, 61, -1000, -1000, -1000, 405, 22188, -1000,
	-1000, 11226, -1000, -1000, 22188, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 424, 786, 786, 658, 658,
	658, 658, 1694, 1096, 2813, 2972, 3902, 3902, 3902, 2650,
	2496, 2496, 3902, 3902, 3902, 31069, 31040, 711, 11226, 11226,
	585, 906, 228, 711, 11226, 711, 711, 711, 711, -1000,
	1081, -1000, -1000, -1000, -1000, 1330, 225, 12249, 12249, -1000,
	-1000, -1000, 6437, 12590, -1000, -1000, -1000, -1000, 222, 11226,
	-1000, 29532, -203, -27, -1000, -1000, 11226, -31, -85, -1000,
	-1000, 667, -1000, 11226, -1000, -33, 11226, 11226, 11226, 94,
	93, -1000, 582, -1000, 577, 574, 572, -1000, 221, 897,
	220, 208, 11226, -1000, -1000, -1000, 30924, 28198, 89, 1328,
	-177, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 88, 87,
	30687, -177, 86, 278, -1000, 12249, 12249, 12249, 6437, 197,
	85, 29924, -177, 30626, 9520, 9520, 9520, 84, 30571, 11226,
	-177, 4018, 3761, 3515, -32, -39, -40, 1732, -41, 83,
	420, 419, 81, -1000, -1000, 31645, -1000, 380, 555, -1000,
	1730, 435, 17764, 22188, -1000, 1206, -1000, -1000, 736, -1000,
	841, -1000, 14882, -1000, -1000, 80, -47, -18, 31645, -1000,
	-1000, -1000, -1000, -1000, 22188, 275, 22188, 22188, -1000, 188,
	1195, 1191, -15, 22188, 1755, -15, 22188, 1453, 1480, 399,
	22188, -1000, 114, 114, -1000, 112, -1000, -1000, -48, 761,
	-1000, 11226, 1729, -1000, -1000, -1000, 7461, -1000, -1000, -1000,
	22188, -180, -79, -1000, -1000, -1000, -1000, -1000, 411, 784,
	22188, 22188, 22188, -1000, -1000, 1091, 23136, 1086, 31645, 187,
	22188, 22188, 22820, 22504, 22188, 766, -15, -1000, 183, -15,
	-1000, 179, 22188, 808, 22188, 22188, 781, -15, -1000, 1294,
	-1000, -140, 1268, -1000, 1294, -1000, -1000, 927, -1000, 178,
	11226, 15839, -1000, 358, -1000, -51, -1000, 19976, -1000, 357,
	-201, -1000, 404, -1000, 415, 165, 22188, 19976, -1000, 435,
	1324, 652, -1000, 674, -1000, -1000, 7119, 30979, -1000, 771,
	1553, -56, -1000, -1000, -1000, 445, 16480, 15839, 9179, -57,
	30979, -79, 11226, 711, 711, 11226, 12249, 12249, -1000, 711,
	-1000, -1000, -1000, -1000, -1000, 1314, 164, 11226, 31645, 3967,
	3401, -58, -1000, 8838, -49, -1000, 11226, -1000, 29476, -1000,
	-1000, 379, 1476, -1000, 11226, 30334, 77, 8497, -1000, 30273,
	-37, -37, -1000, 1753, 1119, 979, 817, 741, 1726, -1000,
	16800, 446, 907, 29135, 31425, 31645, -1000, 11226, -1000, -1000,
	1312, 11226, -1000, 31425, 31645, 12249, 12249, 12249, 12249, 12249,
	12249, 12249, 12249, 12249, 12249, 12249, 12249, 12249, 12249, 12249,
	12249, 12249, 12249, 12249, 1186, 12249, 1691, 1691, 1691, -55,
	8156, -1000, 1405, 1312, 11226, 11226, 31645, 76, 75, 74,
	-1000, 11226, -177, 11226, 11226, 11226, -1000, -1000, -1000, 59,
	-1000, 1718, -1000, -1000, -1000, -1000, -1000, 1716, -1000, 355,
	58, -1000, 954, -1000, -79, -1000, -1000, -1000, -1000, -1000,
	1255, -1000, 19344, -1000, 163, 22188, 13248, 162, 840, 11226,
	161, 158, -1000, 157, -1000, -1000, 156, 22188, 1166, 399,
	18396, -1000, 434, -1000, -1000, -1000, 957, 29106, -1000, 1558,
	5767, 22188, -1000, -1000, -1000, 571, 564, 1449, -1000, 1059,
	-1000, 462, 884, -1000, 1447, 1038, 1443, 1038, -1000, -81,
	832, -1000, 11226, -1000, 11226, -1000, 559, -1000, -1000, 548,
	56, 1285, 1600, -1000, 15839, 1285, -1000, 22188, 30979, -1000,
	-187, -1000, 1712, -1000, -1000, 1189, -1000, 5108, 19976, 22188,
	-66, -1000, -1000, 17764, 619, -1000, -118, -1000, -1000, 226,
	-15, 771, -1000, -139, -1000, 403, 1638, 711, 2300, 211,
	11226, 31645, 31332, -71, 11226, 11226, -1000, -72, -1000, 11226,
	354, 30979, -1000, -1000, -1000, 30979, 11226, 1747, 11226, 55,
	53, 52, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	47, -1000, -1000, 27876, 11226, 45, -1000, 40, 38, 30979,
	1405, 30979, -1000, -1000, 527, 527, 715, 715, 715, 715,
	1691, 177, 728, 488, 223, 223, 223, 2622, 469, 469,
	223, 223, 223, 1308, 1140, 155, 3546, 11226, -97, -1000,
	-1000, -1000, 30979, 30979, 36, -1000, -1000, -1000, -177, 247,
	29078, 29050, -1000, 33, 350, -1000, -1000, 154, -1000, 1261,
	-1000, 1527, 13248, 153, -104, -1000, 312, 1569, 11226, -1000,
	-1000, 151, 22188, -1000, 28709, 13248, 22188, 19344, 1624, 13248,
	978, 1174, 399, 18396, -1000, 639, -1000, -1000, -1000, 1558,
	-1000, 22188, 22188, 22188, 1436, -1000, -1000, 1176, 1234, 492,
	22188, -1000, 22188, -1000, 22188, 22188, 22188, -106, -108, 22188,
	22188, -1000, 437, 11226, 11226, 1268, 437, -113, 415, -1000,
	-1000, -1000, 1704, -1000, -124, -1000, -152, 17448, 1490, 22188,
	1533, -1000, -1000, 150, 11226, 11226, 31332, -125, -1000, 711,
	711, -1000, 28680, -1000, 30979, -1000, 30273, -1000, -1000, -1000,
	-1000, 877, -1000, 28652, -1000, -1000, -1000, -1000, 12249, 1305,
	148, 31645, 28624, -1000, -1000, 11226, -1000, -1000, -1000, -1000,
	1752, 892, -1000, 22188, -1000, 5767, 22188, 1297, 1052, -1000,
	-1000, 1181, 143, 12249, 22188, -126, 13248, 871, 13248, 1558,
	14, 5767, 1558, 28283, 6095, -141, -1000, -142, -143, 32,
	-15, -147, 22188, -1000, 399, 18396, -1000, 1480, -1000, -1000,
	-1000, -1000, 22188, 1051, -1000, 1036, 11226, -1000, 31645, 1038,
	1038, -1000, 545, 544, 532, 530, -1000, -1000, -1000, 22188,
	30979, -177, -1000, -1000, 19976, 224, -1000, -1000, 142, 14,
	599, -151, 22188, -1000, -1000, 4426, 711, 711, -1000, -1000,
	28, 907, 1599, -1000, 4051, 12249, 31645, -153, -1000, 28254,
	-155, -1000, 262, 22188, 901, -1000, -1000, 22188, 1056, -1000,
	-1000, 11226, 3546, 139, 871, -157, 1255, 137, -1000, -1000,
	-1000, -1000, -1000, -1000, 1569, -33, -1000, -1000, 796, 1255,
	-1000, 871, 136, 18396, -1000, 1166, -1000, -1000, -1000, 30979,
	1566, -1000, -1000, 22188, 22188, 132, 131, -164, -1000, 1623,
	-1000, -1000, 11226, 730, -1000, 445, -1000, -1000, 904, 11226,
	4051, -163, -1000, -1000, 1752, -1000, -1000, 1750, 129, -1000,
	-1000, 1431, 28226, 1129, 22188, 1255, 871, -1000, 22188, 1558,
	27, 22188, -1000, 1255, 13248, -1000, 1174, 467, 5767, -1000,
	-1000, 11226, 11226, 22188, 125, -37, 16480, -1000, 26, 11567,
	11567, -177, -1000, -1000, -1000, 22188, 1421, -1000, 966, 956,
	24, -1000, 1255, -172, -1000, -1000, 122, -1000, -178, -1000,
	-1000, 11226, -1000, -182, -189, -1000, -1000, 23, -165, -1000,
	-1000, -1000, 12920, 1085, 751, 29566, -1000, -190, 22188, -1000,
	974, 972, 692, -1000, -1000, -1000, -1000, -1000, -1000, 1129,
	871, 30979, -1000, -1000, 1747, -1000, 1671, -1000, -1000, -1000,
	-1000, -1000, 975, -1000, -1000, 1499, -1000, 483, 962, 962,
	966, 1255, 10885, -1000, -1000, -1000, -1000, 1678, -1000, -1000,
	1130, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2095, 2093, 1416, 1485, 2092, 2091, 2090, 2089, 2088,
	2082, 2081, 2080, 2079, 2077, 2075, 2074, 2072, 2066, 2064,
	2063, 2062, 2061, 2059, 2058, 2056, 2054, 1479, 2050, 2048,
	2046, 2045, 2042, 2038, 1477, 2034, 1472, 2032, 2030, 2029,
	2028, 2027, 1468, 1466, 2026, 79, 108, 1462, 2025, 2024,
	1458, 2023, 2020, 2019, 2018, 2017, 2016, 2013, 53, 2011,
	2009, 2008, 2005, 2003, 2002, 2001, 141, 156, 1999, 1455,
	1997, 1995, 1994, 1993, 1992, 1991, 1990, 1987, 1986, 1983,
	1982, 1981, 1980, 1979, 1977, 1976, 1972, 1971, 153, 1970,
	1967, 1418, 1408, 1963, 1959, 15, 1955, 75, 1954, 26,
	138, 2756, 128, 1951, 1950, 1934, 1932, 24, 82, 81,
	1930, 220, 1928, 1927, 37, 19, 17, 14, 1926, 93,
	1920, 1915, 1269, 29, 1913, 1912, 125, 1911, 52, 18,
	1692, 149, 140, 103, 105, 1909, 1906, 1905, 1904, 41,
	1901, 1, 1900, 1897, 8, 73, 23, 1896, 32, 36,
	1895, 1894, 120, 1893, 71, 98, 1404, 146, 117, 28,
	1892, 72, 12, 74, 1891, 1890, 142, 31, 1889, 34,
	88, 130, 1888, 46, 154, 123, 80, 121, 109, 1887,
	1886, 1884, 99, 1883, 107, 92, 1882, 1880, 48, 1874,
	129, 134, 1873, 1872, 83, 1871, 112, 1870, 1869, 152,
	145, 106, 9, 40, 66, 11, 1403, 1394, 111, 85,
	55, 43, 1868, 2126, 25, 1028, 30, 96, 56, 44,
	97, 51, 78, 139, 20, 1867, 1866, 114, 1865, 1864,
	1863, 1862, 1861, 95, 1860, 1859, 69, 135, 76, 21,
	35, 84, 22, 50, 150, 110, 147, 101, 1856, 89,
	116, 1855, 322, 1854, 1853, 1607, 113, 1851, 1850, 1849,
	1520, 1429, 922, 810, 1848, 1847, 892, 857, 1846, 1842,
	65, 1841, 119, 104, 1840, 131, 124, 45, 1839, 115,
	61, 90, 1837, 91, 47, 0, 598, 375, 1835, 102,
	58, 1832, 1830, 1829, 1825, 27, 3, 7, 4, 5,
	6, 68, 59, 1820, 1818, 122, 86, 62, 1807, 151,
	1806, 1796, 1795, 38, 1794, 16, 1791, 13, 1790, 1789,
	10, 2, 1788, 1786, 133, 1777, 94, 1774, 1628, 1772,
	148, 1771, 1770, 1432, 33, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 7, 8, 6, 6, 6, 6,
	9, 9, 10, 16, 13, 18, 12, 12, 15, 15,
	109, 109, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 106, 106, 111,
	111, 111, 113, 113, 110, 110, 105, 105, 20, 56,
	51, 283, 283, 284, 284, 94, 94, 98, 98, 95,
	96, 96, 97, 97, 26, 26, 26, 22, 22, 23,
	24, 27, 27, 27, 27, 27, 27, 34, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 41, 41,
	39, 39, 38, 38, 37, 37, 40, 40, 158, 158,
	157, 157, 160, 160, 42, 42, 45, 45, 45, 45,
	45, 46, 46, 46, 46, 46, 46, 46, 46, 251,
	251, 250, 44, 225, 225, 47, 183, 183, 48, 48,
	48, 48, 49, 57, 324, 324, 324, 328, 328, 329,
	329, 330, 330, 330, 330, 330, 330, 330, 326, 326,
	54, 54, 93, 61, 61, 61, 61, 61, 61, 63,
	65, 62, 62, 62, 64, 64, 66, 66, 66, 66,
	67, 67, 67, 67, 68, 68, 138, 138, 276, 275,
	275, 281, 281, 281, 136, 136, 136, 136, 136, 137,
	137, 137, 274, 274, 274, 274, 282, 282, 282, 282,
	282, 282, 280, 280, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 81, 81, 88, 88, 88, 88, 88, 88,
	70, 75, 75, 75, 71, 76, 77, 78, 78, 78,
	72, 72, 80, 80, 80, 79, 85, 85, 85, 85,
	82, 82, 82, 83, 83, 86, 86, 86, 73, 74,
	87, 84, 84, 84, 43, 325, 325, 327, 327, 52,
	30, 30, 31, 31, 139, 139, 140, 140, 204, 204,
	204, 204, 141, 141, 112, 112, 112, 203, 293, 293,
	294, 294, 294, 294, 294, 294, 295, 295, 295, 295,
	295, 295, 295, 291, 291, 292, 289, 289, 290, 290,
	290, 290, 331, 331, 202, 202, 144, 144, 298, 298,
	298, 298, 296, 296, 296, 296, 296, 299, 297, 300,
	300, 300, 300, 300, 237, 237, 237, 90, 32, 118,
	118, 33, 29, 29, 187, 187, 148, 148, 242, 242,
	242, 129, 129, 107, 107, 107, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 188, 188, 189,
	189, 53, 55, 60, 89, 89, 89, 21, 21, 25,
	25, 59, 333, 333, 125, 125, 125, 125, 126, 126,
	199, 199, 200, 200, 201, 201, 201, 120, 119, 121,
	121, 28, 28, 114, 114, 115, 115, 116, 116, 117,
	117, 334, 334, 50, 50, 92, 132, 132, 196, 196,
	196, 198, 198, 197, 197, 197, 173, 173, 173, 91,
	153, 153, 162, 162, 163, 163, 248, 164, 164, 58,
	58, 101, 101, 99, 99, 99, 99, 99, 99, 100,
	100, 102, 102, 102, 102, 102, 102, 102, 104, 306,
	306, 306, 309, 309, 305, 307, 307, 308, 308, 332,
	332, 174, 174, 174, 143, 142, 142, 146, 146, 145,
	147, 147, 241, 241, 241, 171, 171, 171, 171, 190,
	190, 191, 191, 192, 192, 193, 193, 193, 194, 194,
	195, 195, 170, 170, 221, 221, 103, 103, 152, 152,
	154, 154, 211, 211, 211, 212, 212, 210, 210, 210,
	210, 243, 243, 243, 243, 243, 243, 243, 322, 322,
	322, 323, 323, 240, 240, 244, 244, 244, 244, 244,
	244, 238, 238, 238, 238, 239, 239, 249, 249, 177,
	177, 177, 177, 175, 175, 176, 176, 245, 245, 245,
	245, 172, 172, 246, 246, 246, 205, 205, 252, 252,
	252, 270, 270, 151, 151, 151, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 254, 254, 254, 254, 256, 256, 256,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 269, 269,
	269, 269, 269, 257, 257, 264, 264, 265, 265, 266,
	267, 258, 258, 259, 259, 260, 261, 268, 268, 268,
	268, 272, 272, 262, 262, 262, 262, 262, 263, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 185, 185, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 215, 215, 215,
	215, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 301, 301, 301, 301, 301, 301, 301, 303,
	303, 304, 304, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 310, 310, 311, 311, 313, 313, 314, 314,
	315, 316, 316, 316, 317, 318, 318, 312, 312, 319,
	319, 319, 320, 320, 321, 321, 321, 321, 321, 227,
	227, 227, 228, 228, 229, 235, 235, 235, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 127, 127, 127, 127, 127, 159,
	159, 224, 224, 222, 222, 222, 226, 226, 178, 178,
	271, 271, 271, 271, 271, 271, 271, 179, 179, 179,
	186, 180, 180, 181, 181, 181, 181, 181, 181, 218,
	219, 182, 182, 182, 220, 220, 230, 234, 234, 233,
	232, 232, 231, 231, 208, 208, 209, 209, 207, 206,
	167, 167, 166, 166, 165, 165, 335, 335, 236, 236,
	168, 168, 169, 161, 161, 247, 247, 247, 247, 155,
	155, 134, 134, 156, 156, 130, 130, 133, 133, 131,
	131, 131, 131, 149, 149, 150, 150, 128, 128, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	273, 273, 273, 223, 122, 122, 122, 123, 123, 124,
	124, 278, 278, 278, 279, 279, 279, 279, 277, 277,
	277, 277, 277, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 6, 6, 6, 5, 5, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 7, 6,
	1, 1, 1, 1, 3, 3, 0, 2, 0, 2,
	1, 3, 5, 0, 4, 6, 7, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 6, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 4, 6,
	4, 6, 4, 6, 3, 5, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 2, 1, 1, 1, 1, 1, 3, 4,
	5, 3, 2, 6, 3, 4, 3, 3, 3, 3,
	1, 3, 3, 1, 2, 2, 1, 0, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 1, 1, 1, 1, 1, 2,
	3, 4, 4, 4, 4, 2, 4, 4, 4, 4,
	4, 4, 2, 3, 3, 2, 4, 5, 4, 5,
	2, 3, 3, 4, 2, 4, 3, 3, 4, 4,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 3,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 4, 3,
	0, 6, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 3, 2, 1, 1, 1, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 1, 4, 4, 4, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 34, -23,
	-24, 67, -28, -29, -30, -31, -32, -33, 89, -308,
	93, -37, -38, -39, -41, -40, 104, 106, 124, 130,
	171, 213, 219, 239, 241, 243, 250, -99, -101, 237,
	238, -62, -63, -64, -65, -93, 261, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -21, -25, -59, 301, -9,
	-10, -13, -12, -11, -16, -18, -15, -17, -19, -14,
	47, 69, -306, 97, -102, -100, 352, 310, 264, 35,
	273, 61, 100, 245, 23, 326, 333, 254, -103, -104,
	318, 282, 355, -324, -156, 282, 82, -131, -122, 345,
	4, -285, -287, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 48, 55, 60, 61, 62, 64, 66, 67,
	68, 71, 72, 80, 81, 83, 85, 89, 91, 93,
	96, 97, 99, 104, 105, 106, 112, 113, 118, 120,
	125, 130, 131, 132, 133, 140, 143, 145, 138, 155,
	156, 157, 159, 160, 161, 164, 163, 168, 171, 172,
	175, 177, 178, 179, 182, 180, 184, 185, 187, 186,
	192, 194, 195, 197, 200, 203, 206, 209, 210, 211,
	212, 213, 215, 217, 219, 221, 222, 223, 224, 225,
	227, 228, 230, 231, 232, 233, 234, 237, 235, 236,
	238, 239, 240, 241, 243, 245, 246, 248, 262, 263,
	274, 250, 251, 252, 253, 257, 255, 258, 259, 261,
	264, 266, 269, 272, 273, 275, 278, 276, 271, 281,
	283, 284, 285, 286, 287, 288, 289, 296, 297, 301,
	302, 303, 304, 307, 308, 309, 310, 312, 315, 316,
	317, 322, 327, 328, 329, 330, 331, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 51, 52, 53, 56,
	84, 86, 87, 103, 107, 108, 114, 115, 116, 126,
	128, 134, 135, 144, 146, 147, 148, 149, 150, 152,
	166, 181, 191, 193, 204, 208, 216, 218, 226, 247,
	256, 267, 268, 277, 279, 291, 292, 293, 298, 299,
	314, 318, 319, -130, -122, 82, -122, 219, 22, 91,
	143, 309, 308, 22, 215, 255, 284, 286, -122, -46,
	352, -45, -4, -27, -36, -47, -42, -43, -69, -58,
	-34, -50, -91, -92, -328, 22, -329, -330, 69, 97,
	124, 254, 143, 91, 308, -277, 4, -285, -287, -286,
	-288, 58, 70, 123, 142, 136, 154, 158, 167, 169,
	183, 205, 207, 244, 265, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 49, 50, 54, 57, 59,
	65, 69, 73, 74, 76, 75, 77, 78, 79, 88,
	90, 92, 94, 95, 98, 100, 102, 109, 110, 111,
	119, 121, 122, 124, 127, 129, 137, 139, 141, 151,
	153, 162, 165, 170, 173, 174, 188, 189, 190, 196,
	198, 199, 201, 202, 214, 220, 229, 242, 254, 260,
	270, 280, 282, 290, 294, 295, 300, 305, 306, 311,
	313, 320, 321, 323, 324, 325, 326, 156, -122, -324,
	156, -328, -126, 250, -122, -126, -88, 258, 4, 22,
	82, 182, 260, 291, 172, 55, 247, 258, -67, 297,
	-66, 291, -276, -68, -157, 182, -122, -332, 282, 156,
	223, 282, 311, 321, -187, 82, 306, -100, -102, -101,
	321, 282, 139, 82, 311, -145, -146, 305, 151, 102,
	202, -99, -101, -306, -281, -274, -237, 9, 300, 109,
	198, -280, 8, 344, -273, -279, 5, 7, 343, 4,
	-285, -287, -286, -88, 258, 34, 55, 22, 60, 83,
	125, 139, 140, 160, 65, 66, 222, 172, 157, 296,
	161, 259, 283, 297, 69, 312, 287, 105, -333, 297,
	297, -333, -333, -125, 297, 294, 282, 139, 82, 321,
	-309, 227, -305, -122, -309, -142, -143, 22, 94, 356,
	-169, 352, -243, 350, -245, -130, -101, -244, 352, 199,
	-3, 294, 356, -156, -149, -122, -207, -206, 354, 122,
	352, -166, -167, -206, -207, -122, 22, 122, 153, 153,
	-246, -245, -130, -183, 352, -251, -250, -279, 318, 198,
	356, -213, -215, 343, 344, 338, 188, 332, -227, -217,
	-230, 103, 247, 352, -130, -216, 357, 9, -303, -101,
	29, -228, -229, 49, -122, 7, 8, 5, 6, -128,
	-254, -223, -263, 300, 109, 190, -301, -302, 4, -285,
	-278, -255, -265, -259, -262, 152, 58, 74, 75, 78,
	76, 79, 260, 311, 50, 28, 107, 108, 208, 216,
	279, 298, 299, 134, 191, 135, 56, 126, 166, 96,
	37, 39, 41, 42, 51, 52, 84, 86, 87, 114,
	115, 116, 144, 146, 147, 148, 149, 150, 193, 226,
	267, 277, 292, 293, 319, -286, -266, -267, -260, -261,
	-268, -225, 352, 122, -213, 198, -122, -88, 331, 2,
	262, 352, -67, 53, 297, -200, -201, -119, -120, -121,
	155, 221, 225, 331, 294, 337, 122, -281, -138, 88,
	-160, 354, -172, -245, -213, -213, -157, 134, -122, -157,
	139, -122, 134, -145, -146, -158, 134, -157, -158, 134,
	-134, 134, -133, -130, -122, 134, -149, 134, -171, -190,
	-191, 170, 111, 196, -174, 22, 94, -174, -174, 44,
	353, 353, 8, 7, 7, -88, -283, -280, 9, 262,
	222, 259, 55, 122, -325, 198, 122, 122, 122, 122,
	122, 222, 259, 119, 296, 122, 155, 221, 274, 282,
	321, 122, 122, -199, -200, -199, 294, -126, -245, 134,
	-130, -133, 134, -122, -245, 134, 356, -309, -150, 352,
	-161, -247, -213, 345, -161, -169, -168, -236, -213, 88,
	70, -177, 158, 183, 123, 167, 244, 142, 7, -46,
	-210, 357, 352, 345, -240, 333, -101, -244, -243, -130,
	352, -283, -131, 356, -277, 345, 275, 353, -155, -130,
	-167, -246, -132, -130, -132, 261, -122, 30, -159, -213,
	353, 356, -324, -330, 10, 11, 57, 33, 343, 344,
	345, 346, 117, 347, 348, 341, 342, 340, 335, 336,
	337, 63, 176, 249, 13, 14, 15, 26, 201, 169,
	332, 136, 265, 338, 16, 17, 18, 154, 36, 137,
	-127, -135, -213, -213, -213, -213, -213, 207, -165, -208,
	350, -101, 352, -101, -213, -159, 7, -101, -222, 350,
	-231, -213, -166, 352, 5, 352, 5, -310, 327, 119,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 218, -272,
	322, -272, -272, -256, 352, -256, -257, 352, -256, 328,
	333, 352, 30, -224, -252, -253, -255, -264, -258, -262,
	-263, 40, 46, 45, 289, 181, 256, 268, 314, 38,
	197, 145, 144, 146, 147, 148, 149, 150, 267, 37,
	226, 115, 116, 114, 96, 87, 86, 193, 42, 41,
	-266, -267, -260, -261, 84, 292, 293, 152, 39, 52,
	51, 319, 277, -284, -283, -324, -66, -276, -159, 30,
	-200, 356, 168, -137, 175, 187, 131, 199, 329, -282,
	5, 4, -223, -237, 88, 172, -263, -275, 88, -281,
	-275, 88, 72, 354, -277, -111, 356, 48, 240, 352,
	-144, 188, -118, -307, 326, -144, 352, -123, 134, -122,
	-307, 188, -171, -111, 356, 103, -111, 103, -111, 356,
	103, 357, 103, 103, -191, -190, -192, -213, 22, -195,
	113, 184, -213, -215, -100, -100, -100, -147, -241, -213,
	220, 139, -157, 22, 263, -276, -327, 119, -324, -276,
	-276, -276, -276, -276, 258, -46, 119, -122, 168, -276,
	-276, 282, 139, 282, -126, -109, 235, -108, 21, 23,
	97, 316, 103, 271, 288, 251, 271, 288, 251, 235,
	103, 235, 235, 103, -305, 30, -149, -152, 356, 122,
	30, 4, -152, 356, 353, 158, 158, -243, -177, 158,
	-175, 205, -175, -175, -322, 352, 351, -240, -277, 350,
	358, -159, -239, -238, 30, -122, 203, 353, -130, -249,
	334, -122, 122, 353, 356, -205, 324, -196, -58, 352,
	88, 30, -196, -162, -163, -248, -164, -130, 352, -122,
	353, 356, -46, -250, 294, -270, -252, -269, 231, 232,
	230, 234, 233, -252, -277, 291, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, 169, 136,
	265, 36, 137, -213, 294, -213, -213, -213, -213, 180,
	188, 190, 300, 109, 307, 94, 194, -335, 280, 32,
	-220, -101, 352, -235, 27, 270, 22, -227, 247, 352,
	-208, -213, -209, -159, 353, 353, 356, -159, -226, 351,
	-222, -234, -233, 323, 353, -159, 320, 22, 94, 345,
	7, -184, 330, 179, 85, 132, 178, -185, 253, -311,
	112, 127, 352, 353, 353, 353, -213, -213, -178, -271,
	-159, 4, 330, 179, 85, 132, 178, 253, -178, -179,
	-213, -159, -180, -214, -215, 343, 344, 338, 352, 247,
	-181, -213, -159, -213, 43, 165, 295, -182, -213, 122,
	-159, -213, -213, -213, -159, -159, -159, 352, 7, 7,
	291, 291, 7, -45, 353, 356, -151, 29, 350, -184,
	352, -249, 356, 122, 353, 297, -201, -136, 225, 269,
	236, 257, 356, -277, -245, -139, -149, -140, -122, -204,
	-203, -291, -292, -289, 139, 306, 110, 65, -290, 54,
	220, 121, 30, 103, 212, 30, 198, 188, -114, 285,
	103, -157, -158, -158, -133, -134, -277, -122, -149, -193,
	-273, 352, 344, -194, 247, 248, 356, -107, 31, 92,
	159, -130, -326, -122, 258, -46, -130, -133, -130, 356,
	294, -188, 65, 59, -203, 134, 59, -289, -122, 306,
	-188, 65, -188, 65, 65, -245, 33, -58, 122, 33,
	-58, 122, 294, -133, 294, 294, -245, 352, 353, -205,
	-247, -154, -243, -277, -205, -236, -243, -243, -176, 313,
	198, 158, -243, -238, 353, -323, 7, -240, -239, 7,
	-212, -211, 120, 186, 353, -122, 352, -240, 353, -94,
	133, 194, 275, 122, -130, -173, 242, -213, -173, -198,
	198, -155, 318, -122, -173, -153, 356, 122, 337, -155,
	-213, -326, 331, -213, -213, 294, -335, 280, -220, -213,
	180, 190, 300, 109, 307, 94, 194, 122, 352, -214,
	-214, -159, -217, 352, -159, 351, 360, 353, -213, 351,
	351, 356, -232, -233, 98, -213, -146, 356, -145, -213,
	-159, -159, 353, 353, 294, 294, 294, 294, 352, -316,
	206, 352, 352, -213, 30, 356, 353, 122, 353, 353,
	-186, 214, 353, 10, 11, 343, 344, 345, 346, 117,
	347, 348, 341, 342, 340, 335, 336, 337, 63, 176,
	249, 13, 14, 15, 154, 137, -214, -214, -214, -159,
	352, 353, -218, -219, 122, 119, 30, -182, -182, -182,
	353, 122, -159, 356, 356, 356, 353, 353, 353, 7,
	353, 356, 353, 331, 331, 353, -252, 350, 351, 7,
	7, -97, 326, -283, -326, -119, 304, 62, 225, -281,
	353, 353, 356, -252, -123, 139, 352, -123, -122, 352,
	159, 159, -58, -157, 5, -58, -130, 103, -115, 99,
	-334, 337, -122, -111, -111, -111, -194, -213, -241, -130,
	357, 356, -249, -108, -130, -122, -122, 188, -203, 134,
	-113, 188, -122, -122, 134, -122, 134, -122, -122, -109,
	235, -58, 352, -58, 352, -122, 235, -122, -130, 235,
	-45, -170, 127, -249, 356, -170, -176, 352, -213, -243,
	351, 353, 356, -239, 351, 356, 359, 337, -240, 352,
	-149, -238, -97, 122, 281, 275, -161, 189, -173, 64,
	353, -205, -163, -154, -236, 353, -213, -213, -214, -214,
	122, 352, -213, -224, 26, 26, 353, -159, 353, 356,
	-209, -213, 353, -222, 100, -213, 290, 353, 320, -146,
	-146, -146, 5, 179, 132, 178, -185, 178, -185, -185,
	7, -317, -122, 352, 324, -145, 353, -270, -252, -213,
	-218, -213, -270, -252, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, 94, 188, 194, -214, 356, -159, 353,
	-219, -218, -213, -213, -252, 353, 353, 353, -159, -213,
	-213, -213, 353, 7, 7, 351, 353, 200, -141, 138,
	-204, -293, 352, -123, -148, -242, -122, -304, 352, -301,
	-302, -128, 352, -290, -213, 352, 352, 352, -144, 352,
	-122, -116, 164, -334, -280, -307, 199, 353, -107, -277,
	-122, 294, 294, 103, 188, 315, -106, 97, 261, -189,
	103, -111, 103, -111, 294, -188, 65, -159, -159, 294,
	294, 353, -221, 129, 44, -243, -221, -149, -210, 7,
	-211, -277, 350, -239, -149, 353, -284, 291, -197, 352,
	198, -58, -173, 337, 26, 26, -213, -224, 353, -213,
	-213, 353, -213, 351, -213, 5, -213, 353, 353, 353,
	353, -318, -122, -213, 353, 353, 353, -219, 122, 94,
	194, 352, -213, 353, 353, 356, 353, 353, 353, 351,
	352, 137, -294, 65, -295, 57, 110, 69, 188, 190,
	306, 220, 54, 88, 229, -148, 352, 353, 356, -129,
	-166, 57, -129, -213, 352, -149, 353, -148, -149, -139,
	30, -148, 198, -117, 163, -334, -280, -114, -107, -122,
	-122, -203, 103, 188, 88, 188, 88, 81, 302, -122,
	-122, -130, -122, -122, 353, 353, -122, -130, -313, 325,
	-213, -159, -313, 353, -240, 7, 353, -216, -128, -122,
	95, -149, 65, -169, -101, 352, -213, -213, 353, 353,
	-146, -312, 211, 353, -214, 122, 352, -224, 353, -213,
	-96, -95, 5, 209, -122, -277, -122, 110, 134, 190,
	159, 352, -214, -130, 353, -148, -202, -331, 68, 278,
	-242, -107, -277, -107, 353, -159, 353, 353, 353, 353,
	-58, 353, -130, -334, -280, -115, -203, 190, 190, -213,
	-252, -111, -111, 294, 294, 294, 294, -314, -315, -122,
	-239, 351, 352, 308, 189, 353, -122, 353, -146, 44,
	-214, -224, 353, 353, 356, 353, -98, 337, -130, -295,
	-123, 188, -213, -124, 352, -202, 353, -141, 352, -129,
	-146, 229, -141, -202, 352, -280, -116, -110, 57, -122,
	-122, 352, 352, 356, 30, -159, 261, -205, -319, 224,
	248, -159, 353, -95, 5, 352, 103, 353, -298, 177,
	-122, -141, -202, -149, -107, 353, -130, -141, -148, -117,
	-105, 313, -277, -159, -159, -315, -317, -146, -162, 353,
	-320, -321, 36, 303, 72, -213, -320, -149, 110, -296,
	-299, -297, 198, 123, 210, 266, 353, -141, 353, -144,
	353, -213, 353, 353, 353, -205, -321, 217, 118, 247,
	217, 118, 353, -122, -297, 198, -299, 198, 308, 91,
	-298, -202, 26, -112, 48, 240, -300, 185, 240, 48,
	261, -300, -296, -141, -321, 20, 190, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 35, 36, 37, 38, 0, 107,
	108, 0, 111, 112, 113, 114, 115, 116, 0, 0,
	0, 123, 124, 125, 126, 127, 0, 508, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 479, -2, 0,
	0, 193, 194, 195, 196, 197, 0, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 414, 415, 416, 510, 39,
	40, 41, 42, 43, 46, 47, 48, 49, 44, 45,
	0, 385, 507, 0, -2, 518, 0, 0, 0, 423,
	0, 423, 423, 427, 0, 0, 0, 516, 493, 494,
	0, 0, -2, 0, 174, 0, 1055, 983, 989, 990,
	1014, 1015, 1016, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 0, 985, 1055, 168, 1115, 170, 0,
	0, 0, 0, 118, 119, 120, 121, 122, 167, 144,
	0, 151, 152, 153, 154, 155, 156, 157, 158, 146,
	147, 148, 149, 150, 0, 177, 178, 179, 181, 182,
	183, 184, 185, 186, 187, 304, 1028, 1029, 1030, 1031,
	1032, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 0, 164, 0,
	0, 0, 413, 1142, 429, 411, 190, 0, 264, 265,
	266, 267, 268, 0, -2, 1043, 1230, 1148, 202, 1169,
	210, 1236, 0, 213, 218, -2, 140, 0, 509, 0,
	0, 0, 0, 0, 0, 0, 384, -2, 489, 490,
	0, 0, 0, 0, 0, -2, 0, 513, 513, 513,
	0, 0, 490, 0, 192, 221, 222, 223, 232, 233,
	234, 235, 374, 0, 376, 242, 243, 1010, 0, 1024,
	1025, 1026, 1027, 262, 0, 0, 0, 265, 0, 275,
	306, 0, 0, 0, 0, 0, 282, 0, 285, 0,
	0, 290, 294, 0, 0, 300, 0, 0, 431, 422,
	431, 419, 420, 421, 424, 0, 0, 0, 0, 0,
	499, 1121, 502, 996, 500, 0, 0, 515, 514, 0,
	546, 0, 498, 508, 560, 597, 574, 565, 0, 0,
	2, 0, 0, 175, 176, 993, 991, 992, 0, 0,
	0, 986, 962, 960, 961, 169, 171, 0, 0, 0,
	0, 603, 597, 165, 0, 0, 159, 161, 1242, 0,
	0, 309, 705, 0, 0, 0, 0, 0, 0, 797,
	799, 1204, 1230, 0, 801, 802, 0, 804, 806, 807,
	0, 810, 811, 953, 985, 999, 1000, 1001, 1002, 0,
	0, 1005, 0, 1007, 1008, 1009, 853, 820, -2, -2,
	997, 633, 634, 635, 636, -2, 1244, 824, 826, 828,
	830, 831, 832, 833, 0, 1188, 1205, 1206, 1226, 1227,
	1235, 1239, 1240, 1212, 1223, 1213, 1200, 1210, 1221, 1061,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1023, 667, 668, 673, 674,
	676, 0, 0, 0, 412, 0, 428, 191, 269, 198,
	0, 0, 201, 1199, 1169, 204, 432, 434, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	141, 0, 81, 601, 109, 110, 357, 1212, -2, 357,
	1018, 506, 1212, -2, 0, 81, 1212, 138, 81, 1212,
	81, 1212, 981, 988, 134, 1212, 136, 1212, 485, 527,
	528, 0, 0, 0, 0, 511, 512, 0, 0, 0,
	481, 482, 375, 1012, 1011, 263, 270, 91, 92, 0,
	283, 291, 0, 0, 308, 0, 0, 0, 0, 0,
	0, 284, 292, 508, 0, 0, 0, 296, 297, 0,
	0, 0, 0, 417, 430, 418, 0, 426, 0, 1212,
	597, 0, 1212, 0, 0, 1212, 0, 501, 0, 0,
	549, 973, 977, 978, 549, 547, 0, 970, 968, 969,
	0, 0, 0, 0, 594, 594, 594, 592, 568, 0,
	574, 0, 0, 598, 586, 0, -2, 565, 0, 599,
	0, 588, 984, 0, 958, 959, 104, 0, 0, 979,
	963, 607, 0, 456, 0, 0, 604, 0, 0, 909,
	508, 0, 0, 180, 0, 0, 0, 0, 888, 889,
	890, 891, 892, 893, 896, 897, 894, 895, 898, 899,
	900, 0, 0, 0, 901, 902, 903, 0, 0, 905,
	0, 907, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 904, 710, 711, 712, 734, 735, 0, 798, 964,
	957, 800, 0, -2, 909, 0, 803, 808, 809, 0,
	0, 952, -2, 0, 1004, 0, 702, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 670,
	681, 678, 677, 654, 0, 653, 651, 0, 655, 0,
	0, 0, 508, 0, 911, 615, 616, 617, 618, 619,
	702, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 664, 0, 639, 639, 639, 656, 657,
	665, 666, 671, 672, 683, 684, 686, 688, 682, 682,
	682, 679, 680, 588, 93, 0, 199, 0, 0, 0,
	205, 0, 0, 437, 229, 230, 231, 439, 440, 211,
	236, 237, 238, 239, 240, 241, 0, 206, 208, 219,
	207, 209, 212, 0, 142, 377, 0, 79, 80, 315,
	0, 0, 378, 0, 505, 0, 0, 0, 1212, 1017,
	444, 0, 488, 128, 0, 0, 130, 0, 132, 0,
	0, 0, 0, 0, 525, 526, 529, 533, 534, 537,
	540, 541, 531, 705, 495, 496, 497, 519, 520, 395,
	0, 0, 271, 272, 273, 274, 276, 0, 305, 277,
	278, 279, 280, 281, 286, 288, 508, 293, 295, 298,
	299, 0, 0, 0, 425, 50, 408, 60, 0, 408,
	408, 0, 0, 0, 0, 56, 0, 0, 58, 0,
	0, 0, 0, 0, 503, 0, 0, 607, 0, 0,
	0, 976, 607, 0, 972, 0, 0, 0, 0, 0,
	589, 593, 590, 591, 0, 0, 574, 586, 557, 0,
	0, 0, 564, 585, 0, 584, 573, -2, 0, 96,
	0, 994, 0, 0, 0, 468, 0, 468, 458, 0,
	0, 0, 468, 471, 472, 474, 475, 0, 0, 605,
	166, 0, 145, 160, 0, 706, 611, 612, 658, 659,
	660, 661, 662, 707, 708, 0, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, -2, -2, -2, 726,
	727, 728, -2, -2, -2, 732, 733, -2, 906, 908,
	0, 967, 0, -2, 0, -2, -2, -2, -2, 746,
	0, 748, 751, 753, 755, 0, 0, 0, 0, 966,
	765, 944, 0, 0, 885, 886, 887, 750, 0, 0,
	965, 956, 0, 0, -2, 805, 0, 0, 0, 915,
	916, 951, 947, 0, 812, 518, 0, 0, 0, 0,
	0, 1013, 689, 690, 691, 692, 693, 694, 703, 863,
	0, 0, 0, 825, 827, 829, 0, 0, 0, 0,
	919, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	909, 929, 0, 0, 768, 0, 0, 0, 0, 1230,
	0, 909, 937, 0, 0, 0, 0, 0, 909, 0,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 163, 0, 608, 610, 0, 620,
	0, 103, 0, 0, 200, 0, 433, 438, 0, 226,
	0, 228, 0, 143, 602, 0, 0, 314, 993, 316,
	318, 319, 320, 321, 1018, 0, 1018, 0, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 452,
	0, 139, 81, 81, 982, 81, 987, 135, 137, 0,
	535, 0, 0, 532, 538, 539, 0, 522, 393, 394,
	0, 0, 307, 188, 287, 289, 301, 302, 588, 0,
	0, 0, 0, 407, 62, 1212, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	55, 0, 0, 0, 0, 0, 0, 508, 995, 543,
	974, 588, 550, 975, 543, 971, 576, 0, 578, 0,
	0, 0, 580, 0, 569, 0, 571, 586, 562, 0,
	0, 555, 0, 554, 574, 582, 0, 0, 600, 103,
	0, 0, 105, 0, 980, 117, 0, 606, 453, 468,
	0, 0, 460, 457, 455, 607, 0, 0, 0, 0,
	910, 172, 0, -2, -2, 0, 0, 0, 766, -2,
	747, 749, 752, 754, 756, 0, 0, 0, 0, 0,
	0, 0, 767, 0, 0, 954, 957, -2, 910, 913,
	914, 0, 0, 948, 0, 0, 0, 0, 517, 518,
	518, 518, 818, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 836, 0, 837, 838,
	0, 0, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 771, 772, 773, 0,
	0, 840, 935, 936, 0, 0, 0, 0, 0, 0,
	845, 0, 942, 0, 0, 0, 849, 850, 851, 0,
	637, 0, 663, 685, 687, 675, 912, 0, 613, 0,
	0, 89, 0, 94, 173, 203, 224, 225, 227, 220,
	323, 356, 0, 329, 0, 1018, 0, 0, 0, 0,
	0, 0, 312, 357, 379, 381, 0, 0, 448, 452,
	0, 451, 506, 129, 131, 133, 0, 0, 521, 395,
	0, 0, 303, 61, 397, 0, 0, 0, 64, 1212,
	72, 0, 410, 73, 1212, 81, 1212, 81, 74, 51,
	408, 52, 0, 53, 0, 405, 0, 396, 403, 0,
	0, 545, 0, 548, 0, 545, 577, 0, 596, 579,
	560, 570, 0, 567, 558, 0, 559, 0, 586, 0,
	0, 566, 88, 0, 0, 106, 466, 467, 454, 465,
	0, 468, 473, 470, 476, 0, 709, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 945, 0, 880, 0,
	0, 956, -2, 917, 946, 950, 0, 813, 0, 0,
	0, 0, 1006, 695, 696, 697, 698, 699, 700, 701,
	0, 861, 862, 866, 0, 0, 823, 0, 0, 918,
	928, 930, 769, 770, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, -2, -2, -2, 787, 788, 789,
	-2, -2, -2, 0, 0, 0, 931, 0, 0, 883,
	933, 934, 939, 940, 0, 842, 843, 844, 941, 0,
	0, 0, 669, 0, 0, 614, 621, 0, 310, 0,
	317, 327, 0, 0, 0, 386, 392, 392, 0, 821,
	822, 0, 0, 346, 0, 0, 0, 315, 0, 0,
	0, 450, 452, 0, 443, 444, 530, 536, 523, 395,
	189, 0, 0, 0, 0, 82, 66, 0, 0, 0,
	0, 70, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 504, 857, 0, 0, 551, 857, 0, 574, 572,
	556, 552, 0, 563, 0, 583, 95, 0, 0, 0,
	0, 459, 469, 0, 0, 0, -2, 0, 759, -2,
	-2, 879, 910, 955, 949, 1003, 518, 814, 816, 817,
	704, 868, 865, 0, 852, 834, 835, 927, 0, 0,
	0, 0, 910, 882, 841, 0, 847, 848, 638, 609,
	0, 0, 328, 0, 331, 0, 0, 0, 0, 337,
	338, 0, 0, 0, 0, 0, 0, 355, 0, 395,
	998, 0, 395, 0, 0, 0, 348, 0, 0, 0,
	0, 0, 0, 441, 452, 0, 445, 446, 524, 399,
	401, 63, 0, 0, 78, 0, 0, 409, 0, 81,
	81, 398, 0, 0, 0, 0, 406, 404, 491, 0,
	544, 542, 492, 595, 586, 0, 581, 587, 0, 0,
	0, 0, 0, 477, 478, 0, -2, -2, 760, 881,
	0, 518, 0, 854, -2, 0, 0, 0, 884, 0,
	0, 100, 98, 0, 0, 332, 333, 1018, 0, 336,
	339, 0, 341, 1020, 355, 0, 323, 0, 352, 353,
	387, 388, 391, 389, 392, 518, 345, 350, 0, 323,
	313, 355, 0, 0, 447, 448, 65, 67, 68, 77,
	85, 69, 75, 0, 0, 0, 0, 856, 858, 0,
	561, 553, 0, 0, 462, 607, 464, 815, 871, 0,
	-2, 0, 795, 846, 0, 102, 99, 0, 0, 330,
	334, 0, 0, 361, 0, 323, 355, 349, 0, 395,
	0, 0, 311, 323, 0, 449, 450, 87, 0, 400,
	402, 0, 0, 0, 0, 518, 0, 463, 0, 0,
	0, 867, 796, 101, 97, 0, 0, 340, 366, 0,
	0, 343, 323, 0, 390, 813, 357, 382, 0, 442,
	71, 0, 84, 0, 0, 859, 860, 0, 607, 864,
	869, 872, -2, 1172, 1052, 0, 870, 0, 0, 342,
	362, 363, 0, 358, 359, 360, 1019, 344, 354, 361,
	355, 86, 57, 59, 0, 461, 0, 874, 875, 876,
	877, 878, 326, 335, 364, 0, 365, 0, 0, 0,
	366, 323, 0, 322, 324, 325, 367, 0, 370, 371,
	0, 368, 351, 383, 873, 369, 372, 373,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 341, 3, 347, 342, 3,
	352, 353, 345, 343, 356, 344, 354, 346, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 360, 355,
	335, 337, 336, 3, 357, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 350, 3, 351, 348, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 358, 340, 359, 338,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 339, 57678, 349, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 34:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1040
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1063
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = nil
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = DropCascade
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = DropRestrict
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = DropDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1136
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter using")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1140
		{
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Load{}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 98:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.str = ""
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1221
		{
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{ /* SKIP DOC */
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{ /* SKIP DOC */
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{ /* SKIP DOC */
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			return unimplemented(sqllex, "set local")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			return unimplemented(sqllex, "set from current")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1689
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = Low
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = Normal
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = High
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.str = "client_encoding"
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1999
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2003
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2112
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = DropDefault
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			return unimplemented(sqllex, "match full")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			return unimplemented(sqllex, "match partial")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			return unimplemented(sqllex, "match simple")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			return unimplemented(sqllex, "no action")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2356
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			return unimplemented(sqllex, "action set null")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			return unimplemented(sqllex, "action set default")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = true
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = false
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2467
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = Ascending
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = Descending
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2511
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2513
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = true
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = false
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2547
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2558
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2606
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.str = ""
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.str = ""
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = ReadOnly
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = ReadWrite
		}
	case 441:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.str = ""
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2827
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2862
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3101
		{
			return unimplemented(sqllex, "cte")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3105
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = true
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = false
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = false
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = true
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3137
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3257
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &From{}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3351
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3413
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = nil
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = true
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = false
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.str = astFullJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.str = astLeftJoin
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.str = astRightJoin
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.str = astInnerJoin
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3596
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3682
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3695
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3696
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = nil
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3954
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3986
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4026
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = year
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = month
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = day
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = hour
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = minute
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = month
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = hour
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = minute
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = minute
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = nil
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = second
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4121
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4156
		{
			return unimplemented(sqllex, "at tz")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4390
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4616
		{
			return unimplemented(sqllex, "variadic")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4617
		{
			return unimplemented(sqllex, "variadic")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4640
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			return unimplemented(sqllex, "func_application")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4661
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			return unimplemented(sqllex, "current role")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			return unimplemented(sqllex, "current user")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			return unimplemented(sqllex, "session user")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			return unimplemented(sqllex, "user")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4718
		{
			return unimplemented(sqllex, "treat")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4762
		{
			return unimplemented(sqllex, "within group")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4763
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = Window(nil)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.str = ""
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			return unimplemented(sqllex, "frame range")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4861
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4862
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4866
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4873
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4874
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4875
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4876
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = Any
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = Some
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = All
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = Plus
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = Minus
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = Mult
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = Div
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = FloorDiv
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = Mod
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = Bitand
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = Bitor
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = Pow
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = Bitxor
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = LT
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = GT
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = EQ
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = LE
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = GE
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = NE
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = Like
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = NotLike
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = ILike
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = NotILike
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5241
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5359
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5403
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5439
		{
			return unimplemented(sqllex, "func const")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5448
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = DNull
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.str = ""
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
