// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCE = 57617
const SEQUENCES = 57618
const SERIAL = 57619
const SERIALIZABLE = 57620
const SESSION = 57621
const SESSIONS = 57622
const SESSION_USER = 57623
const SET = 57624
const SETTING = 57625
const SETTINGS = 57626
const SHOW = 57627
const SIMILAR = 57628
const SIMPLE = 57629
const SMALLINT = 57630
const SMALLSERIAL = 57631
const SNAPSHOT = 57632
const SOME = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TO = 57659
const TRAILING = 57660
const TRACE = 57661
const TRANSACTION = 57662
const TREAT = 57663
const TRIM = 57664
const TRUE = 57665
const TRUNCATE = 57666
const TYPE = 57667
const UNBOUNDED = 57668
const UNCOMMITTED = 57669
const UNION = 57670
const UNIQUE = 57671
const UNKNOWN = 57672
const UPDATE = 57673
const UPSERT = 57674
const USE = 57675
const USER = 57676
const USERS = 57677
const USING = 57678
const UUID = 57679
const VALID = 57680
const VALIDATE = 57681
const VALUE = 57682
const VALUES = 57683
const VARCHAR = 57684
const VARIADIC = 57685
const VIEW = 57686
const VARYING = 57687
const WHEN = 57688
const WHERE = 57689
const WINDOW = 57690
const WITH = 57691
const WITHIN = 57692
const WITHOUT = 57693
const WRITE = 57694
const YEAR = 57695
const ZONE = 57696
const NOT_LA = 57697
const WITH_LA = 57698
const AS_LA = 57699
const CONTAINED_BY = 57700
const HAS_SOME_KEY = 57701
const HAS_ALL_KEYS = 57702
const POSTFIXOP = 57703
const UMINUS = 57704
const HELPTOKEN = 57705

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6854

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	383, 54,
	-2, 709,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	153, 561,
	-2, 0,
	-1, 65,
	96, 709,
	157, 709,
	331, 709,
	332, 709,
	-2, 0,
	-1, 75,
	107, 684,
	117, 684,
	165, 684,
	187, 684,
	214, 684,
	220, 684,
	328, 684,
	-2, 673,
	-1, 108,
	4, 711,
	20, 711,
	21, 711,
	23, 711,
	28, 711,
	33, 711,
	34, 711,
	35, 711,
	36, 711,
	37, 711,
	38, 711,
	39, 711,
	40, 711,
	41, 711,
	42, 711,
	44, 711,
	45, 711,
	46, 711,
	47, 711,
	48, 711,
	51, 711,
	52, 711,
	53, 711,
	55, 711,
	56, 711,
	60, 711,
	61, 711,
	62, 711,
	64, 711,
	65, 711,
	66, 711,
	67, 711,
	69, 711,
	71, 711,
	72, 711,
	75, 711,
	76, 711,
	77, 711,
	85, 711,
	86, 711,
	87, 711,
	88, 711,
	89, 711,
	90, 711,
	91, 711,
	92, 711,
	94, 711,
	96, 711,
	98, 711,
	101, 711,
	102, 711,
	104, 711,
	108, 711,
	109, 711,
	110, 711,
	111, 711,
	112, 711,
	113, 711,
	114, 711,
	122, 711,
	123, 711,
	124, 711,
	125, 711,
	126, 711,
	128, 711,
	130, 711,
	135, 711,
	136, 711,
	138, 711,
	141, 711,
	142, 711,
	145, 711,
	146, 711,
	147, 711,
	148, 711,
	151, 711,
	152, 711,
	154, 711,
	157, 711,
	158, 711,
	159, 711,
	160, 711,
	161, 711,
	162, 711,
	163, 711,
	164, 711,
	166, 711,
	169, 711,
	170, 711,
	171, 711,
	173, 711,
	174, 711,
	175, 711,
	176, 711,
	177, 711,
	179, 711,
	180, 711,
	182, 711,
	184, 711,
	185, 711,
	188, 711,
	189, 711,
	192, 711,
	194, 711,
	196, 711,
	197, 711,
	198, 711,
	199, 711,
	200, 711,
	202, 711,
	203, 711,
	204, 711,
	205, 711,
	209, 711,
	210, 711,
	211, 711,
	212, 711,
	213, 711,
	215, 711,
	217, 711,
	218, 711,
	221, 711,
	222, 711,
	224, 711,
	226, 711,
	227, 711,
	228, 711,
	229, 711,
	230, 711,
	231, 711,
	233, 711,
	234, 711,
	235, 711,
	236, 711,
	237, 711,
	239, 711,
	240, 711,
	241, 711,
	242, 711,
	243, 711,
	244, 711,
	245, 711,
	246, 711,
	248, 711,
	249, 711,
	250, 711,
	251, 711,
	252, 711,
	254, 711,
	255, 711,
	256, 711,
	257, 711,
	258, 711,
	259, 711,
	260, 711,
	262, 711,
	264, 711,
	265, 711,
	266, 711,
	267, 711,
	269, 711,
	270, 711,
	271, 711,
	272, 711,
	273, 711,
	275, 711,
	276, 711,
	277, 711,
	278, 711,
	279, 711,
	280, 711,
	282, 711,
	283, 711,
	284, 711,
	285, 711,
	287, 711,
	288, 711,
	289, 711,
	290, 711,
	292, 711,
	293, 711,
	294, 711,
	295, 711,
	296, 711,
	297, 711,
	298, 711,
	299, 711,
	300, 711,
	301, 711,
	303, 711,
	305, 711,
	306, 711,
	307, 711,
	308, 711,
	309, 711,
	310, 711,
	311, 711,
	312, 711,
	314, 711,
	315, 711,
	316, 711,
	319, 711,
	320, 711,
	321, 711,
	322, 711,
	324, 711,
	325, 711,
	326, 711,
	327, 711,
	330, 711,
	331, 711,
	332, 711,
	333, 711,
	335, 711,
	337, 711,
	338, 711,
	339, 711,
	340, 711,
	341, 711,
	342, 711,
	345, 711,
	350, 711,
	351, 711,
	352, 711,
	353, 711,
	354, 711,
	-2, 0,
	-1, 125,
	107, 683,
	117, 683,
	165, 683,
	187, 683,
	214, 683,
	220, 683,
	328, 683,
	-2, 676,
	-1, 130,
	1, 610,
	169, 610,
	239, 610,
	243, 610,
	382, 610,
	383, 610,
	-2, 0,
	-1, 132,
	1, 610,
	382, 610,
	383, 610,
	-2, 0,
	-1, 133,
	1, 610,
	382, 610,
	383, 610,
	-2, 0,
	-1, 134,
	1, 614,
	382, 614,
	383, 614,
	-2, 0,
	-1, 141,
	4, 717,
	5, 717,
	6, 717,
	7, 717,
	8, 717,
	9, 717,
	20, 717,
	21, 717,
	23, 717,
	28, 717,
	29, 717,
	33, 717,
	34, 717,
	35, 717,
	36, 717,
	37, 717,
	38, 717,
	39, 717,
	40, 717,
	41, 717,
	42, 717,
	44, 717,
	45, 717,
	46, 717,
	47, 717,
	48, 717,
	49, 717,
	50, 717,
	51, 717,
	52, 717,
	53, 717,
	55, 717,
	56, 717,
	58, 717,
	60, 717,
	61, 717,
	62, 717,
	64, 717,
	65, 717,
	66, 717,
	67, 717,
	69, 717,
	71, 717,
	72, 717,
	74, 717,
	75, 717,
	76, 717,
	77, 717,
	79, 717,
	80, 717,
	81, 717,
	83, 717,
	84, 717,
	85, 717,
	86, 717,
	87, 717,
	88, 717,
	89, 717,
	90, 717,
	91, 717,
	92, 717,
	94, 717,
	96, 717,
	98, 717,
	101, 717,
	102, 717,
	104, 717,
	108, 717,
	109, 717,
	110, 717,
	111, 717,
	112, 717,
	113, 717,
	114, 717,
	115, 717,
	116, 717,
	122, 717,
	123, 717,
	124, 717,
	125, 717,
	126, 717,
	128, 717,
	130, 717,
	133, 717,
	135, 717,
	136, 717,
	138, 717,
	141, 717,
	142, 717,
	145, 717,
	146, 717,
	147, 717,
	148, 717,
	149, 717,
	151, 717,
	152, 717,
	154, 717,
	156, 717,
	157, 717,
	158, 717,
	159, 717,
	160, 717,
	161, 717,
	162, 717,
	163, 717,
	164, 717,
	166, 717,
	168, 717,
	169, 717,
	170, 717,
	171, 717,
	172, 717,
	173, 717,
	174, 717,
	175, 717,
	176, 717,
	177, 717,
	179, 717,
	180, 717,
	182, 717,
	183, 717,
	184, 717,
	185, 717,
	186, 717,
	188, 717,
	189, 717,
	192, 717,
	194, 717,
	195, 717,
	196, 717,
	197, 717,
	198, 717,
	199, 717,
	200, 717,
	201, 717,
	202, 717,
	203, 717,
	204, 717,
	205, 717,
	206, 717,
	208, 717,
	209, 717,
	210, 717,
	211, 717,
	212, 717,
	213, 717,
	215, 717,
	218, 717,
	221, 717,
	222, 717,
	223, 717,
	224, 717,
	225, 717,
	226, 717,
	227, 717,
	228, 717,
	229, 717,
	230, 717,
	231, 717,
	233, 717,
	234, 717,
	235, 717,
	236, 717,
	237, 717,
	239, 717,
	240, 717,
	241, 717,
	242, 717,
	243, 717,
	244, 717,
	245, 717,
	246, 717,
	248, 717,
	249, 717,
	250, 717,
	251, 717,
	252, 717,
	254, 717,
	255, 717,
	256, 717,
	257, 717,
	258, 717,
	259, 717,
	260, 717,
	262, 717,
	263, 717,
	264, 717,
	265, 717,
	266, 717,
	267, 717,
	269, 717,
	270, 717,
	271, 717,
	272, 717,
	273, 717,
	275, 717,
	276, 717,
	277, 717,
	278, 717,
	279, 717,
	280, 717,
	281, 717,
	282, 717,
	283, 717,
	284, 717,
	285, 717,
	286, 717,
	287, 717,
	288, 717,
	289, 717,
	290, 717,
	292, 717,
	293, 717,
	294, 717,
	295, 717,
	296, 717,
	297, 717,
	298, 717,
	299, 717,
	300, 717,
	301, 717,
	303, 717,
	305, 717,
	306, 717,
	307, 717,
	308, 717,
	309, 717,
	310, 717,
	311, 717,
	312, 717,
	314, 717,
	315, 717,
	316, 717,
	319, 717,
	320, 717,
	321, 717,
	322, 717,
	323, 717,
	324, 717,
	325, 717,
	326, 717,
	327, 717,
	330, 717,
	331, 717,
	332, 717,
	333, 717,
	334, 717,
	335, 717,
	337, 717,
	338, 717,
	339, 717,
	340, 717,
	341, 717,
	342, 717,
	345, 717,
	350, 717,
	351, 717,
	352, 717,
	353, 717,
	354, 717,
	355, 717,
	365, 717,
	370, 717,
	371, 717,
	372, 717,
	379, 717,
	385, 717,
	-2, 0,
	-1, 144,
	1, 54,
	383, 54,
	-2, 709,
	-1, 518,
	132, 1326,
	317, 1326,
	360, 1326,
	381, 1326,
	-2, 0,
	-1, 519,
	132, 1273,
	317, 1273,
	360, 1273,
	381, 1273,
	-2, 0,
	-1, 521,
	132, 1386,
	317, 1386,
	360, 1386,
	381, 1386,
	-2, 0,
	-1, 523,
	132, 1409,
	317, 1409,
	360, 1409,
	381, 1409,
	-2, 0,
	-1, 530,
	132, 1331,
	317, 1331,
	360, 1331,
	381, 1331,
	-2, 328,
	-1, 556,
	1, 406,
	378, 406,
	380, 406,
	382, 406,
	383, 406,
	-2, 0,
	-1, 557,
	1, 458,
	129, 458,
	378, 458,
	380, 458,
	382, 458,
	383, 458,
	-2, 0,
	-1, 563,
	1, 420,
	378, 420,
	380, 420,
	382, 420,
	383, 420,
	-2, 0,
	-1, 565,
	1, 424,
	378, 424,
	380, 424,
	382, 424,
	383, 424,
	-2, 0,
	-1, 568,
	1, 432,
	378, 432,
	380, 432,
	382, 432,
	383, 432,
	-2, 0,
	-1, 569,
	1, 437,
	378, 437,
	380, 437,
	382, 437,
	383, 437,
	-2, 0,
	-1, 572,
	1, 447,
	378, 447,
	380, 447,
	382, 447,
	383, 447,
	-2, 0,
	-1, 588,
	117, 719,
	187, 719,
	214, 719,
	-2, 679,
	-1, 591,
	117, 718,
	187, 718,
	214, 718,
	-2, 677,
	-1, 648,
	379, 1251,
	-2, 1244,
	-1, 649,
	379, 1252,
	-2, 1245,
	-1, 655,
	5, 898,
	379, 898,
	-2, 1461,
	-1, 680,
	5, 857,
	-2, 1430,
	-1, 681,
	5, 892,
	379, 892,
	-2, 1432,
	-1, 682,
	5, 867,
	-2, 1433,
	-1, 683,
	5, 866,
	-2, 1434,
	-1, 684,
	5, 892,
	379, 892,
	-2, 1437,
	-1, 685,
	5, 892,
	379, 892,
	-2, 1438,
	-1, 686,
	5, 893,
	-2, 1441,
	-1, 687,
	5, 849,
	-2, 1442,
	-1, 688,
	5, 849,
	-2, 1443,
	-1, 689,
	5, 874,
	-2, 1447,
	-1, 690,
	5, 859,
	-2, 1448,
	-1, 691,
	5, 860,
	-2, 1449,
	-1, 692,
	5, 850,
	-2, 1455,
	-1, 693,
	5, 851,
	-2, 1456,
	-1, 694,
	5, 852,
	-2, 1457,
	-1, 695,
	5, 853,
	-2, 1458,
	-1, 696,
	5, 854,
	-2, 1459,
	-1, 697,
	5, 855,
	-2, 1460,
	-1, 698,
	5, 849,
	-2, 1467,
	-1, 699,
	5, 858,
	-2, 1472,
	-1, 700,
	5, 856,
	-2, 1475,
	-1, 701,
	5, 890,
	379, 890,
	-2, 1477,
	-1, 702,
	5, 894,
	-2, 1480,
	-1, 703,
	5, 896,
	-2, 1481,
	-1, 704,
	5, 889,
	379, 889,
	-2, 1486,
	-1, 891,
	230, 707,
	-2, 554,
	-1, 895,
	216, 1248,
	-2, 0,
	-1, 930,
	1, 217,
	378, 217,
	380, 217,
	382, 217,
	383, 217,
	-2, 682,
	-1, 937,
	4, 1485,
	10, 1485,
	11, 1485,
	13, 1485,
	14, 1485,
	15, 1485,
	16, 1485,
	17, 1485,
	18, 1485,
	20, 1485,
	21, 1485,
	23, 1485,
	26, 1485,
	28, 1485,
	30, 1485,
	33, 1485,
	34, 1485,
	35, 1485,
	36, 1485,
	37, 1485,
	38, 1485,
	39, 1485,
	40, 1485,
	41, 1485,
	42, 1485,
	44, 1485,
	45, 1485,
	46, 1485,
	47, 1485,
	48, 1485,
	51, 1485,
	52, 1485,
	53, 1485,
	55, 1485,
	56, 1485,
	57, 1485,
	60, 1485,
	61, 1485,
	62, 1485,
	63, 1485,
	64, 1485,
	65, 1485,
	66, 1485,
	67, 1485,
	69, 1485,
	70, 1485,
	71, 1485,
	72, 1485,
	74, 1485,
	75, 1485,
	76, 1485,
	77, 1485,
	85, 1485,
	86, 1485,
	87, 1485,
	88, 1485,
	89, 1485,
	90, 1485,
	91, 1485,
	92, 1485,
	94, 1485,
	96, 1485,
	98, 1485,
	101, 1485,
	102, 1485,
	104, 1485,
	108, 1485,
	109, 1485,
	110, 1485,
	111, 1485,
	112, 1485,
	113, 1485,
	114, 1485,
	118, 1485,
	119, 1485,
	120, 1485,
	121, 1485,
	122, 1485,
	123, 1485,
	124, 1485,
	125, 1485,
	126, 1485,
	127, 1485,
	128, 1485,
	130, 1485,
	133, 1485,
	135, 1485,
	136, 1485,
	138, 1485,
	141, 1485,
	142, 1485,
	145, 1485,
	146, 1485,
	147, 1485,
	148, 1485,
	149, 1485,
	150, 1485,
	151, 1485,
	152, 1485,
	154, 1485,
	156, 1485,
	157, 1485,
	158, 1485,
	159, 1485,
	160, 1485,
	161, 1485,
	162, 1485,
	163, 1485,
	164, 1485,
	166, 1485,
	168, 1485,
	169, 1485,
	170, 1485,
	171, 1485,
	172, 1485,
	173, 1485,
	174, 1485,
	175, 1485,
	176, 1485,
	177, 1485,
	179, 1485,
	180, 1485,
	182, 1485,
	183, 1485,
	184, 1485,
	185, 1485,
	186, 1485,
	188, 1485,
	189, 1485,
	192, 1485,
	193, 1485,
	194, 1485,
	196, 1485,
	197, 1485,
	198, 1485,
	199, 1485,
	200, 1485,
	201, 1485,
	202, 1485,
	203, 1485,
	204, 1485,
	205, 1485,
	209, 1485,
	210, 1485,
	211, 1485,
	212, 1485,
	213, 1485,
	215, 1485,
	218, 1485,
	219, 1485,
	221, 1485,
	222, 1485,
	224, 1485,
	226, 1485,
	227, 1485,
	228, 1485,
	229, 1485,
	230, 1485,
	231, 1485,
	233, 1485,
	234, 1485,
	235, 1485,
	236, 1485,
	237, 1485,
	239, 1485,
	240, 1485,
	241, 1485,
	242, 1485,
	243, 1485,
	244, 1485,
	245, 1485,
	246, 1485,
	248, 1485,
	249, 1485,
	250, 1485,
	251, 1485,
	252, 1485,
	253, 1485,
	254, 1485,
	255, 1485,
	256, 1485,
	257, 1485,
	258, 1485,
	259, 1485,
	260, 1485,
	262, 1485,
	263, 1485,
	264, 1485,
	265, 1485,
	266, 1485,
	267, 1485,
	268, 1485,
	269, 1485,
	270, 1485,
	271, 1485,
	272, 1485,
	273, 1485,
	275, 1485,
	276, 1485,
	277, 1485,
	278, 1485,
	279, 1485,
	280, 1485,
	282, 1485,
	283, 1485,
	284, 1485,
	285, 1485,
	286, 1485,
	287, 1485,
	288, 1485,
	289, 1485,
	290, 1485,
	292, 1485,
	293, 1485,
	294, 1485,
	295, 1485,
	296, 1485,
	297, 1485,
	298, 1485,
	299, 1485,
	300, 1485,
	301, 1485,
	303, 1485,
	305, 1485,
	306, 1485,
	307, 1485,
	308, 1485,
	309, 1485,
	310, 1485,
	311, 1485,
	312, 1485,
	314, 1485,
	315, 1485,
	316, 1485,
	319, 1485,
	320, 1485,
	321, 1485,
	322, 1485,
	324, 1485,
	325, 1485,
	326, 1485,
	327, 1485,
	330, 1485,
	331, 1485,
	332, 1485,
	333, 1485,
	335, 1485,
	337, 1485,
	338, 1485,
	339, 1485,
	340, 1485,
	341, 1485,
	342, 1485,
	345, 1485,
	350, 1485,
	351, 1485,
	352, 1485,
	353, 1485,
	354, 1485,
	355, 1485,
	356, 1485,
	358, 1485,
	359, 1485,
	360, 1485,
	361, 1485,
	362, 1485,
	363, 1485,
	364, 1485,
	365, 1485,
	367, 1485,
	368, 1485,
	369, 1485,
	370, 1485,
	371, 1485,
	372, 1485,
	373, 1485,
	374, 1485,
	375, 1485,
	377, 1485,
	380, 1485,
	381, 1485,
	384, 1485,
	385, 1485,
	-2, 0,
	-1, 950,
	132, 1386,
	317, 1386,
	360, 1386,
	381, 1386,
	-2, 0,
	-1, 967,
	132, 1409,
	317, 1409,
	360, 1409,
	381, 1409,
	-2, 0,
	-1, 968,
	169, 622,
	239, 622,
	243, 622,
	-2, 316,
	-1, 1040,
	117, 718,
	187, 718,
	214, 718,
	-2, 680,
	-1, 1119,
	107, 684,
	117, 684,
	165, 684,
	187, 684,
	214, 684,
	220, 684,
	328, 684,
	-2, 1027,
	-1, 1129,
	379, 1228,
	-2, 1216,
	-1, 1147,
	380, 1140,
	-2, 0,
	-1, 1171,
	169, 622,
	239, 622,
	243, 622,
	-2, 617,
	-1, 1199,
	380, 1140,
	-2, 0,
	-1, 1203,
	107, 684,
	117, 684,
	165, 684,
	187, 684,
	214, 684,
	220, 684,
	328, 684,
	-2, 780,
	-1, 1346,
	169, 622,
	239, 622,
	243, 622,
	-2, 318,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 933,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 934,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 935,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 936,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 937,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 938,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 939,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 940,
	-1, 1464,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 949,
	-1, 1465,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 950,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 951,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 956,
	-1, 1475,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 958,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 962,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 963,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 964,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 965,
	-1, 1549,
	132, 1151,
	379, 1251,
	-2, 1244,
	-1, 1550,
	132, 1152,
	-2, 1426,
	-1, 1551,
	132, 1153,
	-2, 1330,
	-1, 1552,
	132, 1154,
	-2, 1291,
	-1, 1553,
	132, 1155,
	-2, 1308,
	-1, 1554,
	132, 1156,
	-2, 1329,
	-1, 1555,
	132, 1157,
	-2, 1382,
	-1, 1631,
	1, 781,
	74, 781,
	107, 781,
	117, 781,
	133, 781,
	137, 781,
	139, 781,
	156, 781,
	165, 781,
	172, 781,
	183, 781,
	187, 781,
	201, 781,
	214, 781,
	216, 781,
	220, 781,
	261, 781,
	263, 781,
	328, 781,
	336, 781,
	347, 781,
	348, 781,
	357, 781,
	378, 781,
	380, 781,
	382, 781,
	383, 781,
	384, 781,
	-2, 780,
	-1, 1777,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 957,
	-1, 1778,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 959,
	-1, 1783,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 960,
	-1, 1801,
	225, 1111,
	-2, 1113,
	-1, 2033,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 961,
	-1, 2038,
	168, 0,
	-2, 977,
	-1, 2047,
	225, 1112,
	-2, 1114,
	-1, 2089,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1004,
	-1, 2090,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1005,
	-1, 2091,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1006,
	-1, 2095,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1010,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1011,
	-1, 2097,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1012,
	-1, 2229,
	168, 0,
	-2, 978,
	-1, 2232,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 981,
	-1, 2233,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 983,
	-1, 2353,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 982,
	-1, 2354,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 984,
	-1, 2361,
	168, 0,
	-2, 1013,
	-1, 2438,
	168, 0,
	-2, 1014,
	-1, 2519,
	36, 0,
	149, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 1429,
	-1, 2605,
	379, 1497,
	-2, 493,
}

const sqlPrivate = 57344

const sqlLast = 44595

var sqlAct = [...]int{

	649, 2587, 2601, 2324, 2323, 2602, 2585, 2527, 2491, 2518,
	2182, 1698, 2528, 2568, 2387, 2012, 2443, 2529, 1677, 1706,
	1243, 2066, 2334, 608, 2517, 2192, 647, 646, 74, 988,
	1251, 1340, 2283, 2297, 1626, 592, 1978, 642, 1286, 2148,
	1341, 2216, 183, 2214, 753, 2367, 1771, 183, 2149, 1197,
	2208, 2263, 1915, 1867, 883, 1894, 183, 780, 1707, 625,
	1180, 1201, 1247, 475, 26, 183, 1680, 1644, 2119, 1635,
	183, 183, 1986, 1125, 183, 1902, 1670, 183, 460, 1866,
	1681, 1695, 1676, 1627, 1812, 183, 1422, 1427, 1767, 1504,
	971, 1505, 600, 124, 1371, 1239, 1043, 1753, 1209, 1211,
	1181, 1980, 1264, 1513, 619, 1489, 1529, 1578, 1492, 920,
	529, 1287, 1367, 457, 759, 639, 970, 1161, 1523, 1157,
	1678, 990, 917, 931, 1700, 1684, 910, 762, 1188, 1600,
	741, 1114, 1613, 1545, 509, 618, 183, 183, 1042, 125,
	1370, 1044, 174, 641, 183, 1171, 487, 1258, 907, 522,
	1170, 179, 526, 739, 2298, 126, 597, 550, 124, 1048,
	2133, 1800, 1266, 2134, 1266, 1266, 1699, 2325, 2325, 1198,
	183, 183, 183, 183, 782, 2031, 2618, 2617, 183, 183,
	2611, 2611, 2610, 2564, 1206, 2563, 2611, 1234, 2562, 1234,
	2544, 2539, 1234, 1671, 2296, 1721, 41, 871, 2538, 596,
	2535, 2515, 1721, 1995, 1234, 1736, 2514, 596, 26, 44,
	1736, 591, 2486, 501, 2481, 2477, 1729, 2469, 2348, 1234,
	2122, 2296, 2440, 2418, 606, 2415, 1729, 2296, 2413, 1234,
	2398, 2397, 2296, 1996, 1234, 2296, 2375, 124, 2372, 2355,
	1234, 2319, 1234, 1729, 2317, 1721, 2295, 1602, 1721, 2276,
	2296, 1837, 1838, 1234, 1855, 1856, 1857, 2231, 2207, 2202,
	1526, 1729, 1675, 1675, 589, 2129, 2042, 2228, 2006, 2130,
	1721, 1966, 1967, 482, 1891, 1234, 1671, 1884, 1234, 2623,
	588, 1885, 777, 184, 767, 771, 601, 1882, 1881, 1880,
	743, 1721, 1721, 1721, 1804, 1230, 2609, 1740, 1059, 1060,
	1805, 1721, 1728, 1736, 1852, 1721, 1729, 67, 2487, 40,
	1720, 1674, 1527, 1607, 1721, 1675, 1703, 1606, 1736, 2348,
	41, 1062, 2619, 2598, 1506, 1279, 2122, 1601, 756, 1280,
	2023, 1059, 1060, 44, 1089, 1090, 1091, 1099, 1100, 1101,
	745, 1633, 746, 2102, 2044, 1061, 1234, 1092, 1967, 1770,
	1751, 141, 1349, 1175, 1062, 1508, 869, 1103, 952, 52,
	144, 875, 141, 1721, 949, 948, 1528, 1525, 1843, 1910,
	947, 1811, 946, 1267, 945, 1267, 1267, 2299, 1061, 944,
	943, 143, 942, 941, 1081, 940, 939, 938, 63, 1368,
	747, 1078, 143, 68, 744, 64, 582, 482, 65, 581,
	580, 548, 547, 546, 545, 544, 543, 542, 541, 1858,
	540, 539, 538, 537, 536, 1067, 535, 534, 142, 128,
	70, 183, 71, 183, 183, 183, 135, 183, 533, 142,
	599, 67, 183, 136, 1853, 532, 141, 517, 183, 1084,
	1085, 1086, 1087, 1530, 481, 516, 515, 104, 1067, 514,
	513, 183, 183, 183, 183, 183, 127, 783, 448, 1542,
	934, 447, 446, 445, 444, 429, 143, 127, 428, 40,
	1096, 1104, 419, 924, 418, 417, 416, 409, 408, 167,
	41, 1082, 183, 705, 166, 1995, 165, 164, 597, 1102,
	163, 162, 161, 44, 160, 159, 183, 141, 1272, 1601,
	1265, 1402, 158, 142, 157, 156, 155, 1094, 154, 1854,
	153, 135, 183, 152, 1082, 151, 150, 68, 136, 52,
	149, 148, 183, 1524, 147, 146, 145, 143, 1374, 1540,
	1202, 887, 983, 889, 1538, 893, 1059, 1060, 1536, 2591,
	1093, 127, 1969, 128, 70, 2589, 71, 707, 63, 1734,
	1283, 2534, 909, 934, 1055, 64, 1083, 482, 65, 1062,
	141, 913, 913, 2586, 142, 1755, 2516, 2501, 481, 882,
	2496, 104, 135, 2435, 1088, 2416, 2262, 2261, 914, 136,
	2257, 932, 2256, 1061, 183, 2341, 2249, 2248, 2247, 1083,
	143, 67, 2243, 986, 2242, 2241, 2240, 2234, 2213, 1849,
	1850, 1851, 1702, 1126, 2116, 2111, 953, 1097, 1848, 1846,
	1847, 1839, 1840, 1841, 1842, 1844, 1845, 1837, 1838, 2110,
	1855, 1856, 1857, 2109, 1041, 981, 2052, 142, 1965, 1922,
	1918, 1889, 1886, 2227, 1874, 135, 1865, 1836, 1833, 1832,
	1830, 1817, 136, 1816, 1801, 1631, 1055, 1200, 1133, 1500,
	754, 1054, 597, 1067, 1199, 2612, 880, 784, 1063, 1064,
	1065, 1066, 1068, 1069, 1126, 127, 1117, 2008, 2596, 968,
	1852, 965, 2576, 1040, 2575, 1250, 1095, 68, 2068, 1073,
	1074, 1080, 1079, 1075, 1076, 1077, 1098, 2506, 1072, 1070,
	1071, 1063, 1064, 1065, 1066, 1068, 1069, 2505, 1036, 1731,
	2446, 875, 141, 128, 70, 2258, 71, 2504, 2472, 984,
	1059, 1060, 2464, 2608, 2463, 2454, 1099, 1100, 1101, 2452,
	141, 2430, 2429, 1059, 1060, 1389, 2428, 2384, 481, 2363,
	2349, 104, 143, 1062, 1843, 2328, 1103, 2316, 2302, 183,
	589, 183, 1908, 935, 1837, 1838, 1062, 2254, 2340, 2190,
	143, 2188, 1369, 1766, 1051, 1052, 588, 1061, 2187, 2185,
	1056, 1765, 1501, 1081, 183, 183, 2157, 2156, 1935, 142,
	1061, 2137, 2125, 2037, 1955, 1858, 2010, 135, 1949, 1186,
	1935, 1934, 1920, 1890, 136, 1864, 1826, 142, 1825, 1129,
	1822, 1179, 597, 1797, 1792, 135, 1494, 1162, 1165, 1618,
	1853, 1590, 136, 1534, 1159, 1160, 1163, 127, 1059, 1060,
	1184, 1242, 755, 1178, 1169, 1155, 1166, 1154, 1084, 1085,
	1086, 1087, 1153, 1152, 1151, 127, 1150, 1067, 1149, 1359,
	1358, 1062, 1368, 1365, 1148, 1147, 935, 1541, 1146, 1145,
	1067, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1096,
	1104, 124, 1130, 1118, 1117, 1061, 1284, 964, 956, 928,
	2347, 1843, 2236, 2212, 2132, 2128, 1803, 1619, 1115, 934,
	183, 1200, 1196, 1174, 1739, 1854, 782, 1837, 1838, 1981,
	1172, 2351, 183, 1219, 1039, 2350, 1094, 1202, 2344, 2135,
	1997, 1204, 1167, 1082, 1176, 1671, 183, 1168, 1065, 1066,
	1068, 1069, 183, 881, 183, 1034, 183, 1539, 980, 1232,
	183, 1355, 1537, 1958, 1249, 1952, 1535, 1738, 1362, 1948,
	1888, 1887, 1776, 1406, 977, 1135, 2013, 1853, 1248, 2368,
	1699, 2069, 1808, 1235, 1514, 1158, 2594, 1241, 2593, 1991,
	1837, 1838, 2144, 936, 2499, 1028, 1725, 1212, 1121, 1213,
	1187, 183, 183, 1088, 2560, 2476, 2559, 2020, 934, 1255,
	183, 2310, 1741, 183, 2409, 1849, 1850, 1851, 1083, 734,
	2408, 2406, 2405, 2176, 1848, 1846, 1847, 1839, 1840, 1841,
	1842, 1844, 1845, 1526, 782, 1029, 1097, 2606, 2173, 732,
	2141, 1334, 1020, 183, 1293, 730, 1637, 736, 183, 1212,
	727, 1213, 1854, 183, 183, 2168, 183, 2140, 183, 1191,
	183, 2322, 183, 1821, 1363, 1364, 909, 1269, 1820, 1819,
	1271, 1233, 1132, 183, 1274, 1837, 1838, 755, 1214, 183,
	183, 1818, 1194, 1779, 1724, 1527, 936, 1212, 934, 1213,
	1666, 1375, 1220, 1662, 1659, 1476, 1356, 1732, 1189, 1173,
	1257, 1594, 868, 1260, 1593, 1095, 1437, 1843, 183, 1192,
	1696, 434, 782, 1400, 1217, 1098, 584, 1072, 1070, 1071,
	1063, 1064, 1065, 1066, 1068, 1069, 2180, 1190, 1403, 2475,
	1214, 1037, 1218, 1063, 1064, 1065, 1066, 1068, 1069, 1528,
	1525, 2181, 1904, 978, 1281, 1962, 1399, 1293, 1293, 1282,
	965, 1491, 1342, 1376, 1839, 1840, 1841, 1842, 1844, 1845,
	124, 1228, 1487, 1346, 496, 1343, 1491, 1237, 1214, 1436,
	1372, 1360, 435, 1853, 587, 595, 2389, 1227, 1485, 449,
	1058, 1390, 1379, 1837, 1838, 2512, 979, 706, 1401, 1193,
	488, 1409, 1843, 1645, 1200, 1383, 597, 2009, 963, 1225,
	1380, 597, 935, 1261, 2159, 1530, 1384, 2551, 1385, 783,
	1386, 1637, 1387, 493, 1388, 1014, 1530, 1226, 1278, 489,
	1636, 1428, 1435, 1069, 183, 1514, 183, 1837, 1838, 183,
	1407, 1394, 1396, 594, 1241, 1408, 1852, 1957, 589, 2559,
	183, 589, 589, 1837, 1838, 1369, 1366, 1599, 1854, 782,
	1511, 490, 183, 2025, 1418, 1015, 183, 1419, 1420, 183,
	1426, 1481, 1903, 183, 453, 586, 1038, 183, 1509, 1482,
	1648, 1483, 2019, 183, 492, 1488, 2578, 1837, 1838, 587,
	183, 782, 1946, 1988, 597, 183, 2483, 1266, 596, 1573,
	612, 935, 1845, 183, 1498, 1502, 1524, 1398, 1499, 1496,
	1843, 183, 1789, 1277, 2166, 2531, 1621, 1033, 2062, 1620,
	1951, 2484, 183, 1223, 183, 1215, 183, 783, 1787, 183,
	1210, 183, 168, 183, 183, 1563, 183, 183, 1556, 1221,
	452, 934, 1656, 1649, 1651, 183, 2457, 728, 1668, 1344,
	1664, 1624, 421, 1638, 1843, 1719, 437, 436, 610, 1847,
	1839, 1840, 1841, 1842, 1844, 1845, 1597, 728, 1596, 1019,
	1843, 1989, 738, 729, 1605, 737, 1853, 1215, 728, 1611,
	2021, 935, 1701, 2291, 1701, 1615, 1616, 1647, 1156, 1768,
	1769, 1654, 1027, 1204, 2160, 1530, 1484, 1660, 1641, 1667,
	1691, 491, 2550, 1486, 1843, 783, 593, 2588, 2571, 2586,
	2532, 1784, 936, 2465, 2390, 1215, 1988, 171, 2024, 784,
	1853, 1785, 2292, 410, 1727, 1790, 2412, 993, 585, 974,
	2059, 1781, 124, 2359, 1610, 782, 1713, 426, 124, 913,
	1744, 913, 1716, 183, 2325, 1705, 1490, 1841, 1842, 1844,
	1845, 1854, 1746, 1722, 1112, 1714, 1717, 1715, 494, 183,
	183, 183, 932, 183, 1723, 1726, 1224, 2466, 1824, 2533,
	1853, 1057, 1733, 1614, 1378, 1747, 495, 1735, 1646, 1634,
	2026, 2223, 1630, 172, 2060, 596, 183, 1745, 2530, 962,
	1046, 451, 1752, 1001, 603, 1854, 575, 2579, 1047, 975,
	1163, 936, 1166, 976, 1961, 2558, 2556, 1121, 1267, 2549,
	2333, 1187, 1693, 959, 605, 1516, 1160, 1159, 951, 2098,
	2400, 454, 2584, 575, 2399, 1742, 2382, 784, 1548, 1548,
	1561, 450, 2449, 2143, 1581, 2287, 1786, 2288, 1585, 1586,
	1588, 605, 783, 1788, 124, 1854, 2252, 604, 2306, 1931,
	1848, 1846, 1847, 1839, 1840, 1841, 1842, 1844, 1845, 1024,
	1045, 1530, 654, 2569, 1328, 1756, 2058, 2290, 2309, 1758,
	1191, 1927, 173, 1497, 783, 2308, 2293, 1760, 1694, 576,
	1347, 936, 1256, 597, 1245, 1244, 1764, 1047, 2492, 1473,
	1393, 411, 1414, 1194, 1848, 1846, 1847, 1839, 1840, 1841,
	1842, 1844, 1845, 1350, 2193, 784, 576, 2597, 1916, 1189,
	443, 885, 1810, 1839, 1840, 1841, 1842, 1844, 1845, 2570,
	1192, 1046, 969, 884, 935, 422, 2099, 2335, 2383, 1025,
	438, 176, 2100, 1937, 169, 506, 1936, 2583, 1190, 1780,
	876, 878, 2572, 1782, 1905, 1846, 1847, 1839, 1840, 1841,
	1842, 1844, 1845, 1609, 420, 485, 709, 597, 2289, 2253,
	1796, 2305, 412, 183, 782, 994, 1354, 1328, 1328, 183,
	183, 1415, 1892, 183, 170, 1774, 1807, 1898, 183, 427,
	1608, 183, 1917, 974, 423, 1026, 1059, 1060, 2307, 183,
	1899, 1045, 577, 594, 424, 183, 183, 183, 504, 1191,
	1193, 183, 1471, 1474, 183, 995, 488, 1002, 992, 1062,
	183, 183, 183, 183, 183, 1912, 895, 1352, 783, 577,
	183, 1897, 1194, 183, 906, 2183, 954, 183, 498, 493,
	1353, 2326, 958, 1061, 904, 489, 183, 2380, 1612, 1470,
	1293, 1911, 784, 1871, 1872, 1873, 183, 974, 183, 1192,
	183, 183, 1960, 1921, 183, 480, 34, 3, 183, 610,
	2120, 1907, 1893, 183, 2264, 183, 1533, 490, 2381, 2362,
	2251, 602, 183, 578, 784, 2179, 1968, 1293, 1970, 1947,
	1868, 1928, 2036, 479, 33, 183, 934, 1954, 1963, 974,
	492, 597, 873, 1923, 1023, 478, 30, 934, 183, 726,
	578, 477, 80, 1067, 874, 1831, 579, 476, 79, 870,
	473, 22, 1971, 1945, 1932, 1012, 1975, 975, 474, 23,
	985, 976, 575, 1791, 936, 1737, 2005, 1293, 1869, 1193,
	472, 28, 1673, 579, 1665, 183, 1658, 2014, 1993, 1472,
	605, 439, 1107, 1108, 1109, 1110, 1111, 1896, 471, 20,
	1032, 1932, 1120, 1900, 1901, 1984, 1031, 1906, 1990, 975,
	1972, 1973, 1128, 976, 1010, 1008, 503, 1998, 1006, 1082,
	469, 19, 470, 18, 464, 15, 957, 1999, 2000, 1795,
	2001, 2002, 2004, 1004, 440, 183, 1798, 465, 16, 905,
	1293, 2039, 2018, 2016, 2017, 2015, 497, 1018, 1761, 903,
	34, 2007, 765, 1814, 1815, 576, 2022, 491, 1391, 2054,
	2055, 2056, 2027, 1382, 441, 1136, 442, 2029, 784, 463,
	14, 1532, 468, 12, 1022, 998, 1293, 1293, 33, 902,
	462, 10, 731, 733, 1231, 1293, 1293, 467, 7, 2048,
	30, 2526, 2489, 2280, 1083, 1011, 80, 783, 2164, 2043,
	2045, 2162, 79, 1863, 2142, 22, 466, 6, 461, 5,
	1581, 1581, 1581, 23, 494, 1876, 183, 1977, 1293, 1697,
	2423, 2070, 183, 1690, 2075, 28, 2072, 1182, 1182, 1689,
	2104, 183, 183, 1276, 610, 2077, 2061, 2063, 2064, 1979,
	1275, 1273, 1270, 20, 1009, 1007, 1268, 1229, 1005, 2138,
	1428, 2073, 1222, 2049, 1216, 750, 2131, 2105, 2560, 1428,
	2078, 1049, 2346, 1003, 2345, 19, 2103, 18, 577, 15,
	1373, 2209, 2154, 2153, 1017, 751, 2425, 2123, 183, 2118,
	183, 2121, 16, 1653, 483, 2178, 2201, 2124, 183, 708,
	2136, 934, 2108, 124, 1070, 1071, 1063, 1064, 1065, 1066,
	1068, 1069, 1772, 2189, 1637, 997, 183, 183, 1669, 901,
	2186, 2146, 651, 1652, 14, 2139, 2203, 12, 2169, 935,
	2195, 1661, 2174, 1657, 183, 10, 2167, 484, 2177, 1762,
	935, 2206, 7, 996, 183, 782, 183, 183, 1050, 1637,
	1404, 1405, 782, 2459, 2184, 2299, 2437, 485, 1650, 578,
	2411, 6, 752, 5, 2163, 2196, 2165, 505, 2265, 2199,
	1053, 2155, 2205, 1663, 2204, 1655, 2197, 2210, 1773, 2488,
	2198, 1059, 1060, 2331, 2170, 1059, 1060, 1704, 2170, 183,
	1692, 1688, 579, 1598, 2170, 1293, 2230, 2225, 1345, 1285,
	2567, 2194, 2220, 2582, 1062, 1837, 1838, 784, 488, 2226,
	2127, 1059, 1060, 2374, 1327, 1749, 1748, 2270, 2211, 2117,
	2065, 1749, 2011, 1913, 1883, 1750, 1595, 1592, 1061, 1591,
	1522, 493, 1061, 1123, 2238, 2057, 1974, 489, 1133, 1131,
	1030, 1021, 1016, 183, 1013, 999, 183, 961, 1348, 2250,
	583, 2388, 486, 1381, 1000, 1909, 782, 183, 183, 1617,
	2482, 183, 183, 183, 2268, 2244, 1823, 610, 610, 490,
	2442, 2358, 1531, 1134, 56, 2151, 2275, 628, 183, 2281,
	2145, 1683, 1682, 183, 785, 183, 1357, 183, 183, 183,
	650, 2274, 492, 1547, 183, 2267, 2304, 183, 2269, 1429,
	934, 1896, 725, 2154, 2153, 2300, 2271, 652, 183, 183,
	1328, 1290, 653, 2272, 1291, 934, 2303, 1327, 1327, 1164,
	2112, 640, 1288, 929, 1708, 1361, 2329, 1495, 1512, 936,
	1806, 2321, 2154, 2153, 1411, 1127, 1416, 2154, 2153, 620,
	936, 632, 1423, 2279, 2337, 2327, 631, 1328, 1510, 955,
	2332, 1914, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 935, 1475, 2342, 1477, 1478, 1479,
	1480, 2330, 2155, 2352, 2172, 2357, 2343, 1328, 2338, 1987,
	2175, 183, 2339, 183, 1503, 782, 183, 1413, 1417, 491,
	1763, 1120, 1293, 2364, 183, 2336, 624, 1410, 1983, 2161,
	782, 2155, 425, 1834, 927, 1570, 2155, 2266, 783, 1562,
	1543, 1544, 1558, 2371, 1560, 783, 1572, 1574, 1579, 1582,
	1583, 1584, 1035, 2154, 2153, 1185, 1113, 1709, 982, 1994,
	1730, 2373, 1177, 1421, 183, 749, 748, 934, 2595, 1351,
	1328, 183, 2378, 413, 2392, 2391, 494, 2394, 1293, 183,
	183, 934, 934, 1241, 1743, 2154, 2153, 2393, 1106, 2424,
	1105, 2376, 735, 2451, 973, 972, 2421, 1246, 2414, 183,
	1930, 2577, 2458, 2158, 183, 2422, 1328, 1328, 2498, 140,
	137, 183, 2410, 139, 138, 1328, 1328, 1564, 1959, 2426,
	2431, 2433, 2434, 2432, 2436, 2417, 83, 32, 2453, 31,
	634, 1293, 2439, 103, 102, 101, 183, 183, 2445, 100,
	2447, 2448, 2155, 183, 2403, 2404, 99, 98, 1328, 783,
	97, 934, 2402, 96, 95, 94, 183, 2470, 2468, 2455,
	934, 934, 2456, 2471, 93, 92, 91, 2420, 2170, 90,
	760, 89, 180, 2462, 2155, 88, 87, 414, 2474, 86,
	2473, 85, 1186, 183, 527, 183, 430, 597, 183, 1292,
	782, 2479, 2480, 935, 936, 455, 769, 773, 524, 779,
	499, 180, 82, 2494, 507, 81, 29, 512, 935, 2507,
	25, 107, 2509, 24, 2508, 531, 78, 77, 183, 2513,
	27, 17, 11, 21, 61, 62, 60, 2511, 59, 2154,
	2153, 58, 2495, 13, 2524, 183, 183, 183, 784, 2523,
	2525, 54, 2510, 183, 53, 784, 51, 2500, 2536, 2543,
	50, 49, 48, 2540, 2541, 2542, 47, 183, 9, 2548,
	2546, 2547, 2545, 106, 45, 8, 742, 742, 43, 42,
	105, 119, 2557, 116, 414, 2561, 2555, 118, 115, 117,
	121, 120, 113, 1330, 111, 112, 114, 2566, 110, 2565,
	109, 122, 1292, 1292, 39, 38, 37, 36, 783, 2574,
	414, 414, 775, 414, 2573, 35, 2580, 2581, 180, 872,
	2, 1, 0, 783, 0, 1328, 0, 782, 2155, 782,
	2370, 1059, 1060, 0, 0, 0, 0, 0, 0, 2599,
	2600, 0, 0, 0, 0, 2607, 0, 0, 0, 0,
	0, 2613, 0, 0, 1062, 2616, 2614, 2615, 0, 784,
	935, 2622, 2620, 2621, 0, 2624, 0, 2396, 0, 0,
	0, 0, 0, 0, 935, 935, 0, 0, 1061, 1777,
	1778, 2407, 0, 0, 2590, 1783, 2592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 1330, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 1837, 1838, 0,
	1855, 1856, 1857, 0, 0, 0, 0, 1802, 936, 0,
	0, 0, 0, 1809, 0, 0, 1813, 0, 0, 0,
	0, 0, 0, 2291, 0, 0, 2284, 0, 0, 0,
	0, 0, 0, 1827, 935, 0, 0, 2282, 1067, 0,
	0, 0, 2286, 935, 935, 0, 0, 0, 0, 0,
	1852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1564, 1564, 2292, 0, 773, 0, 0, 1120, 0, 0,
	0, 0, 0, 783, 1579, 1579, 1579, 0, 0, 779,
	0, 0, 0, 0, 0, 2285, 0, 0, 0, 0,
	0, 0, 2485, 0, 0, 1793, 1794, 0, 784, 0,
	1182, 0, 0, 0, 1082, 610, 0, 0, 0, 0,
	1327, 0, 0, 784, 1843, 0, 0, 0, 2502, 2503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 1564, 1564, 1564, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	936, 531, 0, 531, 891, 531, 0, 896, 0, 0,
	0, 0, 899, 0, 936, 936, 0, 0, 414, 0,
	0, 1860, 1861, 1862, 0, 2287, 0, 2288, 0, 1083,
	1853, 531, 531, 414, 921, 872, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 1985, 0,
	783, 0, 783, 0, 0, 0, 0, 2290, 0, 0,
	773, 0, 531, 0, 0, 0, 2293, 0, 0, 0,
	2003, 0, 0, 0, 1837, 1838, 531, 1855, 1856, 1857,
	0, 0, 0, 0, 936, 0, 0, 610, 610, 0,
	2041, 1328, 960, 936, 936, 0, 0, 0, 0, 0,
	610, 0, 531, 0, 0, 1854, 1059, 1060, 0, 0,
	1327, 0, 0, 0, 2028, 0, 1329, 0, 0, 1423,
	0, 0, 0, 784, 0, 2032, 0, 1852, 2033, 1062,
	1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0, 1289,
	2038, 0, 0, 0, 0, 0, 1327, 1327, 2289, 2046,
	0, 0, 0, 1061, 0, 1327, 1327, 2050, 0, 0,
	2003, 0, 0, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2074, 0, 0, 0, 2076, 0, 0, 0, 1327, 629,
	75, 1843, 0, 0, 0, 1849, 1850, 1851, 0, 0,
	0, 1564, 1564, 0, 1848, 1846, 1847, 1839, 1840, 1841,
	1842, 1844, 1845, 0, 0, 0, 0, 2106, 2107, 1329,
	1329, 0, 0, 1067, 0, 0, 2113, 2114, 2115, 0,
	0, 0, 1858, 0, 0, 0, 2034, 2035, 0, 0,
	760, 1207, 1289, 1289, 0, 0, 0, 0, 0, 0,
	784, 0, 784, 2126, 0, 75, 0, 1853, 0, 0,
	1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
	1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 0,
	1564, 0, 0, 2147, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 2079, 2080, 2081, 2082, 2083,
	2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 590, 2101, 0, 598, 0, 512,
	0, 742, 0, 0, 0, 1292, 0, 0, 0, 0,
	0, 0, 1854, 761, 75, 0, 0, 1182, 0, 0,
	0, 0, 0, 0, 414, 414, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 1240, 0,
	0, 0, 1292, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 773, 0,
	1259, 0, 1259, 0, 0, 2229, 0, 0, 0, 2232,
	2233, 0, 0, 2235, 0, 0, 0, 0, 0, 0,
	2237, 0, 2239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1292, 0, 0, 0, 0, 0, 2246, 1330,
	0, 0, 1849, 1850, 1851, 0, 0, 0, 0, 0,
	0, 1848, 1846, 1847, 1839, 1840, 1841, 1842, 1844, 1845,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 2255, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 414, 1072, 1070, 1071, 1063, 1064, 1065, 1066,
	1068, 1069, 0, 0, 0, 1292, 1254, 0, 0, 0,
	0, 0, 414, 0, 414, 0, 414, 0, 0, 0,
	1262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2301, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 1292, 1292, 0, 0, 0, 0, 0, 0, 0,
	1292, 1292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 180, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	0, 0, 1327, 531, 0, 0, 2353, 2354, 531, 0,
	0, 0, 0, 180, 531, 0, 531, 0, 531, 0,
	531, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1392, 0, 1330, 1330, 2366, 458, 531,
	531, 0, 0, 2369, 1330, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 0,
	41, 0, 0, 0, 0, 0, 0, 1330, 0, 598,
	0, 0, 0, 44, 0, 0, 0, 2401, 0, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	0, 0, 1564, 0, 0, 0, 0, 0, 0, 52,
	0, 1327, 760, 0, 0, 1632, 0, 0, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 0, 0, 773,
	0, 0, 0, 0, 0, 0, 779, 2361, 63, 0,
	0, 0, 0, 1564, 0, 64, 0, 482, 65, 0,
	1292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2450, 0, 0, 0, 0, 1710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2385, 779,
	779, 67, 0, 0, 512, 0, 742, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 0, 0, 0, 0, 0, 0, 610, 0, 0,
	0, 0, 1629, 1564, 0, 0, 414, 0, 0, 414,
	590, 0, 0, 1642, 0, 0, 0, 414, 0, 0,
	0, 0, 1329, 414, 0, 0, 0, 0, 0, 0,
	414, 1116, 0, 1119, 1330, 1672, 0, 0, 2438, 0,
	1124, 0, 0, 1679, 0, 1289, 0, 0, 0, 0,
	0, 872, 2522, 2522, 0, 0, 0, 68, 0, 1329,
	0, 0, 414, 0, 1712, 0, 531, 40, 2537, 531,
	0, 531, 0, 414, 414, 0, 1718, 872, 41, 0,
	0, 0, 1289, 128, 70, 1642, 71, 0, 2522, 0,
	0, 44, 0, 0, 0, 1757, 779, 1759, 0, 773,
	141, 0, 0, 0, 0, 0, 0, 0, 481, 1329,
	0, 104, 0, 0, 0, 0, 0, 52, 0, 0,
	0, 0, 1775, 0, 0, 0, 0, 0, 0, 0,
	143, 0, 1289, 0, 0, 0, 2522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 0, 0, 64, 0, 482, 65, 1292, 0, 0,
	0, 0, 0, 0, 0, 2603, 0, 142, 75, 0,
	0, 0, 1329, 1203, 0, 135, 0, 2603, 0, 0,
	2603, 2603, 136, 1754, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 0, 0, 1289, 0, 0, 0, 414,
	414, 414, 0, 414, 0, 459, 0, 0, 1329, 1329,
	0, 0, 0, 1292, 0, 0, 0, 1329, 1329, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 1289, 1289, 0, 0, 0, 0, 0, 0, 0,
	1289, 1289, 1195, 0, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 1292, 0, 0, 41,
	0, 0, 0, 1289, 0, 68, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	1837, 1838, 0, 1855, 1856, 1857, 0, 0, 0, 760,
	0, 128, 70, 0, 71, 760, 760, 1330, 52, 760,
	0, 0, 0, 0, 0, 0, 1837, 1838, 141, 1855,
	1856, 1857, 0, 0, 0, 0, 481, 0, 0, 104,
	0, 1924, 2040, 0, 0, 0, 0, 63, 0, 0,
	0, 0, 0, 1852, 64, 0, 482, 65, 143, 0,
	0, 0, 0, 0, 0, 0, 1950, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 1852,
	0, 0, 1964, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	1976, 0, 0, 135, 0, 0, 0, 0, 0, 1240,
	136, 0, 0, 414, 0, 0, 0, 1843, 1240, 414,
	414, 0, 0, 414, 0, 0, 0, 1329, 1629, 0,
	0, 1629, 0, 127, 0, 0, 0, 75, 0, 1919,
	1859, 0, 0, 1843, 0, 414, 1925, 1926, 0, 0,
	1289, 1642, 0, 0, 1933, 0, 0, 0, 1858, 0,
	1938, 1939, 1941, 1943, 1944, 0, 0, 0, 590, 0,
	414, 590, 590, 1953, 0, 0, 68, 1956, 0, 0,
	0, 2030, 0, 1853, 1858, 0, 414, 1059, 1060, 0,
	0, 0, 0, 0, 0, 0, 1254, 0, 1254, 0,
	531, 531, 128, 70, 414, 71, 0, 0, 1982, 1853,
	1062, 0, 0, 414, 0, 1992, 0, 0, 0, 141,
	0, 0, 414, 0, 1493, 0, 0, 481, 0, 0,
	104, 0, 0, 0, 1061, 1754, 0, 598, 0, 0,
	1081, 0, 1119, 0, 0, 0, 0, 0, 1754, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 1854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1854, 414, 142, 0, 0, 0,
	0, 0, 0, 0, 135, 1084, 1085, 1086, 1087, 0,
	0, 136, 0, 0, 1067, 0, 0, 0, 0, 761,
	0, 0, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 1203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2067, 0, 0, 75, 0,
	0, 0, 0, 0, 1329, 0, 75, 0, 1849, 1850,
	1851, 0, 0, 0, 0, 0, 0, 1848, 1846, 1847,
	1839, 1840, 1841, 1842, 1844, 1845, 0, 1289, 0, 0,
	1082, 0, 0, 0, 1849, 1850, 1851, 0, 75, 0,
	75, 0, 0, 1848, 1846, 1847, 1839, 1840, 1841, 1842,
	1844, 1845, 0, 0, 0, 0, 0, 0, 0, 75,
	1329, 0, 1710, 760, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 1629, 1289, 0, 0, 0, 0, 0, 0,
	1088, 872, 1629, 2222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 2150, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 2171,
	0, 0, 0, 2171, 0, 0, 0, 0, 0, 2171,
	0, 0, 0, 0, 0, 0, 1289, 0, 1642, 0,
	1254, 0, 0, 0, 0, 0, 0, 0, 2191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 414, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2217, 0, 0, 0, 0, 760,
	0, 0, 0, 0, 2219, 0, 2221, 414, 0, 0,
	0, 0, 0, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2313, 0, 0, 0, 0, 0, 2245,
	2318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 0, 0, 0, 0,
	0, 0, 0, 1092, 1119, 0, 0, 0, 0, 0,
	1062, 0, 0, 1103, 0, 0, 0, 1837, 1838, 0,
	1855, 1856, 1857, 414, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 1629, 872, 0,
	1081, 2277, 2278, 1642, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2150, 872, 0,
	0, 0, 0, 2311, 0, 2312, 0, 414, 2314, 2315,
	1852, 0, 0, 0, 414, 0, 0, 2320, 1119, 0,
	0, 0, 0, 0, 0, 0, 2150, 0, 872, 1679,
	2386, 2150, 0, 0, 0, 1084, 1085, 1086, 1087, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 0, 761, 761,
	0, 0, 761, 0, 0, 0, 1096, 1104, 0, 0,
	2419, 0, 0, 0, 1843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 75, 0, 0, 0, 0,
	1082, 0, 0, 75, 0, 1858, 0, 0, 0, 0,
	0, 1642, 0, 2377, 0, 0, 2379, 0, 0, 0,
	0, 0, 0, 0, 414, 0, 1093, 2150, 75, 0,
	1853, 0, 75, 0, 0, 0, 0, 0, 0, 2467,
	0, 0, 598, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2171, 0, 0, 0, 0, 0, 2150,
	1088, 0, 0, 0, 414, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 1083, 0, 0, 0, 2217,
	2217, 0, 0, 0, 2497, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 2444,
	0, 0, 0, 0, 1629, 1854, 0, 0, 0, 0,
	0, 1254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2460, 2461, 0, 1710,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2478, 0, 0, 0,
	0, 0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075,
	1076, 1077, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 2493, 0, 872, 0, 0, 414, 0,
	0, 1879, 0, 0, 0, 1849, 1850, 1851, 0, 0,
	0, 0, 0, 2150, 1848, 1846, 1847, 1839, 1840, 1841,
	1842, 1844, 1845, 0, 0, 0, 0, 0, 2444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 872, 872, 872, 0, 0,
	0, 0, 0, 414, 0, 761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 648,
	637, 638, 635, 636, 627, 0, 761, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 1518, 187, 0,
	0, 0, 0, 665, 630, 0, 0, 0, 188, 189,
	190, 350, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 1519, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 761, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 75, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 406, 704, 1517, 0,
	343, 75, 0, 0, 0, 344, 345, 346, 347, 348,
	617, 0, 0, 0, 2427, 0, 0, 0, 0, 0,
	615, 0, 0, 0, 0, 613, 614, 1520, 0, 0,
	0, 0, 781, 0, 623, 1515, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	787, 187, 788, 789, 790, 791, 349, 792, 793, 794,
	795, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 796, 192, 356, 357, 193, 194, 797, 798, 358,
	359, 360, 799, 195, 361, 800, 786, 801, 196, 197,
	198, 0, 200, 201, 202, 199, 802, 203, 1119, 204,
	205, 803, 710, 206, 207, 208, 804, 805, 807, 806,
	808, 809, 810, 209, 210, 415, 211, 362, 212, 363,
	364, 811, 213, 812, 214, 813, 215, 814, 815, 216,
	217, 816, 218, 817, 0, 818, 365, 219, 221, 220,
	222, 366, 367, 819, 711, 820, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 821, 226, 822,
	823, 712, 824, 227, 371, 825, 372, 826, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 714, 827, 375,
	235, 828, 232, 829, 713, 233, 376, 234, 377, 378,
	379, 380, 381, 830, 382, 831, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 832, 243, 242, 833,
	385, 717, 244, 245, 718, 834, 246, 247, 835, 836,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 837, 838, 839, 387, 258, 388,
	259, 260, 840, 261, 841, 842, 262, 843, 844, 263,
	389, 721, 264, 722, 390, 265, 266, 267, 268, 269,
	845, 270, 391, 271, 392, 272, 846, 273, 274, 275,
	276, 277, 393, 278, 279, 847, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 848,
	292, 723, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 849, 305, 306, 395, 304, 307, 308, 850,
	309, 296, 297, 310, 724, 311, 396, 397, 312, 851,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	852, 320, 853, 321, 322, 323, 324, 325, 326, 327,
	328, 854, 400, 401, 402, 855, 856, 329, 330, 403,
	404, 857, 331, 332, 333, 334, 858, 859, 335, 336,
	337, 338, 860, 339, 861, 405, 340, 341, 342, 406,
	407, 862, 863, 343, 864, 865, 866, 867, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 0, 0, 0, 1622, 0, 0, 0, 0,
	0, 0, 0, 0, 1623, 185, 186, 787, 187, 788,
	789, 790, 791, 349, 792, 793, 794, 795, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 796, 192,
	356, 357, 193, 194, 797, 798, 358, 359, 360, 799,
	195, 361, 800, 786, 801, 196, 197, 198, 0, 200,
	201, 202, 199, 802, 203, 0, 204, 205, 803, 710,
	206, 207, 208, 804, 805, 807, 806, 808, 809, 810,
	209, 210, 415, 211, 362, 212, 363, 364, 811, 213,
	812, 214, 813, 215, 814, 815, 216, 217, 816, 218,
	817, 0, 818, 365, 219, 221, 220, 222, 366, 367,
	819, 711, 820, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 821, 226, 822, 823, 712, 824,
	227, 371, 825, 372, 826, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 714, 827, 375, 235, 828, 232,
	829, 713, 233, 376, 234, 377, 378, 379, 380, 381,
	830, 382, 831, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 832, 243, 242, 833, 385, 717, 244,
	245, 718, 834, 246, 247, 835, 836, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 837, 838, 839, 387, 258, 388, 259, 260, 840,
	261, 841, 842, 262, 843, 844, 263, 389, 721, 264,
	722, 390, 265, 266, 267, 268, 269, 845, 270, 391,
	271, 392, 272, 846, 273, 274, 275, 276, 277, 393,
	278, 279, 847, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 848, 292, 723, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 849,
	305, 306, 395, 304, 307, 308, 850, 309, 296, 297,
	310, 724, 311, 396, 397, 312, 851, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 852, 320, 853,
	321, 322, 323, 324, 325, 326, 327, 328, 854, 400,
	401, 402, 855, 856, 329, 330, 403, 404, 857, 331,
	332, 333, 334, 858, 859, 335, 336, 337, 338, 860,
	339, 861, 405, 340, 341, 342, 406, 407, 862, 863,
	343, 864, 865, 866, 867, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 781, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2273, 185, 186, 787, 187, 788, 789, 790,
	791, 349, 792, 793, 794, 795, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 796, 192, 356, 357,
	193, 194, 797, 798, 358, 359, 360, 799, 195, 361,
	800, 786, 801, 196, 197, 198, 0, 200, 201, 202,
	199, 802, 203, 0, 204, 205, 803, 710, 206, 207,
	208, 804, 805, 807, 806, 808, 809, 810, 209, 210,
	415, 211, 362, 212, 363, 364, 811, 213, 812, 214,
	813, 215, 814, 815, 216, 217, 816, 218, 817, 0,
	818, 365, 219, 221, 220, 222, 366, 367, 819, 711,
	820, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 821, 226, 822, 823, 712, 824, 227, 371,
	825, 372, 826, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 714, 827, 375, 235, 828, 232, 829, 713,
	233, 376, 234, 377, 378, 379, 380, 381, 830, 382,
	831, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 832, 243, 242, 833, 385, 717, 244, 245, 718,
	834, 246, 247, 835, 836, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 837,
	838, 839, 387, 258, 388, 259, 260, 840, 261, 841,
	842, 262, 843, 844, 263, 389, 721, 264, 722, 390,
	265, 266, 267, 268, 269, 845, 270, 391, 271, 392,
	272, 846, 273, 274, 275, 276, 277, 393, 278, 279,
	847, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 848, 292, 723, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 849, 305, 306,
	395, 304, 307, 308, 850, 309, 296, 297, 310, 724,
	311, 396, 397, 312, 851, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 852, 320, 853, 321, 322,
	323, 324, 325, 326, 327, 328, 854, 400, 401, 402,
	855, 856, 329, 330, 403, 404, 857, 331, 332, 333,
	334, 858, 859, 335, 336, 337, 338, 860, 339, 861,
	405, 340, 341, 342, 406, 407, 862, 863, 343, 864,
	865, 866, 867, 344, 345, 346, 347, 348, 0, 0,
	781, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1236, 185, 186, 787, 187,
	788, 789, 790, 791, 349, 792, 793, 794, 795, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 796,
	192, 356, 357, 193, 194, 797, 798, 358, 359, 360,
	799, 195, 361, 800, 786, 801, 196, 197, 198, 0,
	200, 201, 202, 199, 802, 203, 0, 204, 205, 803,
	710, 206, 207, 208, 804, 805, 807, 806, 808, 809,
	810, 209, 210, 415, 211, 362, 212, 363, 364, 811,
	213, 812, 214, 813, 215, 814, 815, 216, 217, 816,
	218, 817, 0, 818, 365, 219, 221, 220, 222, 366,
	367, 819, 711, 820, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 821, 226, 822, 823, 712,
	824, 227, 371, 825, 372, 826, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 714, 827, 375, 235, 828,
	232, 829, 713, 233, 376, 234, 377, 378, 379, 380,
	381, 830, 382, 831, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 832, 243, 242, 833, 385, 717,
	244, 245, 718, 834, 246, 247, 835, 836, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 837, 838, 839, 387, 258, 388, 259, 260,
	840, 261, 841, 842, 262, 843, 844, 263, 389, 721,
	264, 722, 390, 265, 266, 267, 268, 269, 845, 270,
	391, 271, 392, 272, 846, 273, 274, 275, 276, 277,
	393, 278, 279, 847, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 848, 292, 723,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	849, 305, 306, 395, 304, 307, 308, 850, 309, 296,
	297, 310, 724, 311, 396, 397, 312, 851, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 852, 320,
	853, 321, 322, 323, 324, 325, 326, 327, 328, 854,
	400, 401, 402, 855, 856, 329, 330, 403, 404, 857,
	331, 332, 333, 334, 858, 859, 335, 336, 337, 338,
	860, 339, 861, 405, 340, 341, 342, 406, 407, 862,
	863, 343, 864, 865, 866, 867, 344, 345, 346, 347,
	348, 648, 637, 638, 635, 636, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 665, 630, 0, 0, 0,
	188, 189, 190, 350, 680, 352, 681, 191, 682, 683,
	0, 192, 356, 357, 193, 194, 633, 664, 684, 685,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 686, 212, 687, 688,
	611, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 670, 0,
	320, 143, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 0, 329, 330, 671, 672,
	643, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 937, 704,
	0, 0, 343, 0, 0, 0, 135, 344, 345, 346,
	347, 348, 617, 136, 599, 0, 648, 637, 638, 635,
	636, 627, 615, 0, 0, 0, 0, 613, 614, 0,
	0, 0, 185, 186, 0, 187, 1122, 0, 0, 0,
	665, 630, 626, 0, 0, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 141, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 143, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 937, 704, 0, 0, 343, 0, 0,
	0, 135, 344, 345, 346, 347, 348, 617, 136, 648,
	637, 638, 635, 636, 627, 0, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 185, 186, 0, 187, 0,
	0, 1122, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 350, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 141,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 143,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 937, 704, 0, 0,
	343, 0, 0, 0, 135, 344, 345, 346, 347, 348,
	617, 136, 648, 637, 638, 635, 636, 627, 0, 0,
	615, 0, 0, 0, 0, 613, 614, 0, 185, 186,
	0, 187, 0, 0, 1122, 0, 665, 630, 0, 0,
	626, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 1575, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	1580, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 1576,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 1577, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 617, 607, 0, 648, 637, 638, 635,
	636, 627, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 0, 185, 186, 0, 187, 0, 623, 0, 0,
	665, 630, 0, 626, 0, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 611, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 609, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 617, 0, 648,
	637, 638, 635, 636, 627, 0, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 185, 186, 0, 187, 0,
	0, 623, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 350, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 2200, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 406, 704, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	617, 0, 648, 637, 638, 635, 636, 627, 0, 0,
	615, 0, 0, 0, 0, 613, 614, 1183, 185, 186,
	0, 187, 0, 0, 623, 0, 665, 630, 0, 0,
	626, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 1425, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 1424, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 617, 0, 648, 637, 638, 635, 636,
	627, 0, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 185, 186, 0, 187, 0, 0, 623, 0, 665,
	630, 0, 0, 626, 188, 189, 190, 350, 680, 352,
	681, 191, 682, 683, 0, 192, 356, 357, 193, 194,
	633, 664, 684, 685, 360, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 415, 211,
	686, 212, 687, 688, 611, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 621,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 616, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 609, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 622, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 662, 309, 296, 297, 310, 724, 311, 700,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 701,
	316, 317, 670, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 702, 703, 0, 0,
	329, 330, 671, 672, 643, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 663, 339, 0, 405, 340,
	341, 342, 406, 704, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 617, 0, 648, 637,
	638, 635, 636, 627, 0, 0, 615, 0, 0, 0,
	0, 613, 614, 0, 185, 186, 0, 187, 0, 0,
	623, 0, 665, 630, 0, 0, 626, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 2604, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 2605,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 617,
	0, 648, 637, 638, 635, 636, 627, 0, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 185, 186, 0,
	187, 0, 0, 623, 0, 665, 630, 0, 0, 626,
	188, 189, 190, 350, 680, 352, 681, 191, 682, 683,
	0, 192, 356, 357, 193, 194, 633, 664, 684, 685,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 686, 212, 687, 688,
	611, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 670, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 0, 329, 330, 671, 672,
	643, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 406, 704,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 617, 0, 648, 637, 638, 635, 636, 627,
	0, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	185, 186, 0, 187, 0, 0, 623, 0, 665, 630,
	0, 0, 626, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 2053, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 617, 0, 648, 637, 638,
	635, 636, 627, 0, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 185, 186, 0, 187, 0, 0, 623,
	0, 665, 630, 0, 0, 626, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 617, 0,
	648, 637, 638, 635, 636, 627, 0, 0, 615, 0,
	0, 0, 0, 613, 614, 1183, 185, 186, 0, 187,
	0, 0, 623, 0, 665, 630, 0, 0, 626, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 1580, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 1625, 0, 648, 637, 638, 635, 636, 627,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 0,
	185, 186, 0, 187, 0, 623, 0, 0, 665, 630,
	0, 626, 0, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 617, 1589, 0, 648, 637,
	638, 635, 636, 627, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 0, 185, 186, 0, 187, 0, 623,
	0, 0, 665, 630, 0, 626, 0, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 617,
	1587, 0, 648, 637, 638, 635, 636, 627, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 0, 185, 186,
	0, 187, 0, 623, 0, 0, 665, 630, 0, 626,
	0, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 617, 1571, 0, 648, 637, 638, 635,
	636, 627, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 0, 185, 186, 0, 187, 0, 623, 0, 0,
	665, 630, 0, 626, 0, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 617, 1559, 0,
	648, 637, 638, 635, 636, 627, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 0, 185, 186, 0, 187,
	0, 623, 0, 0, 665, 630, 0, 626, 0, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 1557, 0, 1549, 637, 638, 635, 636, 627,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 0,
	185, 186, 0, 187, 0, 623, 0, 0, 665, 630,
	0, 626, 0, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	1552, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 1553, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 1554, 1551, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 1555, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 1550, 348, 617, 1546, 0, 1549, 637,
	638, 635, 636, 627, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 0, 185, 186, 0, 187, 0, 623,
	0, 0, 665, 630, 0, 626, 0, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 1552, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 1553, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	1554, 1551, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 1555, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 1550, 348, 617,
	0, 648, 637, 638, 635, 636, 627, 0, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 185, 186, 0,
	187, 0, 0, 623, 0, 665, 630, 0, 0, 626,
	188, 189, 190, 350, 680, 352, 681, 191, 682, 683,
	0, 192, 356, 357, 193, 194, 633, 664, 684, 685,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 670, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 0, 329, 330, 671, 672,
	643, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 406, 704,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 617, 0, 648, 637, 638, 635, 636, 627,
	0, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	185, 186, 1412, 187, 1126, 0, 623, 0, 665, 630,
	0, 0, 626, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 617, 879, 0, 648, 637,
	638, 635, 636, 627, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 0, 185, 186, 0, 187, 0, 623,
	0, 0, 665, 630, 0, 626, 0, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 617,
	877, 0, 648, 637, 638, 635, 636, 627, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 0, 185, 186,
	0, 187, 0, 623, 0, 0, 665, 630, 0, 626,
	0, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 617, 0, 648, 637, 638, 635, 636,
	627, 0, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 185, 186, 0, 187, 0, 0, 623, 0, 665,
	630, 0, 0, 626, 188, 189, 190, 350, 680, 352,
	681, 191, 682, 683, 0, 192, 356, 357, 193, 194,
	633, 664, 684, 685, 360, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 2521, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 415, 211,
	686, 212, 687, 688, 0, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 621,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 616, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 622, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 662, 309, 296, 297, 310, 724, 311, 700,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 701,
	316, 317, 670, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 702, 703, 0, 0,
	329, 330, 671, 672, 643, 331, 332, 2520, 334, 0,
	0, 335, 336, 337, 338, 663, 339, 0, 405, 340,
	341, 342, 406, 704, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 617, 0, 648, 637,
	638, 635, 636, 627, 0, 0, 615, 0, 0, 0,
	0, 613, 614, 0, 185, 186, 0, 187, 0, 0,
	623, 0, 665, 630, 0, 0, 626, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 617,
	0, 648, 637, 638, 635, 636, 627, 0, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 185, 186, 0,
	187, 0, 0, 623, 0, 665, 630, 0, 0, 626,
	188, 189, 190, 2519, 680, 352, 681, 191, 682, 683,
	0, 192, 356, 357, 193, 194, 633, 664, 684, 685,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 2521, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 700, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 701, 316, 317, 670, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 702, 703, 0, 0, 329, 330, 671, 672,
	643, 331, 332, 2520, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 406, 704,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 617, 0, 648, 637, 638, 635, 636, 627,
	0, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	185, 186, 0, 187, 0, 0, 623, 0, 665, 630,
	0, 0, 626, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 0, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 1569, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 648, 637, 638,
	635, 636, 627, 0, 0, 1567, 0, 0, 0, 0,
	1565, 1566, 0, 185, 186, 0, 187, 0, 0, 1568,
	0, 665, 630, 0, 0, 626, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 0, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 0,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 1569,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	648, 637, 638, 635, 636, 627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 1568, 0, 665, 630, 0, 0, 626, 188,
	189, 190, 0, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 2521, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 0, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 0, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 0, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 2520, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 0, 187, 0, 0, 623, 0, 665, 0, 0,
	0, 626, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 664,
	358, 359, 360, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 666, 667, 0, 711, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 0, 0, 0, 674, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	671, 672, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 930, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 2152, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	786, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 711, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 141, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 724, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 143, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 937, 407, 0, 0, 343, 0, 0,
	0, 135, 344, 345, 346, 347, 348, 599, 136, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 127, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 764, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 141,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 143,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 937, 407, 0, 0,
	343, 0, 0, 0, 135, 344, 345, 346, 347, 348,
	0, 136, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 758, 0, 1205, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 764, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 141, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 143, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 937,
	407, 0, 0, 343, 0, 0, 0, 135, 344, 345,
	346, 347, 348, 599, 136, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 758, 0, 1205, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 141, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 143, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 937, 407, 0, 0, 343, 0, 0, 0,
	135, 344, 345, 346, 347, 348, 1895, 136, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	127, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 764, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 757,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 758, 0, 763, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 764, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 758, 0, 763, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 764, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 758, 0, 763, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 1238, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 1711, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 2068, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 648, 637, 638, 635, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 1208, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 0, 0, 684,
	685, 360, 0, 195, 361, 0, 786, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 0, 0, 645, 387, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 403,
	404, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 502, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 178, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 177, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 175, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 181, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 178,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 177, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 182, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 181, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 178,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 177, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 182, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 181, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 987, 0, 933,
	991, 0, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 786, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 711, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 724, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 933, 991,
	343, 0, 0, 989, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 786, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	711, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	724, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 933, 991, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 786, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 711,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 724,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 933, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	786, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 711, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 724, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 182, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 1645, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 1643,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 1687, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 1648, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 1685, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 1647,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	1686, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 182, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 1645, 195, 361, 0, 0, 1640,
	196, 197, 198, 0, 200, 201, 202, 199, 1643, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 1648, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 1639, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 1647, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 1646,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 908, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 764,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 770, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 772, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 764, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 766, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 768, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 764, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	433, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	432, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 431, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 182, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 1628, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	182, 2218, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 182,
	2218, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 2215, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 182, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 764, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 1397, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	1395, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 182, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 1377,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 528, 343, 182, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 966, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 530,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 525, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 1253, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 1252, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 528, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 966, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 530, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 525, 401, 402,
	0, 0, 329, 967, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 528, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	519, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 530, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 950, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 525,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 926,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 925, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 923, 343, 182, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 922, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 919, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 918, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 916, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	915, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 912, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 911, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 182, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 185, 186, 900, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 898, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 897, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	894, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 892, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 886, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 888,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 776, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 778, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 774, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	528, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 519, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 518, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 530, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 520, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 521, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 525, 401, 402, 0, 0, 329, 523, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 510, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 511,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 508, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 500, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 456, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 182,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 182, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 1942, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 182, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	1940, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 182, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 1929,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 182, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	511, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 182, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	1263, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 0, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 890, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 182, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 740, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 182, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 0, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 0,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 0, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 1059, 1060, 0, 1089, 1090, 1091, 1099, 1100,
	1101, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 0, 0, 0, 1061,
	0, 0, 0, 1092, 0, 1081, 0, 0, 0, 0,
	1062, 0, 1078, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1085, 1086, 1087, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 1104, 0, 0, 1084, 1085, 1086, 1087, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 1059, 1060, 0, 1089, 1090,
	1091, 1099, 1100, 1101, 0, 0, 1096, 1104, 1094, 0,
	0, 1092, 0, 0, 0, 1082, 0, 0, 1062, 0,
	0, 1103, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 1061, 1094, 0, 0, 0, 0, 1081, 0,
	1082, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 1085, 1086, 1087, 0, 1097, 0,
	1088, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 1104, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 1095, 1082, 0,
	1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098, 0, 1072,
	1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0,
	0, 0, 0, 0, 1093, 0, 1878, 0, 0, 0,
	0, 0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075,
	1076, 1077, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 0, 0, 0, 0, 0, 1088, 0,
	0, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 0, 0, 0,
	1092, 1097, 0, 0, 0, 0, 0, 1062, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077,
	1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068,
	1069, 0, 1084, 1085, 1086, 1087, 0, 0, 0, 1829,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 0, 1096, 1104, 1092, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 1061, 0, 0, 0,
	1094, 0, 1081, 1092, 0, 0, 0, 1082, 0, 1078,
	1062, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 1061, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 0, 0, 1067, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1096, 1104,
	0, 0, 0, 0, 0, 1084, 1085, 1086, 1087, 0,
	1097, 0, 0, 0, 1067, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 1096, 1104, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 1095,
	1082, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 0, 1088, 0, 2490, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 0, 0,
	0, 0, 1062, 0, 1095, 1103, 0, 1073, 1074, 1080,
	1079, 1075, 1076, 1077, 1098, 0, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 0, 1061, 0, 0, 2441,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075,
	1076, 1077, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 0, 0, 0, 0, 2395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 0, 1096, 1104,
	1092, 0, 0, 0, 0, 0, 0, 1062, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 1059, 1060, 0, 1089, 1090, 1091, 1099, 1100,
	1101, 1061, 0, 0, 0, 1094, 0, 1081, 1092, 0,
	0, 0, 1082, 0, 1078, 1062, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 1061,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 0, 0, 0, 0,
	0, 1067, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1096, 1104, 0, 0, 0, 0, 0,
	1084, 1085, 1086, 1087, 0, 1097, 0, 0, 0, 1067,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 1096, 1104, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 1095, 1082, 0, 1073, 1074, 1080,
	1079, 1075, 1076, 1077, 1098, 0, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 0, 0, 1088, 0, 2365,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 1062, 0, 1095,
	1103, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 1061, 0, 0, 2360, 0, 0, 1081, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 1095, 0, 0,
	1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098, 0, 1072,
	1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0,
	0, 0, 2356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 0, 1096, 1104, 1092, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 1061, 0, 0, 0,
	1094, 0, 1081, 1092, 0, 0, 0, 1082, 0, 1078,
	1062, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 1061, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 0, 0, 1067, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1096, 1104,
	0, 0, 0, 0, 0, 1084, 1085, 1086, 1087, 0,
	1097, 0, 0, 0, 1067, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 1096, 1104, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 1095,
	1082, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 0, 1088, 0, 2294, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 0, 0,
	0, 0, 1062, 0, 1095, 1103, 0, 1073, 1074, 1080,
	1079, 1075, 1076, 1077, 1098, 0, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 0, 1061, 0, 0, 2260,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075,
	1076, 1077, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 0, 0, 0, 0, 2259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 0, 1096, 1104,
	1092, 0, 0, 0, 0, 0, 0, 1062, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 1059, 1060, 0, 1089, 1090, 1091, 1099, 1100,
	1101, 1061, 0, 0, 0, 1094, 0, 1081, 1092, 0,
	0, 0, 1082, 0, 1078, 1062, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 1061,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 0, 0, 0, 0,
	0, 1067, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1096, 1104, 0, 0, 0, 0, 0,
	1084, 1085, 1086, 1087, 0, 1097, 0, 0, 0, 1067,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 1096, 1104, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 1095, 1082, 0, 1073, 1074, 1080,
	1079, 1075, 1076, 1077, 1098, 0, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 0, 0, 1088, 0, 2224,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 1062, 0, 1095,
	1103, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 1061, 0, 0, 2071, 0, 0, 1081, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 1095, 0, 0,
	1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098, 0, 1072,
	1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0,
	0, 0, 2047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 0, 1096, 1104, 1092, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 1061, 0, 0, 0,
	1094, 0, 1081, 1092, 0, 0, 0, 1082, 0, 1078,
	1062, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 1061, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 0, 0, 1067, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1096, 1104,
	0, 0, 0, 0, 0, 1084, 1085, 1086, 1087, 0,
	1097, 0, 0, 0, 1067, 2553, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 1096, 1104, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 1095,
	1082, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 0, 1088, 0, 1507, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 2552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 0, 0,
	0, 0, 1062, 0, 1095, 1103, 0, 1073, 1074, 1080,
	1079, 1075, 1076, 1077, 1098, 0, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 0, 1061, 1799, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075,
	1076, 1077, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 0, 0, 1067, 0, 1869, 0,
	0, 1868, 0, 0, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 0, 1096, 1104,
	1092, 0, 0, 0, 0, 1772, 0, 1062, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 1094, 0, 1081, 0, 0,
	0, 0, 1082, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 1773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 0, 0, 0, 0,
	0, 1067, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1096, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 1604,
	0, 0, 1102, 0, 0, 1059, 1060, 0, 1089, 1090,
	1091, 1099, 1100, 1101, 0, 0, 0, 0, 0, 0,
	1094, 1092, 0, 0, 0, 1603, 0, 1082, 1062, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 1093, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 1095, 1078, 0, 1073, 1074, 1080,
	1079, 1075, 1076, 1077, 1098, 0, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 1085, 1086, 1087, 0, 0, 0,
	1097, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	1059, 1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0,
	0, 0, 0, 0, 1096, 1104, 1092, 0, 0, 0,
	0, 0, 0, 1062, 0, 0, 1103, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 0, 0,
	0, 1094, 0, 1081, 0, 0, 0, 0, 1082, 1095,
	1078, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 1085,
	1086, 1087, 0, 0, 0, 0, 0, 1067, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 1096,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 1059, 1060, 0, 1089, 1090, 1091, 1099, 1100, 1101,
	0, 0, 0, 0, 0, 0, 1094, 1092, 0, 0,
	0, 0, 0, 1082, 1062, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1061, 1093,
	596, 0, 0, 0, 1081, 0, 0, 0, 0, 0,
	1095, 1078, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077,
	1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068,
	1069, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	1085, 1086, 1087, 0, 0, 0, 1097, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 1059, 1060, 0, 1089,
	1090, 1091, 1099, 1100, 1101, 0, 0, 0, 0, 0,
	1096, 1104, 1092, 0, 0, 0, 0, 0, 0, 1062,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 1094, 0, 1081,
	0, 0, 0, 0, 1082, 1095, 1078, 0, 1073, 1074,
	1080, 1079, 1075, 1076, 1077, 1098, 0, 1072, 1070, 1071,
	1063, 1064, 1065, 1066, 1068, 1069, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 1067, 1088, 0, 0, 0, 1875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 1096, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 1059, 1060, 0,
	1089, 1090, 1091, 1099, 1100, 1101, 0, 0, 0, 0,
	0, 0, 1094, 1092, 2051, 0, 0, 1870, 0, 1082,
	1062, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 1093, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 1095, 1078, 0, 1073,
	1074, 1080, 1079, 1075, 1076, 1077, 1098, 0, 1072, 1070,
	1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1084, 1085, 1086, 1087, 0,
	0, 0, 1097, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 1059, 1060, 0, 1089, 1090, 1091, 1099, 1100,
	1101, 0, 0, 0, 0, 0, 1096, 1104, 1092, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1061,
	0, 0, 0, 1094, 0, 1081, 0, 0, 0, 0,
	1082, 1095, 1078, 0, 1073, 1074, 1080, 1079, 1075, 1076,
	1077, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066,
	1068, 1069, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1085, 1086, 1087, 0, 0, 0, 0, 0, 1067,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 1096, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 1059, 1060, 0, 1089, 1090, 1091, 1099,
	1100, 1101, 0, 0, 0, 0, 0, 0, 1094, 1092,
	0, 0, 0, 1828, 0, 1082, 1062, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 1093, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 1095, 1078, 1835, 1073, 1074, 1080, 1079, 1075,
	1076, 1077, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065,
	1066, 1068, 1069, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 1085, 1086, 1087, 0, 0, 0, 1097, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 1059, 1060,
	0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0, 0,
	0, 0, 1096, 1104, 1092, 0, 0, 0, 0, 0,
	0, 1062, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1061, 0, 0, 0, 1094,
	0, 1081, 0, 0, 0, 0, 1082, 1095, 1078, 0,
	1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098, 0, 1072,
	1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 1085, 1086, 1087,
	0, 0, 0, 0, 0, 1067, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 1096, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 1059,
	1060, 0, 1089, 1090, 1091, 1099, 1100, 1101, 0, 0,
	0, 0, 0, 0, 1094, 1092, 0, 0, 0, 0,
	0, 1082, 1062, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 1093, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 1095, 1078,
	0, 1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098, 0,
	1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 1085, 1086,
	1087, 0, 0, 0, 1097, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 1059, 1060, 0, 1089, 1090, 1091,
	1099, 1100, 1101, 0, 0, 0, 0, 0, 1096, 1104,
	0, 0, 0, 0, 0, 0, 0, 1062, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 1094, 0, 1081, 0, 0,
	0, 0, 1082, 1095, 1078, 0, 1073, 1074, 1080, 1079,
	1075, 1076, 1077, 1098, 0, 1072, 1070, 1071, 1063, 1064,
	1065, 1066, 1068, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1086, 1087, 0, 0, 0, 0,
	0, 1067, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1096, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 130, 1095, 0, 0, 1073, 1074, 1080,
	1079, 1075, 1076, 1077, 1098, 44, 1072, 1070, 1071, 1063,
	1064, 1065, 1066, 1068, 1069, 0, 0, 1088, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	0, 52, 1083, 0, 0, 0, 1059, 1060, 0, 1089,
	1090, 1091, 1099, 1100, 1101, 0, 0, 0, 0, 0,
	1097, 0, 55, 0, 0, 0, 57, 0, 0, 1062,
	63, 0, 1103, 133, 0, 0, 0, 64, 0, 123,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 0, 1081,
	0, 0, 66, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 1073, 1074, 1080, 1079, 1075, 1076, 1077, 1098,
	0, 1072, 1070, 1071, 1063, 1064, 1065, 1066, 1068, 1069,
	0, 0, 0, 0, 1084, 1085, 1086, 1087, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 69, 1316, 1305, 1335, 1294,
	1326, 1325, 0, 0, 1296, 1295, 0, 0, 0, 0,
	1337, 1336, 1094, 0, 76, 128, 70, 0, 71, 1082,
	72, 0, 134, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 104, 0, 0, 0, 0, 1331, 0,
	1323, 1322, 131, 0, 0, 0, 0, 0, 0, 0,
	1321, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 108, 1320, 1318, 1319, 0, 0, 0, 0,
	0, 129, 0, 0, 1083, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	1304, 0, 1097, 0, 136, 0, 0, 1309, 1307, 1310,
	1311, 1312, 1313, 1314, 0, 1334, 0, 0, 0, 0,
	1308, 0, 1298, 1297, 0, 0, 0, 127, 0, 0,
	4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 1316, 1305, 1335, 1294, 1326, 1325, 0,
	1324, 1296, 1295, 0, 1306, 0, 0, 1337, 1336, 0,
	0, 1095, 0, 0, 1073, 1074, 1080, 1079, 1075, 1076,
	1077, 1098, 0, 1072, 1070, 1071, 1063, 1064, 1065, 1066,
	1068, 1069, 0, 1317, 0, 0, 0, 1432, 1430, 1431,
	1434, 1433, 0, 0, 0, 1331, 0, 1323, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1315, 1302, 0,
	1320, 1318, 1319, 0, 0, 0, 0, 1339, 0, 0,
	0, 549, 0, 575, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 1332, 1333, 0, 1304, 0, 0,
	0, 554, 0, 0, 1309, 1307, 1310, 1311, 1312, 1313,
	1314, 0, 1334, 552, 0, 0, 1303, 0, 0, 1298,
	1297, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 0, 0, 0, 555,
	0, 0, 0, 0, 0, 1300, 0, 561, 562, 0,
	0, 0, 571, 0, 0, 0, 0, 1324, 0, 0,
	0, 1306, 0, 0, 0, 0, 576, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 559, 1315, 1302, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	565, 0, 0, 0, 0, 560, 567, 1299, 0, 0,
	0, 1332, 1333, 0, 0, 0, 0, 0, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 0, 1303, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 568,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 0, 573, 0,
	0, 0, 0, 579, 0, 0, 0, 0, 566, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 572,
}
var sqlPact = [...]int{

	43758, -1000, -23, -1000, -1000, -1000, 144, -1000, -1000, -1000,
	-1000, 143, 142, 139, -1000, 138, 134, 133, 131, 128,
	126, 124, 123, 122, 120, 113, -1000, 112, -1000, -1000,
	-1000, -1000, 110, 109, 108, 105, 104, 102, 97, -1000,
	1270, 22312, 96, 95, 1361, -1000, 36305, 94, 93, 92,
	90, -1000, 1290, 86, 83, 26408, 965, 1548, 82, 81,
	80, 79, 76, 1127, 35966, 3426, 2015, 1112, 1666, 35624,
	21970, 1636, 1573, 35282, -1000, -1000, 34940, 68, 67, 64,
	63, 55, -1000, -1000, 34598, 53, 46, 35, 34, 32,
	31, 30, 29, 28, 26, 25, 24, 23, 22, -1000,
	21, 20, 19, -1000, 44259, 18, 17, 14, 1064, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 944, 88, -1000, 1018, 428, 1432, 8212,
	998, 993, 987, 967, 995, 38678, 36305, 12, -42, 8,
	-1000, 1943, 648, 19517, 43758, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26066,
	25724, 34256, 33914, 6446, 735, -1000, -28, 22992, 36305, -1000,
	-20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14928, 14574, 524, -20, -1000, -1000, -1000, -1000, -1000,
	33572, -1000, 38339, 33230, 32888, 1503, 32546, -1000, -1000, -1000,
	-1000, 32204, -1000, -1000, 1867, 1672, 1662, 25382, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31865, 31523, 31181, 30839, 30497, 480, -1000, -1000, -1000, 17752,
	-1000, -1000, -1000, -1000, 5, -1000, 4, -1000, 3, 1,
	0, -2, -1000, -3, -8, -1000, -10, -12, -1000, -17,
	-18, 30155, 839, 1242, -1000, -1000, -26, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36305, -1000, 15634, -1000, 479,
	-1000, 1684, -1000, 15634, -1000, 1237, -1000, -1000, -1000, -1000,
	-1000, 36305, -1000, -1000, -1000, -1000, -1000, -1000, 2125, 1146,
	478, 29813, -1000, 1560, -1000, 570, 776, -1000, -1000, -1000,
	9271, 151, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1758, 23345, 1365, 1968, 1863, 2123, 1431, 1821, 1806,
	1803, 1802, 1753, 2122, 925, 2120, 1835, 990, 2119, 1732,
	1330, 641, 2118, 1664, 1658, -1000, -1000, -1000, -1000, 903,
	-1000, -1000, -1000, 27764, -1000, -1000, 777, 862, 1018, -1000,
	-1000, -1000, 1313, 1929, 1929, 1929, 2006, 271, 266, -1000,
	88, -1000, 1459, -1000, 1128, -1000, -1000, -1000, -1000, -1000,
	43278, -1000, -1000, 15634, 15634, 15634, 15634, 15634, 1169, 491,
	-1000, 475, 474, 7505, -1000, -1000, 2106, -1000, -1000, -1000,
	287, -1000, -1000, 15634, -20, -1000, -1000, -1000, -1000, 473,
	2114, -1000, 643, -1000, -1000, -1000, 575, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1726, 469, 468, 467,
	-1000, 466, -1000, -1000, 465, 464, 463, 462, 460, 459,
	456, 455, 449, 447, 445, 444, 443, 438, 436, 1092,
	-1000, 590, -1000, -1000, 590, 590, -1000, 418, 418, 419,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 418, -1000,
	-1000, -1000, 541, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 435, 1200, -1000, -1000, 1200,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 732, 37661, -31,
	36305, -1000, 434, -31, -1000, -1000, 433, -1000, 10683, 10683,
	-1000, -1000, -1000, -1000, -1000, 9977, 1377, -1000, 3835, -216,
	275, 531, -1000, 18458, 21276, -1000, -1000, 1016, 1836, 772,
	-1000, 1025, 1834, 499, -1000, 1152, -1000, 857, 1829, -90,
	1763, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23684, 22992,
	-28, -38, -1000, -1000, -1000, 6093, 43278, -1000, 43278, -1000,
	821, 20221, -20, -1000, -1000, -1000, -1000, 432, 1319, -1000,
	1318, 579, -1000, 296, -1000, 29471, 579, 1316, -1000, -1000,
	-1000, 27764, -1000, 36305, -1000, 36305, -1000, 871, -1000, 38000,
	116, 1828, -1000, -1000, 116, 1824, -1000, 114, 1823, -1000,
	-1000, 1189, 1822, -1000, -38, 1815, -1000, -1000, 15634, -55,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 648, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	29129, 22652, 1067, 477, 43278, 2049, 44126, 23684, 43278, 22652,
	-1000, -1000, 36305, -1000, 15634, -1000, 2048, 1518, -32, -1000,
	-1000, -1000, -1000, -1000, 1358, 1465, 694, 825, 9271, 9271,
	1883, -1000, 147, 6446, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 28787, -1000, -1000, -1000, 1130, 36305, -1000, -1000,
	1724, -1000, 22652, 36305, -1000, 36305, -1000, 36305, -1000, 36305,
	-1000, 36305, -1000, -1000, -1000, -1000, -1000, 446, -1000, 1719,
	-1000, -1000, 36305, -1000, 1345, -1000, -1000, -1000, 28448, 28106,
	-1000, 943, 759, -1000, -1000, 117, -1000, 23684, 1966, 569,
	-1000, 1313, -1000, 1224, 1444, 14220, 1409, 15634, 88, -1000,
	-1000, 88, 88, 8918, -1000, -1000, -1000, 36305, -1000, 43959,
	44126, 6446, 742, 15634, 15634, 15634, 15634, 15634, 15634, 15634,
	15634, 15634, 15634, 15634, 15634, 15634, 15634, 15634, 15634, 15634,
	15634, 15634, 15634, 15634, 15634, 15634, 15634, 15634, 15634, 15634,
	15634, 15634, 15634, 15634, 15634, 1493, 15634, 728, 15634, 15634,
	15634, 15634, 1013, 1084, 417, 1222, -1000, 2081, 2081, 2081,
	43564, 43564, 383, 491, -1000, 15634, -1000, 77, 15634, 266,
	41564, -29, 7152, -1000, -1000, -1000, 13867, 588, 43278, -20,
	4995, -1000, 2103, 893, 1739, 1569, 424, 536, 532, 527,
	457, 15634, 15634, 13514, 13160, 12806, 16340, 12452, 15634, 7858,
	15634, 15634, 15634, 15634, 12098, 11744, -1000, 422, -1000, -1000,
	-1000, -1000, 2102, -1000, -1000, 2100, -1000, 740, 737, 2099,
	-1000, -32, -1000, 37661, -1000, 36305, -31, 2043, 36305, -1000,
	115, -1000, 42295, -1000, 115, -67, -1000, 1448, 1421, 19869,
	1506, 1190, 1190, 1190, -1000, 420, 489, 531, 5368, 11390,
	-1000, 26747, 1201, 174, 265, 18105, 1377, -1000, 36305, -43,
	1102, -1000, 25040, 1970, 1935, 1905, 27764, 2022, 77, 1947,
	1644, 727, 27764, 1945, 726, 2020, 77, 1642, 723, 36305,
	6446, 1932, 538, -1000, 36305, -1000, -1000, -1000, 1640, -69,
	-1000, -1000, 24701, 2041, 1811, 1805, -1000, 1110, -1000, 2040,
	36305, 1236, 1312, -1000, -1000, 753, 1801, 583, 223, 2037,
	223, 20572, -1000, 36305, -1000, 36305, -1000, -1000, 36305, -1000,
	36305, -1000, 36305, 36305, -1000, 36305, 36305, -70, 43278, 3644,
	24362, 717, -1000, 610, 24701, 162, -78, -1000, 670, -1000,
	-1000, -1000, -1000, 170, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	419, 1092, 418, 418, 418, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 541, -1000, -1000, 590, 590, 590, -1000, -1000,
	-81, -1000, 1633, 557, -83, 642, -32, -1000, 1200, -1000,
	1137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2113, -1000, 2088, -1000, -1000, 2098,
	-34, -1000, -34, -1000, 6446, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36305, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 286, -1000, -1000, -1000, -1000, -1000, -1000, 36305, 36305,
	36305, -1000, 27764, -1000, 1709, -1000, 1954, -1000, -1000, -1000,
	-1000, 43278, -1000, 382, -1000, -1000, 43278, 1063, 1468, -1000,
	1468, -35, -1000, 42134, 1440, 36305, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 568, 526, 526,
	798, 798, 798, 798, 2051, 2581, 288, 1616, 700, 700,
	700, 700, 700, 700, 700, 700, 2916, 713, 713, 2916,
	2916, 2916, 2916, 2916, 700, 700, 700, 43564, 43439, 4067,
	15634, 15634, 716, 1069, 417, 4067, 15634, 4067, 4067, 4067,
	4067, -1000, 1153, -1000, -1000, -1000, -1000, 1631, 415, 16340,
	16340, -1000, -1000, -1000, 7505, 16693, -1000, -1000, -1000, -1000,
	414, 15634, -1000, 41689, -227, 264, -79, -1000, 15634, 488,
	-84, -1000, 829, -1000, 15634, -1000, -13, 15634, 15634, 15634,
	263, -1000, 261, -1000, 714, -1000, 702, 701, 696, -1000,
	411, 1184, 409, 407, 15634, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 43153, 39525, 260, -1000, 1613, -79, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 259, -1000, 258, -1000,
	42992, -79, 257, 3880, -1000, 16340, 16340, 16340, 7505, 406,
	256, -1000, 42009, -1000, 42867, 11036, 11036, 11036, 254, 42706,
	15634, -79, 39397, 39362, 4477, -91, -92, -1000, -93, -1000,
	2097, -103, 252, 567, 566, 251, -1000, -1000, 404, -106,
	583, 10683, 19164, 6446, -1000, 583, 9977, -1000, 19869, 19869,
	876, 1412, 19869, -1000, -1000, -1000, -1000, 26747, 362, 531,
	26747, -1000, 2096, 1418, 250, -1000, -1000, -1000, 36305, 403,
	-1000, 531, 249, 926, 36305, 36305, 36305, -1000, -1000, 1305,
	37322, 1283, 44126, 36305, -1000, 402, 401, 1401, 1398, 36305,
	36305, 36983, 36644, 36305, 978, 77, -1000, 565, 399, 36305,
	1006, 561, 36305, 77, -1000, 395, 36305, 933, -1000, 559,
	1546, 1232, -1000, 799, 1596, 36305, 248, -109, -36, 44126,
	-1000, -1000, -1000, -1000, -1000, 36305, 389, 36305, 77, 36305,
	36305, 2111, 77, 36305, 1799, 1825, 519, 36305, 1444, 15634,
	1095, -1000, 18811, 598, 36305, 972, 101, -1000, -1000, -1000,
	530, 36305, -1000, -1000, 116, 116, -1000, 114, 1189, -38,
	-1000, 15634, -1000, -1000, 36305, 23684, -112, -1000, -1000, 44126,
	-1000, 290, 769, -1000, 2095, 577, 23684, 36305, 9271, 9271,
	-1000, 1454, -1000, -1000, 895, -1000, 1077, -1000, -1000, -1000,
	-1000, 9271, -1000, -54, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1116, -1000, 1063, -1000, 15634, 2094, -1000, -1000, -1000,
	8918, -1000, -1000, -1000, 36305, -210, 15634, 4067, 4067, 15634,
	16340, 16340, -1000, 4067, -1000, -1000, -1000, -1000, -1000, 1590,
	394, 15634, 44126, 3906, 2884, -114, -1000, 15634, -40, -1000,
	15634, -1000, 41282, -1000, -1000, 226, 1838, -1000, 15634, 42581,
	246, 10330, -1000, 42420, -21, -21, -1000, 2110, 1309, 1228,
	1062, 882, 2093, -1000, 20924, 584, 1205, 41244, 43959, 44126,
	-1000, 15634, -1000, -1000, 1588, 15634, -1000, 43959, 44126, 16340,
	16340, 16340, 16340, 16340, 16340, 16340, 16340, 16340, 16340, 16340,
	16340, 16340, 16340, 16340, 16340, 16340, 16340, 16340, 1360, 16340,
	2075, 2075, 2075, -41, 15634, -1000, 1639, 1588, 15634, 15634,
	44126, 243, 239, 225, -1000, 15634, -79, 15634, 15634, 15634,
	-1000, -1000, -1000, 224, -1000, 2092, -1000, -1000, -1000, -1000,
	162, -1000, 1563, -1000, -164, -1000, 1377, -1000, 1563, -1000,
	-1000, 876, -1000, 393, 15634, 19869, -1000, 487, -1000, -115,
	-1000, 26747, -1000, 486, -224, -1000, 529, -1000, 531, 392,
	36305, 26747, -1000, -1000, -1000, 690, 673, 1786, -1000, 1267,
	-1000, 604, -1000, 1089, 15634, 17399, 388, 387, 1052, -1000,
	1783, 1189, 1780, 1189, -1000, -43, 937, -1000, 21628, 15634,
	-1000, 671, 21628, -1000, -1000, 15634, -1000, 656, 21628, 577,
	1583, 773, -1000, 795, -1000, 1513, -1000, 24701, 380, 36305,
	379, -1000, 372, -1000, -1000, -1000, 370, 36305, 1364, 519,
	24023, -1000, 579, 972, -1000, 43278, -1000, 972, 8565, 1909,
	-121, -1000, -1000, -1000, 583, 20572, 19869, 9977, -122, -1000,
	-1000, -1000, -1000, 43278, -54, 1886, 1886, -1000, 2091, -1000,
	485, 218, -1000, 27425, -1000, -54, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36305, 6446, 36305, 36305, 1204, 41119, -1000,
	1961, 6446, 2055, 4067, 607, 241, 15634, 44126, 43826, -123,
	15634, 15634, -1000, 217, 15634, 484, 43278, -1000, -1000, -1000,
	43278, 15634, 2109, 15634, 216, 215, 214, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 212, -1000, -1000, 39017, 15634,
	208, -1000, 207, 206, 43278, 1639, 43278, -1000, -1000, 1015,
	1015, 867, 867, 867, 867, 2075, 930, 734, 1217, 1123,
	1123, 1123, 1167, 1183, 1183, 1123, 1123, 1123, 1578, 1387,
	368, 4507, 15634, 202, -1000, -1000, 43278, 43278, 200, -1000,
	-1000, -1000, -79, 321, 40837, 40799, -1000, 197, 196, 1565,
	2004, -1000, 19869, 1565, -1000, 36305, 43278, -1000, -216, -1000,
	2090, -1000, -1000, 1418, -1000, 5735, 26747, 36305, -131, -1000,
	36305, 36305, 36305, 1775, -1000, 2639, -1000, 40674, -134, -1000,
	320, 1978, 15634, -1000, -1000, 359, 17399, 36305, -1000, 1395,
	1422, 636, 36305, -1000, 36305, -1000, 36305, 36305, 36305, -1000,
	358, -20, -136, 36305, -1000, -139, 36305, -1000, -1000, 23684,
	697, -1000, 1155, 1521, -1000, 17399, 356, 36305, 24701, 2033,
	17399, 1234, 1388, 519, 24023, -1000, 753, -1000, -1000, -57,
	-1000, 369, 77, 972, -1000, -58, -1000, 528, 1868, -1000,
	1866, 482, -1000, -1000, -65, 351, -1000, 525, 521, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1961, 15634, 15634, 43826,
	-141, -1000, 4067, 4067, -1000, 40392, -1000, 43278, -1000, 42420,
	-1000, -1000, -1000, -1000, 1144, -1000, 40354, -1000, -1000, -1000,
	-1000, 16340, 1577, 350, 44126, 40229, -1000, -1000, 15634, -1000,
	-1000, -1000, -1000, 581, 15634, 15634, 1377, 581, -142, 531,
	-1000, -1000, -1000, 2086, -1000, -144, -1000, -1000, -1000, -1000,
	36305, -1000, 36305, -1000, 6446, 36305, 1561, 1258, -1000, -1000,
	1393, 348, 16340, 36305, -1000, 1054, 17399, 1961, -20, 6446,
	1961, 39947, 4995, -149, -150, 1256, -1000, 1252, 15634, -1000,
	44126, 1189, 1189, -1000, 655, 654, 15634, 653, -1000, 647,
	-1000, -66, 21628, -1000, -1000, 1996, 1139, -152, 17399, -155,
	195, 77, -157, 36305, -1000, 519, 24023, -1000, 1825, 1810,
	36305, 1898, -1000, -1000, 347, 343, 342, -1000, 27086, 27086,
	23684, 23684, -1000, 4067, 4067, -1000, -1000, 193, 1205, 1992,
	-1000, 2657, 16340, 44126, -158, -1000, 39909, -1000, 36305, 43278,
	-79, -1000, -1000, 26747, 322, -1000, -1000, 1269, -1000, -1000,
	36305, 1266, -1000, -1000, 15634, 4507, 340, 1513, 336, -1000,
	-1000, -1000, -1000, -1000, -1000, 1978, -13, -1000, 1039, -1000,
	-1000, 43278, 1976, -1000, -1000, 36305, 36305, -21, 335, 333,
	-1000, 1165, 36305, 1054, -163, -1000, 1513, -1000, 1054, 329,
	24023, -1000, 1364, 748, -165, 36305, -1000, -1000, 6797, 23684,
	23684, -1000, -166, -1000, -1000, -1000, 994, 15634, 2657, -168,
	-1000, -1000, -76, -1000, 2029, -1000, -1000, -1000, -1000, 1774,
	39784, 1334, 36305, -1000, 36305, 1961, 190, 36305, 608, 6446,
	-1000, -1000, 187, 15634, 15634, 328, 318, 308, 1513, 1054,
	-1000, 1513, 17399, -1000, 1388, 853, -1000, 583, -1000, -174,
	-179, -1000, 186, 15987, 15987, -79, -1000, 36305, 299, 1765,
	-1000, 1212, 1122, 171, -180, -1000, -1000, 296, -1000, 15634,
	-1000, 2109, -182, -189, 36305, 36305, 36305, -1000, 1513, -1000,
	-190, -1000, 20572, -1000, 577, 577, -1000, -1000, -1000, 17046,
	1214, 891, 41727, -1000, -1000, -1000, 36305, -1000, 1230, 1229,
	858, -1000, -1000, -1000, -1000, -1000, 1334, 43278, -1000, -1000,
	-192, -195, -197, -1000, 1054, -181, -1000, -1000, 2054, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1852, -1000, 625, 1300,
	1300, 1212, 295, 293, 1178, 1513, -1000, 15281, -1000, 2063,
	-1000, -1000, 1369, -1000, -1000, 1120, 1118, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 165, 6446, 159, 6446, -1000,
	597, -1000, 595, 289, 1363, -61, 9624, 675, 334, -88,
	-1000, -198, -1000, 43278, -1000, -1000, 276, -1000, 9624, 1120,
	-1000, 9624, 9624, -203, -1000, -1000, -204, -1000, -62, 1118,
	-105, -1000, -1000, 1118, -1000,
}
var sqlPgo = [...]int{

	0, 2581, 2580, 1697, 1898, 2575, 2567, 2566, 2565, 2564,
	2561, 2560, 2558, 2556, 2555, 2554, 2552, 2551, 2550, 2549,
	2548, 2547, 2543, 2541, 1896, 2540, 1877, 2539, 2538, 2535,
	2534, 2533, 2528, 1870, 2526, 2522, 2521, 2520, 2516, 2514,
	2511, 1862, 2503, 1859, 2501, 2498, 2496, 2495, 2494, 1827,
	2493, 78, 113, 1814, 2492, 2491, 1812, 1810, 1788, 2490,
	1770, 2487, 2486, 1758, 1750, 2483, 63, 2481, 2480, 2476,
	1747, 1741, 2475, 2472, 2468, 149, 2454, 1735, 2451, 2449,
	2446, 2445, 2441, 2439, 2436, 2435, 2434, 2425, 2424, 2423,
	2420, 2417, 2416, 2409, 2405, 2404, 2403, 157, 2399, 2397,
	1723, 1695, 2396, 2388, 41, 43, 15, 50, 28, 155,
	3009, 139, 2384, 2383, 2380, 2379, 2378, 2373, 46, 99,
	98, 2372, 102, 2371, 2370, 81, 36, 25, 22, 2367,
	90, 2365, 2364, 2400, 30, 2363, 2362, 134, 2360, 115,
	33, 2296, 151, 147, 109, 122, 2358, 2354, 2339, 82,
	120, 10, 4, 3, 6, 1, 2338, 2, 5, 2336,
	2335, 20, 84, 35, 2333, 39, 18, 2332, 2330, 129,
	2329, 55, 95, 1571, 110, 126, 324, 91, 2328, 60,
	19, 58, 2327, 2326, 154, 54, 2325, 44, 68, 138,
	2322, 72, 159, 132, 75, 128, 133, 2312, 2309, 2305,
	107, 2304, 118, 106, 2303, 2302, 69, 2299, 96, 141,
	2298, 2297, 2290, 88, 2287, 124, 2282, 2279, 150, 145,
	116, 14, 80, 66, 11, 1563, 1551, 131, 89, 49,
	52, 2231, 1168, 1275, 1240, 59, 104, 79, 53, 108,
	51, 73, 143, 38, 2229, 2228, 135, 2226, 2221, 2219,
	2215, 2210, 103, 2208, 2207, 23, 2205, 83, 34, 61,
	86, 48, 184, 127, 114, 148, 100, 2204, 76, 123,
	2203, 111, 2202, 2201, 2002, 117, 2199, 2194, 2192, 1979,
	1596, 1502, 37, 2191, 2187, 1137, 547, 2182, 2179, 87,
	2173, 119, 112, 94, 140, 152, 57, 2170, 121, 29,
	2166, 40, 31, 0, 483, 283, 2164, 125, 67, 2162,
	2161, 2160, 2159, 32, 8, 7, 13, 17, 12, 27,
	26, 2157, 2155, 130, 92, 62, 2154, 153, 2153, 2152,
	2151, 45, 2150, 16, 2146, 21, 2145, 2140, 24, 9,
	2139, 2135, 142, 2134, 97, 2133, 1974, 2132, 146, 2131,
	2130, 1739, 2128, 101, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 120, 120, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 117, 117, 122, 122, 122, 124, 124,
	121, 121, 116, 116, 24, 24, 64, 64, 107, 57,
	57, 57, 301, 301, 302, 302, 103, 103, 104, 104,
	104, 104, 105, 105, 106, 106, 106, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 41, 41, 42, 42, 42, 42,
	42, 42, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 48, 48, 48, 46, 46, 46, 45,
	45, 45, 44, 44, 44, 47, 47, 47, 175, 175,
	174, 174, 178, 178, 49, 49, 49, 49, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 52, 52, 52, 52, 52, 52,
	52, 270, 270, 269, 50, 50, 244, 244, 53, 53,
	201, 201, 54, 54, 54, 54, 54, 55, 55, 65,
	65, 342, 342, 342, 346, 346, 347, 347, 348, 348,
	348, 348, 348, 348, 348, 344, 344, 60, 60, 60,
	60, 61, 61, 61, 62, 62, 102, 102, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 29, 30, 71,
	71, 71, 73, 70, 70, 70, 72, 72, 72, 72,
	74, 74, 75, 75, 75, 75, 75, 76, 76, 295,
	293, 293, 294, 294, 147, 147, 147, 147, 147, 148,
	148, 148, 300, 300, 300, 300, 300, 300, 299, 299,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 89, 89, 89,
	97, 97, 97, 97, 97, 97, 97, 78, 78, 83,
	83, 83, 83, 83, 79, 79, 84, 84, 85, 85,
	86, 86, 86, 86, 86, 86, 80, 80, 80, 80,
	88, 88, 88, 88, 87, 87, 93, 93, 93, 93,
	93, 93, 90, 90, 90, 90, 91, 91, 91, 94,
	94, 94, 94, 81, 81, 82, 82, 95, 95, 96,
	96, 96, 96, 96, 92, 92, 92, 343, 343, 345,
	345, 58, 58, 36, 36, 37, 37, 149, 149, 150,
	150, 223, 223, 223, 223, 151, 151, 123, 123, 123,
	152, 152, 153, 153, 154, 154, 154, 156, 156, 157,
	157, 158, 158, 158, 155, 155, 155, 222, 311, 311,
	312, 312, 312, 312, 312, 312, 313, 313, 313, 313,
	313, 313, 313, 309, 309, 310, 307, 307, 308, 308,
	308, 308, 349, 349, 221, 221, 161, 161, 314, 314,
	314, 314, 315, 315, 315, 315, 315, 318, 317, 316,
	316, 316, 316, 316, 256, 256, 256, 38, 38, 99,
	99, 39, 39, 129, 129, 40, 40, 35, 35, 35,
	205, 205, 165, 165, 261, 261, 261, 140, 140, 118,
	118, 118, 17, 13, 13, 13, 13, 13, 13, 23,
	23, 21, 21, 206, 206, 207, 207, 59, 59, 63,
	63, 68, 68, 98, 98, 98, 98, 98, 98, 25,
	25, 25, 25, 31, 31, 31, 31, 67, 67, 351,
	351, 136, 136, 136, 136, 137, 137, 218, 218, 219,
	219, 352, 352, 220, 220, 220, 131, 130, 132, 132,
	34, 34, 34, 125, 125, 126, 126, 127, 127, 128,
	128, 353, 353, 56, 56, 56, 101, 101, 143, 143,
	215, 215, 215, 217, 217, 216, 216, 216, 191, 191,
	191, 100, 100, 170, 170, 180, 180, 181, 181, 267,
	182, 182, 66, 66, 110, 110, 108, 108, 108, 108,
	108, 108, 109, 109, 109, 111, 111, 111, 111, 111,
	111, 111, 114, 114, 114, 115, 115, 115, 113, 113,
	324, 324, 324, 327, 327, 323, 325, 325, 326, 326,
	350, 350, 192, 192, 192, 160, 159, 159, 163, 163,
	162, 164, 164, 260, 260, 260, 189, 189, 189, 189,
	210, 210, 208, 208, 209, 209, 211, 211, 212, 212,
	212, 213, 213, 214, 214, 188, 188, 240, 240, 112,
	112, 112, 169, 169, 169, 171, 171, 230, 230, 230,
	231, 231, 229, 229, 229, 229, 262, 262, 262, 262,
	262, 262, 262, 262, 340, 340, 340, 341, 341, 259,
	259, 263, 263, 263, 263, 263, 263, 257, 257, 257,
	257, 258, 258, 268, 268, 195, 195, 195, 195, 193,
	193, 194, 194, 264, 264, 264, 264, 190, 190, 265,
	265, 265, 224, 224, 271, 271, 271, 289, 289, 168,
	168, 168, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 273, 273, 273, 273, 275, 275, 275,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 288, 288,
	288, 288, 288, 276, 276, 283, 283, 284, 284, 285,
	286, 277, 277, 278, 278, 279, 280, 287, 287, 287,
	287, 291, 291, 281, 281, 281, 281, 281, 282, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 203, 203, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 234, 234, 234,
	234, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 319, 319, 319, 319, 319, 319, 319, 319,
	321, 321, 322, 322, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 328, 328, 329, 329, 331, 331,
	332, 332, 333, 334, 334, 334, 335, 336, 336, 330,
	330, 337, 337, 337, 338, 338, 339, 339, 339, 339,
	339, 246, 246, 247, 248, 254, 254, 254, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 138, 138, 138, 138, 138, 177,
	177, 176, 176, 243, 243, 241, 241, 245, 245, 196,
	196, 290, 290, 290, 290, 290, 290, 290, 197, 197,
	197, 204, 198, 198, 199, 199, 199, 199, 199, 237,
	238, 200, 200, 200, 239, 239, 249, 253, 253, 252,
	251, 251, 250, 250, 227, 227, 228, 228, 226, 225,
	185, 185, 184, 184, 183, 183, 354, 354, 255, 255,
	186, 186, 187, 179, 179, 266, 266, 266, 266, 172,
	172, 145, 145, 173, 173, 141, 141, 144, 144, 142,
	142, 142, 142, 166, 166, 167, 167, 139, 139, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	292, 292, 292, 242, 133, 133, 133, 134, 134, 135,
	135, 297, 297, 297, 298, 298, 298, 298, 296, 296,
	296, 296, 296, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 1,
	2, 1, 2, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 1, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 2, 6,
	2, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 1, 4, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 7, 4, 5, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 8, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	1, 0, 9, 9, 6, 7, 5, 3, 5, 1,
	3, 1, 1, 1, 10, 11, 9, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 3, 6, 4,
	2, 4, 3, 3, 0, 6, 3, 11, 14, 4,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 3, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	2, 3, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 3, 3, 1, 3,
	3, 1, 3, 3, 1, 1, 3, 3, 1, 1,
	6, 6, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 382, -4, -24, -26, -29, -32,
	-33, -54, -41, -42, -43, -53, -49, -55, -56, -57,
	-58, -50, -64, -63, -65, -68, -66, -59, -60, -69,
	-77, -98, -99, -100, -101, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -34, -35, -36,
	-37, -38, 73, -39, -40, 94, -326, 98, -44, -45,
	-46, -48, -47, 102, 109, 112, 134, 145, 231, 237,
	258, 260, 262, 269, -108, -110, 256, -61, -62, -70,
	-71, -72, -73, -102, 282, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, -96, 285, -25, -31, -67, 324, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 111, -324, -111, -109, 379, 257, 333,
	35, 294, 61, 105, 264, 349, 356, -114, -112, -113,
	-115, 274, 341, 304, 383, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 2, 304,
	344, 87, 153, 242, -342, 2, -173, 304, 87, -142,
	-133, 372, 4, -303, -305, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 67,
	64, 65, 66, 69, 71, 72, 75, 76, 77, 85,
	86, 88, 90, 94, 96, 98, 101, 102, 104, 109,
	111, 110, 112, 122, 123, 128, 130, 135, 141, 142,
	145, 146, 154, 157, 159, 152, 169, 170, 171, 175,
	176, 177, 180, 179, 184, 185, 188, 189, 192, 194,
	196, 197, 200, 198, 202, 203, 205, 204, 210, 212,
	213, 215, 218, 221, 224, 227, 228, 229, 230, 231,
	233, 235, 237, 239, 240, 241, 242, 243, 245, 246,
	248, 249, 250, 251, 252, 256, 254, 255, 257, 258,
	259, 260, 262, 264, 265, 267, 283, 284, 295, 269,
	270, 271, 272, 273, 278, 275, 276, 279, 280, 282,
	285, 287, 290, 293, 294, 296, 299, 300, 297, 292,
	303, 305, 306, 307, 308, 309, 310, 311, 312, 319,
	320, 324, 325, 326, 327, 330, 331, 332, 333, 335,
	338, 339, 340, 345, 350, 351, 352, 353, 354, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 89, 91, 92, 108, 113, 114, 124, 125,
	126, 136, 138, 147, 148, 151, 158, 160, 161, 162,
	163, 164, 166, 173, 174, 182, 199, 209, 211, 222,
	226, 234, 236, 244, 266, 277, 288, 289, 298, 301,
	314, 315, 316, 321, 322, 337, 341, 342, 382, 382,
	2, 170, 241, -141, -133, 87, 382, 382, 382, 382,
	304, 2, 275, 334, 344, -205, 87, 329, 382, 382,
	-133, 237, 22, 2, 96, 157, 332, 331, 22, 233,
	276, 306, 308, 2, 382, 382, 382, 382, 382, 2,
	344, 304, 153, 87, 334, -133, 2, -52, 2, 379,
	-51, -4, -33, -43, -53, -49, -24, -26, -41, -57,
	-56, -58, -60, -64, -63, -66, -70, -71, -77, -100,
	-101, 282, 111, -346, 2, 22, -347, -348, 73, 102,
	134, 274, 157, 96, 331, 304, 2, 170, 2, -133,
	2, -342, 2, 170, 2, -346, 2, -133, 2, -137,
	2, 269, -133, 382, 382, 382, 382, 382, 189, 55,
	266, 279, -75, 320, -74, 314, -295, -76, 2, -174,
	200, -133, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 2,
	-97, 279, 34, 55, 22, 60, 88, 135, 153, 154,
	176, 68, 69, 240, 189, 171, 319, 177, 280, 305,
	320, 73, 335, 309, 110, 4, 87, 200, 281, 314,
	382, 382, 382, -350, 2, 304, 271, 285, -109, -111,
	-110, -162, -163, 328, 165, 107, 220, -108, -110, 2,
	-324, -97, 279, 2, 55, 22, -293, 2, -255, 216,
	-232, 93, -234, 370, 371, 365, 206, 355, -246, -236,
	-249, 108, 266, 379, -141, -235, 385, 9, -321, -110,
	29, -247, -248, 49, -133, 7, 8, 5, 6, -139,
	-273, -242, -282, 323, 115, 208, -319, -320, 4, -303,
	-297, -274, -284, -278, -281, 166, 58, 79, 80, 83,
	81, 84, 281, 334, 50, 28, 113, 114, 226, 234,
	301, 321, 322, 147, 209, 148, 56, 136, 182, 101,
	37, 39, 41, 42, 51, 52, 89, 91, 92, 124,
	125, 126, 158, 160, 161, 162, 163, 164, 211, 244,
	288, 298, 315, 316, 342, -304, -285, -286, -279, -280,
	74, 116, 133, 156, 149, 168, 172, 183, 186, 195,
	201, 223, 225, 263, 286, -287, -351, 2, 320, 320,
	2, -351, 2, -351, 2, -136, 2, 320, 317, -327,
	245, -323, -133, -327, 382, 382, 384, 382, -159, -160,
	2, 22, 99, -187, 2, 379, -262, 2, 377, -264,
	-141, -110, -263, 379, 217, -3, 2, -264, 147, -141,
	2, -264, 147, -141, 2, -133, 2, -144, 147, -141,
	-296, 4, -303, -305, -304, -306, 58, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 68, 73, 78, 79, 81, 80, 82, 83,
	84, 93, 95, 97, 99, 100, 103, 105, 107, 115,
	117, 129, 131, 132, 134, 137, 139, 150, 153, 155,
	165, 167, 178, 181, 187, 190, 191, 206, 207, 208,
	214, 216, 217, 219, 220, 232, 238, 247, 261, 274,
	281, 291, 302, 304, 313, 317, 318, 323, 328, 329,
	334, 336, 343, 344, 346, 347, 348, 349, 317, 384,
	-173, -166, -133, -226, -225, 381, -232, 2, -232, 2,
	132, 379, -184, -185, -225, -226, 2, -174, 147, -174,
	147, -133, 2, -174, 2, 153, -133, 147, 2, -133,
	22, 132, 2, 167, 2, 167, 2, -265, 2, -264,
	-175, 147, 2, -174, -175, 147, 2, -145, 147, 2,
	-144, -133, 147, 2, -166, 147, 2, -201, 379, -270,
	2, -269, -298, 4, -303, -305, -304, 341, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	279, 216, 384, -174, -232, -244, 379, 132, -232, 216,
	-133, 2, 283, 2, 379, -75, 53, 320, -219, 2,
	-220, -130, -131, -132, 169, 239, 243, 354, 317, 360,
	132, -293, -178, 381, -97, 2, -301, 2, -299, 9,
	-298, 5, 283, 2, 240, 280, 55, 132, 2, 2,
	-343, 2, 216, 132, 2, 132, 2, 132, 2, 132,
	2, 132, 2, 2, 240, 280, 2, 129, 2, 319,
	2, 2, 132, 2, 169, 239, 295, 2, 304, 344,
	2, 132, 132, 354, 2, -190, -264, 304, 354, 22,
	-162, -163, -189, -208, -209, 187, 117, 214, -192, 22,
	99, -192, -192, 44, 380, 380, -97, 283, 2, 10,
	11, 57, 33, 370, 371, 372, 373, 127, 374, 375,
	368, 369, 367, 358, 359, 362, 363, 364, 70, 361,
	360, 63, 193, 268, 118, 119, 120, 121, 253, 13,
	14, 15, 26, 219, 186, 355, 149, 286, 365, 16,
	17, 18, 168, 36, 150, -138, -146, -232, -232, -232,
	-232, -232, 225, -183, -227, 377, -110, 379, 379, -110,
	-232, -176, 379, 7, -110, -241, 377, -250, -232, -184,
	379, 5, 379, 5, -328, 350, 129, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 236, -291, 345, -291,
	-291, -275, 379, -275, -276, 379, -275, 351, 356, 379,
	-218, -219, -218, 317, -137, 384, -327, -167, 379, -187,
	-179, -266, -232, 372, -179, -186, -255, 74, -195, 172,
	201, 133, 183, 263, 156, 7, -52, -229, 385, 379,
	372, -259, 356, -110, -263, 379, -262, -141, 379, -120,
	254, -119, 21, 23, 102, 339, 108, 292, 310, 111,
	270, 254, 108, 111, 254, 292, 310, 270, 254, 108,
	385, 111, -301, -142, 384, -296, 372, 296, 380, -172,
	-141, -185, 379, -161, 206, 206, -129, -325, 349, -161,
	379, -134, 147, 2, -133, -325, 206, -265, -143, -141,
	-143, 282, -133, 30, -122, 384, 48, 259, 108, -122,
	108, -122, 384, 108, -122, 108, 108, -176, -232, 380,
	384, -342, -348, 73, 379, 30, -243, -271, -272, -274,
	-283, -277, -281, -282, 40, 46, 45, 174, 173, 311,
	199, 277, 289, 337, 151, 38, 215, 159, 4, 158,
	160, 161, 162, 163, 164, 288, 37, 244, 125, 126,
	124, 101, 92, 91, 211, 42, 41, -285, -286, -279,
	-280, 89, 315, 316, 166, 39, 52, 51, 342, 298,
	-302, -301, -342, -295, -176, 30, -219, 2, -352, 384,
	185, -148, 192, 205, 141, 217, 352, -300, 5, 4,
	-242, -256, 93, 189, -282, 8, 371, -292, 7, 370,
	-294, -293, -294, 77, 381, -296, -174, 22, 284, 2,
	-295, -345, 129, -342, -295, -295, -295, -295, -295, 279,
	-52, 129, -133, 185, -295, 2, -295, 2, 304, 153,
	304, -122, 384, -301, 64, 65, 354, -189, -209, -208,
	-211, -232, 22, -214, 123, 202, -232, -234, -109, -109,
	-109, -164, -260, -232, 238, 153, -295, -289, -271, -288,
	249, 250, 248, 252, 251, -271, -296, 314, -232, -232,
	-232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
	-232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
	-232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
	186, 149, 286, 36, 150, -232, 317, -232, -232, -232,
	-232, 198, 206, 208, 323, 115, 330, 99, 212, -354,
	302, 32, -239, -110, 379, -254, 27, 291, 22, -246,
	266, 379, -227, -232, -228, -177, -176, 380, 384, -177,
	-245, -241, -253, -252, 346, 380, -176, 343, 22, 99,
	372, 2, 7, -202, 353, 197, 90, 142, 196, -203,
	273, -329, 122, 137, 379, 380, 2, 380, 2, 380,
	2, 380, 2, -232, -232, -196, 2, -290, -176, 4,
	353, 197, 90, 142, 196, 273, -196, 2, -197, 2,
	-232, -176, -198, -233, -234, 370, 371, 365, 379, 266,
	-199, 2, -232, -177, -232, 43, 181, 318, -200, -232,
	132, -176, -232, -232, -232, -176, -176, 2, -176, 2,
	379, 7, 7, 314, 314, 7, -137, -323, 30, -166,
	-169, 384, 132, 30, 4, -169, 384, 380, 172, 172,
	-262, -195, 172, -193, 223, -193, -193, -340, 379, 378,
	-259, -296, 377, 386, -177, 2, -258, -257, 30, -133,
	221, 380, -141, 384, 317, -206, 68, 59, -222, 147,
	59, -307, -133, 68, -308, 54, 329, 238, 131, -206,
	68, -206, 68, 68, -264, 33, -66, 66, 132, 317,
	-264, 66, 317, 33, -66, 132, 317, -144, -296, 66,
	-268, 357, -133, 132, 380, 384, -149, -166, -150, -133,
	-223, -222, -309, -310, -307, 153, 329, 116, 30, 108,
	108, 230, 30, 216, 206, -125, 307, 108, -224, 347,
	-215, -66, 379, 93, 30, -215, -180, -181, -267, -182,
	-141, 379, -133, -174, -175, -175, -144, -145, -133, -166,
	380, 384, -52, -269, 317, 336, -150, -51, 380, 384,
	-168, 29, 377, -202, 379, -268, 384, 132, 360, 317,
	380, 320, -220, -147, 243, 290, 255, 278, 8, 7,
	7, 384, -296, -344, -133, 279, -52, -141, -144, -141,
	-264, 129, 65, -212, -292, 379, 371, -213, 266, 267,
	384, -118, 31, 97, 175, -141, 354, -232, -232, 317,
	-354, 302, -239, -232, 198, 208, 323, 115, 330, 99,
	212, 132, 379, -233, -233, -176, -236, 379, -176, 378,
	388, 380, -232, 378, 378, 384, -251, -252, 103, -232,
	-163, 384, -162, -232, -176, -176, 380, 380, 317, 317,
	317, 317, 379, -334, 224, 379, 379, -232, 30, 384,
	380, 132, 380, 380, -204, 232, 380, 10, 11, 370,
	371, 372, 373, 127, 374, 375, 368, 369, 367, 358,
	359, 360, 63, 193, 268, 13, 14, 15, 168, 150,
	-233, -233, -233, -176, 379, 380, -237, -238, 132, 129,
	30, -200, -200, -200, 380, 132, -176, 384, 384, 384,
	380, 380, 380, 7, 380, 384, 380, 354, 354, 380,
	379, 380, -224, -266, -171, 2, -262, -296, -224, -255,
	-262, -262, -194, 336, 216, 172, -262, -257, 380, -341,
	7, -259, -258, 7, -231, -230, 130, 204, 380, -133,
	379, -259, 380, -119, -141, -133, -133, 206, -222, 147,
	-124, 206, -271, -133, 379, 379, 175, 175, -133, -133,
	147, -133, 147, -133, -133, -120, 254, -66, 354, 379,
	-141, 254, 354, -133, -66, 379, -133, 254, 354, -103,
	146, 212, 296, 132, -141, 380, 380, 384, -134, 153,
	-134, -66, -174, -174, 5, -66, -141, 108, -126, 104,
	-353, 360, -133, -210, -208, -232, -191, -217, 261, 216,
	-172, 341, -133, -191, -170, 384, 132, 360, -172, -122,
	-122, -122, -122, -232, -344, -301, 380, -271, 377, 378,
	7, 7, -106, 349, -301, -344, -293, -293, -130, 327,
	62, 243, -293, 384, 242, 87, 304, -213, -232, -260,
	-141, 385, -232, -232, -233, -233, 132, 379, -232, -243,
	26, 26, 380, -177, 384, -228, -232, 380, -241, 105,
	-232, 313, 380, 343, -163, -163, -163, 5, 197, 142,
	196, -203, 196, -203, -203, 7, -335, -133, 379, 347,
	-162, 380, -289, -271, -232, -237, -232, -289, -271, -233,
	-233, -233, -233, -233, -233, -233, -233, -233, -233, -233,
	-233, -233, -233, -233, -233, -233, -233, -233, 99, 206,
	212, -233, 384, -177, -238, -237, -232, -232, -271, 380,
	380, 380, -176, -232, -232, -232, 380, 7, -51, -188,
	137, -268, 384, -188, -194, 379, -232, -262, 378, 380,
	384, -258, 378, 384, 387, 360, -259, 379, -166, -257,
	317, 317, 108, 206, 338, -311, -308, -232, -165, -261,
	-133, -322, 379, -319, -320, -139, 379, 379, -117, 102,
	282, -207, 108, -122, 108, -122, 317, -206, 68, -235,
	-139, -133, -176, 317, -235, -176, 317, -235, -106, 132,
	303, 296, -151, 152, -223, 379, -134, 379, 379, -161,
	379, -133, -127, 180, -353, -299, -325, -191, -191, -179,
	207, 67, 380, -224, -181, -171, -255, 380, -107, 75,
	-107, 7, 378, 380, -105, 218, -104, -133, 5, -133,
	-296, -133, -141, 217, 380, -118, -296, 26, 26, -232,
	-243, 380, -232, -232, 380, -232, 378, -232, 5, -232,
	380, 380, 380, 380, -336, -133, -232, 380, 380, 380,
	-238, 132, 99, 212, 379, -232, 380, 380, 384, 380,
	380, 380, 380, -240, 139, 44, -262, -240, -166, -229,
	7, -230, -296, 377, -258, -166, 380, -133, -133, -222,
	108, -312, 68, -313, 57, 116, 73, 206, 208, 329,
	238, 54, 93, 247, 380, 380, 384, -140, -184, 57,
	-140, -232, 379, -165, -166, 206, 93, 206, 93, 86,
	325, -133, -133, -141, -133, -133, 379, 380, -141, 380,
	-133, -302, 314, -152, -153, 229, 150, -165, 379, -166,
	-149, 30, -165, 216, -128, 179, -353, -299, -125, -216,
	379, 216, -66, -191, 360, 86, 86, 378, 384, 379,
	360, 360, -118, -232, -232, 380, 380, -163, -330, 229,
	380, -233, 132, 379, -243, 380, -232, -331, 348, -232,
	-176, -331, 380, -259, 7, 380, -222, -133, -296, -133,
	116, 147, 208, 175, 379, -233, -141, -221, -349, 72,
	300, -261, -118, -296, -118, 380, -176, 380, 380, 208,
	208, -232, -271, -122, -122, 317, 317, -176, 317, 317,
	-235, 44, 227, 380, -165, 380, 380, -66, 380, -141,
	-353, -299, -126, 100, -166, 68, -187, -110, 379, 379,
	379, -104, -105, -301, -301, 380, -163, 44, -233, -243,
	380, 380, -332, -333, -133, -258, 378, -313, -134, 206,
	-232, -135, 379, -151, 379, -140, -163, 247, -121, 57,
	-133, -133, -163, 379, 379, 188, 242, -141, -221, 380,
	-151, -221, 379, -299, -127, 331, 207, 380, -133, -302,
	-302, 380, -337, 242, 267, -176, 380, 384, 30, 108,
	380, -314, 194, -133, -166, -118, 380, -141, -116, 336,
	-296, 380, -176, -176, 379, 379, 379, -151, -221, -151,
	-165, -128, 282, -224, 380, 380, 380, -338, -339, 36,
	326, 77, -232, -338, -333, -335, 116, -315, -318, -317,
	216, 133, 228, 287, 380, 380, -161, -232, 380, 380,
	-166, -166, -166, -151, 380, -180, -106, -106, -339, 235,
	128, 266, 235, 128, -133, -317, 216, -318, 216, 331,
	96, -314, 380, 380, 380, -221, -224, 26, -316, 203,
	259, 48, 282, -316, -315, 379, 379, -123, 48, 259,
	-151, -339, 20, 208, 93, -154, 229, -155, 229, 380,
	-296, 380, -296, 341, 341, -156, 379, 184, 384, -153,
	-152, -157, -158, -232, 93, 195, 312, -154, 379, 384,
	380, 384, 379, -157, -154, -158, -157, 380, 380, 384,
	-153, -152, -155, 384, -155,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 307, 0, 159, 161, 163,
	165, 167, -2, 169, 171, 0, 0, 0, 182, 184,
	186, 188, 190, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 672, -2, 0, 287, 289, 298,
	300, 302, 304, 305, 0, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 370, 372, 374, 376, 378,
	379, 381, 383, 385, 0, 593, 595, 597, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 708, -2, 719, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 685, 687, 689,
	691, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 271, 0, 1289, 1213,
	1219, 1220, 1244, 1245, 1246, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 151, 153,
	154, 0, 0, 0, 1215, 1289, 160, 162, 164, 166,
	0, 173, 0, 0, 0, 0, 0, 560, 170, 172,
	262, 1351, 264, 266, 0, 0, 0, 0, 176, 177,
	178, 179, 180, 181, 183, 185, 187, 189, 191, 192,
	0, 0, 0, 0, 0, 261, 259, 214, 215, 0,
	244, 245, 246, 247, 248, 250, 218, 220, 221, 223,
	225, 227, 229, 230, 232, 234, 235, 237, 239, 240,
	242, 0, 0, 0, 268, 274, 275, 276, 278, 279,
	280, 281, 282, 283, 284, 0, 131, 0, 462, 257,
	255, 0, 127, 0, 590, 0, 270, 591, 592, 587,
	588, 1378, 616, 288, 290, 299, 301, 303, -2, -2,
	1473, -2, 314, -2, 322, 1479, 0, 325, 326, 329,
	-2, 210, 351, 353, 355, 357, 359, 361, 363, 365,
	367, 369, 371, 373, 375, 377, 380, 382, 384, 386,
	387, 0, 0, 0, 391, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	0, 0, -2, 0, 0, 390, 392, 393, 394, 0,
	594, 596, 598, 0, 550, 710, 0, 0, -2, 683,
	684, -2, 0, 714, 714, 714, 0, 0, 684, 682,
	0, 291, 0, 293, 0, 391, 296, 297, 330, 331,
	1198, 1199, 915, 0, 0, 0, 0, 0, 0, 1017,
	1019, 1444, 1473, 0, 1021, 1022, 0, 1024, 1026, 1027,
	0, 1030, 1031, 1183, 1215, 1229, 1230, 1231, 1232, 0,
	0, 1235, 0, 1237, 1238, 1239, 1085, 1041, -2, -2,
	1227, 843, 844, 845, 846, -2, 1487, 1045, 1048, 1051,
	1054, 1055, 1058, 1059, 0, 1428, 1445, 1446, 1469, 1470,
	1478, 1482, 1483, 1452, 1466, 1453, 1440, 1450, 1464, 1295,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1253, 877, 878, 883, 884,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 886, 618, 600, 609, 618,
	602, 603, 604, 605, 606, 607, 608, 611, 0, 700,
	1357, 703, 1226, 701, 686, 688, 0, 690, 0, 0,
	694, 716, 715, 749, 750, 0, 698, 699, 709, 765,
	803, 780, 771, 0, 0, 2, 71, 0, 1452, 803,
	73, 0, 1452, 803, 76, 0, 82, 0, 1452, 1218,
	0, 1258, 1259, 1260, 1261, 1262, 1487, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 0, 0,
	272, 273, 1223, 1221, 1222, 0, 155, 156, 157, 158,
	0, 0, 1216, 1192, 1190, 1191, 168, 527, 1452, 547,
	1452, -2, 552, 527, 556, -2, 707, 1452, 632, 263,
	265, 0, 175, 0, 645, 0, 647, 0, 662, 809,
	117, 1452, 195, 208, 117, 1452, 198, 117, 1452, 201,
	1211, 117, 1452, 204, 205, 1452, 207, 258, 0, 0,
	-2, 251, 253, 1254, 1255, 1256, 1257, -2, 249, 219,
	222, 224, 226, 228, 231, 233, 236, 238, 241, 243,
	-2, 0, 0, 0, 461, 0, 0, 0, 589, 0,
	615, 306, 0, 311, 0, 313, 1439, -2, -2, 317,
	619, 623, 624, 625, 0, 0, 0, 0, 0, 0,
	0, 327, 211, 0, 388, 389, 397, 398, 132, 133,
	348, 349, 0, 401, 422, 434, 0, 0, 405, 407,
	460, 409, 0, 0, 411, 0, 413, 0, 415, 0,
	417, 0, 419, 421, 423, 435, 425, 709, 427, 0,
	429, 433, 0, 438, 0, 440, 441, 442, 0, 0,
	448, 0, 0, 395, 396, 117, 807, 0, 0, 0,
	-2, 0, 678, 728, 729, 0, 0, 0, 0, 712,
	713, 0, 0, 0, 674, 675, 292, 0, 295, 0,
	0, 0, 0, 1118, 1119, 1120, 1121, 1122, 1123, 1126,
	1127, 1124, 1125, 1128, 1129, 0, 0, 0, 0, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 0, 1131,
	1132, 1133, 0, 0, 1135, 0, 1137, 0, 0, 0,
	0, 0, 0, 1197, 0, 0, 1134, 920, 921, 922,
	954, 955, 0, 1018, 1194, 1187, 1020, 0, 1140, -2,
	1141, 0, 0, 1023, 1028, 1029, 1140, 0, 1182, -2,
	0, 1234, 0, 912, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1163, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 880, 891, 888,
	887, 864, 0, 863, 861, 0, 865, 0, 0, 0,
	599, -2, 601, 0, 613, 0, 702, 0, 0, 751,
	754, 1203, 1207, 1208, 754, 0, 1200, 0, 0, 0,
	0, 800, 800, 800, 798, 774, 0, 780, 0, -2,
	804, 792, 0, -2, 771, 0, 0, 805, 0, 83,
	584, 96, 0, 584, 584, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 794, 1214, 0, 1188, 1189, 147, 0, 0,
	1209, 1193, 468, 0, 0, 0, 551, 0, 706, 0,
	0, 0, 1452, 559, 1247, 634, 0, 813, 0, 648,
	0, 0, 810, 0, 193, 0, 115, 116, 0, 196,
	0, 199, 0, 0, 202, 0, 0, 0, 1141, 709,
	0, 0, 277, 0, 0, 709, 0, 1143, 821, 822,
	823, 824, 825, 912, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	874, 0, 849, 849, 849, 866, 867, 875, 876, 881,
	882, 893, 894, 896, 898, 892, 892, 892, 889, 890,
	794, 134, 0, 0, 0, 0, -2, 319, 0, 621,
	0, 626, 339, 340, 341, 628, 629, 323, 342, 343,
	344, 345, 346, 347, 0, 544, 0, 546, 1240, 0,
	320, 332, 321, 324, 0, 212, 399, 400, 402, 403,
	404, 408, 0, 457, 410, 412, 414, 416, 418, 426,
	430, 709, 436, 439, 443, 444, 445, 446, 0, 0,
	0, 549, 0, 308, 0, 452, 0, 681, 726, 727,
	732, 736, 737, 740, 743, 744, 734, 915, 695, 696,
	697, 720, 721, 571, 0, 0, 294, 916, 817, 818,
	868, 869, 870, 871, 872, 917, 918, 0, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, -2, -2,
	-2, -2, -2, -2, -2, -2, 941, 942, 943, 944,
	945, 946, 947, 948, -2, -2, -2, 952, 953, -2,
	1136, 1138, 0, 1197, 0, -2, 0, -2, -2, -2,
	-2, 966, 0, 968, 971, 973, 975, 0, 0, 0,
	0, 1196, 985, 1174, 0, 0, 1115, 1116, 1117, 970,
	0, 0, 1195, 1186, 0, 0, 1139, 1025, 0, 0,
	0, 1147, 1181, 1177, 0, 1032, 719, 0, 0, 0,
	0, 1039, 0, 1243, 899, 900, 901, 902, 903, 904,
	913, 1095, 0, 0, 0, 1046, 1047, 1049, 1050, 1052,
	1053, 1056, 1057, 0, 0, 0, 1063, 0, 1150, -2,
	-2, -2, -2, -2, -2, -2, 0, 1065, 0, 1067,
	1141, 1160, 0, 0, 988, 0, 0, 0, 0, 1473,
	0, 1070, 1141, 1168, 0, 0, 0, 0, 0, 1141,
	0, 1173, 0, 0, 0, 0, 0, 1081, 0, 1083,
	0, 0, 0, 0, 0, 0, 612, 704, 0, 0,
	813, 0, 0, 0, 1206, 813, 0, 1202, 0, 0,
	0, 0, 0, 795, 799, 796, 797, 0, 0, 780,
	792, 762, 0, 0, 0, 769, 770, 791, 0, 790,
	779, -2, 0, 0, 0, 0, 0, 583, 98, 1452,
	0, 119, 0, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 1217, 0,
	137, 0, 1224, 0, 0, 0, 0, 0, 467, 1223,
	469, 471, 472, 473, 474, 1248, 0, 1248, 0, 0,
	0, 0, 0, 0, 0, 636, 642, 0, 731, 0,
	660, 650, 0, 0, 0, 660, 664, 665, 667, 668,
	0, 0, 811, 209, 117, 117, 1212, 117, 117, 206,
	260, 0, 216, 252, 0, 0, 0, 254, 256, 0,
	814, 816, 0, 826, 0, 146, 0, 0, 0, 0,
	312, 0, 620, 627, 0, 336, 0, 338, 545, 1242,
	1241, 0, 213, 459, 285, 428, 431, 454, 455, 456,
	808, 0, 453, 0, 738, 0, 0, 735, 741, 742,
	0, 723, 569, 570, 0, 0, 0, -2, -2, 0,
	0, 0, 986, -2, 967, 969, 972, 974, 976, 0,
	0, 0, 0, 0, 0, 0, 987, 1140, 0, 1184,
	1187, -2, 1142, 1145, 1146, 0, 0, 1178, 0, 0,
	0, 0, 718, 719, 719, 719, 1038, 0, 0, 0,
	0, 0, 0, 1040, 0, 0, 0, 0, 0, 0,
	1062, 0, 1064, 1066, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 992, 993, 0, 1140, 1069, 1166, 1167, 0, 0,
	0, 0, 0, 0, 1075, 0, 1172, 0, 0, 0,
	1079, 1080, 1082, 0, 847, 0, 873, 895, 897, 885,
	709, 1225, 746, 1204, 794, 753, 755, 1205, 746, 1201,
	782, 0, 784, 0, 0, 0, 786, 0, 775, 0,
	777, 792, 767, 0, 0, 760, 0, 759, 780, 788,
	0, 0, 806, 97, 573, 0, 0, 0, 100, 1452,
	108, 0, 499, 0, 0, 0, 0, 0, 586, 109,
	1452, 117, 1452, 117, 110, 84, 584, 85, 0, 0,
	579, 0, 0, 572, 86, 0, 581, 0, 0, 146,
	0, 0, 148, 0, 1210, 476, 526, 0, 0, 1248,
	0, 465, 527, 548, 553, 555, 0, 0, 638, 642,
	0, 641, 707, 660, 730, 812, 643, 660, 0, 0,
	0, 652, 649, 646, 813, 0, 0, 0, 0, 194,
	197, 200, 203, 1142, 267, 0, 0, 1144, 0, 819,
	0, 0, 126, 0, 135, 269, 309, 310, 315, 334,
	335, 337, 333, 0, 0, 0, 0, 0, 0, 722,
	571, 0, 919, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1175, 0, 0, 0, 1186, -2, 1148, 1176,
	1180, 0, 1033, 0, 0, 0, 0, 1236, 905, 906,
	907, 908, 909, 910, 911, 0, 1093, 1094, 1098, 0,
	0, 1044, 0, 0, 1149, 1159, 1161, 989, 990, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, -2,
	-2, -2, 1007, 1008, 1009, -2, -2, -2, 0, 0,
	0, 1162, 0, 0, 1164, 1165, 1169, 1170, 0, 1072,
	1073, 1074, 1171, 0, 0, 0, 879, 0, 0, 748,
	0, 752, 0, 748, 783, 0, 802, 785, 765, 776,
	0, 773, 763, 0, 764, 0, 792, 0, 0, 772,
	0, 0, 0, 0, 118, 497, 516, 0, 0, 562,
	568, 568, 0, 1042, 1043, 0, 0, 0, 102, 0,
	0, 0, 0, 106, 0, 112, 0, 0, 0, 91,
	0, 0, 0, 0, 90, 0, 0, 89, 124, 0,
	0, 149, 481, 0, 470, 0, 0, 0, 468, 0,
	0, 0, 640, 642, 0, 633, 634, 174, 644, 658,
	659, 657, 0, 660, 666, 663, 669, 0, 0, 128,
	0, 0, 820, 827, 144, 1341, 142, 139, 141, 286,
	449, 450, 451, 733, 739, 724, 571, 0, 0, -2,
	0, 979, -2, -2, 1111, 1142, 1185, 1179, 1233, 719,
	1034, 1036, 1037, 914, 1100, 1097, 0, 1084, 1060, 1061,
	1158, 0, 0, 0, 0, 1142, 1113, 1071, 0, 1077,
	1078, 848, 705, 1089, 0, 0, 756, 1089, 0, 780,
	778, 761, 757, 0, 768, 0, 789, 575, 577, 99,
	0, 498, 0, 501, 0, 0, 0, 0, 507, 508,
	0, 0, 0, 0, 518, 525, 0, 571, 1228, 0,
	571, 0, 0, 0, 0, 0, 114, 0, 0, 585,
	0, 117, 117, 574, 0, 0, 0, 0, 580, 0,
	582, 136, 0, 463, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 630, 642, 0, 635, 636, 0,
	0, 0, 651, 661, 0, 0, 0, 815, 0, 0,
	0, 0, 725, -2, -2, 980, 1112, 0, 719, 0,
	1086, -2, 0, 0, 0, 1114, 0, 692, 0, 747,
	745, 693, 801, 792, 0, 787, 101, 0, 502, 503,
	1248, 0, 506, 509, 0, 511, 1250, 476, 0, 522,
	523, 563, 564, 567, 565, 568, 719, 520, 0, 103,
	104, 113, 121, 105, 111, 0, 0, 719, 0, 0,
	793, 0, 0, 525, 0, 515, 476, 466, 525, 0,
	0, 637, 638, 0, 0, 0, 670, 671, 0, 0,
	0, 143, 0, 138, 140, 1035, 1103, 0, -2, 0,
	1015, 1076, 1088, 1090, 0, 766, 758, 500, 504, 0,
	0, 531, 0, 519, 0, 571, 0, 0, 123, 0,
	576, 578, 0, 0, 0, 0, 0, 0, 476, 525,
	464, 476, 0, 639, 640, 0, 654, 813, 656, 0,
	0, 145, 0, 0, 0, 1099, 1016, 0, 0, 0,
	510, 536, 0, 0, 0, 566, 1033, 527, 107, 0,
	120, 0, 0, 0, 0, 0, 0, 513, 476, 557,
	0, 631, 0, 655, 146, 146, 1096, 1101, 1104, -2,
	1412, 1286, 0, 1102, 1091, 1092, 0, 512, 532, 533,
	0, 528, 529, 530, 1249, 524, 531, 122, 93, 95,
	0, 0, 0, 514, 525, 813, 129, 130, 0, 1106,
	1107, 1108, 1109, 1110, 505, 534, 0, 535, 0, 0,
	0, 536, 0, 0, 479, 476, 653, 0, 537, 0,
	540, 541, 0, 538, 521, 0, 0, 475, 477, 478,
	558, 1105, 539, 542, 543, 0, 0, 0, 0, 482,
	0, 483, 0, 0, 0, 481, 0, 0, 0, 480,
	486, 0, 489, 491, 492, -2, 0, 484, 0, 0,
	487, 0, 0, 0, 485, 490, 0, 488, 481, 0,
	480, 496, 494, 0, 495,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 368, 3, 374, 369, 3,
	379, 380, 372, 370, 384, 371, 381, 373, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 388, 383,
	358, 360, 359, 362, 385, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 377, 3, 378, 375, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 386, 367, 387, 365,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 363, 57702, 364, 57703, 366, 57704, 376,
	57705, 382, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:903
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:909
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1074
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1080
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1086
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1095
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1173
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1269
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1300
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1326
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1364
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1433
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "CREATE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "DELETE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return helpWith(sqllex, "DROP")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			return helpWith(sqllex, "DELETE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "INSERT")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{ /* SKIP DOC */
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			return helpWith(sqllex, "GRANT")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			return helpWith(sqllex, "RESET")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			return helpWith(sqllex, "RESET")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1956
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1963
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			return unimplemented(sqllex, "set local")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1991
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2046
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2066
		{
			return unimplemented(sqllex, "set from current")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = Low
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = Normal
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = High
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.str = "client_encoding"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2420
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2442
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2472
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2476
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2480
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2484
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2490
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2494
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2498
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2532
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2643
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = DropDefault
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			return unimplemented(sqllex, "match full")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			return unimplemented(sqllex, "match partial")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			return unimplemented(sqllex, "match simple")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2967
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = NoAction
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = Restrict
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = Cascade
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = SetNull
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = SetDefault
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &CreateSequence{Name: sqlDollar[3].union.normalizableTableName(), IfNotExists: false}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = &CreateSequence{Name: sqlDollar[6].union.normalizableTableName(), IfNotExists: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3099
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3139
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = true
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = false
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3170
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3173
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3174
		{
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = Ascending
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = Descending
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3214
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3216
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = true
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = false
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3250
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3307
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3349
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.str = ""
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3410
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = ReadOnly
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = ReadWrite
		}
	case 630:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.str = ""
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.str = ""
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.str = ""
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3518
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			return helpWith(sqllex, "INSERT")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3636
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3641
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3805
		{
			return helpWith(sqllex, "SELECT")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			return helpWith(sqllex, "VALUES")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			return helpWith(sqllex, "TABLE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			return helpWith(sqllex, "SELECT")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			return helpWith(sqllex, "TABLE")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3909
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3913
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3917
		{
			return unimplemented(sqllex, "cte")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3921
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3924
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3925
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3929
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = true
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = false
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = false
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = true
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3953
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4000
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			return helpWith(sqllex, "VALUES")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4156
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &From{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4178
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4223
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4260
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = nil
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4332
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = true
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = false
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.str = astFullJoin
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.str = astLeftJoin
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.str = astRightJoin
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.str = astInnerJoin
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4444
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4544
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4576
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4587
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = jsonbColType
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = jsonColType
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4676
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4685
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = nil
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4750
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4846
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4878
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4918
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 897:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = year
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = month
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = day
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = hour
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = minute
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = month
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = hour
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = minute
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = minute
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = nil
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = second
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5013
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5048
		{
			return unimplemented(sqllex, "at tz")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5322
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5495
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5548
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5549
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5573
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5589
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5590
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5594
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5603
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5612
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5621
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			return unimplemented(sqllex, "current role")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5631
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5652
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5657
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5662
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5671
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5672
		{
			return unimplemented(sqllex, "treat")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5709
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5714
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5718
		{
			return unimplemented(sqllex, "within group")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5719
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5754
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.str = ""
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5816
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5817
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5818
		{
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5821
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5822
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5828
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5829
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5830
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5831
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5832
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = Any
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = Some
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = All
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = Plus
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = Minus
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = Mult
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Div
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = Mod
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = Bitand
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = Bitor
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = Pow
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = Bitxor
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = LT
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = GT
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = EQ
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = LE
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = GE
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = NE
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = Like
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = NotLike
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = ILike
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = NotILike
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6187
		{
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6188
		{
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6226
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6267
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6306
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6350
		{
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6360
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6386
		{
			return unimplemented(sqllex, "func const")
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6395
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6397
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = DNull
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6422
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.str = ""
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6463
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6467
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
