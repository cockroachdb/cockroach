// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:308
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const ON = 57522
const ONLY = 57523
const OR = 57524
const ORDER = 57525
const ORDINALITY = 57526
const OUT = 57527
const OUTER = 57528
const OVER = 57529
const OVERLAPS = 57530
const OVERLAY = 57531
const PARENT = 57532
const PARTIAL = 57533
const PARTITION = 57534
const PASSWORD = 57535
const PLACING = 57536
const POSITION = 57537
const PRECEDING = 57538
const PRECISION = 57539
const PREPARE = 57540
const PRIMARY = 57541
const PRIORITY = 57542
const RANGE = 57543
const READ = 57544
const REAL = 57545
const RECURSIVE = 57546
const REF = 57547
const REFERENCES = 57548
const RENAME = 57549
const REPEATABLE = 57550
const RELEASE = 57551
const RESTRICT = 57552
const RETURNING = 57553
const REVOKE = 57554
const RIGHT = 57555
const ROLLBACK = 57556
const ROLLUP = 57557
const ROW = 57558
const ROWS = 57559
const RSHIFT = 57560
const STATUS = 57561
const SAVEPOINT = 57562
const SEARCH = 57563
const SECOND = 57564
const SELECT = 57565
const SERIAL = 57566
const SERIALIZABLE = 57567
const SESSION = 57568
const SESSION_USER = 57569
const SET = 57570
const SHOW = 57571
const SIMILAR = 57572
const SIMPLE = 57573
const SMALLINT = 57574
const SMALLSERIAL = 57575
const SNAPSHOT = 57576
const SOME = 57577
const SPLIT = 57578
const SQL = 57579
const START = 57580
const STDIN = 57581
const STRICT = 57582
const STRING = 57583
const STORING = 57584
const SUBSTRING = 57585
const SYMMETRIC = 57586
const SYSTEM = 57587
const TABLE = 57588
const TABLES = 57589
const TEMPLATE = 57590
const TEXT = 57591
const THEN = 57592
const TIME = 57593
const TIMESTAMP = 57594
const TIMESTAMPTZ = 57595
const TO = 57596
const TRAILING = 57597
const TRANSACTION = 57598
const TREAT = 57599
const TRIM = 57600
const TRUE = 57601
const TRUNCATE = 57602
const TYPE = 57603
const UNBOUNDED = 57604
const UNCOMMITTED = 57605
const UNION = 57606
const UNIQUE = 57607
const UNKNOWN = 57608
const UPDATE = 57609
const UPSERT = 57610
const USER = 57611
const USERS = 57612
const USING = 57613
const VALID = 57614
const VALIDATE = 57615
const VALUE = 57616
const VALUES = 57617
const VARCHAR = 57618
const VARIADIC = 57619
const VIEW = 57620
const VARYING = 57621
const WHEN = 57622
const WHERE = 57623
const WINDOW = 57624
const WITH = 57625
const WITHIN = 57626
const WITHOUT = 57627
const YEAR = 57628
const ZONE = 57629
const NOT_LA = 57630
const WITH_LA = 57631
const AS_LA = 57632
const POSTFIXOP = 57633
const UMINUS = 57634

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5027

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	311, 27,
	-2, 396,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 369,
	180, 369,
	211, 369,
	309, 369,
	311, 369,
	-2, 379,
	-1, 59,
	1, 372,
	180, 372,
	211, 372,
	309, 372,
	311, 372,
	-2, 378,
	-1, 68,
	1, 27,
	311, 27,
	-2, 396,
	-1, 398,
	1, 177,
	311, 177,
	-2, 908,
	-1, 434,
	155, 406,
	179, 406,
	-2, 375,
	-1, 437,
	155, 405,
	179, 405,
	-2, 373,
	-1, 562,
	155, 405,
	179, 405,
	-2, 376,
	-1, 619,
	308, 844,
	-2, 837,
	-1, 620,
	308, 845,
	-2, 838,
	-1, 626,
	5, 543,
	308, 543,
	-2, 1003,
	-1, 650,
	5, 509,
	-2, 977,
	-1, 651,
	5, 537,
	308, 537,
	-2, 979,
	-1, 652,
	5, 517,
	-2, 980,
	-1, 653,
	5, 516,
	-2, 981,
	-1, 654,
	5, 537,
	308, 537,
	-2, 984,
	-1, 655,
	5, 537,
	308, 537,
	-2, 985,
	-1, 656,
	5, 538,
	-2, 988,
	-1, 657,
	5, 503,
	-2, 989,
	-1, 658,
	5, 503,
	-2, 990,
	-1, 659,
	5, 519,
	-2, 994,
	-1, 660,
	5, 504,
	-2, 999,
	-1, 661,
	5, 505,
	-2, 1000,
	-1, 662,
	5, 506,
	-2, 1001,
	-1, 663,
	5, 507,
	-2, 1002,
	-1, 664,
	5, 503,
	-2, 1006,
	-1, 665,
	5, 510,
	-2, 1011,
	-1, 666,
	5, 508,
	-2, 1014,
	-1, 667,
	5, 535,
	308, 535,
	-2, 1016,
	-1, 668,
	5, 539,
	-2, 1019,
	-1, 669,
	5, 541,
	-2, 1020,
	-1, 670,
	5, 534,
	308, 534,
	-2, 1024,
	-1, 923,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	183, 379,
	264, 379,
	-2, 656,
	-1, 931,
	308, 822,
	-2, 810,
	-1, 1136,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 578,
	-1, 1137,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 579,
	-1, 1138,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 580,
	-1, 1142,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 584,
	-1, 1143,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 585,
	-1, 1144,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 586,
	-1, 1147,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 591,
	-1, 1153,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 593,
	-1, 1156,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 598,
	-1, 1157,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 599,
	-1, 1158,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 600,
	-1, 1184,
	188, 728,
	-2, 731,
	-1, 1207,
	114, 744,
	308, 844,
	-2, 837,
	-1, 1208,
	114, 745,
	-2, 973,
	-1, 1209,
	114, 746,
	-2, 906,
	-1, 1210,
	114, 747,
	-2, 877,
	-1, 1211,
	114, 748,
	-2, 892,
	-1, 1212,
	114, 749,
	-2, 905,
	-1, 1213,
	114, 750,
	-2, 941,
	-1, 1364,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	183, 379,
	264, 379,
	-2, 444,
	-1, 1368,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 592,
	-1, 1369,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 594,
	-1, 1374,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 595,
	-1, 1393,
	188, 727,
	-2, 730,
	-1, 1563,
	1, 445,
	67, 445,
	97, 445,
	115, 445,
	119, 445,
	121, 445,
	133, 445,
	139, 445,
	144, 445,
	152, 445,
	155, 445,
	166, 445,
	179, 445,
	180, 445,
	183, 445,
	211, 445,
	213, 445,
	264, 445,
	271, 445,
	281, 445,
	282, 445,
	290, 445,
	309, 445,
	311, 445,
	312, 445,
	-2, 444,
	-1, 1565,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 596,
	-1, 1570,
	142, 0,
	-2, 610,
	-1, 1578,
	188, 729,
	-2, 732,
	-1, 1612,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 636,
	-1, 1613,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 637,
	-1, 1614,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 638,
	-1, 1618,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 642,
	-1, 1619,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 643,
	-1, 1620,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 644,
	-1, 1731,
	142, 0,
	-2, 611,
	-1, 1734,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 614,
	-1, 1735,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 616,
	-1, 1826,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 615,
	-1, 1827,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 617,
	-1, 1834,
	142, 0,
	-2, 645,
	-1, 1884,
	142, 0,
	-2, 646,
	-1, 1940,
	35, 0,
	127, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 976,
}

const sqlNprod = 1119
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25209

var sqlAct = [...]int{

	620, 1525, 1919, 1939, 1963, 1774, 1890, 1920, 1938, 1921,
	926, 1108, 438, 1019, 1704, 845, 1589, 735, 77, 1011,
	1797, 593, 1723, 610, 618, 617, 1813, 399, 1535, 76,
	671, 45, 1649, 269, 1691, 1559, 1690, 851, 1716, 271,
	76, 76, 76, 1101, 1339, 76, 459, 1709, 76, 19,
	1558, 1450, 1341, 1087, 1362, 1541, 76, 272, 1082, 1288,
	1396, 1353, 847, 76, 76, 1020, 1086, 76, 928, 273,
	76, 76, 76, 76, 581, 1449, 719, 686, 1551, 683,
	585, 1116, 978, 987, 1117, 473, 1347, 257, 1051, 1233,
	1194, 922, 1169, 443, 1166, 1120, 445, 58, 1044, 868,
	26, 1035, 15, 799, 7, 783, 708, 548, 704, 474,
	1077, 688, 736, 1204, 1083, 475, 476, 1118, 591, 810,
	549, 437, 780, 582, 22, 495, 1090, 1013, 486, 963,
	489, 959, 21, 10, 58, 9, 8, 6, 262, 4,
	261, 255, 263, 488, 874, 448, 565, 564, 566, 801,
	779, 386, 797, 377, 712, 482, 446, 569, 1820, 547,
	59, 1821, 266, 1010, 442, 58, 60, 389, 1012, 721,
	264, 265, 1361, 267, 259, 258, 1016, 260, 721, 1048,
	1954, 442, 1935, 1112, 456, 1796, 1054, 462, 1927, 721,
	469, 1112, 1917, 1912, 1911, 1041, 1112, 1112, 1886, 1299,
	1880, 1041, 1865, 1112, 1300, 1796, 1855, 425, 1828, 1112,
	1807, 1041, 64, 1796, 465, 1804, 876, 698, 1112, 435,
	450, 1795, 1049, 1779, 1796, 434, 1112, 1871, 1778, 1756,
	396, 1112, 1054, 1736, 1733, 66, 1054, 1041, 1676, 1675,
	1661, 1054, 1054, 1112, 1574, 1511, 1505, 1054, 1008, 1008,
	875, 76, 76, 76, 76, 76, 1467, 498, 1350, 1468,
	1050, 1047, 1465, 27, 67, 1054, 1464, 1463, 1393, 1054,
	1054, 1054, 62, 1351, 50, 499, 1625, 1577, 63, 1391,
	1390, 491, 491, 1328, 1392, 1054, 1112, 500, 443, 1113,
	1326, 1063, 1112, 1054, 1054, 1350, 1053, 61, 52, 1054,
	877, 878, 1040, 976, 28, 1041, 57, 1329, 1007, 975,
	1395, 1008, 974, 729, 1112, 64, 730, 1056, 1178, 1799,
	1052, 1107, 1071, 880, 477, 41, 577, 576, 478, 840,
	478, 839, 36, 722, 791, 53, 790, 511, 66, 40,
	37, 455, 722, 64, 879, 477, 877, 878, 68, 478,
	894, 1363, 824, 722, 531, 1974, 42, 1937, 1933, 1926,
	1881, 1805, 38, 877, 878, 1761, 66, 67, 483, 880,
	1757, 576, 1749, 76, 1748, 62, 496, 1747, 1742, 1741,
	1740, 63, 1688, 1640, 1046, 492, 880, 1635, 76, 1634,
	879, 76, 76, 1682, 1633, 67, 1580, 1563, 1540, 885,
	1015, 1174, 1299, 1515, 1472, 1469, 1045, 879, 268, 1457,
	1448, 471, 1419, 1416, 875, 1415, 1413, 1401, 1400, 1327,
	1250, 268, 1331, 1201, 1200, 76, 576, 76, 61, 76,
	76, 76, 934, 76, 575, 725, 850, 1910, 39, 1591,
	679, 1900, 1868, 1847, 720, 885, 1845, 563, 76, 55,
	895, 57, 43, 1836, 54, 843, 555, 1823, 558, 76,
	44, 1817, 885, 64, 57, 1802, 1793, 1771, 47, 49,
	1754, 1727, 1698, 76, 1569, 1533, 1531, 36, 51, 271,
	76, 76, 76, 1530, 76, 37, 66, 1528, 1484, 1513,
	36, 1483, 1447, 1175, 1409, 562, 1408, 272, 37, 1386,
	56, 519, 678, 76, 76, 877, 878, 38, 896, 273,
	1382, 76, 709, 76, 520, 67, 1420, 1421, 1171, 1315,
	38, 1681, 1277, 62, 498, 498, 1276, 677, 880, 63,
	1264, 1263, 271, 76, 1243, 76, 76, 76, 76, 76,
	76, 76, 499, 499, 554, 1199, 76, 76, 61, 879,
	272, 1111, 76, 964, 500, 500, 967, 971, 514, 516,
	76, 957, 273, 956, 955, 825, 724, 954, 953, 727,
	952, 477, 951, 1687, 849, 478, 552, 950, 76, 550,
	949, 76, 948, 706, 947, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 946, 906, 945, 483, 572, 573,
	1264, 944, 943, 942, 578, 472, 435, 941, 64, 932,
	930, 61, 434, 844, 49, 1426, 931, 877, 878, 460,
	731, 64, 580, 854, 517, 507, 505, 49, 443, 1686,
	842, 66, 1501, 929, 1309, 711, 714, 883, 884, 886,
	1308, 906, 694, 1822, 66, 1420, 1421, 733, 1342, 863,
	877, 878, 881, 882, 883, 884, 886, 525, 906, 1685,
	67, 879, 1301, 787, 1363, 786, 969, 1471, 62, 1048,
	970, 1470, 848, 67, 63, 1367, 821, 814, 541, 526,
	939, 62, 76, 1710, 612, 829, 1012, 63, 1592, 1404,
	76, 1195, 432, 61, 76, 872, 960, 1295, 76, 76,
	545, 1478, 76, 841, 1896, 1950, 256, 679, 1164, 1854,
	1951, 856, 1049, 858, 857, 1062, 76, 1669, 76, 76,
	251, 76, 1162, 870, 76, 1322, 76, 76, 418, 76,
	435, 498, 546, 435, 435, 935, 864, 419, 247, 865,
	866, 71, 1787, 981, 1426, 424, 1786, 423, 1499, 499,
	1050, 1047, 1498, 1029, 491, 1475, 491, 1474, 1370, 1314,
	1815, 500, 1014, 826, 1014, 980, 830, 831, 832, 833,
	834, 1495, 252, 992, 994, 980, 837, 838, 689, 257,
	690, 979, 76, 76, 1036, 248, 961, 962, 965, 1512,
	1160, 1247, 1159, 70, 968, 1313, 1165, 523, 1312, 689,
	906, 690, 1311, 1154, 1853, 1422, 1423, 1424, 1425, 1427,
	1052, 997, 1055, 689, 1004, 690, 984, 1003, 1000, 1005,
	551, 1246, 972, 1125, 1102, 271, 58, 503, 427, 76,
	262, 58, 261, 1379, 263, 1038, 524, 1037, 1713, 1039,
	1168, 1001, 1018, 272, 76, 76, 1168, 1377, 1500, 691,
	496, 76, 1028, 695, 266, 273, 1033, 1030, 1076, 1031,
	428, 988, 264, 265, 1027, 267, 259, 258, 1283, 260,
	691, 1032, 702, 1898, 1046, 715, 1195, 76, 1161, 433,
	76, 696, 1776, 429, 691, 1163, 605, 1486, 253, 965,
	1950, 968, 430, 1052, 1114, 1520, 1151, 1058, 1923, 1065,
	1059, 1060, 1966, 1960, 1057, 962, 961, 1124, 1517, 69,
	695, 1064, 906, 1971, 271, 74, 721, 1375, 250, 249,
	254, 1380, 991, 1293, 542, 1289, 369, 370, 371, 1321,
	1282, 388, 272, 1503, 400, 1914, 1424, 1425, 1427, 877,
	878, 72, 388, 502, 273, 906, 1518, 1172, 1080, 449,
	449, 1915, 1297, 74, 1289, 1052, 74, 74, 468, 74,
	1079, 1081, 880, 1493, 1275, 1352, 1105, 1106, 1279, 441,
	700, 1420, 1421, 977, 1924, 699, 1848, 1323, 76, 76,
	76, 543, 522, 879, 76, 687, 521, 76, 1149, 1152,
	1122, 1123, 1249, 76, 76, 76, 76, 76, 1182, 1115,
	544, 76, 958, 1376, 76, 76, 1052, 1959, 990, 76,
	1378, 440, 1832, 1356, 1925, 1148, 76, 1097, 76, 1794,
	920, 1067, 1407, 1487, 1964, 76, 1552, 1069, 1562, 1220,
	692, 1359, 1176, 1191, 1219, 76, 706, 1257, 885, 1173,
	442, 706, 1354, 522, 1070, 819, 818, 443, 812, 807,
	1357, 692, 1372, 1068, 1251, 442, 76, 76, 1167, 1777,
	1214, 1922, 76, 1949, 1355, 692, 1965, 1947, 1703, 1099,
	1426, 567, 498, 1291, 989, 1274, 534, 1972, 1718, 512,
	722, 510, 568, 1621, 1967, 1752, 1545, 1978, 1252, 895,
	499, 1150, 76, 1958, 76, 568, 76, 1356, 1261, 1781,
	76, 1780, 500, 1769, 76, 1303, 1665, 1304, 1305, 378,
	796, 1358, 1842, 76, 1477, 1359, 1260, 1286, 1256, 1100,
	855, 1436, 76, 1334, 1294, 822, 1550, 846, 1724, 1330,
	383, 1332, 1516, 1302, 1357, 379, 439, 74, 484, 74,
	400, 400, 1668, 567, 1333, 1891, 794, 896, 1336, 1667,
	836, 792, 1306, 443, 1307, 1536, 1705, 795, 1770, 380,
	1657, 1036, 1318, 1266, 1265, 1622, 1317, 1719, 1236, 1717,
	1320, 1623, 1319, 1753, 1325, 1324, 1977, 382, 1547, 1437,
	1546, 771, 521, 481, 559, 1725, 480, 440, 1526, 1689,
	742, 1352, 1658, 1664, 1542, 1358, 1348, 823, 1261, 1394,
	1767, 1198, 1835, 443, 1751, 1451, 1366, 1344, 58, 1568,
	673, 820, 1038, 1345, 1037, 592, 1039, 1365, 1414, 1381,
	1284, 1768, 1452, 1061, 890, 887, 888, 889, 881, 882,
	883, 884, 886, 1006, 906, 540, 1666, 539, 1197, 1356,
	538, 537, 536, 535, 73, 1373, 1371, 1220, 1220, 532,
	479, 940, 828, 1918, 1888, 1646, 443, 1359, 1491, 508,
	1422, 1423, 1424, 1425, 1427, 76, 381, 1489, 1354, 1388,
	1476, 1338, 1103, 1095, 513, 1034, 1357, 400, 400, 1653,
	728, 1654, 457, 726, 1403, 464, 467, 723, 457, 718,
	1355, 701, 697, 693, 1586, 1340, 1788, 1109, 1951, 528,
	76, 76, 1220, 1220, 1220, 816, 980, 1656, 570, 453,
	384, 388, 995, 74, 1659, 400, 557, 400, 1507, 560,
	1454, 1455, 1456, 980, 1790, 3, 996, 76, 1799, 993,
	76, 1504, 76, 417, 449, 1850, 1473, 1358, 1883, 76,
	813, 808, 1543, 574, 374, 74, 1480, 1490, 999, 1492,
	1532, 76, 998, 1872, 1110, 76, 1701, 672, 1494, 74,
	1098, 1094, 271, 76, 1502, 1508, 74, 74, 74, 1529,
	716, 1017, 1506, 1655, 871, 571, 454, 778, 529, 1482,
	272, 1510, 1509, 788, 1274, 375, 420, 421, 385, 74,
	74, 734, 273, 1537, 461, 1556, 1527, 784, 1043, 784,
	1571, 1519, 1521, 1522, 1975, 1976, 1539, 1641, 76, 1523,
	1582, 1583, 1584, 1514, 625, 1555, 1466, 1549, 1310, 400,
	1248, 784, 400, 400, 400, 400, 400, 835, 1245, 378,
	1420, 1421, 400, 400, 1244, 1544, 1553, 1554, 388, 1548,
	877, 878, 1073, 1072, 1192, 675, 853, 1074, 921, 1738,
	383, 1869, 1220, 1220, 1810, 379, 1707, 1585, 1335, 1075,
	933, 1579, 1538, 426, 449, 1775, 457, 873, 467, 376,
	1593, 827, 533, 1913, 1744, 76, 76, 76, 1406, 380,
	1812, 1831, 1196, 938, 76, 76, 35, 1693, 598, 1647,
	76, 1479, 76, 1598, 76, 76, 76, 382, 1176, 76,
	76, 1628, 1089, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
	1220, 1220, 1088, 1220, 1595, 1596, 1629, 274, 817, 1642,
	1645, 76, 76, 1600, 1601, 806, 621, 800, 809, 1205,
	676, 623, 739, 624, 740, 966, 611, 76, 76, 737,
	494, 76, 1697, 1696, 1695, 1683, 76, 1697, 1696, 1695,
	1349, 76, 742, 742, 1021, 1193, 1632, 1684, 74, 1402,
	1702, 936, 597, 603, 602, 674, 985, 1180, 1679, 504,
	74, 1722, 1360, 1708, 74, 1002, 381, 1732, 74, 1706,
	1700, 48, 76, 518, 394, 395, 1292, 1680, 1662, 1663,
	1104, 859, 74, 1488, 1025, 1026, 1721, 74, 431, 1417,
	74, 506, 400, 400, 1226, 400, 1218, 1215, 1728, 553,
	682, 1022, 530, 1298, 1042, 579, 867, 622, 452, 451,
	384, 1714, 1715, 1084, 527, 1720, 793, 1066, 422, 1844,
	1096, 1259, 457, 1970, 1849, 1699, 1485, 76, 1895, 76,
	1750, 76, 76, 65, 25, 23, 20, 18, 17, 16,
	76, 24, 14, 13, 12, 11, 34, 33, 784, 873,
	742, 32, 31, 30, 680, 29, 777, 5, 1765, 2,
	1, 0, 76, 0, 0, 0, 789, 0, 705, 0,
	1762, 0, 0, 0, 0, 457, 713, 713, 0, 0,
	1763, 0, 0, 1798, 76, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 1800, 1078, 765, 0, 464, 467,
	76, 0, 1697, 1696, 1695, 0, 742, 0, 76, 76,
	74, 1085, 1791, 0, 0, 1803, 0, 873, 0, 1220,
	0, 0, 0, 0, 0, 0, 0, 1784, 1785, 0,
	0, 1806, 1830, 1811, 1816, 0, 0, 0, 1809, 0,
	0, 0, 0, 74, 1825, 925, 400, 0, 76, 0,
	742, 0, 1837, 0, 0, 0, 1846, 0, 0, 0,
	0, 0, 1783, 0, 0, 0, 0, 76, 76, 0,
	0, 76, 0, 0, 0, 76, 1789, 1840, 0, 0,
	76, 1858, 0, 0, 1819, 1841, 0, 1866, 0, 1860,
	0, 0, 1862, 1867, 0, 0, 0, 0, 76, 0,
	1697, 1696, 1695, 271, 76, 443, 0, 1861, 0, 583,
	583, 1859, 1220, 0, 0, 0, 0, 1873, 684, 1874,
	1870, 272, 1824, 1877, 1882, 0, 76, 0, 76, 76,
	0, 76, 0, 273, 1885, 707, 1878, 0, 0, 0,
	1901, 0, 0, 764, 74, 1254, 1255, 0, 0, 1905,
	985, 1904, 76, 1262, 0, 1899, 0, 1903, 1897, 1267,
	1268, 1270, 1272, 1273, 1902, 1907, 1798, 1278, 0, 1909,
	1280, 74, 1697, 1696, 1695, 74, 0, 973, 1908, 76,
	0, 76, 74, 0, 1296, 1906, 1934, 0, 706, 457,
	1928, 74, 1930, 467, 1932, 0, 1220, 457, 0, 76,
	741, 74, 0, 0, 1944, 0, 0, 0, 0, 1948,
	1946, 1023, 1876, 0, 0, 1952, 467, 0, 1879, 467,
	0, 1955, 1078, 784, 1957, 860, 862, 0, 1078, 1956,
	1953, 767, 869, 877, 878, 1969, 1968, 1973, 0, 0,
	0, 0, 1893, 0, 915, 916, 917, 918, 919, 0,
	0, 0, 0, 0, 924, 0, 880, 0, 853, 1979,
	853, 0, 400, 0, 0, 0, 74, 0, 0, 0,
	1343, 0, 0, 0, 937, 0, 0, 879, 0, 1346,
	0, 0, 1657, 0, 1650, 0, 0, 0, 74, 0,
	0, 0, 1648, 877, 878, 1931, 1652, 0, 0, 907,
	908, 909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1658, 0, 880, 0, 911, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 885, 0, 1651, 0, 0, 879, 0, 457,
	0, 0, 0, 894, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 0, 0, 765, 765,
	0, 0, 457, 0, 0, 0, 742, 742, 1179, 1183,
	0, 1186, 0, 895, 0, 742, 742, 0, 0, 0,
	0, 0, 885, 0, 1206, 1206, 1217, 0, 1228, 0,
	0, 1653, 0, 1654, 1240, 1241, 1242, 0, 0, 0,
	904, 912, 0, 738, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1656,
	0, 873, 0, 0, 0, 0, 1659, 902, 0, 0,
	0, 896, 0, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 74, 0, 0,
	0, 0, 0, 1253, 0, 0, 765, 0, 0, 0,
	0, 1383, 1384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1524, 0, 1655, 985, 0, 853, 0,
	1281, 896, 0, 0, 1285, 1534, 0, 0, 0, 0,
	0, 705, 0, 905, 0, 764, 764, 74, 0, 0,
	705, 74, 881, 882, 883, 884, 886, 0, 906, 1561,
	457, 0, 765, 583, 742, 0, 1443, 1444, 1445, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 0, 1153, 0, 1155, 1156, 1157, 1158, 0, 0,
	0, 903, 741, 741, 1590, 0, 765, 0, 890, 887,
	888, 889, 881, 882, 883, 884, 886, 0, 906, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 1202, 1203, 767, 767, 1216, 0, 1227, 1229, 1234,
	1237, 1238, 1239, 0, 0, 0, 0, 457, 0, 0,
	1385, 0, 0, 764, 1387, 1420, 1421, 0, 0, 0,
	0, 0, 684, 0, 742, 0, 0, 1398, 1399, 0,
	0, 1643, 1644, 985, 0, 0, 0, 599, 46, 0,
	873, 873, 0, 0, 0, 0, 1670, 0, 1671, 0,
	74, 1673, 1674, 0, 0, 1677, 74, 0, 1287, 0,
	1290, 0, 0, 1446, 0, 0, 0, 0, 0, 764,
	741, 0, 0, 0, 1459, 46, 1566, 1567, 0, 0,
	0, 0, 0, 0, 0, 1692, 0, 873, 1085, 0,
	1692, 0, 0, 0, 0, 0, 436, 0, 0, 444,
	0, 767, 1316, 74, 74, 0, 46, 74, 0, 742,
	0, 0, 1561, 764, 1426, 1496, 1497, 1726, 0, 0,
	0, 0, 0, 766, 766, 0, 741, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 0, 1624, 1745, 0,
	0, 0, 0, 0, 0, 869, 0, 767, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 738, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 457, 0, 0, 0,
	0, 742, 0, 0, 0, 0, 1368, 1369, 0, 0,
	0, 767, 1374, 985, 0, 1764, 0, 400, 1766, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 1437, 0, 1575, 1389, 877, 878, 0,
	0, 766, 0, 0, 0, 1397, 457, 0, 873, 0,
	457, 0, 0, 1405, 0, 0, 0, 1410, 0, 0,
	880, 0, 0, 0, 0, 1692, 0, 0, 0, 0,
	74, 0, 0, 765, 0, 0, 0, 1814, 0, 1420,
	1421, 879, 924, 0, 0, 0, 74, 0, 1234, 1234,
	1234, 0, 0, 738, 873, 1561, 1626, 766, 0, 0,
	0, 0, 765, 765, 444, 1420, 1421, 1636, 0, 0,
	0, 765, 765, 1430, 1422, 1423, 1424, 1425, 1427, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 853, 0, 885, 0, 0, 0,
	0, 766, 0, 0, 765, 0, 0, 583, 0, 738,
	0, 0, 0, 1851, 1852, 583, 0, 1856, 0, 684,
	0, 1857, 0, 1692, 0, 0, 400, 0, 0, 0,
	0, 0, 0, 1772, 0, 0, 0, 0, 1426, 0,
	0, 0, 1875, 0, 873, 0, 0, 895, 0, 1672,
	873, 0, 1712, 738, 0, 1678, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 1892, 0, 873, 74, 0, 400, 0, 0,
	764, 0, 0, 0, 0, 1564, 0, 0, 1565, 1436,
	0, 0, 0, 0, 0, 1692, 0, 0, 1814, 1570,
	0, 0, 457, 457, 0, 896, 457, 0, 0, 764,
	764, 0, 0, 1316, 0, 1436, 0, 0, 764, 764,
	765, 0, 1587, 0, 0, 74, 1834, 873, 0, 0,
	0, 0, 1597, 0, 0, 0, 1599, 741, 877, 878,
	0, 0, 0, 0, 0, 1945, 0, 1437, 0, 0,
	0, 764, 0, 436, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 741, 741, 767, 1630,
	1631, 0, 0, 1437, 0, 741, 741, 0, 1637, 1638,
	1639, 0, 879, 887, 888, 889, 881, 882, 883, 884,
	886, 0, 906, 0, 0, 0, 0, 767, 767, 0,
	0, 0, 0, 0, 0, 0, 767, 767, 741, 0,
	1884, 0, 0, 0, 0, 1773, 0, 0, 0, 0,
	765, 583, 0, 0, 1431, 1428, 1429, 1430, 1422, 1423,
	1424, 1425, 1427, 1420, 1421, 0, 0, 885, 0, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 1428, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1808,
	1711, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 0, 0, 0, 0, 457, 0, 436, 0, 0,
	436, 436, 0, 0, 0, 0, 1731, 0, 895, 0,
	1734, 1735, 0, 0, 0, 1737, 0, 0, 766, 1739,
	0, 0, 0, 0, 923, 765, 1743, 0, 927, 0,
	1746, 1864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 766, 766, 0,
	0, 0, 1426, 0, 0, 0, 766, 766, 0, 0,
	0, 0, 0, 1755, 0, 0, 896, 0, 0, 0,
	738, 0, 0, 0, 0, 767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 0, 766,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	738, 0, 0, 1436, 0, 1782, 0, 765, 738, 738,
	0, 401, 1916, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1894, 0, 0, 0, 0, 402,
	0, 0, 1801, 0, 0, 0, 0, 0, 0, 1936,
	46, 738, 46, 0, 741, 0, 889, 881, 882, 883,
	884, 886, 0, 906, 0, 0, 1818, 46, 0, 0,
	0, 1437, 46, 0, 404, 0, 0, 1826, 1827, 409,
	410, 0, 764, 415, 1023, 767, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 403, 405, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 1839, 0, 0, 880,
	0, 911, 0, 0, 0, 766, 0, 0, 0, 1843,
	0, 877, 878, 0, 897, 898, 899, 907, 908, 909,
	879, 0, 0, 0, 406, 0, 894, 900, 0, 741,
	0, 684, 0, 0, 880, 0, 911, 407, 408, 1428,
	1429, 1430, 1422, 1423, 1424, 1425, 1427, 0, 0, 0,
	0, 0, 0, 411, 764, 879, 0, 738, 0, 0,
	767, 894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 1420, 1421, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 904, 912, 0, 0, 0, 1730, 0,
	0, 0, 0, 0, 1119, 766, 0, 0, 910, 0,
	885, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 895, 0, 904, 912,
	0, 0, 1435, 0, 1929, 0, 0, 0, 0, 0,
	1170, 0, 767, 910, 0, 0, 0, 0, 901, 0,
	0, 0, 1943, 1943, 412, 902, 0, 738, 413, 0,
	0, 895, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 416, 1943, 0,
	0, 1426, 0, 901, 896, 0, 0, 0, 1420, 1421,
	766, 1438, 1439, 1440, 0, 0, 905, 0, 0, 0,
	0, 0, 0, 0, 1729, 0, 0, 0, 0, 0,
	0, 0, 0, 1943, 1441, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 1436, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 738, 444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	0, 906, 766, 0, 0, 0, 0, 0, 1758, 0,
	1420, 1421, 0, 1438, 1439, 1440, 0, 1426, 0, 903,
	1437, 0, 891, 892, 893, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 0, 0,
	0, 877, 878, 1462, 897, 898, 899, 907, 908, 909,
	1441, 0, 46, 0, 738, 0, 46, 900, 0, 0,
	1435, 0, 0, 0, 880, 0, 911, 0, 1436, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1364,
	0, 0, 0, 0, 0, 879, 0, 0, 0, 0,
	0, 894, 0, 1432, 1433, 1434, 0, 1431, 1428, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 0, 0, 0, 1426,
	1170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 1442, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 912,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 0, 0, 902, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 1432,
	1433, 1434, 0, 1431, 1428, 1429, 1430, 1422, 1423, 1424,
	1425, 1427, 0, 901, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 1433, 1434, 0, 1431, 1428, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 0, 0, 0, 0, 1119, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 903,
	0, 0, 891, 892, 893, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 608, 609, 606, 607, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 635, 601,
	0, 0, 0, 81, 82, 0, 650, 200, 651, 83,
	652, 653, 0, 84, 204, 205, 85, 616, 634, 654,
	655, 208, 0, 646, 0, 627, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 1942,
	0, 628, 630, 0, 629, 631, 95, 96, 97, 98,
	656, 99, 657, 658, 0, 100, 0, 101, 0, 0,
	0, 649, 103, 0, 104, 0, 0, 0, 600, 105,
	106, 636, 637, 614, 0, 0, 107, 108, 659, 0,
	109, 0, 110, 46, 0, 277, 0, 111, 647, 0,
	218, 0, 112, 113, 114, 643, 645, 0, 0, 117,
	0, 115, 0, 278, 116, 660, 661, 662, 663, 0,
	626, 0, 0, 118, 281, 119, 120, 0, 122, 121,
	0, 648, 282, 123, 1119, 1119, 124, 0, 1119, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 589, 134, 615, 644, 136, 664, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 285, 140, 286, 638,
	141, 142, 143, 144, 0, 639, 145, 232, 146, 0,
	147, 148, 149, 665, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 604, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 632, 166, 167,
	0, 168, 666, 237, 169, 0, 175, 170, 171, 172,
	174, 667, 173, 640, 0, 176, 0, 177, 178, 179,
	0, 240, 668, 669, 0, 0, 180, 641, 642, 613,
	181, 182, 1941, 184, 0, 0, 185, 186, 187, 633,
	188, 0, 189, 190, 191, 245, 670, 0, 0, 192,
	0, 0, 0, 0, 193, 194, 195, 196, 0, 0,
	0, 0, 0, 1792, 0, 0, 0, 0, 0, 586,
	587, 0, 0, 0, 0, 588, 0, 0, 596, 46,
	0, 0, 0, 594, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 289, 80, 290, 291, 292, 293, 197,
	294, 295, 296, 297, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 298, 84, 204, 205, 85, 299, 300,
	206, 207, 208, 301, 209, 302, 275, 303, 86, 87,
	88, 923, 89, 304, 90, 91, 92, 305, 276, 93,
	94, 306, 307, 308, 309, 310, 311, 95, 96, 97,
	98, 210, 99, 211, 212, 312, 100, 313, 101, 314,
	315, 316, 102, 103, 317, 104, 318, 0, 319, 213,
	105, 106, 214, 215, 320, 321, 322, 107, 108, 216,
	0, 109, 323, 110, 324, 325, 277, 326, 111, 217,
	327, 218, 328, 112, 113, 114, 219, 220, 279, 329,
	117, 330, 115, 331, 278, 116, 221, 222, 223, 224,
	332, 225, 333, 280, 118, 281, 119, 120, 334, 122,
	121, 335, 226, 282, 123, 283, 336, 124, 337, 338,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 339, 134, 340, 227, 136, 228, 137, 138,
	341, 342, 343, 344, 345, 139, 229, 285, 140, 286,
	230, 141, 142, 143, 144, 346, 231, 145, 232, 146,
	347, 147, 148, 149, 233, 150, 151, 348, 153, 154,
	152, 155, 349, 156, 287, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 350, 235, 164, 165, 351, 166,
	167, 288, 168, 236, 237, 169, 352, 175, 170, 171,
	172, 174, 238, 173, 239, 353, 176, 354, 177, 178,
	179, 355, 240, 241, 242, 356, 357, 180, 243, 244,
	358, 181, 182, 183, 184, 359, 360, 185, 186, 187,
	361, 188, 362, 189, 190, 191, 245, 246, 363, 364,
	192, 365, 366, 367, 368, 193, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1557, 78, 79, 289, 80,
	290, 291, 292, 293, 197, 294, 295, 296, 297, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 298, 84,
	204, 205, 85, 299, 300, 206, 207, 208, 301, 209,
	302, 275, 303, 86, 87, 88, 0, 89, 304, 90,
	91, 92, 305, 276, 93, 94, 306, 307, 308, 309,
	310, 311, 95, 96, 97, 98, 210, 99, 211, 212,
	312, 100, 313, 101, 314, 315, 316, 102, 103, 317,
	104, 318, 0, 319, 213, 105, 106, 214, 215, 320,
	321, 322, 107, 108, 216, 0, 109, 323, 110, 324,
	325, 277, 326, 111, 217, 327, 218, 328, 112, 113,
	114, 219, 220, 279, 329, 117, 330, 115, 331, 278,
	116, 221, 222, 223, 224, 332, 225, 333, 280, 118,
	281, 119, 120, 334, 122, 121, 335, 226, 282, 123,
	283, 336, 124, 337, 338, 125, 0, 126, 127, 128,
	129, 130, 284, 131, 132, 135, 133, 339, 134, 340,
	227, 136, 228, 137, 138, 341, 342, 343, 344, 345,
	139, 229, 285, 140, 286, 230, 141, 142, 143, 144,
	346, 231, 145, 232, 146, 347, 147, 148, 149, 233,
	150, 151, 348, 153, 154, 152, 155, 349, 156, 287,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 350,
	235, 164, 165, 351, 166, 167, 288, 168, 236, 237,
	169, 352, 175, 170, 171, 172, 174, 238, 173, 239,
	353, 176, 354, 177, 178, 179, 355, 240, 241, 242,
	356, 357, 180, 243, 244, 358, 181, 182, 183, 184,
	359, 360, 185, 186, 187, 361, 188, 362, 189, 190,
	191, 245, 246, 363, 364, 192, 365, 366, 367, 368,
	193, 194, 195, 196, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	78, 79, 289, 80, 290, 291, 292, 293, 197, 294,
	295, 296, 297, 81, 82, 198, 199, 200, 201, 83,
	202, 203, 298, 84, 204, 205, 85, 299, 300, 206,
	207, 208, 301, 209, 302, 275, 303, 86, 87, 88,
	0, 89, 304, 90, 91, 92, 305, 276, 93, 94,
	306, 307, 308, 309, 310, 311, 95, 96, 97, 98,
	210, 99, 211, 212, 312, 100, 313, 101, 314, 315,
	316, 102, 103, 317, 104, 318, 0, 319, 213, 105,
	106, 214, 215, 320, 321, 322, 107, 108, 216, 0,
	109, 323, 110, 324, 325, 277, 326, 111, 217, 327,
	218, 328, 112, 113, 114, 219, 220, 279, 329, 117,
	330, 115, 331, 278, 116, 221, 222, 223, 224, 332,
	225, 333, 280, 118, 281, 119, 120, 334, 122, 121,
	335, 226, 282, 123, 283, 336, 124, 337, 338, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 339, 134, 340, 227, 136, 228, 137, 138, 341,
	342, 343, 344, 345, 139, 229, 285, 140, 286, 230,
	141, 142, 143, 144, 346, 231, 145, 232, 146, 347,
	147, 148, 149, 233, 150, 151, 348, 153, 154, 152,
	155, 349, 156, 287, 157, 158, 234, 159, 0, 160,
	161, 162, 163, 350, 235, 164, 165, 351, 166, 167,
	288, 168, 236, 237, 169, 352, 175, 170, 171, 172,
	174, 238, 173, 239, 353, 176, 354, 177, 178, 179,
	355, 240, 241, 242, 356, 357, 180, 243, 244, 358,
	181, 182, 183, 184, 359, 360, 185, 186, 187, 361,
	188, 362, 189, 190, 191, 245, 246, 363, 364, 192,
	365, 366, 367, 368, 193, 194, 195, 196, 619, 608,
	609, 606, 607, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 1188, 80, 0, 0,
	0, 0, 635, 601, 0, 0, 0, 81, 82, 198,
	650, 200, 651, 83, 652, 653, 0, 84, 204, 205,
	85, 616, 634, 654, 655, 208, 0, 646, 0, 627,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 276, 93, 94, 0, 628, 630, 0, 629, 631,
	95, 96, 97, 98, 656, 99, 657, 658, 0, 100,
	0, 101, 0, 1189, 0, 649, 103, 0, 104, 0,
	0, 0, 600, 105, 106, 636, 637, 614, 0, 0,
	107, 108, 659, 0, 109, 0, 110, 0, 0, 277,
	0, 111, 647, 0, 218, 0, 112, 113, 114, 643,
	645, 279, 0, 117, 0, 115, 0, 278, 116, 660,
	661, 662, 663, 0, 626, 0, 280, 118, 281, 119,
	120, 0, 122, 121, 0, 648, 282, 123, 283, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 589, 134, 615, 644, 136,
	664, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	285, 140, 286, 638, 141, 142, 143, 144, 0, 639,
	145, 232, 146, 0, 147, 148, 149, 665, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 287, 157, 158,
	604, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 632, 166, 167, 288, 168, 666, 237, 169, 0,
	175, 170, 171, 172, 174, 667, 173, 640, 0, 176,
	0, 177, 178, 179, 0, 240, 668, 669, 0, 0,
	180, 641, 642, 613, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 633, 188, 0, 189, 190, 191, 245,
	670, 1187, 0, 192, 0, 0, 0, 0, 193, 194,
	195, 196, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 587, 1190, 0, 0, 0, 588,
	0, 0, 596, 1185, 0, 0, 0, 594, 619, 608,
	609, 606, 607, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 635, 601, 0, 0, 0, 81, 82, 198,
	650, 200, 651, 83, 652, 653, 0, 84, 204, 205,
	85, 616, 634, 654, 655, 208, 0, 646, 0, 627,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 276, 93, 94, 0, 628, 630, 0, 629, 631,
	95, 96, 97, 98, 656, 99, 657, 658, 685, 100,
	0, 101, 0, 0, 0, 649, 103, 0, 104, 0,
	0, 0, 600, 105, 106, 636, 637, 614, 0, 0,
	107, 108, 659, 0, 109, 0, 110, 0, 0, 277,
	0, 111, 647, 0, 218, 0, 112, 113, 114, 643,
	645, 279, 0, 117, 0, 115, 0, 278, 116, 660,
	661, 662, 663, 0, 626, 0, 280, 118, 281, 119,
	120, 0, 122, 121, 0, 648, 282, 123, 283, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 589, 134, 615, 644, 136,
	664, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	285, 140, 286, 638, 141, 142, 143, 144, 0, 639,
	145, 232, 146, 0, 147, 148, 149, 665, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 287, 157, 158,
	604, 159, 0, 160, 161, 162, 163, 64, 235, 164,
	165, 632, 166, 167, 288, 168, 666, 237, 169, 0,
	175, 170, 171, 172, 174, 667, 173, 640, 0, 176,
	66, 177, 178, 179, 0, 240, 668, 669, 0, 0,
	180, 641, 642, 613, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 633, 188, 0, 189, 190, 191, 501,
	670, 0, 0, 192, 0, 0, 0, 62, 193, 194,
	195, 196, 590, 63, 619, 608, 609, 606, 607, 595,
	0, 0, 0, 586, 587, 0, 0, 0, 0, 588,
	78, 79, 596, 80, 0, 0, 0, 594, 635, 601,
	0, 0, 0, 81, 82, 198, 650, 200, 651, 83,
	652, 653, 0, 84, 204, 205, 85, 616, 634, 654,
	655, 208, 0, 646, 0, 627, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 94,
	0, 628, 630, 0, 629, 631, 95, 96, 97, 98,
	656, 99, 657, 658, 0, 100, 0, 101, 0, 0,
	0, 649, 103, 0, 104, 0, 0, 0, 600, 105,
	106, 636, 637, 614, 0, 0, 107, 108, 659, 0,
	109, 0, 110, 0, 0, 277, 0, 111, 647, 0,
	218, 0, 112, 113, 114, 643, 645, 279, 0, 117,
	0, 115, 0, 278, 116, 660, 661, 662, 663, 0,
	626, 0, 280, 118, 281, 119, 120, 0, 122, 121,
	0, 648, 282, 123, 283, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 589, 134, 615, 644, 136, 664, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 285, 140, 286, 638,
	141, 142, 143, 144, 0, 639, 145, 232, 146, 0,
	147, 148, 149, 665, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 604, 159, 0, 160,
	161, 162, 163, 64, 235, 164, 165, 632, 166, 167,
	288, 168, 666, 237, 169, 0, 175, 170, 171, 172,
	174, 667, 173, 640, 0, 176, 66, 177, 178, 179,
	0, 240, 668, 669, 0, 0, 180, 641, 642, 613,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 633,
	188, 0, 189, 190, 191, 501, 670, 0, 0, 192,
	0, 0, 0, 62, 193, 194, 195, 196, 590, 63,
	619, 608, 609, 606, 607, 595, 0, 0, 0, 586,
	587, 0, 0, 0, 0, 588, 78, 79, 596, 80,
	0, 0, 0, 594, 635, 601, 0, 0, 0, 81,
	82, 198, 650, 200, 651, 83, 652, 653, 1230, 84,
	204, 205, 85, 616, 634, 654, 655, 208, 0, 646,
	0, 627, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 276, 93, 94, 0, 628, 630, 0,
	629, 631, 95, 96, 97, 98, 656, 99, 657, 658,
	0, 100, 0, 101, 0, 0, 0, 649, 103, 0,
	104, 0, 0, 0, 600, 105, 106, 636, 637, 614,
	0, 0, 107, 108, 659, 0, 109, 0, 110, 0,
	1235, 277, 0, 111, 647, 0, 218, 0, 112, 113,
	114, 643, 645, 279, 0, 117, 0, 115, 0, 278,
	116, 660, 661, 662, 663, 0, 626, 0, 280, 118,
	281, 119, 120, 0, 122, 121, 1231, 648, 282, 123,
	283, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 284, 131, 132, 135, 133, 589, 134, 615,
	644, 136, 664, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 285, 140, 286, 638, 141, 142, 143, 144,
	0, 639, 145, 232, 146, 0, 147, 148, 149, 665,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 287,
	157, 158, 604, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 632, 166, 167, 288, 168, 666, 237,
	169, 0, 175, 170, 171, 172, 174, 667, 173, 640,
	0, 176, 0, 177, 178, 179, 0, 240, 668, 669,
	0, 1232, 180, 641, 642, 613, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 633, 188, 0, 189, 190,
	191, 245, 670, 0, 0, 192, 0, 0, 0, 0,
	193, 194, 195, 196, 590, 0, 619, 608, 609, 606,
	607, 595, 0, 0, 0, 586, 587, 0, 0, 0,
	0, 588, 78, 79, 596, 80, 0, 0, 0, 594,
	635, 601, 0, 0, 0, 81, 82, 198, 650, 200,
	651, 83, 652, 653, 0, 84, 204, 205, 85, 616,
	634, 654, 655, 208, 0, 646, 0, 627, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 276,
	93, 94, 0, 628, 630, 0, 629, 631, 95, 96,
	97, 98, 656, 99, 657, 658, 0, 100, 0, 101,
	0, 0, 0, 649, 103, 0, 104, 0, 0, 0,
	600, 105, 106, 636, 637, 614, 0, 0, 107, 108,
	659, 0, 109, 0, 110, 0, 0, 277, 0, 111,
	647, 0, 218, 0, 112, 113, 114, 643, 645, 279,
	0, 117, 0, 115, 0, 278, 116, 660, 661, 662,
	663, 0, 626, 0, 280, 118, 281, 119, 120, 0,
	122, 121, 0, 648, 282, 123, 283, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 284, 131,
	132, 135, 133, 589, 134, 615, 644, 136, 664, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 285, 140,
	286, 638, 141, 142, 143, 144, 0, 639, 145, 232,
	146, 0, 147, 148, 149, 665, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 287, 157, 158, 604, 159,
	0, 160, 161, 162, 163, 0, 235, 164, 165, 632,
	166, 167, 288, 168, 666, 237, 169, 0, 175, 170,
	171, 172, 174, 667, 173, 640, 0, 176, 0, 177,
	178, 179, 0, 240, 668, 669, 0, 0, 180, 641,
	642, 613, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 633, 188, 0, 189, 190, 191, 245, 670, 0,
	0, 192, 0, 0, 0, 0, 193, 194, 195, 196,
	590, 0, 0, 0, 0, 619, 608, 609, 606, 607,
	595, 586, 587, 0, 0, 0, 0, 588, 929, 1181,
	596, 78, 79, 0, 80, 594, 0, 0, 0, 635,
	601, 0, 0, 0, 81, 82, 198, 650, 200, 651,
	83, 652, 653, 0, 84, 204, 205, 85, 616, 634,
	654, 655, 208, 0, 646, 0, 627, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 628, 630, 0, 629, 631, 95, 96, 97,
	98, 656, 99, 657, 658, 0, 100, 0, 101, 0,
	0, 0, 649, 103, 0, 104, 0, 0, 0, 600,
	105, 106, 636, 637, 614, 0, 0, 107, 108, 659,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 647,
	0, 218, 0, 112, 113, 114, 643, 645, 279, 0,
	117, 0, 115, 0, 278, 116, 660, 661, 662, 663,
	0, 626, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 648, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 615, 644, 136, 664, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	638, 141, 142, 143, 144, 0, 639, 145, 232, 146,
	0, 147, 148, 149, 665, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 604, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 632, 166,
	167, 288, 168, 666, 237, 169, 0, 175, 170, 171,
	172, 174, 667, 173, 640, 0, 176, 0, 177, 178,
	179, 0, 240, 668, 669, 0, 0, 180, 641, 642,
	613, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	633, 188, 0, 189, 190, 191, 245, 670, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 590,
	0, 619, 608, 609, 606, 607, 595, 0, 0, 0,
	586, 587, 584, 0, 0, 0, 588, 78, 79, 596,
	80, 0, 0, 0, 594, 635, 601, 0, 0, 0,
	81, 82, 198, 650, 200, 651, 83, 652, 653, 0,
	84, 204, 205, 85, 616, 634, 654, 655, 208, 0,
	646, 0, 627, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 628, 630,
	0, 629, 631, 95, 96, 97, 98, 656, 99, 657,
	658, 0, 100, 0, 101, 0, 0, 0, 649, 103,
	0, 104, 0, 0, 0, 600, 105, 106, 636, 637,
	614, 0, 0, 107, 108, 659, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 647, 0, 218, 0, 112,
	113, 114, 643, 645, 279, 0, 117, 0, 115, 0,
	278, 116, 660, 661, 662, 663, 0, 626, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 648, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	615, 644, 136, 664, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 638, 141, 142, 143,
	144, 0, 639, 145, 232, 146, 0, 147, 148, 149,
	665, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 604, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 632, 166, 167, 288, 168, 666,
	237, 169, 0, 175, 170, 171, 172, 174, 667, 173,
	640, 0, 176, 0, 177, 178, 179, 0, 240, 668,
	669, 0, 0, 180, 641, 642, 613, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 633, 188, 0, 189,
	190, 191, 245, 670, 0, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 586, 587, 0, 0,
	0, 0, 588, 0, 0, 596, 1627, 0, 0, 0,
	594, 619, 608, 609, 606, 607, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 0, 0, 635, 601, 0, 0, 0,
	81, 82, 198, 650, 200, 651, 83, 652, 653, 0,
	84, 204, 205, 85, 616, 634, 654, 655, 208, 0,
	646, 0, 627, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 628, 630,
	0, 629, 631, 95, 96, 97, 98, 656, 99, 657,
	658, 0, 100, 0, 101, 0, 0, 0, 649, 103,
	0, 104, 0, 0, 0, 600, 105, 106, 636, 637,
	614, 0, 0, 107, 108, 659, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 647, 0, 218, 0, 112,
	113, 114, 643, 645, 279, 0, 117, 0, 115, 0,
	278, 116, 660, 661, 662, 663, 0, 626, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 648, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	615, 644, 136, 664, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 638, 141, 142, 143,
	144, 0, 639, 145, 232, 146, 0, 147, 148, 149,
	665, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 604, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 632, 166, 167, 288, 168, 666,
	237, 169, 0, 175, 170, 171, 172, 174, 667, 173,
	640, 0, 176, 0, 177, 178, 179, 0, 240, 668,
	669, 0, 0, 180, 641, 642, 613, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 633, 188, 0, 189,
	190, 191, 245, 670, 1581, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 590, 0, 619, 608, 609,
	606, 607, 595, 0, 0, 0, 586, 587, 0, 0,
	0, 0, 588, 78, 79, 596, 80, 0, 0, 0,
	594, 635, 601, 0, 0, 0, 81, 82, 198, 650,
	200, 651, 83, 652, 653, 0, 84, 204, 205, 85,
	616, 634, 654, 655, 208, 0, 646, 0, 627, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 628, 630, 0, 629, 631, 95,
	96, 97, 98, 656, 99, 657, 658, 0, 100, 0,
	101, 0, 0, 0, 649, 103, 0, 104, 0, 0,
	0, 600, 105, 106, 636, 637, 614, 0, 0, 107,
	108, 659, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 647, 0, 218, 0, 112, 113, 114, 643, 645,
	279, 0, 117, 0, 115, 0, 278, 116, 660, 661,
	662, 663, 0, 626, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 648, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 589, 134, 615, 644, 136, 664,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 638, 141, 142, 143, 144, 0, 639, 145,
	232, 146, 0, 147, 148, 149, 665, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 604,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	632, 166, 167, 288, 168, 666, 237, 169, 0, 175,
	170, 171, 172, 174, 667, 173, 640, 0, 176, 0,
	177, 178, 179, 0, 240, 668, 669, 0, 0, 180,
	641, 642, 613, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 633, 188, 0, 189, 190, 191, 245, 670,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 588, 0,
	0, 596, 1576, 0, 0, 0, 594, 619, 608, 609,
	606, 607, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 635, 601, 0, 0, 0, 81, 82, 198, 650,
	200, 651, 83, 652, 653, 0, 84, 204, 205, 85,
	616, 634, 654, 655, 208, 0, 646, 0, 627, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 628, 630, 0, 629, 631, 95,
	96, 97, 98, 656, 99, 657, 658, 685, 100, 0,
	101, 0, 0, 0, 649, 103, 0, 104, 0, 0,
	0, 600, 105, 106, 636, 637, 614, 0, 0, 107,
	108, 659, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 647, 0, 218, 0, 112, 113, 114, 643, 645,
	279, 0, 117, 0, 115, 0, 278, 116, 660, 661,
	662, 663, 0, 626, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 648, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 589, 134, 615, 644, 136, 664,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 638, 141, 142, 143, 144, 0, 639, 145,
	232, 146, 0, 147, 148, 149, 665, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 604,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	632, 166, 167, 288, 168, 666, 237, 169, 0, 175,
	170, 171, 172, 174, 667, 173, 640, 0, 176, 0,
	177, 178, 179, 0, 240, 668, 669, 0, 0, 180,
	641, 642, 613, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 633, 188, 0, 189, 190, 191, 245, 670,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 590, 0, 619, 608, 609, 606, 607, 595, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 588, 78,
	79, 596, 80, 0, 0, 0, 594, 635, 601, 0,
	0, 0, 81, 82, 198, 650, 200, 651, 83, 652,
	653, 0, 84, 204, 205, 85, 616, 634, 654, 655,
	208, 0, 646, 0, 627, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	628, 630, 0, 629, 631, 95, 96, 97, 98, 656,
	99, 657, 658, 0, 100, 0, 101, 0, 0, 0,
	649, 103, 0, 104, 0, 0, 0, 600, 105, 106,
	636, 637, 614, 0, 0, 107, 108, 659, 0, 109,
	0, 110, 0, 1235, 277, 0, 111, 647, 0, 218,
	0, 112, 113, 114, 643, 645, 279, 0, 117, 0,
	115, 0, 278, 116, 660, 661, 662, 663, 0, 626,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	648, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 615, 644, 136, 664, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 638, 141,
	142, 143, 144, 0, 639, 145, 232, 146, 0, 147,
	148, 149, 665, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 604, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 632, 166, 167, 288,
	168, 666, 237, 169, 0, 175, 170, 171, 172, 174,
	667, 173, 640, 0, 176, 0, 177, 178, 179, 0,
	240, 668, 669, 0, 0, 180, 641, 642, 613, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 633, 188,
	0, 189, 190, 191, 245, 670, 0, 0, 192, 0,
	0, 0, 0, 193, 194, 195, 196, 590, 0, 619,
	608, 609, 606, 607, 595, 0, 0, 0, 586, 587,
	0, 0, 0, 0, 588, 78, 79, 596, 80, 0,
	0, 0, 594, 635, 601, 0, 0, 0, 81, 82,
	198, 650, 200, 651, 83, 652, 653, 0, 84, 204,
	205, 85, 616, 634, 654, 655, 208, 0, 646, 0,
	627, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 628, 630, 0, 629,
	631, 95, 96, 97, 98, 656, 99, 657, 658, 0,
	100, 0, 101, 0, 0, 0, 649, 103, 0, 104,
	0, 0, 0, 600, 105, 106, 636, 637, 614, 0,
	0, 107, 108, 659, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 647, 0, 218, 0, 112, 113, 114,
	643, 645, 279, 0, 117, 0, 115, 0, 278, 116,
	660, 661, 662, 663, 0, 626, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 648, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 589, 134, 615, 644,
	136, 664, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 638, 141, 142, 143, 144, 0,
	639, 145, 232, 146, 0, 147, 148, 149, 665, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 604, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 632, 166, 167, 288, 168, 666, 237, 169,
	0, 175, 170, 171, 172, 174, 667, 173, 640, 0,
	176, 0, 177, 178, 179, 0, 240, 668, 669, 0,
	0, 180, 641, 642, 613, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 633, 188, 0, 189, 190, 191,
	245, 670, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	588, 0, 0, 596, 1184, 0, 0, 0, 594, 619,
	608, 609, 606, 607, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 861, 80, 0,
	0, 0, 0, 635, 601, 0, 0, 0, 81, 82,
	198, 650, 200, 651, 83, 652, 653, 0, 84, 204,
	205, 85, 616, 634, 654, 655, 208, 0, 646, 0,
	627, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 628, 630, 0, 629,
	631, 95, 96, 97, 98, 656, 99, 657, 658, 0,
	100, 0, 101, 0, 0, 0, 649, 103, 0, 104,
	0, 0, 0, 600, 105, 106, 636, 637, 614, 0,
	0, 107, 108, 659, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 647, 0, 218, 0, 112, 113, 114,
	643, 645, 279, 0, 117, 0, 115, 0, 278, 116,
	660, 661, 662, 663, 0, 626, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 648, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 589, 134, 615, 644,
	136, 664, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 638, 141, 142, 143, 144, 0,
	639, 145, 232, 146, 0, 147, 148, 149, 665, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 604, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 632, 166, 167, 288, 168, 666, 237, 169,
	0, 175, 170, 171, 172, 174, 667, 173, 640, 0,
	176, 0, 177, 178, 179, 0, 240, 668, 669, 0,
	0, 180, 641, 642, 613, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 633, 188, 0, 189, 190, 191,
	245, 670, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 590, 0, 619, 608, 609, 606, 607,
	595, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	588, 78, 79, 596, 80, 0, 0, 0, 594, 635,
	601, 0, 0, 0, 81, 82, 198, 650, 200, 651,
	83, 652, 653, 0, 84, 204, 205, 85, 616, 634,
	654, 655, 208, 0, 646, 0, 627, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	1942, 0, 628, 630, 0, 629, 631, 95, 96, 97,
	98, 656, 99, 657, 658, 0, 100, 0, 101, 0,
	0, 0, 649, 103, 0, 104, 0, 0, 0, 600,
	105, 106, 636, 637, 614, 0, 0, 107, 108, 659,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 647,
	0, 218, 0, 112, 113, 114, 643, 645, 279, 0,
	117, 0, 115, 0, 278, 116, 660, 661, 662, 663,
	0, 626, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 648, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 615, 644, 136, 664, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	638, 141, 142, 143, 144, 0, 639, 145, 232, 146,
	0, 147, 148, 149, 665, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 604, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 632, 166,
	167, 288, 168, 666, 237, 169, 0, 175, 170, 171,
	172, 174, 667, 173, 640, 0, 176, 0, 177, 178,
	179, 0, 240, 668, 669, 0, 0, 180, 641, 642,
	613, 181, 182, 1941, 184, 0, 0, 185, 186, 187,
	633, 188, 0, 189, 190, 191, 245, 670, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 590,
	0, 619, 608, 609, 606, 607, 595, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 588, 78, 79, 596,
	80, 0, 0, 0, 594, 635, 601, 0, 0, 0,
	81, 82, 1940, 650, 200, 651, 83, 652, 653, 0,
	84, 204, 205, 85, 616, 634, 654, 655, 208, 0,
	646, 0, 627, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 1942, 0, 628, 630,
	0, 629, 631, 95, 96, 97, 98, 656, 99, 657,
	658, 0, 100, 0, 101, 0, 0, 0, 649, 103,
	0, 104, 0, 0, 0, 600, 105, 106, 636, 637,
	614, 0, 0, 107, 108, 659, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 647, 0, 218, 0, 112,
	113, 114, 643, 645, 279, 0, 117, 0, 115, 0,
	278, 116, 660, 661, 662, 663, 0, 626, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 648, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	615, 644, 136, 664, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 638, 141, 142, 143,
	144, 0, 639, 145, 232, 146, 0, 147, 148, 149,
	665, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 604, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 632, 166, 167, 288, 168, 666,
	237, 169, 0, 175, 170, 171, 172, 174, 667, 173,
	640, 0, 176, 0, 177, 178, 179, 0, 240, 668,
	669, 0, 0, 180, 641, 642, 613, 181, 182, 1941,
	184, 0, 0, 185, 186, 187, 633, 188, 0, 189,
	190, 191, 245, 670, 0, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 590, 0, 619, 608, 609,
	606, 607, 595, 0, 0, 0, 586, 587, 0, 0,
	0, 0, 588, 78, 79, 596, 80, 0, 0, 0,
	594, 635, 601, 0, 0, 0, 81, 82, 198, 650,
	200, 651, 83, 652, 653, 0, 84, 204, 205, 85,
	616, 634, 654, 655, 208, 0, 646, 0, 627, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 628, 630, 0, 629, 631, 95,
	96, 97, 98, 656, 99, 657, 658, 0, 100, 0,
	101, 0, 0, 0, 649, 103, 0, 104, 0, 0,
	0, 600, 105, 106, 636, 637, 614, 0, 0, 107,
	108, 659, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 647, 0, 218, 0, 112, 113, 114, 643, 645,
	279, 0, 117, 0, 115, 0, 278, 116, 660, 661,
	662, 663, 0, 626, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 648, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 589, 134, 615, 644, 136, 664,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 285,
	140, 286, 638, 141, 142, 143, 144, 0, 639, 145,
	232, 146, 0, 147, 148, 149, 665, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 604,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	632, 166, 167, 288, 168, 666, 237, 169, 0, 175,
	170, 171, 172, 174, 667, 173, 640, 0, 176, 0,
	177, 178, 179, 0, 240, 668, 669, 0, 0, 180,
	641, 642, 613, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 633, 188, 0, 189, 190, 191, 245, 670,
	0, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 590, 0, 1207, 608, 609, 606, 607, 595, 0,
	0, 0, 586, 587, 0, 0, 0, 0, 588, 78,
	79, 596, 80, 0, 0, 0, 594, 635, 601, 0,
	0, 0, 81, 82, 198, 650, 200, 651, 83, 652,
	653, 0, 84, 204, 205, 85, 616, 634, 654, 655,
	208, 0, 646, 0, 627, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	628, 630, 0, 629, 631, 95, 96, 97, 98, 656,
	1210, 657, 658, 0, 100, 0, 101, 0, 0, 0,
	649, 103, 0, 104, 0, 0, 0, 600, 105, 106,
	636, 637, 614, 0, 0, 107, 108, 659, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 647, 0, 218,
	0, 112, 113, 1211, 643, 645, 279, 0, 117, 0,
	115, 0, 278, 116, 660, 661, 662, 663, 0, 626,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	648, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 1212, 1209, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 615, 644, 136, 664, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 638, 141,
	142, 143, 144, 0, 639, 145, 232, 146, 0, 147,
	148, 149, 665, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 604, 159, 0, 160, 161,
	162, 1213, 0, 235, 164, 165, 632, 166, 167, 288,
	168, 666, 237, 169, 0, 175, 170, 171, 172, 174,
	667, 173, 640, 0, 176, 0, 177, 178, 179, 0,
	240, 668, 669, 0, 0, 180, 641, 642, 613, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 633, 188,
	0, 189, 190, 191, 245, 670, 0, 0, 192, 0,
	0, 0, 0, 193, 194, 1208, 196, 590, 0, 619,
	608, 609, 606, 607, 595, 0, 0, 0, 586, 587,
	0, 0, 0, 0, 588, 78, 79, 596, 80, 0,
	0, 0, 594, 635, 601, 0, 0, 0, 81, 82,
	198, 650, 200, 651, 83, 652, 653, 0, 84, 204,
	205, 85, 616, 634, 654, 655, 208, 0, 646, 0,
	627, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 628, 630, 0, 629,
	631, 95, 96, 97, 98, 656, 99, 657, 658, 0,
	100, 0, 101, 0, 0, 0, 649, 103, 0, 104,
	0, 0, 0, 600, 105, 106, 636, 637, 614, 0,
	0, 107, 108, 659, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 647, 0, 218, 0, 112, 113, 114,
	643, 645, 279, 0, 117, 0, 115, 0, 278, 116,
	660, 661, 662, 663, 0, 626, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 648, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 0, 134, 615, 644,
	136, 664, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 638, 141, 142, 143, 144, 0,
	639, 145, 232, 146, 0, 147, 148, 149, 665, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 1225, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 632, 166, 167, 288, 168, 666, 237, 169,
	0, 175, 170, 171, 172, 174, 667, 173, 640, 0,
	176, 0, 177, 178, 179, 0, 240, 668, 669, 0,
	0, 180, 641, 642, 613, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 633, 188, 0, 189, 190, 191,
	245, 670, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 0, 0, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 1221, 1222, 0, 0, 0, 0,
	1223, 78, 79, 1224, 80, 0, 0, 0, 594, 635,
	0, 0, 0, 0, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 0, 84, 204, 205, 85, 0, 634,
	206, 207, 208, 0, 646, 0, 627, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 628, 630, 0, 629, 631, 95, 96, 97,
	98, 210, 99, 211, 212, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 213,
	105, 106, 636, 637, 0, 0, 0, 107, 108, 216,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 647,
	0, 218, 0, 112, 113, 114, 643, 645, 279, 0,
	117, 0, 115, 0, 278, 116, 221, 222, 223, 224,
	0, 225, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 648, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 0, 134, 0, 644, 136, 228, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	638, 141, 142, 143, 144, 0, 639, 145, 232, 146,
	0, 147, 148, 149, 233, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 632, 166,
	167, 288, 168, 236, 237, 169, 0, 175, 170, 171,
	172, 174, 238, 173, 640, 0, 176, 0, 177, 178,
	179, 0, 240, 241, 242, 0, 0, 180, 641, 642,
	0, 181, 182, 183, 184, 497, 0, 185, 186, 187,
	633, 188, 0, 189, 190, 191, 245, 246, 0, 0,
	192, 78, 79, 0, 80, 193, 194, 195, 196, 197,
	0, 0, 0, 0, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 0, 84, 204, 205, 85, 0, 1694,
	206, 207, 208, 0, 209, 0, 275, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 210, 99, 211, 212, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 213,
	105, 106, 214, 215, 0, 0, 0, 107, 108, 216,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 217,
	0, 218, 0, 112, 113, 114, 219, 220, 279, 0,
	117, 0, 115, 0, 278, 116, 221, 222, 223, 224,
	0, 225, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 226, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 0, 134, 0, 227, 136, 228, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	230, 141, 142, 143, 144, 0, 231, 145, 232, 146,
	0, 147, 148, 149, 233, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 64, 235, 164, 165, 0, 166,
	167, 288, 168, 236, 237, 169, 0, 175, 170, 171,
	172, 174, 238, 173, 239, 0, 176, 66, 177, 178,
	179, 0, 240, 241, 242, 0, 0, 180, 243, 244,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 501, 246, 0, 0,
	192, 0, 0, 0, 62, 193, 194, 195, 196, 0,
	63, 497, 811, 0, 812, 807, 802, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 61,
	80, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 275, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 815, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	804, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 279, 0, 117, 0, 115, 0,
	278, 116, 221, 222, 223, 224, 0, 225, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 226, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 805, 0, 0,
	0, 139, 229, 285, 140, 286, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 288, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 803, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 497, 811, 192, 812, 807, 802,
	0, 193, 194, 195, 196, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 813, 808, 197, 0,
	0, 0, 0, 81, 82, 198, 199, 200, 201, 83,
	202, 203, 0, 84, 204, 205, 85, 0, 0, 206,
	207, 208, 0, 209, 0, 275, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	210, 99, 211, 212, 798, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 213, 105,
	106, 214, 215, 804, 0, 0, 107, 108, 216, 0,
	109, 0, 110, 0, 0, 277, 0, 111, 217, 0,
	218, 0, 112, 113, 114, 219, 220, 279, 0, 117,
	0, 115, 0, 278, 116, 221, 222, 223, 224, 0,
	225, 0, 280, 118, 281, 119, 120, 0, 122, 121,
	0, 226, 282, 123, 283, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 0, 134, 0, 227, 136, 228, 137, 138, 0,
	805, 0, 0, 0, 139, 229, 285, 140, 286, 230,
	141, 142, 143, 144, 0, 231, 145, 232, 146, 0,
	147, 148, 149, 233, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 234, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 0, 166, 167,
	288, 168, 236, 237, 169, 0, 175, 170, 171, 172,
	174, 238, 173, 239, 0, 176, 0, 177, 178, 179,
	0, 240, 241, 242, 0, 0, 180, 243, 244, 803,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 245, 246, 497, 811, 192,
	812, 807, 802, 0, 193, 194, 195, 196, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 813,
	808, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 275, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	276, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 804, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 277, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	279, 0, 117, 0, 115, 0, 278, 116, 221, 222,
	223, 224, 0, 225, 0, 280, 118, 281, 119, 120,
	0, 122, 121, 0, 226, 282, 123, 283, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 284,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 805, 0, 0, 0, 139, 229, 285,
	140, 286, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 287, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 288, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 803, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	75, 0, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 813, 808, 197, 0, 0, 0, 0, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 0, 84,
	204, 205, 85, 0, 0, 206, 207, 208, 0, 209,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 210, 99, 211, 212,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 213, 105, 106, 214, 215, 0,
	0, 0, 107, 108, 216, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 217, 0, 218, 0, 112, 113,
	114, 219, 220, 0, 0, 117, 0, 115, 0, 0,
	116, 221, 222, 223, 224, 0, 225, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 226, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	227, 136, 228, 137, 138, 0, 0, 458, 0, 0,
	139, 229, 0, 140, 0, 230, 141, 142, 143, 144,
	0, 231, 145, 232, 146, 0, 147, 148, 149, 233,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 64,
	235, 164, 165, 0, 166, 167, 0, 168, 236, 237,
	169, 0, 175, 170, 171, 172, 174, 238, 173, 239,
	0, 176, 66, 177, 178, 179, 0, 240, 241, 242,
	0, 0, 180, 243, 244, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 501, 246, 0, 0, 192, 75, 0, 0, 62,
	193, 194, 195, 196, 0, 63, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	197, 0, 0, 0, 1121, 81, 82, 198, 199, 200,
	201, 83, 202, 203, 0, 84, 204, 205, 85, 0,
	0, 206, 207, 208, 0, 209, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 210, 99, 211, 212, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	213, 105, 106, 214, 215, 0, 0, 0, 107, 108,
	216, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	217, 0, 218, 0, 112, 113, 114, 219, 220, 0,
	0, 117, 0, 115, 0, 0, 116, 221, 222, 223,
	224, 0, 225, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 226, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 227, 136, 228, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 0, 140,
	0, 230, 141, 142, 143, 144, 0, 231, 145, 232,
	146, 0, 147, 148, 149, 233, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 234, 159,
	0, 160, 161, 162, 163, 64, 235, 164, 165, 0,
	166, 167, 0, 168, 236, 237, 169, 0, 175, 170,
	171, 172, 174, 238, 173, 239, 0, 176, 66, 177,
	178, 179, 0, 240, 241, 242, 0, 0, 180, 243,
	244, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 501, 246, 0,
	0, 192, 75, 0, 0, 62, 193, 194, 195, 196,
	0, 63, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 197, 0, 0, 0,
	61, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 458,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 1121, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 0, 75,
	0, 0, 193, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 0, 197, 0, 0, 0, 703, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 0, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 1024, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 75,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 78, 79, 0, 80, 193,
	194, 195, 196, 197, 0, 0, 0, 0, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 0, 84, 204,
	205, 85, 0, 1591, 206, 207, 208, 0, 209, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 210, 99, 211, 212, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 213, 105, 106, 214, 215, 0, 0,
	0, 107, 108, 216, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 217, 0, 218, 0, 112, 113, 114,
	219, 220, 0, 0, 117, 0, 115, 0, 0, 116,
	221, 222, 223, 224, 0, 225, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 226, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 227,
	136, 228, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 0, 140, 0, 230, 141, 142, 143, 144, 0,
	231, 145, 232, 146, 0, 147, 148, 149, 233, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 0, 235,
	164, 165, 0, 166, 167, 0, 168, 236, 237, 169,
	0, 175, 170, 171, 172, 174, 238, 173, 239, 0,
	176, 0, 177, 178, 179, 0, 240, 241, 242, 0,
	0, 180, 243, 244, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 188, 0, 189, 190, 191,
	245, 246, 0, 0, 192, 0, 0, 0, 0, 193,
	194, 195, 196, 619, 608, 609, 606, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 681, 0, 0, 0, 197, 0, 0,
	0, 0, 81, 82, 198, 650, 200, 651, 83, 652,
	653, 0, 84, 204, 205, 85, 0, 0, 654, 655,
	208, 0, 209, 0, 275, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 656,
	99, 657, 658, 0, 100, 0, 101, 0, 0, 0,
	649, 103, 0, 104, 0, 0, 0, 213, 105, 106,
	214, 215, 614, 0, 0, 107, 108, 659, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 217, 0, 218,
	0, 112, 113, 114, 219, 220, 279, 0, 117, 0,
	115, 0, 278, 116, 660, 661, 662, 663, 0, 626,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	226, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	0, 134, 615, 227, 136, 664, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 230, 141,
	142, 143, 144, 0, 231, 145, 232, 146, 0, 147,
	148, 149, 665, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 0, 166, 167, 288,
	168, 666, 237, 169, 0, 175, 170, 171, 172, 174,
	667, 173, 239, 0, 176, 0, 177, 178, 179, 0,
	240, 668, 669, 0, 0, 180, 243, 244, 613, 181,
	182, 183, 184, 75, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 245, 670, 0, 0, 192, 78,
	79, 0, 80, 193, 194, 195, 196, 197, 0, 0,
	0, 0, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 0, 84, 204, 205, 85, 0, 0, 206, 207,
	208, 0, 209, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 782, 98, 210,
	99, 211, 212, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 213, 105, 106,
	214, 215, 0, 0, 0, 107, 108, 216, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 217, 0, 218,
	0, 112, 113, 114, 219, 220, 0, 0, 117, 0,
	115, 0, 0, 116, 221, 222, 223, 224, 0, 225,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	226, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 227, 136, 228, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 0, 140, 0, 230, 141,
	142, 143, 144, 0, 231, 145, 232, 146, 0, 147,
	148, 149, 233, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 0, 166, 167, 0,
	168, 236, 237, 169, 0, 175, 170, 171, 172, 174,
	238, 173, 239, 0, 176, 781, 177, 178, 179, 0,
	240, 241, 242, 0, 0, 180, 243, 244, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 245, 246, 0, 75, 192, 0,
	0, 0, 0, 193, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	785, 197, 0, 0, 0, 0, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 0, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 0,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 245, 246,
	0, 497, 192, 0, 0, 0, 0, 193, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 0, 785, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 275, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 279, 0, 117, 0, 115, 0,
	278, 116, 221, 222, 223, 224, 0, 225, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 226, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 288, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 988,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 986,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 1093, 0, 107, 108, 216, 0, 109, 0, 110,
	991, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 1091, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 990, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 1092, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 988,
	209, 0, 0, 983, 86, 87, 88, 0, 89, 986,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	991, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 982, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 990, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 989, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 1560, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 458, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 732, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 458, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 509,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 470, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 458, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 463, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 458, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 373,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 372, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 1271, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 1269, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 1258, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 852, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 387, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 717, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 0, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 561, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 556, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 515, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 398, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 397, 241,
	242, 0, 0, 393, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 398, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 397, 241,
	242, 0, 0, 393, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 493, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 490, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 487, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 485, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 466, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 447, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 390, 0, 0, 125, 0, 126, 127,
	128, 129, 398, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 392, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 391, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 397, 241,
	242, 0, 0, 393, 243, 244, 0, 181, 182, 183,
	184, 75, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 78, 79, 0,
	80, 193, 194, 195, 196, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 0,
	144, 0, 231, 145, 232, 146, 0, 147, 0, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 0, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 0, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 245, 246, 0, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 877, 878, 0, 897, 898,
	899, 907, 908, 909, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 880, 0,
	911, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 0, 879,
	900, 0, 0, 0, 0, 894, 0, 880, 0, 911,
	0, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 879, 0,
	900, 0, 0, 0, 894, 0, 0, 880, 0, 911,
	0, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 885, 0, 0, 0, 879, 0,
	900, 0, 0, 0, 894, 0, 0, 880, 0, 911,
	0, 0, 904, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 910, 879, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 902,
	0, 904, 912, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 902, 0,
	0, 904, 912, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 902, 0,
	0, 904, 912, 896, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 902, 0,
	0, 0, 896, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 905, 0, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 0,
	906, 0, 896, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 903, 0, 905, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 0, 0, 0, 0, 0, 1412, 0, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 0, 0, 1889, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 877, 878, 1887, 897, 898, 899, 907, 908, 909,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 0, 0, 0, 880, 0, 911, 0, 0, 0,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 0, 0, 879, 900, 0, 0, 0,
	0, 894, 0, 880, 0, 911, 0, 0, 0, 0,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 0, 879, 0, 900, 0, 0, 0,
	894, 0, 0, 880, 0, 911, 0, 0, 0, 0,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	885, 0, 0, 0, 879, 0, 900, 0, 0, 0,
	894, 0, 0, 880, 0, 911, 0, 0, 904, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 910, 879, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 902, 0, 904, 912, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 902, 0, 0, 904, 912, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 902, 0, 0, 904, 912, 896,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 902, 0, 0, 0, 896, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 903,
	905, 0, 891, 892, 893, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 896, 0,
	1863, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	905, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 0, 0, 1838,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 0, 0, 1833,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 877, 878, 1829,
	897, 898, 899, 907, 908, 909, 0, 0, 0, 0,
	0, 0, 0, 900, 0, 0, 0, 0, 0, 0,
	880, 0, 911, 0, 0, 0, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 0, 0, 0, 0,
	0, 879, 900, 0, 0, 0, 0, 894, 0, 880,
	0, 911, 0, 0, 0, 0, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 0, 0, 0, 0,
	879, 0, 900, 0, 0, 0, 894, 0, 0, 880,
	0, 911, 0, 0, 0, 0, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 885, 0, 0, 0,
	879, 0, 900, 0, 0, 0, 894, 0, 0, 880,
	0, 911, 0, 0, 904, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 910,
	879, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	0, 902, 0, 904, 912, 0, 0, 895, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	902, 0, 0, 904, 912, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	902, 0, 0, 904, 912, 896, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 905, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	902, 0, 0, 0, 896, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 903, 905, 0, 891, 892,
	893, 0, 890, 887, 888, 889, 881, 882, 883, 884,
	886, 0, 906, 0, 896, 0, 1760, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 905, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	0, 906, 0, 0, 0, 1759, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	0, 906, 0, 0, 0, 1660, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	0, 906, 0, 877, 878, 1594, 897, 898, 899, 907,
	908, 909, 0, 0, 0, 0, 0, 0, 0, 900,
	0, 0, 0, 0, 0, 0, 880, 0, 911, 0,
	0, 0, 877, 878, 0, 897, 898, 899, 907, 908,
	909, 0, 0, 0, 0, 0, 0, 879, 900, 0,
	0, 0, 0, 894, 0, 880, 0, 911, 0, 0,
	0, 0, 877, 878, 0, 897, 898, 899, 907, 908,
	909, 0, 0, 0, 0, 0, 879, 0, 900, 0,
	0, 0, 894, 0, 0, 880, 0, 911, 0, 0,
	0, 0, 877, 878, 0, 897, 898, 899, 907, 908,
	909, 0, 885, 0, 0, 0, 879, 0, 900, 0,
	0, 0, 894, 0, 0, 880, 0, 911, 0, 0,
	904, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 0, 910, 879, 0, 0, 0,
	0, 0, 894, 0, 0, 0, 0, 902, 0, 904,
	912, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 902, 0, 0, 904,
	912, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 1962, 0, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 902, 0, 0, 904,
	912, 896, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 905, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 902, 0, 0, 0,
	896, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 1961, 0,
	0, 903, 905, 0, 891, 892, 893, 0, 890, 887,
	888, 889, 881, 882, 883, 884, 886, 0, 906, 0,
	896, 0, 1578, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 905, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 0, 906, 0, 0,
	0, 1177, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 0, 906, 0, 1009,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 0, 906, 877, 878,
	0, 897, 898, 899, 907, 908, 909, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 880, 0, 911, 0, 0, 0, 0, 877, 878,
	0, 897, 898, 899, 907, 908, 909, 0, 0, 0,
	0, 0, 879, 0, 900, 0, 0, 0, 894, 1109,
	0, 880, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 0, 0, 0, 894, 0,
	0, 914, 0, 0, 0, 0, 0, 877, 878, 0,
	897, 898, 899, 907, 908, 909, 0, 885, 0, 1452,
	0, 0, 1451, 900, 0, 0, 1110, 913, 0, 0,
	880, 0, 911, 0, 0, 904, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 885, 0, 0,
	910, 879, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 0, 902, 0, 0, 904, 912, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 902, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 904, 912, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 896, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 0, 896, 0, 1420, 1421, 0,
	1438, 1439, 1440, 0, 0, 0, 903, 905, 0, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 878, 0,
	897, 898, 899, 907, 908, 909, 0, 1435, 0, 0,
	0, 0, 0, 900, 0, 0, 0, 0, 0, 0,
	880, 0, 911, 0, 0, 903, 0, 0, 891, 892,
	893, 0, 890, 887, 888, 889, 881, 882, 883, 884,
	886, 879, 906, 0, 0, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 877, 878, 1426, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 0, 880, 0, 911,
	0, 0, 0, 877, 878, 0, 897, 898, 899, 907,
	908, 909, 0, 0, 0, 0, 885, 0, 879, 900,
	0, 0, 0, 0, 894, 0, 880, 1436, 911, 0,
	0, 0, 0, 0, 904, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 879, 0, 910,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 895, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 901,
	442, 904, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 885, 0, 0, 0, 910, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	904, 912, 0, 0, 895, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 910, 0, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 902, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 1432, 1433,
	1434, 0, 1431, 1428, 1429, 1430, 1422, 1423, 1424, 1425,
	1427, 0, 0, 0, 0, 901, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 903, 0, 0, 891, 892,
	893, 0, 890, 887, 888, 889, 881, 882, 883, 884,
	886, 896, 906, 0, 1588, 0, 0, 0, 0, 0,
	0, 0, 0, 905, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 1453, 0, 0, 880, 0, 911,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 879, 906,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 891, 892, 893, 0, 890, 887,
	888, 889, 881, 882, 883, 884, 886, 0, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 885, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 880, 0, 911, 0, 0, 0, 0,
	0, 904, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 910, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 912, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 896, 906,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	905, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	1411, 0, 0, 880, 0, 911, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 0, 0, 0, 885,
	0, 0, 900, 1420, 1421, 0, 1438, 1439, 1440, 880,
	0, 911, 0, 0, 0, 0, 0, 904, 912, 1573,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	879, 0, 910, 0, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 880, 902, 911, 0, 0, 0, 0,
	895, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	894, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1426, 904, 912, 0, 877, 878, 896, 897,
	898, 899, 907, 908, 909, 0, 0, 0, 910, 885,
	905, 0, 900, 0, 0, 0, 0, 0, 0, 880,
	902, 911, 0, 0, 0, 1441, 895, 904, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 910, 1436, 0, 0, 894, 0, 901, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 896, 906, 0, 0, 1420, 1421,
	0, 1438, 1439, 1440, 0, 885, 905, 0, 0, 0,
	0, 1437, 0, 0, 1572, 0, 0, 0, 0, 0,
	0, 0, 0, 904, 912, 0, 0, 0, 896, 0,
	1420, 1421, 0, 1438, 1439, 1440, 0, 0, 910, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	902, 0, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	1435, 906, 0, 0, 1432, 1433, 1434, 0, 1431, 1428,
	1429, 1430, 1422, 1423, 1424, 1425, 1427, 1426, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 896, 906, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 905, 0, 0, 1426,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 911, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	879, 0, 1441, 0, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 903, 0, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	0, 906, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 904, 912, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	1433, 1434, 0, 1431, 1428, 1429, 1430, 1422, 1423, 1424,
	1425, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 1433, 1434, 0, 1431, 1428, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 905, 0, 755, 749,
	772, 743, 763, 762, 0, 0, 745, 744, 0, 0,
	0, 774, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 768, 0, 760, 759, 0, 0, 0, 0,
	0, 0, 0, 758, 903, 0, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	757, 906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 750, 751, 752,
	753, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 754, 748, 0, 0, 0, 0,
	0, 0, 0, 776, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 769, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 775,
}
var sqlPact = [...]int{

	240, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 663, 16877, -1000,
	-1000, -1000, -1000, -1000, -1000, 651, 642, 398, 4680, 16877,
	16877, 16617, 1363, 1363, 18177, -1000, -1000, 21297, -1000, 3047,
	472, 481, 472, 472, 491, 18177, 582, 614, 120, -1000,
	872, -11, 21037, 16877, 1287, 29, 15317, 311, 240, 16357,
	20777, 16877, 16097, 297, 39, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1136, 1045, 1042,
	15317, 20517, 20257, 19997, 19737, -1000, 10471, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 697, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 318,
	317, -1000, 15837, -1000, 901, -1000, 25, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 899, -1000, 16877, -1000, -1000,
	19477, 19217, 316, 843, -1000, -1000, 543, 392, 1294, -1000,
	44, -1000, -1000, -1000, 1135, -1000, 896, 1129, 1128, 1127,
	1126, 1123, 1121, 391, 781, 454, -1000, 843, -1000, 843,
	-1000, -1000, -1000, 566, 18177, -1000, 15317, -1000, 18957, 16877,
	16877, 1054, 18697, -1000, 872, -1000, -1000, -1000, 916, 1286,
	1286, 1286, 1300, 125, 117, 120, 14, 16877, -1000, 314,
	14, 6421, 6421, -1000, -1000, 311, -1000, 139, 13185, -1000,
	7613, -1000, 778, 1195, 406, 674, 1194, -96, 768, 763,
	1193, 633, 12388, 39, -1000, -1000, -1000, 9353, 4396, 15317,
	16877, 16877, 647, 18437, -1000, 1191, 132, 1189, -1000, 123,
	1185, -1000, 123, 1182, 4, -1000, -1000, -1000, -1000, -1000,
	-1000, 311, 15577, 16877, 1361, 24932, -1000, 9353, -1000, -1000,
	13729, 1043, 13729, -1000, -1000, 1353, -1000, 9353, -1000, 24,
	22, 998, 987, 11030, 10757, 1236, 1041, -1000, -1000, -1000,
	42, 4680, 16877, 1141, 13729, 16877, 16877, 16877, 16877, 16877,
	16877, -1000, 997, -1000, -1000, 16877, 16877, -1000, 19, 17,
	-1000, 18177, -1000, 143, -1000, 305, 956, 389, 128, 17917,
	389, 949, -1000, 916, -1000, 903, 988, 8495, 9353, 120,
	-1000, -1000, 120, 120, 9353, -1000, -1000, 16877, 14, 1344,
	16877, 102, -1000, 23467, -1000, -1000, 9353, 9353, 9353, 9353,
	9353, 832, -1000, -1000, 1441, -1000, 5560, -1000, -1000, 39,
	303, 327, -1000, -1000, 302, 39, -1000, -1000, -1000, -1000,
	301, 1455, 427, -1000, -1000, -1000, 9353, 396, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1140, 299, 295,
	-1000, -1000, -1000, -1000, 294, 293, 288, 286, 276, 274,
	272, 269, 264, 262, 260, 259, 256, 255, 253, 805,
	-1000, 417, -1000, -1000, 417, 417, -1000, 245, 245, 248,
	-1000, -1000, -1000, -1000, 245, -1000, -1000, -1000, 381, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 249, 102, -1000, -1000,
	-1000, 16877, 0, -1000, 24406, -1000, -9, 719, -1000, 14797,
	1267, 1250, 1264, 15317, 1319, 1315, 564, 16877, 16877, 563,
	560, 15317, -1000, 1119, -1, -1000, -1000, 23052, -153, -1000,
	-1000, 405, 92, 1341, 92, 12665, -1000, 16877, 16877, -1000,
	16877, -1000, -1000, 16877, -1000, 16877, 16877, -1000, 16877, 385,
	14277, 792, 1177, 617, -11, -7, -1000, 1369, -1000, -1000,
	-1000, -1000, 98, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 248, 805, 245,
	245, 245, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 381,
	-1000, -1000, 417, 417, 417, -1000, -1000, -13, 24406, 558,
	5, 14003, 16877, -1000, 20, -1000, -1000, 1109, 459, -18,
	782, 1039, 819, -1000, -1000, -1000, -1000, 10, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1435, -1000,
	-1000, -1000, -1000, 1440, 10, -1000, -1000, -1000, -1000, -1000,
	1454, -1000, -1000, -1000, 4680, -1000, -1000, -1000, 16877, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 782,
	1039, -1000, -1000, 15317, 14537, 1331, 1175, 824, -1000, 1330,
	16877, 889, 948, -1000, 576, 1174, -1000, -1000, -1000, -1000,
	24406, -1000, 24406, 750, 1048, -1000, 1048, 9, -1000, 23408,
	-1000, 243, -20, -1000, 405, 6421, 12128, 24932, 24932, 16877,
	572, 9353, 9353, 9353, 9353, 9353, 9353, 9353, 9353, 9353,
	9353, 9353, 9353, 9353, 9353, 9353, 9353, 9353, 9353, 9353,
	9353, 9353, 9353, 861, 9353, 549, 9353, 9353, 9353, 9353,
	619, 814, 210, 4680, -1000, 640, 640, 640, 24440, 24440,
	185, -1000, 39, 18, 23022, 6, 39, -1000, -1000, 6132,
	8185, 39, 4964, -1000, 588, 1437, 411, 24406, 1132, 1082,
	237, 115, 114, 9353, 9353, 9639, 9639, 9353, 9925, 9353,
	9353, 5846, 9353, 9353, 9353, 9353, 9353, 9353, -1000, 226,
	-1000, -1000, -1000, -1000, 1427, -1000, -1000, 1421, -1000, 570,
	540, 1413, 405, 111, 7613, -1000, 792, 16877, 16877, 16877,
	-1000, -1000, 947, 17657, 945, 24932, 16877, -1000, 223, 222,
	1019, 1018, 16877, 16877, 17397, 17137, 16877, 757, 218, 214,
	16877, 761, -1000, 16877, 16877, 723, 629, 1106, 16877, -1000,
	9353, 714, 9353, 743, -1000, 11852, 422, 16877, 741, 90,
	-1000, -1000, -1000, 369, 16877, -1000, -1000, -1000, 132, -1000,
	123, 123, -1000, -1000, 15317, -1000, -1000, -1000, -1000, -1000,
	-1000, 24932, 334, 328, -1000, 1411, 548, -1000, 544, 541,
	505, -1000, 211, -1000, 9353, 16877, 14003, 5, 2, -1000,
	-1000, 16877, 1039, -1000, -1000, -1000, -1000, 666, -1000, 775,
	-1000, 11303, -1000, -1000, -1000, 588, -1000, -22, -1000, -1000,
	-1000, -1000, 110, -26, -5, 24932, -1000, -1000, -1000, -1000,
	-1000, 16877, 292, 16877, -11, 16877, -1000, 1453, -11, 16877,
	1173, 1201, 355, 16877, -1000, -1000, -1000, 9353, -1000, -1000,
	-1000, -11, 16877, -1000, 1077, -1000, -17, 1124, -141, 375,
	-1000, 11576, -1000, -1000, -1000, 388, 336, 336, 495, 495,
	495, 495, 2788, 2788, 1943, 2547, 2003, 2003, 2003, 929,
	353, 353, 2003, 2003, 2003, 24440, 24526, 290, 9353, 9353,
	504, 808, 210, 290, 9353, 1430, 290, 290, 290, -1000,
	744, -1000, -1000, -1000, 1105, 202, 9925, 9925, -1000, -1000,
	-1000, 5560, -1000, -1000, 191, 9353, -1000, -1000, 9353, -27,
	-28, -1000, -1000, -41, -1000, -1000, -2, 9353, 9353, 9353,
	109, -1000, 108, 596, -1000, 9353, 835, 188, 186, 9353,
	-1000, -1000, 24320, 21864, 107, 1104, -126, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 106, 104, 24110, -126, 103, 3410,
	-1000, 9925, 9925, 9925, 5560, 184, 101, 23378, -126, 24024,
	7899, 7899, 7899, 100, 23803, 9353, -126, 21835, 3441, 3141,
	-42, -43, -47, 1409, -53, 96, 384, 380, 95, 1077,
	-1000, -1000, -1000, -1000, 503, 501, 1172, -1000, 943, -1000,
	429, -1000, 809, 9353, 16877, 183, 180, 795, -1000, 1169,
	870, 1160, 870, -1000, -9, 709, 9353, 9353, -1000, 498,
	-1000, -1000, 494, -1000, 609, -1000, 325, 24406, -1000, 6421,
	24406, -1000, 722, 1270, -63, -1000, -1000, 6421, 405, 12665,
	12128, 7613, -64, -1000, -1000, -1000, 792, -1000, 482, 1406,
	94, 969, 784, 733, 671, 1402, 24406, -22, -1000, -22,
	-1000, -1000, -1000, -1000, -1000, -1000, 16877, 1059, -1000, 14537,
	179, 16877, 175, -1000, 168, -1000, -1000, 167, 16877, 1006,
	355, 1458, -1000, 389, -1000, 89, -1000, 1073, 1299, -1000,
	12128, 909, 1036, 1034, 12128, 982, 840, 840, 840, -1000,
	375, 4101, 15057, 844, 62, 88, 1124, 9353, 290, 290,
	9353, 9925, 9925, -1000, 290, -1000, -1000, -1000, -1000, 1095,
	166, 9353, 24932, 24618, 24423, -65, 7303, -35, 39, 22993,
	-1000, -1000, 327, -1000, 87, 7017, -1000, 23717, -19, -19,
	-1000, 1452, 1199, -1000, 9353, 23774, -1000, 12925, 407, 857,
	22696, 24932, 24932, -1000, 9353, -1000, -1000, 1091, 9353, -1000,
	24932, 24932, 9925, 9925, 9925, 9925, 9925, 9925, 9925, 9925,
	9925, 9925, 9925, 9925, 9925, 9925, 9925, 9925, 9925, 9925,
	9925, 994, 9925, 1420, 1420, 1420, -36, 6707, -1000, 1111,
	1091, 9353, 9353, 24932, 85, 80, 78, -1000, 9353, -126,
	9353, 9353, 9353, -1000, -1000, -1000, 74, -1000, 1400, -1000,
	-1000, -1000, -1000, 1073, 16877, 16877, 16877, 1157, -1000, 1950,
	-1000, 22666, -69, 16877, 16877, -1000, 1022, 1065, 456, 16877,
	-1000, 16877, -1000, 16877, 16877, 16877, -70, -71, 16877, 16877,
	-1000, -1000, -62, 6421, 213, -11, -62, 714, -1000, -54,
	-1000, 366, -1000, 322, 266, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 73, -1000, -1000, 1061, -1000, 10211, 164,
	16877, 14537, 1326, 10211, 888, 1008, 355, 1451, -1000, 576,
	-1000, 401, 9353, 9353, 1124, 593, 12128, 12128, 898, 1023,
	12128, -1000, -1000, -1000, -1000, 15057, -1000, 1016, -1000, -1000,
	16877, 163, -1000, 375, 607, 290, 3318, 3212, 9353, 24932,
	24736, -75, 9353, 9353, -1000, -76, -1000, 9353, -1000, -1000,
	1444, 9353, 71, 70, 69, -1000, -1000, 24406, 9353, -1000,
	-1000, 21557, 9353, 68, -1000, 65, 63, 24406, 1111, 24406,
	-1000, -1000, 635, 635, 1420, 1420, 1420, 1420, 2335, 2335,
	961, 2883, 2589, 2589, 2589, 2615, 506, 506, 2589, 2589,
	2589, 1090, 996, 162, 24650, 9353, -80, -1000, -1000, -1000,
	24406, 24406, 61, -1000, -1000, -1000, -126, 3106, 22636, 22607,
	-1000, 56, 401, -1000, -1000, -1000, 16877, -1000, 16877, -1000,
	16877, 16877, 1096, 930, -1000, -1000, 1013, 159, 9925, 16877,
	-1000, 817, -81, -86, 928, -1000, 926, 9353, -1000, 24932,
	870, 870, -1000, 492, 488, -1000, -1000, -1000, -1000, -62,
	1206, 16877, 1262, -1000, -1000, 158, -1000, -1000, -1000, 829,
	-88, -1000, 265, 1274, 9353, -1000, -1000, 157, 10211, -94,
	52, -11, -99, 16877, -1000, 355, 1449, -1000, 1201, -1000,
	16877, 24406, -126, 509, -1000, 898, -1000, 153, 9353, 12128,
	-1000, -1000, -154, -1000, 350, -1000, 149, 16877, 15057, 9353,
	9353, 24736, -101, -1000, 290, 290, -1000, 22310, -1000, 23717,
	-1000, -1000, -1000, 24406, 820, -1000, 22280, -1000, -1000, -1000,
	-1000, 9925, 1088, 145, 24932, 22250, -1000, -1000, 9353, -1000,
	-1000, -1000, -1000, -1000, 1108, -1000, -1000, 16877, 941, -1000,
	-1000, 9353, 24650, 138, 1059, 135, -1000, -1000, -1000, 770,
	-1000, -1000, 24406, 1281, -1000, -1000, 16877, 16877, 537, -103,
	16877, -1000, -1000, 5274, 16877, 817, 10211, 1266, 39, 16877,
	1266, 22221, 4964, -107, -1000, 1059, -1000, 817, 134, 1446,
	-1000, 1006, -85, -1000, 1323, 13469, -1000, 16877, 24406, -1000,
	1016, -1000, 4680, 16877, -109, -1000, 290, 290, -1000, -1000,
	51, 857, 1295, -1000, 23677, 9925, 24932, -111, -1000, 21924,
	-1000, -1000, 1156, 21894, 984, 16877, -1000, 16877, 16877, 433,
	16877, -1000, -1000, 645, -1000, 405, -1000, 133, 1059, -1000,
	-1000, -1000, -1000, 1274, -2, 817, -1000, 1059, 10211, -1000,
	1008, 16877, 131, -1000, 129, 39, -115, -1000, -1000, -116,
	-1000, -1000, 734, 9353, 23677, -117, -1000, -1000, 1149, -1000,
	881, 783, 50, -121, 128, -1000, 9353, -1000, 12665, -1000,
	16877, -1000, 1266, 49, 1059, -1000, -127, -1000, -1000, -1000,
	9353, -1000, -1000, 48, 9067, 9067, -126, -1000, 16877, -1000,
	887, 883, 623, -1000, -1000, -1000, -1000, -1000, 984, 24406,
	-113, -129, -1000, -1000, -1000, 817, -19, -1000, -1000, -1000,
	3760, 897, 687, 23082, -1000, -1000, -1000, 1211, -1000, 438,
	856, 856, 881, -1000, 867, 1059, 46, 1378, -1000, -1000,
	-1000, -1000, -1000, -1000, 1385, -1000, -1000, 1003, -1000, -1000,
	-1000, -1000, -1000, -1000, 1444, 8781, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1680, 1679, 1325, 139, 1677, 137, 1675, 1673, 1672,
	1671, 1667, 1666, 104, 136, 135, 141, 133, 1665, 101,
	1664, 1663, 1662, 102, 1661, 1659, 1658, 49, 1657, 1656,
	132, 124, 1655, 1654, 100, 31, 166, 2367, 160, 1653,
	1648, 1646, 11, 111, 77, 1644, 76, 1643, 1641, 43,
	44, 28, 14, 1640, 107, 120, 886, 37, 1639, 1638,
	151, 23, 20, 1215, 105, 154, 143, 128, 1637, 1636,
	1634, 58, 1633, 1, 1629, 1628, 15, 60, 12, 1626,
	36, 114, 1625, 1624, 144, 1623, 81, 108, 122, 27,
	130, 1168, 1622, 74, 13, 65, 1621, 10, 91, 1620,
	46, 86, 147, 1619, 59, 157, 78, 38, 61, 113,
	1617, 1616, 1614, 89, 1611, 98, 88, 1609, 1608, 82,
	1603, 146, 148, 1601, 1600, 127, 1597, 1596, 1595, 167,
	1594, 1593, 159, 1591, 5, 53, 66, 19, 116, 115,
	109, 106, 1582, 22, 1581, 1377, 1034, 80, 21, 75,
	51, 92, 55, 68, 17, 1579, 1577, 118, 1574, 1573,
	1572, 1571, 1569, 90, 1565, 79, 149, 35, 50, 54,
	99, 34, 84, 95, 117, 155, 123, 1564, 1560, 125,
	1550, 112, 1549, 1546, 1627, 129, 1545, 1544, 1543, 1575,
	1445, 1414, 684, 1542, 1541, 1357, 1210, 1540, 1539, 131,
	1538, 1537, 152, 230, 33, 1536, 119, 1535, 103, 1528,
	0, 30, 18, 1527, 126, 83, 1522, 1502, 1491, 1489,
	32, 2, 9, 6, 7, 4, 25, 24, 1488, 1487,
	145, 96, 62, 1486, 156, 1483, 1482, 1481, 47, 1480,
	26, 1478, 16, 1474, 1473, 8, 3, 150, 1472, 110,
	1471, 1344, 1469, 153, 1465, 1463, 1333, 52, 94,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 90, 90, 89, 89,
	92, 92, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 180, 180, 179, 18, 155,
	155, 19, 19, 19, 19, 20, 114, 114, 21, 21,
	21, 21, 22, 26, 247, 247, 247, 251, 251, 252,
	252, 253, 253, 253, 253, 253, 253, 253, 249, 249,
	29, 29, 29, 29, 29, 133, 129, 129, 131, 131,
	131, 131, 55, 128, 128, 128, 128, 130, 130, 130,
	130, 203, 202, 202, 208, 208, 208, 68, 68, 68,
	68, 68, 69, 69, 69, 201, 201, 201, 201, 209,
	209, 209, 209, 209, 209, 70, 70, 70, 207, 207,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	17, 248, 248, 250, 250, 31, 31, 9, 9, 10,
	10, 71, 71, 72, 72, 136, 136, 136, 136, 73,
	73, 47, 47, 47, 135, 218, 218, 219, 219, 219,
	219, 219, 219, 220, 220, 220, 220, 220, 220, 220,
	216, 216, 217, 214, 214, 215, 215, 215, 215, 254,
	254, 134, 134, 76, 76, 223, 223, 223, 223, 221,
	221, 221, 221, 221, 224, 222, 225, 225, 225, 225,
	225, 166, 166, 166, 33, 11, 53, 53, 12, 8,
	8, 118, 118, 80, 80, 171, 171, 171, 62, 62,
	42, 42, 42, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 119, 119, 120, 120, 24, 28,
	32, 32, 32, 32, 32, 256, 256, 59, 59, 59,
	59, 60, 60, 132, 132, 132, 132, 132, 54, 7,
	7, 49, 49, 50, 50, 51, 51, 52, 52, 257,
	257, 23, 23, 23, 23, 23, 65, 65, 125, 125,
	125, 127, 127, 126, 126, 126, 104, 104, 34, 85,
	85, 94, 94, 95, 95, 177, 96, 96, 27, 27,
	37, 37, 35, 35, 35, 35, 35, 35, 36, 36,
	38, 38, 38, 38, 38, 38, 38, 231, 231, 231,
	234, 234, 230, 232, 232, 233, 233, 255, 255, 105,
	105, 105, 75, 74, 74, 78, 78, 77, 79, 79,
	170, 102, 102, 102, 102, 121, 122, 122, 123, 123,
	124, 124, 101, 101, 152, 152, 39, 39, 84, 84,
	86, 86, 143, 143, 144, 144, 142, 142, 142, 172,
	172, 172, 172, 169, 169, 173, 173, 173, 173, 173,
	173, 167, 167, 167, 167, 168, 168, 178, 178, 108,
	108, 108, 108, 106, 106, 107, 107, 174, 174, 174,
	174, 103, 103, 175, 175, 175, 137, 137, 181, 181,
	181, 83, 83, 83, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 183, 183, 183,
	183, 185, 185, 185, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 186, 186,
	193, 193, 194, 194, 195, 196, 187, 187, 188, 188,
	189, 190, 197, 197, 197, 197, 199, 199, 191, 191,
	191, 191, 191, 192, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 226, 226, 226, 226, 226, 226, 226, 228,
	228, 229, 229, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	235, 235, 236, 236, 238, 238, 239, 239, 240, 241,
	241, 241, 242, 243, 243, 237, 237, 244, 244, 244,
	245, 245, 246, 246, 246, 246, 246, 157, 157, 157,
	158, 158, 159, 91, 91, 154, 154, 153, 153, 153,
	156, 156, 109, 109, 198, 198, 198, 198, 198, 198,
	198, 110, 110, 110, 117, 111, 111, 112, 112, 112,
	112, 112, 112, 149, 150, 113, 113, 113, 151, 151,
	160, 164, 164, 163, 162, 162, 161, 161, 140, 140,
	140, 140, 141, 141, 139, 138, 97, 97, 98, 98,
	258, 258, 165, 165, 99, 99, 100, 93, 93, 176,
	176, 176, 176, 87, 87, 67, 67, 88, 88, 63,
	63, 66, 66, 64, 64, 64, 64, 81, 81, 82,
	82, 61, 61, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 200, 200, 200, 56, 56, 56,
	57, 57, 58, 58, 205, 205, 205, 206, 206, 206,
	206, 204, 204, 204, 204, 204, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	2, 2, 0, 2, 0, 8, 8, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 4,
	3, 1, 5, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 2, 2, 4, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 1, 1,
	3, 5, 1, 0, 2, 2, 1, 2, 0, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -233, 92, 100, 122, 198,
	99, 85, 116, 212, 220, -35, -37, 228, -133, 229,
	34, 238, 58, 95, 214, 209, 260, 66, -231, -38,
	-36, 308, 283, 289, 223, -39, 246, 275, 311, 246,
	130, 78, 278, -63, -56, 4, -210, -212, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 184,
	187, 190, 191, 192, 193, 196, 198, 200, 201, 202,
	204, 205, 209, 207, 208, 210, 212, 214, 215, 217,
	219, 220, 221, 222, 225, 226, 228, 229, 231, 234,
	237, 238, 239, 242, 240, 236, 245, 247, 248, 249,
	256, 260, 261, 262, 263, 266, 267, 268, 270, 272,
	273, 274, 279, 284, 285, 286, 287, 28, 35, 36,
	37, 38, 40, 41, 44, 45, 49, 50, 51, 53,
	80, 82, 83, 98, 101, 102, 108, 118, 120, 125,
	126, 135, 136, 137, 138, 140, 151, 174, 176, 185,
	189, 195, 197, 203, 216, 224, 232, 233, 241, 243,
	251, 252, 253, 257, 258, 275, 276, 87, 134, 268,
	267, 78, 130, 246, 278, -16, 308, -27, -6, -14,
	-4, -23, -34, -13, -30, -17, -31, -15, 23, -204,
	4, -210, -212, -211, -213, 55, 67, 115, 133, 127,
	142, 144, 152, 154, 166, 186, 188, 213, 230, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 42, 47,
	48, 52, 54, 56, 62, 66, 70, 71, 72, 73,
	74, 75, 84, 86, 88, 89, 90, 93, 95, 97,
	103, 104, 105, 111, 113, 114, 116, 119, 121, 128,
	130, 132, 139, 141, 147, 150, 155, 157, 158, 171,
	173, 179, 180, 181, 182, 183, 194, 199, 206, 211,
	223, 227, 235, 244, 246, 250, 254, 255, 259, 264,
	265, 269, 271, 277, 278, 280, 281, 282, 283, -56,
	-56, -56, 198, 22, -251, 22, -252, -253, 66, 92,
	116, 223, 134, 87, 267, -251, -60, 220, -56, -129,
	156, 226, 216, 256, -130, -128, -203, 251, 165, -89,
	-56, 4, 22, 78, 57, 79, 117, 130, 131, 62,
	63, 146, 247, 251, 256, 66, 270, -256, 256, 256,
	-256, -256, -59, 256, 254, -60, -255, 246, 246, 269,
	278, -118, 78, 265, -36, -38, -37, -77, -78, 264,
	139, 97, 183, -35, -37, -231, -234, 204, -230, -56,
	-234, -74, -75, 22, 89, 312, -174, -63, 181, -100,
	308, -3, -174, 125, -63, -66, 125, -63, -56, -174,
	125, 114, 308, -97, -140, -139, -138, 306, 310, 114,
	141, 141, -175, -174, -56, 125, -67, 125, -66, -90,
	125, -89, -90, 125, -180, -179, -206, 4, -210, -212,
	-211, 275, 246, 130, -155, 308, -114, 308, -56, 22,
	180, 312, 180, -56, -129, 51, -129, 308, -131, -54,
	-55, 143, 200, 254, 293, 114, 287, -70, 5, 84,
	-92, 310, 114, -248, 180, 114, 114, 114, 114, 114,
	114, 287, 143, 200, 219, 246, 278, -132, -54, -55,
	-132, 254, -60, -103, -174, -89, 125, -56, -89, 130,
	-56, 125, -77, -78, -102, -121, -122, 155, 179, -105,
	22, 89, -105, -105, 43, 309, 309, 312, -234, -82,
	308, -93, -176, -145, 301, -147, 299, 300, 305, 171,
	288, -157, -63, -148, 313, 9, 308, -160, -228, -37,
	98, 29, -158, -159, 216, -56, 7, 8, 5, 6,
	-61, -183, -192, 259, 103, 173, 47, -226, -227, 4,
	-210, -205, -184, -194, -188, -191, 140, 55, 71, 74,
	72, 75, 227, 269, 48, 28, 101, 102, 189, 195,
	243, 257, 258, 125, 174, 126, 53, 118, 151, 91,
	36, 38, 40, 41, 49, 50, 80, 82, 83, 108,
	135, 136, 137, 138, 176, 203, 232, 241, 252, 253,
	276, -211, -195, -196, -189, -190, -197, -93, -100, 301,
	-63, 308, -99, -165, -145, 84, -44, 207, -43, 21,
	23, 92, 273, 98, 236, 236, 207, 98, 313, 207,
	207, 98, 239, 309, -87, -63, -140, -145, -141, -204,
	301, -175, -65, -63, -65, 228, -56, 30, 98, -46,
	312, 46, 210, 98, -46, 312, 98, -46, 98, 309,
	312, -174, 125, -66, 30, -154, -181, -182, -184, -193,
	-187, -191, -192, 39, 45, 44, 249, 224, 233, 37,
	135, 136, 137, 138, 232, 36, 203, 108, 91, 83,
	82, 176, 41, 40, -195, -196, -189, -190, 80, 252,
	253, 140, 38, 50, 49, 276, 241, -91, -145, -247,
	-88, 246, 78, -64, -56, 301, -253, -247, 30, -91,
	312, 312, 153, -69, 159, 170, 123, -202, 84, -208,
	-201, -166, 9, 259, 103, 180, -207, 8, 300, -200,
	-206, 5, 7, 299, -202, 84, 69, -209, 5, 4,
	-192, -166, 84, 156, 310, -204, -203, -250, 111, -247,
	-203, -203, -203, -203, -203, -56, 153, -203, -203, 312,
	312, -60, -46, 312, 308, -76, 171, -232, 283, -76,
	308, -57, 125, -56, -232, 171, -102, -122, -121, -123,
	-145, 22, -145, -147, -36, -36, -36, -79, -170, -145,
	-230, 30, -81, -56, -84, 312, 114, 10, 11, 54,
	33, 299, 300, 301, 302, 109, 303, 296, 297, 298,
	295, 291, 292, 293, 60, 160, 218, 13, 14, 15,
	26, 182, 154, 288, 127, 230, 305, 16, 17, 18,
	142, 35, 128, 30, 4, -145, -145, -145, -145, -145,
	188, 7, -98, -37, -145, -91, -97, -37, -153, 306,
	308, -97, 308, 5, 5, 308, -161, -145, -235, 284,
	111, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 197, -199,
	279, -199, -199, -185, 308, -185, -186, 308, -185, 285,
	289, 308, -84, -63, 312, 309, 312, 254, -119, 62,
	56, -135, 125, 56, -214, -56, 62, -215, 52, 265,
	199, 113, -119, 62, -119, 62, 62, -174, 33, 33,
	254, -66, -56, 254, 254, -174, 114, 309, 312, 307,
	316, -137, 281, -125, -27, 308, 84, 30, -125, -94,
	-95, -177, -96, -63, 308, -56, -56, -66, -67, -89,
	-90, -90, -16, -179, 98, -19, -27, -23, -34, -13,
	309, 312, -83, 29, -115, 308, 286, 163, 81, 124,
	162, -116, 222, 309, 312, 254, 312, -88, -81, -139,
	-138, 114, 256, 309, -55, -54, -68, 202, 234, 208,
	225, 312, 8, 7, 7, 5, -204, -249, -56, -55,
	-54, -174, -71, -81, -72, -56, -136, -135, -216, -217,
	-214, 130, 265, 104, 30, 98, -53, 193, 30, 180,
	171, -49, 248, 98, -124, 216, 217, 312, -42, 31,
	88, 308, 312, 309, -137, -176, -86, -172, -174, -37,
	-173, 308, -181, -181, -89, 251, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, 154, 127,
	230, 35, 128, -145, 254, -145, -145, -145, -145, 173,
	171, 259, 103, 266, 89, 177, -258, 244, 32, -151,
	-37, 308, -204, -157, 216, 308, -140, 309, 312, -91,
	-156, 307, -153, -91, 309, 309, -91, 277, 22, 89,
	301, -115, 7, -164, -163, 280, -236, 106, 119, 308,
	309, 309, -145, -145, -109, -198, -91, 4, 286, 163,
	81, 124, 162, 222, -109, -110, -145, -91, -111, -146,
	-147, 299, 300, 305, 308, 216, -112, -145, -91, -145,
	42, 150, 255, -113, -145, 114, -91, -145, -145, -145,
	-91, -91, -91, 308, 7, 7, 251, 251, 7, -137,
	309, -165, -43, -63, -56, -56, 171, -135, 125, -48,
	171, -181, -56, 308, 308, 145, 145, -56, -56, 125,
	-56, 125, -56, -56, -44, 207, 308, 308, -56, 207,
	-56, -63, 207, 239, 114, -63, -141, -145, -104, 211,
	-145, -104, -127, 180, -87, 275, -56, 211, -85, 312,
	114, 293, -87, -46, -46, -46, -174, -181, 306, 306,
	7, 254, 254, 254, 254, 308, -145, -249, -64, -249,
	-54, 263, 59, 202, -208, -115, 312, 309, 309, 312,
	-57, 130, -57, -27, -89, 5, -27, -63, 98, -50,
	94, -257, 293, -56, -170, -19, -56, -101, 119, -178,
	312, 290, 67, -108, 144, 166, 115, 152, 213, 133,
	-142, 313, -169, 289, -37, -173, -172, 287, -145, -145,
	254, -258, 244, -151, -145, 173, 259, 103, 266, 89,
	177, 114, 308, -146, -146, -91, 308, -91, -98, -145,
	307, 307, 312, 309, -78, 312, -77, -145, -91, -91,
	309, 309, -162, -163, 93, -145, -241, 187, 308, 308,
	-145, 30, 312, 309, 114, 309, 309, -117, 194, 309,
	10, 11, 299, 300, 301, 302, 109, 303, 296, 297,
	298, 295, 291, 292, 293, 60, 160, 218, 13, 14,
	15, 142, 128, -146, -146, -146, -91, 308, 309, -149,
	-150, 114, 111, 30, -113, -113, -113, 309, 114, -91,
	312, 312, 312, 309, 309, 309, 7, 309, 312, 309,
	287, 287, 309, -101, 254, 254, 98, 171, 272, -218,
	-215, -145, -81, 308, 308, -41, 92, 228, -120, 98,
	-46, 98, -46, 254, -119, 62, -91, -91, 254, 254,
	239, 307, -93, 211, 61, 309, -93, -137, -95, -86,
	-165, 309, 307, 7, 7, 309, 163, 124, 162, -116,
	162, -116, -116, 7, -56, -73, 129, -136, 308, -57,
	308, 308, -76, 308, -56, -51, 149, -257, 4, -232,
	309, -152, 121, 43, -172, 177, 144, 144, -172, -108,
	144, -106, 186, -106, -106, -169, -204, 314, -168, -167,
	30, -56, 184, 309, -145, -145, -146, -146, 114, 308,
	-145, -154, 26, 26, 309, -91, 309, 312, 309, -153,
	309, 277, -78, -78, -78, 5, 95, -145, 250, -242,
	-56, 308, 281, -77, 309, -181, -181, -145, -149, -145,
	-181, -181, -146, -146, -146, -146, -146, -146, -146, -146,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
	-146, 89, 171, 177, -146, 312, -91, 309, -150, -149,
	-145, -145, -181, 309, 309, 309, -91, -145, -145, -145,
	309, 7, -152, -56, -56, -135, 98, -219, 62, -220,
	54, 104, 66, 171, 173, 265, 199, 52, 84, 206,
	309, 309, -81, -81, 171, 84, 171, 84, 77, 261,
	-56, -56, -63, -56, -56, 309, 309, -56, -63, -93,
	-126, 308, 180, -27, -104, 293, 307, 307, 309, 128,
	-80, -171, -56, -229, 308, -226, -227, -61, 308, -81,
	-71, 30, -80, 180, -52, 148, -257, 5, -49, -238,
	282, -145, -91, 245, -172, -172, -107, 271, 180, 144,
	-172, -168, -144, -143, 112, 169, -56, 308, -169, 26,
	26, -145, -154, 309, -145, -145, 309, -145, 5, -145,
	309, 309, 309, -145, -243, -56, -145, 309, 309, 309,
	-150, 114, 89, 177, 308, -145, 309, 309, 312, 309,
	309, 309, -238, -135, -56, -89, -56, 104, 125, 173,
	145, 308, -146, -63, -134, -254, 65, 242, 309, 309,
	173, 173, -145, -181, -46, -46, 254, 254, 90, -81,
	62, -100, -37, 308, 190, 309, 312, -62, -97, 54,
	-62, -145, 308, -80, 309, 309, -27, 309, -63, -257,
	5, -50, -239, -240, -56, 251, -107, 308, -145, -172,
	312, 315, 293, 308, -81, -167, -145, -145, 309, 309,
	-78, -237, 192, 309, -146, 114, 308, -154, 309, -145,
	-220, -57, 171, -145, -58, 308, -73, 308, 206, -45,
	54, -56, -56, 267, 172, 309, -56, -56, -134, -171,
	-42, -89, -42, 309, -91, 309, -73, -134, 308, 5,
	-51, 312, 30, -148, -61, -56, -81, -143, -204, -81,
	309, 309, -78, 43, -146, -154, 309, 309, 98, 309,
	-223, 161, -56, -81, -63, -40, 271, -89, 228, -137,
	308, -73, -62, -78, -134, -73, -80, -52, -240, -242,
	308, 309, 309, -244, 201, 217, -91, 309, 104, -221,
	-224, -222, 180, 115, 191, 231, 309, 309, -76, -145,
	-94, -81, -42, 309, -73, 309, -91, 309, -245, -246,
	35, 262, 69, -145, -245, -56, -222, 180, -224, 180,
	267, 87, -223, -137, 309, -134, -78, -246, 196, 110,
	216, 196, 110, -225, 168, 210, 46, 228, -225, -221,
	-47, 46, 210, -73, 309, 26, 20, 173, 84, -246,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 368, -2, 0, 134, 0,
	316, 0, 316, 316, 320, 0, 398, 282, 395, -2,
	406, 0, 0, 0, 404, 382, 0, 0, -2, 0,
	0, 0, 0, 0, 809, 837, 838, 839, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 0, 200,
	851, 852, 853, 854, 855, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 100,
	107, 108, 924, 110, 0, 117, 118, 119, 121, 122,
	123, 124, 125, 126, 127, 0, 309, 939, 322, 130,
	902, 943, 1012, 958, 137, 147, 0, 1018, -2, 151,
	78, 180, 181, 182, 0, 184, 202, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 199, 327, 315, 327,
	312, 313, 314, 317, 0, 308, 0, 397, 0, 0,
	0, 0, 0, 281, -2, 378, 379, -2, 0, 401,
	401, 401, 0, 0, 379, 0, 387, 928, 390, 820,
	388, 0, 0, 403, 402, 0, 383, 467, 0, 426,
	0, 2, 0, 997, 467, 0, 997, 812, 0, 0,
	997, 0, 0, 810, 786, 778, 779, 783, 0, 0,
	0, 0, 0, 473, 68, 997, 51, 997, 805, 51,
	997, 76, 51, 997, 0, 95, 97, 847, 848, 849,
	850, 1023, 0, 0, 0, 0, 105, 0, 109, 111,
	0, 0, 0, 321, 131, 986, 133, 0, 136, 138,
	139, 0, 0, 0, 0, 0, 0, 150, 175, 176,
	79, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 195, 196, 0, 0, 310, 323, 324,
	311, 0, 319, 51, 471, 254, 997, 394, 254, 841,
	394, 997, -2, 0, 374, 413, 414, 0, 0, 0,
	399, 400, 0, 0, 0, 370, 371, 0, 389, 0,
	0, 429, 797, 801, 802, 560, 0, 0, 0, 0,
	0, 0, 649, 650, 0, 788, 0, 654, 655, 656,
	991, 0, 660, 661, 1012, 809, 823, 824, 825, 826,
	0, 0, 0, 831, 832, 833, 777, 701, 670, -2,
	-2, 821, 497, 498, 499, 500, -2, 1025, 674, 676,
	678, 679, 680, 681, 0, 975, 992, 993, 1008, 1009,
	1017, 1021, 1022, 997, 1005, 998, 987, 995, 1004, 880,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 846, 522, 523, 528, 529, 531, 429, 427, 468,
	469, 0, 0, 794, 792, 793, 28, 305, 30, 0,
	305, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 803, 787, 782, 0, 784,
	785, 477, 0, 346, 0, 0, 474, 0, 0, 70,
	0, 49, 50, 0, 72, 0, 0, 74, 0, 396,
	0, 0, 997, 0, 396, 0, 735, 483, 484, 485,
	486, 487, 557, 490, 491, 492, 493, 494, 495, 496,
	504, 505, 506, 507, 508, 509, 510, 519, 0, 503,
	503, 503, 516, 517, 520, 521, 526, 527, 538, 539,
	541, 543, 537, 537, 537, 534, 535, 0, 733, 0,
	114, 0, 875, 807, 813, 814, 120, 0, 0, 0,
	0, 0, 0, 142, 162, 163, 164, 143, 145, 152,
	154, 155, 156, 165, 166, 167, 168, 271, 0, 273,
	178, 179, 834, 0, 144, 146, 148, 149, 169, 170,
	0, 172, 173, 174, 0, 80, 183, 185, 0, 201,
	186, 187, 188, 189, 190, 191, 194, 197, 198, 0,
	0, 318, 274, 0, 212, 0, 0, 277, 393, 0,
	0, 0, 997, 840, 332, 0, 377, 411, 412, 415,
	418, 419, 416, 560, 384, 385, 386, 407, 408, 292,
	391, 0, 0, 817, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 791, 0, 0, 800, 565, 566, 567, 589, 590,
	0, 651, 652, -2, 733, 0, 657, 658, 659, 0,
	0, -2, 0, 828, 557, 0, 0, 776, 703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 756, 762,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 525,
	536, 533, 532, 514, 0, 513, 511, 0, 515, 0,
	0, 0, 477, 0, 0, 796, 0, 0, 0, 0,
	304, 32, 997, 0, 53, 0, 0, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 0, 0, 0, 0, 780,
	783, 357, 0, 357, 348, 0, 0, 0, 344, 360,
	361, 363, 364, 0, 0, 475, 69, 806, 51, 77,
	51, 51, 83, 96, 0, 98, 101, 102, 103, 104,
	99, 0, 478, 480, 488, 0, 544, 545, 546, 547,
	548, 549, 558, 106, 0, 0, 0, 115, 116, 815,
	816, 0, 0, 135, 140, 141, 328, 0, 159, 0,
	161, 0, 272, 836, 835, 557, 81, 203, 128, 325,
	326, 472, 0, 0, 211, 817, 213, 215, 216, 217,
	218, 841, 0, 841, 0, 0, 275, 0, 0, 0,
	0, 334, 340, 0, 417, 420, 421, 0, 410, 290,
	291, 396, 0, 819, 423, 798, 458, 430, 438, 444,
	441, 0, 561, 562, 563, 0, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, -2, -2, -2, 581,
	582, 583, -2, -2, -2, 587, 588, -2, 0, 0,
	0, 791, 0, -2, 0, 597, -2, -2, -2, 601,
	0, 604, 606, 608, 0, 0, 0, 0, 790, 618,
	768, 0, 799, 603, 0, 0, 789, 788, 0, 0,
	0, 739, 740, 0, -2, 662, 406, 0, 0, 0,
	0, 829, 0, 775, 771, 0, 711, 0, 0, 0,
	675, 677, 0, 0, 0, 0, 743, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 733, 753, 0, 0,
	620, 0, 0, 0, 0, 1012, 0, 733, 761, 0,
	0, 0, 0, 0, 733, 0, 767, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 423,
	470, 795, 31, 294, 0, 0, 0, 34, 997, 42,
	0, 226, 0, 0, 0, 0, 0, 307, 43, 997,
	51, 997, 51, 44, 29, 305, 0, 0, 298, 0,
	293, 296, 0, 59, 0, 804, 0, 782, 67, 0,
	476, 341, 342, 0, 0, 350, 347, 0, 477, 0,
	0, 0, 0, 71, 73, 75, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 112, 808, 113,
	132, 157, 158, 160, 153, 171, 0, 220, 253, 0,
	0, 841, 0, 209, 254, 276, 278, 0, 0, 336,
	340, 0, 339, 394, 409, 0, 818, 425, 0, 428,
	0, 0, 0, 0, 0, 0, 464, 464, 464, 462,
	444, 0, 456, 0, -2, 441, 0, 0, -2, -2,
	0, 0, 0, 619, -2, 602, 605, 607, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 653, 734,
	737, 738, 0, -2, 0, 0, 405, 406, 406, 406,
	668, 0, 0, 772, 0, 0, 669, 0, 0, 0,
	0, 0, 0, 684, 0, 685, 686, 0, 0, 687,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 624, 625, 0, 0, 688, 759,
	760, 0, 0, 0, 0, 0, 0, 693, 0, 766,
	0, 0, 0, 697, 698, 699, 0, 501, 0, 518,
	540, 542, 530, 425, 0, 0, 0, 0, 52, 224,
	243, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	40, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	60, 781, 356, 0, 355, 0, 345, 357, 362, 359,
	365, 0, 481, 0, 0, 489, 550, 551, 552, 553,
	554, 555, 556, 0, 129, 207, 0, 214, 0, 0,
	0, 212, 0, 0, 0, 338, 340, 0, 331, 332,
	392, 705, 0, 0, 431, 0, 0, 0, 0, 0,
	0, 459, 463, 460, 461, 456, 436, 0, 440, 455,
	0, 454, 443, -2, 564, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 769, 0, 728, 0, -2, 741,
	663, 0, 0, 0, 0, 830, 770, 774, 0, 709,
	710, 714, 0, 0, 673, 0, 0, 742, 752, 754,
	621, 622, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, -2, -2, -2, 639, 640, 641, -2, -2,
	-2, 0, 0, 0, 755, 0, 0, 731, 757, 758,
	763, 764, 0, 690, 691, 692, 765, 0, 0, 0,
	524, 0, 705, 300, 302, 33, 0, 225, 0, 228,
	0, 0, 0, 0, 234, 235, 0, 0, 0, 0,
	245, 252, 0, 0, 0, 48, 0, 0, 306, 0,
	51, 51, 295, 0, 0, 205, 206, 299, 297, 343,
	0, 0, 0, 349, 358, 0, 482, 479, 559, 0,
	0, 283, 289, 289, 0, 671, 672, 0, 0, 0,
	0, 0, 0, 0, 329, 340, 0, 333, 334, 380,
	0, 424, 422, 0, 446, 0, 448, 0, 0, 0,
	450, 439, 0, 434, 0, 433, 452, 0, 0, 0,
	0, -2, 0, 612, -2, -2, 727, 734, 827, 406,
	664, 666, 667, 773, 716, 713, 0, 700, 682, 683,
	751, 0, 0, 0, 0, 734, 730, 689, 0, 695,
	696, 502, 381, 35, 0, 229, 230, 841, 0, 233,
	236, 0, 238, 843, 220, 0, 249, 250, 247, 0,
	37, 38, 47, 55, 39, 45, 0, 0, 0, 0,
	0, 366, 367, 0, 0, 252, 0, 292, 822, 0,
	292, 0, 0, 0, 242, 220, 210, 252, 0, 0,
	335, 336, 704, 706, 0, 0, 447, 0, 466, 449,
	0, 437, 0, 0, 0, 442, -2, -2, 613, 729,
	0, 406, 0, 702, -2, 0, 0, 0, 732, 0,
	227, 231, 0, 0, 258, 0, 246, 0, 0, 57,
	0, 301, 303, 0, 352, 477, 354, 0, 220, 284,
	285, 288, 286, 289, 406, 252, 208, 220, 0, 337,
	338, 0, 0, 457, 0, 0, 0, 435, 432, 0,
	453, 665, 719, 0, -2, 0, 647, 694, 0, 237,
	263, 0, 0, 0, 254, 41, 0, 54, 0, 353,
	0, 240, 292, 0, 220, 279, 0, 330, 707, 708,
	0, 465, 451, 0, 0, 0, 715, 648, 0, 239,
	259, 260, 0, 255, 256, 257, 842, 251, 258, 56,
	477, 0, 287, 663, 241, 252, 406, 712, 717, 720,
	-2, 961, 872, 0, 718, 232, 261, 0, 262, 0,
	0, 0, 263, 351, 223, 220, 0, 0, 722, 723,
	724, 725, 726, 264, 0, 267, 268, 0, 265, 248,
	219, 221, 222, 280, 0, 0, 266, 269, 270, 721,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 297, 3, 303, 298, 3,
	308, 309, 301, 299, 312, 300, 310, 302, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 316, 311,
	291, 293, 292, 3, 313, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 306, 3, 307, 296, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 314, 295, 315, 305,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 294, 57634, 304,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:730
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:736
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:761
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:828
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:851
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:924
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1436
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1634
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1638
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = DropDefault
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1648
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return unimplemented(sqllex)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1853
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1864
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1867
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1984
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = Ascending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = Descending
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2042
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2043
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = true
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = false
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2057
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2100
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.str = ""
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.str = ""
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2222
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2242
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2249
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return unimplemented(sqllex)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2321
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2553
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2554
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2557
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2560
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2561
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2569
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = true
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = false
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = true
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2593
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &From{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = true
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = false
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.str = astFullJoin
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.str = astLeftJoin
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.str = astRightJoin
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.str = astInnerJoin
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2948
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3047
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3052
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3061
		{
			return unimplemented(sqllex)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3117
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = nil
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3238
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3270
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3310
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3344
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3345
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			return unimplemented(sqllex)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3351
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			return unimplemented(sqllex)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3354
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			return unimplemented(sqllex)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3358
		{
			return unimplemented(sqllex)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3393
		{
			return unimplemented(sqllex)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			return unimplemented(sqllex)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3757
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3836
		{
			return unimplemented(sqllex)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3837
		{
			return unimplemented(sqllex)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3860
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			return unimplemented(sqllex)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3876
		{
			return unimplemented(sqllex)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3880
		{
			return unimplemented(sqllex)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			return unimplemented(sqllex)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			return unimplemented(sqllex)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			return unimplemented(sqllex)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3900
		{
			return unimplemented(sqllex)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3929
		{
			return unimplemented(sqllex)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3973
		{
			return unimplemented(sqllex)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3974
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3977
		{
			return unimplemented(sqllex)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3978
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = Window(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.str = ""
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4065
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4066
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4067
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4071
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4077
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4078
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4079
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4080
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4435
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4595
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4631
		{
			return unimplemented(sqllex)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = DNull
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.str = ""
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
