// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:494
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PHYSICAL = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SOME_EXISTENCE = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TO = 57659
const TRAILING = 57660
const TRACE = 57661
const TRANSACTION = 57662
const TREAT = 57663
const TRIM = 57664
const TRUE = 57665
const TRUNCATE = 57666
const TYPE = 57667
const UNBOUNDED = 57668
const UNCOMMITTED = 57669
const UNION = 57670
const UNIQUE = 57671
const UNKNOWN = 57672
const UPDATE = 57673
const UPSERT = 57674
const USE = 57675
const USER = 57676
const USERS = 57677
const USING = 57678
const UUID = 57679
const VALID = 57680
const VALIDATE = 57681
const VALUE = 57682
const VALUES = 57683
const VARCHAR = 57684
const VARIADIC = 57685
const VIEW = 57686
const VARYING = 57687
const WHEN = 57688
const WHERE = 57689
const WINDOW = 57690
const WITH = 57691
const WITHIN = 57692
const WITHOUT = 57693
const WRITE = 57694
const YEAR = 57695
const ZONE = 57696
const NOT_LA = 57697
const WITH_LA = 57698
const AS_LA = 57699
const CONTAINED_BY = 57700
const POSTFIXOP = 57701
const UMINUS = 57702
const HELPTOKEN = 57703

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6970

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 734,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 583,
	-2, 0,
	-1, 54,
	97, 734,
	156, 734,
	331, 734,
	332, 734,
	-2, 0,
	-1, 64,
	1, 696,
	215, 696,
	261, 696,
	376, 696,
	378, 696,
	380, 696,
	381, 696,
	-2, 709,
	-1, 97,
	4, 736,
	20, 736,
	21, 736,
	24, 736,
	29, 736,
	34, 736,
	35, 736,
	36, 736,
	37, 736,
	38, 736,
	39, 736,
	40, 736,
	41, 736,
	42, 736,
	43, 736,
	45, 736,
	46, 736,
	47, 736,
	48, 736,
	49, 736,
	52, 736,
	53, 736,
	54, 736,
	56, 736,
	57, 736,
	61, 736,
	62, 736,
	63, 736,
	65, 736,
	66, 736,
	67, 736,
	68, 736,
	70, 736,
	72, 736,
	73, 736,
	76, 736,
	77, 736,
	78, 736,
	86, 736,
	87, 736,
	88, 736,
	89, 736,
	90, 736,
	91, 736,
	92, 736,
	93, 736,
	95, 736,
	97, 736,
	99, 736,
	102, 736,
	103, 736,
	105, 736,
	109, 736,
	110, 736,
	111, 736,
	112, 736,
	113, 736,
	114, 736,
	115, 736,
	123, 736,
	124, 736,
	125, 736,
	126, 736,
	127, 736,
	129, 736,
	131, 736,
	136, 736,
	137, 736,
	139, 736,
	142, 736,
	143, 736,
	144, 736,
	145, 736,
	146, 736,
	147, 736,
	150, 736,
	151, 736,
	153, 736,
	156, 736,
	157, 736,
	158, 736,
	159, 736,
	160, 736,
	161, 736,
	162, 736,
	163, 736,
	165, 736,
	168, 736,
	169, 736,
	170, 736,
	172, 736,
	173, 736,
	174, 736,
	175, 736,
	176, 736,
	178, 736,
	179, 736,
	181, 736,
	183, 736,
	184, 736,
	187, 736,
	188, 736,
	191, 736,
	193, 736,
	195, 736,
	196, 736,
	197, 736,
	198, 736,
	199, 736,
	201, 736,
	202, 736,
	203, 736,
	204, 736,
	208, 736,
	209, 736,
	210, 736,
	211, 736,
	212, 736,
	214, 736,
	216, 736,
	217, 736,
	220, 736,
	221, 736,
	223, 736,
	225, 736,
	226, 736,
	227, 736,
	228, 736,
	229, 736,
	230, 736,
	231, 736,
	233, 736,
	234, 736,
	235, 736,
	236, 736,
	237, 736,
	239, 736,
	240, 736,
	241, 736,
	242, 736,
	243, 736,
	244, 736,
	245, 736,
	246, 736,
	248, 736,
	249, 736,
	250, 736,
	251, 736,
	252, 736,
	254, 736,
	255, 736,
	256, 736,
	257, 736,
	258, 736,
	259, 736,
	260, 736,
	262, 736,
	264, 736,
	265, 736,
	266, 736,
	267, 736,
	269, 736,
	270, 736,
	271, 736,
	272, 736,
	273, 736,
	275, 736,
	276, 736,
	277, 736,
	278, 736,
	279, 736,
	281, 736,
	282, 736,
	283, 736,
	284, 736,
	286, 736,
	287, 736,
	288, 736,
	289, 736,
	292, 736,
	293, 736,
	294, 736,
	295, 736,
	296, 736,
	297, 736,
	298, 736,
	299, 736,
	300, 736,
	301, 736,
	303, 736,
	305, 736,
	306, 736,
	307, 736,
	308, 736,
	309, 736,
	310, 736,
	311, 736,
	312, 736,
	314, 736,
	315, 736,
	316, 736,
	319, 736,
	320, 736,
	321, 736,
	322, 736,
	324, 736,
	325, 736,
	326, 736,
	327, 736,
	330, 736,
	331, 736,
	332, 736,
	333, 736,
	335, 736,
	337, 736,
	338, 736,
	339, 736,
	340, 736,
	341, 736,
	342, 736,
	345, 736,
	350, 736,
	351, 736,
	352, 736,
	353, 736,
	354, 736,
	-2, 0,
	-1, 115,
	1, 699,
	215, 699,
	261, 699,
	376, 699,
	378, 699,
	380, 699,
	381, 699,
	-2, 708,
	-1, 120,
	1, 634,
	168, 634,
	239, 634,
	243, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 122,
	1, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 123,
	1, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 124,
	1, 638,
	380, 638,
	381, 638,
	-2, 0,
	-1, 146,
	4, 742,
	5, 742,
	6, 742,
	7, 742,
	8, 742,
	9, 742,
	20, 742,
	21, 742,
	24, 742,
	29, 742,
	30, 742,
	34, 742,
	35, 742,
	36, 742,
	37, 742,
	38, 742,
	39, 742,
	40, 742,
	41, 742,
	42, 742,
	43, 742,
	45, 742,
	46, 742,
	47, 742,
	48, 742,
	49, 742,
	50, 742,
	51, 742,
	52, 742,
	53, 742,
	54, 742,
	56, 742,
	57, 742,
	59, 742,
	61, 742,
	62, 742,
	63, 742,
	65, 742,
	66, 742,
	67, 742,
	68, 742,
	70, 742,
	72, 742,
	73, 742,
	75, 742,
	76, 742,
	77, 742,
	78, 742,
	80, 742,
	81, 742,
	82, 742,
	84, 742,
	85, 742,
	86, 742,
	87, 742,
	88, 742,
	89, 742,
	90, 742,
	91, 742,
	92, 742,
	93, 742,
	94, 742,
	95, 742,
	97, 742,
	99, 742,
	102, 742,
	103, 742,
	105, 742,
	109, 742,
	110, 742,
	111, 742,
	112, 742,
	113, 742,
	114, 742,
	115, 742,
	116, 742,
	117, 742,
	123, 742,
	124, 742,
	125, 742,
	126, 742,
	127, 742,
	129, 742,
	131, 742,
	134, 742,
	136, 742,
	137, 742,
	139, 742,
	142, 742,
	143, 742,
	144, 742,
	145, 742,
	146, 742,
	147, 742,
	148, 742,
	150, 742,
	151, 742,
	153, 742,
	155, 742,
	156, 742,
	157, 742,
	158, 742,
	159, 742,
	160, 742,
	161, 742,
	162, 742,
	163, 742,
	165, 742,
	167, 742,
	168, 742,
	169, 742,
	170, 742,
	171, 742,
	172, 742,
	173, 742,
	174, 742,
	175, 742,
	176, 742,
	178, 742,
	179, 742,
	181, 742,
	182, 742,
	183, 742,
	184, 742,
	185, 742,
	187, 742,
	188, 742,
	191, 742,
	193, 742,
	194, 742,
	195, 742,
	196, 742,
	197, 742,
	198, 742,
	199, 742,
	200, 742,
	201, 742,
	202, 742,
	203, 742,
	204, 742,
	205, 742,
	207, 742,
	208, 742,
	209, 742,
	210, 742,
	211, 742,
	212, 742,
	214, 742,
	217, 742,
	220, 742,
	221, 742,
	222, 742,
	223, 742,
	224, 742,
	225, 742,
	226, 742,
	227, 742,
	228, 742,
	229, 742,
	230, 742,
	231, 742,
	233, 742,
	234, 742,
	235, 742,
	236, 742,
	237, 742,
	239, 742,
	240, 742,
	241, 742,
	242, 742,
	243, 742,
	244, 742,
	245, 742,
	246, 742,
	248, 742,
	249, 742,
	250, 742,
	251, 742,
	252, 742,
	254, 742,
	255, 742,
	256, 742,
	257, 742,
	258, 742,
	259, 742,
	260, 742,
	262, 742,
	263, 742,
	264, 742,
	265, 742,
	266, 742,
	267, 742,
	269, 742,
	270, 742,
	271, 742,
	272, 742,
	273, 742,
	275, 742,
	276, 742,
	277, 742,
	278, 742,
	279, 742,
	280, 742,
	281, 742,
	282, 742,
	283, 742,
	284, 742,
	285, 742,
	286, 742,
	287, 742,
	288, 742,
	289, 742,
	292, 742,
	293, 742,
	294, 742,
	295, 742,
	296, 742,
	297, 742,
	298, 742,
	299, 742,
	300, 742,
	301, 742,
	303, 742,
	305, 742,
	306, 742,
	307, 742,
	308, 742,
	309, 742,
	310, 742,
	311, 742,
	312, 742,
	314, 742,
	315, 742,
	316, 742,
	319, 742,
	320, 742,
	321, 742,
	322, 742,
	323, 742,
	324, 742,
	325, 742,
	326, 742,
	327, 742,
	330, 742,
	331, 742,
	332, 742,
	333, 742,
	334, 742,
	335, 742,
	337, 742,
	338, 742,
	339, 742,
	340, 742,
	341, 742,
	342, 742,
	345, 742,
	350, 742,
	351, 742,
	352, 742,
	353, 742,
	354, 742,
	355, 742,
	363, 742,
	368, 742,
	369, 742,
	370, 742,
	377, 742,
	383, 742,
	-2, 0,
	-1, 149,
	1, 54,
	381, 54,
	-2, 734,
	-1, 517,
	133, 1352,
	317, 1352,
	360, 1352,
	379, 1352,
	-2, 0,
	-1, 518,
	133, 1299,
	317, 1299,
	360, 1299,
	379, 1299,
	-2, 0,
	-1, 520,
	133, 1412,
	317, 1412,
	360, 1412,
	379, 1412,
	-2, 0,
	-1, 522,
	133, 1435,
	317, 1435,
	360, 1435,
	379, 1435,
	-2, 0,
	-1, 529,
	133, 1357,
	317, 1357,
	360, 1357,
	379, 1357,
	-2, 348,
	-1, 555,
	1, 426,
	376, 426,
	378, 426,
	380, 426,
	381, 426,
	-2, 0,
	-1, 556,
	1, 479,
	130, 479,
	376, 479,
	378, 479,
	380, 479,
	381, 479,
	-2, 0,
	-1, 562,
	1, 440,
	376, 440,
	378, 440,
	380, 440,
	381, 440,
	-2, 0,
	-1, 564,
	1, 444,
	376, 444,
	378, 444,
	380, 444,
	381, 444,
	-2, 0,
	-1, 567,
	1, 452,
	376, 452,
	378, 452,
	380, 452,
	381, 452,
	-2, 0,
	-1, 568,
	1, 457,
	376, 457,
	378, 457,
	380, 457,
	381, 457,
	-2, 0,
	-1, 571,
	1, 467,
	376, 467,
	378, 467,
	380, 467,
	381, 467,
	-2, 0,
	-1, 596,
	118, 744,
	130, 744,
	186, 744,
	213, 744,
	-2, 703,
	-1, 603,
	118, 743,
	130, 743,
	186, 743,
	213, 743,
	-2, 700,
	-1, 659,
	377, 1277,
	-2, 1270,
	-1, 660,
	377, 1278,
	-2, 1271,
	-1, 666,
	5, 928,
	377, 928,
	-2, 1487,
	-1, 691,
	5, 887,
	-2, 1456,
	-1, 692,
	5, 922,
	377, 922,
	-2, 1458,
	-1, 693,
	5, 897,
	-2, 1459,
	-1, 694,
	5, 896,
	-2, 1460,
	-1, 695,
	5, 922,
	377, 922,
	-2, 1463,
	-1, 696,
	5, 922,
	377, 922,
	-2, 1464,
	-1, 697,
	5, 923,
	-2, 1467,
	-1, 698,
	5, 879,
	-2, 1468,
	-1, 699,
	5, 879,
	-2, 1469,
	-1, 700,
	5, 904,
	-2, 1473,
	-1, 701,
	5, 889,
	-2, 1474,
	-1, 702,
	5, 890,
	-2, 1475,
	-1, 703,
	5, 880,
	-2, 1481,
	-1, 704,
	5, 881,
	-2, 1482,
	-1, 705,
	5, 882,
	-2, 1483,
	-1, 706,
	5, 883,
	-2, 1484,
	-1, 707,
	5, 884,
	-2, 1485,
	-1, 708,
	5, 885,
	-2, 1486,
	-1, 709,
	5, 879,
	-2, 1493,
	-1, 710,
	5, 888,
	-2, 1498,
	-1, 711,
	5, 886,
	-2, 1501,
	-1, 712,
	5, 920,
	377, 920,
	-2, 1503,
	-1, 713,
	5, 924,
	-2, 1506,
	-1, 714,
	5, 926,
	-2, 1507,
	-1, 715,
	5, 919,
	377, 919,
	-2, 1512,
	-1, 779,
	112, 503,
	-2, 833,
	-1, 910,
	229, 732,
	-2, 576,
	-1, 915,
	215, 1274,
	-2, 0,
	-1, 951,
	1, 225,
	376, 225,
	378, 225,
	380, 225,
	381, 225,
	-2, 707,
	-1, 954,
	4, 1511,
	10, 1511,
	11, 1511,
	13, 1511,
	14, 1511,
	15, 1511,
	16, 1511,
	17, 1511,
	18, 1511,
	20, 1511,
	21, 1511,
	23, 1511,
	24, 1511,
	27, 1511,
	29, 1511,
	31, 1511,
	34, 1511,
	35, 1511,
	36, 1511,
	37, 1511,
	38, 1511,
	39, 1511,
	40, 1511,
	41, 1511,
	42, 1511,
	43, 1511,
	45, 1511,
	46, 1511,
	47, 1511,
	48, 1511,
	49, 1511,
	52, 1511,
	53, 1511,
	54, 1511,
	56, 1511,
	57, 1511,
	58, 1511,
	61, 1511,
	62, 1511,
	63, 1511,
	64, 1511,
	65, 1511,
	66, 1511,
	67, 1511,
	68, 1511,
	70, 1511,
	71, 1511,
	72, 1511,
	73, 1511,
	75, 1511,
	76, 1511,
	77, 1511,
	78, 1511,
	86, 1511,
	87, 1511,
	88, 1511,
	89, 1511,
	90, 1511,
	91, 1511,
	92, 1511,
	93, 1511,
	95, 1511,
	97, 1511,
	99, 1511,
	102, 1511,
	103, 1511,
	105, 1511,
	109, 1511,
	110, 1511,
	111, 1511,
	112, 1511,
	113, 1511,
	114, 1511,
	115, 1511,
	119, 1511,
	120, 1511,
	121, 1511,
	122, 1511,
	123, 1511,
	124, 1511,
	125, 1511,
	126, 1511,
	127, 1511,
	128, 1511,
	129, 1511,
	131, 1511,
	134, 1511,
	136, 1511,
	137, 1511,
	139, 1511,
	142, 1511,
	143, 1511,
	144, 1511,
	145, 1511,
	146, 1511,
	147, 1511,
	148, 1511,
	149, 1511,
	150, 1511,
	151, 1511,
	153, 1511,
	155, 1511,
	156, 1511,
	157, 1511,
	158, 1511,
	159, 1511,
	160, 1511,
	161, 1511,
	162, 1511,
	163, 1511,
	165, 1511,
	167, 1511,
	168, 1511,
	169, 1511,
	170, 1511,
	171, 1511,
	172, 1511,
	173, 1511,
	174, 1511,
	175, 1511,
	176, 1511,
	178, 1511,
	179, 1511,
	181, 1511,
	182, 1511,
	183, 1511,
	184, 1511,
	185, 1511,
	187, 1511,
	188, 1511,
	191, 1511,
	192, 1511,
	193, 1511,
	195, 1511,
	196, 1511,
	197, 1511,
	198, 1511,
	199, 1511,
	200, 1511,
	201, 1511,
	202, 1511,
	203, 1511,
	204, 1511,
	208, 1511,
	209, 1511,
	210, 1511,
	211, 1511,
	212, 1511,
	214, 1511,
	217, 1511,
	218, 1511,
	220, 1511,
	221, 1511,
	223, 1511,
	225, 1511,
	226, 1511,
	227, 1511,
	228, 1511,
	229, 1511,
	230, 1511,
	231, 1511,
	233, 1511,
	234, 1511,
	235, 1511,
	236, 1511,
	237, 1511,
	239, 1511,
	240, 1511,
	241, 1511,
	242, 1511,
	243, 1511,
	244, 1511,
	245, 1511,
	246, 1511,
	248, 1511,
	249, 1511,
	250, 1511,
	251, 1511,
	252, 1511,
	253, 1511,
	254, 1511,
	255, 1511,
	256, 1511,
	257, 1511,
	258, 1511,
	259, 1511,
	260, 1511,
	262, 1511,
	263, 1511,
	264, 1511,
	265, 1511,
	266, 1511,
	267, 1511,
	268, 1511,
	269, 1511,
	270, 1511,
	271, 1511,
	272, 1511,
	273, 1511,
	275, 1511,
	276, 1511,
	277, 1511,
	278, 1511,
	279, 1511,
	281, 1511,
	282, 1511,
	283, 1511,
	284, 1511,
	285, 1511,
	286, 1511,
	287, 1511,
	288, 1511,
	289, 1511,
	291, 1511,
	292, 1511,
	293, 1511,
	294, 1511,
	295, 1511,
	296, 1511,
	297, 1511,
	298, 1511,
	299, 1511,
	300, 1511,
	301, 1511,
	303, 1511,
	305, 1511,
	306, 1511,
	307, 1511,
	308, 1511,
	309, 1511,
	310, 1511,
	311, 1511,
	312, 1511,
	314, 1511,
	315, 1511,
	316, 1511,
	319, 1511,
	320, 1511,
	321, 1511,
	322, 1511,
	324, 1511,
	325, 1511,
	326, 1511,
	327, 1511,
	330, 1511,
	331, 1511,
	332, 1511,
	333, 1511,
	335, 1511,
	337, 1511,
	338, 1511,
	339, 1511,
	340, 1511,
	341, 1511,
	342, 1511,
	345, 1511,
	350, 1511,
	351, 1511,
	352, 1511,
	353, 1511,
	354, 1511,
	355, 1511,
	356, 1511,
	358, 1511,
	359, 1511,
	360, 1511,
	361, 1511,
	362, 1511,
	363, 1511,
	365, 1511,
	366, 1511,
	367, 1511,
	368, 1511,
	369, 1511,
	370, 1511,
	371, 1511,
	372, 1511,
	373, 1511,
	375, 1511,
	378, 1511,
	379, 1511,
	382, 1511,
	383, 1511,
	-2, 0,
	-1, 970,
	133, 1412,
	317, 1412,
	360, 1412,
	379, 1412,
	-2, 0,
	-1, 987,
	133, 1435,
	317, 1435,
	360, 1435,
	379, 1435,
	-2, 0,
	-1, 988,
	168, 646,
	239, 646,
	243, 646,
	-2, 336,
	-1, 1056,
	118, 743,
	130, 743,
	186, 743,
	213, 743,
	-2, 704,
	-1, 1137,
	108, 709,
	118, 709,
	130, 709,
	164, 709,
	186, 709,
	213, 709,
	219, 709,
	328, 709,
	-2, 1058,
	-1, 1147,
	377, 1254,
	-2, 1242,
	-1, 1165,
	378, 1171,
	-2, 0,
	-1, 1189,
	168, 646,
	239, 646,
	243, 646,
	-2, 641,
	-1, 1217,
	378, 1171,
	-2, 0,
	-1, 1221,
	108, 709,
	118, 709,
	130, 709,
	164, 709,
	186, 709,
	213, 709,
	219, 709,
	328, 709,
	-2, 810,
	-1, 1368,
	168, 646,
	239, 646,
	243, 646,
	-2, 338,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 963,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 964,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 965,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 966,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 967,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 968,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 969,
	-1, 1483,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 970,
	-1, 1492,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 979,
	-1, 1493,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 980,
	-1, 1494,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 981,
	-1, 1497,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 986,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 988,
	-1, 1505,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 992,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 993,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 994,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 995,
	-1, 1577,
	133, 1182,
	377, 1277,
	-2, 1270,
	-1, 1578,
	133, 1183,
	-2, 1452,
	-1, 1579,
	133, 1184,
	-2, 1356,
	-1, 1580,
	133, 1185,
	-2, 1317,
	-1, 1581,
	133, 1186,
	-2, 1334,
	-1, 1582,
	133, 1187,
	-2, 1355,
	-1, 1583,
	133, 1188,
	-2, 1409,
	-1, 1660,
	1, 811,
	75, 811,
	108, 811,
	118, 811,
	130, 811,
	134, 811,
	138, 811,
	140, 811,
	155, 811,
	164, 811,
	171, 811,
	182, 811,
	186, 811,
	200, 811,
	213, 811,
	215, 811,
	219, 811,
	261, 811,
	263, 811,
	328, 811,
	336, 811,
	347, 811,
	348, 811,
	357, 811,
	376, 811,
	378, 811,
	380, 811,
	381, 811,
	382, 811,
	-2, 810,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 987,
	-1, 1816,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 989,
	-1, 1821,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 990,
	-1, 1839,
	224, 1142,
	-2, 1144,
	-1, 2016,
	229, 732,
	-2, 576,
	-1, 2075,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 991,
	-1, 2080,
	167, 0,
	-2, 1007,
	-1, 2089,
	224, 1143,
	-2, 1145,
	-1, 2131,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1035,
	-1, 2132,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1036,
	-1, 2133,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1037,
	-1, 2137,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1041,
	-1, 2138,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1042,
	-1, 2139,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1043,
	-1, 2279,
	167, 0,
	-2, 1008,
	-1, 2282,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1011,
	-1, 2283,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1013,
	-1, 2411,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1012,
	-1, 2412,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1014,
	-1, 2419,
	167, 0,
	-2, 1044,
	-1, 2496,
	167, 0,
	-2, 1045,
	-1, 2578,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1455,
	-1, 2661,
	377, 1523,
	-2, 516,
}

const sqlPrivate = 57344

const sqlLast = 44185

var sqlAct = [...]int{

	660, 2646, 2658, 2377, 1239, 2659, 2644, 2226, 2376, 2586,
	2577, 2627, 2550, 1731, 2587, 1739, 2445, 2576, 2588, 1266,
	2053, 2108, 1809, 2501, 650, 2237, 2387, 658, 1274, 2261,
	802, 2347, 2266, 2333, 1309, 787, 1520, 2259, 2020, 186,
	944, 1655, 604, 904, 186, 1714, 657, 1219, 186, 1710,
	2191, 2425, 1709, 2190, 186, 2022, 1728, 1237, 1954, 186,
	186, 2028, 2253, 186, 1905, 2313, 186, 1215, 1933, 1198,
	940, 1740, 1310, 947, 186, 1713, 1269, 1664, 636, 1673,
	1450, 1268, 1393, 1941, 1557, 1703, 1656, 453, 2161, 1850,
	1224, 1904, 1262, 1532, 991, 1805, 1455, 1143, 612, 110,
	1287, 1788, 1061, 1227, 1229, 1541, 528, 1606, 63, 471,
	26, 1533, 1199, 1517, 1389, 1433, 990, 1431, 769, 1175,
	1551, 1179, 1711, 450, 789, 952, 930, 937, 1733, 1717,
	772, 1642, 1629, 508, 752, 1206, 1132, 1062, 628, 1573,
	525, 186, 186, 115, 1434, 1392, 1432, 1189, 177, 186,
	652, 116, 486, 110, 750, 521, 1281, 927, 182, 1188,
	2348, 549, 1066, 2175, 1838, 1289, 2176, 1289, 1732, 1216,
	1289, 2378, 186, 186, 792, 186, 186, 804, 2378, 2674,
	2673, 186, 186, 2667, 2667, 2666, 2623, 2622, 2621, 2667,
	1257, 1257, 1257, 2603, 2598, 2597, 2594, 2346, 1636, 1636,
	1257, 2574, 618, 2037, 608, 1299, 603, 2573, 500, 2545,
	2540, 1299, 2539, 1765, 1257, 2535, 2401, 2527, 608, 1257,
	2498, 2346, 2038, 2476, 1765, 2473, 609, 2346, 2471, 1257,
	1631, 892, 2346, 1077, 1078, 2073, 2456, 2455, 2433, 766,
	1257, 2346, 1257, 2679, 1842, 2430, 799, 785, 110, 1257,
	1843, 2413, 2372, 1253, 597, 1765, 1636, 1080, 1704, 26,
	1875, 1876, 596, 1893, 1894, 1895, 2367, 2345, 2326, 2281,
	1636, 2346, 1257, 1765, 2252, 2247, 2665, 2278, 1708, 1708,
	613, 1079, 2171, 2164, 2084, 2047, 2172, 1099, 1636, 2009,
	777, 781, 1636, 2008, 1930, 1929, 754, 1257, 1636, 1257,
	1077, 1078, 2546, 1107, 1108, 1109, 1117, 1118, 1119, 1299,
	2405, 1922, 1920, 1095, 1890, 1923, 1636, 1110, 756, 2401,
	757, 2164, 1077, 1078, 1080, 2675, 1630, 1121, 1117, 1118,
	1119, 1919, 2655, 1918, 1775, 1636, 1764, 1636, 1636, 1704,
	1765, 2063, 1102, 1103, 1104, 1105, 1080, 1662, 1079, 1121,
	2144, 1085, 2086, 1754, 1099, 1077, 1078, 1636, 1707, 1635,
	2009, 1096, 1708, 1636, 1299, 1302, 1808, 1636, 1786, 1303,
	1079, 1371, 1077, 1078, 146, 1290, 1099, 1290, 1881, 1080,
	1290, 1849, 1193, 1536, 1257, 890, 972, 149, 2349, 969,
	968, 146, 967, 966, 965, 964, 1080, 963, 962, 961,
	960, 1390, 1554, 1079, 148, 959, 958, 957, 956, 1102,
	1103, 1104, 1105, 955, 758, 1100, 755, 1896, 1085, 602,
	1079, 148, 186, 792, 186, 718, 186, 601, 600, 186,
	599, 1102, 1103, 1104, 1105, 186, 595, 594, 1114, 1122,
	1085, 147, 1891, 593, 186, 186, 186, 186, 792, 140,
	592, 591, 588, 792, 1555, 587, 141, 1120, 147, 586,
	1114, 1122, 585, 581, 1736, 580, 579, 547, 546, 2650,
	545, 2037, 544, 1085, 543, 1112, 1106, 117, 542, 1630,
	896, 186, 1100, 541, 1875, 1876, 540, 1893, 1894, 1895,
	1085, 1101, 539, 538, 117, 186, 910, 1112, 1295, 537,
	1288, 2277, 536, 1424, 1100, 535, 1556, 1553, 1111, 534,
	533, 186, 532, 531, 516, 515, 514, 513, 1892, 512,
	441, 186, 419, 412, 411, 169, 168, 611, 908, 167,
	913, 166, 165, 164, 163, 162, 161, 1100, 1890, 160,
	159, 158, 157, 1106, 156, 155, 154, 153, 478, 152,
	933, 933, 792, 929, 1100, 151, 150, 1220, 1101, 38,
	1570, 609, 1396, 1949, 1568, 1106, 1566, 1564, 1003, 2648,
	2593, 934, 41, 2575, 1240, 1115, 2561, 953, 903, 1073,
	1101, 1094, 2555, 186, 1558, 2493, 2474, 2312, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 1115, 477, 2406,
	2311, 973, 1881, 2394, 2307, 2306, 1875, 1876, 1887, 1888,
	1889, 2299, 1001, 1101, 2298, 1886, 1884, 1885, 1877, 1878,
	1879, 1880, 1882, 1883, 2297, 1006, 2293, 479, 1875, 1876,
	1101, 2292, 2291, 2290, 53, 2284, 481, 54, 2258, 1057,
	2158, 1896, 2153, 2152, 146, 1113, 2151, 2094, 1091, 1092,
	1098, 1097, 1093, 1116, 2011, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 1552, 2007, 1891, 1113, 56, 1961,
	988, 1957, 2308, 1927, 148, 1116, 985, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 1056, 1924, 1770, 1528,
	1220, 1912, 1903, 1874, 1871, 1870, 1868, 1855, 1854, 1839,
	1660, 1052, 1073, 1306, 1875, 1876, 765, 1072, 1144, 896,
	1135, 147, 1004, 1081, 1082, 1083, 1084, 1086, 1087, 140,
	2668, 2653, 1144, 2664, 1881, 2635, 141, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 1875, 1876, 901, 1893,
	1894, 1895, 1892, 609, 1077, 1078, 1881, 1735, 1218, 1058,
	186, 1059, 186, 2083, 57, 1217, 597, 1151, 1890, 2634,
	1273, 2110, 1391, 1804, 596, 2393, 2565, 2564, 1080, 1069,
	1070, 1803, 2563, 2530, 186, 186, 1074, 1077, 1078, 2522,
	2520, 118, 59, 2512, 60, 2510, 2486, 2485, 1891, 1522,
	1890, 2442, 1079, 2421, 2402, 2381, 2370, 2352, 146, 146,
	1529, 1080, 1790, 2304, 2235, 480, 1147, 2232, 93, 2231,
	2229, 2199, 2198, 1077, 1078, 1177, 1178, 2179, 1204, 1875,
	1876, 1181, 1881, 2167, 2079, 1079, 2051, 1997, 148, 148,
	1202, 1184, 1887, 1888, 1889, 1988, 1974, 1080, 1973, 1886,
	1884, 1885, 1877, 1878, 1879, 1880, 1882, 1883, 1959, 1928,
	1902, 1767, 1864, 1863, 1881, 1860, 1835, 1249, 1830, 1180,
	1183, 1079, 1085, 1647, 1892, 147, 147, 110, 1618, 1562,
	1265, 1197, 1196, 140, 140, 1187, 1173, 1172, 653, 1974,
	141, 141, 609, 1192, 1171, 1170, 1891, 1169, 1168, 1167,
	792, 186, 1214, 1896, 1166, 1085, 1165, 804, 1164, 1163,
	1190, 117, 117, 186, 1222, 1162, 1194, 1161, 1160, 1159,
	1158, 1157, 1156, 1155, 1148, 1136, 186, 1135, 1891, 984,
	976, 949, 186, 2504, 186, 2400, 186, 1258, 622, 2286,
	186, 1085, 2049, 1272, 1947, 2257, 1569, 1881, 620, 2174,
	1567, 1133, 1565, 1563, 2170, 1841, 1648, 1264, 1218, 1077,
	1078, 2023, 2404, 1774, 2407, 2403, 1875, 1876, 2397, 1240,
	1000, 2177, 1892, 1255, 1877, 1878, 1879, 1880, 1882, 1883,
	2039, 186, 186, 1080, 1185, 2218, 1704, 1377, 792, 1186,
	186, 1050, 902, 186, 2211, 2000, 1877, 1878, 1879, 1880,
	1882, 1883, 1055, 1278, 1892, 1100, 1773, 1079, 1993, 1926,
	1925, 1238, 1814, 1428, 804, 997, 1307, 1153, 2054, 186,
	1270, 1992, 1796, 1243, 186, 2426, 425, 1732, 1363, 186,
	186, 2111, 186, 1235, 186, 1542, 186, 1176, 186, 1044,
	2651, 1846, 2649, 2033, 1397, 1292, 2186, 2558, 1294, 186,
	929, 1236, 1297, 1758, 447, 186, 186, 420, 170, 1256,
	422, 173, 2619, 2534, 186, 2618, 1776, 2360, 1435, 1886,
	1884, 1885, 1877, 1878, 1879, 1880, 1882, 1883, 2467, 1045,
	747, 1101, 2060, 2465, 2464, 2463, 186, 1036, 2375, 1280,
	804, 764, 1283, 2220, 1887, 1888, 1889, 2213, 717, 2183,
	745, 1886, 1884, 1885, 1877, 1878, 1879, 1880, 1882, 1883,
	607, 1218, 1081, 1082, 1083, 1084, 1086, 1087, 1827, 2182,
	1464, 1859, 1666, 1378, 1858, 1398, 1857, 665, 743, 1856,
	1304, 2210, 741, 1365, 1825, 1305, 985, 1817, 1364, 1150,
	431, 1757, 110, 425, 174, 1368, 174, 1083, 1084, 1086,
	1087, 738, 1699, 1230, 998, 1394, 1231, 1694, 1382, 1689,
	1456, 1463, 1423, 1504, 1402, 1191, 606, 1412, 1230, 889,
	1406, 1231, 1407, 1622, 1408, 1437, 1409, 1405, 1410, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 1554, 2533, 1879,
	1880, 1882, 1883, 1621, 442, 1416, 1418, 999, 1465, 432,
	2662, 1264, 186, 1729, 186, 2050, 1768, 186, 175, 1436,
	175, 446, 1429, 1674, 1430, 1822, 1422, 583, 186, 1053,
	597, 608, 2224, 597, 597, 1823, 1454, 804, 1446, 1828,
	186, 1447, 1448, 1230, 186, 1232, 1231, 186, 495, 1555,
	2225, 186, 421, 897, 899, 186, 2004, 1875, 1876, 1666,
	1232, 804, 1539, 186, 609, 792, 1627, 1650, 1665, 609,
	1875, 1876, 1421, 186, 804, 1260, 1537, 426, 186, 1077,
	1078, 2447, 422, 1649, 1519, 445, 186, 720, 1530, 1527,
	446, 1688, 423, 1542, 186, 1519, 1667, 1601, 589, 2590,
	1677, 1556, 1553, 1080, 1701, 186, 2618, 186, 176, 186,
	176, 590, 186, 1009, 186, 590, 186, 186, 1639, 186,
	792, 792, 1584, 1401, 792, 1232, 2201, 1079, 186, 1678,
	1680, 2571, 1087, 1381, 1380, 974, 1390, 1387, 1692, 1883,
	605, 978, 1591, 1700, 1054, 1624, 1558, 1534, 1625, 1653,
	1284, 1824, 609, 1049, 445, 1634, 2059, 2542, 1826, 1030,
	2610, 1753, 1644, 1645, 1640, 2030, 1685, 1076, 620, 421,
	171, 2066, 171, 1683, 1222, 1881, 1999, 1526, 1696, 1558,
	1670, 1690, 2543, 1524, 434, 433, 1749, 2061, 1881, 2208,
	2104, 983, 2591, 1752, 426, 1205, 1985, 1085, 1031, 422,
	173, 2637, 173, 1806, 1807, 749, 1676, 2031, 748, 423,
	172, 1734, 172, 1734, 1035, 1746, 1760, 804, 933, 2515,
	933, 110, 1351, 1384, 1420, 186, 1245, 110, 739, 1990,
	2101, 1241, 1738, 2630, 1174, 2068, 2214, 444, 1747, 1891,
	1748, 186, 186, 186, 1750, 186, 1755, 1787, 953, 1756,
	1759, 2592, 1891, 2030, 1209, 1369, 739, 1769, 1723, 1552,
	740, 1100, 1125, 1126, 1127, 1128, 1129, 447, 1558, 1771,
	994, 1289, 2609, 1138, 186, 1212, 1228, 443, 1691, 739,
	1240, 1233, 2102, 1146, 2417, 2378, 2267, 1181, 2523, 1184,
	505, 1207, 1240, 1779, 1357, 1130, 1233, 1675, 1501, 1178,
	1177, 483, 1210, 1043, 2202, 1781, 444, 1777, 2448, 1862,
	484, 1005, 1793, 574, 2470, 1892, 1663, 1385, 1251, 487,
	1208, 484, 574, 1351, 1351, 2065, 1643, 1782, 1892, 584,
	2341, 617, 110, 2334, 1250, 1943, 447, 1101, 1659, 1780,
	617, 995, 492, 2524, 2332, 996, 443, 608, 488, 2336,
	494, 1010, 2064, 1819, 2273, 1017, 1247, 1791, 989, 1820,
	1558, 1233, 487, 1795, 1518, 2268, 1800, 1799, 1246, 2342,
	413, 2589, 2617, 487, 1248, 2615, 1802, 2386, 2608, 1726,
	489, 1064, 1064, 1211, 719, 492, 2628, 2067, 979, 971,
	1011, 488, 2335, 1008, 1060, 1065, 492, 575, 1200, 1200,
	662, 491, 488, 2302, 1400, 2003, 575, 1848, 2643, 1499,
	1502, 2638, 1886, 1884, 1885, 1877, 1878, 1879, 1880, 1882,
	1883, 994, 2458, 489, 2457, 2140, 1884, 1885, 1877, 1878,
	1879, 1880, 1882, 1883, 489, 1818, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 2629, 491, 1525, 1498, 1075, 2440, 1063,
	1063, 609, 186, 804, 2507, 491, 1942, 2359, 186, 186,
	2356, 2185, 186, 1931, 2358, 2631, 1845, 186, 1937, 1040,
	186, 982, 1970, 1966, 1727, 1515, 1065, 1065, 186, 1279,
	2337, 1290, 2338, 1936, 186, 186, 186, 1271, 1267, 1955,
	186, 1513, 995, 186, 2100, 2551, 996, 1391, 1388, 186,
	186, 186, 186, 186, 1442, 1415, 1064, 1372, 576, 906,
	186, 1951, 792, 2340, 2303, 186, 1950, 576, 2654, 490,
	804, 2642, 2343, 905, 994, 609, 2238, 179, 1960, 186,
	2141, 1909, 1910, 1911, 1944, 1967, 2142, 414, 2388, 186,
	1041, 186, 1935, 186, 792, 792, 1500, 186, 1939, 1940,
	1998, 186, 1945, 1946, 1376, 2441, 186, 615, 186, 574,
	1976, 1956, 490, 1932, 1971, 186, 1975, 2010, 1018, 2012,
	1812, 2355, 1509, 490, 1063, 2357, 493, 617, 186, 792,
	1510, 1443, 1511, 994, 1638, 1991, 1516, 1962, 1637, 577,
	606, 915, 440, 186, 2227, 995, 1042, 2379, 577, 996,
	2002, 2314, 926, 1374, 2339, 1971, 924, 1984, 503, 415,
	2438, 616, 435, 2162, 1986, 1561, 1375, 2015, 2016, 493,
	2035, 497, 2420, 578, 2301, 1995, 1907, 2223, 476, 34,
	493, 1906, 578, 186, 2078, 2341, 3, 620, 620, 2439,
	475, 33, 2005, 575, 1209, 474, 30, 1869, 2032, 2014,
	1829, 2013, 2046, 1772, 2026, 2017, 1706, 2040, 2048, 1698,
	473, 69, 1687, 1048, 609, 1212, 472, 68, 2041, 2042,
	1047, 2043, 2044, 977, 2342, 1316, 2056, 2057, 1060, 2045,
	1039, 1641, 1028, 186, 1026, 2081, 1797, 469, 22, 2062,
	1413, 2058, 1210, 894, 2055, 1024, 1386, 1022, 1512, 470,
	23, 1404, 1439, 1034, 1444, 1514, 1154, 895, 891, 2071,
	1451, 468, 28, 2585, 2096, 2097, 2098, 2069, 467, 20,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 2087, 1503, 576, 1505, 1506, 1507, 1508, 1456,
	2115, 2090, 2103, 2105, 2106, 186, 925, 2085, 1456, 2120,
	923, 186, 1531, 1211, 2112, 502, 1316, 1316, 34, 1138,
	186, 186, 1139, 2114, 2117, 2337, 775, 2338, 496, 2146,
	33, 1020, 2119, 465, 19, 30, 466, 18, 1571, 1572,
	1560, 2150, 1588, 1697, 1600, 1602, 1607, 1610, 1611, 1612,
	69, 1038, 2173, 1027, 1445, 1025, 68, 2147, 2340, 2197,
	457, 15, 2196, 436, 1014, 2178, 1023, 2343, 1021, 2180,
	186, 1033, 186, 614, 2145, 577, 2160, 22, 2216, 2163,
	186, 2195, 2222, 792, 2166, 2216, 2165, 110, 922, 23,
	1686, 458, 16, 1254, 2233, 2169, 464, 51, 186, 186,
	2230, 28, 456, 50, 2548, 437, 2330, 2181, 20, 578,
	2248, 737, 2188, 463, 12, 186, 462, 44, 2240, 2206,
	2204, 2184, 1205, 2209, 186, 1350, 804, 186, 186, 186,
	2019, 1730, 2215, 1724, 804, 1722, 438, 2239, 439, 2221,
	1300, 2205, 1298, 2207, 1296, 2228, 645, 2242, 1293, 2339,
	1291, 2243, 1203, 1592, 1315, 2275, 2269, 1351, 2234, 1252,
	2244, 2241, 1019, 1244, 2276, 1242, 1234, 2250, 2021, 2249,
	2255, 186, 2091, 2481, 2280, 455, 45, 2619, 2399, 1067,
	2398, 1209, 1810, 19, 761, 183, 18, 1395, 2254, 1935,
	417, 2483, 1666, 1682, 427, 1013, 461, 7, 1351, 2272,
	448, 1681, 1212, 2246, 762, 498, 183, 1996, 1666, 506,
	15, 187, 511, 460, 6, 459, 36, 1679, 1207, 921,
	530, 454, 35, 1987, 1798, 186, 1350, 1350, 186, 1210,
	1702, 1693, 1426, 1427, 742, 744, 2517, 482, 804, 186,
	186, 16, 2300, 186, 186, 186, 51, 1208, 1811, 1077,
	1078, 1351, 50, 1077, 1078, 1315, 1315, 1068, 2349, 1012,
	186, 2495, 2469, 12, 2315, 186, 44, 186, 2322, 186,
	186, 186, 1071, 1080, 186, 792, 1695, 2318, 1684, 2547,
	2324, 804, 763, 2197, 792, 2350, 2196, 753, 753, 2325,
	2329, 2317, 186, 186, 2321, 417, 2216, 1079, 2319, 504,
	792, 1079, 2384, 2216, 1353, 2195, 1737, 1725, 1721, 2354,
	1211, 2373, 2353, 1626, 2197, 2316, 1351, 2196, 417, 417,
	2197, 797, 417, 2196, 2374, 45, 1367, 183, 893, 635,
	1308, 2626, 2641, 1875, 1876, 2390, 2195, 1301, 1077, 1078,
	2432, 2382, 2195, 2380, 2320, 2383, 7, 2256, 2369, 2385,
	2366, 2159, 1351, 1351, 2389, 1784, 1783, 2371, 2391, 2410,
	2107, 1351, 1351, 6, 1784, 36, 2052, 1952, 1921, 1785,
	2396, 35, 1366, 416, 1623, 1620, 1619, 1815, 1816, 1550,
	1141, 2288, 2099, 1821, 1151, 793, 1149, 1046, 805, 2408,
	2409, 186, 2415, 186, 1351, 804, 186, 1037, 1032, 2422,
	1029, 1015, 1834, 981, 186, 1353, 1353, 1370, 582, 2446,
	804, 485, 1403, 1016, 1948, 1840, 1646, 2395, 2541, 2294,
	1861, 1847, 2500, 2416, 1851, 2436, 1559, 2431, 1152, 2429,
	2450, 2197, 48, 2452, 2196, 2193, 2434, 639, 2331, 2187,
	2451, 1865, 1716, 1715, 807, 1379, 661, 186, 1575, 1457,
	792, 736, 1264, 2195, 186, 663, 1313, 2449, 664, 1314,
	2216, 1182, 186, 186, 792, 792, 2197, 651, 186, 2196,
	1311, 950, 1741, 1383, 1523, 1138, 1540, 1844, 770, 1145,
	631, 643, 1607, 1607, 1607, 2479, 642, 186, 2195, 1538,
	2480, 2487, 186, 2460, 2484, 2472, 975, 630, 2491, 186,
	2488, 779, 783, 2482, 2478, 801, 1592, 1592, 1953, 1200,
	2029, 2392, 1441, 2511, 2468, 1938, 2497, 2492, 1801, 2494,
	1438, 2025, 2461, 2462, 186, 186, 2203, 2506, 1139, 2505,
	424, 186, 1872, 2503, 948, 1598, 1544, 2489, 2490, 792,
	1590, 1586, 2528, 1051, 186, 2513, 792, 792, 2526, 1576,
	1576, 1589, 1131, 2529, 2475, 1609, 1742, 2514, 1002, 1613,
	1614, 1616, 2036, 1766, 1195, 1351, 2532, 1449, 530, 2521,
	530, 186, 916, 186, 2531, 919, 186, 760, 804, 759,
	2652, 417, 1592, 1592, 1592, 1628, 2537, 2538, 1373, 1778,
	530, 530, 417, 941, 2566, 1124, 2554, 2568, 1123, 746,
	2509, 1352, 993, 992, 2567, 1969, 2636, 186, 2559, 2572,
	1316, 2027, 2516, 2200, 2557, 2197, 145, 1312, 2196, 2570,
	142, 2582, 2553, 144, 186, 186, 186, 530, 143, 2584,
	2583, 2001, 186, 72, 793, 2602, 2595, 2195, 32, 31,
	92, 530, 91, 90, 2569, 89, 186, 2604, 88, 2607,
	87, 1316, 620, 620, 2605, 2606, 86, 980, 85, 793,
	84, 83, 82, 2616, 793, 620, 2614, 530, 2620, 1875,
	1876, 81, 80, 2599, 2600, 2601, 79, 78, 2625, 77,
	2624, 76, 2070, 716, 75, 74, 526, 1451, 523, 71,
	2633, 2632, 2639, 2074, 70, 29, 2075, 2640, 25, 2645,
	2647, 96, 1352, 1352, 1316, 24, 67, 66, 2080, 27,
	17, 11, 21, 114, 113, 112, 2656, 2088, 1312, 1312,
	2645, 2657, 2663, 111, 14, 2092, 13, 2669, 1938, 417,
	2645, 2672, 2670, 2671, 109, 108, 107, 2678, 2676, 106,
	2647, 2680, 105, 2677, 2647, 10, 9, 95, 2116, 2265,
	42, 8, 2118, 40, 39, 94, 136, 135, 132, 134,
	131, 133, 103, 793, 783, 138, 137, 129, 127, 1316,
	128, 130, 126, 125, 139, 801, 102, 101, 100, 99,
	98, 5, 2, 1, 0, 2148, 2149, 1881, 0, 0,
	1351, 0, 0, 0, 2155, 2156, 2157, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1316, 1592, 1592, 0,
	0, 0, 0, 0, 1316, 1316, 0, 0, 0, 0,
	1350, 0, 2168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1351, 1316, 0, 1315,
	0, 1891, 2189, 0, 0, 0, 0, 794, 0, 0,
	806, 1350, 0, 0, 0, 0, 1592, 1592, 1592, 1592,
	1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
	1592, 1592, 1592, 1592, 1592, 0, 1592, 0, 0, 0,
	1315, 0, 0, 0, 0, 0, 511, 0, 753, 0,
	1831, 1832, 0, 0, 0, 0, 0, 1351, 0, 1200,
	1833, 0, 783, 0, 1350, 0, 0, 1836, 2251, 0,
	417, 417, 0, 0, 0, 0, 0, 1892, 0, 0,
	0, 0, 0, 0, 1852, 1853, 0, 0, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2279, 0, 0,
	0, 2282, 2283, 0, 0, 2285, 0, 0, 0, 0,
	0, 0, 2287, 0, 2289, 0, 1898, 1899, 1900, 1350,
	0, 0, 0, 0, 1901, 0, 0, 0, 0, 0,
	2296, 1609, 1609, 1609, 0, 0, 1914, 0, 0, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 1350, 1350, 0, 1316, 0,
	0, 0, 0, 2305, 1350, 1350, 1885, 1877, 1878, 1879,
	1880, 1882, 1883, 0, 0, 0, 0, 183, 0, 0,
	1353, 0, 0, 0, 1315, 1315, 0, 0, 0, 417,
	0, 0, 0, 1315, 1315, 0, 0, 1350, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 417, 0,
	417, 0, 417, 2351, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 0, 0,
	0, 793, 0, 770, 1225, 0, 794, 0, 805, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 183, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 530,
	0, 794, 0, 0, 0, 0, 794, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 2411, 2412, 1353, 0,
	530, 0, 0, 0, 0, 183, 530, 0, 530, 0,
	530, 0, 530, 0, 530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1414, 0, 2424, 0, 793,
	0, 530, 530, 2427, 1353, 1353, 0, 0, 0, 0,
	417, 2076, 2077, 1353, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	0, 0, 530, 0, 0, 0, 0, 0, 1350, 0,
	0, 0, 1263, 0, 0, 794, 1353, 2459, 0, 0,
	0, 0, 0, 1316, 0, 0, 0, 0, 0, 0,
	0, 783, 0, 1282, 0, 1282, 0, 1315, 0, 0,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 0,
	2143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1592, 805, 0, 0, 0, 0, 1352, 0, 0, 1316,
	0, 2154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 2508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1592, 0, 0, 0, 0, 0, 1352, 511, 0,
	753, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 417, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 1658, 0, 0, 0,
	417, 0, 0, 417, 0, 0, 2212, 1671, 0, 0,
	0, 417, 0, 1425, 478, 2219, 0, 0, 0, 417,
	1352, 0, 0, 0, 0, 38, 0, 0, 0, 417,
	0, 0, 0, 0, 1705, 0, 1312, 1353, 41, 1592,
	0, 0, 1712, 0, 0, 0, 0, 0, 0, 0,
	893, 2581, 2581, 0, 0, 0, 0, 0, 805, 0,
	0, 417, 0, 1745, 477, 530, 0, 2596, 530, 0,
	530, 0, 417, 417, 0, 1751, 0, 0, 0, 0,
	0, 0, 805, 1350, 1671, 1352, 793, 2581, 0, 0,
	0, 0, 0, 479, 0, 805, 0, 0, 0, 0,
	53, 1312, 481, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1352, 0, 0, 0, 0, 0, 0, 0,
	1352, 1352, 0, 0, 56, 2581, 0, 1312, 1312, 1350,
	0, 793, 793, 0, 0, 793, 1312, 1312, 0, 640,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2660, 1352, 0, 0, 0, 770, 1315, 0,
	0, 0, 0, 2660, 0, 0, 2660, 2660, 0, 1312,
	0, 1789, 0, 770, 0, 0, 1661, 0, 0, 0,
	0, 0, 0, 0, 783, 0, 0, 417, 417, 417,
	1350, 417, 783, 794, 64, 0, 0, 0, 0, 0,
	806, 0, 801, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 1315,
	417, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 0, 1743, 0, 0, 118, 59, 0,
	60, 0, 0, 0, 0, 801, 801, 0, 0, 0,
	598, 0, 1353, 0, 146, 0, 0, 610, 1411, 0,
	0, 480, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 794, 0, 0, 148, 0, 0, 0, 771, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2419, 0, 0, 806, 1353, 1761,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 147, 0, 2428, 1352, 0, 0, 0, 0, 140,
	0, 0, 0, 41, 0, 0, 141, 0, 0, 0,
	1312, 0, 0, 0, 0, 2443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 1762,
	2454, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	1792, 801, 1794, 0, 783, 0, 0, 0, 2466, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 1763, 0,
	0, 0, 0, 0, 0, 0, 0, 481, 417, 0,
	0, 0, 0, 1813, 417, 417, 0, 0, 417, 0,
	0, 0, 0, 1658, 0, 0, 1658, 0, 0, 0,
	0, 0, 0, 2496, 1958, 0, 0, 0, 0, 56,
	417, 1964, 1965, 0, 0, 0, 1671, 0, 0, 1972,
	0, 0, 0, 0, 0, 1977, 1978, 1980, 1982, 1983,
	0, 0, 0, 0, 0, 0, 417, 0, 0, 0,
	0, 1994, 0, 0, 805, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1277, 0, 1277, 0, 530,
	0, 0, 0, 417, 0, 0, 0, 2024, 0, 0,
	0, 0, 417, 2544, 2034, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 0, 57, 0, 0, 0, 0,
	806, 0, 0, 793, 1789, 0, 0, 0, 2560, 0,
	2562, 805, 0, 0, 0, 0, 0, 0, 0, 1789,
	0, 0, 118, 59, 806, 60, 0, 0, 794, 1352,
	0, 0, 0, 0, 0, 793, 793, 806, 0, 146,
	0, 0, 0, 0, 0, 1312, 480, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 417,
	0, 770, 37, 0, 0, 0, 0, 770, 770, 148,
	793, 770, 610, 38, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 794, 794, 1352, 41, 794, 0, 0,
	0, 0, 0, 1963, 0, 0, 0, 0, 0, 0,
	122, 1312, 0, 0, 0, 0, 147, 0, 0, 2109,
	43, 0, 46, 0, 140, 0, 0, 0, 0, 1989,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 0, 49, 2006, 0,
	0, 52, 117, 0, 123, 0, 1352, 0, 53, 0,
	104, 54, 0, 0, 0, 0, 2018, 0, 0, 0,
	0, 0, 1312, 0, 0, 1263, 0, 0, 0, 0,
	0, 0, 0, 55, 1263, 0, 0, 0, 0, 0,
	806, 0, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 0, 1658, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 1658, 0, 0,
	0, 0, 0, 1875, 1876, 0, 1893, 1894, 1895, 0,
	0, 2192, 0, 0, 0, 0, 0, 0, 0, 0,
	2082, 0, 598, 0, 0, 0, 0, 0, 0, 0,
	2217, 0, 2072, 0, 0, 0, 0, 2217, 0, 0,
	0, 0, 1134, 0, 1137, 0, 1671, 0, 1277, 0,
	0, 1142, 1213, 0, 0, 0, 2236, 1890, 57, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 478,
	0, 0, 0, 0, 417, 417, 0, 0, 0, 0,
	38, 0, 0, 0, 65, 118, 59, 0, 60, 0,
	61, 2262, 124, 41, 0, 0, 0, 62, 0, 0,
	2264, 0, 146, 2270, 417, 417, 0, 0, 0, 73,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 477,
	0, 1881, 121, 0, 793, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2295, 479, 0,
	0, 0, 97, 0, 0, 53, 0, 481, 54, 0,
	1896, 119, 0, 0, 770, 0, 0, 805, 0, 147,
	0, 0, 0, 0, 0, 805, 0, 140, 64, 0,
	0, 0, 0, 1221, 141, 1891, 0, 0, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 893, 117, 806, 0, 4, 0,
	0, 0, 0, 0, 0, 1658, 893, 0, 0, 2327,
	2328, 1671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2192, 893, 451, 0, 0,
	0, 2361, 0, 2362, 0, 417, 2364, 2365, 2217, 0,
	417, 0, 0, 0, 0, 2217, 0, 1743, 770, 478,
	0, 1892, 0, 0, 0, 794, 2192, 0, 893, 1712,
	38, 0, 2192, 806, 0, 57, 0, 0, 0, 805,
	0, 0, 0, 41, 0, 0, 0, 2271, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 794, 794, 0,
	0, 0, 118, 59, 0, 60, 0, 0, 0, 477,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 146,
	0, 0, 805, 0, 0, 793, 480, 0, 0, 93,
	0, 0, 794, 0, 0, 0, 0, 0, 479, 0,
	0, 793, 0, 0, 0, 53, 0, 481, 54, 148,
	0, 1887, 1888, 1889, 0, 0, 0, 0, 1886, 1884,
	1885, 1877, 1878, 1879, 1880, 1882, 1883, 1671, 0, 2435,
	0, 0, 2437, 0, 0, 0, 0, 0, 0, 56,
	417, 0, 0, 2192, 770, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 0, 1875,
	1876, 141, 1893, 1894, 1895, 0, 0, 0, 0, 0,
	0, 0, 2217, 0, 0, 0, 0, 0, 2192, 0,
	0, 0, 117, 417, 0, 0, 0, 0, 2363, 0,
	893, 0, 0, 2368, 0, 0, 805, 0, 2262, 2262,
	0, 0, 0, 64, 893, 0, 0, 0, 0, 478,
	0, 805, 0, 1890, 0, 0, 0, 0, 0, 0,
	38, 0, 0, 2502, 0, 57, 0, 0, 1658, 0,
	0, 0, 0, 41, 0, 1277, 598, 0, 0, 598,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 793, 118, 59, 0, 60, 0, 0, 0, 477,
	2518, 2519, 0, 0, 0, 793, 793, 417, 0, 146,
	0, 0, 0, 0, 0, 0, 480, 1881, 0, 93,
	2536, 0, 0, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 1521, 0, 0, 53, 0, 481, 54, 148,
	0, 0, 0, 0, 0, 610, 0, 2552, 0, 893,
	1137, 0, 417, 0, 0, 0, 1896, 0, 0, 0,
	0, 0, 0, 2444, 0, 0, 0, 2192, 0, 56,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	793, 1891, 0, 2502, 140, 0, 0, 793, 793, 0,
	0, 141, 0, 0, 0, 0, 794, 0, 0, 0,
	893, 893, 893, 0, 0, 0, 2477, 0, 417, 0,
	0, 0, 452, 0, 0, 0, 0, 771, 0, 805,
	0, 0, 2613, 0, 0, 1875, 1876, 0, 1893, 1894,
	1895, 0, 0, 1221, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 0, 0, 64, 806, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 1892, 64, 0,
	1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0,
	0, 0, 0, 1095, 0, 0, 0, 1110, 0, 1890,
	0, 0, 118, 59, 1080, 60, 0, 1121, 0, 0,
	2525, 64, 0, 64, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 0, 0, 0, 480, 0, 1079, 93,
	0, 0, 64, 0, 1099, 0, 0, 0, 64, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 2556, 0, 0, 0, 0,
	0, 0, 0, 1881, 0, 0, 0, 1887, 1888, 1889,
	0, 806, 0, 0, 1886, 1884, 1885, 1877, 1878, 1879,
	1880, 1882, 1883, 0, 1897, 0, 147, 0, 0, 1102,
	1103, 1104, 1105, 0, 140, 0, 0, 0, 1085, 0,
	0, 141, 1896, 0, 0, 0, 0, 0, 794, 0,
	0, 1743, 0, 0, 806, 0, 0, 794, 1114, 1122,
	0, 0, 117, 0, 0, 0, 0, 1891, 0, 0,
	0, 1875, 1876, 794, 1893, 1894, 1895, 1120, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1890, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1892, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1106, 0, 0, 0, 0, 806, 0,
	0, 0, 1521, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 0, 1881,
	0, 0, 1137, 0, 0, 1115, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 794, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1887, 1888, 1889, 0, 794, 794, 0,
	1886, 1884, 1885, 1877, 1878, 1879, 1880, 1882, 1883, 0,
	0, 0, 0, 1891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 1137, 0, 1091, 1092,
	1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 1917, 0, 0, 0, 0, 0, 0, 0,
	0, 771, 0, 0, 0, 0, 0, 771, 771, 0,
	0, 771, 794, 0, 0, 0, 0, 0, 0, 794,
	794, 0, 0, 0, 0, 0, 0, 0, 0, 1892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1887,
	1888, 1889, 0, 0, 0, 0, 1886, 1884, 1885, 1877,
	1878, 1879, 1880, 1882, 1883, 0, 1549, 0, 659, 648,
	649, 646, 647, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 1546, 0, 190, 0,
	0, 0, 0, 676, 641, 0, 0, 0, 191, 192,
	193, 353, 691, 355, 692, 194, 693, 694, 0, 195,
	359, 360, 196, 197, 644, 675, 695, 696, 363, 0,
	198, 687, 0, 667, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 721,
	209, 210, 211, 0, 668, 669, 671, 0, 670, 672,
	212, 213, 418, 214, 697, 215, 698, 699, 629, 216,
	0, 217, 0, 218, 1547, 0, 690, 220, 0, 221,
	0, 0, 0, 632, 222, 224, 223, 225, 677, 678,
	655, 722, 0, 0, 0, 0, 0, 226, 227, 700,
	701, 702, 0, 228, 0, 229, 0, 0, 723, 0,
	230, 688, 0, 375, 0, 0, 231, 232, 233, 234,
	684, 686, 725, 0, 378, 238, 0, 235, 0, 724,
	236, 703, 237, 704, 705, 706, 707, 708, 64, 666,
	0, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 0, 246, 245, 771, 689, 728, 247, 248, 729,
	0, 249, 250, 0, 0, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 656, 685, 261, 709, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 679,
	268, 269, 270, 271, 272, 273, 0, 274, 680, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 710, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	633, 299, 0, 303, 304, 305, 306, 307, 771, 309,
	398, 308, 310, 311, 673, 312, 300, 301, 313, 735,
	314, 711, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 712, 319, 320, 681, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 713,
	714, 0, 0, 332, 333, 682, 683, 654, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 674, 342,
	0, 408, 343, 344, 345, 409, 715, 1545, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 1548, 0, 0, 0, 0, 0,
	0, 634, 1543, 0, 0, 0, 0, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	803, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 808, 0,
	190, 809, 810, 811, 812, 352, 813, 814, 815, 816,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	817, 195, 359, 360, 196, 197, 818, 819, 361, 362,
	363, 820, 198, 364, 821, 795, 822, 199, 200, 201,
	0, 203, 204, 205, 202, 823, 206, 0, 207, 208,
	824, 721, 209, 210, 211, 825, 826, 828, 827, 829,
	830, 831, 212, 213, 418, 214, 365, 215, 366, 367,
	832, 216, 833, 217, 834, 218, 835, 836, 219, 220,
	837, 221, 838, 0, 839, 368, 222, 224, 223, 225,
	369, 370, 840, 722, 841, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 64, 228, 842, 229, 843, 844,
	723, 845, 230, 374, 846, 375, 847, 1521, 231, 232,
	233, 234, 376, 377, 725, 848, 378, 238, 849, 235,
	850, 724, 236, 379, 237, 380, 381, 382, 383, 384,
	851, 385, 852, 726, 239, 240, 241, 727, 386, 387,
	242, 243, 244, 853, 246, 245, 854, 388, 728, 247,
	248, 729, 855, 249, 250, 856, 857, 251, 0, 252,
	730, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 858, 859, 860, 390, 261, 391, 262, 263, 861,
	264, 862, 863, 265, 864, 865, 266, 392, 732, 267,
	733, 393, 268, 269, 270, 271, 272, 273, 866, 274,
	394, 275, 395, 276, 867, 277, 278, 279, 280, 281,
	396, 282, 283, 868, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 869, 296, 734,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	870, 309, 398, 308, 310, 311, 871, 312, 300, 301,
	313, 735, 314, 399, 400, 315, 872, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 873, 323,
	874, 324, 325, 326, 327, 328, 329, 330, 331, 875,
	403, 404, 405, 876, 877, 332, 333, 406, 407, 878,
	334, 335, 336, 337, 879, 880, 338, 339, 340, 341,
	881, 342, 882, 408, 343, 344, 345, 409, 410, 883,
	884, 346, 885, 886, 887, 888, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 803, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1651, 0, 0, 0, 0, 0, 188, 189, 808,
	1652, 190, 809, 810, 811, 812, 352, 813, 814, 815,
	816, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 817, 195, 359, 360, 196, 197, 818, 819, 361,
	362, 363, 820, 198, 364, 821, 795, 822, 199, 200,
	201, 0, 203, 204, 205, 202, 823, 206, 0, 207,
	208, 824, 721, 209, 210, 211, 825, 826, 828, 827,
	829, 830, 831, 212, 213, 418, 214, 365, 215, 366,
	367, 832, 216, 833, 217, 834, 218, 835, 836, 219,
	220, 837, 221, 838, 0, 839, 368, 222, 224, 223,
	225, 369, 370, 840, 722, 841, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 842, 229, 843,
	844, 723, 845, 230, 374, 846, 375, 847, 0, 231,
	232, 233, 234, 376, 377, 725, 848, 378, 238, 849,
	235, 850, 724, 236, 379, 237, 380, 381, 382, 383,
	384, 851, 385, 852, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 853, 246, 245, 854, 388, 728,
	247, 248, 729, 855, 249, 250, 856, 857, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 858, 859, 860, 390, 261, 391, 262, 263,
	861, 264, 862, 863, 265, 864, 865, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 866,
	274, 394, 275, 395, 276, 867, 277, 278, 279, 280,
	281, 396, 282, 283, 868, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 869, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 870, 309, 398, 308, 310, 311, 871, 312, 300,
	301, 313, 735, 314, 399, 400, 315, 872, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 873,
	323, 874, 324, 325, 326, 327, 328, 329, 330, 331,
	875, 403, 404, 405, 876, 877, 332, 333, 406, 407,
	878, 334, 335, 336, 337, 879, 880, 338, 339, 340,
	341, 881, 342, 882, 408, 343, 344, 345, 409, 410,
	883, 884, 346, 885, 886, 887, 888, 347, 348, 349,
	350, 351, 0, 803, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 808, 2323, 190, 809, 810, 811, 812, 352, 813,
	814, 815, 816, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 817, 195, 359, 360, 196, 197, 818,
	819, 361, 362, 363, 820, 198, 364, 821, 795, 822,
	199, 200, 201, 0, 203, 204, 205, 202, 823, 206,
	0, 207, 208, 824, 721, 209, 210, 211, 825, 826,
	828, 827, 829, 830, 831, 212, 213, 418, 214, 365,
	215, 366, 367, 832, 216, 833, 217, 834, 218, 835,
	836, 219, 220, 837, 221, 838, 0, 839, 368, 222,
	224, 223, 225, 369, 370, 840, 722, 841, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 842,
	229, 843, 844, 723, 845, 230, 374, 846, 375, 847,
	0, 231, 232, 233, 234, 376, 377, 725, 848, 378,
	238, 849, 235, 850, 724, 236, 379, 237, 380, 381,
	382, 383, 384, 851, 385, 852, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 853, 246, 245, 854,
	388, 728, 247, 248, 729, 855, 249, 250, 856, 857,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 858, 859, 860, 390, 261, 391,
	262, 263, 861, 264, 862, 863, 265, 864, 865, 266,
	392, 732, 267, 733, 393, 268, 269, 270, 271, 272,
	273, 866, 274, 394, 275, 395, 276, 867, 277, 278,
	279, 280, 281, 396, 282, 283, 868, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	869, 296, 734, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 870, 309, 398, 308, 310, 311, 871,
	312, 300, 301, 313, 735, 314, 399, 400, 315, 872,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 873, 323, 874, 324, 325, 326, 327, 328, 329,
	330, 331, 875, 403, 404, 405, 876, 877, 332, 333,
	406, 407, 878, 334, 335, 336, 337, 879, 880, 338,
	339, 340, 341, 881, 342, 882, 408, 343, 344, 345,
	409, 410, 883, 884, 346, 885, 886, 887, 888, 347,
	348, 349, 350, 351, 803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1259,
	188, 189, 808, 0, 190, 809, 810, 811, 812, 352,
	813, 814, 815, 816, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 817, 195, 359, 360, 196, 197,
	818, 819, 361, 362, 363, 820, 198, 364, 821, 795,
	822, 199, 200, 201, 0, 203, 204, 205, 202, 823,
	206, 0, 207, 208, 824, 721, 209, 210, 211, 825,
	826, 828, 827, 829, 830, 831, 212, 213, 418, 214,
	365, 215, 366, 367, 832, 216, 833, 217, 834, 218,
	835, 836, 219, 220, 837, 221, 838, 0, 839, 368,
	222, 224, 223, 225, 369, 370, 840, 722, 841, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	842, 229, 843, 844, 723, 845, 230, 374, 846, 375,
	847, 0, 231, 232, 233, 234, 376, 377, 725, 848,
	378, 238, 849, 235, 850, 724, 236, 379, 237, 380,
	381, 382, 383, 384, 851, 385, 852, 726, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 853, 246, 245,
	854, 388, 728, 247, 248, 729, 855, 249, 250, 856,
	857, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 858, 859, 860, 390, 261,
	391, 262, 263, 861, 264, 862, 863, 265, 864, 865,
	266, 392, 732, 267, 733, 393, 268, 269, 270, 271,
	272, 273, 866, 274, 394, 275, 395, 276, 867, 277,
	278, 279, 280, 281, 396, 282, 283, 868, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 869, 296, 734, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 870, 309, 398, 308, 310, 311,
	871, 312, 300, 301, 313, 735, 314, 399, 400, 315,
	872, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 873, 323, 874, 324, 325, 326, 327, 328,
	329, 330, 331, 875, 403, 404, 405, 876, 877, 332,
	333, 406, 407, 878, 334, 335, 336, 337, 879, 880,
	338, 339, 340, 341, 881, 342, 882, 408, 343, 344,
	345, 409, 410, 883, 884, 346, 885, 886, 887, 888,
	347, 348, 349, 350, 351, 611, 0, 659, 648, 649,
	646, 647, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 676, 641, 0, 0, 0, 191, 192, 193,
	353, 691, 355, 692, 194, 693, 694, 0, 195, 359,
	360, 196, 197, 644, 675, 695, 696, 363, 0, 198,
	687, 0, 667, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 211, 0, 668, 669, 671, 0, 670, 672, 212,
	213, 418, 214, 697, 215, 698, 699, 629, 216, 0,
	217, 0, 218, 0, 0, 690, 220, 0, 221, 0,
	0, 0, 632, 222, 224, 223, 225, 677, 678, 655,
	722, 0, 0, 0, 0, 0, 226, 227, 700, 701,
	702, 0, 228, 0, 229, 0, 0, 723, 0, 230,
	688, 0, 375, 0, 0, 231, 232, 233, 234, 684,
	686, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	703, 237, 704, 705, 706, 707, 708, 0, 666, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 689, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 730, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 626, 0,
	656, 685, 261, 709, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 679, 268,
	269, 270, 271, 272, 273, 0, 274, 680, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 710, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 633,
	299, 0, 303, 304, 305, 306, 307, 146, 309, 398,
	308, 310, 311, 673, 312, 300, 301, 313, 735, 314,
	711, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 712, 319, 320, 681, 0, 323, 148, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 713, 714,
	0, 0, 332, 333, 682, 683, 654, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 674, 342, 0,
	408, 343, 344, 345, 954, 715, 0, 0, 346, 0,
	0, 0, 140, 347, 348, 349, 350, 351, 627, 141,
	0, 0, 0, 0, 0, 0, 625, 0, 0, 0,
	0, 623, 624, 659, 648, 649, 646, 647, 638, 0,
	1140, 0, 0, 0, 0, 0, 637, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 676, 641,
	0, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 146, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 148, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	954, 715, 0, 0, 346, 0, 0, 0, 140, 347,
	348, 349, 350, 351, 627, 141, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 623, 624, 659,
	648, 649, 646, 647, 638, 0, 1140, 0, 0, 0,
	0, 0, 637, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 676, 641, 0, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 1603,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 1608, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 1604, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 1605, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 659, 648, 649, 646, 647, 638, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 188, 189, 0,
	0, 190, 634, 0, 0, 0, 676, 641, 637, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 2245, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 659, 648, 649, 646, 647, 638, 0,
	625, 0, 0, 0, 0, 623, 624, 1201, 0, 188,
	189, 0, 0, 190, 634, 0, 0, 0, 676, 641,
	637, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 1453, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 1452, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 0, 0,
	0, 619, 637, 659, 648, 649, 646, 647, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 676, 641,
	0, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 621, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 659, 648, 649, 646, 647,
	638, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	0, 188, 189, 0, 0, 190, 634, 0, 0, 0,
	676, 641, 637, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 629, 216, 0, 217, 0,
	218, 0, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 626, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 633, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 715, 2095, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 627, 659, 648, 649,
	646, 647, 638, 0, 625, 0, 0, 0, 0, 623,
	624, 0, 0, 188, 189, 0, 0, 190, 634, 0,
	0, 0, 676, 641, 637, 0, 0, 191, 192, 193,
	353, 691, 355, 692, 194, 693, 694, 0, 195, 359,
	360, 196, 197, 644, 675, 695, 696, 363, 0, 198,
	687, 0, 667, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 211, 0, 668, 669, 671, 0, 670, 672, 212,
	213, 418, 214, 697, 215, 698, 699, 629, 216, 0,
	217, 0, 218, 0, 0, 690, 220, 0, 221, 0,
	0, 0, 632, 222, 224, 223, 225, 677, 678, 655,
	722, 0, 0, 0, 0, 0, 226, 227, 700, 701,
	702, 0, 228, 0, 229, 0, 0, 723, 0, 230,
	688, 0, 375, 0, 0, 231, 232, 233, 234, 684,
	686, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	703, 237, 704, 705, 706, 707, 708, 0, 666, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 689, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 730, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 626, 0,
	656, 685, 261, 709, 262, 263, 0, 264, 621, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 679, 268,
	269, 270, 271, 272, 273, 0, 274, 680, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 710, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 633,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 673, 312, 300, 301, 313, 735, 314,
	711, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 712, 319, 320, 681, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 713, 714,
	0, 0, 332, 333, 682, 683, 654, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 674, 342, 0,
	408, 343, 344, 345, 409, 715, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 627, 659,
	648, 649, 646, 647, 638, 0, 625, 0, 0, 0,
	0, 623, 624, 0, 0, 188, 189, 0, 0, 190,
	634, 0, 0, 0, 676, 641, 637, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 659, 648, 649, 646, 647, 638, 0, 625, 0,
	0, 0, 0, 623, 624, 1201, 0, 188, 189, 0,
	0, 190, 634, 0, 0, 0, 676, 641, 637, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	1608, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 0, 0, 1654,
	637, 659, 648, 649, 646, 647, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 0, 0, 1617,
	637, 659, 648, 649, 646, 647, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 0, 0, 1615,
	637, 659, 648, 649, 646, 647, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 0, 0, 1599,
	637, 659, 648, 649, 646, 647, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 0, 0, 1587,
	637, 659, 648, 649, 646, 647, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 0, 0, 1585,
	637, 1577, 648, 649, 646, 647, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 1580, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	1581, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 1582, 1579, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	1583, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	1578, 351, 627, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 0, 0, 1574,
	637, 1577, 648, 649, 646, 647, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 1580, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	1581, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 1582, 1579, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	1583, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	1578, 351, 627, 659, 648, 649, 646, 647, 638, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 188,
	189, 0, 0, 190, 634, 0, 0, 0, 676, 641,
	637, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 659, 648, 649, 646, 647,
	638, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	0, 188, 189, 1440, 1144, 190, 634, 0, 0, 0,
	676, 641, 637, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 629, 216, 0, 217, 0,
	218, 0, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 626, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 633, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 715, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 627, 0, 0, 0,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 623,
	624, 0, 0, 0, 0, 0, 0, 0, 634, 0,
	0, 0, 0, 900, 637, 659, 648, 649, 646, 647,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	676, 641, 0, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 629, 216, 0, 217, 0,
	218, 0, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 626, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 633, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 715, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 627, 0, 0, 0,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 623,
	624, 0, 0, 0, 0, 0, 0, 0, 634, 0,
	0, 0, 0, 898, 637, 659, 648, 649, 646, 647,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	676, 641, 0, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 629, 216, 0, 217, 0,
	218, 0, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 626, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 633, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 715, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 627, 659, 648, 649,
	646, 647, 638, 0, 625, 0, 0, 0, 0, 623,
	624, 0, 0, 188, 189, 0, 0, 190, 634, 0,
	0, 0, 676, 641, 637, 0, 0, 191, 192, 193,
	353, 691, 355, 692, 194, 693, 694, 0, 195, 359,
	360, 196, 197, 644, 675, 695, 696, 363, 0, 198,
	687, 0, 667, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 211, 0, 668, 669, 671, 0, 670, 672, 212,
	213, 418, 214, 697, 215, 698, 699, 629, 216, 0,
	217, 0, 218, 0, 0, 690, 220, 0, 221, 0,
	0, 0, 632, 222, 224, 223, 225, 677, 678, 655,
	722, 0, 0, 0, 0, 0, 226, 227, 700, 701,
	702, 0, 228, 0, 229, 0, 0, 723, 0, 230,
	688, 0, 375, 0, 0, 231, 232, 233, 234, 684,
	686, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	703, 237, 704, 705, 706, 707, 708, 0, 666, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 689, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 2661, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 626, 0,
	656, 685, 261, 709, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 679, 268,
	269, 270, 271, 272, 273, 0, 274, 680, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 710, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 633,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 673, 312, 300, 301, 313, 735, 314,
	711, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 712, 319, 320, 681, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 713, 714,
	0, 0, 332, 333, 682, 683, 654, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 674, 342, 0,
	408, 343, 344, 345, 409, 715, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 627, 659,
	648, 649, 646, 647, 638, 0, 625, 0, 0, 0,
	0, 623, 624, 0, 0, 188, 189, 0, 0, 190,
	634, 0, 0, 0, 676, 641, 637, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 2580, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 2579, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 659, 648, 649, 646, 647, 638, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 188, 189, 0,
	0, 190, 634, 0, 0, 0, 676, 641, 637, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 659, 648, 649, 646, 647, 638, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 188,
	189, 0, 0, 190, 634, 0, 0, 0, 676, 641,
	637, 0, 0, 191, 192, 193, 2578, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 2580, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 2579, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 659, 648, 649, 646, 647,
	638, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	0, 188, 189, 0, 0, 190, 634, 0, 0, 0,
	676, 641, 637, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 0, 216, 0, 217, 0,
	218, 0, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 0, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 1597, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 715, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 659, 648, 649, 646,
	647, 638, 0, 0, 1595, 0, 0, 0, 0, 1593,
	1594, 0, 188, 189, 0, 0, 190, 0, 1596, 0,
	0, 676, 641, 0, 637, 0, 191, 192, 193, 0,
	691, 355, 692, 194, 693, 694, 0, 195, 359, 360,
	196, 197, 644, 675, 695, 696, 363, 0, 198, 687,
	0, 667, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	2580, 0, 668, 669, 671, 0, 670, 672, 212, 213,
	418, 214, 697, 215, 698, 699, 629, 216, 0, 217,
	0, 218, 0, 0, 690, 220, 0, 221, 0, 0,
	0, 632, 222, 224, 223, 225, 677, 678, 655, 722,
	0, 0, 0, 0, 0, 226, 227, 700, 701, 702,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 688,
	0, 375, 0, 0, 231, 232, 233, 234, 684, 686,
	0, 0, 378, 238, 0, 235, 0, 724, 236, 703,
	237, 704, 705, 706, 707, 708, 0, 666, 0, 0,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 689, 728, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 656,
	685, 261, 709, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 679, 268, 269,
	270, 271, 272, 273, 0, 274, 680, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 710, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 633, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 673, 312, 300, 301, 313, 0, 314, 711,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	712, 319, 320, 681, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 713, 714, 0,
	0, 332, 333, 682, 683, 654, 334, 335, 2579, 337,
	0, 0, 338, 339, 340, 341, 674, 342, 0, 408,
	343, 344, 345, 409, 715, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	623, 624, 0, 188, 189, 0, 0, 190, 0, 634,
	0, 0, 676, 0, 0, 637, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 675, 361, 362, 363, 0, 198,
	687, 0, 667, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 211, 0, 668, 669, 671, 0, 670, 672, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 677, 678, 0,
	722, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 723, 0, 230,
	688, 0, 375, 0, 0, 231, 232, 233, 234, 684,
	686, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 689, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 730, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 0, 0,
	0, 685, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 679, 268,
	269, 270, 271, 272, 273, 0, 274, 680, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 673, 312, 300, 301, 313, 735, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 681, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 682, 683, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 674, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 951,
	0, 791, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	2194, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 795, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 722, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 146, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 735, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 148, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 954, 410,
	0, 0, 346, 611, 0, 185, 140, 347, 348, 349,
	350, 351, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 117, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 774, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 146, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 148, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 954, 410, 0, 0, 346, 0, 0, 185,
	140, 347, 348, 349, 350, 351, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 768, 0, 1223, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 774, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 146,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 148,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 954, 410, 0, 0,
	346, 611, 0, 185, 140, 347, 348, 349, 350, 351,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	768, 0, 1223, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 146, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 148, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	954, 410, 0, 0, 346, 1934, 0, 185, 140, 347,
	348, 349, 350, 351, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 117, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 774,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 767,
	0, 185, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 768, 0,
	773, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 774, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 185, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 768, 0, 773, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 774, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 0, 346, 0, 0, 185,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 768, 0, 773, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 185, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 1261, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 185, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 1744, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 185, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 2110, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 659, 648, 649, 646, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 1226, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 0,
	0, 695, 696, 363, 0, 198, 364, 0, 795, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 697,
	215, 698, 699, 0, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 0, 0, 656, 390, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	406, 407, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 1007, 0, 791, 790, 0, 0,
	0, 788, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 795, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 722,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 735, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 946, 0, 791,
	790, 0, 0, 0, 788, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 795, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 722, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 945, 377, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	735, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	912, 0, 791, 790, 0, 0, 0, 788, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 795, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 721, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 722, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 723, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 911, 377, 725, 0, 378, 238,
	0, 235, 0, 724, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 726, 239, 240, 241, 727,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	728, 247, 248, 729, 0, 249, 250, 0, 0, 251,
	0, 252, 730, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 735, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 784, 0, 791, 790, 0, 0, 0,
	788, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	795, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 722, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 786, 377, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 735, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 501, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 181, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 180, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 178, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 184, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 181, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 180,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 791, 790,
	346, 0, 0, 788, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 184, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 795, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 721,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 722, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 723, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 725, 0, 378, 238, 0, 235, 0, 724,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 728, 247, 248, 729,
	0, 249, 250, 0, 0, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 735,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 181, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 180, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 791, 790, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 184, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 795, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 722,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 735, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 791, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 184, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 795,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 721, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 722, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 723, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 725, 0,
	378, 238, 0, 235, 0, 724, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 726, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 728, 247, 248, 729, 0, 249, 250, 0,
	0, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 735, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 1674, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 1672, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 1720, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 1677, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 1718, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 1676, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 1719, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 1674, 198, 364, 0, 0, 1669, 199,
	200, 201, 0, 203, 204, 205, 202, 1672, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	1677, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 1668, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 1676, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 1675, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 928, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 774, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 780, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 782, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 774, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 776, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	778, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	774, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 430, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 429, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 428, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 1657, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 185, 2263,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 2263, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	2260, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 185, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 774, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 1419, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 1417, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 1399, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 527,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 986, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 529, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 524, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 1276, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 1275, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 527, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 986, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	529, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 524, 404, 405, 0, 0,
	332, 987, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 527, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 518,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 529, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 970, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 524, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 943, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 942, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 939,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 938, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 936, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 935, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 932, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 931, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 920, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 918, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 917, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 914, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 907, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 909, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	798, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 800, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 796, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 527, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 518, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	517, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 529, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 519, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	520, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 524, 404, 405, 0,
	0, 332, 522, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 509, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 510, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 507, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	499, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 449, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 1981, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 1979, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	185, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 1968, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 510, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 185, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 1286, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 0, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 751, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 185, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	0, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 0, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 0,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	1095, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 1077,
	1078, 1099, 1107, 1108, 1109, 1117, 1118, 1119, 1096, 0,
	0, 0, 1095, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 1099, 0, 0, 1102, 1103, 1104, 1105,
	1096, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 0, 0, 1102, 1103,
	1104, 1105, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 1114, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 1111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 1077, 1078, 0, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 1115, 0, 0, 1095, 0, 0,
	1094, 1110, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 1121, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 1079, 0, 0, 0, 0, 0, 1099, 1916,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 1091, 1092, 1098,
	1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 1915, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	1095, 0, 1114, 1122, 1110, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 1112,
	0, 1099, 0, 0, 0, 0, 1100, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 0, 1085, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 1114, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 1120, 1094, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095,
	0, 0, 1112, 1110, 0, 0, 0, 0, 0, 1100,
	1080, 0, 0, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1111, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1096, 0, 1113,
	0, 0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0,
	1106, 0, 0, 0, 0, 0, 1867, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	0, 0, 1115, 0, 1085, 0, 0, 0, 1094, 1077,
	1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0,
	0, 0, 1095, 0, 1114, 1122, 1110, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 1112, 0, 1099, 0, 0, 0, 0, 1100, 0,
	1096, 0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 0, 0, 1111, 2549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 0, 0, 0, 0, 0, 1085, 0, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 1114, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 1120, 1094, 1077, 1078,
	0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0,
	0, 1095, 0, 0, 1112, 1110, 0, 0, 0, 0,
	0, 1100, 1080, 0, 0, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1111, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1096,
	0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 0, 1106, 0, 2499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 1103, 1104,
	1105, 0, 0, 0, 1115, 0, 1085, 0, 0, 0,
	1094, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 0, 0, 1095, 0, 1114, 1122, 1110, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 1112, 0, 1099, 0, 0, 0, 0,
	1100, 0, 1096, 0, 1113, 0, 0, 1091, 1092, 1098,
	1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 0, 0, 0, 1111, 2453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 1103, 1104, 1105, 0, 0, 0, 0, 0, 1085,
	0, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 1114,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 1120, 1094,
	1077, 1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0,
	0, 0, 0, 1095, 0, 0, 1112, 1110, 0, 0,
	0, 0, 0, 1100, 1080, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 1111,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1096, 0, 1113, 0, 0, 1091, 1092, 1098, 1097,
	1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 1106, 0, 2423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1103, 1104, 1105, 0, 0, 0, 1115, 0, 1085, 0,
	0, 0, 1094, 1077, 1078, 0, 1107, 1108, 1109, 1117,
	1118, 1119, 0, 0, 0, 0, 1095, 0, 1114, 1122,
	1110, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	1121, 0, 0, 0, 0, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 1112, 0, 1099, 0, 0,
	0, 0, 1100, 0, 1096, 0, 1113, 0, 0, 1091,
	1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 0, 0, 0, 1111, 2418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1103, 1104, 1105, 0, 0, 0, 0,
	0, 1085, 0, 1106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 1114, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 0, 0, 0, 0,
	1120, 1094, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 0, 0, 1095, 0, 0, 1112, 1110,
	0, 0, 0, 0, 0, 1100, 1080, 0, 0, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 1111, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1096, 0, 1113, 0, 0, 1091, 1092,
	1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 0, 0, 1106, 0, 2414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 1103, 1104, 1105, 0, 0, 0, 1115, 0,
	1085, 0, 0, 0, 1094, 1077, 1078, 0, 1107, 1108,
	1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095, 0,
	1114, 1122, 1110, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 1112, 0, 1099,
	0, 0, 0, 0, 1100, 0, 1096, 0, 1113, 0,
	0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0,
	1111, 2344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1103, 1104, 1105, 0, 0,
	0, 0, 0, 1085, 0, 1106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 1114, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 1120, 1094, 1077, 1078, 0, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 0, 1095, 0, 0,
	1112, 1110, 0, 0, 0, 0, 0, 1100, 1080, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1111, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1096, 0, 1113, 0, 0,
	1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 1106, 0,
	2310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	1115, 0, 1085, 0, 0, 0, 1094, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	1095, 0, 1114, 1122, 1110, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 1112,
	0, 1099, 0, 0, 0, 0, 1100, 0, 1096, 0,
	1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1116, 0,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0,
	0, 0, 1111, 2309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 0, 1085, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 1114, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 1120, 1094, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095,
	0, 0, 1112, 1110, 0, 0, 0, 0, 0, 1100,
	1080, 0, 0, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1111, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1096, 0, 1113,
	0, 0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0,
	1106, 0, 2274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	0, 0, 1115, 0, 1085, 0, 0, 0, 1094, 1077,
	1078, 0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0,
	0, 0, 1095, 0, 1114, 1122, 1110, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 1112, 0, 1099, 0, 0, 0, 0, 1100, 0,
	1096, 0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 0, 0, 1111, 2113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 1103,
	1104, 1105, 0, 0, 0, 0, 0, 1085, 0, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 1114, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 1120, 1094, 1077, 1078,
	0, 1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0,
	0, 1095, 0, 0, 1112, 1110, 0, 0, 0, 0,
	0, 1100, 1080, 0, 0, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1111, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1096,
	0, 1113, 0, 0, 1091, 1092, 1098, 1097, 1093, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 0, 1106, 0, 2089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 1103, 1104,
	1105, 0, 0, 0, 1115, 0, 1085, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 1113, 0, 0, 1091, 1092, 1098,
	1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083,
	1084, 1086, 1087, 0, 0, 0, 1111, 1535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1077, 1078, 0,
	1107, 1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0,
	1095, 0, 0, 1115, 1110, 0, 0, 0, 0, 1094,
	0, 1080, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 1091, 1092, 1098, 1097,
	1093, 1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084,
	1086, 1087, 0, 0, 1837, 0, 1102, 1103, 1104, 1105,
	0, 0, 0, 0, 0, 1085, 2612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 1114, 1122, 0, 0, 1095,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1121, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 1079, 0, 0, 0, 0, 1100,
	1099, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	1106, 0, 0, 0, 1085, 0, 1907, 0, 0, 1906,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 1122, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 1077, 1078, 0, 1107,
	1108, 1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095,
	0, 0, 0, 1110, 1111, 0, 0, 0, 1810, 0,
	1080, 0, 1113, 1121, 0, 1091, 1092, 1098, 1097, 1093,
	1116, 0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086,
	1087, 0, 0, 0, 1079, 0, 0, 0, 0, 1106,
	1099, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 1811, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 1103, 1104, 1105, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 1633,
	0, 0, 0, 0, 0, 1077, 1078, 0, 1107, 1108,
	1109, 1117, 1118, 1119, 1114, 1122, 0, 0, 1095, 0,
	0, 0, 1110, 0, 0, 0, 1632, 0, 0, 1080,
	0, 1113, 1121, 1120, 1091, 1092, 1098, 1097, 1093, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 1112, 0, 1079, 0, 0, 0, 0, 1100, 1099,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 1103, 1104, 1105, 0, 1106,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 1122, 0, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 1077, 1078, 0, 1107, 1108,
	1109, 1117, 1118, 1119, 0, 0, 0, 0, 1095, 0,
	0, 0, 1110, 1111, 0, 0, 0, 0, 0, 1080,
	0, 1113, 1121, 0, 1091, 1092, 1098, 1097, 1093, 1116,
	0, 1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087,
	0, 0, 0, 1079, 0, 0, 0, 0, 1106, 1099,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 0, 0, 0, 1077, 1078, 1094, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 0, 1095, 0, 0,
	0, 1110, 0, 0, 1102, 1103, 1104, 1105, 1080, 0,
	0, 1121, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1114, 1122, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	1113, 0, 1120, 1091, 1092, 1098, 1097, 1093, 1116, 0,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0,
	1112, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 1103, 1104, 1105, 0, 0, 0,
	0, 0, 1085, 1111, 608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	1115, 0, 0, 0, 1077, 1078, 1094, 1107, 1108, 1109,
	1117, 1118, 1119, 0, 0, 0, 0, 1095, 0, 0,
	0, 1110, 1111, 0, 0, 0, 0, 0, 1080, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 1106, 1099, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	1113, 0, 1101, 1091, 1092, 1098, 1097, 1093, 1116, 0,
	1090, 1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 1115,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 1103, 1104, 1105, 2093, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 1913, 0, 0,
	0, 0, 0, 1077, 1078, 0, 1107, 1108, 1109, 1117,
	1118, 1119, 1114, 1122, 0, 0, 1095, 0, 0, 0,
	1110, 0, 0, 0, 1908, 0, 0, 1080, 0, 1113,
	1121, 1120, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 1112,
	0, 1079, 0, 0, 0, 0, 1100, 1099, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1103, 1104, 1105, 0, 1106, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 1122, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 1077, 1078, 0, 1107, 1108, 1109, 1117,
	1118, 1119, 0, 0, 0, 0, 1095, 0, 0, 0,
	1110, 1111, 0, 0, 0, 0, 0, 1080, 0, 1113,
	1121, 0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090,
	1088, 1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0,
	0, 1079, 0, 0, 0, 0, 1106, 1099, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1103, 1104, 1105, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118,
	1119, 1114, 1122, 0, 0, 1095, 0, 0, 0, 1110,
	0, 0, 0, 1866, 0, 0, 1080, 0, 1113, 1121,
	1120, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 1112, 0,
	1079, 0, 0, 0, 0, 1100, 1099, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 1103, 1104, 1105, 0, 1106, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 1122, 0, 0, 0, 0, 0, 0, 1115, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 1077, 1078, 0, 1107, 1108, 1109, 1117, 1118,
	1119, 0, 0, 0, 0, 1095, 0, 0, 0, 1110,
	1111, 0, 0, 0, 0, 0, 1080, 0, 1113, 1121,
	0, 1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088,
	1089, 1081, 1082, 1083, 1084, 1086, 1087, 0, 0, 0,
	1079, 0, 0, 0, 0, 1106, 1099, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 1077, 1078, 1094, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 0, 0, 1095, 0, 0, 0, 1110, 0,
	0, 1102, 1103, 1104, 1105, 1080, 0, 0, 1121, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1114, 1122, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 1113, 0, 1120,
	1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 0, 1112, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 1103, 1104, 1105, 0, 0, 0, 0, 0, 1085,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 1115, 0, 0,
	0, 1077, 1078, 1094, 1107, 1108, 1109, 1117, 1118, 1119,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 1106, 1099, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 1113, 0, 1101,
	1091, 1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089,
	1081, 1082, 1083, 1084, 1086, 1087, 1115, 0, 0, 0,
	1077, 1078, 1094, 1107, 1108, 1109, 1117, 1118, 1119, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	1102, 1103, 1104, 1105, 1080, 0, 0, 1121, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 1114,
	1122, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 1113, 0, 1120, 1091,
	1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 0, 1112, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	1103, 1104, 1105, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 1122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1106, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 1101, 1091,
	1092, 1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081,
	1082, 1083, 1084, 1086, 1087, 1115, 0, 0, 0, 0,
	0, 1094, 1339, 1328, 1358, 1317, 1349, 1348, 0, 0,
	1319, 1318, 0, 0, 0, 0, 1360, 1359, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 0, 1346, 1345, 0, 0,
	0, 0, 0, 0, 0, 1113, 1344, 0, 1091, 1092,
	1098, 1097, 1093, 1116, 0, 1090, 1088, 1089, 1081, 1082,
	1083, 1084, 1086, 1087, 0, 0, 0, 0, 0, 1343,
	1341, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 1332, 1330, 1333, 1334, 1335, 1336, 1337, 0, 1357,
	0, 0, 0, 0, 0, 0, 1321, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 1328, 1358, 1317, 1349,
	1348, 0, 0, 1319, 1318, 0, 0, 0, 1340, 1360,
	1359, 0, 1460, 1458, 1459, 1462, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 548, 0, 574, 0, 0, 0, 1354, 0, 1346,
	1345, 1338, 1325, 0, 0, 0, 0, 0, 0, 1344,
	0, 553, 1362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 551, 1322, 0, 0, 0, 1355,
	1356, 0, 1343, 1341, 1342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 0, 0, 0, 0,
	554, 1326, 0, 0, 0, 0, 1361, 1327, 560, 561,
	0, 0, 0, 570, 1332, 1330, 1333, 1334, 1335, 1336,
	1337, 0, 1357, 0, 0, 0, 0, 575, 555, 1321,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 0, 0,
	0, 1329, 0, 0, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 0, 0, 0, 0, 0, 0, 0, 564,
	0, 0, 0, 0, 559, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 576, 0,
	0, 0, 0, 0, 1338, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 1355, 1356, 0, 0, 0, 0, 0, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 0, 0, 1361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 550, 567, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 572, 0,
	0, 0, 0, 578, 0, 0, 0, 0, 565, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 571,
}
var sqlPact = [...]int{

	3878, -1000, 6, -1000, -1000, -1000, 176, -1000, -1000, -1000,
	-1000, 175, 169, 167, -1000, 166, 165, 164, 162, 161,
	160, 159, 156, 155, 154, 153, -1000, 152, -1000, -1000,
	-1000, -1000, 151, 149, 146, -1000, 145, 1046, 23175, 144,
	143, 1548, -1000, 36129, 142, -1000, 1045, 26916, 1033, 1770,
	-1000, 140, 1182, 35790, 4285, 1479, 1226, 1799, 35448, 22833,
	1786, 1468, 35106, -1000, -1000, 34764, 139, 137, 136, 135,
	134, -1000, -1000, 34422, 133, 132, 130, 129, 125, 122,
	119, 113, 112, 106, 103, 98, 94, 92, -1000, 90,
	88, 87, -1000, 43849, 86, 85, 83, 1205, 82, 79,
	75, 72, -1000, -1000, 1007, 71, 70, 63, 57, 56,
	117, 50, 48, 47, 39, -1000, 992, 525, 1735, 8949,
	1139, 1120, 1116, 1088, 1068, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	38163, 36129, 36, -62, 34, -1000, 2122, 704, 19007, 3878,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26574, 26232, 22491, 34080, 33738, 6780, 842, -1000, 3,
	24531, 36129, -1000, 101, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14481, 14101, 605, 101, -1000, -1000,
	-1000, 33396, 22138, 33054, 1619, 32712, -1000, -1000, 32370, -1000,
	-1000, 2026, 1784, 1780, 25890, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 32031, 31689, 31347, 31005, 21785, 544, -1000,
	-1000, -1000, 17287, -1000, -1000, -1000, -1000, 33, -1000, 28,
	27, -1000, 26, 25, 20, 19, 18, 17, -1000, 15,
	14, -1000, 13, 12, -1000, 10, 9, 928, 1048, 1113,
	30663, 1011, 1354, -1000, -1000, 4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36129, -1000, 15537, -1000, 543, -1000,
	1720, -1000, 15537, -1000, 1353, -1000, -1000, -1000, -1000, -1000,
	36129, -1000, -1000, -1000, -1000, -1000, -1000, 2341, 1369, 542,
	30321, -1000, 1536, -1000, 651, 827, -1000, -1000, -1000, 9653,
	189, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1489, 21432, 1291, 2143, 2002, 2339, 1533, 1969, 1875, 1873,
	1862, 1860, 2338, 1099, 2336, 1881, 1075, 2335, 1858, 1481,
	725, 2325, 1717, 1710, -1000, -1000, -1000, -1000, 979, -1000,
	-1000, -1000, 28272, -1000, -1000, -1000, -1000, -1000, -1000, 905,
	970, -1000, -1000, -1000, -1000, -1000, 992, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1444, 2097, 2097, 2097, 2167, 329,
	324, -1000, 117, -1000, 1498, -1000, 1345, -1000, -1000, -1000,
	42952, -1000, -1000, 15537, 15537, 15537, 15537, 15537, 1251, -1000,
	566, -1000, 540, 538, 7499, -1000, -1000, 2313, -1000, -1000,
	-1000, 333, -1000, -1000, 15537, 101, -1000, -1000, -1000, -1000,
	537, 2321, -1000, 752, -1000, -1000, -1000, 657, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1756, 536, 535,
	534, -1000, 533, -1000, -1000, 532, 531, 530, 528, 522,
	521, 519, 517, 512, 511, 510, 508, 507, 500, 499,
	1178, -1000, 682, -1000, -1000, 682, 682, -1000, 482, 482,
	483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 482,
	-1000, -1000, -1000, 623, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 498, 1282, -1000, -1000,
	1282, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 838, 37485,
	0, 36129, -1000, 495, 0, -1000, -1000, 494, -1000, 10005,
	10005, -1000, -1000, -1000, 15537, -1000, 1987, -1000, 4095, -214,
	378, 334, -1000, 17975, 20728, -1000, -1000, 1202, 1997, 731,
	-1000, 1157, 1996, 578, -1000, 664, 1994, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1294, -1000, 1244,
	1990, -130, 1921, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23514,
	24531, 3, 2, -1000, -1000, -1000, 6429, 42952, -1000, 42952,
	-1000, 959, 19695, 101, -1000, -1000, -1000, -1000, 493, 1463,
	661, 1462, -1000, 383, -1000, 29979, 661, 1454, -1000, -1000,
	-1000, 28272, -1000, 36129, -1000, 36129, -1000, 1049, -1000, 37824,
	118, 1981, -1000, -1000, 118, 1979, -1000, 116, 1975, -1000,
	-1000, 1402, 1973, -1000, -73, 1971, -1000, -1000, -1000, 15537,
	-13, -1000, -1000, -1000, 704, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	29637, 23853, 1425, 629, 42952, 2239, 43767, 23514, 42952, 23853,
	-1000, -1000, 36129, -1000, 15537, -1000, 2235, 1433, -11, -1000,
	-1000, -1000, -1000, -1000, 1503, 1592, 761, 1309, 9653, 9653,
	2049, -1000, 183, 6780, -1000, -1000, -1000, -1000, 29295, -1000,
	-1000, -1000, 1301, 36129, -1000, -1000, 1751, -1000, 23853, 36129,
	-1000, 36129, -1000, 36129, -1000, 36129, -1000, 36129, -1000, -1000,
	-1000, -1000, -1000, 3300, -1000, 1740, -1000, -1000, 36129, -1000,
	1501, -1000, -1000, -1000, 28956, 28614, -1000, 1100, 902, -1000,
	-1000, 121, -1000, 36129, 2107, 649, -1000, 1444, 1443, 1728,
	727, 1362, 1568, 13721, 1560, 15537, 117, -1000, -1000, 117,
	117, 8569, -1000, -1000, -1000, 36129, -1000, 43574, 43767, 6780,
	874, 15537, 15537, 15537, 15537, 15537, 15537, 15537, 15537, 15537,
	15537, 15537, 15537, 15537, 15537, 15537, 15537, 15537, 15537, 15537,
	15537, 15537, 15537, 15537, 15537, 15537, 15537, 15537, 15537, 15537,
	15537, 15537, 15537, 1441, 15537, 836, 15537, 15537, 15537, 15537,
	1555, 1242, 412, 1335, -1000, 2268, 2268, 2268, 43231, 43231,
	423, 566, -1000, 15537, -1000, 100, 15537, 324, 40979, 1,
	7133, -1000, -1000, -1000, 13369, 679, 42952, 101, 5224, -1000,
	2312, 1086, 1857, 1657, 492, 565, 564, 562, 558, 15537,
	15537, 13017, 12637, 12257, 16241, 11877, 15537, 7865, 15537, 15537,
	15537, 15537, 11497, 11117, -1000, 491, -1000, -1000, -1000, -1000,
	2309, -1000, -1000, 2308, -1000, 869, 849, 2307, -1000, -11,
	-1000, 37485, -1000, 36129, 0, 2222, 36129, 15537, 97, -1000,
	41845, -1000, 97, -19, 42952, 1597, 1593, 19351, 1690, 1284,
	1284, 1284, -1000, 486, 570, 334, 5716, 10737, -1000, 27255,
	1298, 201, 322, 17631, 1987, -1000, 36129, -35, 1179, -1000,
	25548, 2088, 2072, 2064, 28272, 2184, 100, 1918, 1709, -1000,
	6780, 832, 28272, 1229, 23514, 2104, 830, 2182, 100, 1871,
	1706, 825, 36129, 6780, 2103, 619, -1000, 36129, -1000, -1000,
	-1000, 1703, -20, -1000, -1000, 25209, 2217, 1966, -1000, 1209,
	-1000, 1964, 2216, 36129, 1344, 1449, -1000, -1000, 886, 1962,
	670, 370, 2215, 370, 20040, -1000, 36129, -1000, 36129, -1000,
	-1000, 36129, -1000, 36129, -1000, 36129, 36129, -1000, 36129, 23514,
	23514, -25, 4475, 24870, 814, -1000, 707, 25209, 3605, -42,
	-1000, 821, -1000, -1000, -1000, -1000, 311, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 483, 1178, 482, 482, 482, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 623, -1000, -1000, 682, 682,
	682, -1000, -1000, -18, 1700, 636, -44, 736, -11, -1000,
	1282, -1000, 1230, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2319, -1000, 2288, -1000,
	-1000, 2302, -14, -1000, -14, -1000, 6780, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36129, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 524, -1000, -1000, -1000, -1000, -1000, -1000,
	36129, 36129, 36129, -1000, 28272, 663, 1736, -1000, 2098, 1443,
	1728, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42952,
	-1000, 394, -1000, -1000, 42952, 1117, 1606, -1000, 1606, -16,
	-1000, 41716, 1576, 36129, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 648, 767, 767, 939, 939,
	939, 939, 2179, 1249, 345, 803, 312, 312, 312, 312,
	312, 312, 312, 312, 362, 734, 734, 362, 362, 362,
	362, 362, 312, 312, 312, 43231, 43041, 223, 15537, 15537,
	810, 1231, 412, 223, 15537, 223, 223, 223, 223, -1000,
	1008, -1000, -1000, -1000, -1000, 1697, 481, 16241, 16241, -1000,
	-1000, -1000, 7499, 15537, -1000, -1000, -1000, -1000, 479, 15537,
	-1000, 41138, -222, 321, -90, -1000, 15537, 569, -132, -1000,
	927, -1000, 15537, -1000, -1, 15537, 15537, 15537, 320, -1000,
	319, -1000, 802, -1000, 799, 797, 794, -1000, 478, 1266,
	476, 475, 15537, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42762, 39164, 318, -1000, 1694, -90, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 317, -1000, 316, -1000, 42633, -90,
	315, 4665, -1000, 16241, 16241, 16241, 7499, 473, 314, -1000,
	41526, -1000, 42443, 10357, 10357, 10357, 313, 42314, 15537, -90,
	38899, 38847, 4700, -45, -47, -1000, -66, -1000, 2301, -67,
	309, 646, 645, 295, -1000, -1000, 472, -83, -84, 670,
	10005, 18663, 6780, -1000, 670, -1000, 15537, 19351, 19351, 1300,
	1543, 19351, -1000, -1000, -1000, -1000, 27255, 556, 334, 27255,
	-1000, 2300, 1538, 293, -1000, -1000, -1000, 36129, 471, -1000,
	334, 291, 1137, 36129, 36129, 36129, -1000, -1000, 1448, 37146,
	1447, 43767, 36129, -1000, 461, 459, 1572, 1566, 36129, 36129,
	36807, 36468, 36129, 1122, 100, -1000, 2096, 458, -1000, 36129,
	1155, 23514, 662, 644, 36129, 100, -1000, 2080, 450, 6780,
	1102, -1000, 631, 1635, 1374, -1000, 940, 1689, 36129, 287,
	-85, -22, 43767, -1000, -1000, -1000, -1000, -1000, 36129, 502,
	36129, 100, 36129, 23514, 23514, 100, 36129, 1961, 2003, 591,
	36129, 1568, 15537, 1172, -1000, 18319, 692, 36129, 1084, 89,
	-1000, -1000, -1000, 610, 36129, -1000, -1000, 118, 118, -1000,
	116, 1402, -1000, -73, -1000, -1000, -1000, 36129, 23514, -93,
	-1000, 717, 716, 710, -1000, 43767, -1000, 557, 819, -1000,
	2299, 659, 36129, 9653, 9653, -1000, 1595, -1000, -1000, 1009,
	-1000, 1124, -1000, -1000, -1000, -1000, 9653, -1000, -41, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1315, 1263, -1000, -1000,
	-1000, 1117, -1000, 15537, 2297, -1000, -1000, -1000, 8569, -1000,
	-1000, -1000, 36129, -148, 15537, 223, 223, 15537, 16241, 16241,
	-1000, 223, -1000, -1000, -1000, -1000, -1000, 1681, 447, 15537,
	43767, 4043, 726, -94, 362, 15537, -30, -1000, 15537, -1000,
	40856, -1000, -1000, 347, 2006, -1000, 15537, 42124, 269, 9301,
	-1000, 42035, -15, -15, -1000, 2317, 1478, 1267, 1175, 1053,
	2293, -1000, 20384, 674, 1308, 40697, 43574, 43767, -1000, 15537,
	-1000, -1000, 1678, 15537, -1000, 43574, 43767, 16241, 16241, 16241,
	16241, 16241, 16241, 16241, 16241, 16241, 16241, 16241, 16241, 16241,
	16241, 16241, 16241, 16241, 16241, 16241, 1505, 16241, 2263, 2263,
	2263, -32, 15537, -1000, 1676, 1678, 15537, 15537, 43767, 268,
	265, 264, -1000, 15537, -90, 15537, 15537, 15537, -1000, -1000,
	-1000, 262, -1000, 2284, -1000, -1000, -1000, -1000, 3605, -1000,
	-1000, 1655, -1000, -99, -1000, 1987, -1000, 1655, 42952, -1000,
	1300, -1000, 446, 15537, 19351, -1000, 568, -1000, -96, -1000,
	27255, -1000, 563, -219, -1000, 601, -1000, 334, 440, 36129,
	27255, -1000, -1000, -1000, 792, 772, 1952, -1000, 1436, -1000,
	698, -1000, 1148, 15537, 16943, 435, 434, 1203, -1000, 1951,
	1402, 1950, 1402, -1000, -35, 1052, -1000, 630, 15537, -1000,
	770, -1000, 1187, 21079, -1000, -1000, 621, 15537, -1000, 766,
	21079, 659, 1674, 909, -1000, 934, -1000, 1623, -1000, 25209,
	433, 36129, 432, -1000, 430, -1000, 661, -1000, 427, 36129,
	1527, 591, 24192, -1000, 661, 1084, -1000, 42952, -1000, 1084,
	8217, 2075, -103, -1000, -1000, -1000, 670, 20040, 19351, 15537,
	-104, -1000, -1000, -1000, -1000, -41, 2052, 2052, -1000, 2280,
	-1000, 559, 260, -1000, 27933, -41, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36129, 1314, 6780, 36129, 36129, 36129, 1318,
	40574, -1000, 2090, 6780, 2183, 223, 474, 250, 15537, 43767,
	43320, -109, 15537, 15537, -1000, 257, 15537, 553, 42952, -1000,
	-1000, -1000, 42952, 15537, 2316, 15537, 255, 254, 253, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 248, -1000, -1000,
	38502, 15537, 246, -1000, 236, 233, 42952, 1676, 42952, -1000,
	-1000, 809, 809, 946, 946, 946, 946, 2263, 2599, 596,
	1240, 694, 694, 694, 1227, 618, 618, 694, 694, 694,
	1671, 1483, 426, 4439, 15537, 227, -1000, -1000, 42952, 42952,
	226, -1000, -1000, -1000, -90, 290, 40415, 40292, -1000, 222,
	209, 1641, 2159, -1000, 19351, 1641, -1000, 36129, 42952, -1000,
	-214, -1000, 2277, -1000, -1000, 1538, -1000, 6077, 27255, 36129,
	-110, -1000, 36129, 36129, 36129, 1937, -1000, 1455, -1000, 40133,
	-111, -1000, 330, 2140, 15537, -1000, -1000, 420, 16943, 36129,
	-1000, 1546, 1550, 732, 36129, -1000, 36129, -1000, 36129, 36129,
	36129, 21079, -112, 36129, 23514, -1000, 419, 101, 21079, -126,
	6780, -1000, -1000, 23514, 764, -1000, 1237, 1628, -1000, 16943,
	418, 36129, 25209, 2211, -1000, 16943, 1342, 1540, 591, 24192,
	-1000, 886, -1000, -1000, -56, -1000, 388, 100, 1084, -1000,
	-61, 42952, 598, 2033, -1000, 2031, 549, -1000, -1000, -63,
	417, -1000, 595, 592, -1000, -72, -1000, 577, -1000, -1000,
	-1000, 1232, 1232, -1000, -1000, -1000, 2090, 15537, 15537, 43320,
	-127, -1000, 223, 223, -1000, 40010, -1000, 42952, -1000, 42035,
	-1000, -1000, -1000, -1000, 1236, -1000, 39851, -1000, -1000, -1000,
	-1000, 16241, 1669, 416, 43767, 39728, -1000, -1000, 15537, -1000,
	-1000, -1000, -1000, 667, 15537, 15537, 1987, 667, -133, 334,
	-1000, -1000, -1000, 2273, -1000, -140, -1000, -1000, -1000, -1000,
	36129, -1000, 36129, -1000, 6780, 36129, 1673, 1421, -1000, -1000,
	1561, 414, 16241, 36129, -1000, 1188, 16943, 2090, 101, 6780,
	2090, 39569, 5224, -141, -142, 1397, -1000, 1395, 15537, -1000,
	43767, 1402, 1402, -1000, 758, 757, -1000, 756, -1000, -1000,
	15537, -1000, 751, -1000, -73, 21079, -1000, -1000, 2157, 1268,
	-150, 16943, -153, 208, 100, -155, 36129, -1000, 591, 24192,
	-1000, 2003, 2012, 36129, 2062, -1000, -1000, 412, 410, 409,
	-1000, 27594, 27594, 23514, 23514, 1314, -1000, 36129, -1000, -1000,
	-1000, 223, 223, -1000, -1000, 207, 1308, 2156, -1000, 4851,
	16241, 43767, -158, -1000, 39446, -1000, 36129, 42952, -90, -1000,
	-1000, 27255, 547, -1000, -1000, 1760, -1000, -1000, 36129, 1429,
	-1000, -1000, 15537, 4439, 408, 1623, 406, -1000, -1000, -1000,
	-1000, -1000, -1000, 2140, -1, -1000, 1152, -1000, -1000, 42952,
	2118, -1000, -1000, 36129, 36129, 403, -15, 402, -1000, 1281,
	36129, 1188, -161, -1000, 1623, -1000, 1188, 396, 24192, -1000,
	1527, 847, -163, 36129, -1000, 23514, 23514, -1000, -166, -1000,
	-1000, -1000, -168, -1000, 1095, 15537, 4851, -169, -1000, -1000,
	-80, -1000, 2188, -1000, -1000, -1000, -1000, 1935, 39287, 1482,
	36129, -1000, 36129, 2090, 204, 36129, 701, 6780, -1000, -1000,
	15537, 198, 15537, 395, 390, 389, 1623, 1188, -1000, 1623,
	16943, -1000, 1540, 1030, -1000, 670, -1000, -171, -177, -1000,
	-1000, 195, 15889, 15889, -90, -1000, 36129, 384, 1776, -1000,
	1336, 1145, 192, -182, -1000, -1000, 383, -1000, 15537, -1000,
	-183, 2316, -184, 36129, 36129, 36129, -1000, 1623, -1000, -185,
	-1000, 20040, -1000, 659, 659, -1000, -1000, -1000, 16592, 1323,
	1074, 41397, -1000, -1000, -1000, 36129, -1000, 1340, 1337, 955,
	-1000, -1000, -1000, -1000, -1000, 1482, 42952, -1000, -1000, -190,
	-191, -192, -1000, 1188, -179, -1000, -1000, 2244, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2020, -1000, 724, 1364, 1364,
	1336, 382, 348, 1332, 1623, -1000, 15185, -1000, 2252, -1000,
	-1000, 1494, -1000, -1000, 1232, 1232, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 191, 691, 91, 689, -1000, 344,
	-1000, 1515, -50, 14833, 878, 346, -106, -1000, -193, -1000,
	42952, -1000, 343, -1000, 14833, 1232, -1000, 14833, 14833, -198,
	-1000, -1000, -199, -1000, -57, 1232, -139, -1000, -1000, 1232,
	-1000,
}
var sqlPgo = [...]int{

	0, 2723, 2722, 1816, 2721, 2161, 2720, 2719, 2718, 2717,
	2155, 2716, 2714, 2713, 2712, 2711, 2710, 2708, 2707, 2706,
	2705, 2702, 2701, 2700, 2699, 2698, 2697, 2696, 2153, 2695,
	2136, 2694, 2693, 2691, 2690, 2689, 32, 2687, 2686, 2685,
	2115, 2682, 2679, 2676, 2675, 2056, 2674, 2053, 2666, 2664,
	2042, 2663, 2655, 2654, 2036, 2653, 2031, 2652, 87, 123,
	2000, 2651, 2650, 1976, 1973, 1898, 2649, 1891, 2647, 2646,
	1879, 1867, 2645, 109, 2641, 2638, 2635, 1846, 1840, 2634,
	2629, 2628, 155, 2626, 1825, 2625, 2624, 2621, 2619, 2617,
	2616, 2612, 2611, 2602, 2601, 2600, 2598, 2596, 2590, 2588,
	2585, 2583, 2582, 2580, 161, 2579, 2578, 1820, 1808, 2573,
	2571, 29, 37, 20, 62, 108, 151, 3459, 143, 2568,
	2563, 2560, 2556, 2554, 2553, 22, 104, 103, 2552, 100,
	2546, 2545, 56, 38, 25, 26, 81, 94, 2543, 2542,
	2086, 28, 2540, 2539, 133, 2538, 24, 31, 2269, 158,
	156, 70, 127, 2535, 2529, 2528, 52, 122, 7, 8,
	3, 4, 57, 6, 1, 2520, 2, 5, 2519, 2517,
	19, 89, 42, 2507, 53, 49, 2504, 2503, 132, 2502,
	68, 92, 1707, 106, 126, 1327, 111, 2498, 69, 15,
	71, 2496, 2492, 160, 43, 88, 146, 117, 2483, 61,
	162, 131, 83, 135, 139, 2481, 2480, 2475, 107, 2474,
	120, 84, 2472, 2470, 77, 2466, 102, 137, 2461, 144,
	115, 2460, 2458, 95, 2452, 128, 2451, 2450, 159, 147,
	116, 16, 45, 75, 13, 1703, 1689, 136, 93, 67,
	58, 2448, 818, 1322, 928, 78, 2437, 91, 64, 36,
	65, 97, 150, 34, 2436, 2429, 138, 2426, 2421, 2420,
	2419, 2417, 105, 2416, 2414, 2413, 86, 41, 47, 80,
	50, 90, 130, 118, 157, 112, 2412, 85, 125, 2411,
	72, 2410, 2407, 1580, 121, 2401, 2399, 2398, 1564, 1267,
	1117, 878, 2396, 2395, 1088, 425, 2391, 2389, 96, 2388,
	119, 114, 82, 145, 140, 30, 2386, 124, 35, 2385,
	73, 40, 0, 2623, 2151, 2384, 129, 79, 2383, 2382,
	2379, 2378, 33, 12, 9, 11, 18, 14, 46, 27,
	2377, 2375, 134, 98, 76, 2372, 154, 2368, 2366, 2363,
	51, 2362, 23, 2360, 21, 2359, 2358, 17, 10, 2356,
	2354, 148, 2353, 101, 2352, 2177, 2351, 152, 2349, 2348,
	2051, 2347, 55, 113,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 127, 127, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	124, 124, 129, 129, 129, 131, 131, 128, 128, 123,
	123, 28, 28, 71, 71, 114, 64, 64, 64, 310,
	310, 311, 311, 110, 110, 111, 111, 111, 111, 112,
	112, 113, 113, 113, 38, 38, 38, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 47, 47, 48, 48, 48, 48, 48, 48, 49,
	49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
	50, 55, 55, 55, 53, 53, 53, 52, 52, 52,
	51, 51, 51, 54, 54, 54, 184, 184, 183, 183,
	187, 187, 56, 56, 56, 56, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 59, 59,
	59, 59, 59, 59, 59, 279, 279, 278, 57, 57,
	254, 254, 60, 60, 209, 209, 61, 61, 61, 61,
	61, 62, 62, 72, 72, 351, 351, 351, 355, 355,
	356, 356, 357, 357, 357, 357, 357, 357, 357, 353,
	353, 67, 67, 67, 67, 68, 68, 68, 69, 69,
	109, 109, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 33, 34, 34, 35, 35, 36, 36, 36, 78,
	78, 78, 80, 77, 77, 77, 79, 79, 79, 79,
	81, 81, 82, 82, 82, 82, 82, 83, 83, 304,
	302, 302, 303, 303, 154, 154, 154, 154, 154, 155,
	155, 155, 309, 309, 309, 309, 309, 309, 308, 308,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 96, 96, 96,
	104, 104, 104, 104, 104, 104, 104, 85, 85, 90,
	90, 90, 90, 90, 86, 86, 91, 91, 92, 92,
	93, 93, 93, 93, 93, 93, 87, 87, 87, 87,
	95, 95, 95, 95, 94, 94, 100, 100, 100, 100,
	100, 100, 97, 97, 97, 97, 98, 98, 98, 101,
	101, 101, 101, 88, 88, 89, 89, 102, 102, 103,
	103, 103, 103, 103, 103, 99, 99, 99, 352, 352,
	354, 354, 65, 65, 43, 43, 44, 44, 156, 156,
	157, 157, 233, 233, 233, 233, 158, 158, 130, 130,
	130, 161, 162, 162, 159, 159, 160, 160, 163, 163,
	163, 165, 165, 166, 166, 167, 167, 164, 164, 164,
	232, 320, 320, 321, 321, 321, 321, 321, 321, 322,
	322, 322, 322, 322, 322, 322, 318, 318, 319, 316,
	316, 317, 317, 317, 317, 358, 358, 231, 231, 170,
	170, 323, 323, 323, 323, 324, 324, 324, 324, 324,
	327, 326, 325, 325, 325, 325, 325, 265, 265, 265,
	106, 106, 45, 45, 45, 136, 136, 46, 46, 42,
	42, 42, 213, 213, 174, 174, 270, 270, 270, 147,
	147, 125, 125, 125, 19, 21, 21, 15, 15, 15,
	15, 15, 15, 27, 27, 24, 24, 214, 214, 215,
	215, 66, 66, 70, 70, 75, 75, 105, 105, 105,
	105, 105, 105, 29, 29, 29, 29, 37, 37, 37,
	37, 74, 74, 360, 360, 143, 143, 143, 143, 144,
	144, 228, 228, 229, 229, 361, 361, 230, 230, 230,
	138, 137, 139, 139, 41, 41, 41, 132, 132, 133,
	133, 134, 134, 135, 135, 362, 362, 63, 63, 63,
	108, 108, 150, 150, 225, 225, 225, 227, 227, 226,
	226, 226, 199, 199, 199, 107, 107, 179, 179, 189,
	189, 190, 190, 276, 191, 73, 73, 117, 117, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 116,
	118, 118, 118, 118, 118, 118, 118, 121, 121, 121,
	122, 122, 122, 120, 120, 333, 333, 333, 336, 336,
	332, 334, 334, 335, 335, 359, 359, 200, 200, 200,
	169, 168, 168, 172, 172, 171, 173, 173, 269, 269,
	269, 197, 197, 196, 196, 196, 196, 218, 218, 216,
	216, 217, 217, 221, 221, 222, 222, 222, 223, 223,
	224, 224, 195, 195, 250, 250, 220, 220, 219, 119,
	119, 119, 178, 178, 178, 180, 180, 240, 240, 240,
	241, 241, 239, 239, 239, 239, 271, 271, 271, 271,
	271, 271, 271, 271, 349, 349, 349, 350, 350, 268,
	268, 272, 272, 272, 272, 272, 272, 266, 266, 266,
	266, 267, 267, 277, 277, 203, 203, 203, 203, 201,
	201, 202, 202, 273, 273, 273, 273, 198, 198, 274,
	274, 274, 234, 234, 280, 280, 280, 298, 298, 177,
	177, 177, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 282, 282, 282, 282, 284, 284, 284,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 297, 297,
	297, 297, 297, 285, 285, 292, 292, 293, 293, 294,
	295, 286, 286, 287, 287, 288, 289, 296, 296, 296,
	296, 300, 300, 290, 290, 290, 290, 290, 291, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 211, 211, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 244, 244,
	244, 244, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 328, 328, 328, 328, 328, 328, 328,
	328, 330, 330, 331, 331, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 337, 337, 338, 338, 340,
	340, 341, 341, 342, 343, 343, 343, 344, 345, 345,
	339, 339, 346, 346, 346, 347, 347, 348, 348, 348,
	348, 348, 256, 256, 257, 258, 264, 264, 264, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 145, 145, 145, 145, 145,
	186, 186, 185, 185, 253, 253, 251, 251, 255, 255,
	204, 204, 299, 299, 299, 299, 299, 299, 299, 205,
	205, 205, 212, 206, 206, 207, 207, 207, 207, 207,
	247, 248, 208, 208, 208, 249, 249, 259, 263, 263,
	262, 261, 261, 260, 260, 237, 237, 238, 238, 236,
	235, 194, 194, 193, 193, 192, 192, 363, 363, 188,
	188, 275, 275, 275, 275, 181, 181, 152, 152, 182,
	182, 148, 148, 151, 151, 149, 149, 149, 149, 175,
	175, 176, 176, 146, 146, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 301, 301, 301, 252,
	140, 140, 140, 141, 141, 142, 142, 306, 306, 306,
	307, 307, 307, 307, 305, 305, 305, 305, 305, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 1, 4, 7, 1, 3, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 8, 8, 4, 5, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 8, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 5, 6,
	4, 3, 5, 1, 3, 1, 1, 9, 10, 8,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 7, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 1, 1, 3, 3, 1,
	2, 4, 4, 2, 3, 5, 5, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 1, 0, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 1, 0, 2, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 3, 3, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -28, -30, -33, -38,
	-39, -61, -47, -48, -49, -60, -56, -62, -63, -64,
	-65, -57, -71, -70, -72, -75, -73, -66, -67, -76,
	-84, -105, -106, -107, -108, -5, -10, 24, 35, -31,
	-32, 48, -34, 72, -45, -40, 74, 95, -335, 99,
	-50, -54, 103, 110, 113, 135, 144, 230, 237, 258,
	260, 262, 269, -115, -117, 256, -68, -69, -77, -78,
	-79, -80, -109, 281, -85, -86, -87, -88, -89, -90,
	-91, -92, -93, -94, -95, -96, -97, -98, -99, -100,
	-101, -102, -103, 284, -29, -37, -74, 324, -6, -7,
	-8, -9, -11, -21, 112, -41, -42, -43, -44, -46,
	-333, -51, -52, -53, -55, -118, -116, 377, 257, 333,
	36, 294, 62, 106, 264, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -27, -19, -20, -12,
	349, 356, -121, -119, -120, -122, 274, 341, 304, 381,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	2, 304, 344, 334, 88, 152, 242, -351, 2, -182,
	304, 88, -149, -140, 370, 4, -312, -314, 20, 21,
	24, 34, 35, 36, 41, 45, 48, 49, 56, 61,
	62, 63, 68, 65, 66, 67, 70, 72, 73, 76,
	77, 78, 86, 87, 89, 91, 95, 97, 99, 102,
	103, 105, 110, 112, 111, 113, 123, 124, 129, 131,
	136, 142, 143, 144, 145, 153, 156, 158, 151, 168,
	169, 170, 174, 175, 176, 179, 178, 183, 184, 187,
	188, 191, 193, 195, 196, 199, 197, 201, 202, 204,
	203, 209, 211, 212, 214, 217, 220, 223, 226, 227,
	228, 229, 230, 231, 233, 235, 237, 239, 240, 241,
	242, 243, 245, 246, 248, 249, 250, 251, 252, 256,
	254, 255, 257, 258, 259, 260, 262, 264, 265, 267,
	282, 283, 295, 269, 270, 271, 272, 273, 277, 275,
	278, 279, 281, 284, 286, 289, 293, 294, 296, 299,
	300, 297, 292, 303, 305, 306, 307, 308, 309, 310,
	311, 312, 319, 320, 324, 325, 326, 327, 330, 331,
	332, 333, 335, 338, 339, 340, 345, 350, 351, 352,
	353, 354, 29, 37, 38, 39, 40, 42, 43, 46,
	47, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 146, 147, 150, 157,
	159, 160, 161, 162, 163, 165, 172, 173, 181, 198,
	208, 210, 221, 225, 234, 236, 244, 266, 276, 287,
	288, 298, 301, 314, 315, 316, 321, 322, 337, 341,
	342, 380, 380, 2, 169, 241, -148, -140, 88, 380,
	2, 304, 334, 344, -213, 88, 329, -140, 237, 22,
	2, 97, 156, 332, 331, 22, 233, 275, 306, 308,
	2, 380, 2, 344, 304, 152, 88, 334, -140, 2,
	-59, 2, 377, -58, -5, -40, -50, -60, -56, -10,
	-28, -30, -45, -47, -54, -64, -63, -65, -67, -71,
	-70, -73, -77, -78, -84, -107, -108, 74, 24, 103,
	281, 112, -355, 2, 22, -356, -357, 74, 103, 135,
	274, 156, 97, 331, 304, 2, 169, 2, -140, 2,
	-351, 2, 169, 2, -355, 2, -140, 2, -144, 2,
	269, -140, 380, 380, 380, 380, 380, 188, 56, 266,
	278, -82, 320, -81, 314, -304, -83, 2, -183, 199,
	-140, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 2, -104,
	278, 35, 56, 22, 61, 89, 136, 152, 153, 175,
	69, 70, 240, 188, 170, 319, 176, 279, 305, 320,
	74, 335, 309, 111, 4, 88, 199, 280, 314, 380,
	380, 380, -359, 2, 304, 380, 380, 380, 380, 271,
	284, 380, 380, 380, 380, 380, -116, -118, -117, 380,
	380, 380, 380, -171, -172, 328, 164, 108, 219, -115,
	-117, 2, -333, -104, 278, 2, 56, 22, -302, 2,
	-242, 215, -244, 368, 369, 363, 205, 355, -256, 94,
	-246, -259, 109, 266, 377, -148, -245, 383, 9, -330,
	-117, 30, -257, -258, 50, -140, 7, 8, 5, 6,
	-146, -282, -252, -291, 323, 116, 207, -328, -329, 4,
	-312, -306, -283, -293, -287, -290, 165, 59, 80, 81,
	84, 82, 85, 280, 334, 51, 29, 114, 115, 225,
	234, 301, 321, 322, 146, 208, 147, 57, 137, 181,
	102, 38, 40, 42, 43, 52, 53, 90, 92, 93,
	125, 126, 127, 157, 159, 160, 161, 162, 163, 210,
	244, 287, 298, 315, 316, 342, -313, -294, -295, -288,
	-289, 75, 117, 134, 155, 148, 167, 171, 182, 185,
	194, 200, 222, 224, 263, 285, -296, -360, 2, 320,
	320, 2, -360, 2, -360, 2, -143, 2, 320, 317,
	-336, 245, -332, -140, -336, 380, 380, 382, 380, -168,
	-169, 2, 22, 100, 377, 2, -271, 2, 375, -273,
	-148, -117, -272, 377, 216, -3, 2, -273, 146, -148,
	2, -273, 146, -148, 2, -310, 146, -308, 9, -307,
	5, 4, -312, -314, -313, 59, 2, -140, 2, -151,
	146, -148, -305, 4, -312, -314, -313, -315, 22, 25,
	26, 27, 28, 30, 31, 32, 33, 44, 50, 51,
	55, 58, 60, 69, 74, 79, 80, 82, 81, 83,
	84, 85, 94, 96, 98, 100, 101, 104, 106, 108,
	116, 118, 130, 132, 133, 135, 138, 140, 149, 152,
	154, 164, 166, 177, 180, 186, 189, 190, 205, 206,
	207, 213, 215, 216, 218, 219, 232, 238, 247, 261,
	274, 280, 290, 302, 304, 313, 317, 318, 323, 328,
	329, 334, 336, 343, 344, 346, 347, 348, 349, 317,
	382, -182, -175, -140, -236, -235, 379, -242, 2, -242,
	2, 133, 377, -193, -194, -235, -236, 2, -183, 146,
	-310, 146, 2, -183, 2, 152, -140, 146, 2, -140,
	22, 133, 2, 166, 2, 166, 2, -274, 2, -273,
	-184, 146, 2, -183, -184, 146, 2, -152, 146, 2,
	-151, -140, 146, 2, -311, 146, 2, -310, -209, 377,
	-279, 2, -278, -307, 341, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	278, 215, 382, -183, -242, -254, 377, 133, -242, 215,
	-140, 2, 282, 2, 377, -82, 54, 320, -229, 2,
	-230, -137, -138, -139, 168, 239, 243, 354, 317, 360,
	133, -302, -187, 379, -104, 2, -310, 2, 282, 2,
	240, 279, 56, 133, 2, 2, -352, 2, 215, 133,
	2, 133, 2, 133, 2, 133, 2, 133, 2, 2,
	240, 279, 2, 130, 2, 319, 2, 2, 133, 2,
	168, 239, 295, 2, 304, 344, 2, 133, 133, 354,
	2, -198, -273, 304, 354, 22, -171, -172, -219, -196,
	130, -216, -217, 186, 118, 213, -200, 22, 100, -200,
	-200, 45, 378, 378, -104, 282, 2, 10, 11, 58,
	34, 368, 369, 370, 371, 128, 372, 373, 366, 367,
	365, 358, 359, 362, 291, 23, 71, 361, 360, 64,
	192, 268, 119, 120, 121, 122, 253, 13, 14, 15,
	27, 218, 185, 355, 148, 285, 363, 16, 17, 18,
	167, 37, 149, -145, -153, -242, -242, -242, -242, -242,
	224, -192, -237, 375, -117, 377, 377, -117, -242, -185,
	377, 7, -117, -251, 375, -260, -242, -193, 377, 5,
	377, 5, -337, 350, 130, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 236, -300, 345, -300, -300, -284,
	377, -284, -285, 377, -284, 351, 356, 377, -228, -229,
	-228, 317, -144, 382, -336, -176, 377, 377, -188, -275,
	-242, 370, -188, -185, -242, 75, -203, 171, 200, 134,
	182, 263, 155, 7, -59, -239, 383, 377, 370, -268,
	356, -117, -272, 377, -271, -148, 377, -127, 254, -126,
	21, 24, 103, 339, 109, 292, 310, -162, 270, -161,
	228, 254, 109, 349, 109, 112, 254, 292, 310, -162,
	270, 254, 109, 383, 112, -310, -149, 382, -305, 370,
	296, 378, -181, -148, -194, 377, -170, 205, -136, -334,
	349, 205, -170, 377, -141, 146, 2, -140, -334, 205,
	-274, -150, -148, -150, 281, -140, 31, -129, 382, 49,
	259, 109, -129, 109, -129, 382, 109, -129, 109, 382,
	109, -185, 378, 382, -351, -357, 74, 377, 31, -253,
	-280, -281, -283, -292, -286, -290, -291, 41, 47, 46,
	173, 172, 311, 198, 276, 288, 337, 150, 39, 214,
	158, 4, 157, 159, 160, 161, 162, 163, 287, 38,
	244, 126, 127, 125, 102, 93, 92, 210, 43, 42,
	-294, -295, -288, -289, 90, 315, 316, 165, 40, 53,
	52, 342, 298, -311, -351, -304, -185, 31, -229, 2,
	-361, 382, 184, -155, 191, 204, 142, 216, 352, -309,
	5, 4, -252, -265, 94, 188, -291, 8, 369, -301,
	7, 368, -303, -302, -303, 78, 379, -305, -183, 22,
	283, 2, -304, -354, 130, -351, -304, -304, -304, -304,
	-304, 278, -59, 130, -140, 184, -304, 2, -304, 2,
	304, 152, 304, -129, 382, -148, 65, 66, 354, -219,
	-196, -197, -196, -220, -219, 331, -217, -216, -221, -242,
	22, -224, 124, 201, -242, -244, -116, -116, -116, -173,
	-269, -242, 238, 152, -304, -298, -280, -297, 249, 250,
	248, 252, 251, -280, -305, 314, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, 185, 148,
	285, 37, 149, -242, 317, -242, -242, -242, -242, 197,
	205, 207, 323, 116, 330, 100, 211, -363, 302, 33,
	-249, -117, 377, -264, 28, 290, 22, -256, 266, 377,
	-237, -242, -238, -186, -185, 378, 382, -186, -255, -251,
	-263, -262, 346, 378, -185, 343, 22, 100, 370, 2,
	7, -210, 353, 196, 91, 143, 195, -211, 273, -338,
	123, 138, 377, 378, 2, 378, 2, 378, 2, 378,
	2, -242, -242, -204, 2, -299, -185, 4, 353, 196,
	91, 143, 195, 273, -204, 2, -205, 2, -242, -185,
	-206, -243, -244, 368, 369, 363, 377, 266, -207, 2,
	-242, -186, -242, 44, 180, 318, -208, -242, 133, -185,
	-242, -242, -242, -185, -185, 2, -185, 2, 377, 7,
	7, 314, 314, 7, -144, -332, 31, -175, -185, -178,
	382, 133, 31, 4, -178, 378, 382, 171, 171, -271,
	-203, 171, -201, 222, -201, -201, -349, 377, 376, -268,
	-305, 375, 384, -186, 2, -267, -266, 31, -140, 220,
	378, -148, 382, 317, -214, 69, 60, -232, 146, 60,
	-316, -140, 69, -317, 55, 329, 238, 132, -214, 69,
	-214, 69, 69, -273, 34, -73, 112, 133, -305, 317,
	-273, 229, -310, 67, 317, 34, -73, 112, 133, 317,
	-151, -305, 67, -277, 357, -140, 133, 378, 382, -156,
	-175, -157, -140, -233, -232, -318, -319, -316, 152, 329,
	117, 31, 109, 229, 109, 31, 215, 205, -132, 307,
	109, -234, 347, -225, -73, 377, 94, 31, -225, -189,
	-190, -276, -191, -148, 377, -140, -183, -184, -184, -151,
	-152, -140, -310, -311, 378, -59, -278, 317, 336, -157,
	-58, 24, 74, 103, 378, 382, -177, 30, 375, -210,
	377, -277, 133, 360, 317, 378, 320, -230, -154, 243,
	289, 255, 277, 8, 7, 7, 382, -305, -353, -140,
	278, -59, -148, -151, -148, -273, 349, 130, 66, -197,
	-220, -222, -301, 377, 369, -223, 266, 267, 382, -125,
	32, 98, 174, -148, 354, -242, -242, 317, -363, 302,
	-249, -242, 197, 207, 323, 116, 330, 100, 211, 133,
	377, -243, -243, -185, -242, 377, -185, 376, 386, 378,
	-242, 376, 376, 382, -261, -262, 104, -242, -172, 382,
	-171, -242, -185, -185, 378, 378, 317, 317, 317, 317,
	377, -343, 223, 377, 377, -242, 31, 382, 378, 133,
	378, 378, -212, 232, 378, 10, 11, 368, 369, 370,
	371, 128, 372, 373, 366, 367, 365, 358, 359, 360,
	64, 192, 268, 13, 14, 15, 167, 149, -243, -243,
	-243, -185, 377, 378, -247, -248, 133, 130, 31, -208,
	-208, -208, 378, 133, -185, 382, 382, 382, 378, 378,
	378, 7, 378, 382, 378, 354, 354, 378, 377, 378,
	378, -234, -275, -180, 2, -271, -305, -234, -242, -271,
	-271, -202, 336, 215, 171, -271, -266, 378, -350, 7,
	-268, -267, 7, -241, -240, 131, 203, 378, -140, 377,
	-268, 378, -126, -148, -140, -140, 205, -232, 146, -131,
	205, -280, -140, 377, 377, 174, 174, -140, -140, 146,
	-140, 146, -140, -140, -127, 254, -73, 67, 377, -148,
	254, -310, 349, 354, -140, -73, 67, 377, -305, 254,
	354, -110, 145, 211, 296, 133, -148, 378, 378, 382,
	-141, 152, -141, -73, -183, -310, -310, -73, -148, 109,
	-133, 105, -362, 360, -140, -218, -216, -242, -199, -227,
	261, 215, -181, 341, -140, -199, -179, 382, 133, 360,
	-181, -129, -129, -129, -129, -353, -310, 378, -280, 375,
	376, 7, 7, -113, 349, -353, -302, -302, -137, 327,
	63, 243, -302, 382, 217, 242, 88, 304, 152, -223,
	-242, -269, -148, 383, -242, -242, -243, -243, 133, 377,
	-242, -253, 27, 27, 378, -186, 382, -238, -242, 378,
	-251, 106, -242, 313, 378, 343, -172, -172, -172, 5,
	196, 143, 195, -211, 195, -211, -211, 7, -344, -140,
	377, 347, -171, 378, -298, -280, -242, -247, -242, -298,
	-280, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	100, 205, 211, -243, 382, -186, -248, -247, -242, -242,
	-280, 378, 378, 378, -185, -242, -242, -242, 378, 7,
	-58, -195, 138, -277, 382, -195, -202, 377, -242, -271,
	376, 378, 382, -267, 376, 382, 385, 360, -268, 377,
	-175, -266, 317, 317, 109, 205, 338, -320, -317, -242,
	-174, -270, -140, -331, 377, -328, -329, -146, 377, 377,
	-124, 103, 281, -215, 109, -129, 109, -129, 317, -214,
	69, 354, -185, 317, 229, -245, -146, -140, 354, -185,
	317, -245, -113, 133, 303, 296, -158, 151, -233, 377,
	-141, 377, 377, -170, -136, 377, -140, -134, 179, -362,
	-308, -334, -199, -199, -188, 206, 68, 378, -234, -190,
	-180, -242, 378, -114, 76, -114, 7, 376, 378, -112,
	217, -111, -140, 5, -140, -35, -36, 152, 231, -305,
	-140, -148, -151, 216, 378, -125, -305, 27, 27, -242,
	-253, 378, -242, -242, 378, -242, 376, -242, 5, -242,
	378, 378, 378, 378, -345, -140, -242, 378, 378, 378,
	-248, 133, 100, 211, 377, -242, 378, 378, 382, 378,
	378, 378, 378, -250, 140, 45, -271, -250, -175, -239,
	7, -240, -305, 375, -267, -175, 378, -140, -140, -232,
	109, -321, 69, -322, 58, 117, 74, 205, 207, 329,
	238, 55, 94, 247, 378, 378, 382, -147, -193, 58,
	-147, -242, 377, -174, -175, 205, 94, 205, 94, 87,
	325, -140, -140, -148, -140, -140, -245, 378, -148, -310,
	377, -245, 378, -305, -311, 314, -159, -160, 228, 149,
	-174, 377, -175, -156, 31, -174, 215, -135, 178, -362,
	-308, -132, -226, 377, 215, -73, -199, 360, 87, 87,
	376, 382, 377, 360, 360, 382, 22, 377, -162, -162,
	-125, -242, -242, 378, 378, -172, -339, 228, 378, -243,
	133, 377, -253, 378, -242, -340, 348, -242, -185, -340,
	378, -268, 7, 378, -232, -140, -305, -140, 117, 146,
	207, 174, 377, -243, -148, -231, -358, 73, 300, -270,
	-125, -305, -125, 378, -185, 378, 378, 207, 207, -242,
	-280, -129, -129, 317, 317, 317, -185, 317, -245, 45,
	226, 378, -174, 378, 378, -73, 378, -148, -362, -308,
	-133, 101, -175, 69, -249, 377, 377, -111, -112, -310,
	-310, -36, -175, 378, -172, 45, -243, -253, 378, 378,
	-341, -342, -140, -267, 376, -322, -141, 205, -242, -142,
	377, -158, 377, -147, -172, 247, -128, 58, -140, -140,
	377, -172, 377, 187, 242, -148, -231, 378, -158, -231,
	377, -308, -134, 331, 206, 378, -140, -311, -311, 378,
	378, -346, 242, 267, -185, 378, 382, 31, 109, 378,
	-323, 193, -140, -175, -125, 378, -148, -123, 336, -305,
	-185, 378, -185, 377, 377, 377, -158, -231, -158, -174,
	-135, 281, -234, 378, 378, 378, -347, -348, 37, 326,
	78, -242, -347, -342, -344, 117, -324, -327, -326, 215,
	134, 227, 286, 378, 378, -170, -242, 378, 378, -175,
	-175, -175, -158, 378, -189, -113, -113, -348, 235, 129,
	266, 235, 129, -140, -326, 215, -327, 215, 331, 97,
	-323, 378, 378, 378, -231, -234, 27, -325, 202, 259,
	49, 281, -325, -324, 377, 377, -130, 49, 259, -158,
	-348, 20, 207, 94, -163, -161, -164, -161, 378, 341,
	378, 341, -165, 377, 183, 382, -160, -159, -166, -167,
	-242, 194, 312, -163, 377, 382, 378, 382, 377, -166,
	-163, -167, -166, 378, 378, 382, -160, -159, -164, 382,
	-164,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 321, 0, 166, 168, -2, 0, 0, 0,
	189, 190, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 695, -2, 0, 301, 303, 312, 314,
	316, 318, 319, 0, 370, 372, 374, 376, 378, 380,
	382, 384, 386, 388, 390, 392, 394, 396, 398, 399,
	401, 403, 405, 0, 617, 619, 621, -2, 59, 61,
	63, 65, 67, 77, 0, 170, 172, 174, 176, 179,
	733, 193, 195, 197, 199, -2, 744, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 87, 75, 79, 80, 82,
	0, 0, 710, 712, 714, 716, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 43, 49, 51, 53, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 132, 285,
	0, 1315, 1239, 1245, 1246, 1270, 1271, 1272, 1289, 1290,
	1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 158, 160, 161, 0, 0, 0, 1241, 1315, 167,
	169, 0, 0, 0, 0, 0, 582, 276, 1378, 278,
	280, 0, 0, 0, 0, 183, 184, 185, 186, 187,
	188, 191, 192, 0, 0, 0, 0, 0, 275, 273,
	222, 223, 0, 258, 259, 260, 261, 262, 264, 226,
	228, 230, 231, 233, 235, 237, 239, 241, 243, 244,
	246, 248, 249, 251, 253, 254, 256, 583, 0, 0,
	0, 0, 0, 282, 288, 289, 290, 292, 293, 294,
	295, 296, 297, 298, 0, 138, 0, 483, 271, 269,
	0, 134, 0, 614, 0, 284, 615, 616, 611, 612,
	1405, 640, 302, 304, 313, 315, 317, -2, -2, 1499,
	-2, 334, -2, 342, 1505, 0, 345, 346, 349, -2,
	218, 371, 373, 375, 377, 379, 381, 383, 385, 387,
	389, 391, 393, 395, 397, 400, 402, 404, 406, 407,
	0, 0, 0, 411, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 410, 412, 413, 414, 0, 618,
	620, 622, 0, 571, 735, 60, 62, 64, 66, 0,
	0, 171, 173, 175, 177, 180, -2, 708, 709, 194,
	196, 198, 200, -2, 0, 739, 739, 739, 0, 0,
	709, 707, 0, 305, 0, 307, 0, 411, 310, 311,
	350, 351, 945, 0, 0, 0, 0, 0, 0, 1018,
	1048, 1050, 1470, 1499, 0, 1052, 1053, 0, 1055, 1057,
	1058, 0, 1061, 1062, 1214, 1241, 1255, 1256, 1257, 1258,
	0, 0, 1261, 0, 1263, 1264, 1265, 1116, 1072, -2,
	-2, 1253, 873, 874, 875, 876, -2, 1513, 1076, 1079,
	1082, 1085, 1086, 1089, 1090, 0, 1454, 1471, 1472, 1495,
	1496, 1504, 1508, 1509, 1478, 1492, 1479, 1466, 1476, 1490,
	1321, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1279, 907, 908, 913,
	914, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 916, 642, 624, 633,
	642, 626, 627, 628, 629, 630, 631, 632, 635, 0,
	725, 1384, 728, 1252, 726, 711, 713, 0, 715, 0,
	0, 719, 741, 740, 0, 780, 723, 724, 734, 795,
	833, 810, 801, 0, 0, 2, 74, 0, 1478, -2,
	76, 0, 1478, 833, 78, 0, 1478, 139, 140, 368,
	369, 1280, 1281, 1282, 1283, 1513, 81, 0, 88, 503,
	1478, 1244, 0, 1284, 1285, 1286, 1287, 1288, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 0,
	0, 286, 287, 1249, 1247, 1248, 0, 162, 163, 164,
	165, 0, 0, 1242, 1223, 1221, 1222, 178, 550, 1478,
	-2, 1478, 574, 550, 578, -2, 732, 1478, 656, 277,
	279, 0, 182, 0, 669, 0, 671, 0, 686, 839,
	124, 1478, 203, 216, 124, 1478, 206, 124, 1478, 209,
	1237, 124, 1478, 212, 213, 1478, 215, 141, 272, 0,
	0, -2, 265, 267, -2, 263, 227, 229, 232, 234,
	236, 238, 240, 242, 245, 247, 250, 252, 255, 257,
	-2, 0, 0, 0, 482, 0, 0, 0, 613, 0,
	639, 320, 0, 331, 0, 333, 1465, -2, -2, 337,
	643, 647, 648, 649, 0, 0, 0, 0, 0, 0,
	0, 347, 219, 0, 408, 409, 417, 418, 0, 421,
	442, 454, 0, 0, 425, 427, 481, 429, 0, 0,
	431, 0, 433, 0, 435, 0, 437, 0, 439, 441,
	443, 455, 445, 734, 447, 0, 449, 453, 0, 458,
	0, 460, 461, 462, 0, 0, 468, 0, 0, 415,
	416, 124, 837, 0, 0, 0, -2, 0, 752, 777,
	0, 755, 756, 0, 0, 0, 0, 737, 738, 0,
	0, 0, 697, 698, 306, 0, 309, 0, 0, 0,
	0, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1155,
	1156, 1159, 1160, 0, 0, 0, 0, 0, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 1162, 1163, 1164,
	0, 0, 1166, 0, 1168, 0, 0, 0, 0, 0,
	0, 1228, 0, 0, 1165, 950, 951, 952, 984, 985,
	0, 1049, 1225, 1218, 1051, 0, 1171, -2, 1172, 0,
	0, 1054, 1059, 1060, 1171, 0, 1213, -2, 0, 1260,
	0, 942, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1194, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 910, 921, 918, 917, 894,
	0, 893, 891, 0, 895, 0, 0, 0, 623, -2,
	625, 0, 637, 0, 727, 0, 0, 0, 784, 1229,
	1233, 1234, 784, 0, 1172, 0, 0, 0, 0, 830,
	830, 830, 828, 804, 0, 810, 0, -2, 834, 822,
	0, -2, 801, 0, 0, 835, 0, 89, 608, 103,
	0, 608, 608, 0, 0, 0, 0, 0, 99, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 824, 1240, 0, 1219, 1220,
	154, 0, 0, 1235, 1224, 489, 0, 0, 572, 0,
	731, 0, 0, 0, 0, 1478, 581, 1273, 658, 0,
	843, 0, 672, 0, 0, 840, 0, 201, 0, 122,
	123, 0, 204, 0, 207, 0, 0, 210, 0, 0,
	0, 0, 734, 0, 0, 291, 0, 0, 734, 0,
	1174, 851, 852, 853, 854, 855, 942, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 904, 0, 879, 879, 879, 896, 897,
	905, 906, 911, 912, 923, 924, 926, 928, 922, 922,
	922, 919, 920, 824, 0, 0, 0, 0, -2, 339,
	0, 645, 0, 650, 359, 360, 361, 652, 653, 343,
	362, 363, 364, 365, 366, 367, 0, 567, 0, 569,
	1266, 0, 340, 352, 341, 344, 0, 220, 419, 420,
	422, 423, 424, 428, 0, 478, 430, 432, 434, 436,
	438, 446, 450, 734, 456, 459, 463, 464, 465, 466,
	0, 0, 0, 570, 0, 322, 0, 473, 0, 752,
	777, 701, 751, 702, 776, 778, 753, 754, 759, 763,
	764, 767, 770, 771, 761, 945, 720, 721, 722, 745,
	746, 593, 0, 0, 308, 946, 847, 848, 898, 899,
	900, 901, 902, 947, 948, 0, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, -2, -2, -2, -2,
	-2, -2, -2, -2, 971, 972, 973, 974, 975, 976,
	977, 978, -2, -2, -2, 982, 983, -2, 1167, 1169,
	0, 1228, 0, -2, 0, -2, -2, -2, -2, 996,
	0, 998, 1001, 1003, 1005, 0, 0, 0, 0, 1227,
	1015, 1205, 0, 0, 1146, 1147, 1148, 1000, 0, 0,
	1226, 1217, 0, 0, 1170, 1056, 0, 0, 0, 1178,
	1212, 1208, 0, 1063, 744, 0, 0, 0, 0, 1070,
	0, 1269, 929, 930, 931, 932, 933, 934, 943, 1126,
	0, 0, 0, 1077, 1078, 1080, 1081, 1083, 1084, 1087,
	1088, 0, 0, 0, 1094, 0, 1181, -2, -2, -2,
	-2, -2, -2, -2, 0, 1096, 0, 1098, 1172, 1191,
	0, 0, 1019, 0, 0, 0, 0, 1499, 0, 1101,
	1172, 1199, 0, 0, 0, 0, 0, 1172, 0, 1204,
	0, 0, 0, 0, 0, 1112, 0, 1114, 0, 0,
	0, 0, 0, 0, 636, 729, 0, 0, 0, 843,
	0, 0, 0, 1232, 843, 779, 0, 0, 0, 0,
	0, 0, 825, 829, 826, 827, 0, 0, 810, 822,
	792, 0, 0, 0, 799, 800, 821, 0, 820, 809,
	-2, 0, 0, 0, 0, 0, 607, 105, 1478, 0,
	126, 0, 0, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 501, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 1243, 0, 144, 0, 1250, 0, 0, 0, 0,
	0, 488, 1249, 490, 492, 493, 494, 495, 1274, 0,
	1274, 0, 0, 0, 0, 0, 0, 0, 660, 666,
	0, 758, 0, 684, 674, 0, 0, 0, 684, 688,
	689, 691, 692, 0, 0, 841, 217, 124, 124, 1238,
	124, 124, 142, 214, 274, 224, 266, 0, 0, 0,
	268, 0, 0, 0, 270, 0, 844, 846, 0, 856,
	0, 153, 0, 0, 0, 332, 0, 644, 651, 0,
	356, 0, 358, 568, 1268, 1267, 0, 221, 480, 299,
	448, 451, 475, 476, 477, 838, 0, 0, 474, 705,
	706, 0, 765, 0, 0, 762, 768, 769, 0, 748,
	591, 592, 0, 0, 0, -2, -2, 0, 0, 0,
	1016, -2, 997, 999, 1002, 1004, 1006, 0, 0, 0,
	0, 0, 0, 0, 1017, 1171, 0, 1215, 1218, -2,
	1173, 1176, 1177, 0, 0, 1209, 0, 0, 0, 0,
	743, 744, 744, 744, 1069, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 1093, 0,
	1095, 1097, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1022, 1023,
	1024, 0, 1171, 1100, 1197, 1198, 0, 0, 0, 0,
	0, 0, 1106, 0, 1203, 0, 0, 0, 1110, 1111,
	1113, 0, 877, 0, 903, 925, 927, 915, 734, 1251,
	781, 773, 1230, 824, 783, 785, 1231, 773, 1173, 812,
	0, 814, 0, 0, 0, 816, 0, 805, 0, 807,
	822, 797, 0, 0, 790, 0, 789, 810, 818, 0,
	0, 836, 104, 597, 0, 0, 0, 107, 1478, 115,
	0, 522, 0, 0, 0, 0, 0, 610, 116, 1478,
	124, 1478, 124, 117, 90, 608, 91, 0, 0, 603,
	0, 595, 0, 0, 594, 92, 0, 0, 605, 0,
	0, 153, 0, 0, 155, 0, 1236, 497, 549, 0,
	0, 1274, 0, 486, 550, 575, -2, 577, 0, 0,
	662, 666, 0, 665, 732, 684, 757, 842, 667, 684,
	0, 0, 0, 676, 673, 670, 843, 0, 0, 0,
	0, 202, 205, 208, 211, 281, 0, 0, 1175, 0,
	849, 0, 0, 133, 0, 283, 329, 330, 335, 354,
	355, 357, 353, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 593, 0, 949, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1206, 0, 0, 0, 1217, -2,
	1179, 1207, 1211, 0, 1064, 0, 0, 0, 0, 1262,
	935, 936, 937, 938, 939, 940, 941, 0, 1124, 1125,
	1129, 0, 0, 1075, 0, 0, 1180, 1190, 1192, 1020,
	1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, -2, -2, -2, 1038, 1039, 1040, -2, -2, -2,
	0, 0, 0, 1193, 0, 0, 1195, 1196, 1200, 1201,
	0, 1103, 1104, 1105, 1202, 0, 0, 0, 909, 0,
	0, 775, 0, 782, 0, 775, 813, 0, 832, 815,
	795, 806, 0, 803, 793, 0, 794, 0, 822, 0,
	0, 802, 0, 0, 0, 0, 125, 520, 539, 0,
	0, 584, 590, 590, 0, 1073, 1074, 0, 0, 0,
	109, 0, 0, 0, 0, 113, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 95, 131, 0, 0, 156, 505, 0, 491, 0,
	0, 0, 489, 0, 573, 0, 0, 664, 666, 0,
	657, 658, 181, 668, 682, 683, 681, 0, 684, 690,
	687, 693, 0, 0, 135, 0, 0, 850, 857, 151,
	1367, 149, 146, 148, 300, 323, 324, 0, 328, 469,
	470, 503, 503, 760, 766, 749, 593, 0, 0, -2,
	0, 1009, -2, -2, 1142, 1173, 1216, 1210, 1259, 744,
	1065, 1067, 1068, 944, 1131, 1128, 0, 1115, 1091, 1092,
	1189, 0, 0, 0, 0, 1173, 1144, 1102, 0, 1108,
	1109, 878, 730, 1120, 0, 0, 786, 1120, 0, 810,
	808, 791, 787, 0, 798, 0, 819, 599, 601, 106,
	0, 521, 0, 524, 0, 0, 0, 0, 530, 531,
	0, 0, 0, 0, 541, 548, 0, 593, 1254, 0,
	593, 0, 0, 0, 0, 0, 121, 0, 0, 609,
	0, 124, 124, 598, 0, 0, 97, 0, 604, 596,
	0, 98, 0, 606, 143, 0, 484, 504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 666, 0,
	659, 660, 0, 0, 0, 675, 685, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 326, 0, 471, 472,
	750, -2, -2, 1010, 1143, 0, 744, 0, 1117, -2,
	0, 0, 0, 1145, 0, 717, 0, 774, 772, 718,
	831, 822, 0, 817, 108, 0, 525, 526, 1274, 0,
	529, 532, 0, 534, 1276, 497, 0, 545, 546, 585,
	586, 589, 587, 590, 744, 543, 0, 110, 111, 120,
	128, 112, 118, 0, 0, 0, 744, 0, 823, 0,
	0, 548, 0, 538, 497, 487, 548, 0, 0, 661,
	662, 0, 0, 0, 694, 0, 0, 150, 0, 145,
	147, 325, 0, 1066, 1134, 0, -2, 0, 1046, 1107,
	1119, 1121, 0, 796, 788, 523, 527, 0, 0, 554,
	0, 542, 0, 593, 0, 0, 130, 0, 600, 602,
	0, 0, 0, 0, 0, 0, 497, 548, 485, 497,
	0, 663, 664, 0, 678, 843, 680, 0, 0, 152,
	327, 0, 0, 0, 1130, 1047, 0, 0, 0, 533,
	559, 0, 0, 0, 588, 1064, 550, 114, 0, 127,
	0, 0, 0, 0, 0, 0, 536, 497, 579, 0,
	655, 0, 679, 153, 153, 1127, 1132, 1135, -2, 1438,
	1312, 0, 1133, 1122, 1123, 0, 535, 555, 556, 0,
	551, 552, 553, 1275, 547, 554, 129, 100, 102, 0,
	0, 0, 537, 548, 843, 136, 137, 0, 1137, 1138,
	1139, 1140, 1141, 528, 557, 0, 558, 0, 0, 0,
	559, 0, 0, 500, 497, 677, 0, 560, 0, 563,
	564, 0, 561, 544, 0, 0, 496, 498, 499, 580,
	1136, 562, 565, 566, 0, 0, 0, 0, 506, 0,
	507, 0, 505, 0, 0, 0, 504, 510, 0, 513,
	515, -2, 0, 508, 0, 0, 511, 0, 0, 0,
	509, 514, 0, 512, 505, 0, 504, 519, 517, 0,
	518,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1110
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1122
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1131
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1140
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1152
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1224
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1247
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1324
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1484
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			return helpWith(sqllex, "DELETE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "INSERT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{ /* SKIP DOC */
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "GRANT")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "RESET")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "RESET")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{ /* SKIP DOC */
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{ /* SKIP DOC */
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2025
		{
			return unimplemented(sqllex, "set local")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2144
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return unimplemented(sqllex, "set from current")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2176
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = Low
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = Normal
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = High
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.str = "client_encoding"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2351
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2510
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2526
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2540
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2551
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2562
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2566
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2570
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2574
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2581
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2588
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2592
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2598
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2602
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2606
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = DropDefault
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.str = ""
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			return unimplemented(sqllex, "match full")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			return unimplemented(sqllex, "match partial")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			return unimplemented(sqllex, "match simple")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3084
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = NoAction
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = Restrict
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = Cascade
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = SetNull
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = SetDefault
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = nil
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3250
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = true
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = false
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3281
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3285
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = Ascending
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = Descending
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3336
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3338
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = true
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = false
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3372
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3434
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3467
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3471
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3517
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3532
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = ReadOnly
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = ReadWrite
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.str = ""
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.str = ""
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.str = ""
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3640
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			return helpWith(sqllex, "INSERT")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3723
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 685:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3762
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3763
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			return helpWith(sqllex, "SELECT")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			return helpWith(sqllex, "VALUES")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			return helpWith(sqllex, "TABLE")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3974
		{
			return helpWith(sqllex, "SELECT")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4018
		{
			return helpWith(sqllex, "TABLE")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4038
		{
			return unimplemented(sqllex, "cte")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4045
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4046
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4049
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4050
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = false
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4074
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4208
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = false
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = true
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4280
		{
			return helpWith(sqllex, "VALUES")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4282
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4297
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &From{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4319
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4337
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4364
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4401
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4426
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = nil
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4473
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = true
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = false
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.str = astFullJoin
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.str = astLeftJoin
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.str = astRightJoin
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.str = astInnerJoin
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4584
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4585
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4671
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4685
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4693
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4728
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = jsonbColType
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = jsonColType
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4826
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = nil
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4891
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4987
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5019
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5058
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5059
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = year
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = month
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = day
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = hour
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = minute
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = month
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = hour
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = minute
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = minute
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = nil
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = second
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5154
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5189
		{
			return unimplemented(sqllex, "at tz")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5397
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5463
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5527
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5551
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5640
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5693
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5694
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5707
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5718
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5734
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5735
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5739
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5748
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5757
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5766
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5767
		{
			return unimplemented(sqllex, "current role")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5776
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5797
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5807
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5816
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5817
		{
			return unimplemented(sqllex, "treat")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5854
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5859
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5863
		{
			return unimplemented(sqllex, "within group")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5864
		{
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5899
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.str = ""
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5961
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5962
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5963
		{
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5966
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5967
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5973
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5974
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5975
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5976
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5977
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = Any
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = Some
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = All
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = Plus
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = Minus
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = Mult
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = Div
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = Mod
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = Bitand
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = Bitor
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = Pow
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = Bitxor
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = LT
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = GT
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = EQ
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = LE
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = GE
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = NE
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = Like
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = NotLike
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = ILike
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = NotILike
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6274
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6278
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6285
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6297
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6313
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6332
		{
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6333
		{
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6356
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6360
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6421
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6456
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6462
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6465
		{
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6486
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6494
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6498
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6501
		{
			return unimplemented(sqllex, "func const")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6503
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6507
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6510
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6512
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6516
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6520
		{
			sqlVAL.union.val = DNull
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6527
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6537
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6572
		{
			sqlVAL.str = ""
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6578
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6582
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
