// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:314
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT8 = 57480
const INT64 = 57481
const INTEGER = 57482
const INTERSECT = 57483
const INTERVAL = 57484
const INTO = 57485
const IS = 57486
const ISOLATION = 57487
const JOIN = 57488
const KEY = 57489
const KEYS = 57490
const LATERAL = 57491
const LC_CTYPE = 57492
const LC_COLLATE = 57493
const LEADING = 57494
const LEAST = 57495
const LEFT = 57496
const LEVEL = 57497
const LIKE = 57498
const LIMIT = 57499
const LOCAL = 57500
const LOCALTIME = 57501
const LOCALTIMESTAMP = 57502
const LOW = 57503
const LSHIFT = 57504
const MATCH = 57505
const MINUTE = 57506
const MONTH = 57507
const NAME = 57508
const NAMES = 57509
const NATURAL = 57510
const NEXT = 57511
const NO = 57512
const NO_INDEX_JOIN = 57513
const NORMAL = 57514
const NOT = 57515
const NOTHING = 57516
const NULL = 57517
const NULLIF = 57518
const NULLS = 57519
const NUMERIC = 57520
const OF = 57521
const OFF = 57522
const OFFSET = 57523
const OID = 57524
const ON = 57525
const ONLY = 57526
const OR = 57527
const ORDER = 57528
const ORDINALITY = 57529
const OUT = 57530
const OUTER = 57531
const OVER = 57532
const OVERLAPS = 57533
const OVERLAY = 57534
const PARENT = 57535
const PARTIAL = 57536
const PARTITION = 57537
const PASSWORD = 57538
const PLACING = 57539
const POSITION = 57540
const PRECEDING = 57541
const PRECISION = 57542
const PREPARE = 57543
const PRIMARY = 57544
const PRIORITY = 57545
const RANGE = 57546
const READ = 57547
const REAL = 57548
const RECURSIVE = 57549
const REF = 57550
const REFERENCES = 57551
const REGCLASS = 57552
const REGPROC = 57553
const REGPROCEDURE = 57554
const REGNAMESPACE = 57555
const REGTYPE = 57556
const RENAME = 57557
const REPEATABLE = 57558
const RELEASE = 57559
const RESTORE = 57560
const RESTRICT = 57561
const RETURNING = 57562
const REVOKE = 57563
const RIGHT = 57564
const ROLLBACK = 57565
const ROLLUP = 57566
const ROW = 57567
const ROWS = 57568
const RSHIFT = 57569
const STATUS = 57570
const SAVEPOINT = 57571
const SEARCH = 57572
const SECOND = 57573
const SELECT = 57574
const SERIAL = 57575
const SERIALIZABLE = 57576
const SESSION = 57577
const SESSION_USER = 57578
const SET = 57579
const SHOW = 57580
const SIMILAR = 57581
const SIMPLE = 57582
const SMALLINT = 57583
const SMALLSERIAL = 57584
const SNAPSHOT = 57585
const SOME = 57586
const SPLIT = 57587
const SQL = 57588
const START = 57589
const STDIN = 57590
const STRICT = 57591
const STRING = 57592
const STORING = 57593
const SUBSTRING = 57594
const SYMMETRIC = 57595
const SYSTEM = 57596
const TABLE = 57597
const TABLES = 57598
const TEMPLATE = 57599
const TEXT = 57600
const THEN = 57601
const TIME = 57602
const TIMESTAMP = 57603
const TIMESTAMPTZ = 57604
const TO = 57605
const TRAILING = 57606
const TRANSACTION = 57607
const TREAT = 57608
const TRIM = 57609
const TRUE = 57610
const TRUNCATE = 57611
const TYPE = 57612
const UNBOUNDED = 57613
const UNCOMMITTED = 57614
const UNION = 57615
const UNIQUE = 57616
const UNKNOWN = 57617
const UPDATE = 57618
const UPSERT = 57619
const USER = 57620
const USERS = 57621
const USING = 57622
const VALID = 57623
const VALIDATE = 57624
const VALUE = 57625
const VALUES = 57626
const VARCHAR = 57627
const VARIADIC = 57628
const VIEW = 57629
const VARYING = 57630
const WHEN = 57631
const WHERE = 57632
const WINDOW = 57633
const WITH = 57634
const WITHIN = 57635
const WITHOUT = 57636
const YEAR = 57637
const ZONE = 57638
const NOT_LA = 57639
const WITH_LA = 57640
const AS_LA = 57641
const POSTFIXOP = 57642
const UMINUS = 57643

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5120

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	320, 28,
	-2, 401,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	1, 374,
	183, 374,
	220, 374,
	318, 374,
	320, 374,
	-2, 384,
	-1, 62,
	1, 377,
	183, 377,
	220, 377,
	318, 377,
	320, 377,
	-2, 383,
	-1, 71,
	1, 28,
	320, 28,
	-2, 401,
	-1, 412,
	1, 182,
	320, 182,
	-2, 925,
	-1, 448,
	157, 411,
	181, 411,
	-2, 380,
	-1, 451,
	157, 410,
	181, 410,
	-2, 378,
	-1, 578,
	157, 410,
	181, 410,
	-2, 381,
	-1, 635,
	317, 859,
	-2, 852,
	-1, 636,
	317, 860,
	-2, 853,
	-1, 642,
	5, 557,
	317, 557,
	-2, 1027,
	-1, 666,
	5, 517,
	-2, 1001,
	-1, 667,
	5, 551,
	317, 551,
	-2, 1003,
	-1, 668,
	5, 525,
	-2, 1004,
	-1, 669,
	5, 524,
	-2, 1005,
	-1, 670,
	5, 551,
	317, 551,
	-2, 1008,
	-1, 671,
	5, 551,
	317, 551,
	-2, 1009,
	-1, 672,
	5, 552,
	-2, 1012,
	-1, 673,
	5, 511,
	-2, 1013,
	-1, 674,
	5, 511,
	-2, 1014,
	-1, 675,
	5, 533,
	-2, 1018,
	-1, 676,
	5, 512,
	-2, 1023,
	-1, 677,
	5, 513,
	-2, 1024,
	-1, 678,
	5, 514,
	-2, 1025,
	-1, 679,
	5, 515,
	-2, 1026,
	-1, 680,
	5, 511,
	-2, 1030,
	-1, 681,
	5, 518,
	-2, 1035,
	-1, 682,
	5, 516,
	-2, 1038,
	-1, 683,
	5, 549,
	317, 549,
	-2, 1040,
	-1, 684,
	5, 553,
	-2, 1043,
	-1, 685,
	5, 555,
	-2, 1044,
	-1, 686,
	5, 548,
	317, 548,
	-2, 1048,
	-1, 941,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 670,
	-1, 950,
	317, 837,
	-2, 825,
	-1, 1166,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 592,
	-1, 1167,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 593,
	-1, 1168,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 594,
	-1, 1172,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 598,
	-1, 1173,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 599,
	-1, 1174,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 600,
	-1, 1177,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 605,
	-1, 1183,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 607,
	-1, 1186,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 612,
	-1, 1187,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 613,
	-1, 1188,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 614,
	-1, 1214,
	191, 743,
	-2, 746,
	-1, 1237,
	115, 759,
	317, 859,
	-2, 852,
	-1, 1238,
	115, 760,
	-2, 997,
	-1, 1239,
	115, 761,
	-2, 923,
	-1, 1240,
	115, 762,
	-2, 893,
	-1, 1241,
	115, 763,
	-2, 908,
	-1, 1242,
	115, 764,
	-2, 922,
	-1, 1243,
	115, 765,
	-2, 965,
	-1, 1397,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 450,
	-1, 1401,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 606,
	-1, 1402,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 608,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 609,
	-1, 1426,
	191, 742,
	-2, 745,
	-1, 1598,
	1, 451,
	68, 451,
	98, 451,
	116, 451,
	120, 451,
	122, 451,
	135, 451,
	141, 451,
	146, 451,
	154, 451,
	157, 451,
	168, 451,
	181, 451,
	183, 451,
	186, 451,
	220, 451,
	222, 451,
	273, 451,
	280, 451,
	290, 451,
	291, 451,
	299, 451,
	318, 451,
	320, 451,
	321, 451,
	-2, 450,
	-1, 1600,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 610,
	-1, 1605,
	144, 0,
	-2, 624,
	-1, 1613,
	191, 744,
	-2, 747,
	-1, 1647,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 650,
	-1, 1648,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 651,
	-1, 1649,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 652,
	-1, 1653,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 656,
	-1, 1654,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 657,
	-1, 1655,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 658,
	-1, 1768,
	144, 0,
	-2, 625,
	-1, 1771,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 628,
	-1, 1772,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 630,
	-1, 1864,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 629,
	-1, 1865,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 631,
	-1, 1872,
	144, 0,
	-2, 659,
	-1, 1923,
	144, 0,
	-2, 660,
	-1, 1979,
	36, 0,
	129, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 1000,
}

const sqlNprod = 1143
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 26402

var sqlAct = [...]int{

	636, 1978, 1559, 1958, 1032, 2002, 1959, 1811, 1929, 1960,
	1977, 452, 1129, 863, 944, 1040, 1624, 1593, 1569, 609,
	753, 1104, 1834, 1850, 626, 634, 1740, 1726, 869, 1727,
	82, 1594, 81, 1759, 48, 1395, 283, 633, 1752, 1684,
	1373, 473, 285, 81, 81, 81, 1371, 1745, 81, 490,
	1575, 81, 1108, 1103, 1122, 1320, 1585, 1483, 1107, 81,
	413, 1144, 947, 597, 1429, 1482, 81, 81, 1385, 865,
	81, 1072, 286, 81, 81, 81, 81, 81, 81, 1137,
	702, 699, 1041, 20, 1006, 997, 1224, 737, 940, 1379,
	1138, 754, 1199, 1263, 489, 1196, 1142, 687, 1056, 457,
	459, 61, 27, 886, 16, 1065, 8, 564, 817, 1098,
	801, 722, 704, 726, 1234, 607, 598, 491, 492, 798,
	565, 828, 511, 1139, 271, 502, 1111, 505, 451, 23,
	22, 978, 11, 10, 982, 9, 7, 4, 269, 287,
	892, 61, 1034, 276, 462, 275, 581, 277, 582, 819,
	504, 580, 400, 797, 815, 391, 730, 498, 460, 585,
	403, 563, 282, 282, 1857, 1031, 62, 1858, 739, 456,
	280, 278, 61, 279, 281, 63, 273, 272, 274, 739,
	739, 1033, 456, 1393, 1453, 1454, 1037, 1471, 1472, 1473,
	714, 1993, 1424, 470, 1133, 1069, 476, 1425, 1974, 483,
	1767, 1833, 1966, 1075, 1332, 1133, 60, 60, 895, 896,
	628, 439, 1331, 1956, 410, 1951, 1062, 1950, 1133, 1925,
	1133, 67, 1062, 1919, 479, 464, 1133, 1903, 449, 1423,
	1833, 898, 39, 39, 1075, 1468, 1893, 448, 1070, 1133,
	40, 40, 1866, 1844, 69, 1062, 1833, 1841, 1832, 1816,
	1133, 1833, 1133, 897, 1815, 1793, 1773, 1133, 1075, 1075,
	894, 1770, 41, 41, 1062, 81, 81, 81, 81, 81,
	1383, 514, 1762, 70, 1909, 1075, 1711, 1071, 1068, 1075,
	1710, 65, 1696, 1075, 1459, 1133, 1609, 66, 1545, 1075,
	1539, 1029, 1382, 1029, 1500, 1266, 1498, 1501, 893, 1075,
	1497, 515, 1382, 1075, 1075, 457, 64, 1660, 903, 1453,
	1454, 1612, 1471, 1472, 1473, 1836, 1496, 1428, 1474, 1075,
	1426, 1360, 1134, 1075, 1133, 1133, 1358, 1084, 507, 507,
	1075, 1074, 1061, 67, 1075, 1062, 1469, 995, 1028, 994,
	740, 1029, 993, 747, 1073, 1361, 748, 1133, 1077, 1208,
	493, 740, 740, 592, 494, 1128, 69, 1092, 593, 858,
	1468, 857, 809, 808, 1453, 1454, 527, 469, 516, 493,
	71, 67, 67, 494, 67, 494, 842, 52, 52, 547,
	1396, 2013, 1976, 1972, 1965, 70, 1920, 81, 499, 1842,
	1798, 1794, 512, 65, 69, 69, 508, 69, 1786, 66,
	592, 1470, 81, 1785, 1784, 81, 81, 1204, 1067, 1459,
	1331, 1779, 1778, 1777, 1724, 1468, 1718, 1675, 1036, 487,
	1670, 1669, 1668, 70, 70, 1615, 70, 1598, 1574, 1549,
	1066, 65, 65, 1505, 1502, 1490, 1481, 66, 66, 81,
	1452, 81, 743, 81, 81, 81, 1449, 81, 1448, 1446,
	953, 695, 1434, 738, 861, 1433, 64, 270, 1394, 64,
	579, 1469, 81, 1363, 1459, 1359, 893, 1280, 1231, 895,
	896, 1230, 592, 81, 1465, 1466, 1467, 591, 1464, 1461,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 1453, 1454, 81,
	868, 948, 898, 64, 1949, 285, 81, 81, 81, 1205,
	81, 1626, 1939, 571, 1906, 574, 899, 900, 901, 902,
	904, 694, 924, 578, 897, 535, 1469, 1885, 1883, 81,
	81, 1874, 1861, 1854, 1839, 286, 1470, 81, 536, 81,
	693, 727, 1830, 1808, 1791, 895, 896, 1764, 1734, 724,
	514, 514, 1604, 1567, 1565, 1564, 1562, 1547, 285, 81,
	1717, 81, 81, 81, 81, 81, 81, 81, 1517, 1516,
	1480, 1442, 81, 81, 570, 530, 532, 1441, 81, 1419,
	515, 515, 1415, 1201, 1347, 493, 81, 1723, 286, 494,
	897, 1470, 1307, 1306, 843, 1294, 1293, 1459, 867, 689,
	1273, 568, 287, 742, 81, 566, 745, 81, 1229, 1465,
	1466, 1467, 1132, 1464, 1461, 1462, 1463, 1455, 1456, 1457,
	1458, 1460, 983, 986, 588, 589, 948, 990, 890, 499,
	594, 488, 976, 975, 974, 688, 449, 973, 972, 971,
	970, 969, 968, 1453, 1454, 448, 950, 516, 516, 967,
	966, 965, 749, 1453, 1454, 287, 872, 457, 1294, 964,
	963, 962, 961, 729, 732, 960, 951, 860, 1464, 1461,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 949, 64, 862,
	751, 1859, 474, 596, 533, 523, 521, 1722, 641, 1535,
	1341, 1340, 805, 804, 695, 895, 896, 1374, 1721, 710,
	1333, 1396, 839, 988, 1504, 832, 1503, 989, 81, 1400,
	557, 542, 958, 541, 847, 866, 81, 1746, 1033, 1627,
	81, 1225, 1437, 979, 81, 81, 561, 1327, 81, 1511,
	859, 1935, 1989, 446, 1354, 705, 1892, 706, 1990, 876,
	875, 874, 760, 1459, 81, 1704, 81, 81, 888, 81,
	999, 1083, 81, 1459, 81, 81, 1528, 81, 562, 514,
	432, 433, 449, 838, 695, 449, 449, 438, 1000, 437,
	1824, 882, 954, 844, 883, 884, 848, 849, 850, 851,
	852, 1823, 1532, 924, 1531, 1508, 855, 856, 455, 515,
	1507, 1007, 1403, 1346, 265, 1455, 1456, 1457, 1458, 1460,
	1345, 1344, 1011, 1013, 1343, 1469, 1184, 707, 1076, 1023,
	81, 81, 980, 981, 1050, 507, 1022, 507, 1019, 984,
	718, 999, 567, 1852, 1035, 987, 1035, 998, 1069, 795,
	1277, 454, 1079, 837, 836, 1276, 830, 825, 1891, 807,
	1155, 271, 1003, 1016, 991, 1123, 1057, 266, 441, 924,
	519, 1024, 1010, 285, 1749, 1534, 516, 81, 61, 601,
	276, 539, 275, 61, 277, 1059, 1546, 1058, 74, 1060,
	1470, 1070, 81, 81, 1020, 1813, 456, 1049, 1198, 81,
	512, 1054, 1051, 286, 1052, 1039, 1315, 280, 278, 1097,
	279, 281, 1198, 273, 272, 274, 1053, 720, 711, 1048,
	540, 1937, 705, 733, 706, 81, 1519, 1135, 81, 442,
	1071, 1068, 1073, 1999, 840, 1953, 621, 1225, 943, 1453,
	1454, 73, 984, 1551, 987, 1321, 1989, 1086, 447, 1078,
	1080, 1081, 443, 981, 980, 895, 896, 1954, 1312, 1085,
	1009, 444, 285, 1457, 1458, 1460, 1353, 2010, 79, 1537,
	287, 1455, 1456, 1457, 1458, 1460, 1526, 261, 898, 383,
	384, 385, 1552, 453, 402, 1962, 1309, 414, 1154, 1554,
	267, 789, 286, 518, 707, 402, 1101, 1073, 1202, 705,
	897, 706, 463, 463, 1126, 1127, 79, 841, 1100, 79,
	79, 482, 79, 485, 486, 1102, 708, 1145, 1153, 924,
	1206, 712, 268, 558, 724, 262, 1279, 81, 81, 81,
	724, 1325, 1008, 81, 1453, 1454, 81, 1088, 739, 1459,
	1136, 1212, 81, 81, 81, 81, 81, 996, 1090, 1073,
	81, 711, 1355, 81, 81, 903, 1073, 1329, 716, 287,
	81, 1067, 392, 1963, 72, 1194, 1091, 81, 1321, 81,
	1520, 707, 895, 896, 715, 1089, 81, 1886, 538, 1192,
	1814, 559, 537, 397, 1203, 1287, 81, 977, 393, 1221,
	1118, 1469, 1388, 1692, 1870, 898, 75, 1831, 938, 1440,
	1412, 457, 1586, 1181, 1998, 1281, 560, 81, 81, 1964,
	1244, 1391, 394, 81, 1410, 1597, 1305, 897, 456, 1405,
	1323, 2005, 1584, 514, 1961, 1693, 1291, 1304, 1656, 1988,
	1389, 396, 1986, 1197, 1459, 1739, 760, 760, 1282, 2011,
	538, 783, 1120, 81, 550, 81, 691, 81, 1190, 528,
	1189, 81, 526, 515, 1195, 81, 1470, 831, 826, 1789,
	584, 1579, 1818, 2017, 81, 264, 263, 1335, 1550, 1336,
	1337, 1362, 903, 1364, 81, 1318, 583, 782, 1326, 1817,
	1806, 389, 690, 708, 1339, 1408, 1469, 1334, 1703, 1413,
	1880, 1700, 1997, 703, 1510, 1702, 1179, 1182, 1390, 1290,
	584, 79, 500, 79, 414, 414, 1286, 1366, 457, 1338,
	740, 1657, 1121, 1688, 873, 1689, 1349, 1658, 1350, 864,
	516, 1352, 1351, 1178, 913, 583, 392, 395, 1291, 1365,
	759, 1356, 1357, 1368, 1461, 1462, 1463, 1455, 1456, 1457,
	1458, 1460, 1691, 1191, 2003, 760, 1057, 397, 1790, 1694,
	1193, 1470, 393, 2016, 1760, 901, 902, 904, 1427, 924,
	708, 1377, 1376, 61, 1399, 1059, 457, 1058, 1930, 1060,
	1398, 398, 814, 854, 1209, 1213, 394, 1216, 1409, 1699,
	810, 1570, 1741, 1701, 1807, 1411, 1296, 1295, 1755, 914,
	1236, 1236, 1247, 2004, 1258, 396, 1581, 1580, 537, 497,
	1270, 1271, 1272, 760, 496, 1406, 1180, 1404, 454, 812,
	575, 2006, 1761, 1560, 1690, 1725, 1314, 1804, 1576, 457,
	813, 1380, 1228, 524, 1873, 81, 1421, 1485, 1464, 1461,
	1462, 1463, 1455, 1456, 1457, 1458, 1460, 1788, 529, 1805,
	1436, 414, 414, 1484, 1603, 1533, 1515, 760, 1447, 1414,
	1316, 1082, 1384, 1027, 719, 556, 555, 554, 553, 552,
	551, 548, 81, 81, 495, 1541, 908, 905, 906, 907,
	899, 900, 901, 902, 904, 402, 924, 79, 959, 414,
	573, 414, 846, 576, 1487, 1488, 1489, 1227, 1957, 81,
	1927, 395, 81, 1681, 81, 1524, 1249, 1522, 463, 1506,
	1388, 81, 1509, 1370, 1124, 1116, 1055, 1513, 746, 79,
	1566, 744, 741, 81, 736, 1536, 717, 81, 1523, 1391,
	1525, 1527, 1563, 1540, 285, 79, 81, 713, 709, 1621,
	1386, 1372, 79, 79, 79, 398, 734, 1825, 1389, 1130,
	586, 467, 1543, 1571, 1542, 1544, 1553, 1555, 1556, 1304,
	1561, 1990, 1387, 77, 286, 79, 79, 76, 1589, 834,
	1590, 544, 3, 802, 881, 802, 1606, 1754, 638, 1827,
	1015, 81, 1617, 1618, 1619, 1573, 1587, 1588, 999, 1538,
	1836, 1888, 388, 1922, 1014, 414, 1583, 802, 414, 414,
	414, 414, 414, 853, 999, 1577, 590, 1131, 414, 414,
	1012, 1206, 1018, 1578, 402, 1017, 1390, 1582, 587, 468,
	1910, 1737, 871, 1119, 796, 783, 783, 431, 1614, 1115,
	1038, 287, 889, 2015, 806, 752, 1064, 1418, 2014, 399,
	463, 1420, 1676, 891, 475, 1557, 1630, 1628, 81, 81,
	81, 545, 1453, 1454, 1431, 1432, 1633, 81, 81, 895,
	896, 782, 782, 81, 1548, 81, 1499, 81, 81, 81,
	1342, 1384, 81, 81, 1753, 1278, 1145, 1631, 1697, 1698,
	1663, 1094, 1093, 434, 435, 1635, 1636, 1275, 1274, 1664,
	1479, 1222, 1095, 939, 1775, 1907, 1847, 1677, 1743, 1714,
	1620, 1492, 1680, 1367, 1096, 81, 81, 1026, 1025, 952,
	1572, 440, 1812, 390, 759, 759, 845, 549, 1667, 1388,
	1952, 81, 81, 1781, 1439, 81, 1735, 1733, 1732, 1849,
	81, 1869, 1733, 1732, 783, 1738, 81, 1720, 1391, 1226,
	1731, 1715, 1529, 1530, 79, 1731, 957, 1757, 38, 1386,
	1729, 1742, 1004, 614, 1682, 1512, 79, 1389, 1110, 1736,
	79, 1021, 1109, 1719, 79, 1769, 760, 81, 1744, 288,
	782, 1387, 835, 824, 1765, 637, 818, 827, 785, 1235,
	79, 1146, 1046, 1047, 692, 79, 639, 757, 79, 640,
	414, 414, 783, 414, 758, 760, 760, 985, 627, 755,
	510, 1381, 1042, 1223, 760, 760, 1435, 955, 613, 619,
	618, 1750, 1751, 1210, 784, 1756, 520, 1758, 1392, 51,
	534, 408, 81, 759, 81, 1390, 81, 81, 782, 409,
	1592, 1787, 1324, 1716, 1125, 81, 783, 760, 877, 1521,
	445, 1450, 522, 1256, 1248, 1245, 802, 891, 569, 698,
	1043, 546, 1330, 1063, 595, 1610, 885, 466, 81, 465,
	1105, 543, 811, 1087, 436, 1799, 1882, 1117, 1289, 2009,
	1887, 1518, 782, 1934, 1800, 68, 1313, 26, 24, 1826,
	81, 759, 21, 1835, 19, 18, 1802, 81, 17, 25,
	15, 14, 1837, 1099, 13, 12, 81, 37, 36, 1733,
	1732, 35, 1840, 1828, 34, 81, 81, 33, 79, 1106,
	32, 6, 1731, 5, 2, 891, 1661, 1, 0, 0,
	0, 0, 1846, 0, 0, 759, 1862, 1671, 1868, 0,
	1853, 1848, 0, 1821, 1822, 0, 1820, 1863, 1860, 0,
	0, 79, 0, 0, 414, 81, 0, 0, 0, 0,
	0, 0, 1875, 0, 1884, 760, 0, 1250, 0, 0,
	0, 1843, 0, 0, 81, 81, 0, 0, 81, 0,
	0, 0, 81, 1879, 0, 0, 0, 81, 0, 0,
	1896, 1878, 0, 0, 0, 1904, 1856, 1898, 1453, 1454,
	1900, 0, 1905, 0, 0, 81, 0, 0, 1733, 1732,
	285, 81, 81, 1897, 0, 457, 0, 1908, 0, 0,
	0, 1731, 1911, 1748, 0, 0, 1914, 1912, 1917, 0,
	0, 1921, 0, 1918, 81, 724, 81, 81, 0, 81,
	286, 1915, 0, 0, 0, 1924, 1916, 1899, 1938, 1940,
	0, 0, 0, 79, 1284, 1285, 0, 1932, 1944, 1004,
	81, 1943, 1292, 0, 1942, 760, 0, 0, 1297, 1298,
	1300, 1302, 1303, 0, 1941, 0, 1308, 1948, 1835, 1310,
	79, 1733, 1732, 1947, 1945, 1946, 79, 0, 81, 0,
	81, 0, 0, 79, 1731, 1328, 1973, 1967, 1459, 1936,
	599, 599, 79, 1969, 1971, 0, 0, 287, 81, 700,
	756, 1970, 79, 0, 0, 1983, 0, 1987, 0, 1985,
	0, 0, 0, 0, 1992, 0, 1991, 0, 725, 0,
	0, 1996, 1994, 1099, 802, 0, 608, 1995, 0, 1099,
	0, 0, 0, 0, 0, 2008, 2007, 2012, 0, 0,
	1469, 0, 760, 0, 0, 783, 0, 0, 0, 0,
	0, 0, 785, 785, 0, 0, 2018, 0, 78, 871,
	0, 871, 0, 414, 0, 0, 0, 79, 0, 0,
	0, 1375, 0, 0, 783, 783, 0, 0, 0, 0,
	1378, 782, 0, 783, 783, 0, 1250, 1250, 784, 784,
	79, 0, 0, 0, 895, 896, 471, 0, 0, 478,
	481, 0, 471, 0, 0, 1470, 0, 0, 878, 880,
	782, 782, 0, 895, 896, 887, 783, 898, 0, 782,
	782, 0, 0, 0, 0, 760, 0, 933, 934, 935,
	936, 937, 0, 0, 759, 0, 898, 942, 0, 897,
	0, 1250, 1250, 1250, 0, 912, 0, 0, 0, 0,
	0, 0, 782, 0, 0, 0, 0, 956, 897, 0,
	1692, 785, 1685, 759, 759, 0, 0, 0, 0, 0,
	1683, 0, 759, 759, 1687, 1902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1463, 1455, 1456, 1457, 1458,
	1460, 0, 1693, 0, 903, 0, 0, 784, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 0, 0, 0,
	0, 0, 1686, 903, 0, 0, 0, 0, 0, 785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 783, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 0, 0, 0, 784, 0, 0, 1955, 0,
	0, 0, 0, 785, 0, 913, 0, 895, 896, 0,
	782, 0, 0, 0, 0, 0, 0, 0, 79, 79,
	1688, 0, 1689, 0, 0, 1975, 0, 0, 0, 0,
	898, 471, 0, 481, 1250, 1250, 0, 0, 0, 784,
	0, 0, 0, 0, 0, 1558, 0, 0, 1004, 1691,
	871, 914, 897, 0, 0, 0, 1694, 1568, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 0, 79,
	914, 0, 0, 79, 783, 0, 0, 0, 0, 0,
	0, 0, 1596, 0, 0, 1250, 1250, 1250, 1250, 1250,
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
	1250, 1250, 1250, 1250, 0, 1250, 0, 903, 0, 0,
	782, 0, 0, 0, 756, 756, 0, 0, 0, 0,
	0, 1690, 0, 0, 0, 0, 0, 1625, 908, 905,
	906, 907, 899, 900, 901, 902, 904, 0, 924, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 906,
	907, 899, 900, 901, 902, 904, 0, 924, 599, 913,
	0, 783, 0, 759, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 0, 1183, 0, 1185,
	1186, 1187, 1188, 0, 1678, 1679, 1004, 782, 0, 0,
	0, 0, 0, 891, 891, 0, 0, 471, 0, 1705,
	0, 1706, 0, 79, 1708, 1709, 0, 0, 1712, 79,
	0, 0, 0, 756, 914, 615, 49, 1232, 1233, 0,
	0, 1246, 0, 1257, 1259, 1264, 1267, 1268, 1269, 696,
	0, 0, 0, 0, 783, 0, 0, 0, 0, 1728,
	759, 891, 1106, 0, 1728, 723, 0, 0, 700, 0,
	0, 415, 471, 731, 731, 0, 49, 79, 79, 0,
	0, 79, 0, 0, 0, 0, 1596, 0, 0, 416,
	782, 756, 1763, 0, 0, 478, 481, 450, 0, 0,
	458, 0, 0, 0, 0, 0, 1319, 49, 1322, 0,
	0, 0, 0, 0, 907, 899, 900, 901, 902, 904,
	0, 924, 785, 1782, 0, 418, 0, 0, 0, 0,
	423, 424, 0, 1250, 429, 756, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 417, 419, 0, 0,
	1348, 785, 785, 1416, 1417, 0, 0, 0, 784, 0,
	785, 785, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1004, 0,
	1801, 0, 414, 1803, 0, 420, 0, 784, 784, 0,
	0, 79, 0, 785, 0, 0, 784, 784, 0, 421,
	422, 0, 0, 887, 0, 0, 0, 0, 1476, 1477,
	1478, 0, 0, 0, 891, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1250, 784,
	0, 1728, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 1851, 0, 1453, 1454, 0, 1471, 1472,
	1473, 0, 79, 1401, 1402, 0, 0, 0, 0, 1407,
	0, 891, 1596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 471, 0, 0, 0,
	481, 0, 1430, 0, 471, 0, 1468, 0, 0, 0,
	1438, 871, 0, 0, 1443, 0, 458, 0, 0, 0,
	1044, 785, 0, 1250, 0, 481, 0, 0, 481, 0,
	1889, 1890, 0, 426, 1894, 0, 0, 427, 1895, 942,
	1728, 0, 428, 414, 0, 1264, 1264, 1264, 0, 0,
	0, 0, 0, 0, 0, 1459, 430, 784, 0, 1913,
	0, 891, 0, 0, 0, 0, 0, 1596, 891, 0,
	0, 1601, 1602, 0, 0, 1475, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	1931, 0, 891, 79, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 599, 1469, 0, 0,
	0, 0, 0, 1728, 599, 0, 1851, 0, 700, 0,
	0, 785, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 0, 1659, 0, 79, 0, 891, 0, 471, 0,
	0, 0, 0, 0, 756, 0, 0, 784, 0, 0,
	0, 0, 0, 0, 1984, 0, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
	0, 1140, 0, 756, 756, 1599, 0, 0, 1600, 0,
	0, 0, 756, 756, 0, 0, 0, 0, 0, 1605,
	0, 0, 0, 0, 0, 450, 0, 0, 785, 0,
	0, 0, 0, 1348, 0, 0, 0, 0, 895, 896,
	0, 0, 1622, 0, 0, 756, 0, 0, 0, 0,
	0, 0, 1632, 0, 0, 0, 1634, 0, 0, 0,
	0, 898, 0, 0, 784, 1465, 1466, 1467, 0, 1464,
	1461, 1462, 1463, 1455, 1456, 1457, 1458, 1460, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 0, 0, 1665,
	1666, 0, 0, 0, 0, 28, 0, 0, 1672, 1673,
	1674, 0, 0, 1283, 0, 0, 29, 53, 0, 0,
	0, 785, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 55, 0, 0, 0, 0, 1317, 31, 903, 60,
	0, 0, 599, 723, 0, 0, 0, 784, 0, 0,
	0, 450, 723, 0, 450, 450, 0, 0, 44, 0,
	0, 0, 471, 756, 0, 39, 0, 0, 56, 0,
	0, 0, 43, 40, 0, 0, 0, 0, 941, 0,
	1809, 1747, 945, 946, 0, 0, 0, 0, 0, 45,
	913, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 895, 896, 0, 0, 0, 1768, 925,
	926, 927, 1771, 1772, 0, 0, 0, 1774, 0, 0,
	0, 1776, 0, 0, 0, 0, 898, 1369, 1780, 929,
	0, 0, 1783, 895, 896, 0, 915, 916, 917, 925,
	926, 927, 0, 0, 0, 0, 0, 0, 897, 918,
	1140, 0, 0, 0, 912, 914, 898, 0, 0, 929,
	0, 0, 0, 756, 0, 1792, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 1872, 0, 0, 897, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 58,
	30, 0, 0, 46, 0, 57, 49, 0, 49, 0,
	0, 47, 0, 903, 67, 0, 0, 1819, 0, 50,
	52, 0, 0, 49, 0, 0, 0, 0, 49, 54,
	0, 0, 922, 930, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 903, 0, 1838, 899, 900, 901, 902,
	904, 59, 924, 0, 0, 0, 0, 0, 0, 920,
	756, 0, 922, 930, 0, 913, 70, 0, 0, 1855,
	1923, 0, 0, 0, 65, 0, 0, 928, 0, 0,
	66, 1864, 1865, 0, 0, 0, 0, 0, 0, 920,
	0, 0, 0, 0, 0, 913, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1877, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 0, 0, 1881, 0, 0, 0, 0, 0, 0,
	914, 1453, 1454, 0, 1471, 1472, 1473, 0, 0, 0,
	0, 0, 923, 756, 0, 700, 0, 1766, 1044, 1140,
	0, 895, 896, 0, 915, 916, 917, 925, 926, 927,
	914, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	1141, 0, 923, 0, 898, 0, 0, 929, 0, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 1140,
	921, 0, 912, 1140, 0, 0, 1200, 908, 905, 906,
	907, 899, 900, 901, 902, 904, 0, 924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	921, 1459, 0, 909, 910, 911, 0, 908, 905, 906,
	907, 899, 900, 901, 902, 904, 0, 924, 0, 0,
	1968, 903, 0, 0, 1795, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 1982, 1982,
	922, 930, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 1982, 0, 0, 920, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 0, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 1982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1707, 0, 0, 0, 0, 1470, 1713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 49, 0, 1140, 1140, 0,
	0, 1140, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1397,
	0, 1465, 1466, 1467, 0, 1464, 1461, 1462, 1463, 1455,
	1456, 1457, 1458, 1460, 0, 0, 0, 0, 921, 0,
	0, 909, 910, 911, 0, 908, 905, 906, 907, 899,
	900, 901, 902, 904, 0, 924, 0, 0, 1200, 0,
	0, 0, 1495, 0, 0, 895, 896, 0, 915, 916,
	917, 925, 926, 927, 0, 0, 0, 941, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 0, 898, 0,
	0, 929, 0, 0, 0, 0, 895, 896, 0, 915,
	916, 917, 925, 926, 927, 0, 0, 0, 0, 0,
	897, 1810, 918, 0, 0, 0, 912, 0, 0, 898,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 1845, 0, 0, 0,
	0, 0, 0, 0, 0, 903, 0, 0, 0, 0,
	0, 0, 1140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 922, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 928,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	0, 920, 0, 0, 0, 922, 930, 913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 920, 0, 0, 0, 0, 0, 913, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	0, 0, 1141, 0, 0, 0, 0, 0, 0, 0,
	0, 919, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 914, 0, 895, 896, 0, 915, 916, 917,
	925, 926, 927, 0, 923, 0, 0, 0, 0, 0,
	918, 0, 0, 1933, 0, 0, 0, 898, 0, 0,
	929, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 1453, 1454, 897,
	1471, 1472, 1473, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 1608, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 1044, 909, 910, 911, 0, 908,
	905, 906, 907, 899, 900, 901, 902, 904, 0, 924,
	0, 0, 0, 0, 0, 0, 1494, 0, 1468, 0,
	0, 0, 0, 921, 903, 0, 909, 910, 911, 0,
	908, 905, 906, 907, 899, 900, 901, 902, 904, 0,
	924, 0, 0, 922, 930, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	920, 0, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1141, 1141, 0, 919,
	1141, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 923, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 909, 910, 911, 0, 908, 905,
	906, 907, 899, 900, 901, 902, 904, 0, 924, 0,
	0, 0, 0, 0, 0, 1445, 0, 1829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 1465, 1466, 1467,
	0, 1464, 1461, 1462, 1463, 1455, 1456, 1457, 1458, 1460,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 84, 303, 85, 304,
	305, 306, 307, 211, 308, 309, 310, 311, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 312, 90,
	218, 219, 91, 313, 314, 220, 221, 222, 315, 223,
	316, 289, 317, 92, 93, 94, 941, 95, 318, 96,
	97, 98, 319, 290, 99, 100, 320, 321, 322, 323,
	324, 325, 101, 102, 103, 104, 224, 105, 225, 226,
	326, 106, 327, 107, 328, 329, 330, 108, 109, 331,
	110, 332, 0, 333, 227, 111, 112, 228, 229, 334,
	335, 336, 113, 114, 230, 0, 115, 337, 116, 338,
	339, 291, 340, 117, 231, 341, 232, 342, 118, 119,
	120, 121, 233, 234, 293, 343, 124, 344, 122, 345,
	292, 123, 235, 236, 237, 238, 346, 239, 347, 294,
	125, 295, 126, 127, 348, 129, 128, 349, 240, 296,
	130, 297, 350, 131, 351, 352, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 353, 141,
	354, 241, 143, 242, 144, 145, 355, 146, 356, 357,
	358, 359, 147, 243, 299, 148, 300, 244, 149, 150,
	151, 152, 360, 245, 153, 246, 154, 361, 155, 156,
	157, 247, 158, 159, 362, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 363, 170, 301, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 364, 249, 178,
	179, 365, 180, 181, 302, 182, 250, 251, 183, 366,
	189, 184, 185, 186, 188, 252, 187, 253, 367, 190,
	368, 191, 192, 193, 369, 254, 255, 256, 370, 371,
	194, 257, 258, 372, 195, 196, 197, 198, 373, 374,
	199, 200, 201, 375, 202, 376, 203, 204, 205, 259,
	260, 377, 378, 206, 379, 380, 381, 382, 207, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1591, 83,
	84, 303, 85, 304, 305, 306, 307, 211, 308, 309,
	310, 311, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 312, 90, 218, 219, 91, 313, 314, 220,
	221, 222, 315, 223, 316, 289, 317, 92, 93, 94,
	0, 95, 318, 96, 97, 98, 319, 290, 99, 100,
	320, 321, 322, 323, 324, 325, 101, 102, 103, 104,
	224, 105, 225, 226, 326, 106, 327, 107, 328, 329,
	330, 108, 109, 331, 110, 332, 0, 333, 227, 111,
	112, 228, 229, 334, 335, 336, 113, 114, 230, 0,
	115, 337, 116, 338, 339, 291, 340, 117, 231, 341,
	232, 342, 118, 119, 120, 121, 233, 234, 293, 343,
	124, 344, 122, 345, 292, 123, 235, 236, 237, 238,
	346, 239, 347, 294, 125, 295, 126, 127, 348, 129,
	128, 349, 240, 296, 130, 297, 350, 131, 351, 352,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 353, 141, 354, 241, 143, 242, 144, 145,
	355, 146, 356, 357, 358, 359, 147, 243, 299, 148,
	300, 244, 149, 150, 151, 152, 360, 245, 153, 246,
	154, 361, 155, 156, 157, 247, 158, 159, 362, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 363,
	170, 301, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 364, 249, 178, 179, 365, 180, 181, 302, 182,
	250, 251, 183, 366, 189, 184, 185, 186, 188, 252,
	187, 253, 367, 190, 368, 191, 192, 193, 369, 254,
	255, 256, 370, 371, 194, 257, 258, 372, 195, 196,
	197, 198, 373, 374, 199, 200, 201, 375, 202, 376,
	203, 204, 205, 259, 260, 377, 378, 206, 379, 380,
	381, 382, 207, 208, 209, 210, 284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 728,
	0, 0, 83, 84, 303, 85, 304, 305, 306, 307,
	211, 308, 309, 310, 311, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 312, 90, 218, 219, 91,
	313, 314, 220, 221, 222, 315, 223, 316, 289, 317,
	92, 93, 94, 0, 95, 318, 96, 97, 98, 319,
	290, 99, 100, 320, 321, 322, 323, 324, 325, 101,
	102, 103, 104, 224, 105, 225, 226, 326, 106, 327,
	107, 328, 329, 330, 108, 109, 331, 110, 332, 0,
	333, 227, 111, 112, 228, 229, 334, 335, 336, 113,
	114, 230, 0, 115, 337, 116, 338, 339, 291, 340,
	117, 231, 341, 232, 342, 118, 119, 120, 121, 233,
	234, 293, 343, 124, 344, 122, 345, 292, 123, 235,
	236, 237, 238, 346, 239, 347, 294, 125, 295, 126,
	127, 348, 129, 128, 349, 240, 296, 130, 297, 350,
	131, 351, 352, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 353, 141, 354, 241, 143,
	242, 144, 145, 355, 146, 356, 357, 358, 359, 147,
	243, 299, 148, 300, 244, 149, 150, 151, 152, 360,
	245, 153, 246, 154, 361, 155, 156, 157, 247, 158,
	159, 362, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 363, 170, 301, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 364, 249, 178, 179, 365, 180,
	181, 302, 182, 250, 251, 183, 366, 189, 184, 185,
	186, 188, 252, 187, 253, 367, 190, 368, 191, 192,
	193, 369, 254, 255, 256, 370, 371, 194, 257, 258,
	372, 195, 196, 197, 198, 373, 374, 199, 200, 201,
	375, 202, 376, 203, 204, 205, 259, 260, 377, 378,
	206, 379, 380, 381, 382, 207, 208, 209, 210, 635,
	624, 625, 622, 623, 611, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 84, 1218, 85, 0,
	0, 0, 0, 651, 617, 0, 0, 0, 86, 87,
	88, 212, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 632, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	0, 106, 0, 107, 0, 1219, 0, 665, 109, 0,
	110, 0, 0, 0, 616, 111, 112, 652, 653, 630,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 605, 141,
	631, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	620, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 629, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 1217, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 603, 1220, 0, 0, 0, 604,
	0, 0, 612, 1215, 0, 0, 0, 610, 635, 624,
	625, 622, 623, 611, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 0, 651, 617, 0, 0, 0, 86, 87, 88,
	212, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 632, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 105, 673, 674, 701,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 616, 111, 112, 652, 653, 630, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 120,
	121, 659, 661, 293, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 664, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 605, 141, 631,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 620,
	173, 0, 174, 175, 176, 177, 67, 249, 178, 179,
	648, 180, 181, 302, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 69,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	657, 658, 629, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 517, 686,
	0, 0, 206, 0, 0, 0, 65, 207, 208, 209,
	210, 606, 66, 635, 624, 625, 622, 623, 611, 0,
	0, 0, 602, 603, 0, 0, 0, 0, 604, 83,
	84, 612, 85, 0, 0, 0, 610, 651, 617, 0,
	0, 0, 86, 87, 88, 212, 666, 214, 667, 89,
	668, 669, 0, 90, 218, 219, 91, 632, 650, 670,
	671, 222, 0, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	672, 105, 673, 674, 0, 106, 0, 107, 0, 0,
	0, 665, 109, 0, 110, 0, 0, 0, 616, 111,
	112, 652, 653, 630, 0, 0, 113, 114, 675, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 676, 677, 678, 679,
	0, 642, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 605, 141, 631, 660, 143, 680, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 681, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 620, 173, 0, 174, 175, 176,
	177, 67, 249, 178, 179, 648, 180, 181, 302, 182,
	682, 251, 183, 0, 189, 184, 185, 186, 188, 683,
	187, 656, 0, 190, 69, 191, 192, 193, 0, 254,
	684, 685, 0, 0, 194, 657, 658, 629, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 517, 686, 0, 0, 206, 0, 0,
	0, 65, 207, 208, 209, 210, 606, 66, 635, 624,
	625, 622, 623, 611, 0, 0, 0, 602, 603, 0,
	0, 0, 0, 604, 83, 84, 612, 85, 0, 0,
	0, 610, 651, 617, 0, 0, 0, 86, 87, 88,
	212, 666, 214, 667, 89, 668, 669, 1260, 90, 218,
	219, 91, 632, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 105, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 616, 111, 112, 652, 653, 630, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 1265,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 120,
	121, 659, 661, 293, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 1261, 664, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 605, 141, 631,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 620,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	648, 180, 181, 302, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 1262, 194,
	657, 658, 629, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 0, 0, 0, 0, 207, 208, 209,
	210, 606, 0, 635, 624, 625, 622, 623, 611, 0,
	0, 0, 602, 603, 0, 0, 0, 0, 604, 83,
	84, 612, 85, 0, 0, 0, 610, 651, 617, 0,
	0, 0, 86, 87, 88, 212, 666, 214, 667, 89,
	668, 669, 0, 90, 218, 219, 91, 632, 650, 670,
	671, 222, 0, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	672, 105, 673, 674, 0, 106, 0, 107, 0, 0,
	0, 665, 109, 0, 110, 0, 0, 0, 616, 111,
	112, 652, 653, 630, 0, 0, 113, 114, 675, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 676, 677, 678, 679,
	0, 642, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 605, 141, 631, 660, 143, 680, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 681, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 620, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 648, 180, 181, 302, 182,
	682, 251, 183, 0, 189, 184, 185, 186, 188, 683,
	187, 656, 0, 190, 0, 191, 192, 193, 0, 254,
	684, 685, 0, 0, 194, 657, 658, 629, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 259, 686, 0, 0, 206, 0, 0,
	0, 0, 207, 208, 209, 210, 606, 0, 0, 0,
	0, 635, 624, 625, 622, 623, 611, 602, 603, 0,
	0, 0, 0, 604, 948, 1211, 612, 83, 84, 0,
	85, 610, 0, 0, 0, 651, 617, 0, 0, 0,
	86, 87, 88, 212, 666, 214, 667, 89, 668, 669,
	0, 90, 218, 219, 91, 632, 650, 670, 671, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 672, 105,
	673, 674, 0, 106, 0, 107, 0, 0, 0, 665,
	109, 0, 110, 0, 0, 0, 616, 111, 112, 652,
	653, 630, 0, 0, 113, 114, 675, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 676, 677, 678, 679, 0, 642,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	605, 141, 631, 660, 143, 680, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 681, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 620, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 648, 180, 181, 302, 182, 682, 251,
	183, 0, 189, 184, 185, 186, 188, 683, 187, 656,
	0, 190, 0, 191, 192, 193, 0, 254, 684, 685,
	0, 0, 194, 657, 658, 629, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 259, 686, 0, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 606, 0, 635, 624, 625, 622,
	623, 611, 0, 0, 0, 602, 603, 600, 0, 0,
	0, 604, 83, 84, 612, 85, 0, 0, 0, 610,
	651, 617, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	632, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 0, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 616, 111, 112, 652, 653, 630, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 605, 141, 631, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 620, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	629, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 603, 0, 0, 0, 0, 604, 0, 0, 612,
	1662, 0, 0, 0, 610, 635, 624, 625, 622, 623,
	611, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 0, 85, 0, 0, 0, 0, 651,
	617, 0, 0, 0, 86, 87, 88, 212, 666, 214,
	667, 89, 668, 669, 0, 90, 218, 219, 91, 632,
	650, 670, 671, 222, 0, 662, 0, 643, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 644, 646, 0, 645, 647, 101, 102,
	103, 104, 672, 105, 673, 674, 0, 106, 0, 107,
	0, 0, 0, 665, 109, 0, 110, 0, 0, 0,
	616, 111, 112, 652, 653, 630, 0, 0, 113, 114,
	675, 0, 115, 0, 116, 0, 0, 291, 0, 117,
	663, 0, 232, 0, 118, 119, 120, 121, 659, 661,
	293, 0, 124, 0, 122, 0, 292, 123, 676, 677,
	678, 679, 0, 642, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 664, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 605, 141, 631, 660, 143, 680,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 654, 149, 150, 151, 152, 0, 655,
	153, 246, 154, 0, 155, 156, 157, 681, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 620, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 648, 180, 181,
	302, 182, 682, 251, 183, 0, 189, 184, 185, 186,
	188, 683, 187, 656, 0, 190, 0, 191, 192, 193,
	0, 254, 684, 685, 0, 0, 194, 657, 658, 629,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 649,
	202, 0, 203, 204, 205, 259, 686, 1616, 0, 206,
	0, 0, 0, 0, 207, 208, 209, 210, 606, 0,
	635, 624, 625, 622, 623, 611, 0, 0, 0, 602,
	603, 0, 0, 0, 0, 604, 83, 84, 612, 85,
	0, 0, 0, 610, 651, 617, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 632, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 616, 111, 112, 652, 653,
	630, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 605,
	141, 631, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 620, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 629, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	259, 686, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 606, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 603, 0, 0, 0, 0,
	604, 0, 0, 612, 1611, 0, 0, 0, 610, 635,
	624, 625, 622, 623, 611, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 84, 0, 85, 0,
	0, 0, 0, 651, 617, 0, 0, 0, 86, 87,
	88, 212, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 632, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	701, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 616, 111, 112, 652, 653, 630,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 605, 141,
	631, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	620, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 629, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 606, 0, 635, 624, 625, 622, 623, 611,
	0, 0, 0, 602, 603, 0, 0, 0, 0, 604,
	83, 84, 612, 85, 0, 0, 0, 610, 651, 617,
	0, 0, 0, 86, 87, 88, 212, 666, 214, 667,
	89, 668, 669, 0, 90, 218, 219, 91, 632, 650,
	670, 671, 222, 0, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 672, 105, 673, 674, 0, 106, 0, 107, 0,
	0, 0, 665, 109, 0, 110, 0, 0, 0, 616,
	111, 112, 652, 653, 630, 0, 0, 113, 114, 675,
	0, 115, 0, 116, 0, 1265, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 676, 677, 678,
	679, 0, 642, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 605, 141, 631, 660, 143, 680, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 681, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 620, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 648, 180, 181, 302,
	182, 682, 251, 183, 0, 189, 184, 185, 186, 188,
	683, 187, 656, 0, 190, 0, 191, 192, 193, 0,
	254, 684, 685, 0, 0, 194, 657, 658, 629, 195,
	196, 197, 198, 0, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 259, 686, 0, 0, 206, 0,
	0, 0, 0, 207, 208, 209, 210, 606, 0, 635,
	624, 625, 622, 623, 611, 0, 0, 0, 602, 603,
	0, 0, 0, 0, 604, 83, 84, 612, 85, 0,
	0, 0, 610, 651, 617, 0, 0, 0, 86, 87,
	88, 212, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 632, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	0, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 616, 111, 112, 652, 653, 630,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 605, 141,
	631, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	620, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 629, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 603, 0, 0, 0, 0, 604,
	0, 0, 612, 1214, 0, 0, 0, 610, 635, 624,
	625, 622, 623, 611, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 879, 85, 0, 0,
	0, 0, 651, 617, 0, 0, 0, 86, 87, 88,
	212, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 632, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 105, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 616, 111, 112, 652, 653, 630, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 120,
	121, 659, 661, 293, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 664, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 605, 141, 631,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 620,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	648, 180, 181, 302, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	657, 658, 629, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 0, 0, 0, 0, 207, 208, 209,
	210, 606, 0, 635, 624, 625, 622, 623, 611, 0,
	0, 0, 602, 603, 0, 0, 0, 0, 604, 83,
	84, 612, 85, 0, 0, 0, 610, 651, 617, 0,
	0, 0, 86, 87, 88, 212, 666, 214, 667, 89,
	668, 669, 0, 90, 218, 219, 91, 632, 650, 670,
	671, 222, 0, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 1981,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	672, 105, 673, 674, 0, 106, 0, 107, 0, 0,
	0, 665, 109, 0, 110, 0, 0, 0, 616, 111,
	112, 652, 653, 630, 0, 0, 113, 114, 675, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 676, 677, 678, 679,
	0, 642, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 605, 141, 631, 660, 143, 680, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 681, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 620, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 648, 180, 181, 302, 182,
	682, 251, 183, 0, 189, 184, 185, 186, 188, 683,
	187, 656, 0, 190, 0, 191, 192, 193, 0, 254,
	684, 685, 0, 0, 194, 657, 658, 629, 195, 196,
	1980, 198, 0, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 259, 686, 0, 0, 206, 0, 0,
	0, 0, 207, 208, 209, 210, 606, 0, 635, 624,
	625, 622, 623, 611, 0, 0, 0, 602, 603, 0,
	0, 0, 0, 604, 83, 84, 612, 85, 0, 0,
	0, 610, 651, 617, 0, 0, 0, 86, 87, 88,
	1979, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 632, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 1981, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 105, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 616, 111, 112, 652, 653, 630, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 120,
	121, 659, 661, 293, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 664, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 605, 141, 631,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 620,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	648, 180, 181, 302, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	657, 658, 629, 195, 196, 1980, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 0, 0, 0, 0, 207, 208, 209,
	210, 606, 0, 635, 624, 625, 622, 623, 611, 0,
	0, 0, 602, 603, 0, 0, 0, 0, 604, 83,
	84, 612, 85, 0, 0, 0, 610, 651, 617, 0,
	0, 0, 86, 87, 88, 212, 666, 214, 667, 89,
	668, 669, 0, 90, 218, 219, 91, 632, 650, 670,
	671, 222, 0, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	672, 105, 673, 674, 0, 106, 0, 107, 0, 0,
	0, 665, 109, 0, 110, 0, 0, 0, 616, 111,
	112, 652, 653, 630, 0, 0, 113, 114, 675, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 676, 677, 678, 679,
	0, 642, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 605, 141, 631, 660, 143, 680, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 681, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 620, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 648, 180, 181, 302, 182,
	682, 251, 183, 0, 189, 184, 185, 186, 188, 683,
	187, 656, 0, 190, 0, 191, 192, 193, 0, 254,
	684, 685, 0, 0, 194, 657, 658, 629, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 259, 686, 0, 0, 206, 0, 0,
	0, 0, 207, 208, 209, 210, 606, 0, 1237, 624,
	625, 622, 623, 611, 0, 0, 0, 602, 603, 0,
	0, 0, 0, 604, 83, 84, 612, 85, 0, 0,
	0, 610, 651, 617, 0, 0, 0, 86, 87, 88,
	212, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 632, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 1240, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 616, 111, 112, 652, 653, 630, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 1241,
	121, 659, 661, 293, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 664, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 1242, 1239,
	136, 137, 298, 138, 139, 142, 140, 605, 141, 631,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 620,
	173, 0, 174, 175, 176, 1243, 0, 249, 178, 179,
	648, 180, 181, 302, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	657, 658, 629, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 0, 0, 0, 0, 207, 208, 1238,
	210, 606, 0, 635, 624, 625, 622, 623, 611, 0,
	0, 0, 602, 603, 0, 0, 0, 0, 604, 83,
	84, 612, 85, 0, 0, 0, 610, 651, 617, 0,
	0, 0, 86, 87, 88, 212, 666, 214, 667, 89,
	668, 669, 0, 90, 218, 219, 91, 632, 650, 670,
	671, 222, 0, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	672, 105, 673, 674, 0, 106, 0, 107, 0, 0,
	0, 665, 109, 0, 110, 0, 0, 0, 616, 111,
	112, 652, 653, 630, 0, 0, 113, 114, 675, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 676, 677, 678, 679,
	0, 642, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 0, 141, 631, 660, 143, 680, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 681, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 1255, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 648, 180, 181, 302, 182,
	682, 251, 183, 0, 189, 184, 185, 186, 188, 683,
	187, 656, 0, 190, 0, 191, 192, 193, 0, 254,
	684, 685, 0, 0, 194, 657, 658, 629, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 259, 686, 0, 0, 206, 0, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 635, 624,
	625, 622, 623, 611, 0, 0, 0, 1251, 1252, 0,
	0, 0, 0, 1253, 83, 84, 1254, 85, 0, 0,
	0, 610, 651, 617, 0, 0, 0, 86, 87, 88,
	0, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 632, 650, 670, 671, 222, 0, 662, 0,
	643, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 1981, 0, 644, 646, 0, 645,
	647, 101, 102, 103, 104, 672, 105, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 616, 111, 112, 652, 653, 630, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 663, 0, 232, 0, 118, 119, 120,
	121, 659, 661, 0, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 0, 125,
	295, 126, 127, 0, 129, 128, 0, 664, 296, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 605, 141, 631,
	660, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 654, 149, 150, 151,
	152, 0, 655, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 620,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	648, 180, 181, 0, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 656, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	657, 658, 629, 195, 196, 1980, 198, 0, 0, 199,
	200, 201, 649, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 0, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 635, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 603, 0, 0, 0, 0, 604, 83,
	84, 612, 85, 0, 0, 0, 610, 651, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 650, 220,
	221, 222, 0, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 652, 653, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 235, 236, 237, 238,
	0, 239, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 0, 141, 0, 660, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 648, 180, 181, 302, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 656, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 657, 658, 0, 195, 196,
	197, 198, 513, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 1730, 0, 220, 221,
	222, 0, 223, 0, 289, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 290, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 291, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 293, 0, 124,
	0, 122, 0, 292, 123, 235, 236, 237, 238, 0,
	239, 0, 294, 125, 295, 126, 127, 0, 129, 128,
	0, 240, 296, 130, 297, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 298, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 299, 148, 300,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	301, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	67, 249, 178, 179, 0, 180, 181, 302, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 69, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 0, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 517, 260, 0, 0, 206, 0, 0, 0,
	65, 207, 208, 209, 210, 0, 66, 513, 829, 0,
	830, 825, 820, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 64, 85, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 289,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 833, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 822, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 293, 0, 124, 0, 122, 0, 292, 123,
	235, 236, 237, 238, 0, 239, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 240, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 823, 0, 0, 0,
	147, 243, 299, 148, 300, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 302, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 821, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 513,
	829, 206, 830, 825, 820, 0, 207, 208, 209, 210,
	0, 0, 0, 0, 0, 83, 84, 0, 85, 0,
	0, 831, 826, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 289, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	816, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 822,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 293, 0, 124, 0, 122, 0,
	292, 123, 235, 236, 237, 238, 0, 239, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 240, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 823, 0,
	0, 0, 147, 243, 299, 148, 300, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 302, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 821, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 513, 829, 206, 830, 825, 820, 0, 207, 208,
	209, 210, 0, 0, 0, 0, 0, 83, 84, 0,
	85, 0, 0, 831, 826, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 289, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 822, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 293, 0, 124, 0,
	122, 0, 292, 123, 235, 236, 237, 238, 0, 239,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	240, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	823, 0, 0, 0, 147, 243, 299, 148, 300, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 302, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 821, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 80, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 0, 0, 83,
	84, 0, 85, 0, 0, 831, 826, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 472, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 67, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 69, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 517, 260, 0, 0, 206, 80, 0,
	0, 65, 207, 208, 209, 210, 0, 66, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 0, 211, 0, 0, 0, 1143, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 67, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 69,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 517, 260,
	0, 0, 206, 80, 0, 0, 65, 207, 208, 209,
	210, 0, 66, 0, 0, 0, 0, 0, 0, 83,
	84, 0, 85, 0, 0, 0, 0, 211, 0, 0,
	0, 64, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 472, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 1143, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 721, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 1045, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 1626, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 635, 624, 625, 622, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	0, 85, 697, 0, 0, 0, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 666, 214, 667, 89, 668,
	669, 0, 90, 218, 219, 91, 0, 0, 670, 671,
	222, 0, 223, 0, 289, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 290, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 672,
	105, 673, 674, 0, 106, 0, 107, 0, 0, 0,
	665, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 630, 0, 0, 113, 114, 675, 0, 115,
	0, 116, 0, 0, 291, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 293, 0, 124,
	0, 122, 0, 292, 123, 676, 677, 678, 679, 0,
	642, 0, 294, 125, 295, 126, 127, 0, 129, 128,
	0, 240, 296, 130, 297, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 298, 138, 139, 142,
	140, 0, 141, 631, 241, 143, 680, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 299, 148, 300,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 681, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	301, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 302, 182, 682,
	251, 183, 0, 189, 184, 185, 186, 188, 683, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 684,
	685, 0, 0, 194, 257, 258, 629, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 686, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 800, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 799, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 80, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	83, 84, 0, 85, 0, 0, 0, 803, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 0, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 513, 206, 0,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 83, 84, 0, 85, 0, 0, 0,
	803, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 289,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 293, 0, 124, 0, 122, 0, 292, 123,
	235, 236, 237, 238, 0, 239, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 240, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 299, 148, 300, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 302, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 1007, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 1005, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 1114, 0, 113,
	114, 230, 0, 115, 0, 116, 1010, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 233,
	234, 0, 0, 124, 1112, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 1009, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 1113, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 1007, 223, 0, 0, 1002, 92,
	93, 94, 0, 95, 1005, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 1010, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 1001, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 1009, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 1008, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	1595, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 472, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 750, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 472, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 525,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 484, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	472, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 477, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 472,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 387, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 386, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 1301,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 1299, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 1288, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 870, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 401, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 735, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 0, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 577, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 572, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 531, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 412, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 411, 255, 256, 0, 0, 407,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	412, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 411, 255, 256, 0, 0, 407, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 509,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 506, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 503, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 501, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 480, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 461, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 404, 0, 0, 132, 0, 133,
	134, 135, 136, 412, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 406, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 405, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 411, 255, 256, 0,
	0, 407, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	0, 152, 0, 245, 153, 246, 154, 0, 155, 0,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 0, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 895, 896, 0, 915, 916, 917, 925, 926,
	927, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 0, 0, 898, 895, 896, 929, 915,
	916, 917, 925, 926, 927, 0, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 897, 0, 898,
	0, 0, 929, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 896, 0, 915, 916, 917, 925, 926,
	927, 897, 0, 0, 0, 0, 0, 912, 918, 0,
	0, 0, 0, 0, 0, 898, 0, 0, 929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 922, 930, 0, 0, 0, 903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 922, 930, 0, 920, 0,
	0, 0, 0, 0, 913, 0, 0, 0, 0, 0,
	928, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 919, 913, 0,
	0, 922, 930, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 919, 0, 0, 0, 0, 0, 0, 920, 0,
	0, 0, 0, 0, 913, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 923, 909, 910, 911, 0, 908, 905, 906, 907,
	899, 900, 901, 902, 904, 0, 924, 0, 0, 0,
	1928, 0, 0, 921, 0, 0, 909, 910, 911, 0,
	908, 905, 906, 907, 899, 900, 901, 902, 904, 0,
	924, 0, 0, 0, 1926, 0, 0, 0, 1453, 1454,
	0, 1471, 1472, 1473, 0, 0, 0, 0, 0, 921,
	0, 0, 909, 910, 911, 0, 908, 905, 906, 907,
	899, 900, 901, 902, 904, 0, 924, 0, 895, 896,
	1901, 915, 916, 917, 925, 926, 927, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 1468,
	0, 898, 895, 896, 929, 915, 916, 917, 925, 926,
	927, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 897, 0, 898, 0, 0, 929, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 896,
	0, 915, 916, 917, 925, 926, 927, 897, 1459, 0,
	0, 0, 0, 912, 918, 0, 0, 0, 0, 0,
	0, 898, 0, 0, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 0, 1474, 897, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 922, 930, 0,
	1469, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 930, 0, 920, 0, 0, 0, 0, 0,
	913, 0, 0, 0, 0, 0, 928, 0, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 0,
	0, 0, 0, 919, 913, 0, 0, 922, 930, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 920, 0, 0, 0, 0, 0,
	913, 0, 0, 0, 0, 914, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 919, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 0, 0, 1465, 1466,
	1467, 0, 1464, 1461, 1462, 1463, 1455, 1456, 1457, 1458,
	1460, 0, 0, 0, 0, 914, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 923, 909, 910,
	911, 0, 908, 905, 906, 907, 899, 900, 901, 902,
	904, 0, 924, 0, 0, 0, 1876, 0, 0, 921,
	0, 0, 909, 910, 911, 0, 908, 905, 906, 907,
	899, 900, 901, 902, 904, 0, 924, 0, 0, 0,
	1871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 909, 910,
	911, 0, 908, 905, 906, 907, 899, 900, 901, 902,
	904, 0, 924, 0, 895, 896, 1867, 915, 916, 917,
	925, 926, 927, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 0, 0, 0, 0, 898, 895, 896,
	929, 915, 916, 917, 925, 926, 927, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 897,
	0, 898, 0, 0, 929, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 896, 0, 915, 916, 917,
	925, 926, 927, 897, 0, 0, 0, 0, 0, 912,
	918, 0, 0, 0, 0, 0, 0, 898, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 922, 930, 0, 0, 0, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 922, 930, 0,
	920, 0, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 928, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 0, 0, 0, 0, 919,
	913, 0, 0, 922, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 919, 0, 0, 0, 0, 0, 0,
	920, 0, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 923, 0, 0, 0, 0, 0, 919,
	0, 0, 0, 0, 0, 914, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 923, 909, 910, 911, 0, 908, 905,
	906, 907, 899, 900, 901, 902, 904, 0, 924, 0,
	0, 0, 1797, 0, 0, 921, 0, 0, 909, 910,
	911, 0, 908, 905, 906, 907, 899, 900, 901, 902,
	904, 0, 924, 0, 0, 0, 1796, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 909, 910, 911, 0, 908, 905,
	906, 907, 899, 900, 901, 902, 904, 0, 924, 0,
	895, 896, 1695, 915, 916, 917, 925, 926, 927, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 0, 0, 898, 895, 896, 929, 915, 916, 917,
	925, 926, 927, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 0, 0, 897, 0, 898, 0, 0,
	929, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 896, 0, 915, 916, 917, 925, 926, 927, 897,
	0, 0, 0, 0, 0, 912, 918, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 0, 0, 897, 0, 0, 0, 0,
	0, 912, 0, 0, 0, 0, 0, 0, 0, 922,
	930, 0, 0, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 922, 930, 0, 920, 0, 0, 0,
	0, 0, 913, 0, 0, 0, 0, 0, 928, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	920, 0, 0, 0, 0, 919, 913, 0, 0, 922,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 919,
	0, 0, 0, 0, 0, 0, 920, 0, 0, 0,
	0, 0, 913, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 919, 0, 0, 0, 0,
	0, 914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 923, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 923,
	909, 910, 911, 0, 908, 905, 906, 907, 899, 900,
	901, 902, 904, 0, 924, 0, 0, 0, 1629, 0,
	0, 921, 0, 0, 909, 910, 911, 0, 908, 905,
	906, 907, 899, 900, 901, 902, 904, 0, 924, 0,
	0, 0, 1613, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	909, 910, 911, 0, 908, 905, 906, 907, 899, 900,
	901, 902, 904, 0, 924, 0, 895, 896, 1207, 915,
	916, 917, 925, 926, 927, 0, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 0, 0, 898,
	895, 896, 929, 915, 916, 917, 925, 926, 927, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 897, 0, 898, 0, 0, 929, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 896, 0, 915,
	916, 917, 925, 926, 927, 897, 0, 0, 0, 0,
	0, 912, 918, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 922, 930, 0, 0, 0,
	903, 2001, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 922,
	930, 0, 920, 0, 0, 0, 0, 0, 913, 0,
	0, 0, 0, 0, 928, 0, 903, 0, 1485, 0,
	0, 1484, 0, 0, 0, 0, 920, 0, 0, 0,
	0, 919, 913, 0, 0, 922, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 919, 0, 0, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 0, 913, 2000,
	0, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 919, 0, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 923, 909, 910, 911, 0,
	908, 905, 906, 907, 899, 900, 901, 902, 904, 0,
	924, 0, 1030, 0, 0, 0, 0, 921, 0, 0,
	909, 910, 911, 0, 908, 905, 906, 907, 899, 900,
	901, 902, 904, 0, 924, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 909, 910, 911, 0,
	908, 905, 906, 907, 899, 900, 901, 902, 904, 0,
	924, 895, 896, 0, 915, 916, 917, 925, 926, 927,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 932,
	0, 0, 1130, 0, 898, 895, 896, 929, 915, 916,
	917, 925, 926, 927, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 931, 897, 0, 898, 0,
	0, 929, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 896, 0, 915, 916, 917, 925, 926, 927,
	897, 0, 0, 0, 0, 0, 912, 918, 0, 0,
	1131, 0, 0, 0, 898, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	922, 930, 0, 0, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 922, 930, 0, 920, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 0, 928,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 0, 0, 0, 0, 919, 913, 0, 0,
	922, 930, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	919, 0, 0, 0, 0, 0, 0, 920, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 919, 456, 0, 0,
	0, 0, 914, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 923, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	923, 909, 910, 911, 0, 908, 905, 906, 907, 899,
	900, 901, 902, 904, 0, 924, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 909, 910, 911, 0, 908,
	905, 906, 907, 899, 900, 901, 902, 904, 0, 924,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 909, 910, 911, 0, 908, 905, 906, 907, 899,
	900, 901, 902, 904, 0, 924, 895, 896, 0, 915,
	916, 917, 925, 926, 927, 0, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 0, 0, 898,
	895, 896, 929, 915, 916, 917, 925, 926, 927, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 897, 0, 898, 0, 0, 929, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 896, 0, 915,
	916, 917, 925, 926, 927, 897, 0, 0, 0, 0,
	0, 912, 918, 0, 0, 0, 1486, 0, 0, 898,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 922, 930, 0, 0, 0,
	903, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 922,
	930, 0, 920, 0, 0, 0, 0, 0, 913, 0,
	0, 0, 0, 0, 928, 0, 903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 0, 0, 0,
	0, 919, 913, 0, 0, 922, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 919, 0, 0, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 0, 913, 0,
	0, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 919, 0, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 0, 0, 1623, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 923, 909, 910, 911, 0,
	908, 905, 906, 907, 899, 900, 901, 902, 904, 0,
	924, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	909, 910, 911, 0, 908, 905, 906, 907, 899, 900,
	901, 902, 904, 0, 924, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 909, 910, 911, 0,
	908, 905, 906, 907, 899, 900, 901, 902, 904, 0,
	924, 895, 896, 0, 915, 916, 917, 925, 926, 927,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 0, 0, 898, 895, 896, 929, 915, 916,
	917, 925, 926, 927, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 1444, 897, 0, 898, 0,
	0, 929, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 896, 0, 915, 916, 917, 925, 926, 927,
	897, 0, 0, 0, 0, 0, 912, 918, 0, 0,
	0, 0, 0, 0, 898, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	922, 930, 0, 0, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 922, 930, 0, 920, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 0, 928,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 0, 0, 0, 0, 919, 913, 0, 0,
	922, 930, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	919, 0, 0, 0, 0, 0, 0, 920, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 919, 0, 0, 0,
	0, 0, 914, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 923, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	923, 909, 910, 911, 0, 908, 905, 906, 907, 899,
	900, 901, 902, 904, 0, 924, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 909, 910, 911, 0, 908,
	905, 906, 907, 899, 900, 901, 902, 904, 0, 924,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 909, 910, 911, 0, 908, 905, 906, 907, 899,
	900, 901, 902, 904, 0, 924, 895, 896, 0, 915,
	916, 917, 925, 926, 927, 0, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 0, 0, 898,
	895, 896, 929, 915, 916, 917, 925, 926, 927, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 898, 0, 0, 929, 912, 0, 895,
	896, 0, 915, 916, 917, 925, 926, 927, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 0,
	0, 912, 898, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 1471, 1472, 1473, 0, 0,
	0, 0, 0, 0, 897, 0, 903, 0, 1607, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 922, 930, 0, 0, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 1468, 0, 0, 0, 0, 0, 922,
	930, 0, 920, 0, 0, 0, 0, 0, 913, 903,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 0, 922, 930,
	0, 0, 913, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 920, 0, 0, 0, 0,
	0, 913, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 914, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 914, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 923, 0,
	0, 0, 0, 921, 0, 0, 909, 910, 911, 0,
	908, 905, 906, 907, 899, 900, 901, 902, 904, 1470,
	924, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	909, 910, 911, 0, 908, 905, 906, 907, 899, 900,
	901, 902, 904, 0, 924, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 909,
	910, 911, 0, 908, 905, 906, 907, 899, 900, 901,
	902, 904, 0, 924, 773, 767, 790, 761, 781, 780,
	0, 0, 763, 762, 0, 0, 0, 792, 791, 0,
	0, 0, 1465, 1466, 1467, 0, 1464, 1461, 1462, 1463,
	1455, 1456, 1457, 1458, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 786, 0,
	778, 777, 0, 773, 767, 790, 761, 781, 780, 776,
	0, 763, 762, 0, 0, 0, 792, 791, 0, 0,
	0, 0, 0, 0, 0, 0, 775, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 786, 0, 778,
	777, 0, 0, 0, 768, 769, 770, 771, 776, 789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 775, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 779, 0, 0, 0, 1147,
	0, 0, 0, 768, 769, 770, 771, 0, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 1150, 1148, 1149,
	1152, 1151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 779, 0, 0, 0, 0, 0,
	765, 0, 0, 0, 0, 0, 0, 0, 772, 766,
	0, 0, 0, 0, 0, 0, 0, 794, 0, 0,
	0, 0, 774, 0, 0, 764, 0, 0, 787, 788,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 765,
	0, 0, 793, 0, 0, 0, 0, 772, 766, 0,
	0, 0, 0, 0, 0, 0, 794, 0, 0, 0,
	0, 0, 0, 0, 764, 0, 0, 787, 788, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 793,
}
var sqlPact = [...]int{

	2952, -1000, 50, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 779, 1348,
	1344, 17683, -1000, -1000, -1000, -1000, -1000, -1000, 859, 705,
	140, 4812, 17683, 17683, 17414, 1129, 1129, 19028, -1000, -1000,
	22256, -1000, 2477, 485, 486, 485, 485, 494, 19028, 583,
	644, 142, -1000, 680, -11, 21987, 17683, 1389, 46, 16069,
	355, 2952, 17145, 21718, 17683, 16876, 17683, 17683, 304, 54,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1219, 1131, 1126, 16069, 21449, 21180, 20911, 20642, -1000,
	11078, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 708, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 359, 358, -1000, 16607, -1000, 939, -1000,
	45, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 936,
	-1000, 17683, -1000, -1000, 20373, 20104, 357, 907, -1000, -1000,
	588, 405, 1426, -1000, 60, -1000, -1000, -1000, 1216, -1000,
	931, 1215, 1214, 1213, 1212, 1211, 1210, 404, 848, 461,
	-1000, 907, -1000, 907, -1000, -1000, -1000, 549, 19028, -1000,
	16069, -1000, 19835, 17683, 17683, 1148, 19566, -1000, 680, -1000,
	-1000, -1000, 989, 1388, 1388, 1388, 1422, 159, 154, 142,
	37, 17683, -1000, 356, 37, 6607, 6607, -1000, -1000, 355,
	-1000, 374, 13865, -1000, 7835, -1000, 948, 1299, 444, 776,
	1298, -132, 829, 813, 1287, 547, 1209, 639, 13058, 54,
	-1000, -1000, -1000, 9629, 4519, 16069, 17683, 17683, 656, 19297,
	-1000, 1285, 132, 1283, -1000, 121, 1282, -1000, 121, 1279,
	25, -1000, -1000, -1000, -1000, -1000, -1000, 355, 16338, 17683,
	1465, 26116, -1000, 9629, -1000, -1000, 14427, 965, 14427, -1000,
	-1000, 1464, -1000, 9629, -1000, 42, 41, 1095, 1118, 11655,
	11373, 1359, 819, -1000, -1000, -1000, 57, 4812, 17683, 1240,
	14427, 17683, 17683, 17683, 17683, 17683, 17683, -1000, 1088, -1000,
	-1000, 17683, 17683, -1000, 40, 38, -1000, 19028, -1000, 133,
	-1000, 352, 1016, 413, 173, 18759, 413, 1011, -1000, 989,
	-1000, 949, 1038, 8744, 9629, 142, -1000, -1000, 142, 142,
	9629, -1000, -1000, 17683, 37, 1462, 17683, 145, -1000, 24665,
	-1000, -1000, 9629, 9629, 9629, 9629, 9629, 877, -1000, -1000,
	1546, -1000, 5719, -1000, -1000, 54, 351, 176, -1000, -1000,
	350, 54, -1000, -1000, -1000, -1000, 339, 1564, 445, -1000,
	-1000, -1000, 9629, 409, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1236, 338, 335, -1000, -1000, -1000, -1000,
	334, 333, 332, 324, 323, 322, 315, 314, 313, 312,
	311, 310, 307, 306, 305, 857, -1000, 425, -1000, -1000,
	425, 425, -1000, 295, 295, 296, -1000, -1000, -1000, -1000,
	295, -1000, -1000, -1000, 399, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 300, 145, -1000, -1000, -1000, 17683, 21, -1000,
	25431, -1000, 16, 754, -1000, 15531, 1407, 1391, 1377, 16069,
	1442, 1439, 545, 17683, 17683, 543, 536, 16069, 1563, 1562,
	-1000, 1208, 20, -1000, -1000, 24276, -160, -1000, -1000, 418,
	101, 1460, 101, 13327, -1000, 17683, 17683, -1000, 17683, -1000,
	-1000, 17683, -1000, 17683, 17683, -1000, 17683, 139, 14993, 704,
	1277, 643, -11, 14, -1000, 1467, -1000, -1000, -1000, -1000,
	113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 296, 857, 295, 295, 295,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 399, -1000, -1000,
	425, 425, 425, -1000, -1000, 13, 25431, 535, 27, 14710,
	17683, -1000, 56, -1000, -1000, 1206, 476, 9, 845, 1123,
	802, -1000, -1000, -1000, -1000, 36, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1534, -1000, -1000, -1000,
	-1000, 1545, 36, -1000, -1000, -1000, -1000, -1000, 1559, -1000,
	-1000, -1000, 4812, -1000, -1000, -1000, 17683, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 845, 1123, -1000,
	-1000, 16069, 15262, 1459, 1276, 864, -1000, 1453, 17683, 929,
	1009, -1000, 578, 1275, -1000, -1000, -1000, -1000, 25431, -1000,
	25431, 749, 1137, -1000, 1137, 34, -1000, 24641, -1000, 285,
	4, -1000, 418, 6607, 12789, 26067, 26116, 17683, 570, 9629,
	9629, 9629, 9629, 9629, 9629, 9629, 9629, 9629, 9629, 9629,
	9629, 9629, 9629, 9629, 9629, 9629, 9629, 9629, 9629, 9629,
	9629, 1037, 9629, 533, 9629, 9629, 9629, 9629, 945, 850,
	256, 4812, -1000, 675, 675, 675, 25760, 25760, 182, -1000,
	54, 35, 23970, 28, 54, -1000, -1000, -1000, 6309, 8425,
	54, 5105, -1000, 736, 1544, 422, 25431, 1250, 1172, 281,
	153, 150, 9629, 9629, 9924, 9924, 9629, 10219, 9629, 9629,
	6014, 9629, 9629, 9629, 9629, 9629, 9629, -1000, 273, -1000,
	-1000, -1000, -1000, 1541, -1000, -1000, 1540, -1000, 565, 560,
	1528, 418, 149, 7835, -1000, 704, 17683, 17683, 17683, -1000,
	-1000, 1003, 18490, 996, 26116, 17683, -1000, 269, 268, 1110,
	1109, 17683, 17683, 18221, 17952, 17683, 871, 266, 265, 17683,
	741, -1000, 17683, 17683, 713, 1160, -1000, 628, 1205, 17683,
	-1000, 9629, 695, 9629, 818, -1000, 12504, 433, 17683, 807,
	89, -1000, -1000, -1000, 388, 17683, -1000, -1000, -1000, 132,
	-1000, 121, 121, -1000, -1000, 16069, -1000, -1000, -1000, -1000,
	-1000, -1000, 26116, 366, 365, -1000, 1523, 531, -1000, 528,
	527, 520, -1000, 257, -1000, 9629, 17683, 14710, 27, 26,
	-1000, -1000, 17683, 1123, -1000, -1000, -1000, -1000, 664, -1000,
	817, -1000, 11937, -1000, -1000, -1000, 736, -1000, 5, -1000,
	-1000, -1000, -1000, 147, 3, 24, 26116, -1000, -1000, -1000,
	-1000, -1000, 17683, 331, 17683, -11, 17683, -1000, 1558, -11,
	17683, 1274, 1306, 385, 17683, -1000, -1000, -1000, 9629, -1000,
	-1000, -1000, -11, 17683, -1000, 1171, -1000, -29, 1463, -139,
	141, 393, -1000, 12219, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 403, 915, 915, 459, 459,
	459, 459, 2217, 2217, 2908, 2063, 3073, 3073, 3073, 1032,
	198, 198, 3073, 3073, 3073, 25760, 25736, 2044, 9629, 9629,
	519, 836, 256, 2044, 9629, 1509, 2044, 2044, 2044, -1000,
	980, -1000, -1000, -1000, 1204, 255, 10219, 10219, -1000, -1000,
	-1000, 5719, -1000, -1000, 252, 9629, -1000, -1000, 9629, -87,
	-124, -1000, -1000, 2, -1000, -1000, -4, 9629, 9629, 9629,
	137, -1000, 134, 618, -1000, 9629, 879, 250, 244, 9629,
	-1000, -1000, 25395, 3844, 131, 1203, -118, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 130, 128, 25371, -118, 122, 2645,
	-1000, 10219, 10219, 10219, 5719, 243, 118, 24336, -118, 25066,
	8130, 8130, 8130, 117, 25030, 9629, -118, 3656, 3625, 3311,
	-2, -18, -22, 1519, -24, 116, 400, 398, 115, 1171,
	-1000, -1000, -1000, -1000, 517, 512, 1273, -1000, 991, -1000,
	438, -1000, 728, 9629, 17683, 242, 241, 803, -1000, 1268,
	961, 1266, 961, -1000, 16, 683, 9629, 9629, -1000, 511,
	-1000, -1000, 509, -1000, 1200, -1000, 597, -1000, 363, 25431,
	-1000, 6607, 25431, -1000, 719, 1387, -28, -1000, -1000, 6607,
	418, 13327, 12789, 7835, -30, -1000, -1000, -1000, 704, -1000,
	540, 1517, 111, 973, 788, 795, 671, 1498, 25431, 5,
	-1000, 5, -1000, -1000, -1000, -1000, -1000, -1000, 17683, 1152,
	-1000, 15262, 229, 17683, 228, -1000, 227, -1000, -1000, 226,
	17683, 1100, 385, 1566, -1000, 413, -1000, 110, -1000, 1166,
	1421, -1000, 12789, 952, 1121, 1120, 12789, 946, 883, 883,
	883, -1000, 393, 4215, 9629, 15800, 898, 82, 109, 1463,
	9629, 2044, 2044, 9629, 10219, 10219, -1000, 2044, -1000, -1000,
	-1000, -1000, 1199, 225, 9629, 26116, 25822, 3887, -32, 7516,
	-10, 54, 23934, -1000, -1000, 301, -1000, 107, 7221, -1000,
	24701, -17, -17, -1000, 1555, 1303, -1000, 9629, 25006, -1000,
	13596, 419, 902, 23910, 26067, 26116, -1000, 9629, -1000, -1000,
	1198, 9629, -1000, 26116, 26116, 10219, 10219, 10219, 10219, 10219,
	10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219, 10219,
	10219, 10219, 10219, 10219, 1008, 10219, 1502, 1502, 1502, -14,
	6902, -1000, 1185, 1198, 9629, 9629, 26116, 104, 103, 102,
	-1000, 9629, -118, 9629, 9629, 9629, -1000, -1000, -1000, 99,
	-1000, 1495, -1000, -1000, -1000, -1000, 1166, 17683, 17683, 17683,
	1264, -1000, 2067, -1000, 23604, -36, 17683, 17683, -1000, 1076,
	1080, 465, 17683, -1000, 17683, -1000, 17683, 17683, 17683, -38,
	-42, 17683, 17683, 1554, -1000, -1000, -23, 6607, 233, -11,
	-23, 695, -1000, -19, -1000, 386, -1000, 361, 261, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 96, -1000, -1000,
	1155, -1000, 10809, 221, 17683, 15262, 1451, 10809, 922, 1102,
	385, 1553, -1000, 578, -1000, 416, 9629, 9629, 1463, 590,
	12789, 12789, 1254, 1112, 12789, -1000, -1000, -1000, -1000, 15800,
	-1000, 1111, -46, -1000, -1000, 17683, 220, -1000, 393, 525,
	2044, 3291, 174, 9629, 26116, 25789, -57, 9629, 9629, -1000,
	-62, -1000, 9629, -1000, -1000, 1549, 9629, 95, 94, 93,
	-1000, -1000, 25431, 9629, -1000, -1000, 22525, 9629, 86, -1000,
	85, 80, 25431, 1185, 25431, -1000, -1000, 623, 623, 1502,
	1502, 1502, 1502, 1838, 1838, 633, 899, 354, 354, 354,
	994, 477, 477, 354, 354, 354, 1192, 1039, 217, 23148,
	9629, -63, -1000, -1000, -1000, 25431, 25431, 73, -1000, -1000,
	-1000, -118, 3103, 23568, 23544, -1000, 72, 416, -1000, -1000,
	-1000, 17683, -1000, 17683, -1000, 17683, 17683, 1182, 975, -1000,
	-1000, 1107, 216, 10219, 17683, -1000, 799, -64, -69, 974,
	-1000, 957, 9629, -1000, 26116, 961, 961, -1000, 508, 497,
	-1000, -1000, -1000, -1000, -1000, -23, 1316, 17683, 1376, -1000,
	-1000, 215, -1000, -1000, -1000, 874, -70, -1000, 260, 1395,
	9629, -1000, -1000, 207, 10809, -71, 71, -11, -75, 17683,
	-1000, 385, 1551, -1000, 1306, -1000, 17683, 25431, -118, 553,
	-1000, 1254, -1000, 206, 9629, 12789, -1000, -1000, -157, -1000,
	369, -1000, 393, 205, 17683, 15800, 9629, 9629, 25789, -76,
	-1000, 2044, 2044, -1000, 23238, -1000, 24701, -1000, -1000, -1000,
	25431, 869, -1000, 23202, -1000, -1000, -1000, -1000, 10219, 1179,
	204, 26116, 23178, -1000, -1000, 9629, -1000, -1000, -1000, -1000,
	-1000, 1010, -1000, -1000, 17683, 987, -1000, -1000, 9629, 23148,
	201, 1152, 200, -1000, -1000, -1000, 838, -1000, -1000, 25431,
	1396, -1000, -1000, 17683, 17683, 552, -82, 17683, -1000, -1000,
	5424, 17683, 799, 10809, 1378, 54, 17683, 1378, 22872, 5105,
	-91, -1000, 1152, -1000, 799, 187, 1550, -1000, 1100, -47,
	-1000, 1450, 14158, -1000, 17683, 25431, -1000, 1111, -1000, 4812,
	15800, 17683, -95, -1000, 2044, 2044, -1000, -1000, 68, 902,
	1409, -1000, 299, 10219, 26116, -99, -1000, 22836, -1000, -1000,
	1261, 22812, 1075, 17683, -1000, 17683, 17683, 441, 17683, -1000,
	-1000, 654, -1000, 418, -1000, 185, 1152, -1000, -1000, -1000,
	-1000, 1395, -4, 799, -1000, 1152, 10809, -1000, 1102, 17683,
	184, -1000, 177, 54, -101, -1000, -1000, -1000, -103, -1000,
	-1000, 701, 9629, 299, -105, -1000, -1000, 1253, -1000, 911,
	839, 66, -116, 173, -1000, 9629, -1000, 13327, -1000, 17683,
	-1000, 1378, 65, 1152, -1000, -120, -1000, -1000, -1000, 9629,
	-1000, -1000, 64, 9334, 9334, -118, -1000, 17683, -1000, 919,
	916, 640, -1000, -1000, -1000, -1000, -1000, 1075, 25431, -109,
	-127, -1000, -1000, -1000, 799, -17, -1000, -1000, -1000, 10514,
	963, 678, 24300, -1000, -1000, -1000, 1333, -1000, 446, 1044,
	1044, 911, -1000, 890, 1152, 63, 1472, -1000, -1000, -1000,
	-1000, -1000, -1000, 1473, -1000, -1000, 1048, -1000, -1000, -1000,
	-1000, -1000, -1000, 1549, 9039, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1777, 1774, 1432, 137, 1773, 1771, 136, 1770, 1767,
	1764, 1761, 1758, 1757, 106, 135, 133, 138, 132, 1755,
	98, 1754, 1751, 1750, 104, 1749, 1748, 1745, 83, 1744,
	1742, 130, 129, 1738, 1737, 102, 1736, 34, 175, 2445,
	166, 1735, 1733, 1731, 12, 112, 80, 1730, 87, 1729,
	1728, 54, 46, 18, 26, 1727, 107, 120, 906, 28,
	1726, 1724, 152, 24, 22, 1986, 110, 156, 150, 125,
	1723, 1722, 1721, 53, 1720, 2, 1719, 1717, 13, 64,
	11, 1716, 27, 21, 1714, 1713, 140, 1712, 79, 111,
	119, 60, 127, 295, 1711, 63, 15, 82, 1710, 14,
	88, 1709, 41, 89, 151, 1708, 55, 159, 56, 38,
	68, 114, 1705, 1704, 1703, 93, 1702, 105, 71, 1701,
	1700, 85, 1699, 146, 148, 1698, 1694, 142, 1693, 1692,
	1689, 160, 1681, 1680, 161, 1679, 7, 52, 58, 4,
	118, 117, 49, 113, 1678, 33, 1677, 1484, 1366, 849,
	19, 65, 57, 92, 50, 62, 20, 1676, 1673, 115,
	1670, 1669, 1668, 1667, 1666, 86, 1663, 81, 149, 31,
	17, 35, 103, 29, 90, 96, 123, 157, 116, 1662,
	1661, 122, 1660, 91, 1659, 1658, 1438, 134, 1657, 1654,
	1649, 1152, 1116, 678, 210, 1647, 1646, 625, 589, 1644,
	1641, 61, 1639, 131, 1637, 1636, 154, 214, 36, 1635,
	121, 1633, 108, 1632, 0, 97, 30, 1629, 126, 84,
	1622, 1618, 1615, 1614, 39, 3, 9, 8, 6, 5,
	37, 25, 1613, 1610, 144, 100, 69, 1608, 158, 1606,
	1599, 1591, 47, 1589, 23, 1584, 16, 1583, 1580, 10,
	1, 153, 1577, 109, 1576, 1452, 1573, 155, 1572, 1571,
	1487, 40, 95,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 46, 46, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 43, 43,
	48, 48, 48, 50, 50, 47, 47, 42, 42, 5,
	5, 36, 36, 6, 6, 6, 7, 7, 7, 7,
	7, 7, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 92, 92, 91, 91, 94, 94, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	182, 182, 181, 19, 157, 157, 20, 20, 20, 20,
	21, 116, 116, 22, 22, 22, 22, 23, 27, 251,
	251, 251, 255, 255, 256, 256, 257, 257, 257, 257,
	257, 257, 257, 253, 253, 30, 30, 30, 30, 30,
	135, 131, 131, 133, 133, 133, 133, 57, 130, 130,
	130, 130, 132, 132, 132, 132, 207, 206, 206, 212,
	212, 212, 70, 70, 70, 70, 70, 71, 71, 71,
	205, 205, 205, 205, 213, 213, 213, 213, 213, 213,
	72, 72, 72, 211, 211, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 18, 252, 252, 254, 254,
	32, 32, 10, 10, 11, 11, 73, 73, 74, 74,
	138, 138, 138, 138, 75, 75, 49, 49, 49, 137,
	222, 222, 223, 223, 223, 223, 223, 223, 224, 224,
	224, 224, 224, 224, 224, 220, 220, 221, 218, 218,
	219, 219, 219, 219, 258, 258, 136, 136, 78, 78,
	227, 227, 227, 227, 225, 225, 225, 225, 225, 228,
	226, 229, 229, 229, 229, 229, 168, 168, 168, 34,
	12, 55, 55, 13, 9, 9, 120, 120, 82, 82,
	173, 173, 173, 64, 64, 44, 44, 44, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 121,
	121, 122, 122, 25, 29, 33, 33, 33, 33, 33,
	260, 260, 61, 61, 61, 61, 62, 62, 134, 134,
	134, 134, 134, 56, 8, 8, 51, 51, 52, 52,
	53, 53, 54, 54, 261, 261, 24, 24, 24, 24,
	24, 67, 67, 127, 127, 127, 129, 129, 128, 128,
	128, 106, 106, 35, 87, 87, 96, 96, 97, 97,
	179, 98, 98, 28, 28, 39, 39, 37, 37, 37,
	37, 37, 37, 38, 38, 40, 40, 40, 40, 40,
	40, 40, 235, 235, 235, 238, 238, 234, 236, 236,
	237, 237, 259, 259, 107, 107, 107, 77, 76, 76,
	80, 80, 79, 81, 81, 172, 104, 104, 104, 104,
	123, 124, 124, 125, 125, 126, 126, 103, 103, 154,
	154, 41, 41, 86, 86, 88, 88, 145, 145, 146,
	146, 144, 144, 144, 174, 174, 174, 174, 174, 171,
	171, 175, 175, 175, 175, 175, 175, 169, 169, 169,
	169, 170, 170, 180, 180, 110, 110, 110, 110, 108,
	108, 109, 109, 176, 176, 176, 176, 105, 105, 177,
	177, 177, 139, 139, 183, 183, 183, 201, 201, 85,
	85, 85, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 185, 185, 185, 185, 187,
	187, 187, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 200, 200, 200, 200,
	200, 200, 188, 188, 195, 195, 196, 196, 197, 198,
	189, 189, 190, 190, 191, 192, 199, 199, 199, 199,
	203, 203, 193, 193, 193, 193, 193, 194, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 118, 118, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 230, 230, 230,
	230, 230, 230, 230, 232, 232, 233, 233, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 239, 239, 240, 240, 242,
	242, 243, 243, 244, 245, 245, 245, 246, 247, 247,
	241, 241, 248, 248, 248, 249, 249, 250, 250, 250,
	250, 250, 159, 159, 159, 160, 160, 161, 93, 93,
	156, 156, 155, 155, 155, 158, 158, 111, 111, 202,
	202, 202, 202, 202, 202, 202, 112, 112, 112, 119,
	113, 113, 114, 114, 114, 114, 114, 114, 151, 152,
	115, 115, 115, 153, 153, 162, 166, 166, 165, 164,
	164, 163, 163, 142, 142, 142, 142, 143, 143, 141,
	140, 99, 99, 100, 100, 262, 262, 167, 167, 101,
	101, 102, 95, 95, 178, 178, 178, 178, 89, 89,
	69, 69, 90, 90, 65, 65, 68, 68, 66, 66,
	66, 66, 83, 83, 84, 84, 63, 63, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 204,
	204, 204, 58, 58, 58, 59, 59, 60, 60, 209,
	209, 209, 210, 210, 210, 210, 208, 208, 208, 208,
	208, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 6,
	5, 3, 0, 4, 6, 7, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 3, 4, 4, 2, 2, 2, 0, 2, 0,
	8, 8, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 8, 11, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 6, 8, 5,
	7, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 4, 6, 3, 1, 5, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 2, 2, 4, 1, 1,
	1, 2, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 1, 0, 2,
	2, 1, 2, 0, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 3, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	218, 65, -8, -9, -10, -11, -12, -13, -237, 93,
	101, 123, 201, 100, 86, 117, 221, 229, -37, -39,
	237, -135, 238, 35, 247, 59, 96, 223, 217, 269,
	67, -235, -40, -38, 317, 292, 298, 232, -41, 255,
	284, 320, 255, 132, 79, 287, 79, 79, -65, -58,
	4, -214, -216, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 58, 59, 60, 62, 64, 65, 66, 69,
	70, 77, 78, 79, 80, 82, 86, 88, 92, 93,
	95, 100, 101, 107, 108, 111, 113, 118, 123, 124,
	125, 126, 133, 136, 131, 145, 147, 148, 151, 150,
	155, 158, 161, 163, 164, 165, 166, 167, 169, 170,
	172, 174, 171, 177, 179, 180, 182, 187, 190, 193,
	194, 195, 196, 199, 201, 203, 204, 205, 207, 208,
	210, 211, 212, 213, 214, 217, 215, 216, 218, 219,
	221, 223, 224, 226, 228, 229, 230, 231, 234, 235,
	237, 238, 240, 243, 246, 247, 248, 251, 249, 245,
	254, 256, 257, 258, 265, 269, 270, 271, 272, 275,
	276, 277, 279, 281, 282, 283, 288, 293, 294, 295,
	296, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	50, 51, 52, 54, 81, 83, 84, 99, 102, 103,
	109, 119, 121, 127, 128, 137, 138, 139, 140, 142,
	153, 176, 178, 188, 192, 198, 200, 206, 225, 233,
	241, 242, 250, 252, 260, 261, 262, 266, 267, 284,
	285, 88, 136, 277, 276, 79, 132, 255, 287, -17,
	317, -28, -7, -15, -4, -24, -35, -14, -31, -18,
	-32, -16, 23, -208, 4, -214, -216, -215, -217, 56,
	68, 116, 135, 129, 144, 146, 154, 156, 168, 189,
	191, 222, 239, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 55, 57, 63, 67,
	71, 72, 73, 74, 75, 76, 85, 87, 89, 90,
	91, 94, 96, 98, 104, 105, 106, 112, 114, 115,
	117, 120, 122, 130, 132, 134, 141, 143, 149, 152,
	157, 159, 160, 173, 175, 181, 183, 184, 185, 186,
	197, 202, 209, 220, 232, 236, 244, 253, 255, 259,
	263, 264, 268, 273, 274, 278, 280, 286, 287, 289,
	290, 291, 292, -58, -58, -58, 201, 22, -255, 22,
	-256, -257, 67, 93, 117, 232, 136, 88, 276, -255,
	-62, 229, -58, -131, 158, 235, 225, 265, -132, -130,
	-207, 260, 167, -91, -58, 4, 22, 79, 58, 80,
	118, 132, 133, 63, 64, 148, 256, 260, 265, 67,
	279, -260, 265, 265, -260, -260, -61, 265, 263, -62,
	-259, 255, 255, 278, 287, -120, 79, 274, -38, -40,
	-39, -79, -80, 273, 141, 98, 186, -37, -39, -235,
	-238, 207, -234, -58, -238, -76, -77, 22, 90, 321,
	-176, -65, 184, -102, 317, -3, -176, 127, -65, -68,
	127, -65, -58, -176, 127, -58, -58, 115, 317, -99,
	-142, -141, -140, 315, 319, 115, 143, 143, -177, -176,
	-58, 127, -69, 127, -68, -92, 127, -91, -92, 127,
	-182, -181, -210, 4, -214, -216, -215, 284, 255, 132,
	-157, 317, -116, 317, -58, 22, 183, 321, 183, -58,
	-131, 52, -131, 317, -133, -56, -57, 145, 203, 263,
	302, 115, 296, -72, 5, 85, -94, 319, 115, -252,
	183, 115, 115, 115, 115, 115, 115, 296, 145, 203,
	228, 255, 287, -134, -56, -57, -134, 263, -62, -105,
	-176, -91, 127, -58, -91, 132, -58, 127, -79, -80,
	-104, -123, -124, 157, 181, -107, 22, 90, -107, -107,
	44, 318, 318, 321, -238, -84, 317, -95, -178, -147,
	310, -149, 308, 309, 314, 173, 297, -159, -65, -150,
	322, 9, 317, -162, -232, -39, 99, 29, -160, -161,
	225, -58, 7, 8, 5, 6, -63, -185, -194, 268,
	104, 175, 48, -230, -231, 4, -214, -209, -186, -196,
	-190, -193, 142, 56, 72, 75, 73, 76, 236, 278,
	49, 28, 102, 103, 192, 198, 252, 266, 267, 127,
	176, 128, 54, 119, 153, 92, 37, 39, 41, 42,
	50, 51, 81, 83, 84, 109, 137, 138, 139, 140,
	178, 206, 241, 250, 261, 262, 285, -215, -197, -198,
	-191, -192, -199, -95, -102, 310, -65, 317, -101, -167,
	-147, 85, -46, 215, -45, 21, 23, 93, 282, 99,
	245, 245, 215, 99, 322, 215, 215, 99, 263, 115,
	248, 318, -89, -65, -142, -147, -143, -208, 310, -177,
	-67, -65, -67, 237, -58, 30, 99, -48, 321, 47,
	219, 99, -48, 321, 99, -48, 99, 318, 321, -176,
	127, -68, 30, -156, -183, -184, -186, -195, -189, -193,
	-194, 40, 46, 45, 258, 233, 242, 38, 137, 138,
	139, 140, 241, 37, 206, 109, 92, 84, 83, 178,
	42, 41, -197, -198, -191, -192, 81, 261, 262, 142,
	39, 51, 50, 285, 250, -93, -147, -251, -90, 255,
	79, -66, -58, 310, -257, -251, 30, -93, 321, 321,
	155, -71, 161, 172, 124, -206, 85, -212, -205, -168,
	9, 268, 104, 183, -211, 8, 309, -204, -210, 5,
	7, 308, -206, 85, 70, -213, 5, 4, -194, -168,
	85, 158, 319, -208, -207, -254, 112, -251, -207, -207,
	-207, -207, -207, -58, 155, -207, -207, 321, 321, -62,
	-48, 321, 317, -78, 173, -236, 292, -78, 317, -59,
	127, -58, -236, 173, -104, -124, -123, -125, -147, 22,
	-147, -149, -38, -38, -38, -81, -172, -147, -234, 30,
	-83, -58, -86, 321, 115, 10, 11, 55, 33, 308,
	309, 310, 311, 110, 312, 305, 306, 307, 304, 300,
	301, 302, 61, 162, 227, 13, 14, 15, 26, 185,
	156, 297, 129, 239, 314, 16, 17, 18, 144, 36,
	130, 30, 4, -147, -147, -147, -147, -147, 191, 7,
	-100, -39, -147, -93, -99, -39, -39, -155, 315, 317,
	-99, 317, 5, 5, 317, -163, -147, -239, 293, 112,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 200, -203, 288,
	-203, -203, -187, 317, -187, -188, 317, -187, 294, 298,
	317, -86, -65, 321, 318, 321, 263, -121, 63, 57,
	-137, 127, 57, -218, -58, 63, -219, 53, 274, 202,
	114, -121, 63, -121, 63, 63, -176, 33, 33, 263,
	-68, -58, 263, 263, -176, 5, 5, 115, 318, 321,
	316, 325, -139, 290, -127, -28, 317, 85, 30, -127,
	-96, -97, -179, -98, -65, 317, -58, -58, -68, -69,
	-91, -92, -92, -17, -181, 99, -20, -28, -24, -35,
	-14, 318, 321, -85, 29, -117, 317, 295, 165, 82,
	125, 164, -118, 231, 318, 321, 263, 321, -90, -83,
	-141, -140, 115, 265, 318, -57, -56, -70, 205, 243,
	216, 234, 321, 8, 7, 7, 5, -208, -253, -58,
	-57, -56, -176, -73, -83, -74, -58, -138, -137, -220,
	-221, -218, 132, 274, 105, 30, 99, -55, 196, 30,
	183, 173, -51, 257, 99, -126, 225, 226, 321, -44,
	31, 89, 317, 321, 318, -139, -178, -88, -174, -176,
	-65, -39, -175, 317, -201, -183, -200, 182, 211, 212,
	210, 214, 213, -183, -91, 260, -147, -147, -147, -147,
	-147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
	-147, -147, -147, -147, -147, -147, -147, -147, 156, 129,
	239, 36, 130, -147, 263, -147, -147, -147, -147, 175,
	173, 268, 104, 275, 90, 179, -262, 253, 32, -153,
	-39, 317, -208, -159, 225, 317, -142, 318, 321, -93,
	-158, 316, -155, -93, 318, 318, -93, 286, 22, 90,
	310, -117, 7, -166, -165, 289, -240, 107, 120, 317,
	318, 318, -147, -147, -111, -202, -93, 4, 295, 165,
	82, 125, 164, 231, -111, -112, -147, -93, -113, -148,
	-149, 308, 309, 314, 317, 225, -114, -147, -93, -147,
	43, 152, 264, -115, -147, 115, -93, -147, -147, -147,
	-93, -93, -93, 317, 7, 7, 260, 260, 7, -139,
	318, -167, -45, -65, -58, -58, 173, -137, 127, -50,
	173, -183, -58, 317, 317, 147, 147, -58, -58, 127,
	-58, 127, -58, -58, -46, 215, 317, 317, -58, 215,
	-58, -65, 215, -36, 126, 248, 115, -65, -143, -147,
	-106, 220, -147, -106, -129, 183, -89, 284, -58, 220,
	-87, 321, 115, 302, -89, -48, -48, -48, -176, -183,
	315, 315, 7, 263, 263, 263, 263, 317, -147, -253,
	-66, -253, -56, 272, 60, 205, -212, -117, 321, 318,
	318, 321, -59, 132, -59, -28, -91, 5, -28, -65,
	99, -52, 95, -261, 302, -58, -172, -20, -58, -103,
	120, -180, 321, 299, 68, -110, 146, 168, 116, 154,
	222, 135, -144, 322, 317, -171, 298, -39, -175, -174,
	296, -147, -147, 263, -262, 253, -153, -147, 175, 268,
	104, 275, 90, 179, 115, 317, -148, -148, -93, 317,
	-93, -100, -147, 316, 316, 321, 318, -80, 321, -79,
	-147, -93, -93, 318, 318, -164, -165, 94, -147, -245,
	190, 317, 317, -147, 30, 321, 318, 115, 318, 318,
	-119, 197, 318, 10, 11, 308, 309, 310, 311, 110,
	312, 305, 306, 307, 304, 300, 301, 302, 61, 162,
	227, 13, 14, 15, 144, 130, -148, -148, -148, -93,
	317, 318, -151, -152, 115, 112, 30, -115, -115, -115,
	318, 115, -93, 321, 321, 321, 318, 318, 318, 7,
	318, 321, 318, 296, 296, 318, -103, 263, 263, 99,
	173, 281, -222, -219, -147, -83, 317, 317, -43, 93,
	237, -122, 99, -48, 99, -48, 263, -121, 63, -93,
	-93, 263, 263, 115, 248, 316, -95, 220, 62, 318,
	-95, -139, -97, -88, -167, 318, 316, 7, 7, 318,
	165, 125, 164, -118, 164, -118, -118, 7, -58, -75,
	131, -138, 317, -59, 317, 317, -78, 317, -58, -53,
	151, -261, 4, -236, 318, -154, 122, 44, -174, 179,
	146, 146, -174, -110, 146, -108, 189, -108, -108, -171,
	-208, 323, -93, -170, -169, 30, -58, 187, 318, -147,
	-147, -148, -148, 115, 317, -147, -156, 26, 26, 318,
	-93, 318, 321, 318, -155, 318, 286, -80, -80, -80,
	5, 96, -147, 259, -246, -58, 317, 290, -79, 318,
	-201, -183, -147, -151, -147, -183, -183, -148, -148, -148,
	-148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
	-148, -148, -148, -148, -148, -148, 90, 173, 179, -148,
	321, -93, 318, -152, -151, -147, -147, -183, 318, 318,
	318, -93, -147, -147, -147, 318, 7, -154, -58, -58,
	-137, 99, -223, 63, -224, 55, 105, 67, 173, 175,
	274, 202, 53, 85, 209, 318, 318, -83, -83, 173,
	85, 173, 85, 78, 270, -58, -58, -65, -58, -58,
	318, 318, -58, -65, 5, -95, -128, 317, 183, -28,
	-106, 302, 316, 316, 318, 130, -82, -173, -58, -233,
	317, -230, -231, -63, 317, -83, -73, 30, -82, 183,
	-54, 150, -261, 5, -51, -242, 291, -147, -93, 254,
	-174, -174, -109, 280, 183, 146, -174, -170, -146, -145,
	113, 171, 318, -58, 317, -171, 26, 26, -147, -156,
	318, -147, -147, 318, -147, 5, -147, 318, 318, 318,
	-147, -247, -58, -147, 318, 318, 318, -152, 115, 90,
	179, 317, -147, 318, 318, 321, 318, 318, 318, -242,
	-137, -58, -91, -58, 105, 127, 175, 147, 317, -148,
	-65, -136, -258, 66, 251, 318, 318, 175, 175, -147,
	-183, -48, -48, 263, 263, 91, -83, 63, -102, -39,
	317, 193, 318, 321, -64, -99, 55, -64, -147, 317,
	-82, 318, 318, -28, 318, -65, -261, 5, -52, -243,
	-244, -58, 260, -109, 317, -147, -174, 321, 324, 302,
	-171, 317, -83, -169, -147, -147, 318, 318, -80, -241,
	195, 318, -148, 115, 317, -156, 318, -147, -224, -59,
	173, -147, -60, 317, -75, 317, 209, -47, 55, -58,
	-58, 276, 174, 318, -58, -58, -136, -173, -44, -91,
	-44, 318, -93, 318, -75, -136, 317, 5, -53, 321,
	30, -150, -63, -58, -83, -145, -208, -170, -83, 318,
	318, -80, 44, -148, -156, 318, 318, 99, 318, -227,
	163, -58, -83, -65, -42, 280, -91, 237, -139, 317,
	-75, -64, -80, -136, -75, -82, -54, -244, -246, 317,
	318, 318, -248, 204, 226, -93, 318, 105, -225, -228,
	-226, 183, 116, 194, 240, 318, 318, -78, -147, -96,
	-83, -44, 318, -75, 318, -93, 318, -249, -250, 36,
	271, 70, -147, -249, -58, -226, 183, -228, 183, 276,
	88, -227, -139, 318, -136, -80, -250, 199, 111, 225,
	199, 111, -229, 170, 219, 47, 237, -229, -225, -49,
	47, 219, -75, 318, 26, 20, 175, 85, -250,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 66, 67, 68, 69, 70, 71, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 373, -2,
	0, 139, 0, 321, 0, 321, 321, 325, 0, 403,
	287, 400, -2, 411, 0, 0, 0, 409, 387, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 824,
	852, 853, 854, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 0, 205, 866, 867, 868, 869, 870, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 105, 112, 113, 942, 115, 0, 122,
	123, 124, 126, 127, 128, 129, 130, 131, 132, 0,
	314, 963, 327, 135, 919, 967, 1036, 982, 142, 152,
	0, 1042, -2, 156, 83, 185, 186, 187, 0, 189,
	207, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	204, 332, 320, 332, 317, 318, 319, 322, 0, 313,
	0, 402, 0, 0, 0, 0, 0, 286, -2, 383,
	384, -2, 0, 406, 406, 406, 0, 0, 384, 0,
	392, 946, 395, 835, 393, 0, 0, 408, 407, 0,
	388, 473, 0, 431, 0, 2, 0, 1021, 473, 0,
	1021, 827, 0, 0, 1021, 0, 0, 0, 0, 825,
	801, 793, 794, 798, 0, 0, 0, 0, 0, 479,
	73, 1021, 52, 1021, 820, 52, 1021, 81, 52, 1021,
	0, 100, 102, 862, 863, 864, 865, 1047, 0, 0,
	0, 0, 110, 0, 114, 116, 0, 0, 0, 326,
	136, 1010, 138, 0, 141, 143, 144, 0, 0, 0,
	0, 0, 0, 155, 180, 181, 84, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 200,
	201, 0, 0, 315, 328, 329, 316, 0, 324, 52,
	477, 259, 1021, 399, 259, 856, 399, 1021, -2, 0,
	379, 418, 419, 0, 0, 0, 404, 405, 0, 0,
	0, 375, 376, 0, 394, 0, 0, 434, 812, 816,
	817, 574, 0, 0, 0, 0, 0, 0, 663, 664,
	0, 803, 0, 668, 669, 670, 1015, 0, 675, 676,
	1036, 824, 838, 839, 840, 841, 0, 0, 0, 846,
	847, 848, 792, 716, 685, -2, -2, 836, 505, 506,
	507, 508, -2, 1049, 689, 691, 693, 694, 695, 696,
	0, 999, 1016, 1017, 1032, 1033, 1041, 1045, 1046, 1021,
	1029, 1022, 1011, 1019, 1028, 896, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 861, 536, 537,
	542, 543, 545, 434, 432, 474, 475, 0, 0, 809,
	807, 808, 29, 310, 31, 0, 310, 310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 818, 802, 797, 0, 799, 800, 483,
	0, 351, 0, 0, 480, 0, 0, 75, 0, 50,
	51, 0, 77, 0, 0, 79, 0, 401, 0, 0,
	1021, 0, 401, 0, 750, 491, 492, 493, 494, 495,
	571, 498, 499, 500, 501, 502, 503, 504, 512, 513,
	514, 515, 516, 517, 518, 533, 0, 511, 511, 511,
	524, 525, 534, 535, 540, 541, 552, 553, 555, 557,
	551, 551, 551, 548, 549, 0, 748, 0, 119, 0,
	891, 822, 828, 829, 125, 0, 0, 0, 0, 0,
	0, 147, 167, 168, 169, 148, 150, 157, 159, 160,
	161, 170, 171, 172, 173, 276, 0, 278, 183, 184,
	849, 0, 149, 151, 153, 154, 174, 175, 0, 177,
	178, 179, 0, 85, 188, 190, 0, 206, 191, 192,
	193, 194, 195, 196, 199, 202, 203, 0, 0, 323,
	279, 0, 217, 0, 0, 282, 398, 0, 0, 0,
	1021, 855, 337, 0, 382, 416, 417, 420, 423, 424,
	421, 574, 389, 390, 391, 412, 413, 297, 396, 0,
	0, 832, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 815, 579, 580, 581, 603, 604, 0, 665,
	666, -2, 748, 0, 671, 672, 673, 674, 0, 0,
	-2, 0, 843, 571, 0, 0, 791, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 771, 777, 0,
	0, 0, 0, 0, 0, 0, 0, 520, 539, 550,
	547, 546, 522, 0, 521, 519, 0, 523, 0, 0,
	0, 483, 0, 0, 811, 0, 0, 0, 0, 309,
	33, 1021, 0, 54, 0, 0, 249, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 62, 60, 0, 0, 0,
	795, 798, 362, 0, 362, 353, 0, 0, 0, 349,
	365, 366, 368, 369, 0, 0, 481, 74, 821, 52,
	82, 52, 52, 88, 101, 0, 103, 106, 107, 108,
	109, 104, 0, 484, 486, 496, 0, 558, 559, 560,
	561, 562, 563, 572, 111, 0, 0, 0, 120, 121,
	830, 831, 0, 0, 140, 145, 146, 333, 0, 164,
	0, 166, 0, 277, 851, 850, 571, 86, 208, 133,
	330, 331, 478, 0, 0, 216, 832, 218, 220, 221,
	222, 223, 856, 0, 856, 0, 0, 280, 0, 0,
	0, 0, 339, 345, 0, 422, 425, 426, 0, 415,
	295, 296, 401, 0, 834, 428, 813, 464, 435, 443,
	473, 450, 447, 0, 575, 487, 488, 526, 527, 528,
	529, 530, 531, 576, 577, 0, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, -2, -2, -2, 595,
	596, 597, -2, -2, -2, 601, 602, -2, 0, 0,
	0, 806, 0, -2, 0, 611, -2, -2, -2, 615,
	0, 618, 620, 622, 0, 0, 0, 0, 805, 632,
	783, 0, 814, 617, 0, 0, 804, 803, 0, 0,
	0, 754, 755, 0, -2, 677, 411, 0, 0, 0,
	0, 844, 0, 790, 786, 0, 726, 0, 0, 0,
	690, 692, 0, 0, 0, 0, 758, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 748, 768, 0, 0,
	634, 0, 0, 0, 0, 1036, 0, 748, 776, 0,
	0, 0, 0, 0, 748, 0, 782, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	476, 810, 32, 299, 0, 0, 0, 35, 1021, 43,
	0, 231, 0, 0, 0, 0, 0, 312, 44, 1021,
	52, 1021, 52, 45, 30, 310, 0, 0, 303, 0,
	298, 301, 0, 59, 0, 64, 0, 819, 0, 797,
	72, 0, 482, 346, 347, 0, 0, 355, 352, 0,
	483, 0, 0, 0, 0, 76, 78, 80, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 117,
	823, 118, 137, 162, 163, 165, 158, 176, 0, 225,
	258, 0, 0, 856, 0, 214, 259, 281, 283, 0,
	0, 341, 345, 0, 344, 399, 414, 0, 833, 430,
	0, 433, 0, 0, 0, 0, 0, 0, 470, 470,
	470, 468, 450, 0, 0, 462, 0, -2, 447, 0,
	0, -2, -2, 0, 0, 0, 633, -2, 616, 619,
	621, 623, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 667, 749, 752, 753, 0, -2, 0, 0, 410,
	411, 411, 411, 683, 0, 0, 787, 0, 0, 684,
	0, 0, 0, 0, 0, 0, 699, 0, 700, 701,
	0, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 637, 638, 639, 0,
	0, 703, 774, 775, 0, 0, 0, 0, 0, 0,
	708, 0, 781, 0, 0, 0, 712, 713, 714, 0,
	509, 0, 532, 554, 556, 544, 430, 0, 0, 0,
	0, 53, 229, 248, 0, 0, 0, 0, 37, 0,
	0, 0, 0, 41, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 796, 361, 0, 360, 0,
	350, 362, 367, 364, 370, 0, 489, 0, 0, 497,
	564, 565, 566, 567, 568, 569, 570, 0, 134, 212,
	0, 219, 0, 0, 0, 217, 0, 0, 0, 343,
	345, 0, 336, 337, 397, 720, 0, 0, 436, 0,
	0, 0, 0, 0, 0, 465, 469, 466, 467, 462,
	441, 0, 0, 446, 461, 0, 460, 449, -2, 578,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 784,
	0, 743, 0, -2, 756, 678, 0, 0, 0, 0,
	845, 785, 789, 0, 724, 725, 729, 0, 0, 688,
	0, 0, 757, 767, 769, 635, 636, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, -2, -2, -2,
	653, 654, 655, -2, -2, -2, 0, 0, 0, 770,
	0, 0, 746, 772, 773, 778, 779, 0, 705, 706,
	707, 780, 0, 0, 0, 538, 0, 720, 305, 307,
	34, 0, 230, 0, 233, 0, 0, 0, 0, 239,
	240, 0, 0, 0, 0, 250, 257, 0, 0, 0,
	49, 0, 0, 311, 0, 52, 52, 300, 0, 0,
	210, 211, 304, 302, 61, 348, 0, 0, 0, 354,
	363, 0, 490, 485, 573, 0, 0, 288, 294, 294,
	0, 686, 687, 0, 0, 0, 0, 0, 0, 0,
	334, 345, 0, 338, 339, 385, 0, 429, 427, 0,
	452, 0, 454, 0, 0, 0, 456, 444, 0, 439,
	0, 438, 450, 458, 0, 0, 0, 0, -2, 0,
	626, -2, -2, 742, 749, 842, 411, 679, 681, 682,
	788, 731, 728, 0, 715, 697, 698, 766, 0, 0,
	0, 0, 749, 745, 704, 0, 710, 711, 510, 386,
	36, 0, 234, 235, 856, 0, 238, 241, 0, 243,
	858, 225, 0, 254, 255, 252, 0, 38, 39, 48,
	56, 40, 46, 0, 0, 0, 0, 0, 371, 372,
	0, 0, 257, 0, 297, 837, 0, 297, 0, 0,
	0, 247, 225, 215, 257, 0, 0, 340, 341, 719,
	721, 0, 0, 453, 0, 472, 455, 0, 442, 0,
	462, 0, 0, 448, -2, -2, 627, 744, 0, 411,
	0, 717, -2, 0, 0, 0, 747, 0, 232, 236,
	0, 0, 263, 0, 251, 0, 0, 58, 0, 306,
	308, 0, 357, 483, 359, 0, 225, 289, 290, 293,
	291, 294, 411, 257, 213, 225, 0, 342, 343, 0,
	0, 463, 0, 0, 0, 440, 437, 445, 0, 459,
	680, 734, 0, -2, 0, 661, 709, 0, 242, 268,
	0, 0, 0, 259, 42, 0, 55, 0, 358, 0,
	245, 297, 0, 225, 284, 0, 335, 722, 723, 0,
	471, 457, 0, 0, 0, 730, 662, 0, 244, 264,
	265, 0, 260, 261, 262, 857, 256, 263, 57, 483,
	0, 292, 678, 246, 257, 411, 727, 732, 735, -2,
	985, 888, 0, 733, 237, 266, 0, 267, 0, 0,
	0, 268, 356, 228, 225, 0, 0, 737, 738, 739,
	740, 741, 269, 0, 272, 273, 0, 270, 253, 224,
	226, 227, 285, 0, 0, 271, 274, 275, 736,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 306, 3, 312, 307, 3,
	317, 318, 310, 308, 321, 309, 319, 311, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 325, 320,
	300, 302, 301, 3, 322, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 315, 3, 316, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 323, 304, 324, 314,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 303, 57643, 313, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:737
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:743
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:749
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:842
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:865
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:875
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:938
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:942
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = &Backup{Database: Name(sqlDollar[3].str), To: &StrVal{s: sqlDollar[5].str}, IncrementalFrom: sqlDollar[6].union.strVal()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &Restore{Database: Name(sqlDollar[3].str), From: &StrVal{s: sqlDollar[5].str}}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:960
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 87:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1091
		{ /* SKIP DOC */
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			return unimplemented(sqllex)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1287
		{ /* SKIP DOC */
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1350
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1356
		{
			return unimplemented(sqllex)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Low
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = Normal
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = High
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			return unimplemented(sqllex)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1468
		{
			return unimplemented(sqllex)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1469
		{
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = DropDefault
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return unimplemented(sqllex)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1886
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1893
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1897
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1906
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			return unimplemented(sqllex)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1910
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = true
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = false
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2016
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2017
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = Ascending
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = Descending
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2075
		{
			return unimplemented(sqllex)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2076
		{
			return unimplemented(sqllex)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = true
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = false
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2090
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2133
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.str = ""
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.str = ""
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2256
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2275
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2282
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2324
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return unimplemented(sqllex)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2354
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			return unimplemented(sqllex)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			return unimplemented(sqllex)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2590
		{
			return unimplemented(sqllex)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			return unimplemented(sqllex)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2598
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2602
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = true
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = false
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = false
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = true
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2626
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2664
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2684
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &From{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = true
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = false
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.str = astFullJoin
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.str = astLeftJoin
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.str = astRightJoin
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.str = astInnerJoin
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2992
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3092
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3107
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3116
		{
			return unimplemented(sqllex)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3172
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = nil
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = oidPseudoTypeOid
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = oidPseudoTypeRegClass
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = oidPseudoTypeRegType
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = oidPseudoTypeRegNamespace
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3320
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3352
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3392
		{
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			return unimplemented(sqllex)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3424
		{
			return unimplemented(sqllex)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3425
		{
			return unimplemented(sqllex)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			return unimplemented(sqllex)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			return unimplemented(sqllex)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			return unimplemented(sqllex)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			return unimplemented(sqllex)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			return unimplemented(sqllex)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			return unimplemented(sqllex)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			return unimplemented(sqllex)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			return unimplemented(sqllex)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			return unimplemented(sqllex)
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			return unimplemented(sqllex)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3436
		{
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
			return unimplemented(sqllex)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3440
		{
			return unimplemented(sqllex)
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3475
		{
			return unimplemented(sqllex)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			return unimplemented(sqllex)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3852
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3864
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3920
		{
			return unimplemented(sqllex)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3921
		{
			return unimplemented(sqllex)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3944
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3959
		{
			return unimplemented(sqllex)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			return unimplemented(sqllex)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3964
		{
			return unimplemented(sqllex)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			return unimplemented(sqllex)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
			return unimplemented(sqllex)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			return unimplemented(sqllex)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			return unimplemented(sqllex)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4013
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4057
		{
			return unimplemented(sqllex)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4058
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4061
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4062
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = Window(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.str = ""
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4149
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4151
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4155
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4162
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4519
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4679
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4715
		{
			return unimplemented(sqllex)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = DNull
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.str = ""
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
