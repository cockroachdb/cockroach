// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) seqOpt() SequenceOption {
	return u.val.(SequenceOption)
}
func (u *sqlSymUnion) intVal() *int64 {
	return u.val.(*int64)
}
func (u *sqlSymUnion) seqOpts() []SequenceOption {
	return u.val.([]SequenceOption)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:499
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CACHE = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const HAS_SOME = 57486
const HAS_ALL = 57487
const IMPORT = 57488
const INCREMENT = 57489
const INCREMENTAL = 57490
const IF = 57491
const IFNULL = 57492
const ILIKE = 57493
const IN = 57494
const INET = 57495
const INTERLEAVE = 57496
const INDEX = 57497
const INDEXES = 57498
const INITIALLY = 57499
const INNER = 57500
const INSERT = 57501
const INT = 57502
const INT2VECTOR = 57503
const INT2 = 57504
const INT4 = 57505
const INT8 = 57506
const INT64 = 57507
const INTEGER = 57508
const INTERSECT = 57509
const INTERVAL = 57510
const INTO = 57511
const IS = 57512
const ISOLATION = 57513
const JOB = 57514
const JOBS = 57515
const JOIN = 57516
const JSON = 57517
const JSONB = 57518
const KEY = 57519
const KEYS = 57520
const KV = 57521
const LATERAL = 57522
const LC_CTYPE = 57523
const LC_COLLATE = 57524
const LEADING = 57525
const LEAST = 57526
const LEFT = 57527
const LESS = 57528
const LEVEL = 57529
const LIKE = 57530
const LIMIT = 57531
const LIST = 57532
const LOCAL = 57533
const LOCALTIME = 57534
const LOCALTIMESTAMP = 57535
const LOW = 57536
const LSHIFT = 57537
const MATCH = 57538
const MINVALUE = 57539
const MAXVALUE = 57540
const MINUTE = 57541
const MONTH = 57542
const NAN = 57543
const NAME = 57544
const NAMES = 57545
const NATURAL = 57546
const NEXT = 57547
const NO = 57548
const NO_INDEX_JOIN = 57549
const NORMAL = 57550
const NOT = 57551
const NOTHING = 57552
const NULL = 57553
const NULLIF = 57554
const NULLS = 57555
const NUMERIC = 57556
const OF = 57557
const OFF = 57558
const OFFSET = 57559
const OID = 57560
const ON = 57561
const ONLY = 57562
const OPTIONS = 57563
const OR = 57564
const ORDER = 57565
const ORDINALITY = 57566
const OUT = 57567
const OUTER = 57568
const OVER = 57569
const OVERLAPS = 57570
const OVERLAY = 57571
const PARENT = 57572
const PARTIAL = 57573
const PARTITION = 57574
const PASSWORD = 57575
const PAUSE = 57576
const PLACING = 57577
const PLANS = 57578
const POSITION = 57579
const PRECEDING = 57580
const PRECISION = 57581
const PREPARE = 57582
const PRIMARY = 57583
const PRIORITY = 57584
const QUERIES = 57585
const QUERY = 57586
const RANGE = 57587
const READ = 57588
const REAL = 57589
const RECURSIVE = 57590
const REF = 57591
const REFERENCES = 57592
const REGCLASS = 57593
const REGPROC = 57594
const REGPROCEDURE = 57595
const REGNAMESPACE = 57596
const REGTYPE = 57597
const REMOVE_PATH = 57598
const RENAME = 57599
const REPEATABLE = 57600
const RELEASE = 57601
const RESET = 57602
const RESTORE = 57603
const RESTRICT = 57604
const RESUME = 57605
const RETURNING = 57606
const REVOKE = 57607
const RIGHT = 57608
const ROLLBACK = 57609
const ROLLUP = 57610
const ROW = 57611
const ROWS = 57612
const RSHIFT = 57613
const SAVEPOINT = 57614
const SCATTER = 57615
const SCRUB = 57616
const SEARCH = 57617
const SECOND = 57618
const SELECT = 57619
const SEQUENCE = 57620
const SEQUENCES = 57621
const SERIAL = 57622
const SERIALIZABLE = 57623
const SESSION = 57624
const SESSIONS = 57625
const SESSION_USER = 57626
const SET = 57627
const SETTING = 57628
const SETTINGS = 57629
const SHOW = 57630
const SIMILAR = 57631
const SIMPLE = 57632
const SMALLINT = 57633
const SMALLSERIAL = 57634
const SNAPSHOT = 57635
const SOME = 57636
const SPLIT = 57637
const SQL = 57638
const START = 57639
const STATUS = 57640
const STDIN = 57641
const STRICT = 57642
const STRING = 57643
const STORE = 57644
const STORING = 57645
const SUBSTRING = 57646
const SYMMETRIC = 57647
const SYSTEM = 57648
const TABLE = 57649
const TABLES = 57650
const TEMP = 57651
const TEMPLATE = 57652
const TEMPORARY = 57653
const TESTING_RANGES = 57654
const TESTING_RELOCATE = 57655
const TEXT = 57656
const THAN = 57657
const THEN = 57658
const TIME = 57659
const TIMESTAMP = 57660
const TIMESTAMPTZ = 57661
const TO = 57662
const TRAILING = 57663
const TRACE = 57664
const TRANSACTION = 57665
const TREAT = 57666
const TRIM = 57667
const TRUE = 57668
const TRUNCATE = 57669
const TYPE = 57670
const UNBOUNDED = 57671
const UNCOMMITTED = 57672
const UNION = 57673
const UNIQUE = 57674
const UNKNOWN = 57675
const UPDATE = 57676
const UPSERT = 57677
const USE = 57678
const USER = 57679
const USERS = 57680
const USING = 57681
const UUID = 57682
const VALID = 57683
const VALIDATE = 57684
const VALUE = 57685
const VALUES = 57686
const VARCHAR = 57687
const VARIADIC = 57688
const VIEW = 57689
const VARYING = 57690
const WHEN = 57691
const WHERE = 57692
const WINDOW = 57693
const WITH = 57694
const WITHIN = 57695
const WITHOUT = 57696
const WRITE = 57697
const YEAR = 57698
const ZONE = 57699
const NOT_LA = 57700
const WITH_LA = 57701
const AS_LA = 57702
const CONTAINED_BY = 57703
const HAS_SOME_KEY = 57704
const HAS_ALL_KEYS = 57705
const POSTFIXOP = 57706
const UMINUS = 57707
const HELPTOKEN = 57708

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6991

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	386, 54,
	-2, 730,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	155, 580,
	-2, 0,
	-1, 65,
	97, 730,
	159, 730,
	334, 730,
	335, 730,
	-2, 0,
	-1, 75,
	1, 692,
	219, 692,
	264, 692,
	381, 692,
	383, 692,
	385, 692,
	386, 692,
	-2, 705,
	-1, 108,
	4, 732,
	20, 732,
	21, 732,
	23, 732,
	28, 732,
	33, 732,
	34, 732,
	35, 732,
	36, 732,
	37, 732,
	38, 732,
	39, 732,
	40, 732,
	41, 732,
	42, 732,
	44, 732,
	45, 732,
	46, 732,
	47, 732,
	48, 732,
	49, 732,
	52, 732,
	53, 732,
	54, 732,
	56, 732,
	57, 732,
	61, 732,
	62, 732,
	63, 732,
	65, 732,
	66, 732,
	67, 732,
	68, 732,
	70, 732,
	72, 732,
	73, 732,
	76, 732,
	77, 732,
	78, 732,
	86, 732,
	87, 732,
	88, 732,
	89, 732,
	90, 732,
	91, 732,
	92, 732,
	93, 732,
	95, 732,
	97, 732,
	99, 732,
	102, 732,
	103, 732,
	105, 732,
	109, 732,
	110, 732,
	111, 732,
	112, 732,
	113, 732,
	114, 732,
	115, 732,
	123, 732,
	124, 732,
	125, 732,
	126, 732,
	127, 732,
	129, 732,
	131, 732,
	136, 732,
	137, 732,
	139, 732,
	142, 732,
	143, 732,
	146, 732,
	147, 732,
	148, 732,
	149, 732,
	150, 732,
	153, 732,
	154, 732,
	156, 732,
	159, 732,
	160, 732,
	161, 732,
	162, 732,
	163, 732,
	164, 732,
	165, 732,
	166, 732,
	168, 732,
	171, 732,
	172, 732,
	173, 732,
	175, 732,
	176, 732,
	177, 732,
	178, 732,
	179, 732,
	181, 732,
	182, 732,
	184, 732,
	186, 732,
	187, 732,
	190, 732,
	191, 732,
	194, 732,
	196, 732,
	197, 732,
	199, 732,
	200, 732,
	201, 732,
	202, 732,
	203, 732,
	205, 732,
	206, 732,
	207, 732,
	208, 732,
	212, 732,
	213, 732,
	214, 732,
	215, 732,
	216, 732,
	218, 732,
	220, 732,
	221, 732,
	224, 732,
	225, 732,
	227, 732,
	229, 732,
	230, 732,
	231, 732,
	232, 732,
	233, 732,
	234, 732,
	236, 732,
	237, 732,
	238, 732,
	239, 732,
	240, 732,
	242, 732,
	243, 732,
	244, 732,
	245, 732,
	246, 732,
	247, 732,
	248, 732,
	249, 732,
	251, 732,
	252, 732,
	253, 732,
	254, 732,
	255, 732,
	257, 732,
	258, 732,
	259, 732,
	260, 732,
	261, 732,
	262, 732,
	263, 732,
	265, 732,
	267, 732,
	268, 732,
	269, 732,
	270, 732,
	272, 732,
	273, 732,
	274, 732,
	275, 732,
	276, 732,
	278, 732,
	279, 732,
	280, 732,
	281, 732,
	282, 732,
	283, 732,
	285, 732,
	286, 732,
	287, 732,
	288, 732,
	290, 732,
	291, 732,
	292, 732,
	293, 732,
	295, 732,
	296, 732,
	297, 732,
	298, 732,
	299, 732,
	300, 732,
	301, 732,
	302, 732,
	303, 732,
	304, 732,
	306, 732,
	308, 732,
	309, 732,
	310, 732,
	311, 732,
	312, 732,
	313, 732,
	314, 732,
	315, 732,
	317, 732,
	318, 732,
	319, 732,
	322, 732,
	323, 732,
	324, 732,
	325, 732,
	327, 732,
	328, 732,
	329, 732,
	330, 732,
	333, 732,
	334, 732,
	335, 732,
	336, 732,
	338, 732,
	340, 732,
	341, 732,
	342, 732,
	343, 732,
	344, 732,
	345, 732,
	348, 732,
	353, 732,
	354, 732,
	355, 732,
	356, 732,
	357, 732,
	-2, 0,
	-1, 125,
	1, 695,
	219, 695,
	264, 695,
	381, 695,
	383, 695,
	385, 695,
	386, 695,
	-2, 704,
	-1, 130,
	1, 629,
	171, 629,
	242, 629,
	246, 629,
	385, 629,
	386, 629,
	-2, 0,
	-1, 132,
	1, 629,
	385, 629,
	386, 629,
	-2, 0,
	-1, 133,
	1, 629,
	385, 629,
	386, 629,
	-2, 0,
	-1, 134,
	1, 633,
	385, 633,
	386, 633,
	-2, 0,
	-1, 141,
	4, 738,
	5, 738,
	6, 738,
	7, 738,
	8, 738,
	9, 738,
	20, 738,
	21, 738,
	23, 738,
	28, 738,
	29, 738,
	33, 738,
	34, 738,
	35, 738,
	36, 738,
	37, 738,
	38, 738,
	39, 738,
	40, 738,
	41, 738,
	42, 738,
	44, 738,
	45, 738,
	46, 738,
	47, 738,
	48, 738,
	49, 738,
	50, 738,
	51, 738,
	52, 738,
	53, 738,
	54, 738,
	56, 738,
	57, 738,
	59, 738,
	61, 738,
	62, 738,
	63, 738,
	65, 738,
	66, 738,
	67, 738,
	68, 738,
	70, 738,
	72, 738,
	73, 738,
	75, 738,
	76, 738,
	77, 738,
	78, 738,
	80, 738,
	81, 738,
	82, 738,
	84, 738,
	85, 738,
	86, 738,
	87, 738,
	88, 738,
	89, 738,
	90, 738,
	91, 738,
	92, 738,
	93, 738,
	95, 738,
	97, 738,
	99, 738,
	102, 738,
	103, 738,
	105, 738,
	109, 738,
	110, 738,
	111, 738,
	112, 738,
	113, 738,
	114, 738,
	115, 738,
	116, 738,
	117, 738,
	123, 738,
	124, 738,
	125, 738,
	126, 738,
	127, 738,
	129, 738,
	131, 738,
	134, 738,
	136, 738,
	137, 738,
	139, 738,
	142, 738,
	143, 738,
	146, 738,
	147, 738,
	148, 738,
	149, 738,
	150, 738,
	151, 738,
	153, 738,
	154, 738,
	156, 738,
	158, 738,
	159, 738,
	160, 738,
	161, 738,
	162, 738,
	163, 738,
	164, 738,
	165, 738,
	166, 738,
	168, 738,
	170, 738,
	171, 738,
	172, 738,
	173, 738,
	174, 738,
	175, 738,
	176, 738,
	177, 738,
	178, 738,
	179, 738,
	181, 738,
	182, 738,
	184, 738,
	185, 738,
	186, 738,
	187, 738,
	188, 738,
	190, 738,
	191, 738,
	194, 738,
	196, 738,
	197, 738,
	198, 738,
	199, 738,
	200, 738,
	201, 738,
	202, 738,
	203, 738,
	204, 738,
	205, 738,
	206, 738,
	207, 738,
	208, 738,
	209, 738,
	211, 738,
	212, 738,
	213, 738,
	214, 738,
	215, 738,
	216, 738,
	218, 738,
	221, 738,
	224, 738,
	225, 738,
	226, 738,
	227, 738,
	228, 738,
	229, 738,
	230, 738,
	231, 738,
	232, 738,
	233, 738,
	234, 738,
	236, 738,
	237, 738,
	238, 738,
	239, 738,
	240, 738,
	242, 738,
	243, 738,
	244, 738,
	245, 738,
	246, 738,
	247, 738,
	248, 738,
	249, 738,
	251, 738,
	252, 738,
	253, 738,
	254, 738,
	255, 738,
	257, 738,
	258, 738,
	259, 738,
	260, 738,
	261, 738,
	262, 738,
	263, 738,
	265, 738,
	266, 738,
	267, 738,
	268, 738,
	269, 738,
	270, 738,
	272, 738,
	273, 738,
	274, 738,
	275, 738,
	276, 738,
	278, 738,
	279, 738,
	280, 738,
	281, 738,
	282, 738,
	283, 738,
	284, 738,
	285, 738,
	286, 738,
	287, 738,
	288, 738,
	289, 738,
	290, 738,
	291, 738,
	292, 738,
	293, 738,
	295, 738,
	296, 738,
	297, 738,
	298, 738,
	299, 738,
	300, 738,
	301, 738,
	302, 738,
	303, 738,
	304, 738,
	306, 738,
	308, 738,
	309, 738,
	310, 738,
	311, 738,
	312, 738,
	313, 738,
	314, 738,
	315, 738,
	317, 738,
	318, 738,
	319, 738,
	322, 738,
	323, 738,
	324, 738,
	325, 738,
	326, 738,
	327, 738,
	328, 738,
	329, 738,
	330, 738,
	333, 738,
	334, 738,
	335, 738,
	336, 738,
	337, 738,
	338, 738,
	340, 738,
	341, 738,
	342, 738,
	343, 738,
	344, 738,
	345, 738,
	348, 738,
	353, 738,
	354, 738,
	355, 738,
	356, 738,
	357, 738,
	358, 738,
	368, 738,
	373, 738,
	374, 738,
	375, 738,
	382, 738,
	388, 738,
	-2, 0,
	-1, 144,
	1, 54,
	386, 54,
	-2, 730,
	-1, 522,
	133, 1354,
	320, 1354,
	363, 1354,
	384, 1354,
	-2, 0,
	-1, 523,
	133, 1300,
	320, 1300,
	363, 1300,
	384, 1300,
	-2, 0,
	-1, 525,
	133, 1415,
	320, 1415,
	363, 1415,
	384, 1415,
	-2, 0,
	-1, 527,
	133, 1438,
	320, 1438,
	363, 1438,
	384, 1438,
	-2, 0,
	-1, 534,
	133, 1360,
	320, 1360,
	363, 1360,
	384, 1360,
	-2, 334,
	-1, 560,
	1, 412,
	381, 412,
	383, 412,
	385, 412,
	386, 412,
	-2, 0,
	-1, 561,
	1, 464,
	130, 464,
	381, 464,
	383, 464,
	385, 464,
	386, 464,
	-2, 0,
	-1, 567,
	1, 426,
	381, 426,
	383, 426,
	385, 426,
	386, 426,
	-2, 0,
	-1, 569,
	1, 430,
	381, 430,
	383, 430,
	385, 430,
	386, 430,
	-2, 0,
	-1, 572,
	1, 438,
	381, 438,
	383, 438,
	385, 438,
	386, 438,
	-2, 0,
	-1, 573,
	1, 443,
	381, 443,
	383, 443,
	385, 443,
	386, 443,
	-2, 0,
	-1, 576,
	1, 453,
	381, 453,
	383, 453,
	385, 453,
	386, 453,
	-2, 0,
	-1, 592,
	118, 740,
	130, 740,
	189, 740,
	217, 740,
	-2, 699,
	-1, 595,
	118, 739,
	130, 739,
	189, 739,
	217, 739,
	-2, 696,
	-1, 652,
	382, 1277,
	-2, 1270,
	-1, 653,
	382, 1278,
	-2, 1271,
	-1, 659,
	5, 924,
	382, 924,
	-2, 1490,
	-1, 684,
	5, 883,
	-2, 1459,
	-1, 685,
	5, 918,
	382, 918,
	-2, 1461,
	-1, 686,
	5, 893,
	-2, 1462,
	-1, 687,
	5, 892,
	-2, 1463,
	-1, 688,
	5, 918,
	382, 918,
	-2, 1466,
	-1, 689,
	5, 918,
	382, 918,
	-2, 1467,
	-1, 690,
	5, 919,
	-2, 1470,
	-1, 691,
	5, 875,
	-2, 1471,
	-1, 692,
	5, 875,
	-2, 1472,
	-1, 693,
	5, 900,
	-2, 1476,
	-1, 694,
	5, 885,
	-2, 1477,
	-1, 695,
	5, 886,
	-2, 1478,
	-1, 696,
	5, 876,
	-2, 1484,
	-1, 697,
	5, 877,
	-2, 1485,
	-1, 698,
	5, 878,
	-2, 1486,
	-1, 699,
	5, 879,
	-2, 1487,
	-1, 700,
	5, 880,
	-2, 1488,
	-1, 701,
	5, 881,
	-2, 1489,
	-1, 702,
	5, 875,
	-2, 1496,
	-1, 703,
	5, 884,
	-2, 1501,
	-1, 704,
	5, 882,
	-2, 1504,
	-1, 705,
	5, 916,
	382, 916,
	-2, 1506,
	-1, 706,
	5, 920,
	-2, 1509,
	-1, 707,
	5, 922,
	-2, 1510,
	-1, 708,
	5, 915,
	382, 915,
	-2, 1515,
	-1, 894,
	233, 728,
	-2, 573,
	-1, 898,
	219, 1274,
	-2, 0,
	-1, 933,
	1, 218,
	381, 218,
	383, 218,
	385, 218,
	386, 218,
	-2, 703,
	-1, 940,
	4, 1514,
	10, 1514,
	11, 1514,
	13, 1514,
	14, 1514,
	15, 1514,
	16, 1514,
	17, 1514,
	18, 1514,
	20, 1514,
	21, 1514,
	23, 1514,
	26, 1514,
	28, 1514,
	30, 1514,
	33, 1514,
	34, 1514,
	35, 1514,
	36, 1514,
	37, 1514,
	38, 1514,
	39, 1514,
	40, 1514,
	41, 1514,
	42, 1514,
	44, 1514,
	45, 1514,
	46, 1514,
	47, 1514,
	48, 1514,
	49, 1514,
	52, 1514,
	53, 1514,
	54, 1514,
	56, 1514,
	57, 1514,
	58, 1514,
	61, 1514,
	62, 1514,
	63, 1514,
	64, 1514,
	65, 1514,
	66, 1514,
	67, 1514,
	68, 1514,
	70, 1514,
	71, 1514,
	72, 1514,
	73, 1514,
	75, 1514,
	76, 1514,
	77, 1514,
	78, 1514,
	86, 1514,
	87, 1514,
	88, 1514,
	89, 1514,
	90, 1514,
	91, 1514,
	92, 1514,
	93, 1514,
	95, 1514,
	97, 1514,
	99, 1514,
	102, 1514,
	103, 1514,
	105, 1514,
	109, 1514,
	110, 1514,
	111, 1514,
	112, 1514,
	113, 1514,
	114, 1514,
	115, 1514,
	119, 1514,
	120, 1514,
	121, 1514,
	122, 1514,
	123, 1514,
	124, 1514,
	125, 1514,
	126, 1514,
	127, 1514,
	128, 1514,
	129, 1514,
	131, 1514,
	134, 1514,
	136, 1514,
	137, 1514,
	139, 1514,
	142, 1514,
	143, 1514,
	146, 1514,
	147, 1514,
	148, 1514,
	149, 1514,
	150, 1514,
	151, 1514,
	152, 1514,
	153, 1514,
	154, 1514,
	156, 1514,
	158, 1514,
	159, 1514,
	160, 1514,
	161, 1514,
	162, 1514,
	163, 1514,
	164, 1514,
	165, 1514,
	166, 1514,
	168, 1514,
	170, 1514,
	171, 1514,
	172, 1514,
	173, 1514,
	174, 1514,
	175, 1514,
	176, 1514,
	177, 1514,
	178, 1514,
	179, 1514,
	181, 1514,
	182, 1514,
	184, 1514,
	185, 1514,
	186, 1514,
	187, 1514,
	188, 1514,
	190, 1514,
	191, 1514,
	194, 1514,
	195, 1514,
	196, 1514,
	197, 1514,
	199, 1514,
	200, 1514,
	201, 1514,
	202, 1514,
	203, 1514,
	204, 1514,
	205, 1514,
	206, 1514,
	207, 1514,
	208, 1514,
	212, 1514,
	213, 1514,
	214, 1514,
	215, 1514,
	216, 1514,
	218, 1514,
	221, 1514,
	222, 1514,
	224, 1514,
	225, 1514,
	227, 1514,
	229, 1514,
	230, 1514,
	231, 1514,
	232, 1514,
	233, 1514,
	234, 1514,
	236, 1514,
	237, 1514,
	238, 1514,
	239, 1514,
	240, 1514,
	242, 1514,
	243, 1514,
	244, 1514,
	245, 1514,
	246, 1514,
	247, 1514,
	248, 1514,
	249, 1514,
	251, 1514,
	252, 1514,
	253, 1514,
	254, 1514,
	255, 1514,
	256, 1514,
	257, 1514,
	258, 1514,
	259, 1514,
	260, 1514,
	261, 1514,
	262, 1514,
	263, 1514,
	265, 1514,
	266, 1514,
	267, 1514,
	268, 1514,
	269, 1514,
	270, 1514,
	271, 1514,
	272, 1514,
	273, 1514,
	274, 1514,
	275, 1514,
	276, 1514,
	278, 1514,
	279, 1514,
	280, 1514,
	281, 1514,
	282, 1514,
	283, 1514,
	285, 1514,
	286, 1514,
	287, 1514,
	288, 1514,
	289, 1514,
	290, 1514,
	291, 1514,
	292, 1514,
	293, 1514,
	295, 1514,
	296, 1514,
	297, 1514,
	298, 1514,
	299, 1514,
	300, 1514,
	301, 1514,
	302, 1514,
	303, 1514,
	304, 1514,
	306, 1514,
	308, 1514,
	309, 1514,
	310, 1514,
	311, 1514,
	312, 1514,
	313, 1514,
	314, 1514,
	315, 1514,
	317, 1514,
	318, 1514,
	319, 1514,
	322, 1514,
	323, 1514,
	324, 1514,
	325, 1514,
	327, 1514,
	328, 1514,
	329, 1514,
	330, 1514,
	333, 1514,
	334, 1514,
	335, 1514,
	336, 1514,
	338, 1514,
	340, 1514,
	341, 1514,
	342, 1514,
	343, 1514,
	344, 1514,
	345, 1514,
	348, 1514,
	353, 1514,
	354, 1514,
	355, 1514,
	356, 1514,
	357, 1514,
	358, 1514,
	359, 1514,
	361, 1514,
	362, 1514,
	363, 1514,
	364, 1514,
	365, 1514,
	366, 1514,
	367, 1514,
	368, 1514,
	370, 1514,
	371, 1514,
	372, 1514,
	373, 1514,
	374, 1514,
	375, 1514,
	376, 1514,
	377, 1514,
	378, 1514,
	380, 1514,
	383, 1514,
	384, 1514,
	387, 1514,
	388, 1514,
	-2, 0,
	-1, 953,
	133, 1415,
	320, 1415,
	363, 1415,
	384, 1415,
	-2, 0,
	-1, 970,
	133, 1438,
	320, 1438,
	363, 1438,
	384, 1438,
	-2, 0,
	-1, 971,
	171, 641,
	242, 641,
	246, 641,
	-2, 322,
	-1, 1043,
	118, 739,
	130, 739,
	189, 739,
	217, 739,
	-2, 700,
	-1, 1124,
	108, 705,
	118, 705,
	130, 705,
	167, 705,
	189, 705,
	217, 705,
	223, 705,
	331, 705,
	-2, 1053,
	-1, 1134,
	382, 1254,
	-2, 1242,
	-1, 1152,
	383, 1166,
	-2, 0,
	-1, 1176,
	171, 641,
	242, 641,
	246, 641,
	-2, 636,
	-1, 1204,
	383, 1166,
	-2, 0,
	-1, 1208,
	108, 705,
	118, 705,
	130, 705,
	167, 705,
	189, 705,
	217, 705,
	223, 705,
	331, 705,
	-2, 806,
	-1, 1360,
	171, 641,
	242, 641,
	246, 641,
	-2, 324,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 959,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 960,
	-1, 1470,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 961,
	-1, 1471,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 962,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 963,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 964,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 965,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 966,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 975,
	-1, 1485,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 976,
	-1, 1486,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 977,
	-1, 1489,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 982,
	-1, 1495,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 984,
	-1, 1497,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 988,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 989,
	-1, 1499,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 990,
	-1, 1500,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 991,
	-1, 1569,
	133, 1177,
	382, 1277,
	-2, 1270,
	-1, 1570,
	133, 1178,
	-2, 1455,
	-1, 1571,
	133, 1179,
	-2, 1359,
	-1, 1572,
	133, 1180,
	-2, 1318,
	-1, 1573,
	133, 1181,
	-2, 1335,
	-1, 1574,
	133, 1182,
	-2, 1357,
	-1, 1575,
	133, 1183,
	-2, 1411,
	-1, 1651,
	1, 807,
	75, 807,
	108, 807,
	118, 807,
	130, 807,
	134, 807,
	138, 807,
	140, 807,
	158, 807,
	167, 807,
	174, 807,
	185, 807,
	189, 807,
	204, 807,
	217, 807,
	219, 807,
	223, 807,
	264, 807,
	266, 807,
	331, 807,
	339, 807,
	350, 807,
	351, 807,
	360, 807,
	381, 807,
	383, 807,
	385, 807,
	386, 807,
	387, 807,
	-2, 806,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 983,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 985,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 986,
	-1, 1833,
	228, 1137,
	-2, 1139,
	-1, 2065,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 987,
	-1, 2070,
	170, 0,
	-2, 1003,
	-1, 2079,
	228, 1138,
	-2, 1140,
	-1, 2121,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1030,
	-1, 2122,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1031,
	-1, 2123,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1032,
	-1, 2127,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1036,
	-1, 2128,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1037,
	-1, 2129,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1038,
	-1, 2264,
	170, 0,
	-2, 1004,
	-1, 2267,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1007,
	-1, 2268,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1009,
	-1, 2391,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1008,
	-1, 2392,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1010,
	-1, 2399,
	170, 0,
	-2, 1039,
	-1, 2478,
	170, 0,
	-2, 1040,
	-1, 2560,
	36, 0,
	151, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1458,
	-1, 2646,
	382, 1526,
	-2, 499,
}

const sqlPrivate = 57344

const sqlLast = 45519

var sqlAct = [...]int{

	653, 2628, 2642, 2359, 2643, 2358, 2609, 2626, 2214, 2568,
	2569, 2532, 2570, 2559, 1728, 1736, 2483, 1248, 2369, 2043,
	2098, 2425, 991, 184, 1265, 2558, 2224, 612, 651, 1803,
	74, 2246, 2332, 1354, 2318, 1300, 2253, 757, 2248, 1355,
	2009, 1646, 183, 784, 2240, 2181, 1206, 183, 629, 2405,
	1701, 2298, 1947, 1301, 887, 1926, 183, 2017, 2011, 1737,
	479, 26, 1202, 1725, 1185, 183, 1700, 1647, 2151, 1899,
	183, 183, 1664, 1696, 183, 1261, 1934, 183, 464, 1690,
	1447, 1655, 604, 124, 1898, 183, 1844, 1130, 1524, 1525,
	1799, 1442, 1385, 974, 1549, 1783, 1244, 1048, 1216, 1214,
	1186, 1533, 623, 1598, 1712, 1512, 1423, 1509, 533, 1425,
	973, 923, 763, 1162, 596, 1543, 461, 1166, 920, 1698,
	913, 993, 1252, 1704, 2180, 934, 650, 1730, 1633, 1193,
	1620, 745, 766, 646, 1119, 513, 183, 183, 622, 1565,
	1426, 709, 1049, 1211, 183, 1424, 174, 1384, 124, 491,
	645, 1272, 125, 1176, 530, 179, 910, 643, 601, 526,
	1175, 743, 1053, 554, 1832, 2333, 126, 1711, 1280, 2360,
	183, 183, 183, 183, 786, 1280, 1280, 2165, 183, 183,
	2166, 2659, 2658, 2651, 2360, 2652, 2652, 2652, 2605, 1729,
	2604, 2603, 1239, 600, 1239, 1239, 2585, 787, 2580, 2579,
	2331, 1697, 1751, 1751, 2576, 26, 2556, 2555, 1239, 600,
	1766, 1766, 2527, 595, 40, 2522, 1759, 505, 1278, 1239,
	2521, 1203, 610, 2063, 2383, 41, 2026, 124, 2517, 2509,
	2480, 2456, 1239, 2331, 1759, 2331, 1869, 1870, 2453, 44,
	2451, 2436, 1239, 2435, 2331, 1239, 2413, 2331, 2410, 2393,
	1239, 2354, 1239, 1759, 2352, 1751, 2330, 2311, 1751, 2266,
	2331, 1239, 2239, 1759, 2027, 51, 1695, 1622, 1869, 1870,
	2234, 1887, 1888, 1889, 1695, 2161, 1235, 593, 2664, 2162,
	1691, 2074, 771, 775, 781, 1751, 2037, 760, 2650, 1998,
	1999, 592, 605, 1239, 63, 1923, 1916, 1751, 747, 1239,
	1917, 64, 1836, 486, 65, 1064, 1065, 2154, 1837, 1691,
	1914, 1104, 1105, 1106, 1751, 788, 1913, 1912, 2528, 1770,
	1751, 1751, 1884, 1751, 2660, 1758, 1750, 1766, 1067, 1759,
	1751, 1108, 2387, 749, 1694, 750, 1766, 67, 1695, 2639,
	1627, 1293, 2383, 2154, 1626, 1294, 1621, 2054, 1653, 2134,
	2076, 1239, 1999, 1066, 1875, 1802, 1781, 1751, 1363, 1086,
	1180, 1546, 1064, 1065, 1528, 873, 955, 144, 2334, 952,
	141, 1942, 951, 1843, 950, 949, 948, 947, 946, 945,
	875, 1281, 944, 943, 942, 1067, 1875, 941, 1281, 1281,
	751, 1526, 1382, 748, 586, 585, 584, 552, 551, 550,
	143, 549, 548, 547, 546, 545, 544, 543, 542, 541,
	1066, 540, 539, 1547, 1089, 1090, 1091, 1092, 538, 537,
	536, 1885, 521, 1072, 183, 68, 183, 183, 183, 520,
	183, 519, 518, 517, 603, 452, 183, 142, 451, 450,
	449, 448, 183, 433, 432, 431, 1101, 1109, 422, 421,
	420, 128, 70, 1885, 71, 183, 183, 183, 183, 183,
	419, 412, 411, 167, 937, 166, 141, 165, 141, 1548,
	1545, 1869, 1870, 1785, 164, 127, 485, 163, 879, 104,
	1072, 162, 161, 1099, 160, 159, 183, 938, 158, 157,
	1087, 1733, 156, 155, 601, 154, 143, 1886, 143, 153,
	183, 152, 151, 150, 1064, 1065, 1286, 1094, 1095, 1096,
	1104, 1105, 1106, 1279, 1416, 149, 183, 148, 2026, 1388,
	1097, 1621, 147, 146, 145, 1884, 183, 1067, 986, 1886,
	1108, 1207, 891, 142, 893, 142, 896, 1562, 1560, 1558,
	1556, 135, 2632, 135, 2630, 2627, 1550, 1087, 136, 2575,
	136, 1093, 1066, 2557, 912, 1060, 2542, 937, 1086, 1064,
	1065, 2537, 2475, 916, 916, 1083, 1088, 2454, 2388, 1064,
	1065, 127, 2001, 127, 1297, 2376, 917, 2297, 2296, 2292,
	938, 2291, 1067, 886, 1102, 935, 2284, 2283, 183, 1875,
	2282, 2278, 1067, 2277, 2276, 2275, 989, 1878, 1879, 1871,
	1872, 1873, 1874, 1876, 1877, 939, 2269, 1066, 956, 758,
	2245, 2148, 2143, 1089, 1090, 1091, 1092, 1066, 2142, 1881,
	1882, 1883, 1072, 1088, 2141, 2084, 1544, 984, 1880, 1878,
	1879, 1871, 1872, 1873, 1874, 1876, 1877, 1997, 1954, 1950,
	1921, 1520, 1918, 1906, 1897, 1101, 1109, 1868, 1865, 1864,
	1862, 1849, 1764, 1100, 1848, 1833, 1885, 1651, 601, 1060,
	927, 1138, 1059, 1103, 1107, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 141, 2653, 1131, 1072, 1122, 1043,
	884, 971, 1099, 1869, 1870, 968, 1205, 1072, 2637, 1087,
	2617, 2616, 2041, 1204, 879, 2649, 1264, 2100, 939, 2547,
	1039, 2546, 2545, 2512, 143, 2504, 2503, 1044, 2494, 141,
	2492, 2468, 1064, 1065, 2467, 2466, 1098, 41, 2422, 987,
	2401, 2384, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 44, 1886, 2363, 2486, 1067, 2351, 1045, 2375, 143,
	2337, 142, 1046, 183, 2289, 183, 2382, 1940, 2222, 135,
	1093, 2220, 2219, 2217, 1521, 2189, 136, 593, 1383, 1713,
	1066, 1056, 1057, 2188, 2169, 1088, 1086, 1798, 183, 183,
	1061, 592, 2157, 2069, 1987, 1981, 142, 1967, 1966, 1732,
	1952, 1922, 1896, 1102, 135, 1858, 1857, 1191, 1184, 1854,
	1829, 136, 1824, 1514, 1167, 486, 1064, 1065, 601, 1967,
	1170, 1875, 1164, 1165, 1134, 1638, 1610, 1554, 1373, 1372,
	1168, 1382, 1379, 1247, 127, 759, 1183, 1174, 1189, 1067,
	1171, 1089, 1090, 1091, 1092, 1160, 1159, 1158, 1157, 67,
	1072, 1880, 1878, 1879, 1871, 1872, 1873, 1874, 1876, 1877,
	1156, 1155, 1154, 2271, 1066, 124, 1153, 1152, 1151, 1150,
	1149, 1148, 1100, 1147, 1146, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 711, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 937, 183, 1145, 1131, 1144, 1179, 1201,
	786, 2293, 1298, 1143, 1142, 1135, 183, 1123, 1122, 967,
	959, 931, 2244, 2164, 1177, 2160, 938, 1087, 1376, 183,
	1209, 1835, 1639, 787, 1761, 183, 1181, 183, 2039, 183,
	1120, 2012, 1237, 183, 1263, 1382, 1205, 68, 1561, 1559,
	1557, 1555, 1769, 1240, 1070, 1071, 1073, 1074, 2389, 885,
	1869, 1870, 1068, 1069, 1070, 1071, 1073, 1074, 1869, 1870,
	983, 1246, 2386, 128, 70, 2385, 71, 2379, 2167, 2028,
	1691, 1172, 1207, 1037, 183, 183, 1173, 1990, 1093, 1369,
	141, 937, 1042, 183, 1140, 1768, 183, 1984, 485, 1980,
	1920, 104, 1348, 1088, 1919, 1269, 1808, 1420, 980, 2044,
	1262, 1791, 710, 2406, 938, 1729, 2101, 786, 1840, 759,
	143, 1534, 1163, 2635, 1031, 1377, 183, 2634, 2022, 2176,
	1217, 183, 1218, 1869, 1870, 2540, 183, 183, 1755, 183,
	787, 183, 2600, 183, 939, 183, 1427, 912, 2516, 1126,
	2345, 788, 1771, 2601, 2447, 2446, 183, 142, 1023, 1238,
	1389, 2444, 183, 183, 1032, 135, 740, 738, 1137, 736,
	1665, 183, 136, 2051, 2443, 2208, 1871, 1872, 1873, 1874,
	1876, 1877, 734, 2205, 731, 2173, 1875, 658, 2172, 2326,
	1274, 1271, 1657, 183, 1853, 127, 2040, 786, 1852, 1851,
	1850, 2200, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 1811, 1219, 1754, 1686, 1381, 599, 1657, 1546, 1682,
	787, 1679, 1496, 1307, 1370, 1178, 1656, 872, 2327, 2357,
	1614, 1295, 939, 124, 1390, 1296, 1613, 1457, 2647, 1356,
	1456, 1869, 1870, 968, 1378, 1726, 1414, 1668, 1448, 1455,
	1357, 1875, 588, 1413, 1360, 1040, 2212, 981, 788, 2213,
	1386, 1374, 1994, 500, 1064, 1065, 1283, 1404, 1511, 1285,
	1547, 1224, 2515, 1288, 1242, 598, 1511, 1429, 1217, 2427,
	1218, 591, 1397, 601, 2553, 1394, 1275, 1067, 601, 1550,
	2091, 1398, 1017, 1399, 1074, 1400, 2592, 1401, 1518, 1402,
	982, 1063, 713, 1516, 2572, 424, 453, 1383, 1380, 183,
	2057, 183, 1066, 1292, 183, 1421, 1408, 1410, 1885, 1246,
	1422, 1428, 2020, 2094, 2019, 183, 1548, 1545, 1307, 1307,
	1393, 600, 1018, 1989, 786, 966, 593, 183, 788, 593,
	593, 183, 438, 2322, 183, 2323, 2092, 1446, 183, 1531,
	1438, 1529, 183, 1439, 1440, 1583, 1667, 787, 183, 1875,
	1219, 1983, 590, 1534, 1226, 183, 786, 2019, 1800, 1801,
	183, 601, 1593, 1869, 1870, 2325, 591, 1641, 183, 1640,
	2612, 2191, 1072, 1522, 2328, 1762, 1519, 1415, 2619, 787,
	2600, 429, 457, 2497, 1886, 183, 2052, 1217, 1658, 1218,
	1550, 2573, 1030, 1550, 439, 1412, 183, 2505, 183, 1688,
	183, 1383, 1713, 183, 1676, 183, 2524, 183, 183, 1576,
	183, 183, 1684, 1550, 1644, 937, 1885, 1041, 1877, 183,
	1669, 1671, 1225, 1873, 1874, 1876, 1877, 1228, 1036, 597,
	2050, 2525, 1617, 614, 1616, 168, 1161, 1666, 938, 1087,
	1625, 1220, 2198, 1291, 1222, 1631, 1635, 1636, 1507, 456,
	2574, 1721, 2506, 1731, 1674, 1731, 2324, 2056, 1630, 413,
	1680, 1661, 1223, 1209, 1505, 788, 1687, 1654, 1022, 1219,
	2591, 616, 1280, 1544, 742, 2629, 2450, 741, 732, 1358,
	732, 1875, 1192, 1880, 1878, 1879, 1871, 1872, 1873, 1874,
	1876, 1877, 1886, 733, 1710, 732, 124, 788, 1757, 2428,
	1117, 2627, 124, 2397, 1978, 1619, 2360, 1361, 1743, 786,
	1856, 916, 1233, 916, 1634, 1088, 1650, 183, 1746, 2058,
	600, 171, 1735, 1744, 1205, 1745, 1747, 2610, 1232, 996,
	1752, 1813, 787, 183, 183, 183, 935, 183, 1756, 1510,
	1753, 1196, 1714, 1763, 1718, 1719, 1720, 589, 1885, 1501,
	1230, 2055, 1782, 2192, 1765, 1774, 939, 1502, 499, 1503,
	1517, 1027, 977, 1508, 1258, 1199, 183, 1776, 1231, 441,
	440, 425, 1229, 2571, 1168, 1062, 1171, 2258, 2599, 2590,
	1493, 1194, 2597, 2611, 1165, 1164, 2368, 1004, 172, 1220,
	1777, 2620, 1197, 1772, 1871, 1872, 1873, 1874, 1876, 1877,
	423, 455, 1775, 1259, 1196, 1392, 2613, 1723, 124, 965,
	1052, 1195, 1749, 962, 954, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 1215, 1886, 430, 1936, 1993, 1199, 414,
	426, 458, 1028, 978, 1051, 2625, 1051, 979, 2438, 1126,
	427, 454, 1786, 2437, 1632, 1788, 1047, 1536, 1794, 1790,
	788, 2287, 1795, 2420, 2489, 1197, 2344, 447, 1797, 2175,
	1568, 1568, 1581, 2343, 1253, 601, 1601, 1963, 2341, 1959,
	1605, 1606, 1608, 1198, 1504, 579, 977, 442, 173, 2090,
	1724, 1506, 1270, 2326, 510, 1281, 2319, 492, 1029, 1249,
	2533, 1407, 972, 609, 1364, 1491, 1494, 2317, 2638, 889,
	2370, 415, 2321, 2225, 489, 1050, 176, 1050, 1220, 2421,
	497, 1717, 1969, 1948, 1254, 1256, 493, 1434, 880, 882,
	1814, 1812, 2327, 1255, 888, 1879, 1871, 1872, 1873, 1874,
	1876, 1877, 1490, 1052, 1968, 1052, 1198, 1051, 1828, 601,
	169, 1806, 1937, 183, 786, 2320, 1935, 978, 494, 183,
	183, 979, 2624, 183, 1839, 1924, 492, 1629, 183, 580,
	1930, 183, 488, 1628, 2254, 712, 2288, 787, 977, 183,
	997, 1842, 496, 909, 1931, 183, 183, 183, 2342, 497,
	170, 183, 489, 2340, 183, 493, 508, 1929, 1368, 1949,
	183, 183, 183, 183, 183, 607, 1821, 579, 1435, 1192,
	183, 502, 1944, 183, 1005, 957, 1943, 183, 1050, 655,
	998, 961, 1819, 995, 1257, 609, 183, 494, 1953, 1903,
	1904, 1905, 1715, 1716, 907, 1939, 183, 598, 183, 898,
	183, 1960, 2215, 1492, 492, 2130, 1964, 2322, 614, 2323,
	1366, 496, 1925, 2361, 183, 2418, 1992, 3, 183, 608,
	2000, 2299, 2002, 183, 1367, 183, 1979, 497, 1196, 484,
	34, 977, 183, 493, 1986, 483, 33, 482, 30, 2325,
	481, 80, 1955, 1964, 581, 183, 937, 2419, 2328, 2152,
	877, 580, 1199, 601, 874, 788, 1928, 937, 183, 2003,
	495, 443, 1932, 1933, 1977, 494, 1938, 1816, 1194, 938,
	988, 1553, 579, 2006, 1021, 878, 2400, 1817, 2286, 1197,
	938, 1822, 2211, 2024, 1900, 2036, 1307, 1901, 2068, 496,
	609, 1112, 1113, 1114, 1115, 1116, 2045, 183, 1195, 1026,
	1995, 1125, 978, 2038, 444, 1863, 979, 1823, 2004, 1767,
	908, 1133, 1693, 1342, 2131, 1685, 2015, 498, 1015, 2021,
	2132, 480, 79, 1307, 1013, 582, 507, 1678, 2029, 495,
	2324, 1035, 1011, 1034, 445, 730, 446, 960, 477, 22,
	2035, 501, 1047, 478, 23, 1792, 1405, 183, 1396, 1141,
	2071, 2047, 2048, 2046, 1552, 2049, 580, 2567, 583, 1236,
	1198, 906, 769, 2530, 2053, 2315, 581, 2196, 476, 28,
	475, 20, 1009, 1007, 34, 473, 19, 2059, 1001, 905,
	33, 2081, 30, 1307, 2061, 80, 498, 939, 474, 18,
	2194, 2174, 1818, 2008, 468, 15, 1827, 1727, 939, 1820,
	1709, 1290, 1020, 1830, 1448, 2105, 2461, 495, 1289, 2075,
	1287, 2077, 1284, 1448, 2110, 2080, 469, 16, 1342, 1342,
	1846, 1847, 467, 14, 472, 12, 1187, 1187, 183, 1282,
	1025, 2104, 1341, 614, 183, 2102, 2093, 2095, 2096, 2010,
	2109, 2107, 1234, 183, 183, 606, 2140, 582, 1307, 1014,
	2086, 2087, 2088, 2030, 2031, 1012, 2032, 2033, 2136, 466,
	10, 471, 7, 1010, 498, 1227, 79, 1221, 735, 737,
	1895, 581, 470, 6, 2137, 2163, 2135, 1601, 1601, 1601,
	583, 2601, 1908, 22, 1307, 1307, 2186, 2168, 23, 2155,
	183, 2150, 183, 1307, 1307, 124, 2153, 465, 5, 183,
	2156, 2210, 937, 1008, 1006, 1054, 2381, 1306, 1804, 1000,
	904, 2171, 2221, 28, 2380, 20, 2218, 183, 183, 2201,
	19, 754, 1387, 2206, 2227, 938, 1307, 2241, 2178, 2209,
	2235, 1657, 487, 18, 1657, 183, 2463, 1341, 1341, 15,
	1672, 755, 1673, 1670, 2233, 183, 2238, 786, 183, 183,
	2199, 1689, 582, 1681, 786, 1677, 2216, 1418, 1419, 2226,
	1793, 16, 2229, 1064, 1065, 2499, 2230, 14, 2334, 12,
	787, 2159, 2242, 2237, 2231, 1805, 2236, 787, 999, 2228,
	2477, 2449, 2260, 1055, 2185, 583, 1067, 1064, 1065, 2300,
	2255, 183, 1058, 1683, 1675, 2265, 2529, 2261, 2366, 1734,
	1722, 1708, 1618, 1359, 10, 509, 7, 2608, 1299, 2623,
	2412, 1066, 1306, 1306, 2305, 2187, 2243, 6, 2149, 756,
	1869, 1870, 1344, 1064, 1065, 1779, 1778, 2097, 2202, 2042,
	1779, 1945, 2202, 1915, 1780, 1066, 1615, 1612, 2202, 1611,
	1542, 1128, 5, 939, 2170, 183, 2273, 2089, 183, 2005,
	1138, 1136, 1033, 1024, 1019, 614, 614, 1016, 786, 183,
	183, 1928, 1002, 183, 183, 183, 964, 2285, 1362, 587,
	2426, 490, 1395, 1003, 1941, 1637, 2523, 2279, 1855, 2482,
	183, 787, 2195, 2396, 2197, 183, 1551, 183, 788, 183,
	183, 183, 1139, 1307, 56, 788, 183, 2302, 2183, 183,
	2309, 2307, 937, 632, 2316, 2177, 2335, 2186, 2306, 1703,
	183, 183, 1702, 2304, 789, 2314, 1371, 937, 654, 1567,
	1449, 729, 656, 1304, 1431, 938, 1436, 1344, 1344, 657,
	1305, 1169, 1443, 644, 1302, 2356, 2186, 932, 1738, 2372,
	938, 2186, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 2371, 1495, 1375, 1497, 1498, 1499,
	1500, 2390, 2373, 2378, 2365, 2377, 1515, 1532, 2301, 2144,
	1838, 1132, 624, 636, 1523, 635, 1530, 958, 1946, 788,
	2018, 1125, 2374, 2338, 1433, 2185, 183, 1796, 183, 1430,
	786, 183, 2014, 2193, 428, 2402, 1866, 930, 1590, 183,
	1563, 1564, 1582, 1578, 1580, 786, 1592, 1594, 1599, 1602,
	1603, 1604, 2362, 787, 2185, 1250, 2187, 2367, 1251, 2185,
	1038, 2411, 2409, 939, 1190, 1118, 1739, 985, 787, 2303,
	2186, 2025, 2430, 2416, 1760, 2432, 2414, 1182, 939, 183,
	1441, 2310, 937, 2204, 753, 2187, 183, 2429, 2431, 2207,
	2187, 752, 2636, 1365, 183, 183, 937, 937, 1246, 2395,
	183, 2339, 2186, 1773, 2459, 938, 1111, 1110, 739, 2440,
	638, 2491, 976, 975, 1437, 1260, 2448, 183, 1962, 938,
	938, 2618, 183, 2498, 2460, 2190, 2470, 2464, 2539, 183,
	140, 2364, 2469, 1307, 2473, 2471, 2472, 2455, 137, 2458,
	139, 138, 1991, 83, 2493, 32, 31, 2479, 103, 102,
	101, 100, 180, 2488, 183, 183, 99, 417, 98, 97,
	2487, 183, 96, 2485, 95, 94, 434, 93, 2185, 937,
	92, 788, 91, 2510, 183, 459, 2495, 90, 937, 937,
	503, 180, 89, 2508, 511, 88, 788, 516, 2511, 1307,
	87, 2513, 938, 86, 85, 535, 531, 2514, 2452, 2187,
	2185, 938, 938, 183, 1191, 183, 528, 601, 183, 82,
	786, 2519, 2520, 1584, 81, 29, 25, 107, 24, 78,
	77, 2476, 27, 939, 17, 2202, 11, 2548, 21, 61,
	2550, 2187, 62, 787, 60, 2536, 1342, 939, 939, 183,
	59, 2549, 2554, 2552, 58, 1307, 746, 746, 13, 54,
	53, 2186, 52, 2541, 417, 2565, 183, 183, 183, 2496,
	2566, 2564, 50, 49, 183, 48, 2577, 47, 2584, 9,
	2502, 106, 2252, 1342, 45, 2441, 2442, 8, 183, 2586,
	417, 417, 779, 417, 2589, 2587, 2588, 2462, 180, 876,
	43, 2598, 2596, 42, 105, 119, 116, 118, 628, 2602,
	115, 2474, 117, 121, 120, 113, 111, 112, 114, 110,
	939, 2607, 109, 122, 39, 1343, 38, 2606, 2614, 939,
	939, 37, 2615, 1064, 1065, 2621, 36, 35, 2, 1,
	0, 0, 2622, 1342, 0, 0, 0, 0, 786, 0,
	786, 0, 0, 0, 0, 416, 1067, 2551, 0, 2185,
	2640, 788, 2641, 0, 0, 1341, 0, 2648, 0, 1303,
	0, 787, 2654, 787, 0, 0, 2657, 2656, 2655, 0,
	0, 1066, 2663, 2661, 0, 2662, 2665, 0, 0, 0,
	2187, 2631, 0, 2633, 1809, 1810, 0, 0, 0, 0,
	1815, 0, 1341, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 2408, 0, 0, 0, 2535, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 0, 0, 0, 0,
	1343, 1343, 1834, 0, 0, 0, 0, 0, 1841, 0,
	1306, 1845, 0, 0, 1342, 1342, 1067, 0, 0, 2434,
	0, 1072, 764, 1342, 1342, 1825, 1826, 0, 1859, 0,
	0, 0, 1341, 2445, 0, 0, 0, 2581, 2582, 2583,
	0, 1066, 0, 0, 1303, 1303, 0, 1306, 773, 777,
	0, 783, 0, 0, 0, 0, 1342, 0, 0, 788,
	0, 788, 1125, 0, 0, 0, 0, 0, 0, 1599,
	1599, 1599, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 1187, 0, 1341, 0, 0,
	614, 1892, 1893, 1894, 0, 0, 0, 1306, 0, 0,
	0, 1072, 0, 0, 535, 0, 535, 894, 535, 0,
	899, 0, 0, 0, 0, 1344, 902, 0, 0, 0,
	0, 0, 417, 1341, 1341, 0, 0, 0, 0, 0,
	0, 0, 1341, 1341, 0, 535, 535, 417, 924, 876,
	0, 1584, 1584, 0, 0, 0, 0, 0, 0, 2526,
	0, 0, 1344, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 1306, 0, 0, 1341, 535, 0, 1087, 0,
	0, 0, 0, 0, 0, 2543, 2544, 0, 0, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2016, 0, 0, 963, 0, 1306, 1306,
	0, 0, 0, 0, 0, 0, 535, 1306, 1306, 0,
	0, 0, 1344, 1342, 0, 2034, 0, 1584, 1584, 1584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 614, 0, 0, 0, 0, 0, 0,
	1306, 0, 0, 0, 1088, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 2060, 0, 0, 0, 1443, 0, 417, 0,
	0, 0, 2064, 0, 0, 2065, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2070, 0, 0,
	0, 0, 0, 0, 0, 0, 2078, 0, 0, 0,
	0, 0, 0, 0, 2082, 0, 0, 2034, 0, 0,
	777, 0, 0, 1344, 1344, 0, 0, 0, 2066, 2067,
	0, 0, 1344, 1344, 0, 783, 0, 2106, 0, 0,
	0, 2108, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 1069, 1070, 1071,
	1073, 1074, 633, 75, 0, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 2138, 2139, 0, 0, 0, 0,
	0, 0, 0, 2145, 2146, 2147, 0, 2111, 2112, 2113,
	2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123,
	2124, 2125, 2126, 2127, 2128, 2129, 0, 2133, 0, 0,
	2158, 0, 0, 0, 0, 0, 0, 1306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 516, 0, 746, 0, 0, 0, 0,
	2179, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1584, 1584, 0, 0, 417, 417,
	0, 0, 0, 0, 0, 0, 777, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 0,
	602, 0, 0, 1187, 0, 0, 0, 0, 0, 1342,
	0, 0, 614, 0, 0, 0, 765, 75, 0, 0,
	0, 0, 0, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
	1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
	1584, 1584, 1344, 1584, 0, 0, 0, 0, 0, 0,
	0, 0, 2264, 0, 0, 0, 2267, 2268, 0, 0,
	2270, 0, 0, 0, 0, 1342, 0, 2272, 0, 2274,
	0, 0, 1341, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2281, 417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1268,
	0, 0, 0, 0, 0, 417, 0, 417, 1343, 417,
	0, 0, 0, 1276, 0, 0, 0, 0, 2290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 1306, 0, 0,
	0, 0, 1303, 0, 535, 180, 764, 1212, 0, 0,
	0, 0, 0, 180, 0, 0, 535, 0, 2336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 1303,
	0, 0, 0, 0, 0, 0, 535, 0, 0, 0,
	0, 535, 0, 1306, 0, 1343, 180, 535, 0, 535,
	0, 535, 0, 535, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1406, 0, 0, 0,
	0, 0, 535, 535, 0, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 2391, 2392, 0, 1303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1306,
	0, 0, 1344, 535, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 1245, 0, 0, 2404, 0, 0,
	0, 0, 0, 2407, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 777, 0, 1273, 0, 1273, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 1343, 0, 0,
	0, 0, 2399, 0, 1303, 1343, 1343, 0, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 2439, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	1303, 1303, 0, 2423, 0, 0, 0, 0, 0, 1303,
	1303, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 41, 0, 516,
	0, 746, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 44, 1303, 1064, 1065, 417, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 0, 0, 2490, 1649, 0, 1097,
	0, 417, 0, 0, 417, 0, 1067, 51, 1662, 1108,
	0, 0, 417, 0, 0, 0, 2478, 0, 417, 1417,
	0, 0, 0, 0, 0, 417, 0, 0, 1584, 0,
	1692, 1066, 0, 1200, 0, 0, 63, 1086, 1699, 0,
	614, 0, 0, 64, 1083, 486, 65, 0, 0, 40,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 0, 417, 594, 1742, 1584,
	535, 0, 0, 535, 44, 535, 0, 417, 417, 67,
	1748, 876, 0, 0, 0, 0, 0, 0, 1121, 1662,
	1124, 0, 1089, 1090, 1091, 1092, 0, 1129, 2563, 2563,
	51, 1072, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 2578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 63,
	0, 0, 0, 0, 2563, 0, 64, 0, 486, 65,
	0, 0, 1584, 1107, 0, 0, 0, 0, 0, 1303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 68, 1087, 0,
	0, 0, 67, 764, 0, 0, 0, 0, 0, 0,
	0, 0, 2563, 0, 0, 0, 0, 1784, 0, 764,
	0, 0, 1652, 128, 70, 1098, 71, 0, 0, 0,
	777, 0, 0, 417, 417, 417, 777, 417, 0, 0,
	141, 2644, 0, 783, 0, 1403, 0, 0, 485, 0,
	0, 104, 0, 2644, 0, 75, 2644, 2644, 0, 1093,
	1208, 0, 0, 0, 0, 0, 417, 0, 0, 0,
	143, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1740, 0, 0, 0, 0, 0,
	68, 0, 1102, 0, 0, 783, 783, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 135, 128, 70, 0, 71,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 485, 0, 0, 104, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 1100, 0, 143, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	1911, 0, 0, 0, 0, 0, 0, 0, 0, 1303,
	142, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 1343, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 1787, 783, 1789, 0, 777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 0, 417,
	417, 0, 0, 417, 1807, 1303, 0, 0, 1649, 0,
	0, 1649, 0, 0, 0, 0, 0, 1343, 0, 1951,
	0, 0, 0, 0, 0, 417, 1957, 1958, 0, 0,
	0, 1662, 0, 0, 1965, 0, 0, 0, 0, 0,
	1970, 1971, 1973, 1975, 1976, 0, 0, 0, 0, 0,
	417, 0, 0, 1985, 0, 0, 0, 1988, 0, 0,
	0, 1303, 0, 75, 0, 0, 417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1268, 0, 1268, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 417, 0, 594, 0, 2013, 594,
	594, 0, 0, 417, 0, 2023, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1784, 1869, 1870, 0, 1887,
	1888, 1889, 0, 0, 0, 0, 0, 0, 1784, 0,
	0, 0, 2263, 0, 0, 0, 1869, 1870, 0, 1887,
	1888, 1889, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2262, 0, 0, 602, 0, 0, 0, 0,
	1124, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	1884, 764, 0, 0, 0, 0, 0, 764, 764, 0,
	0, 764, 0, 0, 0, 0, 0, 0, 0, 0,
	1884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 765, 1982, 0,
	0, 0, 0, 0, 1875, 0, 0, 0, 0, 0,
	0, 0, 0, 1208, 1996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1875, 0, 75, 0, 0, 0,
	0, 0, 1064, 1065, 75, 1094, 1095, 1096, 1104, 1105,
	1106, 0, 2007, 0, 0, 0, 1890, 0, 1097, 0,
	0, 1245, 0, 0, 0, 1067, 0, 0, 1108, 0,
	1245, 0, 0, 0, 0, 0, 1890, 0, 417, 0,
	0, 1885, 0, 0, 1649, 75, 0, 75, 0, 0,
	1066, 0, 0, 876, 1649, 0, 1086, 0, 0, 0,
	0, 1885, 0, 1083, 0, 0, 75, 0, 2182, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 2203, 0, 0, 0, 2203, 0, 0, 0, 0,
	0, 2203, 0, 0, 0, 2062, 0, 0, 0, 0,
	1662, 0, 1268, 0, 0, 0, 0, 0, 0, 2223,
	0, 1089, 1090, 1091, 1092, 0, 0, 1886, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 417, 417, 0,
	0, 0, 0, 0, 0, 0, 0, 1886, 0, 0,
	0, 0, 0, 1101, 1109, 2249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2251, 0, 0, 2256, 417,
	0, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	1099, 0, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2280, 0, 0, 0, 0, 0, 1881, 1882, 1883,
	0, 0, 0, 0, 1098, 0, 1880, 1878, 1879, 1871,
	1872, 1873, 1874, 1876, 1877, 0, 764, 1881, 1882, 1883,
	0, 0, 0, 0, 0, 0, 1880, 1878, 1879, 1871,
	1872, 1873, 1874, 1876, 1877, 0, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 876, 0,
	0, 0, 0, 1088, 0, 0, 0, 1513, 0, 1649,
	876, 0, 0, 2312, 2313, 1662, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 1124, 0, 2182,
	876, 0, 0, 0, 0, 2346, 0, 2347, 0, 417,
	2349, 2350, 0, 0, 0, 0, 417, 0, 0, 2355,
	0, 0, 0, 0, 0, 1740, 764, 0, 2182, 0,
	876, 1699, 0, 2182, 0, 0, 1064, 1065, 0, 1094,
	1095, 1096, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 2257, 0, 1067,
	1100, 0, 1108, 1078, 1079, 1085, 1084, 1080, 1081, 1082,
	1103, 1124, 1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073,
	1074, 0, 0, 0, 1066, 0, 0, 0, 0, 1910,
	1086, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 765, 0, 0, 0, 0,
	0, 765, 765, 1869, 1870, 765, 1887, 1888, 1889, 0,
	0, 0, 0, 0, 0, 0, 1662, 0, 2415, 2073,
	0, 2417, 0, 0, 0, 0, 0, 0, 0, 417,
	0, 0, 2182, 0, 0, 1089, 1090, 1091, 1092, 0,
	0, 0, 0, 764, 1072, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 75, 1884, 2203, 0,
	0, 0, 0, 0, 2182, 0, 0, 1101, 1109, 417,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 75, 0, 0, 2249, 2249, 1107, 2348, 0, 0,
	876, 0, 0, 0, 2353, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 602, 0, 2484, 0, 0,
	0, 1087, 1649, 0, 0, 0, 0, 0, 0, 1268,
	0, 1875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 2500, 2501, 0, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1890, 2518, 0, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 1885, 0,
	0, 0, 0, 2534, 0, 876, 0, 0, 417, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 2182, 0, 0, 0, 2424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 876, 876, 0,
	0, 0, 0, 0, 417, 0, 0, 2457, 0, 0,
	0, 0, 0, 0, 1886, 0, 0, 0, 2595, 0,
	0, 0, 0, 0, 1100, 0, 0, 1078, 1079, 1085,
	1084, 1080, 1081, 1082, 1103, 0, 1077, 1075, 1076, 1068,
	1069, 1070, 1071, 1073, 1074, 75, 0, 0, 0, 0,
	0, 0, 0, 1909, 0, 0, 0, 0, 0, 0,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1881, 1882, 1883, 0, 0, 0,
	0, 0, 0, 1880, 1878, 1879, 1871, 1872, 1873, 1874,
	1876, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2538, 0, 0, 1541,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 0,
	765, 0, 0, 0, 0, 0, 0, 185, 186, 1538,
	187, 0, 0, 0, 0, 669, 634, 0, 0, 0,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 1740, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 1539, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 765, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 75, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 1537, 0, 346, 0, 0, 0, 75,
	347, 348, 349, 350, 351, 621, 0, 0, 0, 0,
	0, 0, 2465, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 1540, 0, 0, 0, 0, 0, 0, 627,
	1535, 0, 785, 0, 0, 630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	791, 187, 792, 793, 794, 795, 352, 796, 797, 798,
	799, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 800, 192, 359, 360, 193, 194, 195, 801, 802,
	361, 362, 363, 803, 196, 364, 804, 790, 805, 197,
	198, 199, 0, 201, 202, 203, 200, 806, 204, 1124,
	205, 206, 807, 714, 207, 208, 209, 808, 809, 811,
	810, 812, 813, 814, 210, 211, 418, 212, 365, 213,
	366, 367, 815, 214, 816, 215, 817, 216, 818, 819,
	217, 218, 820, 219, 821, 0, 822, 368, 220, 222,
	221, 223, 369, 370, 823, 715, 824, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 825, 227,
	826, 827, 716, 828, 228, 374, 829, 375, 830, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 718,
	831, 378, 237, 832, 234, 833, 717, 235, 379, 236,
	380, 381, 382, 383, 384, 834, 385, 835, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 836, 245,
	244, 837, 388, 721, 246, 247, 722, 838, 248, 249,
	839, 840, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 841, 842, 843,
	390, 261, 391, 262, 263, 844, 264, 845, 846, 265,
	847, 848, 266, 392, 725, 267, 726, 393, 268, 269,
	270, 271, 272, 849, 273, 394, 274, 395, 275, 850,
	276, 277, 278, 279, 280, 396, 281, 282, 851, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 852, 295, 727, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 853, 308, 309, 398, 307,
	310, 311, 854, 312, 299, 300, 313, 728, 314, 399,
	400, 315, 855, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 856, 323, 857, 324, 325, 326, 327,
	328, 329, 330, 331, 858, 403, 404, 405, 859, 860,
	332, 333, 406, 407, 861, 334, 335, 336, 337, 862,
	863, 338, 339, 340, 341, 864, 342, 865, 408, 343,
	344, 345, 409, 410, 866, 867, 346, 868, 869, 870,
	871, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 785, 0, 0, 0, 0, 0, 1642, 0,
	0, 0, 0, 0, 0, 0, 0, 1643, 185, 186,
	791, 187, 792, 793, 794, 795, 352, 796, 797, 798,
	799, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 800, 192, 359, 360, 193, 194, 195, 801, 802,
	361, 362, 363, 803, 196, 364, 804, 790, 805, 197,
	198, 199, 0, 201, 202, 203, 200, 806, 204, 0,
	205, 206, 807, 714, 207, 208, 209, 808, 809, 811,
	810, 812, 813, 814, 210, 211, 418, 212, 365, 213,
	366, 367, 815, 214, 816, 215, 817, 216, 818, 819,
	217, 218, 820, 219, 821, 0, 822, 368, 220, 222,
	221, 223, 369, 370, 823, 715, 824, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 825, 227,
	826, 827, 716, 828, 228, 374, 829, 375, 830, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 718,
	831, 378, 237, 832, 234, 833, 717, 235, 379, 236,
	380, 381, 382, 383, 384, 834, 385, 835, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 836, 245,
	244, 837, 388, 721, 246, 247, 722, 838, 248, 249,
	839, 840, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 841, 842, 843,
	390, 261, 391, 262, 263, 844, 264, 845, 846, 265,
	847, 848, 266, 392, 725, 267, 726, 393, 268, 269,
	270, 271, 272, 849, 273, 394, 274, 395, 275, 850,
	276, 277, 278, 279, 280, 396, 281, 282, 851, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 852, 295, 727, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 853, 308, 309, 398, 307,
	310, 311, 854, 312, 299, 300, 313, 728, 314, 399,
	400, 315, 855, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 856, 323, 857, 324, 325, 326, 327,
	328, 329, 330, 331, 858, 403, 404, 405, 859, 860,
	332, 333, 406, 407, 861, 334, 335, 336, 337, 862,
	863, 338, 339, 340, 341, 864, 342, 865, 408, 343,
	344, 345, 409, 410, 866, 867, 346, 868, 869, 870,
	871, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 785, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2308, 185,
	186, 791, 187, 792, 793, 794, 795, 352, 796, 797,
	798, 799, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 800, 192, 359, 360, 193, 194, 195, 801,
	802, 361, 362, 363, 803, 196, 364, 804, 790, 805,
	197, 198, 199, 0, 201, 202, 203, 200, 806, 204,
	0, 205, 206, 807, 714, 207, 208, 209, 808, 809,
	811, 810, 812, 813, 814, 210, 211, 418, 212, 365,
	213, 366, 367, 815, 214, 816, 215, 817, 216, 818,
	819, 217, 218, 820, 219, 821, 0, 822, 368, 220,
	222, 221, 223, 369, 370, 823, 715, 824, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 825,
	227, 826, 827, 716, 828, 228, 374, 829, 375, 830,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	718, 831, 378, 237, 832, 234, 833, 717, 235, 379,
	236, 380, 381, 382, 383, 384, 834, 385, 835, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 836,
	245, 244, 837, 388, 721, 246, 247, 722, 838, 248,
	249, 839, 840, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 841, 842,
	843, 390, 261, 391, 262, 263, 844, 264, 845, 846,
	265, 847, 848, 266, 392, 725, 267, 726, 393, 268,
	269, 270, 271, 272, 849, 273, 394, 274, 395, 275,
	850, 276, 277, 278, 279, 280, 396, 281, 282, 851,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 852, 295, 727, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 853, 308, 309, 398,
	307, 310, 311, 854, 312, 299, 300, 313, 728, 314,
	399, 400, 315, 855, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 856, 323, 857, 324, 325, 326,
	327, 328, 329, 330, 331, 858, 403, 404, 405, 859,
	860, 332, 333, 406, 407, 861, 334, 335, 336, 337,
	862, 863, 338, 339, 340, 341, 864, 342, 865, 408,
	343, 344, 345, 409, 410, 866, 867, 346, 868, 869,
	870, 871, 347, 348, 349, 350, 351, 0, 0, 785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1241, 185, 186, 791, 187, 792,
	793, 794, 795, 352, 796, 797, 798, 799, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 800, 192,
	359, 360, 193, 194, 195, 801, 802, 361, 362, 363,
	803, 196, 364, 804, 790, 805, 197, 198, 199, 0,
	201, 202, 203, 200, 806, 204, 0, 205, 206, 807,
	714, 207, 208, 209, 808, 809, 811, 810, 812, 813,
	814, 210, 211, 418, 212, 365, 213, 366, 367, 815,
	214, 816, 215, 817, 216, 818, 819, 217, 218, 820,
	219, 821, 0, 822, 368, 220, 222, 221, 223, 369,
	370, 823, 715, 824, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 825, 227, 826, 827, 716,
	828, 228, 374, 829, 375, 830, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 718, 831, 378, 237,
	832, 234, 833, 717, 235, 379, 236, 380, 381, 382,
	383, 384, 834, 385, 835, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 836, 245, 244, 837, 388,
	721, 246, 247, 722, 838, 248, 249, 839, 840, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 841, 842, 843, 390, 261, 391,
	262, 263, 844, 264, 845, 846, 265, 847, 848, 266,
	392, 725, 267, 726, 393, 268, 269, 270, 271, 272,
	849, 273, 394, 274, 395, 275, 850, 276, 277, 278,
	279, 280, 396, 281, 282, 851, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 852,
	295, 727, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 853, 308, 309, 398, 307, 310, 311, 854,
	312, 299, 300, 313, 728, 314, 399, 400, 315, 855,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	856, 323, 857, 324, 325, 326, 327, 328, 329, 330,
	331, 858, 403, 404, 405, 859, 860, 332, 333, 406,
	407, 861, 334, 335, 336, 337, 862, 863, 338, 339,
	340, 341, 864, 342, 865, 408, 343, 344, 345, 409,
	410, 866, 867, 346, 868, 869, 870, 871, 347, 348,
	349, 350, 351, 652, 641, 642, 639, 640, 631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 669, 634, 0,
	0, 0, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 615, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 141, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 143, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 940, 708, 0, 0, 346, 0, 0,
	0, 135, 347, 348, 349, 350, 351, 621, 136, 603,
	0, 652, 641, 642, 639, 640, 631, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 0, 185, 186, 0,
	187, 1127, 0, 0, 0, 669, 634, 630, 0, 0,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 141, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 143, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 940, 708, 0, 0, 346, 0, 0, 0, 135,
	347, 348, 349, 350, 351, 621, 136, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 185, 186, 0, 187, 0, 0, 1127,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	141, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	143, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 940, 708, 0,
	0, 346, 0, 0, 0, 135, 347, 348, 349, 350,
	351, 621, 136, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 185,
	186, 0, 187, 0, 0, 1127, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 1595, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 1600, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 1596, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	1597, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 611, 0,
	652, 641, 642, 639, 640, 631, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 185, 186, 0, 187,
	0, 627, 0, 0, 669, 634, 0, 630, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	615, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 613, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 185, 186, 0, 187, 0, 0, 627, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 2232, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 1188, 185, 186,
	0, 187, 0, 0, 627, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 1445, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 1444,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 185, 186, 0, 187, 0, 0,
	627, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 615, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 613, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 0, 652, 641, 642, 639, 640, 631,
	0, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	185, 186, 0, 187, 0, 0, 627, 0, 669, 634,
	0, 0, 630, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 2645, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 2646, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 0,
	652, 641, 642, 639, 640, 631, 0, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 185, 186, 0, 187,
	0, 0, 627, 0, 669, 634, 0, 0, 630, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	615, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 185, 186, 0, 187, 0, 0, 627, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 2085, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 185, 186,
	0, 187, 0, 0, 627, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 1188, 185, 186, 0, 187, 0, 0,
	627, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 1600, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 1645, 0, 652, 641, 642, 639, 640,
	631, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	0, 185, 186, 0, 187, 0, 627, 0, 0, 669,
	634, 0, 630, 0, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	1609, 0, 652, 641, 642, 639, 640, 631, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 0, 185, 186,
	0, 187, 0, 627, 0, 0, 669, 634, 0, 630,
	0, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 1607, 0, 652,
	641, 642, 639, 640, 631, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 0, 185, 186, 0, 187, 0,
	627, 0, 0, 669, 634, 0, 630, 0, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 1591, 0, 652, 641, 642, 639,
	640, 631, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 0, 185, 186, 0, 187, 0, 627, 0, 0,
	669, 634, 0, 630, 0, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 1579, 0, 652, 641, 642, 639, 640, 631, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 0, 185,
	186, 0, 187, 0, 627, 0, 0, 669, 634, 0,
	630, 0, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 1577, 0,
	1569, 641, 642, 639, 640, 631, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 185, 186, 0, 187,
	0, 627, 0, 0, 669, 634, 0, 630, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 1572, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 1573,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 1574, 1571, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 1575, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 1570, 351, 621, 1566, 0, 1569, 641, 642,
	639, 640, 631, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 0, 185, 186, 0, 187, 0, 627, 0,
	0, 669, 634, 0, 630, 0, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 1572, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 1573, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 1574, 1571, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 1575,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 1570,
	351, 621, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 185,
	186, 0, 187, 0, 0, 627, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 185, 186, 1432, 187, 1131,
	0, 627, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 883, 0, 652, 641, 642, 639,
	640, 631, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 0, 185, 186, 0, 187, 0, 627, 0, 0,
	669, 634, 0, 630, 0, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 881, 0, 652, 641, 642, 639, 640, 631, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 0, 185,
	186, 0, 187, 0, 627, 0, 0, 669, 634, 0,
	630, 0, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 185, 186, 0, 187, 0,
	0, 627, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 2562, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 2561, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 0, 652, 641, 642, 639, 640,
	631, 0, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 185, 186, 0, 187, 0, 0, 627, 0, 669,
	634, 0, 0, 630, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 185, 186, 0,
	187, 0, 0, 627, 0, 669, 634, 0, 0, 630,
	188, 189, 190, 2560, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 2562, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 2561, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 185, 186, 0, 187, 0, 0, 627,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 0, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 1589, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 1587, 0, 0, 0, 0, 1585, 1586, 0, 185,
	186, 0, 187, 0, 0, 1588, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 0,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 0, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 1589, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 1588, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 0, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 2562, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 0, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 0, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 0, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 2561, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 617, 618,
	0, 185, 186, 0, 187, 0, 0, 627, 0, 669,
	0, 0, 0, 630, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 668, 361, 362, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 670, 671, 0, 715, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	0, 0, 0, 678, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 675, 676, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 933,
	0, 936, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 2184, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 790, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 715, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 141, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 728, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 143, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 940, 410, 0, 0, 346, 0, 0, 0, 135,
	347, 348, 349, 350, 351, 603, 136, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 127,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 768, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	141, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	143, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 940, 410, 0,
	0, 346, 0, 0, 0, 135, 347, 348, 349, 350,
	351, 0, 136, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 762, 0, 1210, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 768,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 141, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 143, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 940, 410, 0, 0, 346, 0, 0,
	0, 135, 347, 348, 349, 350, 351, 603, 136, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 762,
	0, 1210, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 141, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 143, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 940,
	410, 0, 0, 346, 0, 0, 0, 135, 347, 348,
	349, 350, 351, 1927, 136, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 127, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 768, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 761,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 762, 0, 767, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 768, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 762, 0, 767,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 768, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 762, 0, 767, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	1243, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 1741, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 2100, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	652, 641, 642, 639, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 1213, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 688, 689,
	363, 0, 196, 364, 0, 790, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 0, 0, 649, 390, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	406, 407, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 506, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 178,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 177, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 175, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 181, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 178, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 177, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 182, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 181, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 178, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 177, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 182, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 181, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	990, 0, 936, 994, 0, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 181, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 790, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 715, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 728, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 936, 994, 346, 0, 0, 992,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 790,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 715, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 728,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 936, 994, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 790, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 715,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 728, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 936, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 790, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 715, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 728, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 1665, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 1663, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 1707, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 1668, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 1705, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 1667, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 1706, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 1665, 196, 364, 0, 0, 1660, 197,
	198, 199, 0, 201, 202, 203, 200, 1663, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	1668, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 1659, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 1667,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	1666, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 911, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 768, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	774, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 776, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 768, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 770, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 772, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 768, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	437, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	436, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 435, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	1648, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 2250, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 2250,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 2247, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 768, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 1411, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 1409, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	1391, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 532, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 969, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 534, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	529, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	1267, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 1266, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 532, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 969, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 534, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	529, 404, 405, 0, 0, 332, 970, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	532, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 523, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 534, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	953, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 529, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 929, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 928, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	926, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 925, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 922, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 921, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	919, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 918, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 915, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 914, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 182,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 185, 186, 903, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 901, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 900,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 897, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 895, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 890, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 892, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 780, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 782,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 778, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 532, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 523, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 522, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 534, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 524,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 525, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 529, 404, 405,
	0, 0, 332, 527, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 514, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 515, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 512, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 504, 346, 182,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 460, 346, 182, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 1974, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 1972, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 1961, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 515, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 1277, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 0, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 744, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 0, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 0, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 0, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 1064, 1065, 0, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	1108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 1066, 0, 0, 0, 0, 0, 1086, 1097,
	0, 0, 0, 0, 0, 1083, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 1090, 1091, 1092, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 1869, 1870, 0,
	1887, 1888, 1889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2072, 0, 1101, 1109, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 0, 0, 0,
	0, 1072, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1884, 1099, 0, 1101, 1109, 0, 0, 0, 1087,
	0, 0, 0, 1869, 1870, 0, 1887, 1888, 1889, 0,
	0, 0, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1875, 0, 1884, 0, 0,
	1093, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 1890, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 1875, 1885, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 1064, 1065, 0, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 1891, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 1100, 1890, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 1066, 0, 0, 0, 0, 1885, 1086,
	0, 1861, 0, 0, 0, 0, 1083, 0, 1886, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 2531, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 1886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 1881, 1882,
	1883, 0, 0, 0, 1083, 1107, 0, 1880, 1878, 1879,
	1871, 1872, 1873, 1874, 1876, 1877, 0, 0, 40, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 41,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 1881, 1882, 1883, 0, 0, 51,
	0, 0, 0, 1880, 1878, 1879, 1871, 1872, 1873, 1874,
	1876, 1877, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 1107, 0, 64, 1088, 486, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	1869, 1870, 0, 1887, 1888, 1889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 1884, 0, 0, 0, 2481, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 68,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 70, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 141, 0, 1086, 0, 0, 0, 1875, 0,
	485, 1083, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 143, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 2433, 0, 1064, 1065,
	1890, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 142,
	0, 1067, 0, 0, 1108, 1885, 0, 135, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 127, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1886, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 1881, 1882, 1883, 0, 0, 0, 0, 0, 0,
	1880, 1878, 1879, 1871, 1872, 1873, 1874, 1876, 1877, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 2403, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 2398, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 2394, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 2329, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 0,
	0, 1067, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 2295, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 2294, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 2259, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 2103, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 0,
	0, 1067, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 2079, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 1527, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 2594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2593, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 1831, 0, 0, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 0, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 1804,
	1901, 1067, 0, 1900, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 1805, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 1624,
	0, 0, 0, 0, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 1623, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 600, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 0, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 0, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 0,
	0, 1067, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 1907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2083, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 0, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 1902, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 1097,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 1098, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 0, 1100, 0, 0, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 0, 0, 0, 0,
	1064, 1065, 1102, 1094, 1095, 1096, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	1860, 0, 0, 1067, 0, 0, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 0, 0, 0, 0, 0, 0, 1064, 1065,
	0, 1094, 1095, 1096, 1104, 1105, 1106, 0, 0, 1089,
	1090, 1091, 1092, 0, 1097, 0, 0, 0, 1072, 0,
	0, 1067, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1109, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 1083,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1090, 1091,
	1092, 0, 1098, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1109, 0, 0, 0, 0, 0, 1093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1102,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1100, 0,
	0, 1078, 1079, 1085, 1084, 1080, 1081, 1082, 1103, 1088,
	1077, 1075, 1076, 1068, 1069, 1070, 1071, 1073, 1074, 0,
	0, 0, 0, 0, 0, 1064, 1065, 1102, 1094, 1095,
	1096, 1104, 1105, 1106, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1078,
	1079, 1085, 1084, 1080, 1081, 1082, 1103, 0, 1077, 1075,
	1076, 1068, 1069, 1070, 1071, 1073, 1074, 0, 0, 0,
	0, 0, 0, 1064, 1065, 0, 1094, 1095, 1096, 1104,
	1105, 1106, 0, 0, 1089, 1090, 1091, 1092, 0, 0,
	0, 0, 0, 1072, 0, 0, 1067, 0, 0, 1108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1109, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 1083, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 1090, 1091, 1092, 0, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1109, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 40, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 130, 0, 0,
	0, 1099, 0, 0, 1102, 0, 0, 0, 1087, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 57, 0, 0, 0, 63, 0, 0, 133, 1093,
	0, 0, 64, 1100, 123, 65, 1078, 1079, 1085, 1084,
	1080, 1081, 1082, 1103, 1088, 1077, 1075, 1076, 1068, 1069,
	1070, 1071, 1073, 1074, 0, 0, 462, 66, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 1064, 1065, 0, 1094, 1095, 1096,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 51, 0,
	1108, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080, 1081,
	1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070, 1071,
	1073, 1074, 1066, 0, 0, 0, 68, 63, 1086, 0,
	0, 0, 69, 0, 64, 1083, 486, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 128, 70, 0, 71, 0, 72, 0, 134,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 141,
	67, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	104, 0, 0, 1089, 1090, 1091, 1092, 0, 0, 131,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1109, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 136, 1099, 0, 0, 0, 0, 0, 68, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 4, 0, 0,
	0, 0, 0, 0, 128, 70, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 1330, 1319, 1349, 1308, 1340,
	1339, 0, 0, 1310, 1309, 0, 0, 0, 142, 0,
	1351, 1350, 0, 0, 0, 0, 135, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 463, 0, 1345, 0,
	1337, 1336, 0, 0, 0, 0, 0, 0, 0, 1322,
	1335, 0, 1100, 0, 0, 1078, 1079, 1085, 1084, 1080,
	1081, 1082, 1103, 0, 1077, 1075, 1076, 1068, 1069, 1070,
	1071, 1073, 1074, 1334, 1332, 1333, 0, 0, 0, 0,
	0, 0, 1330, 1319, 1349, 1308, 1340, 1339, 0, 0,
	1310, 1309, 0, 0, 0, 0, 0, 1351, 1350, 0,
	0, 1318, 0, 0, 0, 0, 0, 0, 1323, 1321,
	1324, 1325, 1326, 1327, 1328, 0, 1348, 0, 0, 0,
	0, 0, 0, 1312, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 1337, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	1314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1320, 0, 0, 0,
	1334, 1332, 1333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 1318, 1452,
	1450, 1451, 1454, 1453, 0, 1323, 1321, 1324, 1325, 1326,
	1327, 1328, 0, 1348, 0, 0, 0, 0, 0, 0,
	1312, 1311, 553, 0, 579, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	1316, 0, 558, 0, 0, 0, 0, 1314, 0, 1353,
	0, 0, 0, 0, 556, 0, 0, 0, 0, 1338,
	0, 0, 1313, 1320, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 0, 0, 0,
	0, 559, 0, 0, 0, 0, 0, 0, 1317, 565,
	566, 0, 1331, 1352, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 578, 0, 0, 0, 0, 1329, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 0, 0, 1313,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	1352, 0, 0, 569, 0, 0, 0, 0, 564, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 572, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 0,
	0, 0, 577, 0, 0, 0, 0, 583, 0, 0,
	0, 0, 570, 574, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 576,
}
var sqlPact = [...]int{

	44482, -1000, -19, -1000, -1000, -1000, 139, -1000, -1000, -1000,
	-1000, 138, 137, 132, -1000, 130, 118, 117, 116, 114,
	110, 108, 107, 104, 103, 100, -1000, 99, -1000, -1000,
	-1000, -1000, 97, 96, 92, 89, 82, 80, 78, -1000,
	1313, 22556, 77, 76, 1337, -1000, 36672, 75, 65, 64,
	63, 1173, 60, 59, 58, 26688, 1115, 1535, 56, 55,
	54, 53, 50, 1174, 36330, 44614, 1640, 1131, 1679, 35985,
	22211, 1664, 1562, 35640, -1000, -1000, 35295, 48, 47, 46,
	44, 37, -1000, -1000, 34950, 35, 34, 33, 27, 26,
	24, 23, 22, 21, 20, 19, 18, 17, 16, -1000,
	14, 13, 12, -1000, 45180, 11, 10, 9, 1120, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 958, 93, -1000, 978, 432, 1673, 8336,
	1052, 1050, 1037, 1035, 1034, 38724, 36672, 8, -52, 5,
	-1000, 2029, 607, 19737, 44482, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26343,
	25998, 34605, 34260, 6555, 777, -1000, -22, 23242, 36672, -1000,
	94, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15109, 14752, 547, 94, -1000, -1000,
	-1000, -1000, -1000, 33915, -1000, 36672, 33570, 33225, 1554, 32880,
	-1000, -1000, -1000, -1000, -1000, 32535, -1000, -1000, 1887, 1702,
	1651, 25653, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32193, 31848, 31503, 31158, 30813, 509,
	-1000, -1000, -1000, 17957, -1000, -1000, -1000, -1000, 2, -1000,
	-1, -1000, -2, -3, -6, -7, -1000, -8, -9, -1000,
	-10, -11, -1000, -13, -16, 30468, 863, 1275, -1000, -1000,
	-21, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36672,
	-1000, 15821, -1000, 508, -1000, 1714, -1000, 15821, -1000, 1274,
	-1000, -1000, -1000, -1000, -1000, 36672, -1000, -1000, -1000, -1000,
	-1000, -1000, 2174, 1203, 507, 30123, -1000, 1570, -1000, 621,
	807, -1000, -1000, -1000, 9404, 144, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1778, 23598, 1407, 2032, 1886,
	2170, 1465, 1881, 1880, 1840, 1832, 1826, 2165, 919, 2162,
	1782, 1026, 2161, 1807, 1270, 687, 2160, 1710, 1708, -1000,
	-1000, -1000, -1000, 951, -1000, -1000, -1000, 28056, -1000, -1000,
	818, 940, 978, -1000, -1000, -1000, 1396, 1993, 1993, 1993,
	2058, 279, 276, -1000, 93, -1000, 1551, -1000, 1169, -1000,
	-1000, -1000, -1000, -1000, 43958, -1000, -1000, 15821, 15821, 15821,
	15821, 15821, 1152, 530, -1000, 506, 505, 7623, -1000, -1000,
	2144, -1000, -1000, -1000, 296, -1000, -1000, 15821, 94, -1000,
	-1000, -1000, -1000, 503, 2156, -1000, 656, -1000, -1000, -1000,
	611, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1729, 502, 501, 495, -1000, 493, -1000, -1000, 472, 471,
	469, 468, 467, 466, 465, 464, 460, 459, 458, 446,
	445, 444, 443, 1077, -1000, 644, -1000, -1000, 644, 644,
	-1000, 412, 412, 418, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 412, -1000, -1000, -1000, 597, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 435,
	1271, -1000, -1000, 1271, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 775, 38040, -27, 36672, -1000, 434, -27, -1000, -1000,
	433, -1000, 10828, 10828, -1000, -1000, -1000, -1000, -1000, 10116,
	1604, -1000, 3636, -167, 311, 593, -1000, 18669, 21511, -1000,
	-1000, 1246, 1868, 1029, -1000, 977, 1866, 541, -1000, 1195,
	-1000, 1135, 1843, -112, 1757, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 23940, 23242, -22, -36, -1000, -1000, -1000, 6199,
	43958, -1000, 43958, -1000, 845, 20447, 94, -1000, -1000, -1000,
	-1000, 431, 1360, 1397, 628, -1000, 314, -1000, 29778, 628,
	1353, -1000, -1000, -1000, 28056, -1000, 36672, -1000, 36672, -1000,
	871, -1000, 38382, 126, 1830, -1000, -1000, 126, 1813, -1000,
	119, 1811, -1000, -1000, 1303, 1809, -1000, -36, 1802, -1000,
	-1000, 15821, -42, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	607, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29433, 22899, 1493, 500, 43958, 2088, 45005,
	23940, 43958, 22899, -1000, -1000, 36672, -1000, 15821, -1000, 2083,
	1385, -29, -1000, -1000, -1000, -1000, -1000, 1387, 1526, 739,
	804, 9404, 9404, 1954, -1000, 135, 6555, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 29088, -1000, -1000, -1000, 1198,
	36672, -1000, -1000, 1728, -1000, 22899, 36672, -1000, 36672, -1000,
	36672, -1000, 36672, -1000, 36672, -1000, -1000, -1000, -1000, -1000,
	3543, -1000, 1726, -1000, -1000, 36672, -1000, 1384, -1000, -1000,
	-1000, 28746, 28401, -1000, 968, 809, -1000, -1000, 127, -1000,
	36672, 2002, 620, -1000, 1396, 1398, 1722, 682, 1273, 1499,
	14395, 1473, 15821, 93, -1000, -1000, 93, 93, 9048, -1000,
	-1000, -1000, 36672, -1000, 44908, 45005, 6555, 790, 15821, 15821,
	15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821,
	15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821,
	15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821,
	1424, 15821, 772, 15821, 15821, 15821, 15821, 1228, 1114, 411,
	1146, -1000, 2123, 2123, 2123, 44333, 44333, 372, 530, -1000,
	15821, -1000, 189, 15821, 276, 41708, -23, 7267, -1000, -1000,
	-1000, 14039, 642, 43958, 94, 5087, -1000, 2143, 997, 1741,
	1643, 425, 538, 537, 536, 535, 15821, 15821, 13683, 13326,
	12969, 16533, 12612, 15821, 7979, 15821, 15821, 15821, 15821, 12255,
	11898, -1000, 424, -1000, -1000, -1000, -1000, 2142, -1000, -1000,
	2140, -1000, 789, 783, 2139, -1000, -29, -1000, 38040, -1000,
	36672, -27, 2082, 36672, -1000, 134, -1000, 42735, -1000, 134,
	-43, -1000, 1469, 1463, 20092, 1350, 1168, 1168, 1168, -1000,
	423, 521, 593, 5468, 11541, -1000, 27030, 1172, 172, 274,
	18313, 1604, -1000, 36672, -39, 1027, -1000, 25308, 1984, 1981,
	1983, 28056, 2071, 189, 1998, 1704, 771, 28056, 1996, 769,
	2070, 189, 1692, 764, 36672, 6555, 1994, 590, -1000, 36672,
	-1000, -1000, -1000, 1689, -49, -1000, -1000, 24966, 2081, 1801,
	-1000, 1397, -1000, 908, 908, 1505, 908, 908, 908, -1000,
	-1000, 1098, -1000, 2080, 36672, 1268, 1351, -1000, -1000, 805,
	1798, 635, 397, 2079, 397, 20801, -1000, 36672, -1000, 36672,
	-1000, -1000, 36672, -1000, 36672, -1000, 36672, 36672, -1000, 36672,
	36672, -57, 43958, 39895, 24624, 763, -1000, 669, 24966, 683,
	-58, -1000, 875, -1000, -1000, -1000, -1000, 270, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 418, 1077, 412, 412, 412, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 597, -1000, -1000, 644,
	644, 644, -1000, -1000, -51, -1000, 1686, 602, -64, 699,
	-29, -1000, 1271, -1000, 1189, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2155, -1000,
	2128, -1000, -1000, 2137, -31, -1000, -31, -1000, 6555, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36672, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 191, -1000, -1000, -1000, -1000,
	-1000, -1000, 36672, 36672, 36672, -1000, 28056, 629, 1725, -1000,
	2004, 1398, 1722, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 43958, -1000, 385, -1000, -1000, 43958, 969, 1540, -1000,
	1540, -32, -1000, 42458, 1444, 36672, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 619, 549, 549,
	786, 786, 786, 786, 2063, 2603, 2693, 1124, 295, 295,
	295, 295, 295, 295, 295, 295, 352, 559, 559, 352,
	352, 352, 352, 352, 295, 295, 295, 44333, 44235, 702,
	15821, 15821, 761, 1106, 411, 702, 15821, 702, 702, 702,
	702, -1000, 1576, -1000, -1000, -1000, -1000, 1684, 410, 16533,
	16533, -1000, -1000, -1000, 7623, 16889, -1000, -1000, -1000, -1000,
	408, 15821, -1000, 41985, -227, 272, -90, -1000, 15821, 520,
	-79, -1000, 884, -1000, 15821, -1000, -14, 15821, 15821, 15821,
	271, -1000, 268, -1000, 750, -1000, 749, 748, 744, -1000,
	407, 1163, 404, 403, 15821, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 43860, 39414, 267, -1000, 1682, -90, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 266, -1000, 265, -1000,
	43583, -90, 264, 39603, -1000, 16533, 16533, 16533, 7623, 400,
	261, -1000, 42360, -1000, 43485, 11184, 11184, 11184, 260, 43208,
	15821, -90, 4616, 4292, 3583, -66, -67, -1000, -73, -1000,
	2136, -87, 259, 617, 613, 257, -1000, -1000, 399, -88,
	635, 10828, 19381, 6555, -1000, 635, 10116, -1000, 20092, 20092,
	1287, 1448, 20092, -1000, -1000, -1000, -1000, 27030, 364, 593,
	27030, -1000, 2134, 1462, 256, -1000, -1000, -1000, 36672, 398,
	-1000, 593, 255, 979, 36672, 36672, 36672, -1000, -1000, 1340,
	37698, 1338, 45005, 36672, -1000, 396, 395, 1437, 1415, 36672,
	36672, 37356, 37014, 36672, 1127, 189, -1000, 612, 393, 36672,
	974, 610, 36672, 189, -1000, 392, 36672, 946, -1000, 600,
	1578, 1292, -1000, 833, 1677, 36672, 254, -94, -35, 45005,
	-1000, -1000, -1000, -1000, -1000, 36672, 417, 36672, 189, 36672,
	-1000, -1000, -1000, 2133, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2154, 189, 36672, 1794, 1844, 548, 36672, 1499, 15821,
	973, -1000, 19025, 654, 36672, 930, 131, -1000, -1000, -1000,
	586, 36672, -1000, -1000, 126, 126, -1000, 119, 1303, -36,
	-1000, 15821, -1000, -1000, 36672, 23940, -97, -1000, -1000, 45005,
	-1000, 528, 685, -1000, 2132, 627, 23940, 36672, 9404, 9404,
	-1000, 1477, -1000, -1000, 980, -1000, 1020, -1000, -1000, -1000,
	-1000, 9404, -1000, -40, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1210, 1092, -1000, -1000, -1000, 969, -1000, 15821, -1000,
	-1000, -1000, 9048, -1000, -1000, -1000, 36672, -165, 15821, 702,
	702, 15821, 16533, 16533, -1000, 702, -1000, -1000, -1000, -1000,
	-1000, 1665, 391, 15821, 45005, 39537, 4693, -102, -1000, 15821,
	-37, -1000, 15821, -1000, 41610, -1000, -1000, 496, 1785, -1000,
	15821, 43110, 242, 10472, -1000, 42833, -30, -30, -1000, 2152,
	1359, 1017, 994, 883, 2130, -1000, 21156, 636, 1177, 41333,
	44908, 45005, -1000, 15821, -1000, -1000, 1661, 15821, -1000, 44908,
	45005, 16533, 16533, 16533, 16533, 16533, 16533, 16533, 16533, 16533,
	16533, 16533, 16533, 16533, 16533, 16533, 16533, 16533, 16533, 16533,
	1615, 16533, 2120, 2120, 2120, -38, 15821, -1000, 1667, 1661,
	15821, 15821, 45005, 241, 235, 229, -1000, 15821, -90, 15821,
	15821, 15821, -1000, -1000, -1000, 228, -1000, 2121, -1000, -1000,
	-1000, -1000, 683, -1000, 1621, -1000, -80, -1000, 1604, -1000,
	1621, -1000, -1000, 1287, -1000, 390, 15821, 20092, -1000, 514,
	-1000, -108, -1000, 27030, -1000, 512, -210, -1000, 585, -1000,
	593, 382, 36672, 27030, -1000, -1000, -1000, 738, 735, 1792,
	-1000, 1330, -1000, 658, -1000, 985, 15821, 17601, 381, 373,
	1148, -1000, 1791, 1303, 1768, 1303, -1000, -39, 1002, -1000,
	21866, 15821, -1000, 733, 21866, -1000, -1000, 15821, -1000, 725,
	21866, 627, 1659, 820, -1000, 830, -1000, 1558, -1000, 24966,
	371, 36672, 370, -1000, 369, -1000, -1000, 366, 36672, 1401,
	548, 24282, -1000, 628, 930, -1000, 43958, -1000, 930, 8692,
	1986, -113, -1000, -1000, -1000, 635, 20801, 20092, 10116, -121,
	-1000, -1000, -1000, -1000, 43958, -40, 1961, 1961, -1000, 2119,
	-1000, 511, 227, -1000, 27714, -1000, -40, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36672, 1489, 6555, 36672, 36672, 1237,
	41235, -1000, 1987, 6555, 2087, 702, 4166, 4146, 15821, 45005,
	44654, -124, 15821, 15821, -1000, 223, 15821, 462, 43958, -1000,
	-1000, -1000, 43958, 15821, 2151, 15821, 212, 211, 210, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 208, -1000, -1000,
	39066, 15821, 207, -1000, 204, 203, 43958, 1667, 43958, -1000,
	-1000, 928, 928, 920, 920, 920, 920, 2120, 1233, 1101,
	226, 461, 461, 461, 993, 673, 673, 461, 461, 461,
	1655, 1431, 362, 40050, 15821, 198, -1000, -1000, 43958, 43958,
	196, -1000, -1000, -1000, -90, 494, 40958, 40860, -1000, 195,
	194, 1591, 2055, -1000, 20092, 1591, -1000, 36672, 43958, -1000,
	-167, -1000, 2117, -1000, -1000, 1462, -1000, 5838, 27030, 36672,
	-126, -1000, 36672, 36672, 36672, 1766, -1000, 1508, -1000, 40583,
	-127, -1000, 310, 2020, 15821, -1000, -1000, 358, 17601, 36672,
	-1000, 1454, 1449, 692, 36672, -1000, 36672, -1000, 36672, 36672,
	36672, -1000, 354, 94, -129, 36672, -1000, -132, 36672, -1000,
	-1000, 23940, 782, -1000, 1154, 1571, -1000, 17601, 351, 36672,
	24966, 2078, 17601, 1247, 1399, 548, 24282, -1000, 805, -1000,
	-1000, -41, -1000, 356, 189, 930, -1000, -44, -1000, 584,
	1937, -1000, 1929, 365, -1000, -1000, -45, 339, -1000, 582,
	579, -1000, -55, -1000, 546, -1000, -1000, -1000, -1000, -1000,
	-1000, 1987, 15821, 15821, 44654, -134, -1000, 702, 702, -1000,
	40485, -1000, 43958, -1000, 42833, -1000, -1000, -1000, -1000, 1151,
	-1000, 40208, -1000, -1000, -1000, -1000, 16533, 1653, 338, 45005,
	40110, -1000, -1000, 15821, -1000, -1000, -1000, -1000, 632, 15821,
	15821, 1604, 632, -135, 593, -1000, -1000, -1000, 2113, -1000,
	-137, -1000, -1000, -1000, -1000, 36672, -1000, 36672, -1000, 6555,
	36672, 1608, 1322, -1000, -1000, 1412, 336, 16533, 36672, -1000,
	1076, 17601, 1987, 94, 6555, 1987, 39833, 5087, -140, -142,
	1312, -1000, 1307, 15821, -1000, 45005, 1303, 1303, -1000, 724,
	711, 15821, 705, -1000, 704, -1000, -60, 21866, -1000, -1000,
	2047, 1126, -143, 17601, -145, 184, 189, -152, 36672, -1000,
	548, 24282, -1000, 1844, 1815, 36672, 1977, -1000, -1000, 333,
	332, 329, -1000, 27372, 27372, 23940, 23940, 1489, -1000, 36672,
	-1000, 702, 702, -1000, -1000, 179, 1177, 2046, -1000, 258,
	16533, 45005, -153, -1000, 39735, -1000, 36672, 43958, -90, -1000,
	-1000, 27030, 353, -1000, -1000, 1004, -1000, -1000, 36672, 1325,
	-1000, -1000, 15821, 40050, 328, 1558, 326, -1000, -1000, -1000,
	-1000, -1000, -1000, 2020, -14, -1000, 1013, -1000, -1000, 43958,
	2017, -1000, -1000, 36672, 36672, -30, 324, 323, -1000, 1087,
	36672, 1076, -154, -1000, 1558, -1000, 1076, 321, 24282, -1000,
	1401, 808, -155, 36672, -1000, -1000, 6909, 23940, 23940, -1000,
	-163, -1000, -1000, -1000, -168, -1000, 1041, 15821, 258, -171,
	-1000, -1000, -69, -1000, 2076, -1000, -1000, -1000, -1000, 1764,
	39453, 1374, 36672, -1000, 36672, 1987, 178, 36672, 666, 6555,
	-1000, -1000, 173, 15821, 15821, 320, 319, 317, 1558, 1076,
	-1000, 1558, 17601, -1000, 1399, 869, -1000, 635, -1000, -176,
	-177, -1000, -1000, 170, 16177, 16177, -90, -1000, 36672, 315,
	1750, -1000, 1234, 1040, 166, -179, -1000, -1000, 314, -1000,
	15821, -1000, 2151, -184, -185, 36672, 36672, 36672, -1000, 1558,
	-1000, -187, -1000, 20801, -1000, 627, 627, -1000, -1000, -1000,
	17245, 1221, 897, 42083, -1000, -1000, -1000, 36672, -1000, 1243,
	1239, 926, -1000, -1000, -1000, -1000, -1000, 1374, 43958, -1000,
	-1000, -192, -193, -195, -1000, 1076, -161, -1000, -1000, 2091,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1894, -1000, 678,
	1201, 1201, 1234, 309, 308, 1209, 1558, -1000, 15465, -1000,
	2099, -1000, -1000, 1421, -1000, -1000, 1149, 1123, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 161, 6555, 159, 6555,
	-1000, 653, -1000, 649, 306, 1392, -48, 9760, 793, 313,
	-99, -1000, -200, -1000, 43958, -1000, -1000, 293, -1000, 9760,
	1149, -1000, 9760, 9760, -201, -1000, -1000, -202, -1000, -63,
	1123, -109, -1000, -1000, 1123, -1000,
}
var sqlPgo = [...]int{

	0, 2619, 2618, 1727, 2007, 2617, 2616, 2611, 2606, 2604,
	2603, 2602, 2599, 2598, 2597, 2596, 2595, 2594, 2593, 2592,
	2590, 2587, 2586, 2585, 1982, 2584, 1971, 2583, 2580, 2567,
	2564, 2562, 36, 2561, 2559, 1969, 2557, 2555, 2553, 2552,
	2542, 2540, 2539, 1934, 2538, 1932, 2534, 2530, 2524, 2522,
	2519, 1926, 2518, 78, 116, 1904, 2516, 2514, 1898, 1885,
	1880, 2512, 1878, 2510, 2509, 1853, 1848, 2508, 60, 2507,
	2506, 2505, 1831, 1750, 2504, 2499, 2496, 159, 2486, 1747,
	2484, 2483, 2480, 2475, 2472, 2467, 2462, 2460, 2457, 2455,
	2454, 2452, 2449, 2448, 2446, 2441, 2440, 2439, 2438, 163,
	2436, 2435, 1745, 1739, 2433, 2432, 38, 31, 19, 44,
	30, 166, 3072, 152, 2431, 2430, 2428, 2420, 2418, 2415,
	29, 98, 99, 2413, 218, 2411, 2408, 63, 40, 26,
	18, 2405, 93, 2403, 2402, 2400, 24, 2401, 2398, 135,
	2397, 157, 32, 2588, 155, 151, 111, 118, 2396, 2393,
	2383, 73, 119, 8, 5, 3, 7, 1, 2382, 2,
	4, 2381, 2374, 17, 86, 114, 2370, 124, 201, 2367,
	2364, 130, 2361, 55, 96, 1586, 108, 120, 391, 89,
	2357, 64, 15, 59, 2356, 2355, 165, 54, 2354, 37,
	68, 145, 106, 2350, 57, 2348, 2345, 122, 167, 162,
	128, 76, 129, 139, 2333, 2332, 2328, 103, 2327, 115,
	94, 2326, 2324, 81, 2323, 97, 142, 2322, 140, 109,
	2319, 2317, 90, 2314, 127, 2312, 2310, 160, 153, 110,
	21, 50, 66, 14, 1604, 1579, 134, 88, 62, 52,
	2308, 1183, 1225, 1351, 48, 102, 84, 69, 105, 51,
	87, 150, 35, 2307, 2306, 138, 2305, 2303, 2302, 2301,
	2300, 101, 2297, 2296, 27, 2286, 67, 41, 46, 91,
	45, 143, 132, 112, 156, 100, 2248, 79, 125, 2247,
	53, 2244, 2243, 1689, 117, 2241, 2240, 2239, 1645, 1172,
	1057, 133, 2233, 2232, 982, 863, 2231, 2230, 80, 2229,
	113, 104, 92, 147, 154, 43, 2228, 121, 22, 2226,
	39, 33, 0, 141, 23, 2224, 123, 72, 2222, 2219,
	2215, 2214, 34, 11, 9, 6, 12, 10, 126, 28,
	2213, 2208, 131, 82, 75, 2204, 161, 2202, 2196, 2193,
	49, 2189, 16, 2188, 20, 2187, 2186, 25, 13, 2185,
	2184, 146, 2183, 95, 2182, 2042, 2181, 149, 2180, 2179,
	1845, 2178, 58, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 122, 122, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 119, 119, 124, 124, 124, 126, 126,
	123, 123, 118, 118, 24, 24, 66, 66, 109, 59,
	59, 59, 310, 310, 311, 311, 105, 105, 106, 106,
	106, 106, 107, 107, 108, 108, 108, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 43, 43, 44, 44, 44,
	44, 44, 44, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 50, 50, 50, 48, 48, 48,
	47, 47, 47, 46, 46, 46, 49, 49, 49, 177,
	177, 176, 176, 180, 180, 51, 51, 51, 51, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 54, 54, 54, 54, 54,
	54, 54, 279, 279, 278, 52, 52, 253, 253, 55,
	55, 208, 208, 56, 56, 56, 56, 56, 57, 57,
	67, 67, 351, 351, 351, 355, 355, 356, 356, 357,
	357, 357, 357, 357, 357, 357, 353, 353, 62, 62,
	62, 62, 63, 63, 63, 64, 64, 104, 104, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 29, 30,
	30, 31, 31, 32, 32, 73, 73, 73, 75, 72,
	72, 72, 74, 74, 74, 74, 76, 76, 77, 77,
	77, 77, 77, 78, 78, 304, 302, 302, 303, 303,
	149, 149, 149, 149, 149, 150, 150, 150, 309, 309,
	309, 309, 309, 309, 308, 308, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 91, 91, 91, 99, 99, 99, 99,
	99, 99, 99, 80, 80, 85, 85, 85, 85, 85,
	81, 81, 86, 86, 87, 87, 88, 88, 88, 88,
	88, 88, 82, 82, 82, 82, 90, 90, 90, 90,
	89, 89, 95, 95, 95, 95, 95, 95, 92, 92,
	92, 92, 93, 93, 93, 96, 96, 96, 96, 83,
	83, 84, 84, 97, 97, 98, 98, 98, 98, 98,
	94, 94, 94, 352, 352, 354, 354, 60, 60, 38,
	38, 39, 39, 151, 151, 152, 152, 232, 232, 232,
	232, 153, 153, 125, 125, 125, 154, 154, 155, 155,
	156, 156, 156, 158, 158, 159, 159, 160, 160, 160,
	157, 157, 157, 231, 320, 320, 321, 321, 321, 321,
	321, 321, 322, 322, 322, 322, 322, 322, 322, 318,
	318, 319, 316, 316, 317, 317, 317, 317, 358, 358,
	230, 230, 163, 163, 323, 323, 323, 323, 324, 324,
	324, 324, 324, 327, 326, 325, 325, 325, 325, 325,
	265, 265, 265, 42, 196, 196, 195, 195, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 198, 101, 101,
	40, 40, 131, 131, 41, 41, 37, 37, 37, 212,
	212, 167, 167, 270, 270, 270, 142, 142, 120, 120,
	120, 17, 13, 13, 13, 13, 13, 13, 23, 23,
	21, 21, 213, 213, 214, 214, 61, 61, 65, 65,
	70, 70, 100, 100, 100, 100, 100, 100, 25, 25,
	25, 25, 33, 33, 33, 33, 69, 69, 360, 360,
	138, 138, 138, 138, 139, 139, 227, 227, 228, 228,
	361, 361, 229, 229, 229, 133, 132, 134, 134, 36,
	36, 36, 127, 127, 128, 128, 129, 129, 130, 130,
	362, 362, 58, 58, 58, 103, 103, 145, 145, 224,
	224, 224, 226, 226, 225, 225, 225, 194, 194, 194,
	102, 102, 172, 172, 182, 182, 183, 183, 276, 184,
	184, 68, 68, 112, 112, 110, 110, 110, 110, 110,
	110, 110, 110, 111, 111, 111, 113, 113, 113, 113,
	113, 113, 113, 116, 116, 116, 117, 117, 117, 115,
	115, 333, 333, 333, 336, 336, 332, 334, 334, 335,
	335, 359, 359, 199, 199, 199, 162, 161, 161, 165,
	165, 164, 166, 166, 269, 269, 269, 192, 192, 191,
	191, 191, 191, 217, 217, 215, 215, 216, 216, 220,
	220, 221, 221, 221, 222, 222, 223, 223, 190, 190,
	249, 249, 219, 219, 218, 114, 114, 114, 171, 171,
	171, 173, 173, 239, 239, 239, 240, 240, 238, 238,
	238, 238, 271, 271, 271, 271, 271, 271, 271, 271,
	349, 349, 349, 350, 350, 268, 268, 272, 272, 272,
	272, 272, 272, 266, 266, 266, 266, 267, 267, 277,
	277, 202, 202, 202, 202, 200, 200, 201, 201, 273,
	273, 273, 273, 193, 193, 274, 274, 274, 233, 233,
	280, 280, 280, 298, 298, 170, 170, 170, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 282,
	282, 282, 282, 284, 284, 284, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 297, 297, 297, 297, 297, 285,
	285, 292, 292, 293, 293, 294, 295, 286, 286, 287,
	287, 288, 289, 296, 296, 296, 296, 300, 300, 290,
	290, 290, 290, 290, 291, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 210,
	210, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 243, 243, 243, 243, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 328, 328,
	328, 328, 328, 328, 328, 328, 330, 330, 331, 331,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	337, 337, 338, 338, 340, 340, 341, 341, 342, 343,
	343, 343, 344, 345, 345, 339, 339, 346, 346, 346,
	347, 347, 348, 348, 348, 348, 348, 255, 255, 256,
	257, 263, 263, 263, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	140, 140, 140, 140, 140, 179, 179, 178, 178, 252,
	252, 250, 250, 254, 254, 203, 203, 299, 299, 299,
	299, 299, 299, 299, 204, 204, 204, 211, 205, 205,
	206, 206, 206, 206, 206, 246, 247, 207, 207, 207,
	248, 248, 258, 262, 262, 261, 260, 260, 259, 259,
	236, 236, 237, 237, 235, 234, 187, 187, 186, 186,
	185, 185, 363, 363, 264, 264, 188, 188, 189, 181,
	181, 275, 275, 275, 275, 174, 174, 147, 147, 175,
	175, 143, 143, 146, 146, 144, 144, 144, 144, 168,
	168, 169, 169, 141, 141, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 301, 301, 301, 251,
	135, 135, 135, 136, 136, 137, 137, 306, 306, 306,
	307, 307, 307, 307, 305, 305, 305, 305, 305, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 1, 4,
	7, 1, 3, 2, 4, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 7, 7, 7, 4, 5,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 8,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 1, 0, 9, 9,
	6, 7, 5, 3, 5, 1, 3, 1, 1, 1,
	10, 11, 9, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 1, 0, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 4, 2,
	4, 3, 3, 0, 6, 3, 11, 14, 4, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 3, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 4, 4, 2,
	3, 5, 5, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 1, 0, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 1, 0, 2, 2, 2, 3, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 6, 3, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 2, 3, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	1, 1, 3, 3, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 5, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 385, -4, -24, -26, -29, -34,
	-35, -56, -43, -44, -45, -55, -51, -57, -58, -59,
	-60, -52, -66, -65, -67, -70, -68, -61, -62, -71,
	-79, -100, -101, -102, -103, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 48, -30, 72, -36, -37, -38,
	-39, 74, -40, -41, -42, 95, -335, 99, -46, -47,
	-48, -50, -49, 103, 110, 113, 135, 146, 234, 240,
	261, 263, 265, 272, -110, -112, 259, -63, -64, -72,
	-73, -74, -75, -104, 285, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, -98, 288, -25, -33, -69, 327, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 112, -333, -113, -111, 382, 260, 336,
	35, 297, 62, 106, 267, 352, 359, -116, -114, -115,
	-117, 277, 344, 307, 386, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 2, 307,
	347, 88, 155, 245, -351, 2, -175, 307, 88, -144,
	-135, 375, 4, -312, -314, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 49, 56, 61, 62, 63,
	68, 65, 66, 67, 70, 72, 73, 76, 77, 78,
	86, 87, 89, 91, 95, 97, 99, 102, 103, 105,
	110, 112, 111, 113, 123, 124, 129, 131, 136, 142,
	143, 146, 147, 148, 156, 159, 161, 154, 171, 172,
	173, 177, 178, 179, 182, 181, 186, 187, 190, 191,
	194, 196, 199, 197, 200, 203, 201, 205, 206, 208,
	207, 213, 215, 216, 218, 221, 224, 227, 230, 231,
	232, 233, 234, 236, 238, 240, 242, 243, 244, 245,
	246, 248, 249, 251, 252, 253, 254, 255, 259, 257,
	258, 260, 261, 262, 263, 265, 267, 268, 270, 286,
	287, 298, 272, 273, 274, 275, 276, 281, 278, 279,
	282, 283, 285, 288, 290, 293, 296, 297, 299, 302,
	303, 300, 295, 306, 308, 309, 310, 311, 312, 313,
	314, 315, 322, 323, 327, 328, 329, 330, 333, 334,
	335, 336, 338, 341, 342, 343, 348, 353, 354, 355,
	356, 357, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 149, 150, 153, 160,
	162, 163, 164, 165, 166, 168, 175, 176, 184, 202,
	212, 214, 225, 229, 237, 239, 247, 269, 280, 291,
	292, 301, 304, 317, 318, 319, 324, 325, 340, 344,
	345, 385, 385, 2, 172, 244, -143, -135, 88, 385,
	385, 385, 385, 307, 2, 278, 337, 347, -212, 88,
	332, 385, 385, 385, -135, 240, 22, 2, 97, 159,
	335, 334, 22, 236, 279, 309, 311, 2, 385, 385,
	385, 385, 385, 2, 347, 307, 155, 88, 337, -135,
	2, -54, 2, 382, -53, -4, -35, -45, -55, -51,
	-24, -26, -43, -59, -58, -60, -62, -66, -65, -68,
	-72, -73, -79, -102, -103, 285, 112, -355, 2, 22,
	-356, -357, 74, 103, 135, 277, 159, 97, 334, 307,
	2, 172, 2, -135, 2, -351, 2, 172, 2, -355,
	2, -135, 2, -139, 2, 272, -135, 385, 385, 385,
	385, 385, 191, 56, 269, 282, -77, 323, -76, 317,
	-304, -78, 2, -176, 203, -135, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 2, -99, 282, 34, 56, 22, 61,
	89, 136, 155, 156, 178, 69, 70, 243, 191, 173,
	322, 179, 283, 308, 323, 74, 338, 312, 111, 4,
	88, 203, 284, 317, 385, 385, 385, -359, 2, 307,
	274, 288, -111, -113, -112, -164, -165, 331, 167, 108,
	223, -110, -112, 2, -333, -99, 282, 2, 56, 22,
	-302, 2, -264, 219, -241, 94, -243, 373, 374, 368,
	209, 358, -255, -245, -258, 109, 269, 382, -143, -244,
	388, 9, -330, -112, 29, -256, -257, 50, -135, 7,
	8, 5, 6, -141, -282, -251, -291, 326, 116, 211,
	-328, -329, 4, -312, -306, -283, -293, -287, -290, 168,
	59, 80, 81, 84, 82, 85, 284, 337, 51, 28,
	114, 115, 229, 237, 304, 324, 325, 149, 212, 150,
	57, 137, 184, 102, 37, 39, 41, 42, 52, 53,
	90, 92, 93, 125, 126, 127, 160, 162, 163, 164,
	165, 166, 214, 247, 291, 301, 318, 319, 345, -313,
	-294, -295, -288, -289, 75, 117, 134, 158, 151, 170,
	174, 185, 188, 198, 204, 226, 228, 266, 289, -296,
	-360, 2, 323, 323, 2, -360, 2, -360, 2, -138,
	2, 323, 320, -336, 248, -332, -135, -336, 385, 385,
	387, 385, -161, -162, 2, 22, 100, -189, 2, 382,
	-271, 2, 380, -273, -143, -112, -272, 382, 220, -3,
	2, -273, 149, -143, 2, -273, 149, -143, 2, -135,
	2, -146, 149, -143, -305, 4, -312, -314, -313, -315,
	59, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 50, 51, 55, 58, 60, 69, 74, 79, 80,
	82, 81, 83, 84, 85, 94, 96, 98, 100, 101,
	104, 106, 108, 116, 118, 130, 132, 133, 135, 138,
	140, 152, 155, 157, 167, 169, 180, 183, 189, 192,
	193, 209, 210, 211, 217, 219, 220, 222, 223, 235,
	241, 250, 264, 277, 284, 294, 305, 307, 316, 320,
	321, 326, 331, 332, 337, 339, 346, 347, 349, 350,
	351, 352, 320, 387, -175, -168, -135, -235, -234, 384,
	-241, 2, -241, 2, 133, 382, -186, -187, -234, -235,
	2, -176, 149, -176, -135, 2, -176, 2, 155, -135,
	149, 2, -135, 22, 133, 2, 169, 2, 169, 2,
	-274, 2, -273, -177, 149, 2, -176, -177, 149, 2,
	-147, 149, 2, -146, -135, 149, 2, -168, 149, 2,
	-208, 382, -279, 2, -278, -307, 4, -312, -314, -313,
	344, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 282, 219, 387, -176, -241, -253, 382,
	133, -241, 219, -135, 2, 286, 2, 382, -77, 54,
	323, -228, 2, -229, -132, -133, -134, 171, 242, 246,
	357, 320, 363, 133, -302, -180, 384, -99, 2, -310,
	2, -308, 9, -307, 5, 286, 2, 243, 283, 56,
	133, 2, 2, -352, 2, 219, 133, 2, 133, 2,
	133, 2, 133, 2, 133, 2, 2, 243, 283, 2,
	130, 2, 322, 2, 2, 133, 2, 171, 242, 298,
	2, 307, 347, 2, 133, 133, 357, 2, -193, -273,
	307, 357, 22, -164, -165, -218, -191, 130, -215, -216,
	189, 118, 217, -199, 22, 100, -199, -199, 44, 383,
	383, -99, 286, 2, 10, 11, 58, 33, 373, 374,
	375, 376, 128, 377, 378, 371, 372, 370, 361, 362,
	365, 366, 367, 71, 364, 363, 64, 195, 271, 119,
	120, 121, 122, 256, 13, 14, 15, 26, 222, 188,
	358, 151, 289, 368, 16, 17, 18, 170, 36, 152,
	-140, -148, -241, -241, -241, -241, -241, 228, -185, -236,
	380, -112, 382, 382, -112, -241, -178, 382, 7, -112,
	-250, 380, -259, -241, -186, 382, 5, 382, 5, -337,
	353, 130, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 239, -300, 348, -300, -300, -284, 382, -284, -285,
	382, -284, 354, 359, 382, -227, -228, -227, 320, -139,
	387, -336, -169, 382, -189, -181, -275, -241, 375, -181,
	-188, -264, 75, -202, 174, 204, 134, 185, 266, 158,
	7, -54, -238, 388, 382, 375, -268, 359, -112, -272,
	382, -271, -143, 382, -122, 257, -121, 21, 23, 103,
	342, 109, 295, 313, 112, 273, 257, 109, 112, 257,
	295, 313, 273, 257, 109, 388, 112, -310, -144, 387,
	-305, 375, 299, 383, -174, -143, -187, 382, -163, 209,
	-196, -195, -197, 147, 197, 206, 198, 297, 47, 86,
	-131, -334, 352, -163, 382, -136, 149, 2, -135, -334,
	209, -274, -145, -143, -145, 285, -135, 30, -124, 387,
	49, 262, 109, -124, 109, -124, 387, 109, -124, 109,
	109, -178, -241, 383, 387, -351, -357, 74, 382, 30,
	-252, -280, -281, -283, -292, -286, -290, -291, 40, 46,
	45, 176, 175, 314, 202, 280, 292, 340, 153, 38,
	218, 161, 4, 160, 162, 163, 164, 165, 166, 291,
	37, 247, 126, 127, 125, 102, 93, 92, 214, 42,
	41, -294, -295, -288, -289, 90, 318, 319, 168, 39,
	53, 52, 345, 301, -311, -310, -351, -304, -178, 30,
	-228, 2, -361, 387, 187, -150, 194, 208, 142, 220,
	355, -309, 5, 4, -251, -265, 94, 191, -291, 8,
	374, -301, 7, 373, -303, -302, -303, 78, 384, -305,
	-176, 22, 287, 2, -304, -354, 130, -351, -304, -304,
	-304, -304, -304, 282, -54, 130, -135, 187, -304, 2,
	-304, 2, 307, 155, 307, -124, 387, -143, 65, 66,
	357, -218, -191, -192, -191, -219, -218, 334, -216, -215,
	-220, -241, 22, -223, 124, 205, -241, -243, -111, -111,
	-111, -166, -269, -241, 241, 155, -304, -298, -280, -297,
	252, 253, 251, 255, 254, -280, -305, 317, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	188, 151, 289, 36, 152, -241, 320, -241, -241, -241,
	-241, 201, 209, 211, 326, 116, 333, 100, 215, -363,
	305, 32, -248, -112, 382, -263, 27, 294, 22, -255,
	269, 382, -236, -241, -237, -179, -178, 383, 387, -179,
	-254, -250, -262, -261, 349, 383, -178, 346, 22, 100,
	375, 2, 7, -209, 356, 200, 91, 143, 199, -210,
	276, -338, 123, 138, 382, 383, 2, 383, 2, 383,
	2, 383, 2, -241, -241, -203, 2, -299, -178, 4,
	356, 200, 91, 143, 199, 276, -203, 2, -204, 2,
	-241, -178, -205, -242, -243, 373, 374, 368, 382, 269,
	-206, 2, -241, -179, -241, 43, 183, 321, -207, -241,
	133, -178, -241, -241, -241, -178, -178, 2, -178, 2,
	382, 7, 7, 317, 317, 7, -139, -332, 30, -168,
	-171, 387, 133, 30, 4, -171, 387, 383, 174, 174,
	-271, -202, 174, -200, 226, -200, -200, -349, 382, 381,
	-268, -305, 380, 389, -179, 2, -267, -266, 30, -135,
	224, 383, -143, 387, 320, -213, 69, 60, -231, 149,
	60, -316, -135, 69, -317, 55, 332, 241, 132, -213,
	69, -213, 69, 69, -273, 33, -68, 67, 133, 320,
	-273, 67, 320, 33, -68, 133, 320, -146, -305, 67,
	-277, 360, -135, 133, 383, 387, -151, -168, -152, -135,
	-232, -231, -318, -319, -316, 155, 332, 117, 30, 109,
	-197, -198, -301, 374, -198, 197, 198, 86, -198, -198,
	-198, 233, 30, 219, 209, -127, 310, 109, -233, 350,
	-224, -68, 382, 94, 30, -224, -182, -183, -276, -184,
	-143, 382, -135, -176, -177, -177, -146, -147, -135, -168,
	383, 387, -54, -278, 320, 339, -152, -53, 383, 387,
	-170, 29, 380, -209, 382, -277, 387, 133, 363, 320,
	383, 323, -229, -149, 246, 293, 258, 281, 8, 7,
	7, 387, -305, -353, -135, 282, -54, -143, -146, -143,
	-273, 352, 130, 66, -192, -219, -221, -301, 382, -222,
	269, 270, 387, -120, 31, 98, 177, -143, 357, -241,
	-241, 320, -363, 305, -248, -241, 201, 211, 326, 116,
	333, 100, 215, 133, 382, -242, -242, -178, -245, 382,
	-178, 381, 391, 383, -241, 381, 381, 387, -260, -261,
	104, -241, -165, 387, -164, -241, -178, -178, 383, 383,
	320, 320, 320, 320, 382, -343, 227, 382, 382, -241,
	30, 387, 383, 133, 383, 383, -211, 235, 383, 10,
	11, 373, 374, 375, 376, 128, 377, 378, 371, 372,
	370, 361, 362, 363, 64, 195, 271, 13, 14, 15,
	170, 152, -242, -242, -242, -178, 382, 383, -246, -247,
	133, 130, 30, -207, -207, -207, 383, 133, -178, 387,
	387, 387, 383, 383, 383, 7, 383, 387, 383, 357,
	357, 383, 382, 383, -233, -275, -173, 2, -271, -305,
	-233, -264, -271, -271, -201, 339, 219, 174, -271, -266,
	383, -350, 7, -268, -267, 7, -240, -239, 131, 207,
	383, -135, 382, -268, 383, -121, -143, -135, -135, 209,
	-231, 149, -126, 209, -280, -135, 382, 382, 177, 177,
	-135, -135, 149, -135, 149, -135, -135, -122, 257, -68,
	357, 382, -143, 257, 357, -135, -68, 382, -135, 257,
	357, -105, 148, 215, 299, 133, -143, 383, 383, 387,
	-136, 155, -136, -68, -176, 5, -68, -143, 109, -128,
	105, -362, 363, -135, -217, -215, -241, -194, -226, 264,
	219, -174, 344, -135, -194, -172, 387, 133, 363, -174,
	-124, -124, -124, -124, -241, -353, -310, 383, -280, 380,
	381, 7, 7, -108, 352, -310, -353, -302, -302, -132,
	330, 63, 246, -302, 387, 221, 245, 88, 307, -222,
	-241, -269, -143, 388, -241, -241, -242, -242, 133, 382,
	-241, -252, 26, 26, 383, -179, 387, -237, -241, 383,
	-250, 106, -241, 316, 383, 346, -165, -165, -165, 5,
	200, 143, 199, -210, 199, -210, -210, 7, -344, -135,
	382, 350, -164, 383, -298, -280, -241, -246, -241, -298,
	-280, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	100, 209, 215, -242, 387, -179, -247, -246, -241, -241,
	-280, 383, 383, 383, -178, -241, -241, -241, 383, 7,
	-53, -190, 138, -277, 387, -190, -201, 382, -241, -271,
	381, 383, 387, -267, 381, 387, 390, 363, -268, 382,
	-168, -266, 320, 320, 109, 209, 341, -320, -317, -241,
	-167, -270, -135, -331, 382, -328, -329, -141, 382, 382,
	-119, 103, 285, -214, 109, -124, 109, -124, 320, -213,
	69, -244, -141, -135, -178, 320, -244, -178, 320, -244,
	-108, 133, 306, 299, -153, 154, -232, 382, -136, 382,
	382, -163, 382, -135, -129, 182, -362, -308, -334, -194,
	-194, -181, 210, 68, 383, -233, -183, -173, -264, 383,
	-109, 76, -109, 7, 381, 383, -107, 221, -106, -135,
	5, -135, -31, -32, 155, -305, -135, -143, 220, 383,
	-120, -305, 26, 26, -241, -252, 383, -241, -241, 383,
	-241, 381, -241, 5, -241, 383, 383, 383, 383, -345,
	-135, -241, 383, 383, 383, -247, 133, 100, 215, 382,
	-241, 383, 383, 387, 383, 383, 383, 383, -249, 140,
	44, -271, -249, -168, -238, 7, -239, -305, 380, -267,
	-168, 383, -135, -135, -231, 109, -321, 69, -322, 58,
	117, 74, 209, 211, 332, 241, 55, 94, 250, 383,
	383, 387, -142, -186, 58, -142, -241, 382, -167, -168,
	209, 94, 209, 94, 87, 328, -135, -135, -143, -135,
	-135, 382, 383, -143, 383, -135, -311, 317, -154, -155,
	232, 152, -167, 382, -168, -151, 30, -167, 219, -130,
	181, -362, -308, -127, -225, 382, 219, -68, -194, 363,
	87, 87, 381, 387, 382, 363, 363, 387, 22, 382,
	-120, -241, -241, 383, 383, -165, -339, 232, 383, -242,
	133, 382, -252, 383, -241, -340, 351, -241, -178, -340,
	383, -268, 7, 383, -231, -135, -305, -135, 117, 149,
	211, 177, 382, -242, -143, -230, -358, 73, 303, -270,
	-120, -305, -120, 383, -178, 383, 383, 211, 211, -241,
	-280, -124, -124, 320, 320, -178, 320, 320, -244, 44,
	230, 383, -167, 383, 383, -68, 383, -143, -362, -308,
	-128, 101, -168, 69, -189, -112, 382, 382, 382, -106,
	-107, -310, -310, -32, -168, 383, -165, 44, -242, -252,
	383, 383, -341, -342, -135, -267, 381, -322, -136, 209,
	-241, -137, 382, -153, 382, -142, -165, 250, -123, 58,
	-135, -135, -165, 382, 382, 190, 245, -143, -230, 383,
	-153, -230, 382, -308, -129, 334, 210, 383, -135, -311,
	-311, 383, 383, -346, 245, 270, -178, 383, 387, 30,
	109, 383, -323, 196, -135, -168, -120, 383, -143, -118,
	339, -305, 383, -178, -178, 382, 382, 382, -153, -230,
	-153, -167, -130, 285, -233, 383, 383, 383, -347, -348,
	36, 329, 78, -241, -347, -342, -344, 117, -324, -327,
	-326, 219, 134, 231, 290, 383, 383, -163, -241, 383,
	383, -168, -168, -168, -153, 383, -182, -108, -108, -348,
	238, 129, 269, 238, 129, -135, -326, 219, -327, 219,
	334, 97, -323, 383, 383, 383, -230, -233, 26, -325,
	206, 262, 49, 285, -325, -324, 382, 382, -125, 49,
	262, -153, -348, 20, 211, 94, -156, 232, -157, 232,
	383, -305, 383, -305, 344, 344, -158, 382, 186, 387,
	-155, -154, -159, -160, -241, 94, 198, 315, -156, 382,
	387, 383, 387, 382, -159, -156, -160, -159, 383, 383,
	387, -155, -154, -157, 387, -157,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 308, 0, 159, 161, 163,
	165, -2, 168, 170, 172, 0, 0, 0, 183, 185,
	187, 189, 191, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 691, -2, 0, 288, 290, 299,
	301, 303, 305, 306, 0, 356, 358, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 384,
	385, 387, 389, 391, 0, 612, 614, 616, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 729, -2, 740, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 706, 708, 710,
	712, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 272, 0, 1316, 1239,
	1245, 1246, 1270, 1271, 1272, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 151, 153, 154, 0, 0, 0, 1241, 1316, 160,
	162, 164, 166, 0, 174, 0, 0, 0, 0, 0,
	579, 169, 171, 173, 263, 1380, 265, 267, 0, 0,
	0, 0, 177, 178, 179, 180, 181, 182, 184, 186,
	188, 190, 192, 193, 0, 0, 0, 0, 0, 262,
	260, 215, 216, 0, 245, 246, 247, 248, 249, 251,
	219, 221, 222, 224, 226, 228, 230, 231, 233, 235,
	236, 238, 240, 241, 243, 0, 0, 0, 269, 275,
	276, 277, 279, 280, 281, 282, 283, 284, 285, 0,
	131, 0, 468, 258, 256, 0, 127, 0, 609, 0,
	271, 610, 611, 606, 607, 1407, 635, 289, 291, 300,
	302, 304, -2, -2, 1502, -2, 320, -2, 328, 1508,
	0, 331, 332, 335, -2, 211, 357, 359, 361, 363,
	365, 367, 369, 371, 373, 375, 377, 379, 381, 383,
	386, 388, 390, 392, 393, 0, 0, 0, 397, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 396,
	398, 399, 400, 0, 613, 615, 617, 0, 569, 731,
	0, 0, -2, 704, 705, -2, 0, 735, 735, 735,
	0, 0, 705, 703, 0, 292, 0, 294, 0, 397,
	297, 298, 336, 337, 1224, 1225, 941, 0, 0, 0,
	0, 0, 0, 1043, 1045, 1473, 1502, 0, 1047, 1048,
	0, 1050, 1052, 1053, 0, 1056, 1057, 1209, 1241, 1255,
	1256, 1257, 1258, 0, 0, 1261, 0, 1263, 1264, 1265,
	1111, 1067, -2, -2, 1253, 869, 870, 871, 872, -2,
	1516, 1071, 1074, 1077, 1080, 1081, 1084, 1085, 0, 1457,
	1474, 1475, 1498, 1499, 1507, 1511, 1512, 1481, 1495, 1482,
	1469, 1479, 1493, 1322, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1279,
	903, 904, 909, 910, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 912,
	637, 619, 628, 637, 621, 622, 623, 624, 625, 626,
	627, 630, 0, 721, 1386, 724, 1252, 722, 707, 709,
	0, 711, 0, 0, 715, 737, 736, 775, 776, 0,
	719, 720, 730, 791, 829, 806, 797, 0, 0, 2,
	71, 0, 1481, 829, 73, 0, 1481, 829, 76, 0,
	82, 0, 1481, 1244, 0, 1284, 1285, 1286, 1287, 1288,
	1516, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 0, 0, 273, 274, 1249, 1247, 1248, 0,
	155, 156, 157, 158, 0, 0, 1242, 1218, 1216, 1217,
	167, 533, 1481, 555, -2, 571, 533, 575, -2, 728,
	1481, 651, 264, 266, 0, 176, 0, 664, 0, 666,
	0, 681, 835, 117, 1481, 196, 209, 117, 1481, 199,
	117, 1481, 202, 1237, 117, 1481, 205, 206, 1481, 208,
	259, 0, 0, -2, 252, 254, 1280, 1281, 1282, 1283,
	-2, 250, 220, 223, 225, 227, 229, 232, 234, 237,
	239, 242, 244, -2, 0, 0, 0, 467, 0, 0,
	0, 608, 0, 634, 307, 0, 317, 0, 319, 1468,
	-2, -2, 323, 638, 642, 643, 644, 0, 0, 0,
	0, 0, 0, 0, 333, 212, 0, 394, 395, 403,
	404, 132, 133, 354, 355, 0, 407, 428, 440, 0,
	0, 411, 413, 466, 415, 0, 0, 417, 0, 419,
	0, 421, 0, 423, 0, 425, 427, 429, 441, 431,
	730, 433, 0, 435, 439, 0, 444, 0, 446, 447,
	448, 0, 0, 454, 0, 0, 401, 402, 117, 833,
	0, 0, 0, -2, 0, 748, 773, 0, 751, 752,
	0, 0, 0, 0, 733, 734, 0, 0, 0, 693,
	694, 293, 0, 296, 0, 0, 0, 0, 1144, 1145,
	1146, 1147, 1148, 1149, 1152, 1153, 1150, 1151, 1154, 1155,
	0, 0, 0, 0, 0, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 1157, 1158, 1159, 0, 0, 1161,
	0, 1163, 0, 0, 0, 0, 0, 0, 1223, 0,
	0, 1160, 946, 947, 948, 980, 981, 0, 1044, 1220,
	1213, 1046, 0, 1166, -2, 1167, 0, 0, 1049, 1054,
	1055, 1166, 0, 1208, -2, 0, 1260, 0, 938, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1189, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 888, 906, 917, 914, 913, 890, 0, 889, 887,
	0, 891, 0, 0, 0, 618, -2, 620, 0, 632,
	0, 723, 0, 0, 777, 780, 1229, 1233, 1234, 780,
	0, 1226, 0, 0, 0, 0, 826, 826, 826, 824,
	800, 0, 806, 0, -2, 830, 818, 0, -2, 797,
	0, 0, 831, 0, 83, 603, 96, 0, 603, 603,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 820, 1240, 0,
	1214, 1215, 147, 0, 0, 1235, 1219, 474, 0, 0,
	553, 554, 556, 0, 0, 0, 0, 0, 0, 565,
	570, 0, 727, 0, 0, 0, 1481, 578, 1273, 653,
	0, 839, 0, 667, 0, 0, 836, 0, 194, 0,
	115, 116, 0, 197, 0, 200, 0, 0, 203, 0,
	0, 0, 1167, 730, 0, 0, 278, 0, 0, 730,
	0, 1169, 847, 848, 849, 850, 851, 938, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 900, 0, 875, 875, 875, 892,
	893, 901, 902, 907, 908, 919, 920, 922, 924, 918,
	918, 918, 915, 916, 820, 134, 0, 0, 0, 0,
	-2, 325, 0, 640, 0, 645, 345, 346, 347, 647,
	648, 329, 348, 349, 350, 351, 352, 353, 0, 550,
	0, 552, 1266, 0, 326, 338, 327, 330, 0, 213,
	405, 406, 408, 409, 410, 414, 0, 463, 416, 418,
	420, 422, 424, 432, 436, 730, 442, 445, 449, 450,
	451, 452, 0, 0, 0, 568, 0, 309, 0, 458,
	0, 748, 773, 697, 747, 698, 772, 774, 749, 750,
	755, 759, 760, 763, 766, 767, 757, 941, 716, 717,
	718, 741, 742, 590, 0, 0, 295, 942, 843, 844,
	894, 895, 896, 897, 898, 943, 944, 0, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, -2, -2,
	-2, -2, -2, -2, -2, -2, 967, 968, 969, 970,
	971, 972, 973, 974, -2, -2, -2, 978, 979, -2,
	1162, 1164, 0, 1223, 0, -2, 0, -2, -2, -2,
	-2, 992, 0, 994, 997, 999, 1001, 0, 0, 0,
	0, 1222, 1011, 1200, 0, 0, 1141, 1142, 1143, 996,
	0, 0, 1221, 1212, 0, 0, 1165, 1051, 0, 0,
	0, 1173, 1207, 1203, 0, 1058, 740, 0, 0, 0,
	0, 1065, 0, 1269, 925, 926, 927, 928, 929, 930,
	939, 1121, 0, 0, 0, 1072, 1073, 1075, 1076, 1078,
	1079, 1082, 1083, 0, 0, 0, 1089, 0, 1176, -2,
	-2, -2, -2, -2, -2, -2, 0, 1091, 0, 1093,
	1167, 1186, 0, 0, 1014, 0, 0, 0, 0, 1502,
	0, 1096, 1167, 1194, 0, 0, 0, 0, 0, 1167,
	0, 1199, 0, 0, 0, 0, 0, 1107, 0, 1109,
	0, 0, 0, 0, 0, 0, 631, 725, 0, 0,
	839, 0, 0, 0, 1232, 839, 0, 1228, 0, 0,
	0, 0, 0, 821, 825, 822, 823, 0, 0, 806,
	818, 788, 0, 0, 0, 795, 796, 817, 0, 816,
	805, -2, 0, 0, 0, 0, 0, 602, 98, 1481,
	0, 119, 0, 0, 523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 1243, 0,
	137, 0, 1250, 0, 0, 0, 0, 0, 473, 1249,
	475, 477, 478, 479, 480, 1274, 0, 1274, 0, 0,
	557, 558, 567, 0, 559, 560, 562, 566, 561, 563,
	564, 0, 0, 0, 0, 655, 661, 0, 754, 0,
	679, 669, 0, 0, 0, 679, 683, 684, 686, 687,
	0, 0, 837, 210, 117, 117, 1238, 117, 117, 207,
	261, 0, 217, 253, 0, 0, 0, 255, 257, 0,
	840, 842, 0, 852, 0, 146, 0, 0, 0, 0,
	318, 0, 639, 646, 0, 342, 0, 344, 551, 1268,
	1267, 0, 214, 465, 286, 434, 437, 460, 461, 462,
	834, 0, 0, 459, 701, 702, 0, 761, 0, 758,
	764, 765, 0, 744, 588, 589, 0, 0, 0, -2,
	-2, 0, 0, 0, 1012, -2, 993, 995, 998, 1000,
	1002, 0, 0, 0, 0, 0, 0, 0, 1013, 1166,
	0, 1210, 1213, -2, 1168, 1171, 1172, 0, 0, 1204,
	0, 0, 0, 0, 739, 740, 740, 740, 1064, 0,
	0, 0, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 0, 1088, 0, 1090, 1092, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 1018, 1019, 0, 1166, 1095, 1192, 1193,
	0, 0, 0, 0, 0, 0, 1101, 0, 1198, 0,
	0, 0, 1105, 1106, 1108, 0, 873, 0, 899, 921,
	923, 911, 730, 1251, 769, 1230, 820, 779, 781, 1231,
	769, 1227, 808, 0, 810, 0, 0, 0, 812, 0,
	801, 0, 803, 818, 793, 0, 0, 786, 0, 785,
	806, 814, 0, 0, 832, 97, 592, 0, 0, 0,
	100, 1481, 108, 0, 505, 0, 0, 0, 0, 0,
	605, 109, 1481, 117, 1481, 117, 110, 84, 603, 85,
	0, 0, 598, 0, 0, 591, 86, 0, 600, 0,
	0, 146, 0, 0, 148, 0, 1236, 482, 532, 0,
	0, 1274, 0, 471, 533, 572, 574, 0, 0, 657,
	661, 0, 660, 728, 679, 753, 838, 662, 679, 0,
	0, 0, 671, 668, 665, 839, 0, 0, 0, 0,
	195, 198, 201, 204, 1168, 268, 0, 0, 1170, 0,
	845, 0, 0, 126, 0, 135, 270, 315, 316, 321,
	340, 341, 343, 339, 0, 0, 0, 0, 0, 0,
	0, 743, 590, 0, 945, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1201, 0, 0, 0, 1212, -2,
	1174, 1202, 1206, 0, 1059, 0, 0, 0, 0, 1262,
	931, 932, 933, 934, 935, 936, 937, 0, 1119, 1120,
	1124, 0, 0, 1070, 0, 0, 1175, 1185, 1187, 1015,
	1016, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, -2, -2, -2, 1033, 1034, 1035, -2, -2, -2,
	0, 0, 0, 1188, 0, 0, 1190, 1191, 1195, 1196,
	0, 1098, 1099, 1100, 1197, 0, 0, 0, 905, 0,
	0, 771, 0, 778, 0, 771, 809, 0, 828, 811,
	791, 802, 0, 799, 789, 0, 790, 0, 818, 0,
	0, 798, 0, 0, 0, 0, 118, 503, 522, 0,
	0, 581, 587, 587, 0, 1068, 1069, 0, 0, 0,
	102, 0, 0, 0, 0, 106, 0, 112, 0, 0,
	0, 91, 0, 0, 0, 0, 90, 0, 0, 89,
	124, 0, 0, 149, 487, 0, 476, 0, 0, 0,
	474, 0, 0, 0, 659, 661, 0, 652, 653, 175,
	663, 677, 678, 676, 0, 679, 685, 682, 688, 0,
	0, 128, 0, 0, 846, 853, 144, 1370, 142, 139,
	141, 287, 310, 311, 0, 455, 456, 457, 756, 762,
	745, 590, 0, 0, -2, 0, 1005, -2, -2, 1137,
	1168, 1211, 1205, 1259, 740, 1060, 1062, 1063, 940, 1126,
	1123, 0, 1110, 1086, 1087, 1184, 0, 0, 0, 0,
	1168, 1139, 1097, 0, 1103, 1104, 874, 726, 1115, 0,
	0, 782, 1115, 0, 806, 804, 787, 783, 0, 794,
	0, 815, 594, 596, 99, 0, 504, 0, 507, 0,
	0, 0, 0, 513, 514, 0, 0, 0, 0, 524,
	531, 0, 590, 1254, 0, 590, 0, 0, 0, 0,
	0, 114, 0, 0, 604, 0, 117, 117, 593, 0,
	0, 0, 0, 599, 0, 601, 136, 0, 469, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 649,
	661, 0, 654, 655, 0, 0, 0, 670, 680, 0,
	0, 0, 841, 0, 0, 0, 0, 0, 313, 0,
	746, -2, -2, 1006, 1138, 0, 740, 0, 1112, -2,
	0, 0, 0, 1140, 0, 713, 0, 770, 768, 714,
	827, 818, 0, 813, 101, 0, 508, 509, 1274, 0,
	512, 515, 0, 517, 1276, 482, 0, 528, 529, 582,
	583, 586, 584, 587, 740, 526, 0, 103, 104, 113,
	121, 105, 111, 0, 0, 740, 0, 0, 819, 0,
	0, 531, 0, 521, 482, 472, 531, 0, 0, 656,
	657, 0, 0, 0, 689, 690, 0, 0, 0, 143,
	0, 138, 140, 312, 0, 1061, 1129, 0, -2, 0,
	1041, 1102, 1114, 1116, 0, 792, 784, 506, 510, 0,
	0, 537, 0, 525, 0, 590, 0, 0, 123, 0,
	595, 597, 0, 0, 0, 0, 0, 0, 482, 531,
	470, 482, 0, 658, 659, 0, 673, 839, 675, 0,
	0, 145, 314, 0, 0, 0, 1125, 1042, 0, 0,
	0, 516, 542, 0, 0, 0, 585, 1059, 533, 107,
	0, 120, 0, 0, 0, 0, 0, 0, 519, 482,
	576, 0, 650, 0, 674, 146, 146, 1122, 1127, 1130,
	-2, 1441, 1313, 0, 1128, 1117, 1118, 0, 518, 538,
	539, 0, 534, 535, 536, 1275, 530, 537, 122, 93,
	95, 0, 0, 0, 520, 531, 839, 129, 130, 0,
	1132, 1133, 1134, 1135, 1136, 511, 540, 0, 541, 0,
	0, 0, 542, 0, 0, 485, 482, 672, 0, 543,
	0, 546, 547, 0, 544, 527, 0, 0, 481, 483,
	484, 577, 1131, 545, 548, 549, 0, 0, 0, 0,
	488, 0, 489, 0, 0, 0, 487, 0, 0, 0,
	486, 492, 0, 495, 497, 498, -2, 0, 490, 0,
	0, 493, 0, 0, 0, 491, 496, 0, 494, 487,
	0, 486, 502, 500, 0, 501,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 371, 3, 377, 372, 3,
	382, 383, 375, 373, 387, 374, 384, 376, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 391, 386,
	361, 363, 362, 365, 388, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 378, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 389, 370, 390, 368,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 364, 57704, 366,
	57705, 367, 57706, 369, 57707, 379, 57708, 385, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:922
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:928
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:934
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1120
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1129
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1198
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1221
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1231
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1294
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1298
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "CREATE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			return helpWith(sqllex, "DELETE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "DELETE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "INSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1741
		{ /* SKIP DOC */
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "GRANT")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "RESET")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex, "set local")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2124
		{
			return unimplemented(sqllex, "set from current")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = Low
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = Normal
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = High
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SHOW")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.str = "client_encoding"
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2489
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2500
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2511
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2526
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2530
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2534
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2548
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2552
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2556
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = DropDefault
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return unimplemented(sqllex, "match full")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return unimplemented(sqllex, "match partial")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			return unimplemented(sqllex, "match simple")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3025
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = NoAction
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = Restrict
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = Cascade
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = SetNull
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = SetDefault
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3122
		{
			node := &CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = []SequenceOption{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = []SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = IncrementOption{Increment: sqlDollar[2].union.intVal()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = MinValueOption{MinValue: sqlDollar[2].union.intVal()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = MinValueOption{MinValue: nil}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = MaxValueOption{MaxValue: sqlDollar[2].union.intVal()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = MaxValueOption{MaxValue: nil}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = StartOption{Start: sqlDollar[2].union.intVal()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = CacheOption{Cache: sqlDollar[2].union.intVal()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = CycleOption{Cycle: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = CycleOption{Cycle: false}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &val
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3168
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3244
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = true
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = false
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3278
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3279
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = Ascending
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = Descending
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3319
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3321
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = true
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = false
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3355
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3366
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3377
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3450
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3454
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.str = ""
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.str = ""
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3515
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = ReadOnly
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = ReadWrite
		}
	case 649:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.str = ""
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.str = ""
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.str = ""
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.str = ""
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3623
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			return helpWith(sqllex, "INSERT")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3706
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 680:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3746
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			return helpWith(sqllex, "SELECT")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3919
		{
			return helpWith(sqllex, "VALUES")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			return helpWith(sqllex, "TABLE")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3967
		{
			return helpWith(sqllex, "SELECT")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			return helpWith(sqllex, "TABLE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4022
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4023
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4031
		{
			return unimplemented(sqllex, "cte")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4035
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4038
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4039
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4043
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = false
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = false
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4067
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4145
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = false
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = true
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4273
		{
			return helpWith(sqllex, "VALUES")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4290
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &From{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4312
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4330
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4357
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4394
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4419
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = nil
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = true
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = false
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.str = astFullJoin
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.str = astLeftJoin
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.str = astRightJoin
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.str = astInnerJoin
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4578
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4664
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4678
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4686
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4721
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = jsonbColType
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = jsonColType
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4819
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = nil
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4884
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4980
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5012
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5051
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5052
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = year
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = month
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = day
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = hour
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = minute
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = month
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = hour
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = minute
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = minute
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = nil
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = second
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5147
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5182
		{
			return unimplemented(sqllex, "at tz")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5456
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5629
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5682
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5683
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5696
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5707
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5724
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5728
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5737
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5746
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5755
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5756
		{
			return unimplemented(sqllex, "current role")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5765
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5779
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5786
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5791
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5796
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5805
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5806
		{
			return unimplemented(sqllex, "treat")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5843
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5848
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5852
		{
			return unimplemented(sqllex, "within group")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5853
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5888
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.str = ""
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5950
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5951
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5952
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5956
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5962
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5963
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5964
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5965
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5966
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = Any
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = Some
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = All
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = Plus
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = Minus
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = Mult
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = Div
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = Mod
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Bitand
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = Bitor
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = Pow
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = Bitxor
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = LT
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = GT
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = EQ
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = LE
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = GE
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = NE
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = Like
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = NotLike
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = ILike
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = NotILike
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6208
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6240
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6263
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6267
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6274
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6321
		{
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6322
		{
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6350
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6356
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6366
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6426
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6430
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6440
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6453
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6471
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6484
		{
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6494
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6498
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6505
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6513
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6517
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6520
		{
			return unimplemented(sqllex, "func const")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6522
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6526
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6529
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6535
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6539
		{
			sqlVAL.union.val = DNull
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6546
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6550
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6556
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6591
		{
			sqlVAL.str = ""
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6597
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6601
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
