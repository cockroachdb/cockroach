// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const HAS_SOME_KEY = 57700
const HAS_ALL_KEYS = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6886

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 715,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	153, 565,
	-2, 0,
	-1, 57,
	96, 715,
	157, 715,
	330, 715,
	331, 715,
	-2, 0,
	-1, 67,
	1, 677,
	216, 677,
	261, 677,
	377, 677,
	379, 677,
	381, 677,
	382, 677,
	-2, 690,
	-1, 100,
	4, 717,
	20, 717,
	21, 717,
	23, 717,
	28, 717,
	33, 717,
	34, 717,
	35, 717,
	36, 717,
	37, 717,
	38, 717,
	39, 717,
	40, 717,
	41, 717,
	42, 717,
	44, 717,
	45, 717,
	46, 717,
	47, 717,
	48, 717,
	51, 717,
	52, 717,
	53, 717,
	55, 717,
	56, 717,
	60, 717,
	61, 717,
	62, 717,
	64, 717,
	65, 717,
	66, 717,
	67, 717,
	69, 717,
	71, 717,
	72, 717,
	75, 717,
	76, 717,
	77, 717,
	85, 717,
	86, 717,
	87, 717,
	88, 717,
	89, 717,
	90, 717,
	91, 717,
	92, 717,
	94, 717,
	96, 717,
	98, 717,
	101, 717,
	102, 717,
	104, 717,
	108, 717,
	109, 717,
	110, 717,
	111, 717,
	112, 717,
	113, 717,
	114, 717,
	122, 717,
	123, 717,
	124, 717,
	125, 717,
	126, 717,
	128, 717,
	130, 717,
	135, 717,
	136, 717,
	138, 717,
	141, 717,
	142, 717,
	145, 717,
	146, 717,
	147, 717,
	148, 717,
	151, 717,
	152, 717,
	154, 717,
	157, 717,
	158, 717,
	159, 717,
	160, 717,
	161, 717,
	162, 717,
	163, 717,
	164, 717,
	166, 717,
	169, 717,
	170, 717,
	171, 717,
	173, 717,
	174, 717,
	175, 717,
	176, 717,
	177, 717,
	179, 717,
	180, 717,
	182, 717,
	184, 717,
	185, 717,
	188, 717,
	189, 717,
	192, 717,
	194, 717,
	196, 717,
	197, 717,
	198, 717,
	199, 717,
	200, 717,
	202, 717,
	203, 717,
	204, 717,
	205, 717,
	209, 717,
	210, 717,
	211, 717,
	212, 717,
	213, 717,
	215, 717,
	217, 717,
	218, 717,
	221, 717,
	222, 717,
	224, 717,
	226, 717,
	227, 717,
	228, 717,
	229, 717,
	230, 717,
	231, 717,
	233, 717,
	234, 717,
	235, 717,
	236, 717,
	237, 717,
	239, 717,
	240, 717,
	241, 717,
	242, 717,
	243, 717,
	244, 717,
	245, 717,
	246, 717,
	248, 717,
	249, 717,
	250, 717,
	251, 717,
	252, 717,
	254, 717,
	255, 717,
	256, 717,
	257, 717,
	258, 717,
	259, 717,
	260, 717,
	262, 717,
	264, 717,
	265, 717,
	266, 717,
	267, 717,
	269, 717,
	270, 717,
	271, 717,
	272, 717,
	273, 717,
	275, 717,
	276, 717,
	277, 717,
	278, 717,
	279, 717,
	281, 717,
	282, 717,
	283, 717,
	284, 717,
	286, 717,
	287, 717,
	288, 717,
	289, 717,
	291, 717,
	292, 717,
	293, 717,
	294, 717,
	295, 717,
	296, 717,
	297, 717,
	298, 717,
	299, 717,
	300, 717,
	302, 717,
	304, 717,
	305, 717,
	306, 717,
	307, 717,
	308, 717,
	309, 717,
	310, 717,
	311, 717,
	313, 717,
	314, 717,
	315, 717,
	318, 717,
	319, 717,
	320, 717,
	321, 717,
	323, 717,
	324, 717,
	325, 717,
	326, 717,
	329, 717,
	330, 717,
	331, 717,
	332, 717,
	334, 717,
	336, 717,
	337, 717,
	338, 717,
	339, 717,
	340, 717,
	341, 717,
	344, 717,
	349, 717,
	350, 717,
	351, 717,
	352, 717,
	353, 717,
	-2, 0,
	-1, 126,
	1, 680,
	216, 680,
	261, 680,
	377, 680,
	379, 680,
	381, 680,
	382, 680,
	-2, 689,
	-1, 131,
	1, 614,
	169, 614,
	239, 614,
	243, 614,
	381, 614,
	382, 614,
	-2, 0,
	-1, 133,
	1, 614,
	381, 614,
	382, 614,
	-2, 0,
	-1, 134,
	1, 614,
	381, 614,
	382, 614,
	-2, 0,
	-1, 135,
	1, 618,
	381, 618,
	382, 618,
	-2, 0,
	-1, 142,
	4, 723,
	5, 723,
	6, 723,
	7, 723,
	8, 723,
	9, 723,
	20, 723,
	21, 723,
	23, 723,
	28, 723,
	29, 723,
	33, 723,
	34, 723,
	35, 723,
	36, 723,
	37, 723,
	38, 723,
	39, 723,
	40, 723,
	41, 723,
	42, 723,
	44, 723,
	45, 723,
	46, 723,
	47, 723,
	48, 723,
	49, 723,
	50, 723,
	51, 723,
	52, 723,
	53, 723,
	55, 723,
	56, 723,
	58, 723,
	60, 723,
	61, 723,
	62, 723,
	64, 723,
	65, 723,
	66, 723,
	67, 723,
	69, 723,
	71, 723,
	72, 723,
	74, 723,
	75, 723,
	76, 723,
	77, 723,
	79, 723,
	80, 723,
	81, 723,
	83, 723,
	84, 723,
	85, 723,
	86, 723,
	87, 723,
	88, 723,
	89, 723,
	90, 723,
	91, 723,
	92, 723,
	94, 723,
	96, 723,
	98, 723,
	101, 723,
	102, 723,
	104, 723,
	108, 723,
	109, 723,
	110, 723,
	111, 723,
	112, 723,
	113, 723,
	114, 723,
	115, 723,
	116, 723,
	122, 723,
	123, 723,
	124, 723,
	125, 723,
	126, 723,
	128, 723,
	130, 723,
	133, 723,
	135, 723,
	136, 723,
	138, 723,
	141, 723,
	142, 723,
	145, 723,
	146, 723,
	147, 723,
	148, 723,
	149, 723,
	151, 723,
	152, 723,
	154, 723,
	156, 723,
	157, 723,
	158, 723,
	159, 723,
	160, 723,
	161, 723,
	162, 723,
	163, 723,
	164, 723,
	166, 723,
	168, 723,
	169, 723,
	170, 723,
	171, 723,
	172, 723,
	173, 723,
	174, 723,
	175, 723,
	176, 723,
	177, 723,
	179, 723,
	180, 723,
	182, 723,
	183, 723,
	184, 723,
	185, 723,
	186, 723,
	188, 723,
	189, 723,
	192, 723,
	194, 723,
	195, 723,
	196, 723,
	197, 723,
	198, 723,
	199, 723,
	200, 723,
	201, 723,
	202, 723,
	203, 723,
	204, 723,
	205, 723,
	206, 723,
	208, 723,
	209, 723,
	210, 723,
	211, 723,
	212, 723,
	213, 723,
	215, 723,
	218, 723,
	221, 723,
	222, 723,
	223, 723,
	224, 723,
	225, 723,
	226, 723,
	227, 723,
	228, 723,
	229, 723,
	230, 723,
	231, 723,
	233, 723,
	234, 723,
	235, 723,
	236, 723,
	237, 723,
	239, 723,
	240, 723,
	241, 723,
	242, 723,
	243, 723,
	244, 723,
	245, 723,
	246, 723,
	248, 723,
	249, 723,
	250, 723,
	251, 723,
	252, 723,
	254, 723,
	255, 723,
	256, 723,
	257, 723,
	258, 723,
	259, 723,
	260, 723,
	262, 723,
	263, 723,
	264, 723,
	265, 723,
	266, 723,
	267, 723,
	269, 723,
	270, 723,
	271, 723,
	272, 723,
	273, 723,
	275, 723,
	276, 723,
	277, 723,
	278, 723,
	279, 723,
	280, 723,
	281, 723,
	282, 723,
	283, 723,
	284, 723,
	285, 723,
	286, 723,
	287, 723,
	288, 723,
	289, 723,
	291, 723,
	292, 723,
	293, 723,
	294, 723,
	295, 723,
	296, 723,
	297, 723,
	298, 723,
	299, 723,
	300, 723,
	302, 723,
	304, 723,
	305, 723,
	306, 723,
	307, 723,
	308, 723,
	309, 723,
	310, 723,
	311, 723,
	313, 723,
	314, 723,
	315, 723,
	318, 723,
	319, 723,
	320, 723,
	321, 723,
	322, 723,
	323, 723,
	324, 723,
	325, 723,
	326, 723,
	329, 723,
	330, 723,
	331, 723,
	332, 723,
	333, 723,
	334, 723,
	336, 723,
	337, 723,
	338, 723,
	339, 723,
	340, 723,
	341, 723,
	344, 723,
	349, 723,
	350, 723,
	351, 723,
	352, 723,
	353, 723,
	354, 723,
	364, 723,
	369, 723,
	370, 723,
	371, 723,
	378, 723,
	384, 723,
	-2, 0,
	-1, 145,
	1, 54,
	382, 54,
	-2, 715,
	-1, 512,
	132, 1337,
	316, 1337,
	359, 1337,
	380, 1337,
	-2, 0,
	-1, 513,
	132, 1284,
	316, 1284,
	359, 1284,
	380, 1284,
	-2, 0,
	-1, 515,
	132, 1396,
	316, 1396,
	359, 1396,
	380, 1396,
	-2, 0,
	-1, 517,
	132, 1419,
	316, 1419,
	359, 1419,
	380, 1419,
	-2, 0,
	-1, 524,
	132, 1342,
	316, 1342,
	359, 1342,
	380, 1342,
	-2, 333,
	-1, 550,
	1, 411,
	377, 411,
	379, 411,
	381, 411,
	382, 411,
	-2, 0,
	-1, 551,
	1, 463,
	129, 463,
	377, 463,
	379, 463,
	381, 463,
	382, 463,
	-2, 0,
	-1, 557,
	1, 425,
	377, 425,
	379, 425,
	381, 425,
	382, 425,
	-2, 0,
	-1, 559,
	1, 429,
	377, 429,
	379, 429,
	381, 429,
	382, 429,
	-2, 0,
	-1, 562,
	1, 437,
	377, 437,
	379, 437,
	381, 437,
	382, 437,
	-2, 0,
	-1, 563,
	1, 442,
	377, 442,
	379, 442,
	381, 442,
	382, 442,
	-2, 0,
	-1, 566,
	1, 452,
	377, 452,
	379, 452,
	381, 452,
	382, 452,
	-2, 0,
	-1, 587,
	117, 725,
	129, 725,
	187, 725,
	214, 725,
	-2, 684,
	-1, 594,
	117, 724,
	129, 724,
	187, 724,
	214, 724,
	-2, 681,
	-1, 651,
	378, 1262,
	-2, 1255,
	-1, 652,
	378, 1263,
	-2, 1256,
	-1, 658,
	5, 909,
	378, 909,
	-2, 1471,
	-1, 683,
	5, 868,
	-2, 1440,
	-1, 684,
	5, 903,
	378, 903,
	-2, 1442,
	-1, 685,
	5, 878,
	-2, 1443,
	-1, 686,
	5, 877,
	-2, 1444,
	-1, 687,
	5, 903,
	378, 903,
	-2, 1447,
	-1, 688,
	5, 903,
	378, 903,
	-2, 1448,
	-1, 689,
	5, 904,
	-2, 1451,
	-1, 690,
	5, 860,
	-2, 1452,
	-1, 691,
	5, 860,
	-2, 1453,
	-1, 692,
	5, 885,
	-2, 1457,
	-1, 693,
	5, 870,
	-2, 1458,
	-1, 694,
	5, 871,
	-2, 1459,
	-1, 695,
	5, 861,
	-2, 1465,
	-1, 696,
	5, 862,
	-2, 1466,
	-1, 697,
	5, 863,
	-2, 1467,
	-1, 698,
	5, 864,
	-2, 1468,
	-1, 699,
	5, 865,
	-2, 1469,
	-1, 700,
	5, 866,
	-2, 1470,
	-1, 701,
	5, 860,
	-2, 1477,
	-1, 702,
	5, 869,
	-2, 1482,
	-1, 703,
	5, 867,
	-2, 1485,
	-1, 704,
	5, 901,
	378, 901,
	-2, 1487,
	-1, 705,
	5, 905,
	-2, 1490,
	-1, 706,
	5, 907,
	-2, 1491,
	-1, 707,
	5, 900,
	378, 900,
	-2, 1496,
	-1, 892,
	230, 713,
	-2, 558,
	-1, 905,
	216, 1259,
	-2, 0,
	-1, 941,
	1, 218,
	377, 218,
	379, 218,
	381, 218,
	382, 218,
	-2, 688,
	-1, 944,
	4, 1495,
	10, 1495,
	11, 1495,
	13, 1495,
	14, 1495,
	15, 1495,
	16, 1495,
	17, 1495,
	18, 1495,
	20, 1495,
	21, 1495,
	23, 1495,
	26, 1495,
	28, 1495,
	30, 1495,
	33, 1495,
	34, 1495,
	35, 1495,
	36, 1495,
	37, 1495,
	38, 1495,
	39, 1495,
	40, 1495,
	41, 1495,
	42, 1495,
	44, 1495,
	45, 1495,
	46, 1495,
	47, 1495,
	48, 1495,
	51, 1495,
	52, 1495,
	53, 1495,
	55, 1495,
	56, 1495,
	57, 1495,
	60, 1495,
	61, 1495,
	62, 1495,
	63, 1495,
	64, 1495,
	65, 1495,
	66, 1495,
	67, 1495,
	69, 1495,
	70, 1495,
	71, 1495,
	72, 1495,
	74, 1495,
	75, 1495,
	76, 1495,
	77, 1495,
	85, 1495,
	86, 1495,
	87, 1495,
	88, 1495,
	89, 1495,
	90, 1495,
	91, 1495,
	92, 1495,
	94, 1495,
	96, 1495,
	98, 1495,
	101, 1495,
	102, 1495,
	104, 1495,
	108, 1495,
	109, 1495,
	110, 1495,
	111, 1495,
	112, 1495,
	113, 1495,
	114, 1495,
	118, 1495,
	119, 1495,
	120, 1495,
	121, 1495,
	122, 1495,
	123, 1495,
	124, 1495,
	125, 1495,
	126, 1495,
	127, 1495,
	128, 1495,
	130, 1495,
	133, 1495,
	135, 1495,
	136, 1495,
	138, 1495,
	141, 1495,
	142, 1495,
	145, 1495,
	146, 1495,
	147, 1495,
	148, 1495,
	149, 1495,
	150, 1495,
	151, 1495,
	152, 1495,
	154, 1495,
	156, 1495,
	157, 1495,
	158, 1495,
	159, 1495,
	160, 1495,
	161, 1495,
	162, 1495,
	163, 1495,
	164, 1495,
	166, 1495,
	168, 1495,
	169, 1495,
	170, 1495,
	171, 1495,
	172, 1495,
	173, 1495,
	174, 1495,
	175, 1495,
	176, 1495,
	177, 1495,
	179, 1495,
	180, 1495,
	182, 1495,
	183, 1495,
	184, 1495,
	185, 1495,
	186, 1495,
	188, 1495,
	189, 1495,
	192, 1495,
	193, 1495,
	194, 1495,
	196, 1495,
	197, 1495,
	198, 1495,
	199, 1495,
	200, 1495,
	201, 1495,
	202, 1495,
	203, 1495,
	204, 1495,
	205, 1495,
	209, 1495,
	210, 1495,
	211, 1495,
	212, 1495,
	213, 1495,
	215, 1495,
	218, 1495,
	219, 1495,
	221, 1495,
	222, 1495,
	224, 1495,
	226, 1495,
	227, 1495,
	228, 1495,
	229, 1495,
	230, 1495,
	231, 1495,
	233, 1495,
	234, 1495,
	235, 1495,
	236, 1495,
	237, 1495,
	239, 1495,
	240, 1495,
	241, 1495,
	242, 1495,
	243, 1495,
	244, 1495,
	245, 1495,
	246, 1495,
	248, 1495,
	249, 1495,
	250, 1495,
	251, 1495,
	252, 1495,
	253, 1495,
	254, 1495,
	255, 1495,
	256, 1495,
	257, 1495,
	258, 1495,
	259, 1495,
	260, 1495,
	262, 1495,
	263, 1495,
	264, 1495,
	265, 1495,
	266, 1495,
	267, 1495,
	268, 1495,
	269, 1495,
	270, 1495,
	271, 1495,
	272, 1495,
	273, 1495,
	275, 1495,
	276, 1495,
	277, 1495,
	278, 1495,
	279, 1495,
	281, 1495,
	282, 1495,
	283, 1495,
	284, 1495,
	285, 1495,
	286, 1495,
	287, 1495,
	288, 1495,
	289, 1495,
	291, 1495,
	292, 1495,
	293, 1495,
	294, 1495,
	295, 1495,
	296, 1495,
	297, 1495,
	298, 1495,
	299, 1495,
	300, 1495,
	302, 1495,
	304, 1495,
	305, 1495,
	306, 1495,
	307, 1495,
	308, 1495,
	309, 1495,
	310, 1495,
	311, 1495,
	313, 1495,
	314, 1495,
	315, 1495,
	318, 1495,
	319, 1495,
	320, 1495,
	321, 1495,
	323, 1495,
	324, 1495,
	325, 1495,
	326, 1495,
	329, 1495,
	330, 1495,
	331, 1495,
	332, 1495,
	334, 1495,
	336, 1495,
	337, 1495,
	338, 1495,
	339, 1495,
	340, 1495,
	341, 1495,
	344, 1495,
	349, 1495,
	350, 1495,
	351, 1495,
	352, 1495,
	353, 1495,
	354, 1495,
	355, 1495,
	357, 1495,
	358, 1495,
	359, 1495,
	360, 1495,
	361, 1495,
	362, 1495,
	363, 1495,
	364, 1495,
	366, 1495,
	367, 1495,
	368, 1495,
	369, 1495,
	370, 1495,
	371, 1495,
	372, 1495,
	373, 1495,
	374, 1495,
	376, 1495,
	379, 1495,
	380, 1495,
	383, 1495,
	384, 1495,
	-2, 0,
	-1, 959,
	132, 1396,
	316, 1396,
	359, 1396,
	380, 1396,
	-2, 0,
	-1, 976,
	132, 1419,
	316, 1419,
	359, 1419,
	380, 1419,
	-2, 0,
	-1, 977,
	169, 626,
	239, 626,
	243, 626,
	-2, 321,
	-1, 1045,
	117, 724,
	129, 724,
	187, 724,
	214, 724,
	-2, 685,
	-1, 1126,
	107, 690,
	117, 690,
	129, 690,
	165, 690,
	187, 690,
	214, 690,
	220, 690,
	327, 690,
	-2, 1038,
	-1, 1136,
	378, 1239,
	-2, 1227,
	-1, 1154,
	379, 1151,
	-2, 0,
	-1, 1178,
	169, 626,
	239, 626,
	243, 626,
	-2, 621,
	-1, 1206,
	379, 1151,
	-2, 0,
	-1, 1210,
	107, 690,
	117, 690,
	129, 690,
	165, 690,
	187, 690,
	214, 690,
	220, 690,
	327, 690,
	-2, 791,
	-1, 1353,
	169, 626,
	239, 626,
	243, 626,
	-2, 323,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 944,
	-1, 1462,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 945,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 946,
	-1, 1464,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 947,
	-1, 1465,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 948,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 949,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 950,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 951,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 960,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 961,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 962,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 967,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 969,
	-1, 1490,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 973,
	-1, 1491,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 974,
	-1, 1492,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 975,
	-1, 1493,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 976,
	-1, 1562,
	132, 1162,
	378, 1262,
	-2, 1255,
	-1, 1563,
	132, 1163,
	-2, 1436,
	-1, 1564,
	132, 1164,
	-2, 1341,
	-1, 1565,
	132, 1165,
	-2, 1302,
	-1, 1566,
	132, 1166,
	-2, 1319,
	-1, 1567,
	132, 1167,
	-2, 1340,
	-1, 1568,
	132, 1168,
	-2, 1393,
	-1, 1644,
	1, 792,
	74, 792,
	107, 792,
	117, 792,
	129, 792,
	133, 792,
	137, 792,
	139, 792,
	156, 792,
	165, 792,
	172, 792,
	183, 792,
	187, 792,
	201, 792,
	214, 792,
	216, 792,
	220, 792,
	261, 792,
	263, 792,
	327, 792,
	335, 792,
	346, 792,
	347, 792,
	356, 792,
	377, 792,
	379, 792,
	381, 792,
	382, 792,
	383, 792,
	-2, 791,
	-1, 1794,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 968,
	-1, 1795,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 970,
	-1, 1800,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 971,
	-1, 1818,
	225, 1122,
	-2, 1124,
	-1, 1991,
	230, 713,
	-2, 558,
	-1, 2049,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 972,
	-1, 2054,
	168, 0,
	-2, 988,
	-1, 2063,
	225, 1123,
	-2, 1125,
	-1, 2105,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1015,
	-1, 2106,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1016,
	-1, 2107,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1017,
	-1, 2111,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1021,
	-1, 2112,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1022,
	-1, 2113,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1023,
	-1, 2246,
	168, 0,
	-2, 989,
	-1, 2249,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 992,
	-1, 2250,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 994,
	-1, 2370,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 993,
	-1, 2371,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 995,
	-1, 2378,
	168, 0,
	-2, 1024,
	-1, 2455,
	168, 0,
	-2, 1025,
	-1, 2536,
	36, 0,
	149, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1439,
	-1, 2622,
	378, 1507,
	-2, 498,
}

const sqlPrivate = 57344

const sqlLast = 44015

var sqlAct = [...]int{

	652, 2604, 2618, 2602, 2341, 2340, 2619, 2585, 2404, 2544,
	2508, 2198, 2545, 1711, 2546, 2029, 1719, 1250, 2535, 783,
	2082, 2351, 2460, 2534, 642, 650, 2209, 649, 2164, 1258,
	1788, 895, 66, 1294, 2231, 611, 2300, 937, 2314, 1995,
	756, 1639, 184, 934, 2233, 2165, 1208, 184, 1689, 2384,
	1708, 184, 628, 1884, 1997, 1694, 886, 184, 1932, 2280,
	2003, 1720, 184, 184, 2225, 1204, 184, 1690, 1911, 184,
	1187, 1253, 1693, 1648, 1252, 1657, 450, 184, 1919, 1883,
	2135, 1683, 1640, 603, 121, 595, 1440, 1542, 1132, 1829,
	980, 1517, 1768, 1518, 1378, 1216, 1246, 1050, 1218, 1526,
	523, 1213, 622, 1591, 1188, 1505, 1374, 1502, 1418, 447,
	1416, 930, 762, 1435, 979, 1164, 1168, 920, 1536, 1691,
	185, 927, 1784, 1613, 897, 942, 1713, 1697, 765, 1626,
	467, 26, 503, 1195, 744, 1558, 621, 184, 184, 1121,
	1419, 121, 175, 126, 1051, 184, 644, 1377, 127, 1417,
	1178, 1265, 481, 180, 1177, 516, 520, 2315, 917, 742,
	544, 600, 1055, 2149, 645, 1817, 2150, 2342, 1273, 1273,
	1273, 184, 184, 184, 184, 785, 2342, 2635, 1712, 184,
	184, 2628, 1519, 2634, 2627, 2581, 2580, 2628, 2628, 1241,
	1241, 2579, 2561, 2556, 2555, 1241, 2313, 1735, 1735, 599,
	2552, 599, 2532, 40, 1241, 495, 1283, 2531, 2503, 2498,
	1205, 1283, 1745, 2365, 41, 2012, 2494, 594, 2486, 2457,
	1241, 2013, 2313, 1745, 2435, 609, 2432, 44, 2313, 121,
	1241, 2430, 2415, 2414, 2392, 2313, 1241, 2313, 1241, 2389,
	2372, 2336, 1684, 1241, 1745, 1735, 759, 874, 2334, 2047,
	2312, 2293, 1735, 473, 2313, 1241, 2248, 2224, 2219, 2145,
	1745, 1688, 1688, 2146, 2058, 588, 1821, 2023, 1735, 2138,
	587, 1984, 1822, 1066, 1067, 1983, 26, 1908, 1615, 1241,
	1684, 1241, 474, 770, 774, 780, 1066, 1067, 1237, 56,
	604, 476, 57, 2640, 1901, 786, 1069, 746, 1902, 1899,
	1898, 1897, 1755, 1735, 1735, 1735, 1735, 1283, 1744, 1069,
	1734, 1539, 1745, 1687, 1735, 1620, 2626, 1688, 1287, 1619,
	1068, 2636, 1288, 1735, 748, 59, 749, 2504, 1283, 2365,
	2615, 142, 2138, 1068, 1614, 2039, 1646, 2118, 2060, 1984,
	1787, 1766, 1356, 1182, 1521, 1241, 872, 961, 145, 2316,
	958, 957, 956, 955, 954, 953, 952, 951, 1716, 142,
	144, 950, 1735, 1540, 1828, 949, 948, 947, 946, 1066,
	1067, 945, 1096, 1097, 1098, 1106, 1107, 1108, 750, 1274,
	1274, 1274, 747, 593, 592, 1099, 591, 590, 144, 586,
	1074, 1295, 1069, 585, 584, 1110, 583, 143, 582, 576,
	575, 574, 542, 1074, 541, 136, 540, 1375, 539, 538,
	602, 60, 137, 1854, 1855, 537, 1068, 1541, 1538, 184,
	900, 184, 1088, 184, 536, 143, 184, 535, 534, 1085,
	533, 532, 184, 531, 530, 128, 529, 129, 62, 528,
	63, 184, 184, 184, 184, 900, 527, 526, 511, 510,
	900, 509, 508, 507, 142, 438, 1089, 892, 1770, 416,
	409, 475, 408, 128, 96, 168, 1927, 167, 166, 165,
	1555, 164, 2012, 163, 162, 161, 184, 1091, 1092, 1093,
	1094, 160, 600, 144, 159, 158, 1074, 157, 156, 155,
	184, 1066, 1067, 154, 1543, 153, 152, 151, 150, 149,
	148, 1854, 1855, 1279, 1272, 1409, 184, 147, 1103, 1111,
	146, 878, 1209, 1553, 1069, 1551, 184, 1549, 1381, 890,
	143, 903, 992, 1271, 2608, 2358, 2603, 1109, 136, 1614,
	1860, 1090, 2606, 2551, 2533, 137, 1062, 2518, 1068, 142,
	901, 923, 923, 2513, 919, 1101, 2452, 900, 2433, 2279,
	2278, 2274, 1089, 2273, 1869, 2266, 2265, 2264, 128, 924,
	2260, 2259, 1066, 1067, 2258, 901, 2257, 2251, 144, 2230,
	901, 2132, 885, 1537, 943, 2127, 40, 2126, 184, 2125,
	2068, 1982, 1986, 1939, 995, 1069, 1935, 41, 1854, 1855,
	962, 1872, 1873, 1874, 1906, 1854, 1855, 1903, 1891, 1750,
	44, 1882, 1853, 1850, 2245, 143, 1849, 1847, 1074, 1068,
	1834, 1833, 1095, 136, 1818, 1644, 1062, 1291, 1860, 990,
	137, 757, 1513, 1854, 1855, 1061, 473, 1090, 1140, 1079,
	1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076, 1133, 2629,
	1124, 1869, 883, 1715, 1104, 1070, 1071, 1072, 1073, 1075,
	1076, 1207, 2613, 2593, 2463, 474, 2592, 1257, 1206, 600,
	2084, 2523, 56, 2522, 476, 57, 2521, 901, 977, 2489,
	2027, 974, 878, 1046, 1089, 2625, 2481, 1045, 2480, 1074,
	2471, 2469, 142, 2447, 1870, 2446, 2445, 2357, 2401, 2380,
	1041, 2366, 2345, 2333, 2319, 1854, 1855, 2271, 59, 2207,
	2204, 2203, 2201, 2173, 2172, 1860, 993, 2153, 2141, 2053,
	1972, 144, 1860, 1102, 1966, 1952, 1080, 1081, 1087, 1086,
	1082, 1083, 1084, 1105, 1951, 1079, 1077, 1078, 1070, 1071,
	1072, 1073, 1075, 1076, 1514, 1937, 1047, 1747, 1907, 1881,
	1860, 1843, 184, 1842, 184, 1048, 1875, 588, 143, 1090,
	1839, 1814, 587, 1809, 1507, 1169, 136, 1172, 1631, 1871,
	1058, 1059, 1603, 137, 1547, 1249, 1063, 184, 184, 1376,
	1783, 1870, 1856, 1857, 1858, 1859, 1861, 1862, 1782, 1066,
	1067, 2364, 1066, 1067, 60, 758, 128, 1185, 1176, 1162,
	1186, 1161, 1160, 1159, 1193, 1136, 1158, 1157, 1286, 600,
	1156, 1155, 1069, 1166, 1167, 1069, 1870, 1952, 1170, 1128,
	129, 62, 1860, 63, 1154, 1153, 1152, 1151, 1173, 1150,
	1149, 1148, 1147, 1191, 1146, 1145, 1068, 142, 1144, 1068,
	1137, 1396, 1125, 1124, 475, 973, 965, 96, 1925, 939,
	2253, 2229, 2148, 2144, 1820, 121, 1871, 1554, 1077, 1078,
	1070, 1071, 1072, 1073, 1075, 1076, 144, 1865, 1863, 1864,
	1856, 1857, 1858, 1859, 1861, 1862, 1632, 1207, 1133, 2025,
	1122, 1203, 900, 184, 1181, 1854, 1855, 989, 1870, 785,
	1998, 1871, 2368, 2367, 1754, 184, 2361, 1179, 884, 2151,
	1552, 2014, 1550, 143, 1548, 1211, 1074, 1174, 1242, 1684,
	1209, 136, 1175, 1183, 1044, 1362, 184, 1975, 137, 1239,
	1039, 1969, 184, 1539, 184, 1965, 184, 1905, 1904, 1793,
	184, 1256, 1292, 1072, 1073, 1075, 1076, 1753, 1413, 613,
	986, 128, 1142, 417, 2030, 1866, 1867, 1868, 1254, 2385,
	1712, 2085, 1248, 1527, 1865, 1863, 1864, 1856, 1857, 1858,
	1859, 1861, 1862, 1871, 1165, 1033, 1858, 1859, 1861, 1862,
	184, 184, 1089, 1825, 2611, 1540, 2610, 900, 2008, 184,
	2160, 2516, 184, 1739, 444, 419, 2576, 2493, 1262, 1865,
	1863, 1864, 1856, 1857, 1858, 1859, 1861, 1862, 1420, 2577,
	2327, 2036, 901, 785, 1226, 1034, 439, 758, 184, 786,
	1756, 1139, 1025, 184, 2339, 1219, 598, 1220, 184, 184,
	1348, 184, 1382, 184, 1658, 184, 2426, 184, 422, 1541,
	1538, 737, 2425, 2423, 919, 2422, 1240, 2192, 184, 1219,
	2189, 1220, 428, 2157, 184, 184, 739, 1090, 735, 1363,
	2026, 2156, 733, 900, 1838, 730, 1837, 1836, 1835, 1796,
	1738, 1650, 1863, 1864, 1856, 1857, 1858, 1859, 1861, 1862,
	2184, 987, 1679, 443, 597, 184, 710, 1267, 1675, 785,
	1264, 708, 1672, 1489, 1180, 871, 1607, 1606, 1450, 2623,
	1410, 443, 1709, 578, 1748, 169, 1221, 901, 1449, 1235,
	1407, 1661, 1650, 429, 2041, 1042, 1543, 1406, 1383, 490,
	2492, 1649, 2196, 1289, 988, 1234, 121, 1219, 2197, 1220,
	1221, 1349, 1979, 786, 1290, 974, 1854, 1855, 580, 599,
	1504, 1244, 1285, 581, 2406, 2529, 1232, 1353, 1350, 442,
	1301, 581, 1397, 1367, 1504, 709, 1379, 1078, 1070, 1071,
	1072, 1073, 1075, 1076, 1233, 1268, 1076, 442, 1386, 1422,
	1390, 1371, 1065, 1227, 1543, 1511, 1351, 600, 2568, 1387,
	1509, 998, 600, 901, 2078, 1391, 1759, 1392, 2005, 1393,
	172, 1394, 2006, 1395, 1224, 1537, 2595, 972, 1761, 1019,
	1974, 184, 657, 184, 1854, 1855, 184, 1414, 1221, 786,
	1401, 1403, 1225, 1248, 712, 1421, 1415, 184, 1660, 588,
	1762, 711, 588, 588, 1431, 1527, 785, 1432, 1433, 184,
	879, 881, 1760, 184, 1785, 1786, 184, 2005, 1020, 2500,
	184, 1439, 1524, 2576, 184, 1634, 596, 1522, 1968, 1273,
	184, 1301, 1301, 1860, 418, 1043, 173, 184, 785, 1862,
	422, 1543, 184, 2175, 2501, 600, 787, 1405, 1586, 2040,
	184, 1633, 1228, 1612, 1207, 2035, 1512, 1681, 184, 423,
	1515, 1038, 1963, 2474, 419, 2037, 431, 430, 1576, 184,
	1806, 184, 1703, 184, 420, 1651, 184, 1163, 184, 441,
	184, 184, 437, 184, 900, 900, 1804, 1569, 1659, 900,
	963, 2605, 615, 184, 1662, 1664, 967, 441, 1623, 1870,
	1637, 1860, 432, 1366, 1365, 1032, 1375, 1372, 2182, 444,
	2042, 2603, 1128, 1609, 1486, 1618, 2376, 1610, 1024, 440,
	1529, 1732, 1222, 613, 2342, 174, 786, 444, 1733, 1628,
	1629, 1624, 1354, 1561, 1561, 1574, 1667, 440, 731, 1594,
	1217, 1211, 1673, 1598, 1599, 1601, 1222, 1654, 1680, 1647,
	741, 2407, 410, 740, 1230, 731, 1669, 2548, 786, 732,
	1119, 654, 731, 569, 1677, 978, 2567, 1870, 2588, 1801,
	1741, 121, 2429, 1726, 1871, 1841, 923, 121, 923, 1802,
	1627, 608, 785, 1807, 579, 1194, 170, 2596, 1643, 1798,
	184, 1729, 1369, 1727, 1718, 1728, 1714, 1736, 1714, 999,
	489, 1767, 1730, 1503, 901, 901, 184, 184, 184, 901,
	184, 599, 1740, 943, 1737, 1114, 1115, 1116, 1117, 1118,
	1749, 2240, 2176, 1510, 1222, 1127, 171, 1484, 1487, 1385,
	1751, 2075, 1064, 983, 500, 1135, 2482, 2547, 1000, 184,
	1274, 997, 1871, 2575, 1198, 1198, 570, 1170, 1276, 1173,
	2573, 1278, 2549, 2350, 479, 1281, 418, 971, 1441, 1448,
	1167, 1166, 1706, 1006, 1483, 1342, 968, 1201, 1201, 482,
	1757, 1053, 1029, 2566, 1864, 1856, 1857, 1858, 1859, 1861,
	1862, 423, 121, 1196, 1625, 2076, 419, 960, 1370, 1054,
	2483, 902, 487, 1803, 1199, 1199, 420, 1231, 483, 983,
	1805, 2417, 786, 984, 1978, 482, 2114, 985, 1771, 2416,
	2550, 2269, 1197, 433, 2601, 2399, 902, 2323, 1773, 1361,
	411, 902, 1775, 2586, 1779, 1778, 1427, 1921, 487, 2466,
	484, 2159, 983, 1781, 483, 1948, 1933, 1944, 1500, 1707,
	600, 1052, 1030, 1856, 1857, 1858, 1859, 1861, 1862, 1263,
	1189, 1189, 1255, 486, 1498, 434, 994, 613, 569, 571,
	2509, 1251, 1543, 1485, 1408, 1053, 484, 2074, 1054, 984,
	1359, 1400, 1357, 985, 1200, 1200, 608, 1049, 2614, 2587,
	2210, 2308, 2308, 1360, 2301, 435, 1053, 436, 2352, 486,
	177, 412, 2326, 1799, 1797, 2299, 888, 1031, 887, 2325,
	2303, 2589, 984, 2400, 1954, 1428, 985, 1922, 1953, 1791,
	1934, 1813, 1622, 2115, 600, 1827, 184, 785, 902, 2116,
	2309, 2309, 184, 184, 2270, 1824, 184, 1909, 1621, 2600,
	2322, 184, 1915, 498, 184, 1052, 1914, 1494, 492, 572,
	983, 570, 184, 2302, 597, 1495, 1920, 1496, 184, 184,
	184, 1501, 916, 914, 184, 1916, 1052, 184, 478, 2343,
	905, 1194, 1054, 184, 184, 184, 184, 184, 1376, 1373,
	485, 2199, 573, 184, 2281, 1929, 184, 1007, 479, 1928,
	184, 472, 34, 471, 33, 1977, 2136, 470, 30, 184,
	1812, 1938, 1888, 1889, 1890, 469, 72, 1815, 3, 184,
	2397, 184, 1546, 184, 900, 900, 485, 184, 2379, 1945,
	1028, 184, 2324, 1924, 1831, 1832, 184, 1913, 184, 1910,
	1198, 2268, 1017, 1917, 1918, 184, 488, 1923, 1985, 482,
	1987, 2398, 2195, 2304, 2304, 2305, 2305, 786, 1015, 184,
	900, 1990, 1991, 1201, 1885, 1940, 2052, 1980, 600, 1848,
	1808, 1752, 487, 184, 571, 1686, 1678, 1671, 483, 1196,
	1037, 1497, 488, 1962, 1880, 2307, 2307, 1036, 1499, 873,
	1199, 1594, 1594, 1594, 2310, 2310, 1893, 2022, 876, 2010,
	877, 468, 71, 1886, 1013, 729, 613, 613, 1197, 966,
	484, 1049, 184, 1776, 465, 22, 466, 23, 1398, 1964,
	1389, 497, 1143, 1989, 1545, 2543, 491, 1971, 1238, 2001,
	2506, 2297, 2007, 486, 464, 28, 1011, 915, 913, 1009,
	1301, 2015, 463, 20, 901, 901, 2180, 34, 2065, 33,
	2178, 2021, 1988, 30, 572, 2158, 1992, 461, 19, 1003,
	1027, 72, 184, 2055, 768, 2031, 912, 2034, 2032, 2033,
	1200, 1424, 1016, 1429, 1023, 2306, 2306, 1301, 1994, 1436,
	901, 2038, 462, 18, 1710, 1704, 1702, 573, 1014, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 2045, 1488, 2043, 1490, 1491, 1492, 1493, 2059, 2061,
	1301, 2064, 454, 15, 1012, 1284, 2070, 2071, 2072, 734,
	736, 1516, 1996, 184, 2077, 2079, 2080, 71, 1127, 184,
	485, 2091, 2088, 2086, 455, 16, 1282, 2120, 184, 184,
	22, 2093, 23, 902, 460, 54, 1010, 1556, 1557, 1008,
	787, 1573, 2577, 1585, 1587, 1592, 1595, 1596, 1597, 1280,
	28, 453, 53, 1277, 2121, 459, 12, 1275, 20, 1002,
	2147, 458, 47, 1236, 1301, 2119, 911, 2171, 2170, 1229,
	2169, 1022, 2152, 19, 2134, 184, 488, 184, 1223, 753,
	2186, 121, 2194, 2137, 2186, 184, 2139, 2140, 900, 2440,
	2186, 452, 48, 2363, 1056, 2154, 1789, 2205, 18, 754,
	1301, 1301, 2362, 184, 184, 1380, 2202, 2226, 2185, 1301,
	1301, 2155, 2190, 2442, 2143, 2220, 2162, 1650, 2193, 2212,
	1650, 184, 1336, 1666, 457, 7, 1665, 2183, 902, 1663,
	184, 785, 184, 184, 2218, 456, 6, 1949, 785, 1682,
	2223, 2211, 1301, 2476, 1674, 1670, 1777, 2200, 15, 477,
	2237, 2214, 1411, 1412, 787, 2215, 2206, 2243, 2316, 451,
	5, 2213, 1790, 1001, 2221, 2128, 2216, 2242, 1066, 1067,
	16, 1057, 2222, 2454, 1949, 184, 755, 2247, 2227, 2428,
	54, 2282, 1060, 1676, 1668, 2505, 1066, 1067, 2599, 2348,
	1717, 1335, 1705, 1701, 1611, 1352, 1293, 53, 2584, 1854,
	1855, 12, 1066, 1067, 902, 1913, 2391, 47, 901, 1069,
	1764, 1763, 2287, 2228, 499, 1068, 2133, 2081, 1764, 2028,
	1930, 1900, 1765, 1336, 1336, 1608, 1605, 2024, 1604, 184,
	787, 1535, 184, 1068, 1130, 2267, 2255, 48, 1300, 2188,
	2073, 1140, 785, 184, 184, 2191, 1138, 184, 184, 184,
	1338, 786, 1035, 1026, 1021, 1018, 1004, 1337, 786, 970,
	1355, 2289, 577, 2405, 184, 480, 1388, 1005, 1926, 184,
	7, 184, 1630, 184, 184, 184, 2499, 2261, 1840, 2459,
	184, 6, 2375, 184, 2291, 1544, 900, 2171, 2170, 2284,
	2169, 2320, 1335, 1335, 184, 184, 2317, 1141, 2288, 2285,
	2286, 51, 900, 2167, 2296, 5, 631, 2298, 1301, 2161,
	1696, 2292, 1695, 788, 1364, 653, 2171, 2170, 1560, 2169,
	2344, 1442, 2171, 2170, 728, 2169, 2349, 1441, 2089, 2338,
	2283, 2321, 655, 2354, 1298, 656, 1441, 2094, 1299, 1300,
	1300, 2016, 2017, 2347, 2018, 2019, 1171, 643, 1296, 940,
	1721, 1338, 1338, 1368, 2355, 2353, 1508, 1525, 1337, 1337,
	1823, 2346, 786, 1134, 2369, 623, 635, 787, 634, 2124,
	1523, 2360, 1794, 1795, 964, 1931, 2004, 2356, 1800, 1426,
	1780, 1423, 2000, 2177, 421, 1851, 938, 1583, 184, 1575,
	184, 1571, 785, 184, 1040, 2381, 1192, 1120, 1722, 787,
	991, 184, 2011, 1746, 1184, 1434, 901, 785, 752, 751,
	1819, 2395, 2612, 1358, 1758, 1113, 1826, 1297, 1112, 1830,
	738, 2468, 901, 2390, 2388, 982, 2410, 981, 2171, 2170,
	1947, 2169, 2374, 2594, 2475, 2409, 1844, 1430, 2411, 2174,
	2359, 184, 2515, 2393, 900, 902, 902, 141, 184, 2408,
	902, 138, 140, 139, 2186, 1976, 184, 184, 900, 900,
	2171, 2170, 1248, 2169, 2431, 75, 32, 31, 95, 94,
	1127, 93, 92, 91, 90, 2438, 184, 1592, 1592, 1592,
	89, 184, 2427, 88, 87, 2439, 86, 85, 184, 84,
	83, 2449, 2443, 82, 81, 2450, 2451, 2437, 80, 79,
	2448, 78, 77, 1189, 2456, 521, 2470, 518, 613, 74,
	73, 29, 786, 184, 184, 2441, 25, 2465, 1297, 1297,
	184, 2464, 2462, 99, 24, 70, 1301, 786, 900, 2485,
	69, 27, 17, 184, 2488, 2487, 1577, 900, 900, 11,
	21, 2472, 125, 787, 124, 123, 122, 14, 13, 120,
	119, 2453, 118, 117, 116, 2387, 2491, 10, 9, 2490,
	184, 98, 184, 45, 901, 184, 8, 785, 600, 2434,
	43, 1193, 2179, 42, 2181, 97, 111, 108, 901, 901,
	2496, 2497, 1301, 110, 107, 2525, 2517, 2524, 109, 2473,
	2526, 113, 2413, 2512, 112, 184, 105, 103, 2530, 104,
	2479, 2002, 106, 2528, 2171, 2170, 2424, 2169, 2527, 102,
	101, 114, 184, 184, 184, 2540, 2542, 2541, 39, 606,
	184, 569, 2553, 38, 2020, 37, 637, 2560, 36, 2511,
	35, 2, 1, 0, 184, 1301, 2562, 2563, 2564, 608,
	0, 0, 613, 613, 0, 2565, 0, 0, 901, 2574,
	2572, 0, 0, 0, 2578, 613, 0, 901, 901, 0,
	2582, 0, 0, 0, 0, 0, 2583, 0, 181, 0,
	0, 2044, 607, 414, 0, 2590, 1436, 424, 2591, 2557,
	2558, 2559, 2048, 445, 2597, 2049, 0, 786, 493, 181,
	0, 0, 501, 2598, 785, 506, 785, 2054, 0, 0,
	0, 1066, 1067, 525, 570, 0, 2062, 2616, 2617, 2624,
	0, 0, 0, 2607, 2066, 2609, 0, 2020, 2630, 0,
	2631, 0, 2633, 0, 1069, 2632, 0, 2502, 2639, 0,
	2637, 2638, 2641, 627, 0, 0, 0, 2090, 0, 0,
	0, 2092, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 2519, 2520, 0, 0, 0, 0, 0,
	0, 0, 0, 745, 745, 0, 0, 0, 0, 0,
	0, 414, 0, 0, 2122, 2123, 0, 0, 787, 0,
	413, 0, 41, 2129, 2130, 2131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 414, 414, 778,
	414, 0, 0, 0, 0, 181, 875, 0, 0, 2419,
	2142, 0, 1336, 0, 786, 0, 786, 571, 1074, 0,
	0, 1742, 632, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2163, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	1743, 0, 0, 0, 0, 0, 0, 0, 0, 476,
	0, 1810, 1811, 0, 0, 902, 902, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 763, 0,
	67, 1335, 0, 0, 1089, 1577, 1577, 0, 0, 0,
	0, 0, 0, 59, 1189, 605, 0, 572, 0, 0,
	0, 902, 1336, 613, 772, 776, 0, 782, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	573, 0, 0, 0, 0, 0, 0, 1877, 1878, 1879,
	1338, 2246, 2420, 2421, 589, 2249, 2250, 1337, 0, 2252,
	0, 601, 0, 0, 0, 0, 2254, 0, 2256, 1090,
	0, 1577, 1577, 1577, 0, 1300, 1336, 764, 67, 0,
	0, 1335, 0, 0, 2263, 0, 0, 1338, 0, 60,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 1336, 0, 129, 62, 2272, 63, 0,
	0, 1336, 1336, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 475,
	1338, 0, 96, 0, 0, 1335, 0, 1337, 0, 0,
	0, 0, 0, 0, 1336, 525, 0, 525, 0, 906,
	0, 144, 909, 0, 0, 0, 0, 2318, 414, 0,
	1070, 1071, 1072, 1073, 1075, 1076, 0, 525, 525, 414,
	931, 1335, 1335, 0, 0, 0, 0, 0, 0, 0,
	1335, 1335, 1300, 0, 0, 0, 0, 0, 143, 0,
	0, 0, 0, 0, 1338, 0, 136, 0, 0, 0,
	0, 1337, 525, 137, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 1335, 0, 0, 525, 0, 1300, 1300,
	0, 0, 0, 0, 0, 0, 128, 1300, 1300, 0,
	1338, 1338, 969, 2370, 2371, 0, 0, 1337, 1337, 1338,
	1338, 0, 525, 0, 1297, 0, 1337, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 2050, 2051, 0, 902,
	1300, 0, 0, 0, 2383, 776, 0, 0, 0, 0,
	2386, 0, 1338, 0, 0, 0, 782, 0, 0, 1337,
	1577, 1577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 787, 0, 414, 0, 0, 0, 0, 787,
	1336, 0, 0, 0, 2418, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
	2110, 2111, 2112, 2113, 0, 2117, 0, 0, 0, 1577,
	1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
	1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 0, 1577,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2467, 0, 0, 0, 0, 0, 0, 1297, 1297, 0,
	0, 0, 0, 0, 0, 0, 1297, 1297, 0, 0,
	0, 776, 0, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 1067, 1300, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 1338, 1297,
	0, 0, 0, 0, 0, 1337, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 902, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 0,
	745, 1068, 0, 902, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2539,
	2539, 0, 0, 414, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2539, 589, 0, 1336, 0,
	0, 0, 1091, 1092, 1093, 1094, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 1123, 0, 1126,
	0, 0, 0, 0, 0, 1202, 1131, 0, 0, 0,
	0, 0, 0, 787, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 2539, 0, 0, 0, 0, 787, 0,
	0, 0, 41, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 1335, 0, 181,
	763, 1214, 2620, 0, 0, 1297, 0, 1089, 0, 0,
	0, 414, 0, 0, 2620, 902, 0, 2620, 2620, 0,
	0, 473, 0, 0, 0, 0, 0, 0, 0, 902,
	902, 0, 1261, 0, 0, 0, 0, 1336, 414, 0,
	414, 0, 414, 0, 1300, 0, 1269, 0, 0, 0,
	474, 0, 0, 1335, 0, 0, 1338, 56, 0, 476,
	57, 0, 0, 1337, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 67, 0, 525, 181, 0, 1210,
	0, 0, 0, 59, 0, 181, 0, 0, 525, 902,
	1300, 0, 0, 0, 0, 0, 1335, 0, 902, 902,
	0, 0, 1338, 0, 0, 0, 0, 0, 1247, 1337,
	0, 0, 0, 0, 525, 0, 0, 2378, 0, 525,
	0, 0, 0, 0, 181, 525, 0, 525, 787, 525,
	0, 525, 0, 525, 0, 776, 0, 1266, 0, 1266,
	0, 1577, 0, 1300, 1399, 0, 0, 0, 0, 0,
	525, 525, 0, 0, 0, 1338, 0, 0, 2402, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 60,
	1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076, 0,
	0, 525, 1577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 62, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 1297, 0, 0, 0, 0, 0, 475,
	0, 0, 96, 0, 0, 0, 0, 0, 2455, 0,
	0, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 41, 131, 0, 0, 0, 0, 0,
	0, 0, 1577, 0, 0, 787, 44, 787, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1297,
	133, 0, 0, 0, 0, 0, 0, 0, 143, 0,
	46, 0, 49, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 506, 0, 745,
	0, 0, 875, 50, 0, 0, 0, 52, 0, 0,
	0, 55, 0, 414, 134, 0, 128, 0, 56, 0,
	115, 57, 1297, 0, 0, 1642, 0, 0, 0, 414,
	0, 0, 414, 0, 0, 67, 1655, 0, 0, 0,
	414, 0, 0, 58, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 414, 59, 0, 0, 0, 1685, 1854,
	1855, 0, 1872, 1873, 1874, 0, 1692, 0, 589, 0,
	0, 589, 589, 0, 875, 2244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 0, 1725, 0, 525,
	0, 0, 525, 0, 525, 0, 414, 414, 0, 1731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1655,
	0, 0, 1869, 0, 0, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 601, 0, 1645,
	60, 0, 1126, 0, 0, 0, 61, 776, 0, 0,
	0, 0, 0, 776, 0, 0, 0, 0, 0, 0,
	782, 0, 0, 0, 0, 68, 129, 62, 0, 63,
	0, 64, 0, 135, 0, 0, 1860, 0, 65, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	76, 0, 1723, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 782, 782, 0, 1769, 0, 0, 764,
	0, 0, 144, 0, 0, 0, 0, 1875, 0, 0,
	0, 0, 414, 414, 414, 1210, 414, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 0, 67, 0,
	0, 130, 1870, 0, 0, 0, 67, 0, 0, 143,
	0, 0, 0, 0, 0, 414, 0, 136, 0, 0,
	1066, 1067, 0, 0, 137, 0, 1106, 1107, 1108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	67, 0, 0, 1069, 0, 0, 1110, 128, 0, 0,
	4, 0, 0, 1854, 1855, 0, 1872, 1873, 1874, 0,
	67, 0, 0, 0, 0, 0, 67, 1068, 0, 2057,
	0, 0, 0, 1088, 0, 0, 0, 1871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1772,
	782, 1774, 0, 776, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1792, 0, 0, 0, 0, 0, 1091, 1092,
	1093, 1094, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	1111, 0, 0, 0, 0, 0, 1866, 1867, 1868, 0,
	1860, 67, 0, 0, 0, 1865, 1863, 1864, 1856, 1857,
	1858, 1859, 1861, 1862, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 0, 0, 0, 1101, 0, 414, 414,
	0, 0, 414, 1089, 0, 0, 0, 1642, 0, 0,
	1642, 1875, 0, 0, 0, 0, 0, 0, 1936, 0,
	0, 0, 0, 0, 414, 1942, 1943, 0, 0, 0,
	1655, 0, 0, 1950, 0, 0, 1870, 0, 0, 1955,
	1956, 1958, 1960, 1961, 0, 0, 0, 0, 0, 414,
	0, 0, 1970, 0, 0, 0, 1973, 0, 0, 0,
	1506, 0, 0, 1095, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1261, 0, 1261, 1090, 525,
	1126, 0, 0, 414, 0, 0, 0, 1999, 0, 0,
	0, 0, 414, 0, 2009, 1104, 0, 0, 0, 763,
	0, 414, 0, 0, 0, 763, 763, 0, 0, 763,
	0, 1871, 0, 0, 0, 1769, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1769,
	0, 1941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1126, 0, 1967, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 414, 0,
	0, 0, 1981, 0, 1105, 0, 1079, 1077, 1078, 1070,
	1071, 1072, 1073, 1075, 1076, 0, 0, 0, 764, 0,
	1993, 0, 0, 0, 764, 764, 0, 0, 764, 1247,
	1866, 1867, 1868, 0, 0, 0, 0, 0, 1247, 1865,
	1863, 1864, 1856, 1857, 1858, 1859, 1861, 1862, 2083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 0, 0, 1066, 1067, 67,
	1096, 1097, 1098, 1106, 1107, 1108, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 1110, 67, 2046, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 414,
	1088, 0, 0, 0, 0, 1642, 0, 1085, 0, 0,
	0, 0, 0, 0, 875, 1642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2187, 0, 0, 0, 2187, 0, 0, 0,
	0, 0, 2187, 0, 0, 1091, 1092, 1093, 1094, 0,
	0, 1655, 0, 1261, 1074, 0, 0, 0, 0, 0,
	0, 2208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 1111, 0, 414,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 448,
	0, 0, 0, 0, 0, 1109, 763, 2234, 0, 0,
	0, 0, 0, 0, 0, 0, 2236, 0, 2238, 414,
	40, 0, 0, 1101, 40, 0, 0, 0, 0, 0,
	1089, 41, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 2262, 0, 0, 0, 0, 0, 0, 1854, 1855,
	473, 1872, 1873, 1874, 473, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 2056, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 764, 1723, 763, 0, 474,
	0, 0, 0, 474, 0, 1090, 56, 0, 476, 57,
	56, 0, 476, 57, 0, 414, 0, 0, 875, 0,
	0, 1869, 1104, 0, 0, 0, 2239, 0, 0, 1642,
	875, 0, 0, 2294, 2295, 1655, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 59, 0, 0, 2166,
	875, 0, 0, 0, 0, 2328, 0, 2329, 0, 414,
	2331, 2332, 0, 0, 0, 0, 414, 0, 0, 2337,
	0, 0, 0, 0, 0, 0, 0, 0, 2166, 0,
	875, 1692, 0, 0, 2166, 1860, 764, 0, 0, 0,
	0, 1102, 0, 0, 1080, 1081, 1087, 1086, 1082, 1083,
	1084, 1105, 0, 1079, 1077, 1078, 1070, 1071, 1072, 1073,
	1075, 1076, 0, 0, 1854, 1855, 0, 1872, 1873, 1874,
	2275, 0, 763, 0, 0, 0, 1875, 0, 60, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 1854, 1855,
	0, 1872, 1873, 1874, 0, 0, 0, 0, 0, 0,
	0, 1870, 0, 0, 129, 62, 0, 63, 129, 62,
	0, 63, 0, 0, 0, 0, 2330, 1869, 0, 0,
	0, 142, 0, 2335, 1655, 142, 2394, 0, 475, 2396,
	0, 96, 475, 0, 0, 96, 0, 414, 0, 0,
	2166, 1869, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 2187, 0, 0, 0,
	0, 0, 2166, 0, 0, 0, 1871, 414, 0, 0,
	0, 1860, 0, 0, 875, 0, 0, 143, 0, 0,
	0, 143, 2234, 2234, 0, 136, 0, 0, 0, 136,
	0, 0, 137, 0, 1876, 1860, 137, 0, 0, 0,
	0, 0, 2461, 0, 0, 0, 0, 1642, 0, 0,
	0, 0, 1875, 0, 1261, 449, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 2403, 0, 1875, 1870, 0, 2477,
	2478, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 1866, 1867, 1868, 0, 2495,
	0, 1870, 0, 0, 1865, 1863, 1864, 1856, 1857, 1858,
	1859, 1861, 1862, 0, 2436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2510, 0, 875, 0,
	0, 414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2166, 0, 0, 0,
	0, 0, 1871, 0, 0, 0, 0, 0, 0, 0,
	0, 2461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1871, 0, 875, 875,
	875, 0, 0, 0, 0, 0, 414, 0, 0, 0,
	0, 0, 0, 2484, 0, 0, 0, 0, 0, 0,
	2571, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2514, 0,
	0, 1866, 1867, 1868, 0, 0, 0, 0, 0, 0,
	1865, 1863, 1864, 1856, 1857, 1858, 1859, 1861, 1862, 0,
	0, 0, 0, 0, 0, 1866, 1867, 1868, 0, 0,
	0, 0, 0, 0, 1865, 1863, 1864, 1856, 1857, 1858,
	1859, 1861, 1862, 784, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1723, 0, 0, 0, 0, 1126, 186,
	187, 790, 188, 791, 792, 793, 794, 349, 795, 796,
	797, 798, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 799, 193, 356, 357, 194, 195, 800, 801,
	358, 359, 360, 802, 196, 361, 803, 789, 804, 197,
	198, 199, 0, 201, 202, 203, 200, 805, 204, 0,
	205, 206, 806, 713, 207, 208, 209, 807, 808, 810,
	809, 811, 812, 813, 210, 211, 415, 212, 362, 213,
	363, 364, 814, 214, 815, 215, 816, 216, 817, 818,
	217, 218, 819, 219, 820, 0, 821, 365, 220, 222,
	221, 223, 366, 367, 822, 714, 823, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 824, 227,
	825, 826, 715, 827, 228, 371, 828, 372, 829, 0,
	229, 230, 0, 0, 231, 232, 373, 374, 717, 830,
	375, 236, 831, 233, 832, 716, 234, 376, 235, 377,
	378, 379, 380, 381, 833, 382, 834, 718, 237, 238,
	239, 719, 383, 384, 240, 241, 242, 835, 244, 243,
	836, 385, 720, 245, 246, 721, 837, 247, 248, 838,
	839, 249, 0, 250, 722, 251, 252, 254, 386, 253,
	723, 255, 256, 258, 257, 840, 841, 842, 387, 259,
	388, 260, 261, 843, 262, 844, 845, 263, 846, 847,
	264, 389, 724, 265, 725, 390, 266, 267, 268, 269,
	270, 848, 271, 391, 272, 392, 273, 849, 274, 275,
	276, 277, 278, 393, 279, 280, 850, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	851, 293, 726, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 852, 306, 395, 305, 307, 308, 853,
	309, 297, 298, 310, 727, 311, 396, 397, 312, 854,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	855, 320, 856, 321, 322, 323, 324, 325, 326, 327,
	328, 857, 400, 401, 402, 858, 859, 329, 330, 403,
	404, 860, 331, 332, 333, 334, 861, 862, 335, 336,
	337, 338, 863, 339, 864, 405, 340, 341, 342, 406,
	407, 865, 866, 343, 867, 868, 869, 870, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 784,
	0, 0, 0, 0, 0, 1635, 0, 0, 0, 0,
	0, 0, 0, 0, 1636, 186, 187, 790, 188, 791,
	792, 793, 794, 349, 795, 796, 797, 798, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 799, 193,
	356, 357, 194, 195, 800, 801, 358, 359, 360, 802,
	196, 361, 803, 789, 804, 197, 198, 199, 0, 201,
	202, 203, 200, 805, 204, 0, 205, 206, 806, 713,
	207, 208, 209, 807, 808, 810, 809, 811, 812, 813,
	210, 211, 415, 212, 362, 213, 363, 364, 814, 214,
	815, 215, 816, 216, 817, 818, 217, 218, 819, 219,
	820, 0, 821, 365, 220, 222, 221, 223, 366, 367,
	822, 714, 823, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 824, 227, 825, 826, 715, 827,
	228, 371, 828, 372, 829, 0, 229, 230, 0, 0,
	231, 232, 373, 374, 717, 830, 375, 236, 831, 233,
	832, 716, 234, 376, 235, 377, 378, 379, 380, 381,
	833, 382, 834, 718, 237, 238, 239, 719, 383, 384,
	240, 241, 242, 835, 244, 243, 836, 385, 720, 245,
	246, 721, 837, 247, 248, 838, 839, 249, 0, 250,
	722, 251, 252, 254, 386, 253, 723, 255, 256, 258,
	257, 840, 841, 842, 387, 259, 388, 260, 261, 843,
	262, 844, 845, 263, 846, 847, 264, 389, 724, 265,
	725, 390, 266, 267, 268, 269, 270, 848, 271, 391,
	272, 392, 273, 849, 274, 275, 276, 277, 278, 393,
	279, 280, 850, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 851, 293, 726, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 852,
	306, 395, 305, 307, 308, 853, 309, 297, 298, 310,
	727, 311, 396, 397, 312, 854, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 855, 320, 856, 321,
	322, 323, 324, 325, 326, 327, 328, 857, 400, 401,
	402, 858, 859, 329, 330, 403, 404, 860, 331, 332,
	333, 334, 861, 862, 335, 336, 337, 338, 863, 339,
	864, 405, 340, 341, 342, 406, 407, 865, 866, 343,
	867, 868, 869, 870, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2290, 186, 187, 790, 188, 791, 792, 793, 794,
	349, 795, 796, 797, 798, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 799, 193, 356, 357, 194,
	195, 800, 801, 358, 359, 360, 802, 196, 361, 803,
	789, 804, 197, 198, 199, 0, 201, 202, 203, 200,
	805, 204, 0, 205, 206, 806, 713, 207, 208, 209,
	807, 808, 810, 809, 811, 812, 813, 210, 211, 415,
	212, 362, 213, 363, 364, 814, 214, 815, 215, 816,
	216, 817, 818, 217, 218, 819, 219, 820, 0, 821,
	365, 220, 222, 221, 223, 366, 367, 822, 714, 823,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 824, 227, 825, 826, 715, 827, 228, 371, 828,
	372, 829, 0, 229, 230, 0, 0, 231, 232, 373,
	374, 717, 830, 375, 236, 831, 233, 832, 716, 234,
	376, 235, 377, 378, 379, 380, 381, 833, 382, 834,
	718, 237, 238, 239, 719, 383, 384, 240, 241, 242,
	835, 244, 243, 836, 385, 720, 245, 246, 721, 837,
	247, 248, 838, 839, 249, 0, 250, 722, 251, 252,
	254, 386, 253, 723, 255, 256, 258, 257, 840, 841,
	842, 387, 259, 388, 260, 261, 843, 262, 844, 845,
	263, 846, 847, 264, 389, 724, 265, 725, 390, 266,
	267, 268, 269, 270, 848, 271, 391, 272, 392, 273,
	849, 274, 275, 276, 277, 278, 393, 279, 280, 850,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 851, 293, 726, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 852, 306, 395, 305,
	307, 308, 853, 309, 297, 298, 310, 727, 311, 396,
	397, 312, 854, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 855, 320, 856, 321, 322, 323, 324,
	325, 326, 327, 328, 857, 400, 401, 402, 858, 859,
	329, 330, 403, 404, 860, 331, 332, 333, 334, 861,
	862, 335, 336, 337, 338, 863, 339, 864, 405, 340,
	341, 342, 406, 407, 865, 866, 343, 867, 868, 869,
	870, 344, 345, 346, 347, 348, 0, 0, 784, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1243, 186, 187, 790, 188, 791, 792,
	793, 794, 349, 795, 796, 797, 798, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 799, 193, 356,
	357, 194, 195, 800, 801, 358, 359, 360, 802, 196,
	361, 803, 789, 804, 197, 198, 199, 0, 201, 202,
	203, 200, 805, 204, 0, 205, 206, 806, 713, 207,
	208, 209, 807, 808, 810, 809, 811, 812, 813, 210,
	211, 415, 212, 362, 213, 363, 364, 814, 214, 815,
	215, 816, 216, 817, 818, 217, 218, 819, 219, 820,
	0, 821, 365, 220, 222, 221, 223, 366, 367, 822,
	714, 823, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 824, 227, 825, 826, 715, 827, 228,
	371, 828, 372, 829, 0, 229, 230, 0, 0, 231,
	232, 373, 374, 717, 830, 375, 236, 831, 233, 832,
	716, 234, 376, 235, 377, 378, 379, 380, 381, 833,
	382, 834, 718, 237, 238, 239, 719, 383, 384, 240,
	241, 242, 835, 244, 243, 836, 385, 720, 245, 246,
	721, 837, 247, 248, 838, 839, 249, 0, 250, 722,
	251, 252, 254, 386, 253, 723, 255, 256, 258, 257,
	840, 841, 842, 387, 259, 388, 260, 261, 843, 262,
	844, 845, 263, 846, 847, 264, 389, 724, 265, 725,
	390, 266, 267, 268, 269, 270, 848, 271, 391, 272,
	392, 273, 849, 274, 275, 276, 277, 278, 393, 279,
	280, 850, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 851, 293, 726, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 852, 306,
	395, 305, 307, 308, 853, 309, 297, 298, 310, 727,
	311, 396, 397, 312, 854, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 855, 320, 856, 321, 322,
	323, 324, 325, 326, 327, 328, 857, 400, 401, 402,
	858, 859, 329, 330, 403, 404, 860, 331, 332, 333,
	334, 861, 862, 335, 336, 337, 338, 863, 339, 864,
	405, 340, 341, 342, 406, 407, 865, 866, 343, 867,
	868, 869, 870, 344, 345, 346, 347, 348, 1534, 0,
	651, 640, 641, 638, 639, 630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 1531, 188,
	0, 0, 0, 0, 668, 633, 0, 0, 0, 189,
	190, 191, 350, 683, 352, 684, 192, 685, 686, 0,
	193, 356, 357, 194, 195, 636, 667, 687, 688, 360,
	0, 196, 679, 0, 659, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	713, 207, 208, 209, 0, 660, 661, 663, 0, 662,
	664, 210, 211, 415, 212, 689, 213, 690, 691, 0,
	214, 0, 215, 0, 216, 1532, 0, 682, 218, 0,
	219, 0, 0, 0, 624, 220, 222, 221, 223, 669,
	670, 647, 714, 0, 0, 0, 0, 0, 224, 225,
	692, 693, 694, 0, 226, 0, 227, 0, 0, 715,
	0, 228, 680, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 676, 678, 717, 0, 375, 236, 0,
	233, 0, 716, 234, 695, 235, 696, 697, 698, 699,
	700, 0, 658, 0, 718, 237, 238, 239, 719, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 681, 720,
	245, 246, 721, 0, 247, 248, 0, 0, 249, 0,
	250, 722, 251, 252, 254, 386, 253, 723, 255, 256,
	258, 257, 619, 0, 648, 677, 259, 701, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 724,
	265, 725, 671, 266, 267, 268, 269, 270, 0, 271,
	672, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	702, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 726,
	294, 295, 625, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 665, 309, 297, 298,
	310, 727, 311, 703, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 704, 316, 317, 673, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	705, 706, 0, 0, 329, 330, 674, 675, 646, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 666,
	339, 0, 405, 340, 341, 342, 406, 707, 1530, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	620, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	618, 0, 0, 0, 0, 616, 617, 1533, 186, 187,
	0, 188, 0, 0, 626, 1528, 668, 633, 0, 0,
	629, 189, 190, 191, 350, 683, 352, 684, 192, 685,
	686, 0, 193, 356, 357, 194, 195, 636, 667, 687,
	688, 360, 0, 196, 679, 0, 659, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 713, 207, 208, 209, 0, 660, 661, 663,
	0, 662, 664, 210, 211, 415, 212, 689, 213, 690,
	691, 614, 214, 0, 215, 0, 216, 0, 0, 682,
	218, 0, 219, 0, 0, 0, 624, 220, 222, 221,
	223, 669, 670, 647, 714, 0, 0, 0, 0, 0,
	224, 225, 692, 693, 694, 0, 226, 0, 227, 0,
	0, 715, 0, 228, 680, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 676, 678, 717, 0, 375,
	236, 0, 233, 0, 716, 234, 695, 235, 696, 697,
	698, 699, 700, 0, 658, 0, 718, 237, 238, 239,
	719, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	681, 720, 245, 246, 721, 0, 247, 248, 0, 0,
	249, 0, 250, 722, 251, 252, 254, 386, 253, 723,
	255, 256, 258, 257, 619, 0, 648, 677, 259, 701,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 724, 265, 725, 671, 266, 267, 268, 269, 270,
	0, 271, 672, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 702, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 726, 294, 295, 625, 296, 0, 300, 301, 302,
	303, 304, 142, 306, 395, 305, 307, 308, 665, 309,
	297, 298, 310, 727, 311, 703, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 704, 316, 317, 673, 0,
	320, 144, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 705, 706, 0, 0, 329, 330, 674, 675,
	646, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 666, 339, 0, 405, 340, 341, 342, 944, 707,
	0, 0, 343, 0, 0, 0, 136, 344, 345, 346,
	347, 348, 620, 137, 602, 0, 651, 640, 641, 638,
	639, 630, 618, 0, 0, 0, 0, 616, 617, 0,
	0, 0, 186, 187, 0, 188, 1129, 0, 0, 0,
	668, 633, 629, 0, 0, 189, 190, 191, 350, 683,
	352, 684, 192, 685, 686, 0, 193, 356, 357, 194,
	195, 636, 667, 687, 688, 360, 0, 196, 679, 0,
	659, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 713, 207, 208, 209,
	0, 660, 661, 663, 0, 662, 664, 210, 211, 415,
	212, 689, 213, 690, 691, 0, 214, 0, 215, 0,
	216, 0, 0, 682, 218, 0, 219, 0, 0, 0,
	624, 220, 222, 221, 223, 669, 670, 647, 714, 0,
	0, 0, 0, 0, 224, 225, 692, 693, 694, 0,
	226, 0, 227, 0, 0, 715, 0, 228, 680, 0,
	372, 0, 0, 229, 230, 0, 0, 231, 232, 676,
	678, 717, 0, 375, 236, 0, 233, 0, 716, 234,
	695, 235, 696, 697, 698, 699, 700, 0, 658, 0,
	718, 237, 238, 239, 719, 383, 384, 240, 241, 242,
	0, 244, 243, 0, 681, 720, 245, 246, 721, 0,
	247, 248, 0, 0, 249, 0, 250, 722, 251, 252,
	254, 386, 253, 723, 255, 256, 258, 257, 619, 0,
	648, 677, 259, 701, 260, 261, 0, 262, 0, 0,
	263, 0, 0, 264, 389, 724, 265, 725, 671, 266,
	267, 268, 269, 270, 0, 271, 672, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 702, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 726, 294, 295, 625, 296,
	0, 300, 301, 302, 303, 304, 142, 306, 395, 305,
	307, 308, 665, 309, 297, 298, 310, 727, 311, 703,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 704,
	316, 317, 673, 0, 320, 144, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 705, 706, 0, 0,
	329, 330, 674, 675, 646, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 666, 339, 0, 405, 340,
	341, 342, 944, 707, 0, 0, 343, 0, 0, 0,
	136, 344, 345, 346, 347, 348, 620, 137, 651, 640,
	641, 638, 639, 630, 0, 0, 618, 0, 0, 0,
	0, 616, 617, 0, 186, 187, 0, 188, 0, 0,
	1129, 0, 668, 633, 0, 0, 629, 189, 190, 191,
	350, 683, 352, 684, 192, 685, 686, 0, 193, 356,
	357, 194, 195, 636, 667, 687, 688, 360, 0, 196,
	679, 0, 659, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 713, 207,
	208, 209, 0, 660, 661, 663, 0, 662, 664, 210,
	211, 415, 212, 689, 213, 690, 691, 0, 214, 0,
	215, 0, 216, 0, 0, 682, 218, 0, 219, 0,
	0, 0, 624, 220, 222, 221, 223, 669, 670, 647,
	714, 0, 0, 0, 0, 0, 224, 225, 692, 693,
	694, 0, 226, 0, 227, 0, 0, 715, 0, 228,
	680, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 676, 678, 717, 0, 375, 236, 0, 233, 0,
	716, 234, 695, 235, 696, 697, 698, 699, 700, 0,
	658, 0, 718, 237, 238, 239, 719, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 681, 720, 245, 246,
	721, 0, 247, 248, 0, 0, 249, 0, 250, 722,
	251, 252, 254, 386, 253, 723, 255, 256, 258, 257,
	619, 0, 648, 677, 259, 701, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 724, 265, 725,
	671, 266, 267, 268, 269, 270, 0, 271, 672, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 702, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 726, 294, 295,
	625, 296, 0, 300, 301, 302, 303, 304, 142, 306,
	395, 305, 307, 308, 665, 309, 297, 298, 310, 727,
	311, 703, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 704, 316, 317, 673, 0, 320, 144, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 705, 706,
	0, 0, 329, 330, 674, 675, 646, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 666, 339, 0,
	405, 340, 341, 342, 944, 707, 0, 0, 343, 0,
	0, 0, 136, 344, 345, 346, 347, 348, 620, 137,
	651, 640, 641, 638, 639, 630, 0, 0, 618, 0,
	0, 0, 0, 616, 617, 0, 186, 187, 0, 188,
	0, 0, 1129, 0, 668, 633, 0, 0, 629, 189,
	190, 191, 350, 683, 352, 684, 192, 685, 686, 1588,
	193, 356, 357, 194, 195, 636, 667, 687, 688, 360,
	0, 196, 679, 0, 659, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	713, 207, 208, 209, 0, 660, 661, 663, 0, 662,
	664, 210, 211, 415, 212, 689, 213, 690, 691, 0,
	214, 0, 215, 0, 216, 0, 0, 682, 218, 0,
	219, 0, 0, 0, 624, 220, 222, 221, 223, 669,
	670, 647, 714, 0, 0, 0, 0, 0, 224, 225,
	692, 693, 694, 0, 226, 0, 227, 0, 1593, 715,
	0, 228, 680, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 676, 678, 717, 0, 375, 236, 0,
	233, 0, 716, 234, 695, 235, 696, 697, 698, 699,
	700, 0, 658, 0, 718, 237, 238, 239, 719, 383,
	384, 240, 241, 242, 0, 244, 243, 1589, 681, 720,
	245, 246, 721, 0, 247, 248, 0, 0, 249, 0,
	250, 722, 251, 252, 254, 386, 253, 723, 255, 256,
	258, 257, 619, 0, 648, 677, 259, 701, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 724,
	265, 725, 671, 266, 267, 268, 269, 270, 0, 271,
	672, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	702, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 726,
	294, 295, 625, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 665, 309, 297, 298,
	310, 727, 311, 703, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 704, 316, 317, 673, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	705, 706, 0, 1590, 329, 330, 674, 675, 646, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 666,
	339, 0, 405, 340, 341, 342, 406, 707, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	620, 610, 0, 651, 640, 641, 638, 639, 630, 0,
	618, 0, 0, 0, 0, 616, 617, 0, 0, 186,
	187, 0, 188, 0, 626, 0, 0, 668, 633, 0,
	629, 0, 189, 190, 191, 350, 683, 352, 684, 192,
	685, 686, 0, 193, 356, 357, 194, 195, 636, 667,
	687, 688, 360, 0, 196, 679, 0, 659, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 713, 207, 208, 209, 0, 660, 661,
	663, 0, 662, 664, 210, 211, 415, 212, 689, 213,
	690, 691, 614, 214, 0, 215, 0, 216, 0, 0,
	682, 218, 0, 219, 0, 0, 0, 624, 220, 222,
	221, 223, 669, 670, 647, 714, 0, 0, 0, 0,
	0, 224, 225, 692, 693, 694, 0, 226, 0, 227,
	0, 0, 715, 0, 228, 680, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 676, 678, 717, 0,
	375, 236, 0, 233, 0, 716, 234, 695, 235, 696,
	697, 698, 699, 700, 0, 658, 0, 718, 237, 238,
	239, 719, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 681, 720, 245, 246, 721, 0, 247, 248, 0,
	0, 249, 0, 250, 722, 251, 252, 254, 386, 253,
	723, 255, 256, 258, 257, 619, 0, 648, 677, 259,
	701, 260, 261, 0, 262, 612, 0, 263, 0, 0,
	264, 389, 724, 265, 725, 671, 266, 267, 268, 269,
	270, 0, 271, 672, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 702, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 726, 294, 295, 625, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 665,
	309, 297, 298, 310, 727, 311, 703, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 704, 316, 317, 673,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 705, 706, 0, 0, 329, 330, 674,
	675, 646, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 666, 339, 0, 405, 340, 341, 342, 406,
	707, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 620, 0, 651, 640, 641, 638, 639,
	630, 0, 0, 618, 0, 0, 0, 0, 616, 617,
	0, 186, 187, 0, 188, 0, 0, 626, 0, 668,
	633, 0, 0, 629, 189, 190, 191, 350, 683, 352,
	684, 192, 685, 686, 0, 193, 356, 357, 194, 195,
	636, 667, 687, 688, 360, 0, 196, 679, 0, 659,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 713, 207, 208, 209, 0,
	660, 661, 663, 0, 662, 664, 210, 211, 415, 212,
	689, 213, 690, 691, 0, 214, 0, 215, 0, 216,
	0, 0, 682, 218, 0, 219, 0, 0, 0, 624,
	220, 222, 221, 223, 669, 670, 647, 714, 0, 0,
	0, 0, 0, 224, 225, 692, 693, 694, 0, 226,
	0, 227, 0, 0, 715, 0, 228, 680, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 676, 678,
	717, 0, 375, 236, 0, 233, 0, 716, 234, 695,
	235, 696, 697, 698, 699, 700, 0, 658, 0, 718,
	237, 238, 239, 719, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 681, 720, 245, 246, 721, 0, 247,
	248, 0, 0, 249, 0, 250, 722, 251, 252, 254,
	386, 253, 723, 255, 256, 258, 257, 619, 2217, 648,
	677, 259, 701, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 724, 265, 725, 671, 266, 267,
	268, 269, 270, 0, 271, 672, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 702, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 726, 294, 295, 625, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 665, 309, 297, 298, 310, 727, 311, 703, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 704, 316,
	317, 673, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 705, 706, 0, 0, 329,
	330, 674, 675, 646, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 666, 339, 0, 405, 340, 341,
	342, 406, 707, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 620, 0, 651, 640, 641,
	638, 639, 630, 0, 0, 618, 0, 0, 0, 0,
	616, 617, 1190, 186, 187, 0, 188, 0, 0, 626,
	0, 668, 633, 0, 0, 629, 189, 190, 191, 350,
	683, 352, 684, 192, 685, 686, 0, 193, 356, 357,
	194, 195, 636, 667, 687, 688, 360, 0, 196, 679,
	0, 659, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 713, 207, 208,
	209, 0, 660, 661, 663, 0, 662, 664, 210, 211,
	415, 212, 689, 213, 690, 691, 0, 214, 0, 215,
	0, 216, 0, 0, 682, 218, 0, 219, 0, 0,
	0, 624, 220, 222, 221, 223, 669, 670, 647, 714,
	0, 0, 0, 0, 0, 224, 225, 692, 693, 694,
	0, 226, 0, 227, 0, 0, 715, 0, 228, 680,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	676, 678, 717, 0, 375, 236, 1438, 233, 0, 716,
	234, 695, 235, 696, 697, 698, 699, 700, 0, 658,
	0, 718, 237, 238, 239, 719, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 681, 720, 245, 246, 721,
	0, 247, 248, 0, 0, 249, 0, 250, 722, 251,
	252, 254, 386, 253, 723, 255, 256, 258, 257, 619,
	0, 648, 677, 259, 701, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 724, 265, 725, 671,
	266, 267, 268, 269, 270, 0, 271, 672, 272, 392,
	273, 1437, 274, 275, 276, 277, 278, 702, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 726, 294, 295, 625,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 665, 309, 297, 298, 310, 727, 311,
	703, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	704, 316, 317, 673, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 705, 706, 0,
	0, 329, 330, 674, 675, 646, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 666, 339, 0, 405,
	340, 341, 342, 406, 707, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 620, 0, 651,
	640, 641, 638, 639, 630, 0, 0, 618, 0, 0,
	0, 0, 616, 617, 0, 186, 187, 0, 188, 0,
	0, 626, 0, 668, 633, 0, 0, 629, 189, 190,
	191, 350, 683, 352, 684, 192, 685, 686, 0, 193,
	356, 357, 194, 195, 636, 667, 687, 688, 360, 0,
	196, 679, 0, 659, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 713,
	207, 208, 209, 0, 660, 661, 663, 0, 662, 664,
	210, 211, 415, 212, 689, 213, 690, 691, 614, 214,
	0, 215, 0, 216, 0, 0, 682, 218, 0, 219,
	0, 0, 0, 624, 220, 222, 221, 223, 669, 670,
	647, 714, 0, 0, 0, 0, 0, 224, 225, 692,
	693, 694, 0, 226, 0, 227, 0, 0, 715, 0,
	228, 680, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 676, 678, 717, 0, 375, 236, 0, 233,
	0, 716, 234, 695, 235, 696, 697, 698, 699, 700,
	0, 658, 0, 718, 237, 238, 239, 719, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 681, 720, 245,
	246, 721, 0, 247, 248, 0, 0, 249, 0, 250,
	722, 251, 252, 254, 386, 253, 723, 255, 256, 258,
	257, 619, 0, 648, 677, 259, 701, 260, 261, 0,
	262, 612, 0, 263, 0, 0, 264, 389, 724, 265,
	725, 671, 266, 267, 268, 269, 270, 0, 271, 672,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 702,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 726, 294,
	295, 625, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 665, 309, 297, 298, 310,
	727, 311, 703, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 704, 316, 317, 673, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 705,
	706, 0, 0, 329, 330, 674, 675, 646, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 666, 339,
	0, 405, 340, 341, 342, 406, 707, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 620,
	0, 651, 640, 641, 638, 639, 630, 0, 0, 618,
	0, 0, 0, 0, 616, 617, 0, 186, 187, 0,
	188, 0, 0, 626, 0, 668, 633, 0, 0, 629,
	189, 190, 191, 350, 683, 352, 684, 192, 685, 686,
	0, 193, 356, 357, 194, 195, 636, 667, 687, 688,
	360, 0, 196, 679, 0, 659, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 713, 207, 208, 209, 0, 660, 661, 663, 0,
	662, 664, 210, 211, 415, 212, 689, 213, 690, 691,
	2621, 214, 0, 215, 0, 216, 0, 0, 682, 218,
	0, 219, 0, 0, 0, 624, 220, 222, 221, 223,
	669, 670, 647, 714, 0, 0, 0, 0, 0, 224,
	225, 692, 693, 694, 0, 226, 0, 227, 0, 0,
	715, 0, 228, 680, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 676, 678, 717, 0, 375, 236,
	0, 233, 0, 716, 234, 695, 235, 696, 697, 698,
	699, 700, 0, 658, 0, 718, 237, 238, 239, 719,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 681,
	720, 245, 246, 721, 0, 247, 248, 0, 0, 249,
	0, 250, 2622, 251, 252, 254, 386, 253, 723, 255,
	256, 258, 257, 619, 0, 648, 677, 259, 701, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	724, 265, 725, 671, 266, 267, 268, 269, 270, 0,
	271, 672, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 702, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	726, 294, 295, 625, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 665, 309, 297,
	298, 310, 727, 311, 703, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 704, 316, 317, 673, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 705, 706, 0, 0, 329, 330, 674, 675, 646,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	666, 339, 0, 405, 340, 341, 342, 406, 707, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 620, 0, 651, 640, 641, 638, 639, 630, 0,
	0, 618, 0, 0, 0, 0, 616, 617, 0, 186,
	187, 0, 188, 0, 0, 626, 0, 668, 633, 0,
	0, 629, 189, 190, 191, 350, 683, 352, 684, 192,
	685, 686, 0, 193, 356, 357, 194, 195, 636, 667,
	687, 688, 360, 0, 196, 679, 0, 659, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 713, 207, 208, 209, 0, 660, 661,
	663, 0, 662, 664, 210, 211, 415, 212, 689, 213,
	690, 691, 614, 214, 0, 215, 0, 216, 0, 0,
	682, 218, 0, 219, 0, 0, 0, 624, 220, 222,
	221, 223, 669, 670, 647, 714, 0, 0, 0, 0,
	0, 224, 225, 692, 693, 694, 0, 226, 0, 227,
	0, 0, 715, 0, 228, 680, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 676, 678, 717, 0,
	375, 236, 0, 233, 0, 716, 234, 695, 235, 696,
	697, 698, 699, 700, 0, 658, 0, 718, 237, 238,
	239, 719, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 681, 720, 245, 246, 721, 0, 247, 248, 0,
	0, 249, 0, 250, 722, 251, 252, 254, 386, 253,
	723, 255, 256, 258, 257, 619, 0, 648, 677, 259,
	701, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 724, 265, 725, 671, 266, 267, 268, 269,
	270, 0, 271, 672, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 702, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 726, 294, 295, 625, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 665,
	309, 297, 298, 310, 727, 311, 703, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 704, 316, 317, 673,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 705, 706, 0, 0, 329, 330, 674,
	675, 646, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 666, 339, 0, 405, 340, 341, 342, 406,
	707, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 620, 0, 651, 640, 641, 638, 639,
	630, 0, 0, 618, 0, 0, 0, 0, 616, 617,
	0, 186, 187, 0, 188, 0, 0, 626, 0, 668,
	633, 0, 0, 629, 189, 190, 191, 350, 683, 352,
	684, 192, 685, 686, 0, 193, 356, 357, 194, 195,
	636, 667, 687, 688, 360, 0, 196, 679, 0, 659,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 713, 207, 208, 209, 0,
	660, 661, 663, 0, 662, 664, 210, 211, 415, 212,
	689, 213, 690, 691, 0, 214, 0, 215, 0, 216,
	0, 0, 682, 218, 0, 219, 0, 0, 0, 624,
	220, 222, 221, 223, 669, 670, 647, 714, 0, 0,
	0, 0, 0, 224, 225, 692, 693, 694, 0, 226,
	0, 227, 0, 0, 715, 0, 228, 680, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 676, 678,
	717, 0, 375, 236, 0, 233, 0, 716, 234, 695,
	235, 696, 697, 698, 699, 700, 0, 658, 0, 718,
	237, 238, 239, 719, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 681, 720, 245, 246, 721, 0, 247,
	248, 0, 0, 249, 0, 250, 722, 251, 252, 254,
	386, 253, 723, 255, 256, 258, 257, 619, 0, 648,
	677, 259, 701, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 724, 265, 725, 671, 266, 267,
	268, 269, 270, 0, 271, 672, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 702, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 726, 294, 295, 625, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 665, 309, 297, 298, 310, 727, 311, 703, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 704, 316,
	317, 673, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 705, 706, 0, 0, 329,
	330, 674, 675, 646, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 666, 339, 0, 405, 340, 341,
	342, 406, 707, 2069, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 620, 0, 651, 640, 641,
	638, 639, 630, 0, 0, 618, 0, 0, 0, 0,
	616, 617, 0, 186, 187, 0, 188, 0, 0, 626,
	0, 668, 633, 0, 0, 629, 189, 190, 191, 350,
	683, 352, 684, 192, 685, 686, 0, 193, 356, 357,
	194, 195, 636, 667, 687, 688, 360, 0, 196, 679,
	0, 659, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 713, 207, 208,
	209, 0, 660, 661, 663, 0, 662, 664, 210, 211,
	415, 212, 689, 213, 690, 691, 0, 214, 0, 215,
	0, 216, 0, 0, 682, 218, 0, 219, 0, 0,
	0, 624, 220, 222, 221, 223, 669, 670, 647, 714,
	0, 0, 0, 0, 0, 224, 225, 692, 693, 694,
	0, 226, 0, 227, 0, 0, 715, 0, 228, 680,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	676, 678, 717, 0, 375, 236, 0, 233, 0, 716,
	234, 695, 235, 696, 697, 698, 699, 700, 0, 658,
	0, 718, 237, 238, 239, 719, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 681, 720, 245, 246, 721,
	0, 247, 248, 0, 0, 249, 0, 250, 722, 251,
	252, 254, 386, 253, 723, 255, 256, 258, 257, 619,
	0, 648, 677, 259, 701, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 724, 265, 725, 671,
	266, 267, 268, 269, 270, 0, 271, 672, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 702, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 726, 294, 295, 625,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 665, 309, 297, 298, 310, 727, 311,
	703, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	704, 316, 317, 673, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 705, 706, 0,
	0, 329, 330, 674, 675, 646, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 666, 339, 0, 405,
	340, 341, 342, 406, 707, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 620, 0, 651,
	640, 641, 638, 639, 630, 0, 0, 618, 0, 0,
	0, 0, 616, 617, 1190, 186, 187, 0, 188, 0,
	0, 626, 0, 668, 633, 0, 0, 629, 189, 190,
	191, 350, 683, 352, 684, 192, 685, 686, 0, 193,
	356, 357, 194, 195, 636, 667, 687, 688, 360, 0,
	196, 679, 0, 659, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 713,
	207, 208, 209, 0, 660, 661, 663, 0, 662, 664,
	210, 211, 415, 212, 689, 213, 690, 691, 0, 214,
	0, 215, 0, 216, 0, 0, 682, 218, 0, 219,
	0, 0, 0, 624, 220, 222, 221, 223, 669, 670,
	647, 714, 0, 0, 0, 0, 0, 224, 225, 692,
	693, 694, 0, 226, 0, 227, 0, 1593, 715, 0,
	228, 680, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 676, 678, 717, 0, 375, 236, 0, 233,
	0, 716, 234, 695, 235, 696, 697, 698, 699, 700,
	0, 658, 0, 718, 237, 238, 239, 719, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 681, 720, 245,
	246, 721, 0, 247, 248, 0, 0, 249, 0, 250,
	722, 251, 252, 254, 386, 253, 723, 255, 256, 258,
	257, 619, 0, 648, 677, 259, 701, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 724, 265,
	725, 671, 266, 267, 268, 269, 270, 0, 271, 672,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 702,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 726, 294,
	295, 625, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 665, 309, 297, 298, 310,
	727, 311, 703, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 704, 316, 317, 673, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 705,
	706, 0, 0, 329, 330, 674, 675, 646, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 666, 339,
	0, 405, 340, 341, 342, 406, 707, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 620,
	1638, 0, 651, 640, 641, 638, 639, 630, 0, 618,
	0, 0, 0, 0, 616, 617, 0, 0, 186, 187,
	0, 188, 0, 626, 0, 0, 668, 633, 0, 629,
	0, 189, 190, 191, 350, 683, 352, 684, 192, 685,
	686, 0, 193, 356, 357, 194, 195, 636, 667, 687,
	688, 360, 0, 196, 679, 0, 659, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 713, 207, 208, 209, 0, 660, 661, 663,
	0, 662, 664, 210, 211, 415, 212, 689, 213, 690,
	691, 0, 214, 0, 215, 0, 216, 0, 0, 682,
	218, 0, 219, 0, 0, 0, 624, 220, 222, 221,
	223, 669, 670, 647, 714, 0, 0, 0, 0, 0,
	224, 225, 692, 693, 694, 0, 226, 0, 227, 0,
	0, 715, 0, 228, 680, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 676, 678, 717, 0, 375,
	236, 0, 233, 0, 716, 234, 695, 235, 696, 697,
	698, 699, 700, 0, 658, 0, 718, 237, 238, 239,
	719, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	681, 720, 245, 246, 721, 0, 247, 248, 0, 0,
	249, 0, 250, 722, 251, 252, 254, 386, 253, 723,
	255, 256, 258, 257, 619, 0, 648, 677, 259, 701,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 724, 265, 725, 671, 266, 267, 268, 269, 270,
	0, 271, 672, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 702, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 726, 294, 295, 625, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 665, 309,
	297, 298, 310, 727, 311, 703, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 704, 316, 317, 673, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 705, 706, 0, 0, 329, 330, 674, 675,
	646, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 666, 339, 0, 405, 340, 341, 342, 406, 707,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 620, 1602, 0, 651, 640, 641, 638, 639,
	630, 0, 618, 0, 0, 0, 0, 616, 617, 0,
	0, 186, 187, 0, 188, 0, 626, 0, 0, 668,
	633, 0, 629, 0, 189, 190, 191, 350, 683, 352,
	684, 192, 685, 686, 0, 193, 356, 357, 194, 195,
	636, 667, 687, 688, 360, 0, 196, 679, 0, 659,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 713, 207, 208, 209, 0,
	660, 661, 663, 0, 662, 664, 210, 211, 415, 212,
	689, 213, 690, 691, 0, 214, 0, 215, 0, 216,
	0, 0, 682, 218, 0, 219, 0, 0, 0, 624,
	220, 222, 221, 223, 669, 670, 647, 714, 0, 0,
	0, 0, 0, 224, 225, 692, 693, 694, 0, 226,
	0, 227, 0, 0, 715, 0, 228, 680, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 676, 678,
	717, 0, 375, 236, 0, 233, 0, 716, 234, 695,
	235, 696, 697, 698, 699, 700, 0, 658, 0, 718,
	237, 238, 239, 719, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 681, 720, 245, 246, 721, 0, 247,
	248, 0, 0, 249, 0, 250, 722, 251, 252, 254,
	386, 253, 723, 255, 256, 258, 257, 619, 0, 648,
	677, 259, 701, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 724, 265, 725, 671, 266, 267,
	268, 269, 270, 0, 271, 672, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 702, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 726, 294, 295, 625, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 665, 309, 297, 298, 310, 727, 311, 703, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 704, 316,
	317, 673, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 705, 706, 0, 0, 329,
	330, 674, 675, 646, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 666, 339, 0, 405, 340, 341,
	342, 406, 707, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 620, 1600, 0, 651, 640,
	641, 638, 639, 630, 0, 618, 0, 0, 0, 0,
	616, 617, 0, 0, 186, 187, 0, 188, 0, 626,
	0, 0, 668, 633, 0, 629, 0, 189, 190, 191,
	350, 683, 352, 684, 192, 685, 686, 0, 193, 356,
	357, 194, 195, 636, 667, 687, 688, 360, 0, 196,
	679, 0, 659, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 713, 207,
	208, 209, 0, 660, 661, 663, 0, 662, 664, 210,
	211, 415, 212, 689, 213, 690, 691, 0, 214, 0,
	215, 0, 216, 0, 0, 682, 218, 0, 219, 0,
	0, 0, 624, 220, 222, 221, 223, 669, 670, 647,
	714, 0, 0, 0, 0, 0, 224, 225, 692, 693,
	694, 0, 226, 0, 227, 0, 0, 715, 0, 228,
	680, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 676, 678, 717, 0, 375, 236, 0, 233, 0,
	716, 234, 695, 235, 696, 697, 698, 699, 700, 0,
	658, 0, 718, 237, 238, 239, 719, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 681, 720, 245, 246,
	721, 0, 247, 248, 0, 0, 249, 0, 250, 722,
	251, 252, 254, 386, 253, 723, 255, 256, 258, 257,
	619, 0, 648, 677, 259, 701, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 724, 265, 725,
	671, 266, 267, 268, 269, 270, 0, 271, 672, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 702, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 726, 294, 295,
	625, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 665, 309, 297, 298, 310, 727,
	311, 703, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 704, 316, 317, 673, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 705, 706,
	0, 0, 329, 330, 674, 675, 646, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 666, 339, 0,
	405, 340, 341, 342, 406, 707, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 620, 1584,
	0, 651, 640, 641, 638, 639, 630, 0, 618, 0,
	0, 0, 0, 616, 617, 0, 0, 186, 187, 0,
	188, 0, 626, 0, 0, 668, 633, 0, 629, 0,
	189, 190, 191, 350, 683, 352, 684, 192, 685, 686,
	0, 193, 356, 357, 194, 195, 636, 667, 687, 688,
	360, 0, 196, 679, 0, 659, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 713, 207, 208, 209, 0, 660, 661, 663, 0,
	662, 664, 210, 211, 415, 212, 689, 213, 690, 691,
	0, 214, 0, 215, 0, 216, 0, 0, 682, 218,
	0, 219, 0, 0, 0, 624, 220, 222, 221, 223,
	669, 670, 647, 714, 0, 0, 0, 0, 0, 224,
	225, 692, 693, 694, 0, 226, 0, 227, 0, 0,
	715, 0, 228, 680, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 676, 678, 717, 0, 375, 236,
	0, 233, 0, 716, 234, 695, 235, 696, 697, 698,
	699, 700, 0, 658, 0, 718, 237, 238, 239, 719,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 681,
	720, 245, 246, 721, 0, 247, 248, 0, 0, 249,
	0, 250, 722, 251, 252, 254, 386, 253, 723, 255,
	256, 258, 257, 619, 0, 648, 677, 259, 701, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	724, 265, 725, 671, 266, 267, 268, 269, 270, 0,
	271, 672, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 702, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	726, 294, 295, 625, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 665, 309, 297,
	298, 310, 727, 311, 703, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 704, 316, 317, 673, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 705, 706, 0, 0, 329, 330, 674, 675, 646,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	666, 339, 0, 405, 340, 341, 342, 406, 707, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 620, 1572, 0, 651, 640, 641, 638, 639, 630,
	0, 618, 0, 0, 0, 0, 616, 617, 0, 0,
	186, 187, 0, 188, 0, 626, 0, 0, 668, 633,
	0, 629, 0, 189, 190, 191, 350, 683, 352, 684,
	192, 685, 686, 0, 193, 356, 357, 194, 195, 636,
	667, 687, 688, 360, 0, 196, 679, 0, 659, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 713, 207, 208, 209, 0, 660,
	661, 663, 0, 662, 664, 210, 211, 415, 212, 689,
	213, 690, 691, 0, 214, 0, 215, 0, 216, 0,
	0, 682, 218, 0, 219, 0, 0, 0, 624, 220,
	222, 221, 223, 669, 670, 647, 714, 0, 0, 0,
	0, 0, 224, 225, 692, 693, 694, 0, 226, 0,
	227, 0, 0, 715, 0, 228, 680, 0, 372, 0,
	0, 229, 230, 0, 0, 231, 232, 676, 678, 717,
	0, 375, 236, 0, 233, 0, 716, 234, 695, 235,
	696, 697, 698, 699, 700, 0, 658, 0, 718, 237,
	238, 239, 719, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 681, 720, 245, 246, 721, 0, 247, 248,
	0, 0, 249, 0, 250, 722, 251, 252, 254, 386,
	253, 723, 255, 256, 258, 257, 619, 0, 648, 677,
	259, 701, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 724, 265, 725, 671, 266, 267, 268,
	269, 270, 0, 271, 672, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 702, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 726, 294, 295, 625, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	665, 309, 297, 298, 310, 727, 311, 703, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 704, 316, 317,
	673, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 705, 706, 0, 0, 329, 330,
	674, 675, 646, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 666, 339, 0, 405, 340, 341, 342,
	406, 707, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 620, 1570, 0, 1562, 640, 641,
	638, 639, 630, 0, 618, 0, 0, 0, 0, 616,
	617, 0, 0, 186, 187, 0, 188, 0, 626, 0,
	0, 668, 633, 0, 629, 0, 189, 190, 191, 350,
	683, 352, 684, 192, 685, 686, 0, 193, 356, 357,
	194, 195, 636, 667, 687, 688, 360, 0, 196, 679,
	0, 659, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 713, 207, 208,
	209, 0, 660, 661, 663, 0, 662, 664, 210, 211,
	415, 212, 689, 1565, 690, 691, 0, 214, 0, 215,
	0, 216, 0, 0, 682, 218, 0, 219, 0, 0,
	0, 624, 220, 222, 221, 223, 669, 670, 647, 714,
	0, 0, 0, 0, 0, 224, 225, 692, 693, 694,
	0, 226, 0, 227, 0, 0, 715, 0, 228, 680,
	0, 372, 0, 0, 229, 1566, 0, 0, 231, 232,
	676, 678, 717, 0, 375, 236, 0, 233, 0, 716,
	234, 695, 235, 696, 697, 698, 699, 700, 0, 658,
	0, 718, 237, 238, 239, 719, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 681, 720, 245, 246, 721,
	0, 247, 248, 0, 0, 249, 0, 250, 722, 1567,
	1564, 254, 386, 253, 723, 255, 256, 258, 257, 619,
	0, 648, 677, 259, 701, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 724, 265, 725, 671,
	266, 267, 268, 269, 270, 0, 271, 672, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 702, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 726, 294, 295, 625,
	296, 0, 300, 301, 302, 303, 1568, 0, 306, 395,
	305, 307, 308, 665, 309, 297, 298, 310, 727, 311,
	703, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	704, 316, 317, 673, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 705, 706, 0,
	0, 329, 330, 674, 675, 646, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 666, 339, 0, 405,
	340, 341, 342, 406, 707, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 1563, 348, 620, 1559, 0,
	1562, 640, 641, 638, 639, 630, 0, 618, 0, 0,
	0, 0, 616, 617, 0, 0, 186, 187, 0, 188,
	0, 626, 0, 0, 668, 633, 0, 629, 0, 189,
	190, 191, 350, 683, 352, 684, 192, 685, 686, 0,
	193, 356, 357, 194, 195, 636, 667, 687, 688, 360,
	0, 196, 679, 0, 659, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	713, 207, 208, 209, 0, 660, 661, 663, 0, 662,
	664, 210, 211, 415, 212, 689, 1565, 690, 691, 0,
	214, 0, 215, 0, 216, 0, 0, 682, 218, 0,
	219, 0, 0, 0, 624, 220, 222, 221, 223, 669,
	670, 647, 714, 0, 0, 0, 0, 0, 224, 225,
	692, 693, 694, 0, 226, 0, 227, 0, 0, 715,
	0, 228, 680, 0, 372, 0, 0, 229, 1566, 0,
	0, 231, 232, 676, 678, 717, 0, 375, 236, 0,
	233, 0, 716, 234, 695, 235, 696, 697, 698, 699,
	700, 0, 658, 0, 718, 237, 238, 239, 719, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 681, 720,
	245, 246, 721, 0, 247, 248, 0, 0, 249, 0,
	250, 722, 1567, 1564, 254, 386, 253, 723, 255, 256,
	258, 257, 619, 0, 648, 677, 259, 701, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 724,
	265, 725, 671, 266, 267, 268, 269, 270, 0, 271,
	672, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	702, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 726,
	294, 295, 625, 296, 0, 300, 301, 302, 303, 1568,
	0, 306, 395, 305, 307, 308, 665, 309, 297, 298,
	310, 727, 311, 703, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 704, 316, 317, 673, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	705, 706, 0, 0, 329, 330, 674, 675, 646, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 666,
	339, 0, 405, 340, 341, 342, 406, 707, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 1563, 348,
	620, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	618, 0, 0, 0, 0, 616, 617, 0, 186, 187,
	0, 188, 0, 0, 626, 0, 668, 633, 0, 0,
	629, 189, 190, 191, 350, 683, 352, 684, 192, 685,
	686, 0, 193, 356, 357, 194, 195, 636, 667, 687,
	688, 360, 0, 196, 679, 0, 659, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 713, 207, 208, 209, 0, 660, 661, 663,
	0, 662, 664, 210, 211, 415, 212, 689, 213, 690,
	691, 0, 214, 0, 215, 0, 216, 0, 0, 682,
	218, 0, 219, 0, 0, 0, 624, 220, 222, 221,
	223, 669, 670, 647, 714, 0, 0, 0, 0, 0,
	224, 225, 692, 693, 694, 0, 226, 0, 227, 0,
	0, 715, 0, 228, 680, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 676, 678, 717, 0, 375,
	236, 0, 233, 0, 716, 234, 695, 235, 696, 697,
	698, 699, 700, 0, 658, 0, 718, 237, 238, 239,
	719, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	681, 720, 245, 246, 721, 0, 247, 248, 0, 0,
	249, 0, 250, 722, 251, 252, 254, 386, 253, 723,
	255, 256, 258, 257, 619, 0, 648, 677, 259, 701,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 724, 265, 725, 671, 266, 267, 268, 269, 270,
	0, 271, 672, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 702, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 726, 294, 295, 625, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 665, 309,
	297, 298, 310, 727, 311, 703, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 704, 316, 317, 673, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 705, 706, 0, 0, 329, 330, 674, 675,
	646, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 666, 339, 0, 405, 340, 341, 342, 406, 707,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 620, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 618, 0, 0, 0, 0, 616, 617, 0,
	186, 187, 1425, 188, 1133, 0, 626, 0, 668, 633,
	0, 0, 629, 189, 190, 191, 350, 683, 352, 684,
	192, 685, 686, 0, 193, 356, 357, 194, 195, 636,
	667, 687, 688, 360, 0, 196, 679, 0, 659, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 713, 207, 208, 209, 0, 660,
	661, 663, 0, 662, 664, 210, 211, 415, 212, 689,
	213, 690, 691, 0, 214, 0, 215, 0, 216, 0,
	0, 682, 218, 0, 219, 0, 0, 0, 624, 220,
	222, 221, 223, 669, 670, 647, 714, 0, 0, 0,
	0, 0, 224, 225, 692, 693, 694, 0, 226, 0,
	227, 0, 0, 715, 0, 228, 680, 0, 372, 0,
	0, 229, 230, 0, 0, 231, 232, 676, 678, 717,
	0, 375, 236, 0, 233, 0, 716, 234, 695, 235,
	696, 697, 698, 699, 700, 0, 658, 0, 718, 237,
	238, 239, 719, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 681, 720, 245, 246, 721, 0, 247, 248,
	0, 0, 249, 0, 250, 722, 251, 252, 254, 386,
	253, 723, 255, 256, 258, 257, 619, 0, 648, 677,
	259, 701, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 724, 265, 725, 671, 266, 267, 268,
	269, 270, 0, 271, 672, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 702, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 726, 294, 295, 625, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	665, 309, 297, 298, 310, 727, 311, 703, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 704, 316, 317,
	673, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 705, 706, 0, 0, 329, 330,
	674, 675, 646, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 666, 339, 0, 405, 340, 341, 342,
	406, 707, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 620, 882, 0, 651, 640, 641,
	638, 639, 630, 0, 618, 0, 0, 0, 0, 616,
	617, 0, 0, 186, 187, 0, 188, 0, 626, 0,
	0, 668, 633, 0, 629, 0, 189, 190, 191, 350,
	683, 352, 684, 192, 685, 686, 0, 193, 356, 357,
	194, 195, 636, 667, 687, 688, 360, 0, 196, 679,
	0, 659, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 713, 207, 208,
	209, 0, 660, 661, 663, 0, 662, 664, 210, 211,
	415, 212, 689, 213, 690, 691, 0, 214, 0, 215,
	0, 216, 0, 0, 682, 218, 0, 219, 0, 0,
	0, 624, 220, 222, 221, 223, 669, 670, 647, 714,
	0, 0, 0, 0, 0, 224, 225, 692, 693, 694,
	0, 226, 0, 227, 0, 0, 715, 0, 228, 680,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	676, 678, 717, 0, 375, 236, 0, 233, 0, 716,
	234, 695, 235, 696, 697, 698, 699, 700, 0, 658,
	0, 718, 237, 238, 239, 719, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 681, 720, 245, 246, 721,
	0, 247, 248, 0, 0, 249, 0, 250, 722, 251,
	252, 254, 386, 253, 723, 255, 256, 258, 257, 619,
	0, 648, 677, 259, 701, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 724, 265, 725, 671,
	266, 267, 268, 269, 270, 0, 271, 672, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 702, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 726, 294, 295, 625,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 665, 309, 297, 298, 310, 727, 311,
	703, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	704, 316, 317, 673, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 705, 706, 0,
	0, 329, 330, 674, 675, 646, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 666, 339, 0, 405,
	340, 341, 342, 406, 707, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 620, 880, 0,
	651, 640, 641, 638, 639, 630, 0, 618, 0, 0,
	0, 0, 616, 617, 0, 0, 186, 187, 0, 188,
	0, 626, 0, 0, 668, 633, 0, 629, 0, 189,
	190, 191, 350, 683, 352, 684, 192, 685, 686, 0,
	193, 356, 357, 194, 195, 636, 667, 687, 688, 360,
	0, 196, 679, 0, 659, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	713, 207, 208, 209, 0, 660, 661, 663, 0, 662,
	664, 210, 211, 415, 212, 689, 213, 690, 691, 0,
	214, 0, 215, 0, 216, 0, 0, 682, 218, 0,
	219, 0, 0, 0, 624, 220, 222, 221, 223, 669,
	670, 647, 714, 0, 0, 0, 0, 0, 224, 225,
	692, 693, 694, 0, 226, 0, 227, 0, 0, 715,
	0, 228, 680, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 676, 678, 717, 0, 375, 236, 0,
	233, 0, 716, 234, 695, 235, 696, 697, 698, 699,
	700, 0, 658, 0, 718, 237, 238, 239, 719, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 681, 720,
	245, 246, 721, 0, 247, 248, 0, 0, 249, 0,
	250, 722, 251, 252, 254, 386, 253, 723, 255, 256,
	258, 257, 619, 0, 648, 677, 259, 701, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 724,
	265, 725, 671, 266, 267, 268, 269, 270, 0, 271,
	672, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	702, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 726,
	294, 295, 625, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 665, 309, 297, 298,
	310, 727, 311, 703, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 704, 316, 317, 673, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	705, 706, 0, 0, 329, 330, 674, 675, 646, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 666,
	339, 0, 405, 340, 341, 342, 406, 707, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	620, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	618, 0, 0, 0, 0, 616, 617, 0, 186, 187,
	0, 188, 0, 0, 626, 0, 668, 633, 0, 0,
	629, 189, 190, 191, 350, 683, 352, 684, 192, 685,
	686, 0, 193, 356, 357, 194, 195, 636, 667, 687,
	688, 360, 0, 196, 679, 0, 659, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 713, 207, 208, 2538, 0, 660, 661, 663,
	0, 662, 664, 210, 211, 415, 212, 689, 213, 690,
	691, 0, 214, 0, 215, 0, 216, 0, 0, 682,
	218, 0, 219, 0, 0, 0, 624, 220, 222, 221,
	223, 669, 670, 647, 714, 0, 0, 0, 0, 0,
	224, 225, 692, 693, 694, 0, 226, 0, 227, 0,
	0, 715, 0, 228, 680, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 676, 678, 717, 0, 375,
	236, 0, 233, 0, 716, 234, 695, 235, 696, 697,
	698, 699, 700, 0, 658, 0, 718, 237, 238, 239,
	719, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	681, 720, 245, 246, 721, 0, 247, 248, 0, 0,
	249, 0, 250, 722, 251, 252, 254, 386, 253, 723,
	255, 256, 258, 257, 619, 0, 648, 677, 259, 701,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 724, 265, 725, 671, 266, 267, 268, 269, 270,
	0, 271, 672, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 702, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 726, 294, 295, 625, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 665, 309,
	297, 298, 310, 727, 311, 703, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 704, 316, 317, 673, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 705, 706, 0, 0, 329, 330, 674, 675,
	646, 331, 332, 2537, 334, 0, 0, 335, 336, 337,
	338, 666, 339, 0, 405, 340, 341, 342, 406, 707,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 620, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 618, 0, 0, 0, 0, 616, 617, 0,
	186, 187, 0, 188, 0, 0, 626, 0, 668, 633,
	0, 0, 629, 189, 190, 191, 350, 683, 352, 684,
	192, 685, 686, 0, 193, 356, 357, 194, 195, 636,
	667, 687, 688, 360, 0, 196, 679, 0, 659, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 713, 207, 208, 209, 0, 660,
	661, 663, 0, 662, 664, 210, 211, 415, 212, 689,
	213, 690, 691, 0, 214, 0, 215, 0, 216, 0,
	0, 682, 218, 0, 219, 0, 0, 0, 624, 220,
	222, 221, 223, 669, 670, 647, 714, 0, 0, 0,
	0, 0, 224, 225, 692, 693, 694, 0, 226, 0,
	227, 0, 0, 715, 0, 228, 680, 0, 372, 0,
	0, 229, 230, 0, 0, 231, 232, 676, 678, 717,
	0, 375, 236, 0, 233, 0, 716, 234, 695, 235,
	696, 697, 698, 699, 700, 0, 658, 0, 718, 237,
	238, 239, 719, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 681, 720, 245, 246, 721, 0, 247, 248,
	0, 0, 249, 0, 250, 722, 251, 252, 254, 386,
	253, 723, 255, 256, 258, 257, 619, 0, 648, 677,
	259, 701, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 724, 265, 725, 671, 266, 267, 268,
	269, 270, 0, 271, 672, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 702, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 726, 294, 295, 625, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	665, 309, 297, 298, 310, 727, 311, 703, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 704, 316, 317,
	673, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 705, 706, 0, 0, 329, 330,
	674, 675, 646, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 666, 339, 0, 405, 340, 341, 342,
	406, 707, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 620, 0, 651, 640, 641, 638,
	639, 630, 0, 0, 618, 0, 0, 0, 0, 616,
	617, 0, 186, 187, 0, 188, 0, 0, 626, 0,
	668, 633, 0, 0, 629, 189, 190, 191, 2536, 683,
	352, 684, 192, 685, 686, 0, 193, 356, 357, 194,
	195, 636, 667, 687, 688, 360, 0, 196, 679, 0,
	659, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 713, 207, 208, 2538,
	0, 660, 661, 663, 0, 662, 664, 210, 211, 415,
	212, 689, 213, 690, 691, 0, 214, 0, 215, 0,
	216, 0, 0, 682, 218, 0, 219, 0, 0, 0,
	624, 220, 222, 221, 223, 669, 670, 647, 714, 0,
	0, 0, 0, 0, 224, 225, 692, 693, 694, 0,
	226, 0, 227, 0, 0, 715, 0, 228, 680, 0,
	372, 0, 0, 229, 230, 0, 0, 231, 232, 676,
	678, 717, 0, 375, 236, 0, 233, 0, 716, 234,
	695, 235, 696, 697, 698, 699, 700, 0, 658, 0,
	718, 237, 238, 239, 719, 383, 384, 240, 241, 242,
	0, 244, 243, 0, 681, 720, 245, 246, 721, 0,
	247, 248, 0, 0, 249, 0, 250, 722, 251, 252,
	254, 386, 253, 723, 255, 256, 258, 257, 619, 0,
	648, 677, 259, 701, 260, 261, 0, 262, 0, 0,
	263, 0, 0, 264, 389, 724, 265, 725, 671, 266,
	267, 268, 269, 270, 0, 271, 672, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 702, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 726, 294, 295, 625, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 665, 309, 297, 298, 310, 727, 311, 703,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 704,
	316, 317, 673, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 705, 706, 0, 0,
	329, 330, 674, 675, 646, 331, 332, 2537, 334, 0,
	0, 335, 336, 337, 338, 666, 339, 0, 405, 340,
	341, 342, 406, 707, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 620, 0, 651, 640,
	641, 638, 639, 630, 0, 0, 618, 0, 0, 0,
	0, 616, 617, 0, 186, 187, 0, 188, 0, 0,
	626, 0, 668, 633, 0, 0, 629, 189, 190, 191,
	350, 683, 352, 684, 192, 685, 686, 0, 193, 356,
	357, 194, 195, 636, 667, 687, 688, 360, 0, 196,
	679, 0, 659, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 713, 207,
	208, 209, 0, 660, 661, 663, 0, 662, 664, 210,
	211, 415, 212, 689, 213, 690, 691, 0, 214, 0,
	215, 0, 216, 0, 0, 682, 218, 0, 219, 0,
	0, 0, 624, 220, 222, 221, 223, 669, 670, 647,
	714, 0, 0, 0, 0, 0, 224, 225, 692, 693,
	694, 0, 226, 0, 227, 0, 0, 715, 0, 228,
	680, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 676, 678, 717, 0, 375, 236, 0, 233, 0,
	716, 234, 695, 235, 696, 697, 698, 699, 700, 0,
	658, 0, 718, 237, 238, 239, 719, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 681, 720, 245, 246,
	721, 0, 247, 248, 0, 0, 249, 0, 250, 722,
	251, 252, 254, 386, 253, 723, 255, 256, 258, 257,
	0, 0, 648, 677, 259, 701, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 724, 265, 725,
	671, 266, 267, 268, 269, 270, 0, 271, 672, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 702, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 726, 294, 295,
	1582, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 665, 309, 297, 298, 310, 727,
	311, 703, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 704, 316, 317, 673, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 705, 706,
	0, 0, 329, 330, 674, 675, 646, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 666, 339, 0,
	405, 340, 341, 342, 406, 707, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	651, 640, 641, 638, 639, 630, 0, 0, 1580, 0,
	0, 0, 0, 1578, 1579, 0, 186, 187, 0, 188,
	0, 0, 1581, 0, 668, 633, 0, 0, 629, 189,
	190, 191, 350, 683, 352, 684, 192, 685, 686, 0,
	193, 356, 357, 194, 195, 0, 667, 687, 688, 360,
	0, 196, 679, 0, 659, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	713, 207, 208, 209, 0, 660, 661, 663, 0, 662,
	664, 210, 211, 415, 212, 689, 213, 690, 691, 0,
	214, 0, 215, 0, 216, 0, 0, 682, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 669,
	670, 647, 714, 0, 0, 0, 0, 0, 224, 225,
	692, 693, 694, 0, 226, 0, 227, 0, 0, 715,
	0, 228, 680, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 676, 678, 717, 0, 375, 236, 0,
	233, 0, 716, 234, 695, 235, 696, 697, 698, 699,
	700, 0, 658, 0, 718, 237, 238, 239, 719, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 681, 720,
	245, 246, 721, 0, 247, 248, 0, 0, 249, 0,
	250, 722, 251, 252, 254, 386, 253, 723, 255, 256,
	258, 257, 0, 0, 648, 677, 259, 701, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 724,
	265, 725, 671, 266, 267, 268, 269, 270, 0, 271,
	672, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	702, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 726,
	294, 295, 1582, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 665, 309, 297, 298,
	310, 727, 311, 703, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 704, 316, 317, 673, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	705, 706, 0, 0, 329, 330, 674, 675, 646, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 666,
	339, 0, 405, 340, 341, 342, 406, 707, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 188, 0, 0, 1581, 0, 668, 633, 0, 0,
	629, 189, 190, 191, 0, 683, 352, 684, 192, 685,
	686, 0, 193, 356, 357, 194, 195, 636, 667, 687,
	688, 360, 0, 196, 679, 0, 659, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 713, 207, 208, 2538, 0, 660, 661, 663,
	0, 662, 664, 210, 211, 415, 212, 689, 213, 690,
	691, 0, 214, 0, 215, 0, 216, 0, 0, 682,
	218, 0, 219, 0, 0, 0, 624, 220, 222, 221,
	223, 669, 670, 647, 714, 0, 0, 0, 0, 0,
	224, 225, 692, 693, 694, 0, 226, 0, 227, 0,
	0, 715, 0, 228, 680, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 676, 678, 0, 0, 375,
	236, 0, 233, 0, 716, 234, 695, 235, 696, 697,
	698, 699, 700, 0, 658, 0, 0, 237, 238, 239,
	719, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	681, 720, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 722, 251, 252, 254, 386, 253, 723,
	255, 256, 258, 257, 619, 0, 648, 677, 259, 701,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 724, 265, 725, 671, 266, 267, 268, 269, 270,
	0, 271, 672, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 702, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 726, 294, 295, 625, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 665, 309,
	297, 298, 310, 0, 311, 703, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 704, 316, 317, 673, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 705, 706, 0, 0, 329, 330, 674, 675,
	646, 331, 332, 2537, 334, 0, 0, 335, 336, 337,
	338, 666, 339, 0, 405, 340, 341, 342, 406, 707,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 616, 617, 0,
	186, 187, 0, 188, 0, 0, 626, 0, 668, 0,
	0, 0, 629, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	667, 358, 359, 360, 0, 196, 679, 0, 659, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 713, 207, 208, 209, 0, 660,
	661, 663, 0, 662, 664, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 669, 670, 0, 714, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 715, 0, 228, 680, 0, 372, 0,
	0, 229, 230, 0, 0, 231, 232, 676, 678, 717,
	0, 375, 236, 0, 233, 0, 716, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 718, 237,
	238, 239, 719, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 681, 720, 245, 246, 721, 0, 247, 248,
	0, 0, 249, 0, 250, 722, 251, 252, 254, 386,
	253, 723, 255, 256, 258, 257, 0, 0, 0, 677,
	259, 388, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 724, 265, 725, 671, 266, 267, 268,
	269, 270, 0, 271, 672, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 726, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	665, 309, 297, 298, 310, 727, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	673, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	674, 675, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 666, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 941, 0, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 0, 188, 0, 0, 2168, 0,
	349, 0, 0, 0, 0, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	789, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 713, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 714, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 715, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 0, 0, 231, 232, 373,
	374, 717, 0, 375, 236, 0, 233, 0, 716, 234,
	376, 235, 377, 378, 379, 380, 381, 0, 382, 0,
	718, 237, 238, 239, 719, 383, 384, 240, 241, 242,
	0, 244, 243, 0, 385, 720, 245, 246, 721, 0,
	247, 248, 0, 0, 249, 0, 250, 722, 251, 252,
	254, 386, 253, 723, 255, 256, 258, 257, 0, 0,
	0, 387, 259, 388, 260, 261, 0, 262, 0, 0,
	263, 0, 0, 264, 389, 724, 265, 725, 390, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 726, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 142, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 727, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 144, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 944, 407, 0, 0, 343, 0, 0, 0,
	136, 344, 345, 346, 347, 348, 602, 137, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 188, 0, 0,
	128, 0, 349, 0, 0, 0, 0, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 0, 193, 356,
	357, 194, 195, 0, 0, 358, 359, 360, 0, 196,
	361, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 415, 212, 362, 213, 363, 364, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 365, 220, 222, 221, 223, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	371, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 767, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 142, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 144, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 944, 407, 0, 0, 343, 0,
	0, 0, 136, 344, 345, 346, 347, 348, 0, 137,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 188,
	761, 0, 1212, 0, 349, 0, 0, 0, 0, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 360,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 373, 374, 0, 0, 375, 236, 0,
	233, 0, 0, 234, 376, 235, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 237, 238, 239, 0, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 385, 0,
	245, 246, 0, 0, 247, 248, 0, 0, 249, 0,
	250, 0, 251, 252, 254, 386, 253, 0, 255, 256,
	258, 257, 0, 0, 0, 387, 259, 388, 260, 261,
	0, 262, 0, 767, 263, 0, 0, 264, 389, 0,
	265, 0, 390, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	142, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 144,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 944, 407, 0, 0,
	343, 0, 0, 0, 136, 344, 345, 346, 347, 348,
	602, 137, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 188, 761, 0, 1212, 0, 349, 0, 0, 0,
	0, 189, 190, 191, 350, 351, 352, 353, 192, 354,
	355, 0, 193, 356, 357, 194, 195, 0, 0, 358,
	359, 360, 0, 196, 361, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 415, 212, 362, 213, 363,
	364, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 365, 220, 222, 221,
	223, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 368, 369, 370, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 371, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 373, 374, 0, 0, 375,
	236, 0, 233, 0, 0, 234, 376, 235, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 237, 238, 239,
	0, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	385, 0, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 0, 251, 252, 254, 386, 253, 0,
	255, 256, 258, 257, 0, 0, 0, 387, 259, 388,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 0, 265, 0, 390, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 142, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 144, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 944, 407,
	0, 0, 343, 0, 0, 0, 136, 344, 345, 346,
	347, 348, 1912, 137, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 188, 0, 0, 128, 0, 349, 0,
	0, 0, 0, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	0, 358, 359, 360, 0, 196, 361, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 371, 0, 372, 0,
	0, 229, 230, 0, 0, 231, 232, 373, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 767, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 760, 0, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 0, 188, 761, 0, 766, 0,
	349, 0, 0, 0, 0, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 0, 0, 231, 232, 373,
	374, 0, 0, 375, 236, 0, 233, 0, 0, 234,
	376, 235, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 237, 238, 239, 0, 383, 384, 240, 241, 242,
	0, 244, 243, 0, 385, 0, 245, 246, 0, 0,
	247, 248, 0, 0, 249, 0, 250, 0, 251, 252,
	254, 386, 253, 0, 255, 256, 258, 257, 0, 0,
	0, 387, 259, 388, 260, 261, 0, 262, 0, 767,
	263, 0, 0, 264, 389, 0, 265, 0, 390, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 187, 0, 188, 0, 761, 0,
	766, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	767, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 188, 0, 761,
	0, 766, 349, 0, 0, 0, 0, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 0, 193, 356,
	357, 194, 195, 0, 0, 358, 359, 360, 0, 196,
	361, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 415, 212, 362, 213, 363, 364, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 365, 220, 222, 221, 223, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	371, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 188, 0, 0,
	0, 0, 349, 1245, 0, 0, 0, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 0, 193, 356,
	357, 194, 195, 0, 0, 358, 359, 360, 0, 196,
	361, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 415, 212, 362, 213, 363, 364, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 365, 220, 222, 221, 223, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	371, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 188, 0,
	0, 0, 1724, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 188,
	0, 0, 0, 2084, 349, 0, 0, 0, 0, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 360,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 373, 374, 0, 0, 375, 236, 0,
	233, 0, 0, 234, 376, 235, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 237, 238, 239, 0, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 385, 0,
	245, 246, 0, 0, 247, 248, 0, 0, 249, 0,
	250, 0, 251, 252, 254, 386, 253, 0, 255, 256,
	258, 257, 0, 0, 0, 387, 259, 388, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 0,
	265, 0, 390, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 651, 640, 641, 638, 639, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 187, 0,
	188, 0, 0, 0, 1215, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 683, 352, 684, 192, 685, 686,
	0, 193, 356, 357, 194, 195, 0, 0, 687, 688,
	360, 0, 196, 361, 0, 789, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 713, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 689, 213, 690, 691,
	0, 214, 0, 215, 0, 216, 0, 0, 682, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 647, 714, 0, 0, 0, 0, 0, 224,
	225, 692, 693, 694, 0, 226, 0, 227, 0, 0,
	715, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 373, 374, 717, 0, 375, 236,
	0, 233, 0, 716, 234, 695, 235, 696, 697, 698,
	699, 700, 0, 658, 0, 718, 237, 238, 239, 719,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	720, 245, 246, 721, 0, 247, 248, 0, 0, 249,
	0, 250, 722, 251, 252, 254, 386, 253, 723, 255,
	256, 258, 257, 0, 0, 648, 387, 259, 701, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	724, 265, 725, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 702, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	726, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 727, 311, 703, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 704, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 705, 706, 0, 0, 329, 330, 403, 404, 646,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 707, 0,
	496, 343, 183, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 188, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 189, 190, 191, 350, 351, 352, 353, 192, 354,
	355, 0, 193, 356, 357, 194, 195, 0, 0, 358,
	359, 360, 0, 196, 361, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 179, 212, 362, 213, 363,
	364, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 365, 220, 222, 221,
	223, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 368, 369, 370, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 371, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 373, 374, 0, 0, 375,
	236, 0, 233, 0, 0, 234, 376, 235, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 237, 238, 239,
	0, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	385, 0, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 0, 251, 252, 254, 386, 253, 0,
	255, 256, 258, 257, 0, 0, 0, 387, 259, 388,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 0, 265, 0, 390, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 178, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 176, 343, 183, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 0, 188, 0, 0, 0, 0, 349, 0, 182,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 179, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 373, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 178, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 183, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 186, 187,
	0, 188, 0, 0, 0, 0, 349, 0, 0, 0,
	182, 189, 190, 191, 350, 351, 352, 353, 192, 354,
	355, 0, 193, 356, 357, 194, 195, 0, 0, 358,
	359, 360, 0, 196, 361, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 179, 212, 362, 213, 363,
	364, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 365, 220, 222, 221,
	223, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 368, 369, 370, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 371, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 373, 374, 0, 0, 375,
	236, 0, 233, 0, 0, 234, 376, 235, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 237, 238, 239,
	0, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	385, 0, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 0, 251, 252, 254, 386, 253, 0,
	255, 256, 258, 257, 0, 0, 0, 387, 259, 388,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 0, 265, 0, 390, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 178, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 183, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 186, 187, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 182,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 996, 0, 899, 898, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 186,
	187, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 789, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 713, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 714, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 715, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 373, 374, 717, 0,
	375, 236, 0, 233, 0, 716, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 718, 237, 238,
	239, 719, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 720, 245, 246, 721, 0, 247, 248, 0,
	0, 249, 0, 250, 722, 251, 252, 254, 386, 253,
	723, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 724, 265, 725, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 726, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 727, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 936, 0, 899, 898, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 789,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 713, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 714, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 715, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 935, 374,
	717, 0, 375, 236, 0, 233, 0, 716, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 718,
	237, 238, 239, 719, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 720, 245, 246, 721, 0, 247,
	248, 0, 0, 249, 0, 250, 722, 251, 252, 254,
	386, 253, 723, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 724, 265, 725, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 726, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 727, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 894, 0, 899, 898, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 187, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 789, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 713, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 714,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 715, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	893, 374, 717, 0, 375, 236, 0, 233, 0, 716,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 718, 237, 238, 239, 719, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 720, 245, 246, 721,
	0, 247, 248, 0, 0, 249, 0, 250, 722, 251,
	252, 254, 386, 253, 723, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 724, 265, 725, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 726, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 727, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 899, 898, 343, 0, 0,
	896, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 186, 187, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 789,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 713, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 714, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 715, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 373, 374,
	717, 0, 375, 236, 0, 233, 0, 716, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 718,
	237, 238, 239, 719, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 720, 245, 246, 721, 0, 247,
	248, 0, 0, 249, 0, 250, 722, 251, 252, 254,
	386, 253, 723, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 724, 265, 725, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 726, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 727, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 899, 898, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 186,
	187, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 789, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 713, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 714, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 715, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 373, 374, 717, 0,
	375, 236, 0, 233, 0, 716, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 718, 237, 238,
	239, 719, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 720, 245, 246, 721, 0, 247, 248, 0,
	0, 249, 0, 250, 722, 251, 252, 254, 386, 253,
	723, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 724, 265, 725, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 726, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 727, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 899, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 186, 187, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 789, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 713, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 714, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	715, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 373, 374, 717, 0, 375, 236,
	0, 233, 0, 716, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 718, 237, 238, 239, 719,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	720, 245, 246, 721, 0, 247, 248, 0, 0, 249,
	0, 250, 722, 251, 252, 254, 386, 253, 723, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	724, 265, 725, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	726, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 727, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 183,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 186, 187, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 1658,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 1656, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 1700, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 1661, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 373, 374, 0, 0, 375, 236, 1698, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 1660, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 1699, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 183, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 186, 187, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 1658, 196, 361,
	0, 0, 1653, 197, 198, 199, 0, 201, 202, 203,
	200, 1656, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 1661, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	1652, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 1660, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 1659, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 918, 343, 183, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 188, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 0, 193, 356,
	357, 194, 195, 0, 0, 358, 359, 360, 0, 196,
	361, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 415, 212, 362, 213, 363, 364, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 365, 220, 222, 221, 223, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	371, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 767, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 773, 343, 183,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 775, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 767, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 769, 343,
	183, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 188,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 360,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 771, 374, 0, 0, 375, 236, 0,
	233, 0, 0, 234, 376, 235, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 237, 238, 239, 0, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 385, 0,
	245, 246, 0, 0, 247, 248, 0, 0, 249, 0,
	250, 0, 251, 252, 254, 386, 253, 0, 255, 256,
	258, 257, 0, 0, 0, 387, 259, 388, 260, 261,
	0, 262, 0, 767, 263, 0, 0, 264, 389, 0,
	265, 0, 390, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 427,
	343, 183, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 186, 187, 426,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 425, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 183,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 186, 187, 0, 188, 0,
	0, 0, 0, 349, 0, 1641, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 183, 2235, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 186, 187, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 183, 2235, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 186, 187, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 373, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 2232,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 183, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 186,
	187, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 373, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 767, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 1404, 343, 183, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 188, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	0, 358, 359, 360, 0, 196, 361, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 371, 0, 372, 0,
	0, 229, 230, 0, 0, 231, 232, 373, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 1402, 343, 183, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 373, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 183, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 186,
	187, 1384, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 373, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 522, 343, 183, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 188, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	0, 358, 359, 975, 0, 196, 361, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 371, 0, 372, 0,
	0, 229, 230, 0, 0, 231, 232, 373, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	524, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 519, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 1260, 343, 183, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 1259, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 522, 343, 183, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 0, 188, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 975, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 0, 0, 231, 232, 373,
	374, 0, 0, 375, 236, 0, 233, 0, 0, 234,
	376, 235, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 237, 238, 239, 0, 383, 384, 240, 241, 242,
	0, 244, 243, 0, 385, 0, 245, 246, 0, 0,
	247, 248, 0, 0, 249, 0, 250, 0, 251, 252,
	254, 386, 524, 0, 255, 256, 258, 257, 0, 0,
	0, 387, 259, 388, 260, 261, 0, 262, 0, 0,
	263, 0, 0, 264, 389, 0, 265, 0, 390, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 519, 401, 402, 0, 0,
	329, 976, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 522, 343, 183, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 186, 187, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 513, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 524, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 959, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 519, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 933, 343, 183, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 188, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 0, 193, 356,
	357, 194, 195, 0, 0, 358, 359, 360, 0, 196,
	361, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 415, 212, 362, 213, 363, 364, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 365, 220, 222, 221, 223, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	371, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 932, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 929, 343, 183,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 928, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 926, 343,
	183, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 188,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 360,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 925, 374, 0, 0, 375, 236, 0,
	233, 0, 0, 234, 376, 235, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 237, 238, 239, 0, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 385, 0,
	245, 246, 0, 0, 247, 248, 0, 0, 249, 0,
	250, 0, 251, 252, 254, 386, 253, 0, 255, 256,
	258, 257, 0, 0, 0, 387, 259, 388, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 0,
	265, 0, 390, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 922,
	343, 183, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 186, 187, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 921, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 183,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 186, 187, 910, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 908, 343,
	183, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 186, 187, 0, 188,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 189,
	190, 191, 350, 351, 352, 353, 192, 354, 355, 0,
	193, 356, 357, 194, 195, 0, 0, 358, 359, 360,
	0, 196, 361, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 415, 212, 362, 213, 363, 364, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 365, 220, 222, 221, 223, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	368, 369, 370, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 371, 0, 372, 0, 0, 229, 230, 0,
	0, 231, 232, 907, 374, 0, 0, 375, 236, 0,
	233, 0, 0, 234, 376, 235, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 237, 238, 239, 0, 383,
	384, 240, 241, 242, 0, 244, 243, 0, 385, 0,
	245, 246, 0, 0, 247, 248, 0, 0, 249, 0,
	250, 0, 251, 252, 254, 386, 253, 0, 255, 256,
	258, 257, 0, 0, 0, 387, 259, 388, 260, 261,
	0, 262, 0, 0, 263, 0, 0, 264, 389, 0,
	265, 0, 390, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 904,
	343, 183, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 186, 187, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 373, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	889, 343, 183, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 186, 187,
	0, 188, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 189, 190, 191, 350, 351, 352, 353, 192, 354,
	355, 0, 193, 356, 357, 194, 195, 0, 0, 358,
	359, 360, 0, 196, 361, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 415, 212, 362, 213, 363,
	364, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 365, 220, 222, 221,
	223, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 368, 369, 370, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 371, 0, 372, 0, 0, 229,
	230, 0, 0, 231, 232, 891, 374, 0, 0, 375,
	236, 0, 233, 0, 0, 234, 376, 235, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 237, 238, 239,
	0, 383, 384, 240, 241, 242, 0, 244, 243, 0,
	385, 0, 245, 246, 0, 0, 247, 248, 0, 0,
	249, 0, 250, 0, 251, 252, 254, 386, 253, 0,
	255, 256, 258, 257, 0, 0, 0, 387, 259, 388,
	260, 261, 0, 262, 0, 0, 263, 0, 0, 264,
	389, 0, 265, 0, 390, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 779, 343, 183, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 186,
	187, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 781, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 777, 343, 183, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	186, 187, 0, 188, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 189, 190, 191, 350, 351, 352, 353,
	192, 354, 355, 0, 193, 356, 357, 194, 195, 0,
	0, 358, 359, 360, 0, 196, 361, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 415, 212, 362,
	213, 363, 364, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 365, 220,
	222, 221, 223, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 368, 369, 370, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 371, 0, 372, 0,
	0, 229, 230, 0, 0, 231, 232, 373, 374, 0,
	0, 375, 236, 0, 233, 0, 0, 234, 376, 235,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 237,
	238, 239, 0, 383, 384, 240, 241, 242, 0, 244,
	243, 0, 385, 0, 245, 246, 0, 0, 247, 248,
	0, 0, 249, 0, 250, 0, 251, 252, 254, 386,
	253, 0, 255, 256, 258, 257, 0, 0, 0, 387,
	259, 388, 260, 261, 0, 262, 0, 0, 263, 0,
	0, 264, 389, 0, 265, 0, 390, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 522, 343, 183, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 186, 187, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 513, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 373, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	512, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 524, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 514, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 515,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 519, 401, 402, 0, 0, 329,
	517, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 504, 343, 183, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 186, 187, 0, 188, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 189, 190, 191, 350, 351,
	352, 353, 192, 354, 355, 0, 193, 356, 357, 194,
	195, 0, 0, 358, 359, 360, 0, 196, 361, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 415,
	212, 362, 213, 363, 364, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	365, 220, 222, 221, 223, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 368, 369, 370, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 371, 0,
	372, 0, 0, 229, 230, 0, 0, 231, 232, 373,
	374, 0, 0, 375, 236, 0, 233, 0, 0, 234,
	376, 235, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 237, 238, 239, 0, 383, 384, 240, 241, 242,
	0, 244, 243, 0, 385, 0, 245, 246, 0, 0,
	247, 248, 0, 0, 249, 0, 250, 0, 251, 252,
	254, 386, 253, 0, 255, 256, 258, 257, 0, 0,
	0, 387, 259, 388, 260, 261, 0, 262, 0, 0,
	263, 0, 0, 264, 389, 0, 265, 0, 390, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 505, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 502, 343, 183, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 186, 187, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 494, 343, 183, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 186, 187, 0, 188, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 189, 190, 191,
	350, 351, 352, 353, 192, 354, 355, 0, 193, 356,
	357, 194, 195, 0, 0, 358, 359, 360, 0, 196,
	361, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 415, 212, 362, 213, 363, 364, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 365, 220, 222, 221, 223, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 368, 369,
	370, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	371, 0, 372, 0, 0, 229, 230, 0, 0, 231,
	232, 373, 374, 0, 0, 375, 236, 0, 233, 0,
	0, 234, 376, 235, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 237, 238, 239, 0, 383, 384, 240,
	241, 242, 0, 244, 243, 0, 385, 0, 245, 246,
	0, 0, 247, 248, 0, 0, 249, 0, 250, 0,
	251, 252, 254, 386, 253, 0, 255, 256, 258, 257,
	0, 0, 0, 387, 259, 388, 260, 261, 0, 262,
	0, 0, 263, 0, 0, 264, 389, 0, 265, 0,
	390, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 446, 343, 183,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 186, 187, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 183, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 186, 187, 0, 188, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 183, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 186, 187, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 1959, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 183, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 186,
	187, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 1957, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 183, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 186, 187, 0,
	188, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	189, 190, 191, 350, 351, 352, 353, 192, 354, 355,
	0, 193, 356, 357, 194, 195, 0, 0, 358, 359,
	360, 0, 196, 361, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 415, 212, 362, 213, 363, 364,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 365, 220, 222, 221, 223,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 368, 369, 370, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 371, 0, 372, 0, 0, 229, 230,
	0, 0, 231, 232, 1946, 374, 0, 0, 375, 236,
	0, 233, 0, 0, 234, 376, 235, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 237, 238, 239, 0,
	383, 384, 240, 241, 242, 0, 244, 243, 0, 385,
	0, 245, 246, 0, 0, 247, 248, 0, 0, 249,
	0, 250, 0, 251, 252, 254, 386, 253, 0, 255,
	256, 258, 257, 0, 0, 0, 387, 259, 388, 260,
	261, 0, 262, 0, 0, 263, 0, 0, 264, 389,
	0, 265, 0, 390, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 183,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 186, 187, 0, 188, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 189, 190,
	191, 350, 351, 352, 353, 192, 354, 355, 0, 193,
	356, 357, 194, 195, 0, 0, 358, 359, 360, 0,
	196, 361, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 415, 212, 362, 213, 363, 364, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 365, 220, 222, 221, 223, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 368,
	369, 370, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 371, 0, 372, 0, 0, 229, 230, 0, 0,
	231, 232, 373, 374, 0, 0, 375, 236, 0, 233,
	0, 0, 234, 376, 235, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 237, 238, 239, 0, 383, 384,
	240, 241, 242, 0, 244, 243, 0, 385, 0, 245,
	246, 0, 0, 247, 248, 0, 0, 249, 0, 250,
	0, 251, 252, 254, 386, 253, 0, 255, 256, 258,
	257, 0, 0, 0, 387, 259, 388, 260, 261, 0,
	262, 0, 0, 263, 0, 0, 264, 389, 0, 265,
	0, 390, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 505, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 183, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 186, 187, 0, 188, 0, 0, 0,
	0, 349, 0, 1270, 0, 0, 189, 190, 191, 350,
	351, 352, 353, 192, 354, 355, 0, 193, 356, 357,
	194, 195, 0, 0, 358, 359, 360, 0, 196, 361,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	415, 212, 362, 213, 363, 364, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 365, 220, 222, 221, 223, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 368, 369, 370,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 371,
	0, 372, 0, 0, 229, 230, 0, 0, 231, 232,
	373, 374, 0, 0, 375, 236, 0, 233, 0, 0,
	234, 376, 235, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 237, 238, 239, 0, 383, 384, 240, 241,
	242, 0, 244, 243, 0, 385, 0, 245, 246, 0,
	0, 247, 248, 0, 0, 249, 0, 250, 0, 251,
	252, 254, 386, 253, 0, 255, 256, 258, 257, 0,
	0, 0, 387, 259, 388, 260, 261, 0, 262, 0,
	0, 263, 0, 0, 264, 389, 0, 265, 0, 390,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 0, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 183, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 186, 187, 0, 188, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 189, 190, 191, 350, 351, 352,
	353, 192, 354, 355, 0, 193, 356, 357, 194, 195,
	0, 0, 358, 359, 360, 0, 196, 361, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 415, 212,
	362, 213, 363, 364, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 365,
	220, 222, 221, 223, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 368, 369, 370, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 371, 0, 372,
	0, 0, 229, 230, 0, 0, 231, 232, 373, 374,
	0, 0, 375, 236, 0, 233, 0, 0, 234, 376,
	235, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	237, 238, 239, 0, 383, 384, 240, 241, 242, 0,
	244, 243, 0, 385, 0, 245, 246, 0, 0, 247,
	248, 0, 0, 249, 0, 250, 0, 251, 252, 254,
	386, 253, 0, 255, 256, 258, 257, 0, 0, 0,
	387, 259, 388, 260, 261, 0, 262, 0, 0, 263,
	0, 0, 264, 389, 0, 265, 0, 390, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 743, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 183, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 186,
	187, 0, 188, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 189, 190, 191, 350, 351, 352, 353, 192,
	354, 355, 0, 193, 356, 357, 194, 195, 0, 0,
	358, 359, 360, 0, 196, 361, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 415, 212, 362, 213,
	363, 364, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 365, 220, 222,
	221, 223, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 368, 369, 370, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 371, 0, 372, 0, 0,
	229, 230, 0, 0, 231, 232, 373, 374, 0, 0,
	375, 236, 0, 233, 0, 0, 234, 376, 235, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 237, 238,
	239, 0, 383, 384, 240, 241, 242, 0, 244, 243,
	0, 385, 0, 245, 246, 0, 0, 247, 248, 0,
	0, 249, 0, 250, 0, 251, 252, 254, 386, 253,
	0, 255, 256, 258, 257, 0, 0, 0, 387, 259,
	388, 260, 261, 0, 262, 0, 0, 263, 0, 0,
	264, 389, 0, 265, 0, 390, 266, 267, 0, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 0, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 0, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 1066, 1067, 0, 1096, 1097, 1098, 1106,
	1107, 1108, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 1067,
	0, 1096, 1097, 1098, 1106, 1107, 1108, 0, 0, 0,
	1068, 0, 0, 0, 1099, 0, 1088, 0, 0, 0,
	0, 1069, 0, 1085, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 1092, 1093, 1094, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1854, 1855, 0, 1872, 1873,
	1874, 0, 1103, 1111, 0, 0, 1091, 1092, 1093, 1094,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 1109, 0, 0, 0, 0, 1066, 1067, 0, 1096,
	1097, 1098, 1106, 1107, 1108, 0, 0, 1103, 1111, 1101,
	0, 0, 1099, 0, 0, 0, 1089, 0, 1869, 1069,
	0, 0, 1110, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 1068, 1101, 0, 0, 0, 0, 1088,
	0, 1089, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 1100, 0, 0,
	0, 0, 1860, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 1092, 1093, 1094, 1104, 0,
	0, 1095, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 1111, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 1870, 0,
	0, 0, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 1102, 0, 1089,
	1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105, 0, 1079,
	1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076, 0, 0,
	0, 0, 0, 0, 0, 1100, 1896, 0, 0, 0,
	0, 0, 1102, 0, 0, 1080, 1081, 1087, 1086, 1082,
	1083, 1084, 1105, 1871, 1079, 1077, 1078, 1070, 1071, 1072,
	1073, 1075, 1076, 0, 0, 0, 0, 0, 0, 1095,
	0, 1895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 1066, 1067, 0, 1096,
	1097, 1098, 1106, 1107, 1108, 0, 0, 0, 0, 0,
	0, 1104, 1099, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 1088,
	0, 0, 1866, 1867, 1868, 0, 1085, 0, 0, 0,
	0, 1865, 1863, 1864, 1856, 1857, 1858, 1859, 1861, 1862,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084,
	1105, 0, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075,
	1076, 0, 0, 0, 1091, 1092, 1093, 1094, 0, 1894,
	0, 0, 0, 1074, 0, 0, 0, 0, 1066, 1067,
	0, 1096, 1097, 1098, 1106, 1107, 1108, 0, 0, 0,
	0, 0, 0, 0, 1099, 1103, 1111, 0, 0, 0,
	0, 1069, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 1088, 1101, 0, 0, 0, 0, 0, 1085, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 1092, 1093, 1094,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 1103, 1111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 1109, 1066, 1067, 0,
	1096, 1097, 1098, 1106, 1107, 1108, 0, 0, 0, 0,
	0, 0, 0, 1099, 1101, 0, 0, 0, 0, 0,
	1069, 1089, 0, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 1067, 0, 1096, 1097,
	1098, 1106, 1107, 1108, 1068, 0, 0, 1100, 0, 0,
	1088, 1099, 0, 0, 0, 0, 0, 1085, 1069, 0,
	1102, 1110, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084,
	1105, 0, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075,
	1076, 1095, 1068, 0, 0, 0, 0, 0, 1088, 1846,
	0, 0, 0, 0, 0, 1085, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1092, 1093, 1094, 0,
	0, 0, 0, 1104, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 1111, 0, 0,
	0, 0, 0, 1091, 1092, 1093, 1094, 0, 0, 0,
	0, 0, 1074, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1103, 1111, 0, 0, 0, 0,
	1089, 0, 1102, 0, 0, 1080, 1081, 1087, 1086, 1082,
	1083, 1084, 1105, 1109, 1079, 1077, 1078, 1070, 1071, 1072,
	1073, 1075, 1076, 0, 0, 0, 1100, 2507, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 1066, 1067, 0, 1096, 1097, 1098, 1106, 1107, 1108,
	0, 0, 1104, 0, 0, 0, 0, 1099, 1095, 0,
	0, 0, 0, 0, 1069, 0, 0, 1110, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	1104, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 1080, 1081, 1087, 1086, 1082, 1083,
	1084, 1105, 0, 1079, 1077, 1078, 1070, 1071, 1072, 1073,
	1075, 1076, 0, 0, 0, 0, 2458, 0, 0, 1091,
	1092, 1093, 1094, 0, 0, 0, 0, 0, 1074, 1102,
	0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105,
	0, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076,
	1103, 1111, 0, 0, 2412, 0, 0, 1066, 1067, 0,
	1096, 1097, 1098, 1106, 1107, 1108, 0, 0, 0, 1109,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 1110, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1092, 1093, 1094, 1090,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 1067, 1104, 1096, 1097, 1098,
	1106, 1107, 1108, 0, 0, 0, 1103, 1111, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	1110, 0, 0, 0, 0, 1109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 1101, 0, 0, 0, 1088, 0, 0,
	1089, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 1080, 1081,
	1087, 1086, 1082, 1083, 1084, 1105, 1100, 1079, 1077, 1078,
	1070, 1071, 1072, 1073, 1075, 1076, 0, 0, 0, 0,
	2382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 1092, 1093, 1094, 0, 0, 0, 0,
	1095, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 1103, 1111, 0, 0, 0, 0, 0,
	1066, 1067, 1104, 1096, 1097, 1098, 1106, 1107, 1108, 0,
	0, 0, 1109, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 1110, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 1080, 1081, 1087, 1086, 1082, 1083,
	1084, 1105, 0, 1079, 1077, 1078, 1070, 1071, 1072, 1073,
	1075, 1076, 0, 0, 0, 0, 2377, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 1092,
	1093, 1094, 1090, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 1067, 1104,
	1096, 1097, 1098, 1106, 1107, 1108, 0, 0, 0, 1103,
	1111, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 1110, 0, 0, 0, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 1101, 0, 0, 0,
	1088, 0, 0, 1089, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105, 1100,
	1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076, 0,
	0, 0, 0, 2373, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1092, 1093, 1094, 0,
	0, 0, 0, 1095, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 1103, 1111, 0, 0,
	0, 0, 0, 1066, 1067, 1104, 1096, 1097, 1098, 1106,
	1107, 1108, 0, 0, 0, 1109, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 1110,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 1080, 1081, 1087,
	1086, 1082, 1083, 1084, 1105, 0, 1079, 1077, 1078, 1070,
	1071, 1072, 1073, 1075, 1076, 0, 0, 0, 0, 2311,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 1092, 1093, 1094, 1090, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 1067, 1104, 1096, 1097, 1098, 1106, 1107, 1108, 0,
	0, 0, 1103, 1111, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 1110, 0, 0, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 1101,
	0, 0, 0, 1088, 0, 0, 1089, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 1080, 1081, 1087, 1086, 1082, 1083,
	1084, 1105, 1100, 1079, 1077, 1078, 1070, 1071, 1072, 1073,
	1075, 1076, 0, 0, 0, 0, 2277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 1092,
	1093, 1094, 0, 0, 0, 0, 1095, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 1103,
	1111, 0, 0, 0, 0, 0, 1066, 1067, 1104, 1096,
	1097, 1098, 1106, 1107, 1108, 0, 0, 0, 1109, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 1110, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105, 0, 1079,
	1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076, 0, 0,
	0, 0, 2276, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 1092, 1093, 1094, 1090, 0,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 1067, 1104, 1096, 1097, 1098, 1106,
	1107, 1108, 0, 0, 0, 1103, 1111, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 1110,
	0, 0, 0, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 1101, 0, 0, 0, 1088, 0, 0, 1089,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 1080, 1081, 1087,
	1086, 1082, 1083, 1084, 1105, 1100, 1079, 1077, 1078, 1070,
	1071, 1072, 1073, 1075, 1076, 0, 0, 0, 0, 2241,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 1092, 1093, 1094, 0, 0, 0, 0, 1095,
	1074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 1103, 1111, 0, 0, 0, 0, 0, 1066,
	1067, 1104, 1096, 1097, 1098, 1106, 1107, 1108, 0, 0,
	0, 1109, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 1110, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084,
	1105, 0, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075,
	1076, 0, 0, 0, 0, 2087, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 1092, 1093,
	1094, 1090, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1066, 1067, 1104, 1096,
	1097, 1098, 1106, 1107, 1108, 0, 0, 0, 1103, 1111,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 1110, 0, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 1101, 0, 0, 0, 1088,
	0, 0, 1089, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105, 1100, 1079,
	1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076, 0, 0,
	0, 0, 2063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 1092, 1093, 1094, 0, 0,
	0, 0, 1095, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 1103, 1111, 0, 0, 0,
	0, 0, 1066, 1067, 1104, 1096, 1097, 1098, 1106, 1107,
	1108, 0, 0, 0, 1109, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 1110, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 1080, 1081, 1087, 1086,
	1082, 1083, 1084, 1105, 0, 1079, 1077, 1078, 1070, 1071,
	1072, 1073, 1075, 1076, 0, 0, 0, 0, 1520, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 1092, 1093, 1094, 1090, 0, 0, 0, 0, 1074,
	2570, 0, 0, 0, 0, 0, 0, 0, 0, 1066,
	1067, 1104, 1096, 1097, 1098, 1106, 1107, 1108, 0, 0,
	0, 1103, 1111, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 1110, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 0, 1101, 0,
	0, 0, 1088, 0, 0, 1089, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084,
	1105, 1100, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075,
	1076, 0, 0, 1816, 0, 0, 0, 2569, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 1092, 1093,
	1094, 0, 0, 0, 0, 1095, 1074, 0, 1886, 0,
	0, 1885, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 1103, 1111,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1109, 1066, 1067,
	0, 1096, 1097, 1098, 1106, 1107, 1108, 0, 0, 0,
	0, 0, 0, 0, 1099, 1101, 0, 0, 0, 1789,
	0, 1069, 1089, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 1100, 0,
	0, 1088, 0, 0, 0, 0, 1102, 0, 1085, 1080,
	1081, 1087, 1086, 1082, 1083, 1084, 1105, 0, 1079, 1077,
	1078, 1070, 1071, 1072, 1073, 1075, 1076, 0, 0, 0,
	0, 0, 1095, 0, 0, 1790, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 1092, 1093, 1094,
	0, 0, 0, 0, 1104, 1074, 0, 0, 0, 1617,
	0, 0, 0, 0, 0, 1066, 1067, 0, 1096, 1097,
	1098, 1106, 1107, 1108, 0, 0, 0, 1103, 1111, 0,
	0, 1099, 0, 0, 0, 1616, 0, 0, 1069, 0,
	0, 1110, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 1101, 0, 0, 0, 1088, 0,
	0, 1089, 0, 1102, 0, 1085, 1080, 1081, 1087, 1086,
	1082, 1083, 1084, 1105, 0, 1079, 1077, 1078, 1070, 1071,
	1072, 1073, 1075, 1076, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 1092, 1093, 1094, 0, 0, 0,
	0, 1095, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 1103, 1111, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 1066, 1067, 0, 1096, 1097, 1098,
	1106, 1107, 1108, 0, 0, 0, 0, 0, 0, 0,
	1099, 1101, 0, 0, 0, 0, 0, 1069, 1089, 0,
	1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 1100, 0, 0, 1088, 0, 0,
	0, 0, 1102, 0, 1085, 1080, 1081, 1087, 1086, 1082,
	1083, 1084, 1105, 0, 1079, 1077, 1078, 1070, 1071, 1072,
	1073, 1075, 1076, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 1092, 1093, 1094, 0, 0, 0, 0,
	1104, 1074, 0, 0, 0, 0, 1066, 1067, 0, 1096,
	1097, 1098, 1106, 1107, 1108, 0, 0, 0, 0, 0,
	0, 0, 1099, 1103, 1111, 0, 0, 0, 0, 1069,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 1088,
	1101, 0, 0, 0, 0, 0, 1085, 1089, 0, 1102,
	0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105,
	0, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076,
	0, 0, 0, 1100, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 1092, 1093, 1094, 0, 0,
	0, 0, 0, 1074, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1103, 1111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 1109, 1066, 1067, 0, 1096, 1097,
	1098, 1106, 1107, 1108, 0, 0, 0, 0, 0, 0,
	0, 1099, 1101, 0, 0, 0, 0, 0, 1069, 1089,
	0, 1110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 1067, 0, 1096, 1097, 1098, 1106,
	1107, 1108, 1068, 0, 0, 1100, 0, 0, 1088, 1099,
	0, 0, 0, 1887, 0, 1085, 1069, 0, 1102, 1110,
	0, 1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105, 0,
	1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076, 1095,
	1068, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 1085, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 1092, 1093, 1094, 0, 0, 0,
	0, 1104, 1074, 0, 0, 0, 0, 1892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1111, 0, 0, 2067, 0,
	0, 1091, 1092, 1093, 1094, 0, 0, 0, 0, 0,
	1074, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1103, 1111, 0, 0, 0, 0, 1089, 0,
	1102, 0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084,
	1105, 1109, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075,
	1076, 0, 0, 0, 1100, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 1066,
	1067, 0, 1096, 1097, 1098, 1106, 1107, 1108, 0, 0,
	1104, 0, 0, 0, 0, 1099, 1095, 0, 0, 0,
	0, 0, 1069, 0, 0, 1110, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 0, 1104, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105,
	0, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076,
	0, 0, 0, 0, 0, 0, 0, 1091, 1092, 1093,
	1094, 0, 0, 0, 0, 0, 1074, 1102, 0, 0,
	1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105, 0, 1079,
	1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076, 1103, 1111,
	0, 0, 0, 0, 0, 1066, 1067, 0, 1096, 1097,
	1098, 1106, 1107, 1108, 0, 0, 0, 1109, 0, 0,
	0, 1099, 0, 0, 0, 1845, 0, 0, 1069, 0,
	0, 1110, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 1092, 1093, 1094, 1090, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 1067, 1104, 1096, 1097, 1098, 1106, 1107,
	1108, 0, 0, 0, 1103, 1111, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 1110, 0,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 1101, 0, 0, 0, 1088, 0, 0, 1089, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 1080, 1081, 1087, 1086,
	1082, 1083, 1084, 1105, 1100, 1079, 1077, 1078, 1070, 1071,
	1072, 1073, 1075, 1076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 1092, 1093, 1094, 0, 0, 0, 0, 1095, 1074,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 1103, 1111, 0, 0, 0, 0, 0, 1066, 1067,
	1104, 1096, 1097, 1098, 1106, 1107, 1108, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 1110, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105,
	0, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 1092, 1093, 1094,
	1090, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 1067, 1104, 1096, 1097,
	1098, 1106, 1107, 1108, 0, 0, 0, 1103, 1111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 1110, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 1101, 0, 0, 0, 1088, 0,
	0, 1089, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 1080,
	1081, 1087, 1086, 1082, 1083, 1084, 1105, 0, 1079, 1077,
	1078, 1070, 1071, 1072, 1073, 1075, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 1092, 1093, 1094, 0, 0, 0,
	0, 1095, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 1103, 1111, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 1313,
	1343, 1302, 1334, 1333, 0, 0, 1304, 1303, 0, 0,
	0, 0, 1345, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 1080, 1081, 1087, 1086, 1082,
	1083, 1084, 1105, 0, 1079, 1077, 1078, 1070, 1071, 1072,
	1073, 1075, 1076, 0, 0, 0, 0, 0, 1095, 0,
	1339, 0, 1331, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 1328, 1326, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1317,
	1315, 1318, 1319, 1320, 1321, 1322, 0, 1342, 0, 0,
	0, 0, 0, 0, 1306, 1305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 1080, 1081, 1087, 1086, 1082, 1083, 1084, 1105,
	1308, 1079, 1077, 1078, 1070, 1071, 1072, 1073, 1075, 1076,
	0, 0, 1332, 0, 0, 0, 1314, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 1445,
	1443, 1444, 1447, 1446, 0, 0, 0, 0, 1324, 1313,
	1343, 1302, 1334, 1333, 0, 0, 1304, 1303, 0, 0,
	0, 0, 1345, 1344, 0, 0, 0, 1309, 0, 0,
	0, 0, 543, 0, 569, 0, 0, 0, 1323, 1310,
	0, 0, 0, 0, 0, 0, 0, 0, 1347, 0,
	0, 0, 548, 0, 0, 0, 0, 0, 0, 0,
	1339, 1307, 1331, 1330, 546, 1340, 1341, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 0, 1311, 0, 0,
	549, 0, 1346, 0, 0, 1328, 1326, 1327, 555, 556,
	0, 0, 0, 565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 550, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1317,
	1315, 1318, 1319, 1320, 1321, 1322, 0, 1342, 0, 0,
	568, 0, 0, 0, 1306, 1305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 551, 0, 0, 0, 0,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 552, 553, 0, 1314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 0, 0, 0, 0, 554, 561, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 1310,
	0, 0, 0, 0, 0, 0, 0, 0, 1347, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1307, 0, 0, 0, 1340, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 545, 562,
	572, 0, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 0, 0, 0, 567, 0,
	0, 0, 0, 573, 0, 0, 0, 0, 560, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 566,
}
var sqlPact = [...]int{

	3629, -1000, -34, -1000, -1000, -1000, 129, -1000, -1000, -1000,
	-1000, 126, 119, 118, -1000, 117, 116, 115, 114, 112,
	108, 107, 106, 104, 103, 100, -1000, 94, -1000, -1000,
	-1000, -1000, 93, 92, 90, 88, 87, 86, 84, -1000,
	1083, 22409, 81, 79, 1350, -1000, 36383, 78, -1000, 931,
	27197, 936, 1280, -1000, 74, 994, 36045, 4557, 1656, 1097,
	1636, 35704, 22068, 1631, 1432, 35363, -1000, -1000, 35022, 72,
	71, 70, 68, 67, -1000, -1000, 34681, 66, 65, 58,
	55, 53, 52, 50, 49, 47, 46, 43, 34, 28,
	27, -1000, 25, 23, 21, -1000, 43680, 20, 19, 18,
	1081, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 847, 17, 15, 13, 12,
	8, 85, 6, 5, 3, 2, -1000, 899, 408, 2527,
	8349, 1043, 1040, 1036, 1019, 1034, 38411, 36383, 1, -57,
	-3, -1000, 1987, 619, 19622, 3629, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26856, 26515, 34340, 33999, 6234, 759, -1000, -37, 23087, 36383,
	-1000, 131, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15046, 14693, 510, 131, -1000, -1000, -1000, 33658, 24143,
	33317, 1507, 32976, -1000, -1000, 32635, -1000, -1000, 1844, 1651,
	1650, 26174, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	32297, 31956, 31615, 31274, 23791, 461, -1000, -1000, -1000, 17862,
	-1000, -1000, -1000, -1000, -10, -1000, -13, -1000, -14, -15,
	-16, -20, -24, -25, -1000, -26, -27, -1000, -28, -29,
	-1000, -30, -31, 1153, 976, 30933, 839, 1271, -1000, -1000,
	-36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36383,
	-1000, 15750, -1000, 458, -1000, 1657, -1000, 15750, -1000, 1250,
	-1000, -1000, -1000, -1000, -1000, 36383, -1000, -1000, -1000, -1000,
	-1000, -1000, 2167, 1175, 457, 30592, -1000, 1363, -1000, 577,
	745, -1000, -1000, -1000, 9405, 142, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1554, 23439, 1159, 2018, 1837,
	2164, 1461, 1817, 1814, 1782, 1736, 1720, 2163, 939, 2162,
	1852, 1000, 2161, 1708, 1303, 652, 2160, 1635, 1628, -1000,
	-1000, -1000, -1000, 908, -1000, -1000, -1000, 28549, -1000, -1000,
	792, 882, -1000, -1000, -1000, -1000, -1000, 899, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1448, 1982, 1982, 1982, 2048,
	246, 237, -1000, 85, -1000, 1359, -1000, 1150, -1000, -1000,
	-1000, -1000, -1000, 42962, -1000, -1000, 15750, 15750, 15750, 15750,
	15750, 1135, 494, -1000, 455, 454, 7644, -1000, -1000, 2137,
	-1000, -1000, -1000, 262, -1000, -1000, 15750, 131, -1000, -1000,
	-1000, -1000, 452, 2151, -1000, 623, -1000, -1000, -1000, 583,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1673,
	450, 447, 446, -1000, 444, -1000, -1000, 443, 442, 441,
	439, 438, 437, 436, 423, 422, 419, 418, 415, 414,
	413, 411, 1041, -1000, 610, -1000, -1000, 610, 610, -1000,
	377, 377, 379, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 377, -1000, -1000, -1000, 547, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410, 1264,
	-1000, -1000, 1264, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	758, 37735, -40, 36383, -1000, 409, -40, -1000, -1000, 407,
	-1000, 10813, 10813, -1000, -1000, -1000, -1000, -1000, 10109, 1587,
	-1000, 3358, -174, 280, 545, -1000, 18566, 21376, -1000, -1000,
	1086, 1880, 883, -1000, 998, 1871, 496, -1000, 1243, -1000,
	835, 1865, -96, 1697, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 24481, 23087, -37, -38, -1000, -1000, -1000, 5882, 42962,
	-1000, 42962, -1000, 826, 20324, 131, -1000, -1000, -1000, -1000,
	387, 1355, 590, 1346, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 279, -1000, 30251, 590, 1343, -1000, -1000,
	-1000, 28549, -1000, 36383, -1000, 36383, -1000, 864, -1000, 38073,
	121, 1859, -1000, -1000, 121, 1855, -1000, 120, 1851, -1000,
	-1000, 1181, 1828, -1000, -55, 1807, -1000, -1000, -1000, 15750,
	-61, -1000, -1000, -1000, 619, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29910,
	22748, 1396, 544, 42962, 2076, 43621, 24481, 42962, 22748, -1000,
	-1000, 36383, -1000, 15750, -1000, 2075, 1330, -41, -1000, -1000,
	-1000, -1000, -1000, 1387, 1378, 688, 1299, 9405, 9405, 1938,
	-1000, 138, 6234, -1000, -1000, -1000, -1000, 29569, -1000, -1000,
	-1000, 1146, 36383, -1000, -1000, 1671, -1000, 22748, 36383, -1000,
	36383, -1000, 36383, -1000, 36383, -1000, 36383, -1000, -1000, -1000,
	-1000, -1000, 553, -1000, 1669, -1000, -1000, 36383, -1000, 1386,
	-1000, -1000, -1000, 29231, 28890, -1000, 944, 787, -1000, -1000,
	122, -1000, 24481, 1998, 575, -1000, 1448, 1354, 1662, 658,
	1275, 1469, 14340, 1403, 15750, 85, -1000, -1000, 85, 85,
	9053, -1000, -1000, -1000, 36383, -1000, 43401, 43621, 6234, 765,
	15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750,
	15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750,
	15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750, 15750,
	15750, 15750, 1278, 15750, 757, 15750, 15750, 15750, 15750, 1439,
	1102, 376, 1133, -1000, 2102, 2102, 2102, 43108, 43108, 356,
	494, -1000, 15750, -1000, 57, 15750, 237, 41299, -39, 7292,
	-1000, -1000, -1000, 13988, 598, 42962, 131, 6586, -1000, 2134,
	823, 1682, 1565, 386, 515, 513, 511, 468, 15750, 15750,
	13636, 13283, 12930, 16454, 12577, 15750, 7996, 15750, 15750, 15750,
	15750, 12224, 11871, -1000, 384, -1000, -1000, -1000, -1000, 2131,
	-1000, -1000, 2129, -1000, 764, 763, 2128, -1000, -41, -1000,
	37735, -1000, 36383, -40, 2074, 36383, -1000, 146, -1000, 41985,
	-1000, 146, -64, -1000, 1456, 1440, 19973, 1312, 1157, 1157,
	1157, -1000, 380, 489, 545, 5159, 11518, -1000, 27535, 1167,
	157, 236, 18214, 1587, -1000, 36383, -47, 1033, -1000, 25833,
	1971, 1968, 1965, 28549, 2061, 57, 1989, 1625, 756, 28549,
	1988, 752, 2060, 57, 1624, 746, 36383, 6234, 1983, 543,
	-1000, 36383, -1000, -1000, -1000, 1623, -66, -1000, -1000, 25495,
	2073, 1758, -1000, 1042, -1000, 1757, 2072, 36383, 1246, 1333,
	-1000, -1000, 776, 1756, 594, 265, 2070, 265, 20674, -1000,
	36383, -1000, 36383, -1000, -1000, 36383, -1000, 36383, -1000, 36383,
	36383, -1000, 36383, 24481, 24481, -69, 42962, 4561, 25157, 734,
	-1000, 638, 25495, 2658, -71, -1000, 708, -1000, -1000, -1000,
	-1000, 221, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 379, 1041,
	377, 377, 377, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	547, -1000, -1000, 610, 610, 610, -1000, -1000, -76, 1619,
	568, -77, 681, -41, -1000, 1264, -1000, 923, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2146, -1000, 2113, -1000, -1000, 2125, -42, -1000, -42,
	-1000, 6234, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36383,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 180, -1000,
	-1000, -1000, -1000, -1000, -1000, 36383, 36383, 36383, -1000, 28549,
	-1000, 1664, -1000, 1991, 1354, 1662, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42962, -1000, 400, -1000, -1000, 42962,
	948, 1479, -1000, 1479, -43, -1000, 41858, 1434, 36383, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	566, 552, 552, 772, 772, 772, 772, 2086, 769, 2601,
	481, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 263,
	276, 276, 263, 263, 263, 263, 263, 3970, 3970, 3970,
	43108, 359, 3224, 15750, 15750, 733, 1088, 376, 3224, 15750,
	3224, 3224, 3224, 3224, -1000, 1171, -1000, -1000, -1000, -1000,
	1618, 375, 16454, 16454, -1000, -1000, -1000, 7644, 16806, -1000,
	-1000, -1000, -1000, 373, 15750, -1000, 41426, -222, 235, -60,
	-1000, 15750, 467, -111, -1000, 860, -1000, 15750, -1000, -19,
	15750, 15750, 15750, 232, -1000, 231, -1000, 732, -1000, 731,
	730, 728, -1000, 372, 1151, 365, 363, 15750, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42835, 39516, 228, -1000,
	1617, -60, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 227,
	-1000, 224, -1000, 42689, -60, 223, 4764, -1000, 16454, 16454,
	16454, 7644, 361, 222, -1000, 41699, -1000, 42463, 11165, 11165,
	11165, 219, 42425, 15750, -60, 39256, 39128, 39093, -78, -79,
	-1000, -80, -1000, 2124, -85, 218, 565, 564, 215, -1000,
	-1000, 360, -102, 594, 10813, 19270, 6234, -1000, 594, 10109,
	-1000, 19973, 19973, 1311, 1435, 19973, -1000, -1000, -1000, -1000,
	27535, 459, 545, 27535, -1000, 2123, 1406, 207, -1000, -1000,
	-1000, 36383, 357, -1000, 545, 204, 984, 36383, 36383, 36383,
	-1000, -1000, 1331, 37397, 1329, 43621, 36383, -1000, 346, 337,
	1433, 1429, 36383, 36383, 37059, 36721, 36383, 1008, 57, -1000,
	562, 336, 36383, 974, 558, 36383, 57, -1000, 332, 36383,
	926, -1000, 554, 1539, 1292, -1000, 817, 1615, 36383, 202,
	-104, -44, 43621, -1000, -1000, -1000, -1000, -1000, 36383, 429,
	36383, 57, 36383, 24481, 24481, 57, 36383, 1750, 1818, 521,
	36383, 1469, 15750, 956, -1000, 18918, 628, 36383, 907, 89,
	-1000, -1000, -1000, 532, 36383, -1000, -1000, 121, 121, -1000,
	120, 1181, -1000, -55, -1000, 15750, -1000, -1000, 36383, 24481,
	-112, -1000, 642, 641, -1000, 43621, -1000, 493, 663, -1000,
	2122, 586, 36383, 9405, 9405, -1000, 1471, -1000, -1000, 929,
	-1000, 1022, -1000, -1000, -1000, -1000, 9405, -1000, -48, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1007, -1000, -1000, -1000,
	948, -1000, 15750, 2121, -1000, -1000, -1000, 9053, -1000, -1000,
	-1000, 36383, -135, 15750, 3224, 3224, 15750, 16454, 16454, -1000,
	3224, -1000, -1000, -1000, -1000, -1000, 1614, 331, 15750, 43621,
	4618, 4003, -115, -1000, 15750, -45, -1000, 15750, -1000, 41153,
	-1000, -1000, 492, 1723, -1000, 15750, 42266, 201, 10461, -1000,
	42144, -21, -21, -1000, 2145, 1370, 1289, 968, 881, 2120,
	-1000, 21025, 595, 1191, 41026, 43401, 43621, -1000, 15750, -1000,
	-1000, 1612, 15750, -1000, 43401, 43621, 16454, 16454, 16454, 16454,
	16454, 16454, 16454, 16454, 16454, 16454, 16454, 16454, 16454, 16454,
	16454, 16454, 16454, 16454, 16454, 1407, 16454, 2099, 2099, 2099,
	-46, 15750, -1000, 1654, 1612, 15750, 15750, 43621, 200, 198,
	196, -1000, 15750, -60, 15750, 15750, 15750, -1000, -1000, -1000,
	192, -1000, 2119, -1000, -1000, -1000, -1000, 2658, -1000, 1549,
	-1000, -114, -1000, 1587, -1000, 1549, -1000, -1000, 1311, -1000,
	330, 15750, 19973, -1000, 466, -1000, -120, -1000, 27535, -1000,
	465, -220, -1000, 530, -1000, 545, 329, 36383, 27535, -1000,
	-1000, -1000, 725, 717, 1727, -1000, 1325, -1000, 633, -1000,
	960, 15750, 17510, 326, 325, 1141, -1000, 1722, 1181, 1718,
	1181, -1000, -47, 992, -1000, 21727, 15750, -1000, 714, 21727,
	-1000, -1000, 15750, -1000, 711, 21727, 586, 1600, 800, -1000,
	813, -1000, 1519, -1000, 25495, 324, 36383, 323, -1000, 322,
	-1000, 590, -1000, 321, 36383, 1400, 521, 24819, -1000, 590,
	907, -1000, 42962, -1000, 907, 8701, 1977, -121, -1000, -1000,
	-1000, 594, 20674, 19973, 10109, -122, -1000, -1000, -1000, -1000,
	42962, -48, 1942, 1942, -1000, 2116, -1000, 464, 190, -1000,
	28211, -48, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36383,
	6234, 36383, 36383, 1204, 40880, -1000, 1975, 6234, 2068, 3224,
	3769, 578, 15750, 43621, 43235, -123, 15750, 15750, -1000, 188,
	15750, 463, 42962, -1000, -1000, -1000, 42962, 15750, 2141, 15750,
	187, 185, 182, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 181, -1000, -1000, 38749, 15750, 178, -1000, 177, 176,
	42962, 1654, 42962, -1000, -1000, 585, 585, 865, 865, 865,
	865, 2099, 1106, 1174, 685, 491, 491, 491, 613, 403,
	403, 491, 491, 491, 1589, 1412, 319, 4788, 15750, 174,
	-1000, -1000, 42962, 42962, 172, -1000, -1000, -1000, -60, 4397,
	40753, 40607, -1000, 171, 170, 1535, 2047, -1000, 19973, 1535,
	-1000, 36383, 42962, -1000, -174, -1000, 2115, -1000, -1000, 1406,
	-1000, 5525, 27535, 36383, -128, -1000, 36383, 36383, 36383, 1703,
	-1000, 1527, -1000, 40480, -129, -1000, 292, 2011, 15750, -1000,
	-1000, 316, 17510, 36383, -1000, 1424, 1506, 666, 36383, -1000,
	36383, -1000, 36383, 36383, 36383, -1000, 315, 131, -131, 36383,
	-1000, -138, 36383, -1000, -1000, 24481, 691, -1000, 1095, 1509,
	-1000, 17510, 314, 36383, 25495, 2069, -1000, 17510, 1237, 1409,
	521, 24819, -1000, 776, -1000, -1000, -49, -1000, 309, 57,
	907, -1000, -51, -1000, 527, 1926, -1000, 1917, 404, -1000,
	-1000, -54, 313, -1000, 524, 523, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1975, 15750, 15750, 43235, -139, -1000, 3224,
	3224, -1000, 40334, -1000, 42962, -1000, 42144, -1000, -1000, -1000,
	-1000, 1087, -1000, 40207, -1000, -1000, -1000, -1000, 16454, 1576,
	311, 43621, 40061, -1000, -1000, 15750, -1000, -1000, -1000, -1000,
	592, 15750, 15750, 1587, 592, -140, 545, -1000, -1000, -1000,
	2109, -1000, -145, -1000, -1000, -1000, -1000, 36383, -1000, 36383,
	-1000, 6234, 36383, 1584, 1307, -1000, -1000, 1428, 310, 16454,
	36383, -1000, 1052, 17510, 1975, 131, 6234, 1975, 39835, 6586,
	-146, -147, 1301, -1000, 1293, 15750, -1000, 43621, 1181, 1181,
	-1000, 709, 707, 15750, 706, -1000, 700, -1000, -55, 21727,
	-1000, -1000, 2045, 1145, -148, 17510, -153, 169, 57, -155,
	36383, -1000, 521, 24819, -1000, 1818, 1899, 36383, 1955, -1000,
	-1000, 308, 307, 305, -1000, 27873, 27873, 24481, 24481, -1000,
	3224, 3224, -1000, -1000, 167, 1191, 2039, -1000, 39225, 16454,
	43621, -160, -1000, 39797, -1000, 36383, 42962, -60, -1000, -1000,
	27535, 277, -1000, -1000, 1528, -1000, -1000, 36383, 1323, -1000,
	-1000, 15750, 4788, 303, 1519, 302, -1000, -1000, -1000, -1000,
	-1000, -1000, 2011, -19, -1000, 1016, -1000, -1000, 42962, 1996,
	-1000, -1000, 36383, 36383, -21, 300, 298, -1000, 1248, 36383,
	1052, -161, -1000, 1519, -1000, 1052, 291, 24819, -1000, 1400,
	770, -163, 36383, -1000, -1000, 6938, 24481, 24481, -1000, -170,
	-1000, -1000, -1000, 977, 15750, 39225, -171, -1000, -1000, -56,
	-1000, 2065, -1000, -1000, -1000, -1000, 1702, 39638, 1366, 36383,
	-1000, 36383, 1975, 164, 36383, 636, 6234, -1000, -1000, 158,
	15750, 15750, 288, 285, 283, 1519, 1052, -1000, 1519, 17510,
	-1000, 1409, 844, -1000, 594, -1000, -172, -177, -1000, 155,
	16102, 16102, -60, -1000, 36383, 282, 1689, -1000, 1221, 1224,
	154, -179, -1000, -1000, 279, -1000, 15750, -1000, 2141, -185,
	-186, 36383, 36383, 36383, -1000, 1519, -1000, -187, -1000, 20674,
	-1000, 586, 586, -1000, -1000, -1000, 17158, 1238, 892, 41572,
	-1000, -1000, -1000, 36383, -1000, 1234, 1227, 893, -1000, -1000,
	-1000, -1000, -1000, 1366, 42962, -1000, -1000, -188, -193, -194,
	-1000, 1052, -168, -1000, -1000, 2082, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1856, -1000, 646, 1320, 1320, 1221, 278,
	275, 1128, 1519, -1000, 15398, -1000, 2078, -1000, -1000, 1421,
	-1000, -1000, 1082, 1062, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 153, 6234, 145, 6234, -1000, 626, -1000, 624,
	274, 1394, -53, 9757, 768, 297, -67, -1000, -195, -1000,
	42962, -1000, -1000, 261, -1000, 9757, 1082, -1000, 9757, 9757,
	-196, -1000, -1000, -202, -1000, -62, 1062, -90, -1000, -1000,
	1062, -1000,
}
var sqlPgo = [...]int{

	0, 2542, 2541, 1698, 2069, 2540, 2538, 2535, 2533, 2528,
	2521, 2520, 2519, 2512, 2509, 2507, 2506, 2504, 2501, 2498,
	2494, 2493, 2487, 2486, 2045, 2485, 2034, 2483, 2480, 2476,
	2473, 2471, 2468, 2467, 2001, 2464, 2463, 2462, 2460, 1971,
	2459, 1965, 2458, 2457, 1961, 2456, 2455, 2454, 1944, 2452,
	1934, 2450, 76, 109, 1912, 2449, 2442, 1862, 1837, 1822,
	2441, 1814, 2440, 2435, 1796, 1794, 2434, 130, 2433, 2426,
	2421, 1781, 1695, 2420, 2419, 2417, 155, 2415, 1687, 2412,
	2411, 2409, 2408, 2404, 2403, 2400, 2399, 2397, 2396, 2394,
	2393, 2390, 2384, 2383, 2382, 2381, 2379, 2378, 160, 2377,
	2376, 1683, 1681, 2375, 2365, 44, 34, 15, 64, 32,
	148, 2732, 143, 2363, 2362, 2361, 2357, 2352, 2349, 30,
	98, 95, 2344, 523, 2343, 2340, 50, 39, 26, 21,
	74, 90, 2337, 2335, 2536, 29, 2331, 2330, 132, 2328,
	24, 38, 2643, 153, 151, 111, 121, 2325, 2324, 2323,
	48, 119, 11, 5, 4, 3, 1, 2322, 2, 6,
	2319, 2318, 17, 89, 85, 2315, 28, 67, 2314, 2313,
	123, 2312, 68, 96, 1590, 100, 117, 182, 93, 2310,
	70, 16, 61, 2308, 2307, 157, 56, 2306, 40, 80,
	149, 110, 2304, 60, 162, 129, 78, 133, 135, 2301,
	2299, 2297, 103, 2296, 118, 87, 2295, 2294, 73, 2293,
	97, 144, 2292, 140, 108, 2291, 2290, 122, 2289, 126,
	2287, 2286, 154, 150, 114, 8, 55, 72, 13, 1598,
	1596, 139, 91, 65, 58, 2285, 798, 1268, 1292, 52,
	102, 79, 53, 105, 59, 88, 146, 33, 2284, 2280,
	136, 2278, 2276, 2275, 2273, 2270, 99, 2267, 2266, 35,
	2263, 82, 41, 46, 113, 45, 101, 128, 112, 158,
	104, 2260, 81, 125, 2259, 391, 2258, 2257, 1361, 116,
	2256, 2248, 2245, 1201, 1194, 1182, 164, 2244, 2242, 1135,
	1066, 2234, 2231, 86, 2228, 115, 106, 94, 147, 156,
	19, 2225, 124, 31, 2224, 37, 43, 0, 1071, 120,
	2223, 127, 75, 2222, 2220, 2219, 2217, 36, 10, 9,
	7, 14, 12, 27, 25, 2216, 2213, 134, 83, 71,
	2211, 159, 2207, 2195, 2192, 49, 2189, 22, 2188, 20,
	2187, 2186, 23, 18, 2182, 2178, 142, 2177, 92, 2176,
	2059, 2175, 152, 2173, 2172, 1785, 2170, 54, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 121, 121, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 118, 118, 123, 123, 123, 125, 125,
	122, 122, 117, 117, 24, 24, 65, 65, 108, 58,
	58, 58, 305, 305, 306, 306, 104, 104, 105, 105,
	105, 105, 106, 106, 107, 107, 107, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 41, 41, 42, 42, 42, 42,
	42, 42, 43, 43, 43, 43, 44, 44, 44, 44,
	44, 44, 44, 44, 49, 49, 49, 47, 47, 47,
	46, 46, 46, 45, 45, 45, 48, 48, 48, 176,
	176, 175, 175, 179, 179, 50, 50, 50, 50, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 53,
	53, 53, 53, 53, 53, 53, 274, 274, 273, 51,
	51, 248, 248, 54, 54, 203, 203, 55, 55, 55,
	55, 55, 56, 56, 66, 66, 346, 346, 346, 350,
	350, 351, 351, 352, 352, 352, 352, 352, 352, 352,
	348, 348, 61, 61, 61, 61, 62, 62, 62, 63,
	63, 103, 103, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 29, 30, 72, 72, 72, 74, 71, 71,
	71, 73, 73, 73, 73, 75, 75, 76, 76, 76,
	76, 76, 77, 77, 299, 297, 297, 298, 298, 148,
	148, 148, 148, 148, 149, 149, 149, 304, 304, 304,
	304, 304, 304, 303, 303, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 90, 90, 90, 98, 98, 98, 98, 98,
	98, 98, 79, 79, 84, 84, 84, 84, 84, 80,
	80, 85, 85, 86, 86, 87, 87, 87, 87, 87,
	87, 81, 81, 81, 81, 89, 89, 89, 89, 88,
	88, 94, 94, 94, 94, 94, 94, 91, 91, 91,
	91, 92, 92, 92, 95, 95, 95, 95, 82, 82,
	83, 83, 96, 96, 97, 97, 97, 97, 97, 93,
	93, 93, 347, 347, 349, 349, 59, 59, 37, 37,
	38, 38, 150, 150, 151, 151, 227, 227, 227, 227,
	152, 152, 124, 124, 124, 153, 153, 154, 154, 155,
	155, 155, 157, 157, 158, 158, 159, 159, 159, 156,
	156, 156, 226, 315, 315, 316, 316, 316, 316, 316,
	316, 317, 317, 317, 317, 317, 317, 317, 313, 313,
	314, 311, 311, 312, 312, 312, 312, 353, 353, 225,
	225, 162, 162, 318, 318, 318, 318, 319, 319, 319,
	319, 319, 322, 321, 320, 320, 320, 320, 320, 260,
	260, 260, 100, 100, 39, 39, 39, 130, 130, 40,
	40, 36, 36, 36, 207, 207, 166, 166, 265, 265,
	265, 141, 141, 119, 119, 119, 17, 13, 13, 13,
	13, 13, 13, 23, 23, 21, 21, 208, 208, 209,
	209, 60, 60, 64, 64, 69, 69, 99, 99, 99,
	99, 99, 99, 25, 25, 25, 25, 31, 31, 31,
	31, 68, 68, 355, 355, 137, 137, 137, 137, 138,
	138, 222, 222, 223, 223, 356, 356, 224, 224, 224,
	132, 131, 133, 133, 35, 35, 35, 126, 126, 127,
	127, 128, 128, 129, 129, 357, 357, 57, 57, 57,
	102, 102, 144, 144, 219, 219, 219, 221, 221, 220,
	220, 220, 193, 193, 193, 101, 101, 171, 171, 181,
	181, 182, 182, 271, 183, 183, 67, 67, 111, 111,
	109, 109, 109, 109, 109, 109, 109, 109, 110, 110,
	110, 112, 112, 112, 112, 112, 112, 112, 115, 115,
	115, 116, 116, 116, 114, 114, 328, 328, 328, 331,
	331, 327, 329, 329, 330, 330, 354, 354, 194, 194,
	194, 161, 160, 160, 164, 164, 163, 165, 165, 264,
	264, 264, 191, 191, 190, 190, 190, 190, 212, 212,
	210, 210, 211, 211, 215, 215, 216, 216, 216, 217,
	217, 218, 218, 189, 189, 244, 244, 214, 214, 213,
	113, 113, 113, 170, 170, 170, 172, 172, 234, 234,
	234, 235, 235, 233, 233, 233, 233, 266, 266, 266,
	266, 266, 266, 266, 266, 344, 344, 344, 345, 345,
	263, 263, 267, 267, 267, 267, 267, 267, 261, 261,
	261, 261, 262, 262, 272, 272, 197, 197, 197, 197,
	195, 195, 196, 196, 268, 268, 268, 268, 192, 192,
	269, 269, 269, 228, 228, 275, 275, 275, 293, 293,
	169, 169, 169, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 277, 277, 277, 277, 279, 279,
	279, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 292,
	292, 292, 292, 292, 280, 280, 287, 287, 288, 288,
	289, 290, 281, 281, 282, 282, 283, 284, 291, 291,
	291, 291, 295, 295, 285, 285, 285, 285, 285, 286,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 205, 205, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 238, 238,
	238, 238, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 323, 323, 323, 323, 323, 323, 323,
	323, 325, 325, 326, 326, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 332, 332, 333, 333, 335,
	335, 336, 336, 337, 338, 338, 338, 339, 340, 340,
	334, 334, 341, 341, 341, 342, 342, 343, 343, 343,
	343, 343, 250, 250, 251, 252, 258, 258, 258, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 139, 139, 139, 139, 139,
	178, 178, 177, 177, 247, 247, 245, 245, 249, 249,
	198, 198, 294, 294, 294, 294, 294, 294, 294, 199,
	199, 199, 206, 200, 200, 201, 201, 201, 201, 201,
	241, 242, 202, 202, 202, 243, 243, 253, 257, 257,
	256, 255, 255, 254, 254, 231, 231, 232, 232, 230,
	229, 186, 186, 185, 185, 184, 184, 358, 358, 259,
	259, 187, 187, 188, 180, 180, 270, 270, 270, 270,
	173, 173, 146, 146, 174, 174, 142, 142, 145, 145,
	143, 143, 143, 143, 167, 167, 168, 168, 140, 140,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 296, 296, 296, 246, 134, 134, 134, 135, 135,
	136, 136, 301, 301, 301, 302, 302, 302, 302, 300,
	300, 300, 300, 300, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 1, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 2, 6, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 1, 4, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 4, 3, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 2, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 2, 3, 7, 7, 7, 4, 5, 5,
	5, 5, 2, 0, 2, 0, 3, 2, 8, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 1, 0, 9, 9, 6,
	7, 5, 3, 5, 1, 3, 1, 1, 1, 10,
	11, 9, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 7, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 4, 4, 2, 3, 5, 5, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 1, 0, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 1, 0, 2,
	2, 2, 3, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 3, 3, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -24, -26, -29, -32,
	-33, -55, -41, -42, -43, -54, -50, -56, -57, -58,
	-59, -51, -65, -64, -66, -69, -67, -60, -61, -70,
	-78, -99, -100, -101, -102, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -39, -34, 73,
	94, -330, 98, -44, -48, 102, 109, 112, 134, 145,
	231, 237, 258, 260, 262, 269, -109, -111, 256, -62,
	-63, -71, -72, -73, -74, -103, 281, -79, -80, -81,
	-82, -83, -84, -85, -86, -87, -88, -89, -90, -91,
	-92, -93, -94, -95, -96, -97, 284, -25, -31, -68,
	323, -11, -12, -15, -14, -16, -13, -20, -22, -19,
	-21, -23, -17, -18, -10, 111, -35, -36, -37, -38,
	-40, -328, -45, -46, -47, -49, -112, -110, 378, 257,
	332, 35, 293, 61, 105, 264, 348, 355, -115, -113,
	-114, -116, 274, 340, 303, 382, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 2,
	303, 343, 87, 153, 242, -346, 2, -174, 303, 87,
	-143, -134, 371, 4, -307, -309, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 48, 55, 60, 61, 62,
	67, 64, 65, 66, 69, 71, 72, 75, 76, 77,
	85, 86, 88, 90, 94, 96, 98, 101, 102, 104,
	109, 111, 110, 112, 122, 123, 128, 130, 135, 141,
	142, 145, 146, 154, 157, 159, 152, 169, 170, 171,
	175, 176, 177, 180, 179, 184, 185, 188, 189, 192,
	194, 196, 197, 200, 198, 202, 203, 205, 204, 210,
	212, 213, 215, 218, 221, 224, 227, 228, 229, 230,
	231, 233, 235, 237, 239, 240, 241, 242, 243, 245,
	246, 248, 249, 250, 251, 252, 256, 254, 255, 257,
	258, 259, 260, 262, 264, 265, 267, 282, 283, 294,
	269, 270, 271, 272, 273, 277, 275, 278, 279, 281,
	284, 286, 289, 292, 293, 295, 298, 299, 296, 291,
	302, 304, 305, 306, 307, 308, 309, 310, 311, 318,
	319, 323, 324, 325, 326, 329, 330, 331, 332, 334,
	337, 338, 339, 344, 349, 350, 351, 352, 353, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 89, 91, 92, 108, 113, 114, 124, 125,
	126, 136, 138, 147, 148, 151, 158, 160, 161, 162,
	163, 164, 166, 173, 174, 182, 199, 209, 211, 222,
	226, 234, 236, 244, 266, 276, 287, 288, 297, 300,
	313, 314, 315, 320, 321, 336, 340, 341, 381, 381,
	2, 170, 241, -142, -134, 87, 381, 2, 303, 333,
	343, -207, 87, 328, -134, 237, 22, 2, 96, 157,
	331, 330, 22, 233, 275, 305, 307, 2, 381, 2,
	343, 303, 153, 87, 333, -134, 2, -53, 2, 378,
	-52, -4, -34, -44, -54, -50, -24, -26, -39, -41,
	-48, -58, -57, -59, -61, -65, -64, -67, -71, -72,
	-78, -101, -102, 73, 102, 281, 111, -350, 2, 22,
	-351, -352, 73, 102, 134, 274, 157, 96, 330, 303,
	2, 170, 2, -134, 2, -346, 2, 170, 2, -350,
	2, -134, 2, -138, 2, 269, -134, 381, 381, 381,
	381, 381, 189, 55, 266, 278, -76, 319, -75, 313,
	-299, -77, 2, -175, 200, -134, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 2, -98, 278, 34, 55, 22, 60,
	88, 135, 153, 154, 176, 68, 69, 240, 189, 171,
	318, 177, 279, 304, 319, 73, 334, 308, 110, 4,
	87, 200, 280, 313, 381, 381, 381, -354, 2, 303,
	271, 284, 381, 381, 381, 381, 381, -110, -112, -111,
	381, 381, 381, 381, -163, -164, 327, 165, 107, 220,
	-109, -111, 2, -328, -98, 278, 2, 55, 22, -297,
	2, -259, 216, -236, 93, -238, 369, 370, 364, 206,
	354, -250, -240, -253, 108, 266, 378, -142, -239, 384,
	9, -325, -111, 29, -251, -252, 49, -134, 7, 8,
	5, 6, -140, -277, -246, -286, 322, 115, 208, -323,
	-324, 4, -307, -301, -278, -288, -282, -285, 166, 58,
	79, 80, 83, 81, 84, 280, 333, 50, 28, 113,
	114, 226, 234, 300, 320, 321, 147, 209, 148, 56,
	136, 182, 101, 37, 39, 41, 42, 51, 52, 89,
	91, 92, 124, 125, 126, 158, 160, 161, 162, 163,
	164, 211, 244, 287, 297, 314, 315, 341, -308, -289,
	-290, -283, -284, 74, 116, 133, 156, 149, 168, 172,
	183, 186, 195, 201, 223, 225, 263, 285, -291, -355,
	2, 319, 319, 2, -355, 2, -355, 2, -137, 2,
	319, 316, -331, 245, -327, -134, -331, 381, 381, 383,
	381, -160, -161, 2, 22, 99, -188, 2, 378, -266,
	2, 376, -268, -142, -111, -267, 378, 217, -3, 2,
	-268, 147, -142, 2, -268, 147, -142, 2, -134, 2,
	-145, 147, -142, -300, 4, -307, -309, -308, -310, 58,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	49, 50, 54, 57, 59, 68, 73, 78, 79, 81,
	80, 82, 83, 84, 93, 95, 97, 99, 100, 103,
	105, 107, 115, 117, 129, 131, 132, 134, 137, 139,
	150, 153, 155, 165, 167, 178, 181, 187, 190, 191,
	206, 207, 208, 214, 216, 217, 219, 220, 232, 238,
	247, 261, 274, 280, 290, 301, 303, 312, 316, 317,
	322, 327, 328, 333, 335, 342, 343, 345, 346, 347,
	348, 316, 383, -174, -167, -134, -230, -229, 380, -236,
	2, -236, 2, 132, 378, -185, -186, -229, -230, 2,
	-175, 147, -305, 147, 2, -303, 9, -302, 5, 4,
	-307, -309, -308, -175, 2, 153, -134, 147, 2, -134,
	22, 132, 2, 167, 2, 167, 2, -269, 2, -268,
	-176, 147, 2, -175, -176, 147, 2, -146, 147, 2,
	-145, -134, 147, 2, -306, 147, 2, -305, -203, 378,
	-274, 2, -273, -302, 340, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 278,
	216, 383, -175, -236, -248, 378, 132, -236, 216, -134,
	2, 282, 2, 378, -76, 53, 319, -223, 2, -224,
	-131, -132, -133, 169, 239, 243, 353, 316, 359, 132,
	-297, -179, 380, -98, 2, -305, 2, 282, 2, 240,
	279, 55, 132, 2, 2, -347, 2, 216, 132, 2,
	132, 2, 132, 2, 132, 2, 132, 2, 2, 240,
	279, 2, 129, 2, 318, 2, 2, 132, 2, 169,
	239, 294, 2, 303, 343, 2, 132, 132, 353, 2,
	-192, -268, 303, 353, 22, -163, -164, -213, -190, 129,
	-210, -211, 187, 117, 214, -194, 22, 99, -194, -194,
	44, 379, 379, -98, 282, 2, 10, 11, 57, 33,
	369, 370, 371, 372, 127, 373, 374, 367, 368, 366,
	357, 358, 361, 362, 363, 70, 360, 359, 63, 193,
	268, 118, 119, 120, 121, 253, 13, 14, 15, 26,
	219, 186, 354, 149, 285, 364, 16, 17, 18, 168,
	36, 150, -139, -147, -236, -236, -236, -236, -236, 225,
	-184, -231, 376, -111, 378, 378, -111, -236, -177, 378,
	7, -111, -245, 376, -254, -236, -185, 378, 5, 378,
	5, -332, 349, 129, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 236, -295, 344, -295, -295, -279, 378,
	-279, -280, 378, -279, 350, 355, 378, -222, -223, -222,
	316, -138, 383, -331, -168, 378, -188, -180, -270, -236,
	371, -180, -187, -259, 74, -197, 172, 201, 133, 183,
	263, 156, 7, -53, -233, 384, 378, 371, -263, 355,
	-111, -267, 378, -266, -142, 378, -121, 254, -120, 21,
	23, 102, 338, 108, 291, 309, 111, 270, 254, 108,
	111, 254, 291, 309, 270, 254, 108, 384, 111, -305,
	-143, 383, -300, 371, 295, 379, -173, -142, -186, 378,
	-162, 206, -130, -329, 348, 206, -162, 378, -135, 147,
	2, -134, -329, 206, -269, -144, -142, -144, 281, -134,
	30, -123, 383, 48, 259, 108, -123, 108, -123, 383,
	108, -123, 108, 383, 108, -177, -236, 379, 383, -346,
	-352, 73, 378, 30, -247, -275, -276, -278, -287, -281,
	-285, -286, 40, 46, 45, 174, 173, 310, 199, 276,
	288, 336, 151, 38, 215, 159, 4, 158, 160, 161,
	162, 163, 164, 287, 37, 244, 125, 126, 124, 101,
	92, 91, 211, 42, 41, -289, -290, -283, -284, 89,
	314, 315, 166, 39, 52, 51, 341, 297, -306, -346,
	-299, -177, 30, -223, 2, -356, 383, 185, -149, 192,
	205, 141, 217, 351, -304, 5, 4, -246, -260, 93,
	189, -286, 8, 370, -296, 7, 369, -298, -297, -298,
	77, 380, -300, -175, 22, 283, 2, -299, -349, 129,
	-346, -299, -299, -299, -299, -299, 278, -53, 129, -134,
	185, -299, 2, -299, 2, 303, 153, 303, -123, 383,
	-305, 64, 65, 353, -213, -190, -191, -190, -214, -213,
	330, -211, -210, -215, -236, 22, -218, 123, 202, -236,
	-238, -110, -110, -110, -165, -264, -236, 238, 153, -299,
	-293, -275, -292, 249, 250, 248, 252, 251, -275, -300,
	313, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, 186, 149, 285, 36, 150, -236, 316,
	-236, -236, -236, -236, 198, 206, 208, 322, 115, 329,
	99, 212, -358, 301, 32, -243, -111, 378, -258, 27,
	290, 22, -250, 266, 378, -231, -236, -232, -178, -177,
	379, 383, -178, -249, -245, -257, -256, 345, 379, -177,
	342, 22, 99, 371, 2, 7, -204, 352, 197, 90,
	142, 196, -205, 273, -333, 122, 137, 378, 379, 2,
	379, 2, 379, 2, 379, 2, -236, -236, -198, 2,
	-294, -177, 4, 352, 197, 90, 142, 196, 273, -198,
	2, -199, 2, -236, -177, -200, -237, -238, 369, 370,
	364, 378, 266, -201, 2, -236, -178, -236, 43, 181,
	317, -202, -236, 132, -177, -236, -236, -236, -177, -177,
	2, -177, 2, 378, 7, 7, 313, 313, 7, -138,
	-327, 30, -167, -170, 383, 132, 30, 4, -170, 383,
	379, 172, 172, -266, -197, 172, -195, 223, -195, -195,
	-344, 378, 377, -263, -300, 376, 385, -178, 2, -262,
	-261, 30, -134, 221, 379, -142, 383, 316, -208, 68,
	59, -226, 147, 59, -311, -134, 68, -312, 54, 328,
	238, 131, -208, 68, -208, 68, 68, -268, 33, -67,
	66, 132, 316, -268, 66, 316, 33, -67, 132, 316,
	-145, -300, 66, -272, 356, -134, 132, 379, 383, -150,
	-167, -151, -134, -227, -226, -313, -314, -311, 153, 328,
	116, 30, 108, 230, 108, 30, 216, 206, -126, 306,
	108, -228, 346, -219, -67, 378, 93, 30, -219, -181,
	-182, -271, -183, -142, 378, -134, -175, -176, -176, -145,
	-146, -134, -305, -306, 379, 383, -53, -273, 316, 335,
	-151, -52, 73, 102, 379, 383, -169, 29, 376, -204,
	378, -272, 132, 359, 316, 379, 319, -224, -148, 243,
	289, 255, 277, 8, 7, 7, 383, -300, -348, -134,
	278, -53, -142, -145, -142, -268, 129, 65, -191, -214,
	-216, -296, 378, 370, -217, 266, 267, 383, -119, 31,
	97, 175, -142, 353, -236, -236, 316, -358, 301, -243,
	-236, 198, 208, 322, 115, 329, 99, 212, 132, 378,
	-237, -237, -177, -240, 378, -177, 377, 387, 379, -236,
	377, 377, 383, -255, -256, 103, -236, -164, 383, -163,
	-236, -177, -177, 379, 379, 316, 316, 316, 316, 378,
	-338, 224, 378, 378, -236, 30, 383, 379, 132, 379,
	379, -206, 232, 379, 10, 11, 369, 370, 371, 372,
	127, 373, 374, 367, 368, 366, 357, 358, 359, 63,
	193, 268, 13, 14, 15, 168, 150, -237, -237, -237,
	-177, 378, 379, -241, -242, 132, 129, 30, -202, -202,
	-202, 379, 132, -177, 383, 383, 383, 379, 379, 379,
	7, 379, 383, 379, 353, 353, 379, 378, 379, -228,
	-270, -172, 2, -266, -300, -228, -259, -266, -266, -196,
	335, 216, 172, -266, -261, 379, -345, 7, -263, -262,
	7, -235, -234, 130, 204, 379, -134, 378, -263, 379,
	-120, -142, -134, -134, 206, -226, 147, -125, 206, -275,
	-134, 378, 378, 175, 175, -134, -134, 147, -134, 147,
	-134, -134, -121, 254, -67, 353, 378, -142, 254, 353,
	-134, -67, 378, -134, 254, 353, -104, 146, 212, 295,
	132, -142, 379, 379, 383, -135, 153, -135, -67, -175,
	-305, -305, -67, -142, 108, -127, 104, -357, 359, -134,
	-212, -210, -236, -193, -221, 261, 216, -173, 340, -134,
	-193, -171, 383, 132, 359, -173, -123, -123, -123, -123,
	-236, -348, -305, 379, -275, 376, 377, 7, 7, -107,
	348, -348, -297, -297, -131, 326, 62, 243, -297, 383,
	242, 87, 303, -217, -236, -264, -142, 384, -236, -236,
	-237, -237, 132, 378, -236, -247, 26, 26, 379, -178,
	383, -232, -236, 379, -245, 105, -236, 312, 379, 342,
	-164, -164, -164, 5, 197, 142, 196, -205, 196, -205,
	-205, 7, -339, -134, 378, 346, -163, 379, -293, -275,
	-236, -241, -236, -293, -275, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, 99, 206, 212, -237, 383, -178,
	-242, -241, -236, -236, -275, 379, 379, 379, -177, -236,
	-236, -236, 379, 7, -52, -189, 137, -272, 383, -189,
	-196, 378, -236, -266, 377, 379, 383, -262, 377, 383,
	386, 359, -263, 378, -167, -261, 316, 316, 108, 206,
	337, -315, -312, -236, -166, -265, -134, -326, 378, -323,
	-324, -140, 378, 378, -118, 102, 281, -209, 108, -123,
	108, -123, 316, -208, 68, -239, -140, -134, -177, 316,
	-239, -177, 316, -239, -107, 132, 302, 295, -152, 152,
	-227, 378, -135, 378, 378, -162, -130, 378, -134, -128,
	180, -357, -303, -329, -193, -193, -180, 207, 67, 379,
	-228, -182, -172, -259, 379, -108, 75, -108, 7, 377,
	379, -106, 218, -105, -134, 5, -134, -300, -134, -142,
	217, 379, -119, -300, 26, 26, -236, -247, 379, -236,
	-236, 379, -236, 377, -236, 5, -236, 379, 379, 379,
	379, -340, -134, -236, 379, 379, 379, -242, 132, 99,
	212, 378, -236, 379, 379, 383, 379, 379, 379, 379,
	-244, 139, 44, -266, -244, -167, -233, 7, -234, -300,
	376, -262, -167, 379, -134, -134, -226, 108, -316, 68,
	-317, 57, 116, 73, 206, 208, 328, 238, 54, 93,
	247, 379, 379, 383, -141, -185, 57, -141, -236, 378,
	-166, -167, 206, 93, 206, 93, 86, 324, -134, -134,
	-142, -134, -134, 378, 379, -142, 379, -134, -306, 313,
	-153, -154, 229, 150, -166, 378, -167, -150, 30, -166,
	216, -129, 179, -357, -303, -126, -220, 378, 216, -67,
	-193, 359, 86, 86, 377, 383, 378, 359, 359, -119,
	-236, -236, 379, 379, -164, -334, 229, 379, -237, 132,
	378, -247, 379, -236, -335, 347, -236, -177, -335, 379,
	-263, 7, 379, -226, -134, -300, -134, 116, 147, 208,
	175, 378, -237, -142, -225, -353, 72, 299, -265, -119,
	-300, -119, 379, -177, 379, 379, 208, 208, -236, -275,
	-123, -123, 316, 316, -177, 316, 316, -239, 44, 227,
	379, -166, 379, 379, -67, 379, -142, -357, -303, -127,
	100, -167, 68, -188, -111, 378, 378, 378, -105, -106,
	-305, -305, 379, -164, 44, -237, -247, 379, 379, -336,
	-337, -134, -262, 377, -317, -135, 206, -236, -136, 378,
	-152, 378, -141, -164, 247, -122, 57, -134, -134, -164,
	378, 378, 188, 242, -142, -225, 379, -152, -225, 378,
	-303, -128, 330, 207, 379, -134, -306, -306, 379, -341,
	242, 267, -177, 379, 383, 30, 108, 379, -318, 194,
	-134, -167, -119, 379, -142, -117, 335, -300, 379, -177,
	-177, 378, 378, 378, -152, -225, -152, -166, -129, 281,
	-228, 379, 379, 379, -342, -343, 36, 325, 77, -236,
	-342, -337, -339, 116, -319, -322, -321, 216, 133, 228,
	286, 379, 379, -162, -236, 379, 379, -167, -167, -167,
	-152, 379, -181, -107, -107, -343, 235, 128, 266, 235,
	128, -134, -321, 216, -322, 216, 330, 96, -318, 379,
	379, 379, -225, -228, 26, -320, 203, 259, 48, 281,
	-320, -319, 378, 378, -124, 48, 259, -152, -343, 20,
	208, 93, -155, 229, -156, 229, 379, -300, 379, -300,
	340, 340, -157, 378, 184, 383, -154, -153, -158, -159,
	-236, 93, 195, 311, -155, 378, 383, 379, 383, 378,
	-158, -155, -159, -158, 379, 379, 383, -154, -153, -156,
	383, -156,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 312, 0, 159, 161, -2,
	0, 0, 0, 182, 183, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 676, -2, 0, 292,
	294, 303, 305, 307, 309, 310, 0, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 377, 379,
	381, 383, 384, 386, 388, 390, 0, 597, 599, 601,
	-2, 65, 66, 67, 68, 69, 70, 78, 79, 80,
	81, 72, 74, 75, 77, 0, 163, 165, 167, 169,
	172, 714, 186, 188, 190, 192, -2, 725, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 691, 693,
	695, 697, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 43, 49, 51, 53, 56, 58, 60, 62, 64,
	0, 0, 0, 0, 0, 0, 125, 276, 0, 1300,
	1224, 1230, 1231, 1255, 1256, 1257, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 151, 153,
	154, 0, 0, 0, 1226, 1300, 160, 162, 0, 0,
	0, 0, 0, 564, 267, 1362, 269, 271, 0, 0,
	0, 0, 176, 177, 178, 179, 180, 181, 184, 185,
	0, 0, 0, 0, 0, 266, 264, 215, 216, 0,
	249, 250, 251, 252, 253, 255, 219, 221, 222, 224,
	226, 228, 230, 232, 234, 235, 237, 239, 240, 242,
	244, 245, 247, 565, 0, 0, 0, 0, 273, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 0,
	131, 0, 467, 262, 260, 0, 127, 0, 594, 0,
	275, 595, 596, 591, 592, 1389, 620, 293, 295, 304,
	306, 308, -2, -2, 1483, -2, 319, -2, 327, 1489,
	0, 330, 331, 334, -2, 211, 356, 358, 360, 362,
	364, 366, 368, 370, 372, 374, 376, 378, 380, 382,
	385, 387, 389, 391, 392, 0, 0, 0, 396, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 395,
	397, 398, 399, 0, 598, 600, 602, 0, 553, 716,
	0, 0, 164, 166, 168, 170, 173, -2, 689, 690,
	187, 189, 191, 193, -2, 0, 720, 720, 720, 0,
	0, 690, 688, 0, 296, 0, 298, 0, 396, 301,
	302, 335, 336, 1209, 1210, 926, 0, 0, 0, 0,
	0, 0, 1028, 1030, 1454, 1483, 0, 1032, 1033, 0,
	1035, 1037, 1038, 0, 1041, 1042, 1194, 1226, 1240, 1241,
	1242, 1243, 0, 0, 1246, 0, 1248, 1249, 1250, 1096,
	1052, -2, -2, 1238, 854, 855, 856, 857, -2, 1497,
	1056, 1059, 1062, 1065, 1066, 1069, 1070, 0, 1438, 1455,
	1456, 1479, 1480, 1488, 1492, 1493, 1462, 1476, 1463, 1450,
	1460, 1474, 1306, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1264, 888,
	889, 894, 895, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 897, 622,
	604, 613, 622, 606, 607, 608, 609, 610, 611, 612,
	615, 0, 706, 1368, 709, 1237, 707, 692, 694, 0,
	696, 0, 0, 700, 722, 721, 760, 761, 0, 704,
	705, 715, 776, 814, 791, 782, 0, 0, 2, 71,
	0, 1462, 814, 73, 0, 1462, 814, 76, 0, 82,
	0, 1462, 1229, 0, 1269, 1270, 1271, 1272, 1273, 1497,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 0, 0, 277, 278, 1234, 1232, 1233, 0, 155,
	156, 157, 158, 0, 0, 1227, 1203, 1201, 1202, 171,
	532, 1462, -2, 1462, 556, 132, 133, 353, 354, 1265,
	1266, 1267, 1268, 532, 560, -2, 713, 1462, 636, 268,
	270, 0, 175, 0, 649, 0, 651, 0, 666, 820,
	117, 1462, 196, 209, 117, 1462, 199, 117, 1462, 202,
	1222, 117, 1462, 205, 206, 1462, 208, 134, 263, 0,
	0, -2, 256, 258, -2, 254, 220, 223, 225, 227,
	229, 231, 233, 236, 238, 241, 243, 246, 248, -2,
	0, 0, 0, 466, 0, 0, 0, 593, 0, 619,
	311, 0, 316, 0, 318, 1449, -2, -2, 322, 623,
	627, 628, 629, 0, 0, 0, 0, 0, 0, 0,
	332, 212, 0, 393, 394, 402, 403, 0, 406, 427,
	439, 0, 0, 410, 412, 465, 414, 0, 0, 416,
	0, 418, 0, 420, 0, 422, 0, 424, 426, 428,
	440, 430, 715, 432, 0, 434, 438, 0, 443, 0,
	445, 446, 447, 0, 0, 453, 0, 0, 400, 401,
	117, 818, 0, 0, 0, -2, 0, 733, 758, 0,
	736, 737, 0, 0, 0, 0, 718, 719, 0, 0,
	0, 678, 679, 297, 0, 300, 0, 0, 0, 0,
	1129, 1130, 1131, 1132, 1133, 1134, 1137, 1138, 1135, 1136,
	1139, 1140, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 1142, 1143, 1144, 0,
	0, 1146, 0, 1148, 0, 0, 0, 0, 0, 0,
	1208, 0, 0, 1145, 931, 932, 933, 965, 966, 0,
	1029, 1205, 1198, 1031, 0, 1151, -2, 1152, 0, 0,
	1034, 1039, 1040, 1151, 0, 1193, -2, 0, 1245, 0,
	923, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1174, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 891, 902, 899, 898, 875, 0,
	874, 872, 0, 876, 0, 0, 0, 603, -2, 605,
	0, 617, 0, 708, 0, 0, 762, 765, 1214, 1218,
	1219, 765, 0, 1211, 0, 0, 0, 0, 811, 811,
	811, 809, 785, 0, 791, 0, -2, 815, 803, 0,
	-2, 782, 0, 0, 816, 0, 83, 588, 96, 0,
	588, 588, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 805,
	1225, 0, 1199, 1200, 147, 0, 0, 1220, 1204, 473,
	0, 0, 554, 0, 712, 0, 0, 0, 0, 1462,
	563, 1258, 638, 0, 824, 0, 652, 0, 0, 821,
	0, 194, 0, 115, 116, 0, 197, 0, 200, 0,
	0, 203, 0, 0, 0, 0, 1152, 715, 0, 0,
	282, 0, 0, 715, 0, 1154, 832, 833, 834, 835,
	836, 923, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 885, 0,
	860, 860, 860, 877, 878, 886, 887, 892, 893, 904,
	905, 907, 909, 903, 903, 903, 900, 901, 805, 0,
	0, 0, 0, -2, 324, 0, 625, 0, 630, 344,
	345, 346, 632, 633, 328, 347, 348, 349, 350, 351,
	352, 0, 549, 0, 551, 1251, 0, 325, 337, 326,
	329, 0, 213, 404, 405, 407, 408, 409, 413, 0,
	462, 415, 417, 419, 421, 423, 431, 435, 715, 441,
	444, 448, 449, 450, 451, 0, 0, 0, 552, 0,
	313, 0, 457, 0, 733, 758, 682, 732, 683, 757,
	759, 734, 735, 740, 744, 745, 748, 751, 752, 742,
	926, 701, 702, 703, 726, 727, 575, 0, 0, 299,
	927, 828, 829, 879, 880, 881, 882, 883, 928, 929,
	0, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, -2, -2, -2, -2, -2, -2, -2, -2, 952,
	953, 954, 955, 956, 957, 958, 959, -2, -2, -2,
	963, 964, -2, 1147, 1149, 0, 1208, 0, -2, 0,
	-2, -2, -2, -2, 977, 0, 979, 982, 984, 986,
	0, 0, 0, 0, 1207, 996, 1185, 0, 0, 1126,
	1127, 1128, 981, 0, 0, 1206, 1197, 0, 0, 1150,
	1036, 0, 0, 0, 1158, 1192, 1188, 0, 1043, 725,
	0, 0, 0, 0, 1050, 0, 1254, 910, 911, 912,
	913, 914, 915, 924, 1106, 0, 0, 0, 1057, 1058,
	1060, 1061, 1063, 1064, 1067, 1068, 0, 0, 0, 1074,
	0, 1161, -2, -2, -2, -2, -2, -2, -2, 0,
	1076, 0, 1078, 1152, 1171, 0, 0, 999, 0, 0,
	0, 0, 1483, 0, 1081, 1152, 1179, 0, 0, 0,
	0, 0, 1152, 0, 1184, 0, 0, 0, 0, 0,
	1092, 0, 1094, 0, 0, 0, 0, 0, 0, 616,
	710, 0, 0, 824, 0, 0, 0, 1217, 824, 0,
	1213, 0, 0, 0, 0, 0, 806, 810, 807, 808,
	0, 0, 791, 803, 773, 0, 0, 0, 780, 781,
	802, 0, 801, 790, -2, 0, 0, 0, 0, 0,
	587, 98, 1462, 0, 119, 0, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 1228, 0, 137, 0, 1235, 0, 0, 0, 0,
	0, 472, 1234, 474, 476, 477, 478, 479, 1259, 0,
	1259, 0, 0, 0, 0, 0, 0, 0, 640, 646,
	0, 739, 0, 664, 654, 0, 0, 0, 664, 668,
	669, 671, 672, 0, 0, 822, 210, 117, 117, 1223,
	117, 117, 135, 207, 265, 0, 217, 257, 0, 0,
	0, 259, 0, 0, 261, 0, 825, 827, 0, 837,
	0, 146, 0, 0, 0, 317, 0, 624, 631, 0,
	341, 0, 343, 550, 1253, 1252, 0, 214, 464, 290,
	433, 436, 459, 460, 461, 819, 0, 458, 686, 687,
	0, 746, 0, 0, 743, 749, 750, 0, 729, 573,
	574, 0, 0, 0, -2, -2, 0, 0, 0, 997,
	-2, 978, 980, 983, 985, 987, 0, 0, 0, 0,
	0, 0, 0, 998, 1151, 0, 1195, 1198, -2, 1153,
	1156, 1157, 0, 0, 1189, 0, 0, 0, 0, 724,
	725, 725, 725, 1049, 0, 0, 0, 0, 0, 0,
	1051, 0, 0, 0, 0, 0, 0, 1073, 0, 1075,
	1077, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 1003, 1004,
	0, 1151, 1080, 1177, 1178, 0, 0, 0, 0, 0,
	0, 1086, 0, 1183, 0, 0, 0, 1090, 1091, 1093,
	0, 858, 0, 884, 906, 908, 896, 715, 1236, 754,
	1215, 805, 764, 766, 1216, 754, 1212, 793, 0, 795,
	0, 0, 0, 797, 0, 786, 0, 788, 803, 778,
	0, 0, 771, 0, 770, 791, 799, 0, 0, 817,
	97, 577, 0, 0, 0, 100, 1462, 108, 0, 504,
	0, 0, 0, 0, 0, 590, 109, 1462, 117, 1462,
	117, 110, 84, 588, 85, 0, 0, 583, 0, 0,
	576, 86, 0, 585, 0, 0, 146, 0, 0, 148,
	0, 1221, 481, 531, 0, 0, 1259, 0, 470, 532,
	557, -2, 559, 0, 0, 642, 646, 0, 645, 713,
	664, 738, 823, 647, 664, 0, 0, 0, 656, 653,
	650, 824, 0, 0, 0, 0, 195, 198, 201, 204,
	1153, 272, 0, 0, 1155, 0, 830, 0, 0, 126,
	0, 274, 314, 315, 320, 339, 340, 342, 338, 0,
	0, 0, 0, 0, 0, 728, 575, 0, 930, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1186, 0,
	0, 0, 1197, -2, 1159, 1187, 1191, 0, 1044, 0,
	0, 0, 0, 1247, 916, 917, 918, 919, 920, 921,
	922, 0, 1104, 1105, 1109, 0, 0, 1055, 0, 0,
	1160, 1170, 1172, 1000, 1001, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, -2, -2, -2, 1018, 1019,
	1020, -2, -2, -2, 0, 0, 0, 1173, 0, 0,
	1175, 1176, 1180, 1181, 0, 1083, 1084, 1085, 1182, 0,
	0, 0, 890, 0, 0, 756, 0, 763, 0, 756,
	794, 0, 813, 796, 776, 787, 0, 784, 774, 0,
	775, 0, 803, 0, 0, 783, 0, 0, 0, 0,
	118, 502, 521, 0, 0, 566, 572, 572, 0, 1053,
	1054, 0, 0, 0, 102, 0, 0, 0, 0, 106,
	0, 112, 0, 0, 0, 91, 0, 0, 0, 0,
	90, 0, 0, 89, 124, 0, 0, 149, 486, 0,
	475, 0, 0, 0, 473, 0, 555, 0, 0, 644,
	646, 0, 637, 638, 174, 648, 662, 663, 661, 0,
	664, 670, 667, 673, 0, 0, 128, 0, 0, 831,
	838, 144, 1352, 142, 139, 141, 291, 454, 455, 456,
	741, 747, 730, 575, 0, 0, -2, 0, 990, -2,
	-2, 1122, 1153, 1196, 1190, 1244, 725, 1045, 1047, 1048,
	925, 1111, 1108, 0, 1095, 1071, 1072, 1169, 0, 0,
	0, 0, 1153, 1124, 1082, 0, 1088, 1089, 859, 711,
	1100, 0, 0, 767, 1100, 0, 791, 789, 772, 768,
	0, 779, 0, 800, 579, 581, 99, 0, 503, 0,
	506, 0, 0, 0, 0, 512, 513, 0, 0, 0,
	0, 523, 530, 0, 575, 1239, 0, 575, 0, 0,
	0, 0, 0, 114, 0, 0, 589, 0, 117, 117,
	578, 0, 0, 0, 0, 584, 0, 586, 136, 0,
	468, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 634, 646, 0, 639, 640, 0, 0, 0, 655,
	665, 0, 0, 0, 826, 0, 0, 0, 0, 731,
	-2, -2, 991, 1123, 0, 725, 0, 1097, -2, 0,
	0, 0, 1125, 0, 698, 0, 755, 753, 699, 812,
	803, 0, 798, 101, 0, 507, 508, 1259, 0, 511,
	514, 0, 516, 1261, 481, 0, 527, 528, 567, 568,
	571, 569, 572, 725, 525, 0, 103, 104, 113, 121,
	105, 111, 0, 0, 725, 0, 0, 804, 0, 0,
	530, 0, 520, 481, 471, 530, 0, 0, 641, 642,
	0, 0, 0, 674, 675, 0, 0, 0, 143, 0,
	138, 140, 1046, 1114, 0, -2, 0, 1026, 1087, 1099,
	1101, 0, 777, 769, 505, 509, 0, 0, 536, 0,
	524, 0, 575, 0, 0, 123, 0, 580, 582, 0,
	0, 0, 0, 0, 0, 481, 530, 469, 481, 0,
	643, 644, 0, 658, 824, 660, 0, 0, 145, 0,
	0, 0, 1110, 1027, 0, 0, 0, 515, 541, 0,
	0, 0, 570, 1044, 532, 107, 0, 120, 0, 0,
	0, 0, 0, 0, 518, 481, 561, 0, 635, 0,
	659, 146, 146, 1107, 1112, 1115, -2, 1422, 1297, 0,
	1113, 1102, 1103, 0, 517, 537, 538, 0, 533, 534,
	535, 1260, 529, 536, 122, 93, 95, 0, 0, 0,
	519, 530, 824, 129, 130, 0, 1117, 1118, 1119, 1120,
	1121, 510, 539, 0, 540, 0, 0, 0, 541, 0,
	0, 484, 481, 657, 0, 542, 0, 545, 546, 0,
	543, 526, 0, 0, 480, 482, 483, 562, 1116, 544,
	547, 548, 0, 0, 0, 0, 487, 0, 488, 0,
	0, 0, 486, 0, 0, 0, 485, 491, 0, 494,
	496, 497, -2, 0, 489, 0, 0, 492, 0, 0,
	0, 490, 495, 0, 493, 486, 0, 485, 501, 499,
	0, 500,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	357, 359, 358, 361, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 362, 57701, 363, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:899
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:905
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:911
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:968
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1082
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1088
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1097
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1106
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1175
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1198
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1271
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1275
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1302
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1328
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1435
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "CREATE")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DELETE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			return helpWith(sqllex, "DROP")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "DELETE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "INSERT")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{ /* SKIP DOC */
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "GRANT")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{ /* SKIP DOC */
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{ /* SKIP DOC */
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			return unimplemented(sqllex, "set local")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2001
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2056
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			return unimplemented(sqllex, "set from current")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = Low
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = Normal
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = High
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SHOW")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.str = "client_encoding"
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2399
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2430
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2452
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2490
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2494
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2500
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2504
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2508
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2514
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2649
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2653
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = DropDefault
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			return unimplemented(sqllex, "match full")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			return unimplemented(sqllex, "match partial")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			return unimplemented(sqllex, "match simple")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2977
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = NoAction
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = Restrict
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = Cascade
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = SetNull
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = SetDefault
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = nil
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3143
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = true
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = false
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3174
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3178
		{
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = Ascending
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = Descending
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3218
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3220
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = true
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = false
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3291
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.str = ""
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3414
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = ReadOnly
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = ReadWrite
		}
	case 634:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.str = ""
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.str = ""
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.str = ""
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.str = ""
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3522
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			return helpWith(sqllex, "INSERT")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 665:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3645
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3817
		{
			return helpWith(sqllex, "SELECT")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			return helpWith(sqllex, "VALUES")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3819
		{
			return helpWith(sqllex, "TABLE")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			return helpWith(sqllex, "SELECT")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3910
		{
			return helpWith(sqllex, "TABLE")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3930
		{
			return unimplemented(sqllex, "cte")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3933
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3934
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3937
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3938
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3941
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3942
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = true
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = false
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = false
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = true
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3966
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4020
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4097
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = false
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4172
		{
			return helpWith(sqllex, "VALUES")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4189
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &From{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4211
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4256
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4293
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = nil
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4365
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = true
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = false
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.str = astFullJoin
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.str = astLeftJoin
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.str = astRightJoin
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.str = astInnerJoin
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4477
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4577
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4609
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4620
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = jsonbColType
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = jsonColType
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4709
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4718
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = nil
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4783
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4879
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4911
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4951
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = year
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = month
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = day
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = hour
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = minute
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = month
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = hour
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = minute
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = minute
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = nil
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = second
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5046
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5081
		{
			return unimplemented(sqllex, "at tz")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5528
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5541
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5581
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5582
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5595
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5606
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5627
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5636
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5645
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5654
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			return unimplemented(sqllex, "current role")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5664
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5685
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5690
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5695
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5705
		{
			return unimplemented(sqllex, "treat")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5751
		{
			return unimplemented(sqllex, "within group")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5752
		{
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5787
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.str = ""
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5849
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5850
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5851
		{
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5854
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5855
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5861
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5862
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5863
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5864
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5865
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = Any
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = Some
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = All
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = Plus
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = Minus
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = Mult
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = Div
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = Mod
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = Bitand
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = Bitor
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = Pow
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = Bitxor
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = LT
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = GT
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = EQ
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = LE
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = GE
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = NE
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = Like
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = NotLike
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = ILike
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = NotILike
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6220
		{
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6221
		{
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6240
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6274
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6278
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6325
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6339
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6352
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6356
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6360
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6370
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6383
		{
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6393
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6397
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6419
		{
			return unimplemented(sqllex, "func const")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6428
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6430
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = DNull
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6445
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6449
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6455
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.str = ""
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6496
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6500
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
