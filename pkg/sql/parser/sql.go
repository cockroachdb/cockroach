// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5909

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 34,
	357, 34,
	-2, 512,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	1, 484,
	199, 484,
	243, 484,
	353, 484,
	355, 484,
	357, 484,
	-2, 494,
	-1, 114,
	1, 487,
	199, 487,
	243, 487,
	353, 487,
	355, 487,
	357, 487,
	-2, 493,
	-1, 132,
	1, 34,
	357, 34,
	-2, 512,
	-1, 517,
	123, 1095,
	296, 1095,
	339, 1095,
	356, 1095,
	-2, 0,
	-1, 528,
	1, 221,
	357, 221,
	-2, 1100,
	-1, 540,
	112, 522,
	172, 522,
	197, 522,
	-2, 490,
	-1, 548,
	112, 521,
	172, 521,
	197, 521,
	-2, 488,
	-1, 702,
	354, 1025,
	-2, 1018,
	-1, 703,
	354, 1026,
	-2, 1019,
	-1, 709,
	5, 692,
	354, 692,
	-2, 1226,
	-1, 734,
	5, 651,
	-2, 1196,
	-1, 735,
	5, 686,
	354, 686,
	-2, 1198,
	-1, 736,
	5, 661,
	-2, 1199,
	-1, 737,
	5, 660,
	-2, 1200,
	-1, 738,
	5, 686,
	354, 686,
	-2, 1203,
	-1, 739,
	5, 686,
	354, 686,
	-2, 1204,
	-1, 740,
	5, 687,
	-2, 1207,
	-1, 741,
	5, 643,
	-2, 1208,
	-1, 742,
	5, 643,
	-2, 1209,
	-1, 743,
	5, 668,
	-2, 1213,
	-1, 744,
	5, 653,
	-2, 1214,
	-1, 745,
	5, 654,
	-2, 1215,
	-1, 746,
	5, 644,
	-2, 1220,
	-1, 747,
	5, 645,
	-2, 1221,
	-1, 748,
	5, 646,
	-2, 1222,
	-1, 749,
	5, 647,
	-2, 1223,
	-1, 750,
	5, 648,
	-2, 1224,
	-1, 751,
	5, 649,
	-2, 1225,
	-1, 752,
	5, 643,
	-2, 1230,
	-1, 753,
	5, 652,
	-2, 1235,
	-1, 754,
	5, 650,
	-2, 1238,
	-1, 755,
	5, 684,
	354, 684,
	-2, 1240,
	-1, 756,
	5, 688,
	-2, 1243,
	-1, 757,
	5, 690,
	-2, 1244,
	-1, 758,
	5, 683,
	354, 683,
	-2, 1249,
	-1, 802,
	213, 510,
	-2, 384,
	-1, 807,
	112, 521,
	172, 521,
	197, 521,
	-2, 491,
	-1, 910,
	103, 494,
	112, 494,
	153, 494,
	172, 494,
	197, 494,
	203, 494,
	307, 494,
	-2, 578,
	-1, 989,
	103, 494,
	112, 494,
	153, 494,
	172, 494,
	197, 494,
	203, 494,
	307, 494,
	-2, 811,
	-1, 998,
	354, 1002,
	-2, 990,
	-1, 1243,
	1, 579,
	70, 579,
	103, 579,
	112, 579,
	124, 579,
	128, 579,
	130, 579,
	144, 579,
	153, 579,
	160, 579,
	169, 579,
	172, 579,
	184, 579,
	197, 579,
	199, 579,
	203, 579,
	243, 579,
	245, 579,
	307, 579,
	315, 579,
	326, 579,
	327, 579,
	336, 579,
	353, 579,
	355, 579,
	357, 579,
	358, 579,
	-2, 578,
	-1, 1308,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 727,
	-1, 1309,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 728,
	-1, 1310,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 729,
	-1, 1314,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 733,
	-1, 1315,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 734,
	-1, 1316,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 735,
	-1, 1319,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 740,
	-1, 1325,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 742,
	-1, 1327,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 746,
	-1, 1328,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 747,
	-1, 1329,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 748,
	-1, 1330,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 749,
	-1, 1356,
	208, 884,
	-2, 887,
	-1, 1393,
	123, 924,
	354, 1025,
	-2, 1018,
	-1, 1394,
	123, 925,
	-2, 1192,
	-1, 1395,
	123, 926,
	-2, 1099,
	-1, 1396,
	123, 927,
	-2, 1062,
	-1, 1397,
	123, 928,
	-2, 1079,
	-1, 1398,
	123, 929,
	-2, 1098,
	-1, 1399,
	123, 930,
	-2, 1150,
	-1, 1593,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 741,
	-1, 1594,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 743,
	-1, 1599,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 744,
	-1, 1617,
	208, 883,
	-2, 886,
	-1, 1827,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 745,
	-1, 1832,
	156, 0,
	-2, 761,
	-1, 1842,
	208, 885,
	-2, 888,
	-1, 1884,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 788,
	-1, 1885,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 789,
	-1, 1886,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 790,
	-1, 1890,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 794,
	-1, 1891,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 795,
	-1, 1892,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 796,
	-1, 2012,
	156, 0,
	-2, 762,
	-1, 2015,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 765,
	-1, 2016,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 767,
	-1, 2125,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 766,
	-1, 2126,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 768,
	-1, 2133,
	156, 0,
	-2, 797,
	-1, 2190,
	156, 0,
	-2, 798,
	-1, 2260,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1195,
}

const sqlPrivate = 57344

const sqlLast = 32792

var sqlAct = [...]int{

	703, 2259, 2246, 2216, 2288, 2247, 1251, 1922, 2112, 2248,
	2258, 1126, 1259, 1711, 2163, 549, 1928, 1985, 2055, 2000,
	1861, 1728, 693, 1238, 1133, 1486, 1730, 1090, 1919, 67,
	696, 1089, 1274, 1458, 623, 1039, 1813, 1917, 645, 141,
	841, 701, 141, 908, 1814, 1467, 679, 2080, 1563, 141,
	397, 1457, 1530, 1549, 904, 1683, 1959, 141, 1500, 1628,
	399, 1682, 1121, 141, 141, 1040, 1422, 141, 1129, 1287,
	141, 700, 1354, 994, 1283, 1806, 1529, 141, 1273, 1260,
	1771, 1536, 1239, 884, 1191, 381, 25, 1164, 1379, 1245,
	1115, 891, 373, 1482, 1193, 781, 556, 112, 1491, 1419,
	1364, 673, 527, 1342, 567, 1339, 922, 885, 780, 627,
	371, 1373, 814, 1029, 1390, 985, 816, 1277, 573, 672,
	1459, 568, 809, 659, 1226, 895, 141, 141, 1213, 1253,
	615, 505, 141, 823, 1113, 133, 141, 141, 824, 559,
	695, 822, 868, 1025, 525, 523, 554, 114, 2001, 115,
	389, 926, 653, 630, 112, 137, 613, 867, 564, 828,
	509, 521, 1616, 1785, 124, 124, 1786, 553, 1123, 2286,
	637, 553, 917, 1123, 1123, 548, 38, 119, 905, 2269,
	1252, 1256, 1267, 2268, 625, 2266, 1267, 2255, 1999, 110,
	917, 902, 2229, 1246, 2213, 1437, 124, 1444, 1575, 502,
	1740, 508, 2212, 121, 1376, 1444, 1215, 124, 557, 41,
	111, 111, 1574, 2194, 2192, 1774, 2046, 1437, 25, 2181,
	2170, 2146, 1999, 917, 1999, 2127, 1147, 1267, 1437, 112,
	127, 2124, 48, 2207, 917, 2123, 50, 1444, 1999, 113,
	113, 2122, 111, 122, 917, 1620, 56, 56, 57, 57,
	1621, 1377, 2046, 111, 2110, 124, 124, 1999, 2088, 131,
	541, 917, 540, 2085, 1619, 2077, 917, 58, 1267, 1267,
	1246, 113, 59, 59, 2076, 1774, 60, 1267, 56, 576,
	57, 2039, 113, 617, 1267, 2017, 940, 941, 1267, 56,
	2014, 57, 1444, 1437, 1214, 130, 1998, 1378, 1375, 1999,
	1498, 111, 111, 125, 59, 1972, 1741, 1897, 917, 943,
	126, 1836, 1839, 1805, 1267, 59, 1250, 1800, 1781, 917,
	1250, 1782, 1267, 1582, 1721, 1700, 1627, 917, 1701, 116,
	113, 113, 1698, 942, 1485, 1267, 1454, 56, 56, 57,
	57, 1697, 1696, 1617, 1267, 1267, 1267, 127, 1097, 1358,
	1581, 940, 941, 1582, 1552, 1526, 61, 1267, 917, 880,
	141, 1124, 62, 59, 59, 141, 1124, 1124, 1446, 635,
	663, 1267, 1380, 573, 943, 1436, 131, 622, 1437, 2002,
	69, 70, 63, 132, 64, 641, 65, 1266, 123, 1249,
	1267, 1544, 1250, 66, 948, 570, 127, 127, 942, 1119,
	1493, 795, 554, 2270, 76, 1220, 118, 118, 1219, 909,
	934, 2257, 130, 935, 2253, 127, 120, 2223, 1653, 1654,
	125, 1671, 1672, 1673, 2187, 131, 131, 126, 127, 835,
	1585, 2144, 1180, 1574, 2011, 2044, 2040, 2032, 118, 127,
	2031, 1214, 2030, 678, 131, 98, 1255, 938, 2026, 118,
	1374, 2025, 2024, 2023, 117, 1653, 1654, 131, 1958, 948,
	1916, 130, 130, 1977, 1912, 1907, 1906, 1905, 131, 125,
	125, 1668, 1442, 1002, 654, 1132, 126, 126, 1145, 1847,
	130, 2166, 1720, 1140, 1122, 355, 1705, 127, 127, 1702,
	1690, 1681, 1652, 130, 660, 116, 116, 118, 118, 1649,
	141, 125, 1648, 1646, 130, 644, 1633, 141, 126, 1632,
	1556, 1387, 125, 1386, 116, 1863, 131, 131, 958, 126,
	1385, 141, 835, 1350, 1243, 907, 1659, 116, 995, 573,
	116, 141, 906, 642, 834, 141, 141, 141, 116, 141,
	2230, 2206, 2205, 2198, 141, 141, 141, 141, 141, 2183,
	2179, 2167, 130, 130, 2135, 2107, 808, 2099, 2098, 2097,
	125, 125, 2047, 1659, 1674, 2037, 2005, 126, 126, 564,
	1997, 1926, 1924, 940, 941, 628, 1831, 1825, 1824, 573,
	1821, 820, 1811, 1789, 1777, 1669, 116, 372, 1764, 1762,
	1586, 959, 1709, 1680, 1642, 1641, 943, 1638, 1613, 1608,
	807, 1344, 664, 1589, 1554, 1525, 840, 1030, 1033, 141,
	141, 141, 141, 141, 1429, 141, 1384, 1231, 1976, 791,
	942, 944, 945, 946, 947, 949, 950, 940, 941, 1351,
	1439, 1125, 141, 141, 1037, 573, 141, 800, 1023, 803,
	797, 1022, 399, 1586, 141, 1021, 811, 811, 1020, 1019,
	943, 141, 141, 141, 1405, 141, 1018, 889, 1670, 1017,
	1016, 554, 915, 141, 1015, 779, 1014, 812, 1013, 1012,
	1011, 771, 1010, 1009, 942, 1008, 995, 1007, 641, 1006,
	999, 948, 776, 924, 912, 952, 944, 945, 946, 947,
	949, 950, 918, 988, 116, 761, 624, 883, 775, 766,
	657, 2045, 2019, 888, 541, 1915, 540, 554, 1784, 1780,
	1232, 831, 832, 1707, 986, 907, 1731, 790, 2049, 872,
	788, 1201, 878, 112, 932, 1653, 1654, 875, 2048, 1980,
	1787, 1576, 939, 571, 1481, 1246, 909, 903, 839, 1542,
	871, 1199, 1480, 1035, 991, 1665, 1666, 1667, 1036, 1704,
	1664, 1662, 1663, 1655, 1656, 1657, 1658, 1660, 1661, 1200,
	654, 869, 1703, 789, 643, 1592, 787, 772, 573, 1103,
	141, 881, 1004, 2081, 1376, 141, 1712, 1130, 1653, 1654,
	1252, 1671, 1672, 1673, 1864, 911, 1365, 1026, 1942, 573,
	573, 916, 1657, 1658, 1660, 1661, 399, 1046, 936, 611,
	546, 863, 538, 925, 928, 141, 1570, 1624, 655, 2235,
	1271, 1194, 2277, 1195, 937, 1131, 907, 361, 1112, 2169,
	2278, 1377, 1001, 1284, 1194, 2070, 1195, 1653, 1654, 564,
	564, 1668, 608, 1447, 602, 607, 603, 998, 858, 1717,
	864, 2161, 1094, 2160, 141, 2159, 1120, 2158, 141, 1957,
	141, 141, 141, 141, 141, 141, 1031, 610, 545, 1468,
	141, 1956, 1939, 1938, 141, 141, 1034, 1378, 1375, 1637,
	362, 141, 1139, 1636, 1136, 1142, 1635, 1144, 1634, 1595,
	1668, 141, 1027, 1028, 141, 1523, 1659, 1194, 1196, 1195,
	788, 1286, 1502, 1502, 1522, 1520, 1326, 141, 1953, 1501,
	1104, 1196, 1270, 870, 760, 1091, 399, 634, 1974, 141,
	946, 947, 949, 950, 1433, 141, 708, 1212, 141, 1093,
	1092, 1096, 1189, 1432, 1116, 1297, 531, 1109, 1108, 1188,
	141, 499, 141, 789, 552, 1659, 573, 1794, 1708, 2168,
	141, 2114, 1380, 399, 1795, 1669, 1168, 1341, 1233, 1223,
	1138, 1341, 1560, 1440, 112, 920, 1234, 1170, 1151, 774,
	763, 2210, 1150, 929, 1196, 1348, 762, 950, 1181, 2283,
	1346, 1046, 1046, 1237, 655, 1944, 541, 1380, 1160, 541,
	541, 1161, 1162, 860, 551, 1174, 705, 390, 1564, 817,
	1285, 2226, 1171, 1296, 1669, 1175, 1176, 1177, 1178, 1179,
	609, 544, 1190, 534, 1483, 1484, 1288, 1295, 1185, 1186,
	395, 1210, 1254, 2186, 1254, 2227, 391, 1218, 1670, 2297,
	1374, 1769, 1323, 1224, 1228, 1229, 1760, 539, 1653, 1654,
	547, 112, 535, 1365, 553, 364, 363, 924, 2277, 612,
	543, 1450, 536, 392, 855, 1268, 1766, 1568, 861, 1208,
	1207, 1718, 1452, 874, 817, 1355, 655, 660, 1258, 1269,
	1272, 1024, 1359, 394, 1463, 1661, 1367, 1670, 1205, 1362,
	1857, 2131, 1187, 1453, 532, 628, 913, 1507, 1392, 1392,
	1403, 856, 1414, 1716, 1204, 1451, 784, 923, 1426, 1427,
	1428, 1564, 2143, 983, 655, 927, 927, 844, 1123, 2250,
	1352, 862, 1192, 1349, 1202, 1665, 1666, 1667, 1197, 2282,
	1664, 1662, 1663, 1655, 1656, 1657, 1658, 1660, 1661, 1640,
	399, 1197, 1203, 141, 1321, 1324, 141, 1400, 1227, 1951,
	1499, 1435, 1242, 141, 845, 112, 1659, 843, 550, 1945,
	533, 141, 141, 365, 141, 1380, 141, 141, 399, 141,
	141, 785, 553, 2115, 1933, 786, 2249, 1320, 1441, 1664,
	1662, 1663, 1655, 1656, 1657, 1658, 1660, 1661, 141, 2276,
	1455, 2274, 2054, 393, 141, 1854, 1465, 1605, 849, 1443,
	769, 662, 2291, 1477, 1197, 1031, 2251, 1034, 141, 141,
	141, 511, 1603, 1653, 1654, 141, 827, 1597, 1475, 141,
	1559, 1340, 2153, 2152, 2105, 2176, 1448, 141, 2281, 512,
	141, 1941, 2298, 2302, 1347, 666, 141, 399, 1751, 1747,
	1527, 1855, 141, 141, 1466, 1532, 141, 1503, 396, 1028,
	1027, 141, 1456, 1893, 141, 2035, 1107, 1106, 2069, 570,
	565, 141, 2252, 1470, 811, 2068, 811, 1137, 2066, 1127,
	1853, 141, 1322, 1337, 1508, 1510, 141, 1546, 141, 1474,
	1479, 688, 1473, 1600, 1471, 141, 1472, 1531, 1335, 826,
	513, 141, 573, 1601, 1534, 1535, 1545, 1606, 1540, 112,
	141, 1156, 141, 141, 2217, 554, 1515, 1555, 1184, 1518,
	1550, 1124, 1098, 1494, 1929, 2056, 1380, 826, 2106, 1580,
	138, 1659, 1566, 356, 1584, 1496, 1587, 1572, 1513, 1046,
	358, 1533, 1506, 1541, 898, 2301, 1993, 784, 370, 1524,
	2289, 1110, 1528, 1521, 501, 138, 1591, 1894, 507, 825,
	1539, 507, 1590, 1895, 901, 2036, 1102, 366, 529, 1331,
	628, 1489, 1222, 652, 1583, 2067, 1221, 1332, 2065, 1333,
	1225, 1994, 1157, 1338, 827, 503, 1551, 825, 1244, 899,
	1669, 500, 1569, 1655, 1656, 1657, 1658, 1660, 1661, 1579,
	514, 1577, 651, 1263, 554, 2290, 551, 367, 804, 1923,
	1100, 2050, 1558, 1626, 1602, 894, 1083, 616, 616, 2103,
	1960, 1604, 1101, 356, 1772, 1383, 2292, 138, 638, 2134,
	647, 1685, 646, 385, 33, 1111, 134, 368, 2034, 369,
	1684, 1611, 1830, 1793, 2104, 384, 32, 1647, 1614, 380,
	29, 383, 17, 1607, 377, 13, 379, 16, 1598, 1596,
	378, 14, 1561, 1670, 3, 900, 1630, 1631, 1182, 898,
	554, 376, 12, 1519, 1516, 573, 141, 1612, 515, 382,
	10, 1989, 1445, 1990, 1248, 573, 866, 865, 859, 901,
	1334, 854, 1077, 141, 1623, 853, 141, 1336, 1046, 852,
	141, 851, 1713, 375, 8, 896, 850, 1679, 847, 601,
	516, 374, 4, 1992, 899, 767, 650, 1173, 1692, 1005,
	141, 1046, 1995, 857, 1382, 564, 2245, 2214, 2064, 897,
	141, 141, 141, 1706, 1949, 1947, 141, 1940, 1727, 141,
	141, 141, 141, 141, 1538, 1469, 1687, 1688, 1689, 1462,
	1209, 141, 1206, 141, 141, 1198, 1583, 1663, 1655, 1656,
	1657, 1658, 1660, 1661, 1733, 1734, 33, 1735, 1748, 639,
	141, 640, 636, 1715, 1714, 1719, 141, 1722, 32, 1149,
	1725, 1148, 29, 1146, 17, 141, 141, 13, 1143, 16,
	900, 1141, 1844, 14, 1729, 1723, 655, 633, 2092, 1783,
	1991, 1792, 1736, 1738, 12, 141, 141, 571, 566, 2278,
	1801, 1487, 10, 141, 1982, 1981, 141, 1742, 1790, 817,
	817, 829, 1779, 1743, 620, 1118, 1788, 1807, 1759, 1502,
	1761, 604, 605, 1763, 386, 1511, 8, 2094, 894, 1820,
	1812, 1490, 1512, 1775, 4, 1799, 1798, 1776, 1770, 1773,
	2202, 648, 112, 1502, 2002, 846, 356, 2189, 1819, 1509,
	1537, 1495, 817, 1497, 940, 941, 1077, 1077, 1791, 1046,
	1961, 141, 655, 1488, 1833, 1849, 1850, 1851, 1796, 833,
	817, 1517, 1803, 655, 1802, 1514, 2208, 1808, 1818, 628,
	2052, 1809, 898, 1822, 830, 628, 628, 621, 1804, 628,
	504, 1076, 1464, 1461, 1257, 1046, 1046, 1211, 1095, 1038,
	1837, 942, 901, 1045, 1046, 1046, 2295, 2300, 2087, 1840,
	1653, 1654, 940, 941, 1562, 1843, 940, 941, 896, 923,
	837, 836, 1865, 1966, 1914, 1913, 1860, 899, 923, 837,
	1288, 1868, 1870, 141, 1867, 943, 1710, 1046, 1699, 1288,
	1873, 1547, 897, 1872, 1856, 1858, 1859, 1079, 141, 1434,
	1431, 573, 1430, 1078, 1372, 1925, 511, 992, 1900, 942,
	838, 399, 141, 2021, 1852, 1901, 1724, 1898, 1002, 1000,
	142, 773, 1904, 1042, 512, 530, 1930, 2113, 1908, 388,
	1172, 529, 848, 1543, 1230, 1935, 2225, 2027, 770, 1639,
	2162, 1931, 2130, 1381, 1003, 141, 49, 759, 141, 1816,
	682, 1983, 529, 900, 1810, 1276, 1275, 402, 399, 141,
	141, 1936, 356, 1105, 573, 704, 529, 802, 529, 558,
	805, 1932, 1391, 1289, 764, 529, 529, 356, 818, 638,
	400, 1964, 1970, 706, 1043, 513, 707, 1044, 1948, 1952,
	1950, 1032, 141, 1971, 694, 1973, 141, 1962, 1041, 1954,
	658, 1955, 1963, 1261, 1820, 1965, 2003, 401, 1968, 1967,
	1345, 387, 1363, 1622, 996, 1076, 1076, 1820, 1996, 674,
	1979, 686, 685, 1819, 1360, 2006, 765, 1045, 1045, 2009,
	1548, 2008, 1046, 1567, 141, 1975, 1819, 2013, 574, 1155,
	507, 356, 356, 877, 356, 1478, 616, 1152, 1946, 537,
	1650, 656, 1412, 1818, 1404, 1401, 1978, 796, 390, 890,
	984, 1262, 794, 356, 356, 575, 1818, 138, 1573, 1438,
	882, 1079, 1079, 1163, 619, 356, 618, 1078, 1078, 1726,
	792, 395, 356, 356, 356, 514, 930, 391, 1099, 1449,
	977, 976, 606, 2178, 138, 141, 2033, 1042, 1042, 783,
	782, 573, 1128, 1739, 1750, 2296, 2201, 1943, 2234, 141,
	141, 141, 129, 1744, 392, 128, 1557, 75, 141, 1820,
	141, 31, 141, 141, 141, 30, 2057, 141, 141, 94,
	93, 92, 2060, 2053, 394, 91, 90, 1768, 1819, 89,
	88, 2058, 87, 2063, 1077, 86, 2051, 141, 2059, 85,
	84, 83, 82, 628, 81, 141, 80, 399, 141, 79,
	78, 510, 77, 515, 1609, 1610, 141, 2090, 1818, 526,
	74, 73, 72, 399, 71, 28, 24, 97, 23, 2086,
	2093, 2084, 21, 22, 27, 2095, 26, 19, 1263, 628,
	1820, 2089, 1820, 18, 15, 516, 2117, 9, 2083, 2119,
	20, 138, 54, 55, 2111, 53, 529, 2101, 2129, 1819,
	924, 1819, 52, 1159, 2116, 51, 11, 141, 141, 573,
	573, 47, 46, 2118, 45, 141, 44, 43, 573, 42,
	7, 96, 1676, 1677, 1678, 141, 1135, 40, 1046, 1818,
	39, 1818, 2121, 2136, 393, 2139, 2141, 2142, 6, 95,
	5, 2150, 141, 2148, 108, 2140, 105, 141, 107, 104,
	106, 109, 101, 102, 103, 141, 100, 2151, 2149, 573,
	573, 1046, 99, 37, 141, 529, 36, 35, 34, 529,
	2165, 138, 529, 529, 529, 529, 529, 2, 2174, 2180,
	2182, 1183, 1, 574, 0, 529, 529, 554, 2175, 396,
	2172, 2173, 507, 1077, 2156, 2157, 2155, 2185, 2145, 0,
	2184, 0, 616, 0, 141, 638, 2188, 0, 0, 573,
	575, 0, 2196, 0, 0, 2197, 1077, 0, 356, 141,
	141, 0, 0, 0, 0, 0, 1046, 2200, 0, 0,
	1241, 2191, 0, 0, 0, 0, 356, 2211, 0, 1247,
	141, 0, 0, 1076, 141, 0, 0, 141, 2219, 2199,
	2220, 356, 0, 1265, 0, 1045, 0, 0, 0, 0,
	0, 1278, 0, 399, 0, 2231, 0, 0, 141, 0,
	2222, 141, 0, 0, 0, 0, 0, 2221, 628, 2233,
	0, 1820, 2239, 2242, 0, 2241, 2243, 2244, 2254, 2240,
	1406, 141, 0, 0, 2209, 2232, 2256, 0, 2264, 1079,
	1819, 0, 0, 0, 0, 1078, 141, 0, 0, 2271,
	0, 1828, 1829, 2236, 2275, 0, 2228, 2273, 0, 0,
	2279, 0, 2280, 0, 2265, 1042, 0, 0, 0, 0,
	1818, 0, 2237, 2238, 0, 2287, 0, 0, 0, 574,
	0, 0, 2294, 2293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2299, 0, 2303, 0, 0,
	0, 0, 0, 0, 1077, 0, 575, 0, 0, 0,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 574,
	1896, 0, 940, 941, 0, 0, 0, 0, 0, 0,
	1077, 1077, 1076, 0, 0, 0, 0, 0, 0, 1077,
	1077, 0, 0, 0, 1045, 943, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 0, 942,
	0, 0, 1077, 0, 356, 574, 0, 1460, 0, 0,
	0, 0, 400, 0, 638, 2073, 0, 0, 1079, 0,
	0, 2079, 529, 529, 1078, 529, 0, 356, 356, 0,
	1476, 638, 575, 0, 0, 0, 0, 0, 0, 401,
	0, 1079, 0, 0, 1042, 0, 0, 1078, 0, 356,
	0, 0, 0, 0, 0, 1492, 933, 0, 0, 2109,
	948, 0, 0, 0, 0, 0, 0, 1042, 0, 356,
	356, 356, 0, 0, 0, 0, 1278, 0, 0, 0,
	356, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	0, 356, 0, 0, 0, 0, 0, 356, 0, 0,
	0, 0, 0, 356, 356, 0, 0, 356, 0, 0,
	1653, 1654, 1241, 0, 0, 1241, 0, 0, 2147, 958,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 1076, 0, 0, 0, 356, 574, 1571,
	0, 0, 0, 0, 0, 1045, 356, 1077, 0, 940,
	941, 0, 1492, 0, 0, 0, 0, 0, 0, 574,
	574, 1135, 0, 1135, 1588, 575, 400, 0, 0, 1076,
	1076, 0, 943, 0, 0, 1406, 1406, 0, 1076, 1076,
	0, 1045, 1045, 0, 0, 0, 575, 575, 0, 1079,
	1045, 1045, 959, 401, 0, 1078, 942, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 2195, 0, 0,
	0, 1076, 0, 0, 0, 1042, 0, 0, 1659, 0,
	0, 0, 0, 1045, 0, 1079, 1079, 0, 0, 1653,
	1654, 1078, 1078, 0, 1079, 1079, 0, 0, 0, 0,
	1078, 1078, 0, 1406, 1406, 1406, 0, 0, 0, 0,
	2224, 1042, 1042, 0, 0, 0, 0, 948, 0, 0,
	1042, 1042, 0, 0, 0, 0, 0, 1079, 0, 2108,
	0, 0, 0, 1078, 1263, 0, 400, 1669, 0, 0,
	0, 0, 0, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 1042, 0, 940, 941, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 574, 0, 0, 2133,
	0, 0, 0, 400, 0, 0, 958, 0, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 575, 0, 0, 0, 1659, 0, 0,
	401, 0, 942, 0, 529, 0, 0, 356, 0, 0,
	1670, 1732, 0, 1077, 0, 0, 1076, 0, 0, 0,
	0, 0, 1653, 1654, 0, 0, 0, 0, 1045, 0,
	0, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 356, 1745, 1746, 0, 0, 1077, 1278, 0, 959,
	1752, 1753, 1755, 1757, 1758, 0, 1669, 0, 0, 0,
	0, 0, 1765, 948, 1767, 356, 0, 0, 0, 2190,
	0, 0, 1079, 0, 0, 683, 68, 0, 1078, 0,
	0, 356, 0, 0, 0, 1653, 1654, 1241, 1671, 1672,
	1673, 0, 1406, 1406, 0, 0, 638, 1241, 1042, 0,
	0, 2010, 1664, 1662, 1663, 1655, 1656, 1657, 1658, 1660,
	1661, 1077, 0, 0, 0, 0, 356, 356, 0, 0,
	0, 0, 958, 0, 1278, 0, 0, 1135, 1815, 1670,
	1659, 0, 0, 68, 0, 0, 0, 0, 1668, 0,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	400, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
	1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
	0, 1406, 0, 0, 0, 0, 0, 401, 400, 0,
	0, 0, 1862, 0, 0, 0, 0, 0, 542, 1669,
	0, 0, 555, 1659, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 401, 0, 629, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 665, 0, 0,
	768, 0, 1076, 0, 1655, 1656, 1657, 1658, 1660, 1661,
	0, 1674, 1653, 1654, 1045, 1671, 1672, 1673, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 1835, 798,
	799, 0, 1669, 0, 1920, 1076, 0, 0, 0, 0,
	0, 0, 1670, 940, 941, 0, 0, 1045, 0, 1927,
	0, 0, 0, 0, 401, 0, 0, 0, 1079, 0,
	0, 0, 0, 1937, 1078, 1668, 943, 0, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 0,
	0, 0, 574, 0, 1042, 0, 0, 0, 0, 0,
	942, 1079, 0, 0, 0, 0, 356, 1078, 0, 638,
	1076, 0, 0, 0, 0, 1670, 0, 0, 0, 575,
	1241, 638, 1045, 0, 0, 886, 886, 1042, 0, 1993,
	1659, 892, 1986, 0, 0, 0, 0, 0, 0, 0,
	1984, 0, 0, 1815, 1988, 1662, 1663, 1655, 1656, 1657,
	1658, 1660, 1661, 638, 0, 0, 1815, 638, 0, 0,
	0, 948, 0, 0, 1994, 0, 1079, 0, 1674, 0,
	0, 0, 1078, 0, 978, 979, 980, 981, 982, 0,
	0, 0, 0, 0, 990, 0, 1987, 0, 0, 1669,
	0, 0, 1042, 0, 997, 2028, 0, 0, 0, 0,
	0, 0, 1665, 1666, 1667, 0, 0, 1664, 1662, 1663,
	1655, 1656, 1657, 1658, 1660, 1661, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 1815, 0,
	0, 0, 1670, 0, 1989, 574, 1990, 0, 0, 0,
	2061, 2062, 1278, 0, 0, 574, 0, 0, 0, 2071,
	1406, 2072, 0, 356, 2074, 2075, 0, 0, 2078, 356,
	0, 0, 575, 959, 0, 0, 1992, 0, 0, 0,
	0, 0, 575, 0, 0, 1995, 2091, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 2100, 0, 0, 2102,
	1406, 0, 0, 0, 0, 0, 0, 356, 0, 1815,
	0, 1815, 1153, 0, 1158, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 0, 0, 0, 0, 1665,
	1666, 1667, 0, 0, 1664, 1662, 1663, 1655, 1656, 1657,
	1658, 1660, 1661, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1920, 1920,
	0, 0, 0, 1991, 0, 0, 356, 0, 944, 945,
	946, 947, 949, 950, 0, 0, 1278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2164, 0, 0, 0, 0, 1241, 0,
	1406, 0, 542, 0, 0, 0, 2171, 0, 0, 0,
	0, 0, 0, 0, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 0, 1325, 356, 1327, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2203, 2204, 68, 1353, 0, 0, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2218, 0, 0, 0, 638, 1388, 1389, 356, 0,
	1402, 0, 1413, 1415, 1420, 1423, 1424, 1425, 0, 0,
	1815, 0, 0, 0, 0, 0, 0, 0, 0, 2164,
	0, 987, 356, 989, 0, 0, 0, 0, 0, 0,
	993, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 400, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2272, 575, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 400, 0,
	0, 0, 0, 0, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 0, 401, 0, 0, 0, 0,
	963, 575, 0, 0, 0, 0, 0, 943, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 542, 0, 0, 542, 542, 0,
	0, 0, 0, 0, 943, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 0, 68, 0, 0, 892, 0, 942, 0,
	0, 0, 948, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 967, 975, 0, 0, 0, 0, 0, 1565,
	0, 0, 629, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 1578, 0, 0, 0, 575, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 948,
	0, 958, 68, 0, 68, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 400, 0, 967,
	975, 0, 0, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 400, 0, 0, 0, 1593, 1594, 0,
	0, 0, 0, 1599, 401, 0, 0, 0, 0, 0,
	0, 1343, 965, 0, 0, 0, 0, 0, 958, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 1618, 0, 0, 0, 574,
	574, 0, 1625, 0, 0, 1629, 0, 0, 574, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1643, 0, 0, 0, 0, 575, 575, 0, 0,
	0, 0, 0, 0, 68, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 990, 0, 574,
	574, 959, 0, 1420, 1420, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 575, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 0, 0, 0, 0, 574,
	0, 0, 2041, 0, 0, 0, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 1737, 0, 0,
	0, 0, 1165, 0, 963, 0, 575, 0, 0, 0,
	0, 943, 0, 0, 974, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 400, 0, 942, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1778, 0, 0, 68, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 68,
	0, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 892, 0, 0, 948, 629, 629, 0,
	0, 629, 0, 0, 0, 0, 1823, 0, 0, 1826,
	0, 0, 1827, 0, 0, 0, 967, 975, 0, 0,
	0, 0, 0, 0, 1832, 0, 0, 0, 0, 0,
	0, 555, 0, 1841, 973, 0, 0, 0, 0, 0,
	0, 1845, 0, 0, 1578, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 1869, 0, 0, 0, 1871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 940, 941, 0, 0, 0, 0, 970, 971,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 1902, 1903, 0, 0, 943, 0, 0, 974, 0,
	1909, 1910, 1911, 0, 0, 0, 0, 0, 0, 0,
	989, 0, 0, 0, 0, 0, 0, 0, 959, 942,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 940, 941, 968, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 942,
	948, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 975, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 2004, 0, 1695, 68, 0, 0,
	68, 0, 0, 965, 0, 0, 0, 2012, 0, 958,
	948, 2015, 2016, 0, 0, 0, 2018, 0, 0, 0,
	0, 0, 0, 2020, 0, 2022, 0, 0, 0, 0,
	967, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2029, 0, 0, 0, 0, 0, 0, 973, 0,
	68, 0, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 965, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 2038, 629, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 0, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 2082, 943, 0,
	0, 974, 959, 0, 0, 0, 0, 1653, 1654, 0,
	1671, 1672, 1673, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 942, 1834, 0, 0, 966, 0, 957, 0,
	0, 0, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 0, 2125, 2126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1668, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 0, 0, 0, 963, 2138, 0,
	0, 0, 0, 948, 943, 0, 966, 974, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 967, 975, 2154, 0, 0, 942, 0,
	1694, 0, 0, 0, 957, 1659, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 965, 0, 0, 0,
	0, 0, 958, 0, 2177, 0, 0, 0, 0, 0,
	0, 0, 0, 1674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 948,
	629, 0, 0, 0, 1669, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	975, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 958, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1670, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2263, 2263, 0, 0, 0, 0, 0,
	0, 0, 2267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2263, 0, 966,
	0, 959, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 968, 0, 0,
	0, 0, 0, 1693, 0, 0, 0, 0, 0, 0,
	0, 0, 2263, 0, 1665, 1666, 1667, 0, 0, 1664,
	1662, 1663, 1655, 1656, 1657, 1658, 1660, 1661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2096, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 0, 0, 0, 0, 0, 1645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	143, 144, 417, 145, 418, 419, 420, 421, 299, 422,
	423, 424, 425, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 426, 150, 306, 307, 151, 152, 427,
	428, 308, 309, 310, 429, 153, 311, 430, 403, 431,
	154, 155, 156, 989, 157, 432, 158, 159, 160, 433,
	404, 161, 162, 163, 434, 435, 437, 436, 438, 439,
	440, 164, 165, 357, 166, 312, 167, 313, 314, 441,
	168, 442, 169, 443, 170, 444, 445, 171, 172, 446,
	173, 447, 0, 448, 315, 174, 175, 176, 316, 317,
	449, 450, 451, 177, 178, 318, 319, 320, 0, 179,
	452, 180, 453, 454, 405, 455, 181, 321, 456, 322,
	457, 182, 183, 184, 185, 186, 323, 324, 407, 458,
	190, 459, 187, 460, 406, 188, 325, 189, 326, 327,
	328, 329, 330, 461, 331, 462, 408, 191, 192, 193,
	409, 194, 195, 196, 463, 198, 197, 464, 332, 410,
	199, 411, 465, 200, 466, 467, 201, 0, 202, 203,
	204, 206, 333, 205, 412, 207, 208, 210, 209, 468,
	469, 470, 334, 211, 335, 212, 213, 471, 214, 472,
	473, 215, 474, 475, 216, 336, 413, 217, 414, 337,
	218, 219, 220, 221, 222, 476, 223, 338, 224, 339,
	225, 477, 226, 227, 228, 229, 230, 340, 231, 232,
	478, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 479, 245, 415, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 480, 257, 342, 256, 258,
	259, 481, 260, 249, 250, 261, 416, 262, 343, 344,
	263, 482, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 483, 271, 484, 272, 273, 274, 275, 276,
	277, 278, 485, 347, 348, 349, 486, 487, 279, 280,
	350, 351, 488, 281, 282, 283, 284, 489, 490, 285,
	286, 287, 288, 491, 289, 492, 352, 290, 291, 292,
	353, 354, 493, 494, 293, 495, 496, 497, 498, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 0, 0, 0,
	0, 0, 1235, 0, 0, 0, 0, 0, 0, 0,
	1236, 143, 144, 417, 145, 418, 419, 420, 421, 299,
	422, 423, 424, 425, 146, 147, 148, 300, 301, 302,
	303, 149, 304, 305, 426, 150, 306, 307, 151, 152,
	427, 428, 308, 309, 310, 429, 153, 311, 430, 403,
	431, 154, 155, 156, 0, 157, 432, 158, 159, 160,
	433, 404, 161, 162, 163, 434, 435, 437, 436, 438,
	439, 440, 164, 165, 357, 166, 312, 167, 313, 314,
	441, 168, 442, 169, 443, 170, 444, 445, 171, 172,
	446, 173, 447, 0, 448, 315, 174, 175, 176, 316,
	317, 449, 450, 451, 177, 178, 318, 319, 320, 0,
	179, 452, 180, 453, 454, 405, 455, 181, 321, 456,
	322, 457, 182, 183, 184, 185, 186, 323, 324, 407,
	458, 190, 459, 187, 460, 406, 188, 325, 189, 326,
	327, 328, 329, 330, 461, 331, 462, 408, 191, 192,
	193, 409, 194, 195, 196, 463, 198, 197, 464, 332,
	410, 199, 411, 465, 200, 466, 467, 201, 0, 202,
	203, 204, 206, 333, 205, 412, 207, 208, 210, 209,
	468, 469, 470, 334, 211, 335, 212, 213, 471, 214,
	472, 473, 215, 474, 475, 216, 336, 413, 217, 414,
	337, 218, 219, 220, 221, 222, 476, 223, 338, 224,
	339, 225, 477, 226, 227, 228, 229, 230, 340, 231,
	232, 478, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 479, 245, 415, 246, 247, 341,
	248, 0, 252, 253, 254, 255, 480, 257, 342, 256,
	258, 259, 481, 260, 249, 250, 261, 416, 262, 343,
	344, 263, 482, 270, 264, 265, 251, 266, 269, 345,
	267, 268, 346, 483, 271, 484, 272, 273, 274, 275,
	276, 277, 278, 485, 347, 348, 349, 486, 487, 279,
	280, 350, 351, 488, 281, 282, 283, 284, 489, 490,
	285, 286, 287, 288, 491, 289, 492, 352, 290, 291,
	292, 353, 354, 493, 494, 293, 495, 496, 497, 498,
	294, 295, 296, 297, 298, 0, 0, 0, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1969, 143, 144, 417, 145, 418, 419,
	420, 421, 299, 422, 423, 424, 425, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 426, 150, 306,
	307, 151, 152, 427, 428, 308, 309, 310, 429, 153,
	311, 430, 403, 431, 154, 155, 156, 0, 157, 432,
	158, 159, 160, 433, 404, 161, 162, 163, 434, 435,
	437, 436, 438, 439, 440, 164, 165, 357, 166, 312,
	167, 313, 314, 441, 168, 442, 169, 443, 170, 444,
	445, 171, 172, 446, 173, 447, 0, 448, 315, 174,
	175, 176, 316, 317, 449, 450, 451, 177, 178, 318,
	319, 320, 0, 179, 452, 180, 453, 454, 405, 455,
	181, 321, 456, 322, 457, 182, 183, 184, 185, 186,
	323, 324, 407, 458, 190, 459, 187, 460, 406, 188,
	325, 189, 326, 327, 328, 329, 330, 461, 331, 462,
	408, 191, 192, 193, 409, 194, 195, 196, 463, 198,
	197, 464, 332, 410, 199, 411, 465, 200, 466, 467,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 468, 469, 470, 334, 211, 335, 212,
	213, 471, 214, 472, 473, 215, 474, 475, 216, 336,
	413, 217, 414, 337, 218, 219, 220, 221, 222, 476,
	223, 338, 224, 339, 225, 477, 226, 227, 228, 229,
	230, 340, 231, 232, 478, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 479, 245, 415,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 480,
	257, 342, 256, 258, 259, 481, 260, 249, 250, 261,
	416, 262, 343, 344, 263, 482, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 483, 271, 484, 272,
	273, 274, 275, 276, 277, 278, 485, 347, 348, 349,
	486, 487, 279, 280, 350, 351, 488, 281, 282, 283,
	284, 489, 490, 285, 286, 287, 288, 491, 289, 492,
	352, 290, 291, 292, 353, 354, 493, 494, 293, 495,
	496, 497, 498, 294, 295, 296, 297, 298, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 919, 0, 0, 143, 144, 417, 145, 418, 419,
	420, 421, 299, 422, 423, 424, 425, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 426, 150, 306,
	307, 151, 152, 427, 428, 308, 309, 310, 429, 153,
	311, 430, 403, 431, 154, 155, 156, 0, 157, 432,
	158, 159, 160, 433, 404, 161, 162, 163, 434, 435,
	437, 436, 438, 439, 440, 164, 165, 357, 166, 312,
	167, 313, 314, 441, 168, 442, 169, 443, 170, 444,
	445, 171, 172, 446, 173, 447, 0, 448, 315, 174,
	175, 176, 316, 317, 449, 450, 451, 177, 178, 318,
	319, 320, 0, 179, 452, 180, 453, 454, 405, 455,
	181, 321, 456, 322, 457, 182, 183, 184, 185, 186,
	323, 324, 407, 458, 190, 459, 187, 460, 406, 188,
	325, 189, 326, 327, 328, 329, 330, 461, 331, 462,
	408, 191, 192, 193, 409, 194, 195, 196, 463, 198,
	197, 464, 332, 410, 199, 411, 465, 200, 466, 467,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 468, 469, 470, 334, 211, 335, 212,
	213, 471, 214, 472, 473, 215, 474, 475, 216, 336,
	413, 217, 414, 337, 218, 219, 220, 221, 222, 476,
	223, 338, 224, 339, 225, 477, 226, 227, 228, 229,
	230, 340, 231, 232, 478, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 479, 245, 415,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 480,
	257, 342, 256, 258, 259, 481, 260, 249, 250, 261,
	416, 262, 343, 344, 263, 482, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 483, 271, 484, 272,
	273, 274, 275, 276, 277, 278, 485, 347, 348, 349,
	486, 487, 279, 280, 350, 351, 488, 281, 282, 283,
	284, 489, 490, 285, 286, 287, 288, 491, 289, 492,
	352, 290, 291, 292, 353, 354, 493, 494, 293, 495,
	496, 497, 498, 294, 295, 296, 297, 298, 702, 691,
	692, 689, 690, 681, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 719, 684, 0, 0, 0, 146, 147, 148,
	300, 734, 302, 735, 149, 736, 737, 0, 150, 306,
	307, 151, 152, 687, 718, 738, 739, 310, 0, 153,
	730, 0, 710, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 711,
	712, 714, 0, 713, 715, 164, 165, 357, 166, 740,
	167, 741, 742, 893, 168, 0, 169, 0, 170, 0,
	0, 733, 172, 0, 173, 0, 0, 0, 675, 174,
	175, 176, 720, 721, 698, 0, 0, 177, 178, 743,
	744, 745, 0, 179, 0, 180, 0, 0, 405, 0,
	181, 731, 0, 322, 0, 182, 183, 184, 185, 186,
	727, 729, 407, 0, 190, 0, 187, 0, 406, 188,
	746, 189, 747, 748, 749, 750, 751, 0, 709, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 0, 732, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 670, 0, 699, 728, 211, 752, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 722, 218, 219, 220, 221, 222, 0,
	223, 723, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 753, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 676, 248, 0, 252, 253, 254, 255, 127,
	257, 342, 256, 258, 259, 716, 260, 249, 250, 261,
	416, 262, 754, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 755, 267, 268, 724, 0, 271, 131, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 756, 757,
	0, 0, 279, 280, 725, 726, 697, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 717, 289, 0,
	352, 290, 291, 292, 661, 758, 0, 0, 293, 0,
	0, 0, 125, 294, 295, 296, 297, 298, 671, 126,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 667,
	668, 702, 691, 692, 689, 690, 681, 0, 677, 0,
	0, 0, 0, 680, 0, 0, 0, 143, 144, 1369,
	145, 0, 0, 0, 0, 719, 684, 0, 0, 0,
	146, 147, 148, 300, 734, 302, 735, 149, 736, 737,
	0, 150, 306, 307, 151, 152, 687, 718, 738, 739,
	310, 0, 153, 730, 0, 710, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 404, 161, 162,
	163, 0, 711, 712, 714, 0, 713, 715, 164, 165,
	357, 166, 740, 167, 741, 742, 0, 168, 0, 169,
	0, 170, 1370, 0, 733, 172, 0, 173, 0, 0,
	0, 675, 174, 175, 176, 720, 721, 698, 0, 0,
	177, 178, 743, 744, 745, 0, 179, 0, 180, 0,
	0, 405, 0, 181, 731, 0, 322, 0, 182, 183,
	184, 185, 186, 727, 729, 407, 0, 190, 0, 187,
	0, 406, 188, 746, 189, 747, 748, 749, 750, 751,
	0, 709, 0, 408, 191, 192, 193, 409, 194, 195,
	196, 0, 198, 197, 0, 732, 410, 199, 411, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 333,
	205, 412, 207, 208, 210, 209, 670, 0, 699, 728,
	211, 752, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 336, 413, 217, 414, 722, 218, 219, 220,
	221, 222, 0, 223, 723, 224, 339, 225, 0, 226,
	227, 228, 229, 230, 753, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 415, 246, 247, 676, 248, 0, 252, 253,
	254, 255, 0, 257, 342, 256, 258, 259, 716, 260,
	249, 250, 261, 416, 262, 754, 344, 263, 0, 270,
	264, 265, 251, 266, 269, 755, 267, 268, 724, 0,
	271, 0, 272, 273, 274, 275, 276, 277, 278, 0,
	347, 756, 757, 0, 0, 279, 280, 725, 726, 697,
	281, 282, 283, 284, 0, 0, 285, 286, 287, 288,
	717, 289, 0, 352, 290, 291, 292, 353, 758, 1368,
	0, 293, 0, 0, 0, 0, 294, 295, 296, 297,
	298, 671, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 667, 668, 1371, 702, 691, 692, 689, 690,
	681, 677, 1366, 0, 0, 0, 680, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 719,
	684, 0, 0, 0, 146, 147, 148, 300, 734, 302,
	735, 149, 736, 737, 0, 150, 306, 307, 151, 152,
	687, 718, 738, 739, 310, 0, 153, 730, 0, 710,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 404, 161, 162, 163, 0, 711, 712, 714, 0,
	713, 715, 164, 165, 357, 166, 740, 167, 741, 742,
	0, 168, 0, 169, 0, 170, 0, 0, 733, 172,
	0, 173, 0, 0, 0, 675, 174, 175, 176, 720,
	721, 698, 0, 0, 177, 178, 743, 744, 745, 0,
	179, 0, 180, 0, 0, 405, 0, 181, 731, 0,
	322, 0, 182, 183, 184, 185, 186, 727, 729, 407,
	0, 190, 0, 187, 0, 406, 188, 746, 189, 747,
	748, 749, 750, 751, 0, 709, 0, 408, 191, 192,
	193, 409, 194, 195, 196, 0, 198, 197, 0, 732,
	410, 199, 411, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 333, 205, 412, 207, 208, 210, 209,
	670, 0, 699, 728, 211, 752, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 336, 413, 217, 414,
	722, 218, 219, 220, 221, 222, 0, 223, 723, 224,
	339, 225, 0, 226, 227, 228, 229, 230, 753, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 415, 246, 247, 676,
	248, 0, 252, 253, 254, 255, 127, 257, 342, 256,
	258, 259, 716, 260, 249, 250, 261, 416, 262, 754,
	344, 263, 0, 270, 264, 265, 251, 266, 269, 755,
	267, 268, 724, 0, 271, 131, 272, 273, 274, 275,
	276, 277, 278, 0, 347, 756, 757, 0, 0, 279,
	280, 725, 726, 697, 281, 282, 283, 284, 0, 0,
	285, 286, 287, 288, 717, 289, 0, 352, 290, 291,
	292, 661, 758, 0, 0, 293, 0, 0, 0, 125,
	294, 295, 296, 297, 298, 671, 126, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 667, 668, 702, 691,
	692, 689, 690, 681, 0, 677, 0, 0, 0, 0,
	680, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 719, 684, 0, 0, 0, 146, 147, 148,
	300, 734, 302, 735, 149, 736, 737, 1416, 150, 306,
	307, 151, 152, 687, 718, 738, 739, 310, 0, 153,
	730, 0, 710, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 711,
	712, 714, 0, 713, 715, 164, 165, 357, 166, 740,
	167, 741, 742, 0, 168, 0, 169, 0, 170, 0,
	0, 733, 172, 0, 173, 0, 0, 0, 675, 174,
	175, 176, 720, 721, 698, 0, 0, 177, 178, 743,
	744, 745, 0, 179, 0, 180, 0, 1421, 405, 0,
	181, 731, 0, 322, 0, 182, 183, 184, 185, 186,
	727, 729, 407, 0, 190, 0, 187, 0, 406, 188,
	746, 189, 747, 748, 749, 750, 751, 0, 709, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 1417, 732, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 670, 0, 699, 728, 211, 752, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 722, 218, 219, 220, 221, 222, 0,
	223, 723, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 753, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 676, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 716, 260, 249, 250, 261,
	416, 262, 754, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 755, 267, 268, 724, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 756, 757,
	0, 1418, 279, 280, 725, 726, 697, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 717, 289, 0,
	352, 290, 291, 292, 353, 758, 0, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 671, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 667,
	668, 702, 691, 692, 689, 690, 681, 0, 677, 0,
	0, 0, 0, 680, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 719, 684, 0, 0, 0,
	146, 147, 148, 300, 734, 302, 735, 149, 736, 737,
	0, 150, 306, 307, 151, 152, 687, 718, 738, 739,
	310, 0, 153, 730, 0, 710, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 404, 161, 162,
	163, 0, 711, 712, 714, 0, 713, 715, 164, 165,
	357, 166, 740, 167, 741, 742, 0, 168, 0, 169,
	0, 170, 0, 0, 733, 172, 0, 173, 0, 0,
	0, 675, 174, 175, 176, 720, 721, 698, 0, 0,
	177, 178, 743, 744, 745, 0, 179, 0, 180, 0,
	0, 405, 0, 181, 731, 0, 322, 0, 182, 183,
	184, 185, 186, 727, 729, 407, 0, 190, 0, 187,
	0, 406, 188, 746, 189, 747, 748, 749, 750, 751,
	0, 709, 0, 408, 191, 192, 193, 409, 194, 195,
	196, 0, 198, 197, 0, 732, 410, 199, 411, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 333,
	205, 412, 207, 208, 210, 209, 670, 1797, 699, 728,
	211, 752, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 336, 413, 217, 414, 722, 218, 219, 220,
	221, 222, 0, 223, 723, 224, 339, 225, 0, 226,
	227, 228, 229, 230, 753, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 415, 246, 247, 676, 248, 0, 252, 253,
	254, 255, 0, 257, 342, 256, 258, 259, 716, 260,
	249, 250, 261, 416, 262, 754, 344, 263, 0, 270,
	264, 265, 251, 266, 269, 755, 267, 268, 724, 0,
	271, 0, 272, 273, 274, 275, 276, 277, 278, 0,
	347, 756, 757, 0, 0, 279, 280, 725, 726, 697,
	281, 282, 283, 284, 0, 0, 285, 286, 287, 288,
	717, 289, 0, 352, 290, 291, 292, 353, 758, 0,
	0, 293, 0, 0, 0, 0, 294, 295, 296, 297,
	298, 671, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 667, 668, 887, 702, 691, 692, 689, 690,
	681, 677, 0, 0, 0, 0, 680, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 719,
	684, 0, 0, 0, 146, 147, 148, 300, 734, 302,
	735, 149, 736, 737, 0, 150, 306, 307, 151, 152,
	687, 718, 738, 739, 310, 0, 153, 730, 0, 710,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 404, 161, 162, 163, 0, 711, 712, 714, 0,
	713, 715, 164, 165, 357, 166, 740, 167, 741, 742,
	0, 168, 0, 169, 0, 170, 0, 0, 733, 172,
	0, 173, 0, 0, 0, 675, 174, 175, 176, 720,
	721, 698, 0, 0, 177, 178, 743, 744, 745, 0,
	179, 0, 180, 0, 0, 405, 0, 181, 731, 0,
	322, 0, 182, 183, 184, 185, 186, 727, 729, 407,
	0, 190, 1167, 187, 0, 406, 188, 746, 189, 747,
	748, 749, 750, 751, 0, 709, 0, 408, 191, 192,
	193, 409, 194, 195, 196, 0, 198, 197, 0, 732,
	410, 199, 411, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 333, 205, 412, 207, 208, 210, 209,
	670, 0, 699, 728, 211, 752, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 336, 413, 217, 414,
	722, 218, 219, 220, 221, 222, 0, 223, 723, 224,
	339, 225, 1166, 226, 227, 228, 229, 230, 753, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 415, 246, 247, 676,
	248, 0, 252, 253, 254, 255, 0, 257, 342, 256,
	258, 259, 716, 260, 249, 250, 261, 416, 262, 754,
	344, 263, 0, 270, 264, 265, 251, 266, 269, 755,
	267, 268, 724, 0, 271, 0, 272, 273, 274, 275,
	276, 277, 278, 0, 347, 756, 757, 0, 0, 279,
	280, 725, 726, 697, 281, 282, 283, 284, 0, 0,
	285, 286, 287, 288, 717, 289, 0, 352, 290, 291,
	292, 353, 758, 0, 0, 293, 0, 0, 0, 0,
	294, 295, 296, 297, 298, 671, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 667, 668, 702, 691,
	692, 689, 690, 681, 0, 677, 0, 0, 0, 0,
	680, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 719, 684, 0, 0, 0, 146, 147, 148,
	300, 734, 302, 735, 149, 736, 737, 0, 150, 306,
	307, 151, 152, 687, 718, 738, 739, 310, 0, 153,
	730, 0, 710, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 711,
	712, 714, 0, 713, 715, 164, 165, 357, 166, 740,
	167, 741, 742, 0, 168, 0, 169, 0, 170, 0,
	0, 733, 172, 0, 173, 0, 0, 0, 675, 174,
	175, 176, 720, 721, 698, 0, 0, 177, 178, 743,
	744, 745, 0, 179, 0, 180, 0, 0, 405, 0,
	181, 731, 0, 322, 0, 182, 183, 184, 185, 186,
	727, 729, 407, 0, 190, 0, 187, 0, 406, 188,
	746, 189, 747, 748, 749, 750, 751, 0, 709, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 0, 732, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 670, 0, 699, 728, 211, 752, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 722, 218, 219, 220, 221, 222, 0,
	223, 723, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 753, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 676, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 716, 260, 249, 250, 261,
	416, 262, 754, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 755, 267, 268, 724, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 756, 757,
	0, 0, 279, 280, 725, 726, 697, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 717, 289, 0,
	352, 290, 291, 292, 353, 758, 0, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 671, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 667,
	668, 0, 0, 0, 0, 0, 995, 1361, 677, 0,
	0, 0, 0, 680, 702, 691, 692, 689, 690, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 719, 684,
	0, 0, 0, 146, 147, 148, 300, 734, 302, 735,
	149, 736, 737, 0, 150, 306, 307, 151, 152, 687,
	718, 738, 739, 310, 0, 153, 730, 0, 710, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	404, 161, 162, 163, 0, 711, 712, 714, 0, 713,
	715, 164, 165, 357, 166, 740, 167, 741, 742, 0,
	168, 0, 169, 0, 170, 0, 0, 733, 172, 0,
	173, 0, 0, 0, 675, 174, 175, 176, 720, 721,
	698, 0, 0, 177, 178, 743, 744, 745, 0, 179,
	0, 180, 0, 0, 405, 0, 181, 731, 0, 322,
	0, 182, 183, 184, 185, 186, 727, 729, 407, 0,
	190, 0, 187, 0, 406, 188, 746, 189, 747, 748,
	749, 750, 751, 0, 709, 0, 408, 191, 192, 193,
	409, 194, 195, 196, 0, 198, 197, 0, 732, 410,
	199, 411, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 412, 207, 208, 210, 209, 670,
	0, 699, 728, 211, 752, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 413, 217, 414, 722,
	218, 219, 220, 221, 222, 0, 223, 723, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 753, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 415, 246, 247, 676, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 716, 260, 249, 250, 261, 416, 262, 754, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 755, 267,
	268, 724, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 756, 757, 0, 0, 279, 280,
	725, 726, 697, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 717, 289, 0, 352, 290, 291, 292,
	353, 758, 0, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 671, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 667, 668, 702, 691, 692,
	689, 690, 681, 0, 677, 1899, 0, 0, 0, 680,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 719, 684, 0, 0, 0, 146, 147, 148, 300,
	734, 302, 735, 149, 736, 737, 0, 150, 306, 307,
	151, 152, 687, 718, 738, 739, 310, 0, 153, 730,
	0, 710, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 404, 161, 162, 163, 0, 711, 712,
	714, 0, 713, 715, 164, 165, 357, 166, 740, 167,
	741, 742, 0, 168, 0, 169, 0, 170, 0, 0,
	733, 172, 0, 173, 0, 0, 0, 675, 174, 175,
	176, 720, 721, 698, 0, 0, 177, 178, 743, 744,
	745, 0, 179, 0, 180, 0, 0, 405, 0, 181,
	731, 0, 322, 0, 182, 183, 184, 185, 186, 727,
	729, 407, 0, 190, 0, 187, 0, 406, 188, 746,
	189, 747, 748, 749, 750, 751, 0, 709, 0, 408,
	191, 192, 193, 409, 194, 195, 196, 0, 198, 197,
	0, 732, 410, 199, 411, 0, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 333, 205, 412, 207, 208,
	210, 209, 670, 0, 699, 728, 211, 752, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 336, 413,
	217, 414, 722, 218, 219, 220, 221, 222, 0, 223,
	723, 224, 339, 225, 0, 226, 227, 228, 229, 230,
	753, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 415, 246,
	247, 676, 248, 0, 252, 253, 254, 255, 0, 257,
	342, 256, 258, 259, 716, 260, 249, 250, 261, 416,
	262, 754, 344, 263, 0, 270, 264, 265, 251, 266,
	269, 755, 267, 268, 724, 0, 271, 0, 272, 273,
	274, 275, 276, 277, 278, 0, 347, 756, 757, 0,
	0, 279, 280, 725, 726, 697, 281, 282, 283, 284,
	0, 0, 285, 286, 287, 288, 717, 289, 0, 352,
	290, 291, 292, 353, 758, 1848, 0, 293, 0, 0,
	0, 0, 294, 295, 296, 297, 298, 671, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 0, 667, 668,
	702, 691, 692, 689, 690, 681, 0, 677, 0, 0,
	0, 0, 680, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 719, 684, 0, 0, 0, 146,
	147, 148, 300, 734, 302, 735, 149, 736, 737, 0,
	150, 306, 307, 151, 152, 687, 718, 738, 739, 310,
	0, 153, 730, 0, 710, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 711, 712, 714, 0, 713, 715, 164, 165, 357,
	166, 740, 167, 741, 742, 0, 168, 0, 169, 0,
	170, 0, 0, 733, 172, 0, 173, 0, 0, 0,
	675, 174, 175, 176, 720, 721, 698, 0, 0, 177,
	178, 743, 744, 745, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 731, 0, 322, 0, 182, 183, 184,
	185, 186, 727, 729, 407, 0, 190, 0, 187, 0,
	406, 188, 746, 189, 747, 748, 749, 750, 751, 0,
	709, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 732, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 670, 0, 699, 728, 211,
	752, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 722, 218, 219, 220, 221,
	222, 0, 223, 723, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 753, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 676, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 716, 260, 249,
	250, 261, 416, 262, 754, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 755, 267, 268, 724, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	756, 757, 0, 0, 279, 280, 725, 726, 697, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 717,
	289, 0, 352, 290, 291, 292, 353, 758, 0, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	671, 0, 0, 0, 0, 0, 669, 0, 0, 0,
	0, 667, 668, 702, 691, 692, 689, 690, 681, 0,
	677, 1838, 0, 0, 0, 680, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 719, 684, 0,
	0, 0, 146, 147, 148, 300, 734, 302, 735, 149,
	736, 737, 0, 150, 306, 307, 151, 152, 687, 718,
	738, 739, 310, 0, 153, 730, 0, 710, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 404,
	161, 162, 163, 0, 711, 712, 714, 0, 713, 715,
	164, 165, 357, 166, 740, 167, 741, 742, 893, 168,
	0, 169, 0, 170, 0, 0, 733, 172, 0, 173,
	0, 0, 0, 675, 174, 175, 176, 720, 721, 698,
	0, 0, 177, 178, 743, 744, 745, 0, 179, 0,
	180, 0, 0, 405, 0, 181, 731, 0, 322, 0,
	182, 183, 184, 185, 186, 727, 729, 407, 0, 190,
	0, 187, 0, 406, 188, 746, 189, 747, 748, 749,
	750, 751, 0, 709, 0, 408, 191, 192, 193, 409,
	194, 195, 196, 0, 198, 197, 0, 732, 410, 199,
	411, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 333, 205, 412, 207, 208, 210, 209, 670, 0,
	699, 728, 211, 752, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 336, 413, 217, 414, 722, 218,
	219, 220, 221, 222, 0, 223, 723, 224, 339, 225,
	0, 226, 227, 228, 229, 230, 753, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 415, 246, 247, 676, 248, 0,
	252, 253, 254, 255, 0, 257, 342, 256, 258, 259,
	716, 260, 249, 250, 261, 416, 262, 754, 344, 263,
	0, 270, 264, 265, 251, 266, 269, 755, 267, 268,
	724, 0, 271, 0, 272, 273, 274, 275, 276, 277,
	278, 0, 347, 756, 757, 0, 0, 279, 280, 725,
	726, 697, 281, 282, 283, 284, 0, 0, 285, 286,
	287, 288, 717, 289, 0, 352, 290, 291, 292, 353,
	758, 0, 0, 293, 0, 0, 0, 0, 294, 295,
	296, 297, 298, 671, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 667, 668, 702, 691, 692, 689,
	690, 681, 0, 677, 0, 0, 0, 0, 680, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	719, 684, 0, 0, 0, 146, 147, 148, 300, 734,
	302, 735, 149, 736, 737, 0, 150, 306, 307, 151,
	152, 687, 718, 738, 739, 310, 0, 153, 730, 0,
	710, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 163, 0, 711, 712, 714,
	0, 713, 715, 164, 165, 357, 166, 740, 167, 741,
	742, 0, 168, 0, 169, 0, 170, 0, 0, 733,
	172, 0, 173, 0, 0, 0, 675, 174, 175, 176,
	720, 721, 698, 0, 0, 177, 178, 743, 744, 745,
	0, 179, 0, 180, 0, 1421, 405, 0, 181, 731,
	0, 322, 0, 182, 183, 184, 185, 186, 727, 729,
	407, 0, 190, 0, 187, 0, 406, 188, 746, 189,
	747, 748, 749, 750, 751, 0, 709, 0, 408, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	732, 410, 199, 411, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 670, 0, 699, 728, 211, 752, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 722, 218, 219, 220, 221, 222, 0, 223, 723,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 753,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	676, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 716, 260, 249, 250, 261, 416, 262,
	754, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	755, 267, 268, 724, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 756, 757, 0, 0,
	279, 280, 725, 726, 697, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 717, 289, 0, 352, 290,
	291, 292, 353, 758, 0, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 671, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 667, 668, 702,
	691, 692, 689, 690, 681, 0, 677, 0, 0, 0,
	0, 680, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 719, 684, 0, 0, 0, 146, 147,
	148, 300, 734, 302, 735, 149, 736, 737, 0, 150,
	306, 307, 151, 152, 687, 718, 738, 739, 310, 0,
	153, 730, 0, 710, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 404, 161, 162, 163, 0,
	711, 712, 714, 0, 713, 715, 164, 165, 357, 166,
	740, 167, 741, 742, 0, 168, 0, 169, 0, 170,
	0, 0, 733, 172, 0, 173, 0, 0, 0, 675,
	174, 175, 176, 720, 721, 698, 0, 0, 177, 178,
	743, 744, 745, 0, 179, 0, 180, 0, 0, 405,
	0, 181, 731, 0, 322, 0, 182, 183, 184, 185,
	186, 727, 729, 407, 0, 190, 0, 187, 0, 406,
	188, 746, 189, 747, 748, 749, 750, 751, 0, 709,
	0, 408, 191, 192, 193, 409, 194, 195, 196, 0,
	198, 197, 0, 732, 410, 199, 411, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 333, 205, 412,
	207, 208, 210, 209, 670, 0, 699, 728, 211, 752,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	336, 413, 217, 414, 722, 218, 219, 220, 221, 222,
	0, 223, 723, 224, 339, 225, 0, 226, 227, 228,
	229, 230, 753, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	415, 246, 247, 676, 248, 0, 252, 253, 254, 255,
	0, 257, 342, 256, 258, 259, 716, 260, 249, 250,
	261, 416, 262, 754, 344, 263, 0, 270, 264, 265,
	251, 266, 269, 755, 267, 268, 724, 0, 271, 0,
	272, 273, 274, 275, 276, 277, 278, 0, 347, 756,
	757, 0, 0, 279, 280, 725, 726, 697, 281, 282,
	283, 284, 0, 0, 285, 286, 287, 288, 717, 289,
	0, 352, 290, 291, 292, 353, 758, 0, 0, 293,
	0, 0, 0, 0, 294, 295, 296, 297, 298, 671,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 0,
	667, 668, 887, 702, 691, 692, 689, 690, 681, 677,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 719, 684, 0,
	0, 0, 146, 147, 148, 300, 734, 302, 735, 149,
	736, 737, 0, 150, 306, 307, 151, 152, 687, 718,
	738, 739, 310, 0, 153, 730, 0, 710, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 404,
	161, 162, 163, 0, 711, 712, 714, 0, 713, 715,
	164, 165, 357, 166, 740, 167, 741, 742, 0, 168,
	0, 169, 0, 170, 0, 0, 733, 172, 0, 173,
	0, 0, 0, 675, 174, 175, 176, 720, 721, 698,
	0, 0, 177, 178, 743, 744, 745, 0, 179, 0,
	180, 0, 0, 405, 0, 181, 731, 0, 322, 0,
	182, 183, 184, 185, 186, 727, 729, 407, 0, 190,
	0, 187, 0, 406, 188, 746, 189, 747, 748, 749,
	750, 751, 0, 709, 0, 408, 191, 192, 193, 409,
	194, 195, 196, 0, 198, 197, 0, 732, 410, 199,
	411, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 333, 205, 412, 207, 208, 210, 209, 670, 0,
	699, 728, 211, 752, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 336, 413, 217, 414, 722, 218,
	219, 220, 221, 222, 0, 223, 723, 224, 339, 225,
	0, 226, 227, 228, 229, 230, 753, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 415, 246, 247, 676, 248, 0,
	252, 253, 254, 255, 0, 257, 342, 256, 258, 259,
	716, 260, 249, 250, 261, 416, 262, 754, 344, 263,
	0, 270, 264, 265, 251, 266, 269, 755, 267, 268,
	724, 0, 271, 0, 272, 273, 274, 275, 276, 277,
	278, 0, 347, 756, 757, 0, 0, 279, 280, 725,
	726, 697, 281, 282, 283, 284, 0, 0, 285, 286,
	287, 288, 717, 289, 0, 352, 290, 291, 292, 353,
	758, 0, 0, 293, 0, 0, 0, 0, 294, 295,
	296, 297, 298, 671, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 667, 668, 702, 691, 692, 689,
	690, 681, 0, 677, 1356, 0, 0, 0, 680, 0,
	0, 0, 143, 144, 1154, 145, 0, 0, 0, 0,
	719, 684, 0, 0, 0, 146, 147, 148, 300, 734,
	302, 735, 149, 736, 737, 0, 150, 306, 307, 151,
	152, 687, 718, 738, 739, 310, 0, 153, 730, 0,
	710, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 163, 0, 711, 712, 714,
	0, 713, 715, 164, 165, 357, 166, 740, 167, 741,
	742, 0, 168, 0, 169, 0, 170, 0, 0, 733,
	172, 0, 173, 0, 0, 0, 675, 174, 175, 176,
	720, 721, 698, 0, 0, 177, 178, 743, 744, 745,
	0, 179, 0, 180, 0, 0, 405, 0, 181, 731,
	0, 322, 0, 182, 183, 184, 185, 186, 727, 729,
	407, 0, 190, 0, 187, 0, 406, 188, 746, 189,
	747, 748, 749, 750, 751, 0, 709, 0, 408, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	732, 410, 199, 411, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 670, 0, 699, 728, 211, 752, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 722, 218, 219, 220, 221, 222, 0, 223, 723,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 753,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	676, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 716, 260, 249, 250, 261, 416, 262,
	754, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	755, 267, 268, 724, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 756, 757, 0, 0,
	279, 280, 725, 726, 697, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 717, 289, 0, 352, 290,
	291, 292, 353, 758, 0, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 671, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 667, 668, 702,
	691, 692, 689, 690, 681, 0, 677, 0, 0, 0,
	0, 680, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 719, 684, 0, 0, 0, 146, 147,
	148, 300, 734, 302, 735, 149, 736, 737, 0, 150,
	306, 307, 151, 152, 687, 718, 738, 739, 310, 0,
	153, 730, 0, 710, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 404, 161, 162, 2262, 0,
	711, 712, 714, 0, 713, 715, 164, 165, 357, 166,
	740, 167, 741, 742, 0, 168, 0, 169, 0, 170,
	0, 0, 733, 172, 0, 173, 0, 0, 0, 675,
	174, 175, 176, 720, 721, 698, 0, 0, 177, 178,
	743, 744, 745, 0, 179, 0, 180, 0, 0, 405,
	0, 181, 731, 0, 322, 0, 182, 183, 184, 185,
	186, 727, 729, 407, 0, 190, 0, 187, 0, 406,
	188, 746, 189, 747, 748, 749, 750, 751, 0, 709,
	0, 408, 191, 192, 193, 409, 194, 195, 196, 0,
	198, 197, 0, 732, 410, 199, 411, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 333, 205, 412,
	207, 208, 210, 209, 670, 0, 699, 728, 211, 752,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	336, 413, 217, 414, 722, 218, 219, 220, 221, 222,
	0, 223, 723, 224, 339, 225, 0, 226, 227, 228,
	229, 230, 753, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	415, 246, 247, 676, 248, 0, 252, 253, 254, 255,
	0, 257, 342, 256, 258, 259, 716, 260, 249, 250,
	261, 416, 262, 754, 344, 263, 0, 270, 264, 265,
	251, 266, 269, 755, 267, 268, 724, 0, 271, 0,
	272, 273, 274, 275, 276, 277, 278, 0, 347, 756,
	757, 0, 0, 279, 280, 725, 726, 697, 281, 282,
	2261, 284, 0, 0, 285, 286, 287, 288, 717, 289,
	0, 352, 290, 291, 292, 353, 758, 0, 0, 293,
	0, 0, 0, 0, 294, 295, 296, 297, 298, 671,
	0, 0, 0, 0, 0, 669, 0, 0, 0, 0,
	667, 668, 702, 691, 692, 689, 690, 681, 0, 677,
	0, 0, 0, 0, 680, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 719, 684, 0, 0,
	0, 146, 147, 148, 300, 734, 302, 735, 149, 736,
	737, 0, 150, 306, 307, 151, 152, 687, 718, 738,
	739, 310, 0, 153, 730, 0, 710, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 404, 161,
	162, 163, 0, 711, 712, 714, 0, 713, 715, 164,
	165, 357, 166, 740, 167, 741, 742, 0, 168, 0,
	169, 0, 170, 0, 0, 733, 172, 0, 173, 0,
	0, 0, 675, 174, 175, 176, 720, 721, 698, 0,
	0, 177, 178, 743, 744, 745, 0, 179, 0, 180,
	0, 0, 405, 0, 181, 731, 0, 322, 0, 182,
	183, 184, 185, 186, 727, 729, 407, 0, 190, 0,
	187, 0, 406, 188, 746, 189, 747, 748, 749, 750,
	751, 0, 709, 0, 408, 191, 192, 193, 409, 194,
	195, 196, 0, 198, 197, 0, 732, 410, 199, 411,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 412, 207, 208, 210, 209, 670, 0, 699,
	728, 211, 752, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 413, 217, 414, 722, 218, 219,
	220, 221, 222, 0, 223, 723, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 753, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 415, 246, 247, 676, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 716,
	260, 249, 250, 261, 416, 262, 754, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 755, 267, 268, 724,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 756, 757, 0, 0, 279, 280, 725, 726,
	697, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 717, 289, 0, 352, 290, 291, 292, 353, 758,
	0, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 671, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 667, 668, 702, 691, 692, 689, 690,
	681, 0, 677, 0, 0, 0, 0, 680, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 719,
	684, 0, 0, 0, 146, 147, 148, 2260, 734, 302,
	735, 149, 736, 737, 0, 150, 306, 307, 151, 152,
	687, 718, 738, 739, 310, 0, 153, 730, 0, 710,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 404, 161, 162, 2262, 0, 711, 712, 714, 0,
	713, 715, 164, 165, 357, 166, 740, 167, 741, 742,
	0, 168, 0, 169, 0, 170, 0, 0, 733, 172,
	0, 173, 0, 0, 0, 675, 174, 175, 176, 720,
	721, 698, 0, 0, 177, 178, 743, 744, 745, 0,
	179, 0, 180, 0, 0, 405, 0, 181, 731, 0,
	322, 0, 182, 183, 184, 185, 186, 727, 729, 407,
	0, 190, 0, 187, 0, 406, 188, 746, 189, 747,
	748, 749, 750, 751, 0, 709, 0, 408, 191, 192,
	193, 409, 194, 195, 196, 0, 198, 197, 0, 732,
	410, 199, 411, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 333, 205, 412, 207, 208, 210, 209,
	670, 0, 699, 728, 211, 752, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 336, 413, 217, 414,
	722, 218, 219, 220, 221, 222, 0, 223, 723, 224,
	339, 225, 0, 226, 227, 228, 229, 230, 753, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 415, 246, 247, 676,
	248, 0, 252, 253, 254, 255, 0, 257, 342, 256,
	258, 259, 716, 260, 249, 250, 261, 416, 262, 754,
	344, 263, 0, 270, 264, 265, 251, 266, 269, 755,
	267, 268, 724, 0, 271, 0, 272, 273, 274, 275,
	276, 277, 278, 0, 347, 756, 757, 0, 0, 279,
	280, 725, 726, 697, 281, 282, 2261, 284, 0, 0,
	285, 286, 287, 288, 717, 289, 0, 352, 290, 291,
	292, 353, 758, 0, 0, 293, 0, 0, 0, 0,
	294, 295, 296, 297, 298, 671, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 667, 668, 1393, 691,
	692, 689, 690, 681, 0, 677, 0, 0, 0, 0,
	680, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 719, 684, 0, 0, 0, 146, 147, 148,
	300, 734, 302, 735, 149, 736, 737, 0, 150, 306,
	307, 151, 152, 687, 718, 738, 739, 310, 0, 153,
	730, 0, 710, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 711,
	712, 714, 0, 713, 715, 164, 165, 357, 166, 740,
	1396, 741, 742, 0, 168, 0, 169, 0, 170, 0,
	0, 733, 172, 0, 173, 0, 0, 0, 675, 174,
	175, 176, 720, 721, 698, 0, 0, 177, 178, 743,
	744, 745, 0, 179, 0, 180, 0, 0, 405, 0,
	181, 731, 0, 322, 0, 182, 183, 1397, 185, 186,
	727, 729, 407, 0, 190, 0, 187, 0, 406, 188,
	746, 189, 747, 748, 749, 750, 751, 0, 709, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 0, 732, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 1398, 1395, 206, 333, 205, 412, 207,
	208, 210, 209, 670, 0, 699, 728, 211, 752, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 722, 218, 219, 220, 221, 222, 0,
	223, 723, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 753, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 676, 248, 0, 252, 253, 254, 1399, 0,
	257, 342, 256, 258, 259, 716, 260, 249, 250, 261,
	416, 262, 754, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 755, 267, 268, 724, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 756, 757,
	0, 0, 279, 280, 725, 726, 697, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 717, 289, 0,
	352, 290, 291, 292, 353, 758, 0, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 1394, 298, 671, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 667,
	668, 702, 691, 692, 689, 690, 681, 0, 677, 0,
	0, 0, 0, 680, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 719, 684, 0, 0, 0,
	146, 147, 148, 300, 734, 302, 735, 149, 736, 737,
	0, 150, 306, 307, 151, 152, 687, 718, 738, 739,
	310, 0, 153, 730, 0, 710, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 404, 161, 162,
	163, 0, 711, 712, 714, 0, 713, 715, 164, 165,
	357, 166, 740, 167, 741, 742, 0, 168, 0, 169,
	0, 170, 0, 0, 733, 172, 0, 173, 0, 0,
	0, 675, 174, 175, 176, 720, 721, 698, 0, 0,
	177, 178, 743, 744, 745, 0, 179, 0, 180, 0,
	0, 405, 0, 181, 731, 0, 322, 0, 182, 183,
	184, 185, 186, 727, 729, 407, 0, 190, 0, 187,
	0, 406, 188, 746, 189, 747, 748, 749, 750, 751,
	0, 709, 0, 408, 191, 192, 193, 409, 194, 195,
	196, 0, 198, 197, 0, 732, 410, 199, 411, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 333,
	205, 412, 207, 208, 210, 209, 0, 0, 699, 728,
	211, 752, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 336, 413, 217, 414, 722, 218, 219, 220,
	221, 222, 0, 223, 723, 224, 339, 225, 0, 226,
	227, 228, 229, 230, 753, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 415, 246, 247, 1411, 248, 0, 252, 253,
	254, 255, 0, 257, 342, 256, 258, 259, 716, 260,
	249, 250, 261, 416, 262, 754, 344, 263, 0, 270,
	264, 265, 251, 266, 269, 755, 267, 268, 724, 0,
	271, 0, 272, 273, 274, 275, 276, 277, 278, 0,
	347, 756, 757, 0, 0, 279, 280, 725, 726, 697,
	281, 282, 283, 284, 0, 0, 285, 286, 287, 288,
	717, 289, 0, 352, 290, 291, 292, 353, 758, 0,
	0, 293, 0, 0, 0, 0, 294, 295, 296, 297,
	298, 0, 0, 0, 0, 0, 0, 1409, 0, 0,
	0, 0, 1407, 1408, 702, 691, 692, 689, 690, 681,
	0, 1410, 0, 0, 0, 0, 680, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 719, 684,
	0, 0, 0, 146, 147, 148, 300, 734, 302, 735,
	149, 736, 737, 0, 150, 306, 307, 151, 152, 0,
	718, 738, 739, 310, 0, 153, 730, 0, 710, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	404, 161, 162, 163, 0, 711, 712, 714, 0, 713,
	715, 164, 165, 357, 166, 740, 167, 741, 742, 0,
	168, 0, 169, 0, 170, 0, 0, 733, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 720, 721,
	698, 0, 0, 177, 178, 743, 744, 745, 0, 179,
	0, 180, 0, 0, 405, 0, 181, 731, 0, 322,
	0, 182, 183, 184, 185, 186, 727, 729, 407, 0,
	190, 0, 187, 0, 406, 188, 746, 189, 747, 748,
	749, 750, 751, 0, 709, 0, 408, 191, 192, 193,
	409, 194, 195, 196, 0, 198, 197, 0, 732, 410,
	199, 411, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 412, 207, 208, 210, 209, 0,
	0, 699, 728, 211, 752, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 413, 217, 414, 722,
	218, 219, 220, 221, 222, 0, 223, 723, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 753, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 415, 246, 247, 1411, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 716, 260, 249, 250, 261, 416, 262, 754, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 755, 267,
	268, 724, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 756, 757, 0, 0, 279, 280,
	725, 726, 697, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 717, 289, 0, 352, 290, 291, 292,
	353, 758, 0, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 702, 691, 692, 689,
	690, 681, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 144, 1410, 145, 0, 0, 0, 680,
	719, 684, 0, 0, 0, 146, 147, 148, 0, 734,
	302, 735, 149, 736, 737, 0, 150, 306, 307, 151,
	152, 687, 718, 738, 739, 310, 0, 153, 730, 0,
	710, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 2262, 0, 711, 712, 714,
	0, 713, 715, 164, 165, 357, 166, 740, 167, 741,
	742, 0, 168, 0, 169, 0, 170, 0, 0, 733,
	172, 0, 173, 0, 0, 0, 675, 174, 175, 176,
	720, 721, 698, 0, 0, 177, 178, 743, 744, 745,
	0, 179, 0, 180, 0, 0, 405, 0, 181, 731,
	0, 322, 0, 182, 183, 184, 185, 186, 727, 729,
	0, 0, 190, 0, 187, 0, 406, 188, 746, 189,
	747, 748, 749, 750, 751, 0, 709, 0, 0, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	732, 410, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 670, 0, 699, 728, 211, 752, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 722, 218, 219, 220, 221, 222, 0, 223, 723,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 753,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	676, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 716, 260, 249, 250, 261, 0, 262,
	754, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	755, 267, 268, 724, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 756, 757, 0, 0,
	279, 280, 725, 726, 697, 281, 282, 2261, 284, 0,
	0, 285, 286, 287, 288, 717, 289, 0, 352, 290,
	291, 292, 353, 758, 0, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 667, 668, 0,
	0, 0, 143, 144, 0, 145, 677, 0, 0, 0,
	719, 680, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 718, 308, 309, 310, 0, 153, 730, 0,
	710, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 163, 0, 711, 712, 714,
	0, 713, 715, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	720, 721, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 405, 0, 181, 731,
	0, 322, 0, 182, 183, 184, 185, 186, 727, 729,
	407, 0, 190, 0, 187, 0, 406, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 408, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	732, 410, 199, 411, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 0, 0, 0, 728, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 722, 218, 219, 220, 221, 222, 0, 223, 723,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 716, 260, 249, 250, 261, 416, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 724, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 725, 726, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 717, 289, 0, 352, 290,
	291, 292, 353, 354, 0, 0, 293, 0, 572, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 1817, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 403, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 404, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 405, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 407, 0, 190, 0, 187, 0, 406, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	408, 191, 192, 193, 409, 194, 195, 196, 0, 198,
	197, 0, 332, 410, 199, 411, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 412, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	413, 217, 414, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 415,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 127,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	416, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 131, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 661, 354, 0, 0, 293, 0,
	0, 0, 125, 294, 295, 296, 297, 298, 0, 126,
	572, 569, 0, 570, 565, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 116, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 1117, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 562, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 563, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 561, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	572, 569, 0, 570, 565, 560, 0, 0, 0, 0,
	0, 571, 566, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 1114, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 562, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 563, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 561, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	572, 569, 0, 570, 565, 560, 0, 0, 0, 0,
	0, 571, 566, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 793, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 562, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 563, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 561, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	572, 569, 0, 570, 565, 560, 0, 0, 0, 0,
	0, 571, 566, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 562, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 563, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 561, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 140,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 571, 566, 299, 0, 0, 0, 0, 146, 147,
	148, 300, 301, 302, 303, 149, 304, 305, 0, 150,
	306, 307, 151, 152, 0, 0, 308, 309, 310, 0,
	153, 311, 0, 0, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 0, 161, 162, 163, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 357, 166,
	312, 167, 313, 314, 0, 168, 0, 169, 0, 170,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 315,
	174, 175, 176, 316, 317, 0, 0, 0, 177, 178,
	318, 319, 320, 0, 179, 0, 180, 0, 0, 0,
	0, 181, 321, 0, 322, 0, 182, 183, 184, 185,
	186, 323, 324, 0, 0, 190, 0, 187, 0, 0,
	188, 325, 189, 326, 327, 328, 329, 330, 0, 331,
	0, 0, 191, 192, 193, 0, 194, 195, 196, 0,
	198, 197, 0, 332, 0, 199, 0, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 333, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 334, 211, 335,
	212, 213, 0, 214, 0, 632, 215, 0, 0, 216,
	336, 0, 217, 0, 337, 218, 219, 220, 221, 222,
	0, 223, 338, 224, 339, 225, 0, 226, 227, 228,
	229, 230, 340, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	0, 246, 247, 341, 248, 0, 252, 253, 254, 255,
	127, 257, 342, 256, 258, 259, 0, 260, 249, 250,
	261, 0, 262, 343, 344, 263, 0, 270, 264, 265,
	251, 266, 269, 345, 267, 268, 346, 0, 271, 131,
	272, 273, 274, 275, 276, 277, 278, 0, 347, 348,
	349, 0, 0, 279, 280, 350, 351, 0, 281, 282,
	283, 284, 0, 0, 285, 286, 287, 288, 0, 289,
	0, 352, 290, 291, 292, 661, 354, 0, 0, 293,
	0, 140, 0, 125, 294, 295, 296, 297, 298, 0,
	126, 0, 0, 0, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 299, 0, 626, 0, 631,
	146, 147, 148, 300, 301, 302, 303, 149, 304, 305,
	0, 150, 306, 307, 151, 152, 0, 0, 308, 309,
	310, 0, 153, 311, 0, 0, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 0, 161, 162,
	163, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	357, 166, 312, 167, 313, 314, 0, 168, 0, 169,
	0, 170, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 315, 174, 175, 176, 316, 317, 0, 0, 0,
	177, 178, 318, 319, 320, 0, 179, 0, 180, 0,
	0, 0, 0, 181, 321, 0, 322, 0, 182, 183,
	184, 185, 186, 323, 324, 0, 0, 190, 0, 187,
	0, 0, 188, 325, 189, 326, 327, 328, 329, 330,
	0, 331, 0, 0, 191, 192, 193, 0, 194, 195,
	196, 0, 198, 197, 0, 332, 0, 199, 0, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 333,
	205, 0, 207, 208, 210, 209, 0, 0, 0, 334,
	211, 335, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 336, 0, 217, 0, 337, 218, 219, 220,
	221, 222, 0, 223, 338, 224, 339, 225, 0, 226,
	227, 228, 229, 230, 340, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 0, 246, 247, 341, 248, 0, 252, 253,
	254, 255, 127, 257, 342, 256, 258, 259, 0, 260,
	249, 250, 261, 0, 262, 343, 344, 263, 0, 270,
	264, 265, 251, 266, 269, 345, 267, 268, 346, 0,
	271, 131, 272, 273, 274, 275, 276, 277, 278, 0,
	347, 348, 349, 0, 0, 279, 280, 350, 351, 0,
	281, 282, 283, 284, 0, 0, 285, 286, 287, 288,
	0, 289, 0, 352, 290, 291, 292, 661, 354, 0,
	0, 293, 0, 140, 0, 125, 294, 295, 296, 297,
	298, 0, 126, 0, 0, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 299, 0, 0,
	0, 116, 146, 147, 148, 300, 301, 302, 303, 149,
	304, 305, 0, 150, 306, 307, 151, 152, 0, 0,
	308, 309, 310, 0, 153, 311, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	161, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 357, 166, 312, 167, 313, 314, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 315, 174, 175, 176, 316, 317, 0,
	0, 0, 177, 178, 318, 319, 320, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 321, 0, 322, 0,
	182, 183, 184, 185, 186, 323, 324, 0, 0, 190,
	0, 187, 0, 0, 188, 325, 189, 326, 327, 328,
	329, 330, 0, 331, 0, 0, 191, 192, 193, 0,
	194, 195, 196, 0, 198, 197, 0, 332, 0, 199,
	0, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 333, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 334, 211, 335, 212, 213, 0, 214, 0, 632,
	215, 0, 0, 216, 336, 0, 217, 0, 337, 218,
	219, 220, 221, 222, 0, 223, 338, 224, 339, 225,
	0, 226, 227, 228, 229, 230, 340, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 341, 248, 0,
	252, 253, 254, 255, 0, 257, 342, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 343, 344, 263,
	0, 270, 264, 265, 251, 266, 269, 345, 267, 268,
	346, 0, 271, 0, 272, 273, 274, 275, 276, 277,
	278, 0, 347, 348, 349, 0, 0, 279, 280, 350,
	351, 0, 281, 282, 283, 284, 0, 0, 285, 286,
	287, 288, 0, 289, 0, 352, 290, 291, 292, 353,
	354, 0, 0, 293, 0, 140, 0, 0, 294, 295,
	296, 297, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 299,
	0, 626, 0, 631, 146, 147, 148, 300, 301, 302,
	303, 149, 304, 305, 0, 150, 306, 307, 151, 152,
	0, 0, 308, 309, 310, 0, 153, 311, 0, 0,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 0, 161, 162, 163, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 357, 166, 312, 167, 313, 314,
	0, 168, 0, 169, 0, 170, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 315, 174, 175, 176, 316,
	317, 0, 0, 0, 177, 178, 318, 319, 320, 0,
	179, 0, 180, 0, 0, 0, 0, 181, 321, 0,
	322, 0, 182, 183, 184, 185, 186, 323, 324, 0,
	0, 190, 0, 187, 0, 0, 188, 325, 189, 326,
	327, 328, 329, 330, 0, 331, 0, 0, 191, 192,
	193, 0, 194, 195, 196, 0, 198, 197, 0, 332,
	0, 199, 0, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 333, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 334, 211, 335, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 336, 0, 217, 0,
	337, 218, 219, 220, 221, 222, 0, 223, 338, 224,
	339, 225, 0, 226, 227, 228, 229, 230, 340, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 0, 246, 247, 341,
	248, 0, 252, 253, 254, 255, 0, 257, 342, 256,
	258, 259, 0, 260, 249, 250, 261, 0, 262, 343,
	344, 263, 0, 270, 264, 265, 251, 266, 269, 345,
	267, 268, 346, 0, 271, 0, 272, 273, 274, 275,
	276, 277, 278, 0, 347, 348, 349, 0, 0, 279,
	280, 350, 351, 0, 281, 282, 283, 284, 0, 0,
	285, 286, 287, 288, 0, 289, 0, 352, 290, 291,
	292, 353, 354, 0, 0, 293, 0, 0, 140, 0,
	294, 295, 296, 297, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 921, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 0, 0, 293, 0,
	140, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 1264, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 0, 0,
	293, 0, 140, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	1863, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	0, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 702, 691, 692, 689, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 144,
	0, 145, 914, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 734, 302, 735, 149, 736,
	737, 0, 150, 306, 307, 151, 152, 0, 0, 738,
	739, 310, 0, 153, 311, 0, 403, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 404, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 740, 167, 741, 742, 0, 168, 0,
	169, 0, 170, 0, 0, 733, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 698, 0,
	0, 177, 178, 743, 744, 745, 0, 179, 0, 180,
	0, 0, 405, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 407, 0, 190, 0,
	187, 0, 406, 188, 746, 189, 747, 748, 749, 750,
	751, 0, 709, 0, 408, 191, 192, 193, 409, 194,
	195, 196, 0, 198, 197, 0, 332, 410, 199, 411,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 412, 207, 208, 210, 209, 0, 0, 699,
	334, 211, 752, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 413, 217, 414, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 753, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 415, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 416, 262, 754, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 755, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 756, 757, 0, 0, 279, 280, 350, 351,
	697, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 758,
	572, 569, 293, 0, 0, 842, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 403, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 404, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	405, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 407, 0, 190, 0, 187, 0,
	406, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 408, 191, 192, 193, 409, 194, 195, 196,
	0, 198, 197, 0, 332, 410, 199, 411, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	412, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 413, 217, 414, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 415, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 416, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 136, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 135, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 572, 569, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 139, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	403, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 404, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 405, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 323, 324,
	407, 0, 190, 0, 187, 0, 406, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 408, 191,
	192, 193, 409, 194, 195, 196, 0, 198, 197, 0,
	332, 410, 199, 411, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 412, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 413, 217,
	414, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 415, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 416, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 323, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 572, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 139, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 403, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 404, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 405, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 407, 0, 190, 0,
	187, 0, 406, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 408, 191, 192, 193, 409, 194,
	195, 196, 0, 198, 197, 0, 332, 410, 199, 411,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 412, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 413, 217, 414, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 415, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 416, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	1284, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 1282, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 1281, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 1286, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 1279, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 1285, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 1280, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 1284, 153,
	311, 0, 0, 1505, 154, 155, 156, 0, 157, 1282,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 1286, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	1504, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 1285, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 1507, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 1240, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 323, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 1921, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 323, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 1921, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 1918,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 632, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 1169, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 879, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 632, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 873, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	632, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	649, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 360, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 359, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 1756, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 1754, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 1749, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 323, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 506, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	1134, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 931, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 323, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 0, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 876, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 821, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 819, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 310, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	815, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 347, 348, 349,
	0, 0, 279, 280, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 813, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 153, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 810, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 341, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 347, 348, 349, 0, 0, 279, 280,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 806, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	220, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 229, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 248, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	140, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 146,
	147, 148, 300, 301, 302, 303, 149, 304, 305, 0,
	150, 306, 307, 151, 152, 0, 0, 308, 309, 310,
	0, 153, 311, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 357,
	166, 312, 167, 313, 314, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	315, 174, 175, 176, 316, 317, 0, 0, 0, 177,
	178, 318, 319, 320, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 321, 0, 322, 0, 182, 183, 184,
	185, 186, 801, 324, 0, 0, 190, 0, 187, 0,
	0, 188, 325, 189, 326, 327, 328, 329, 330, 0,
	331, 0, 0, 191, 192, 193, 0, 194, 195, 196,
	0, 198, 197, 0, 332, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 333, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 334, 211,
	335, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 336, 0, 217, 0, 337, 218, 219, 220, 221,
	222, 0, 223, 338, 224, 339, 225, 0, 226, 227,
	228, 229, 230, 340, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 341, 248, 0, 252, 253, 254,
	255, 0, 257, 342, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 343, 344, 263, 0, 270, 264,
	265, 251, 266, 269, 345, 267, 268, 346, 0, 271,
	0, 272, 273, 274, 275, 276, 277, 278, 0, 347,
	348, 349, 0, 0, 279, 280, 350, 351, 0, 281,
	282, 283, 284, 0, 0, 285, 286, 287, 288, 0,
	289, 0, 352, 290, 291, 292, 353, 354, 140, 0,
	293, 0, 0, 0, 0, 294, 295, 296, 297, 298,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 146, 147, 148,
	300, 301, 302, 303, 149, 304, 305, 0, 150, 306,
	307, 151, 152, 0, 0, 308, 309, 777, 0, 153,
	311, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 357, 166, 312,
	167, 313, 314, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 315, 174,
	175, 176, 316, 317, 0, 0, 0, 177, 178, 318,
	319, 320, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 321, 0, 322, 0, 182, 183, 184, 185, 186,
	323, 324, 0, 0, 190, 0, 187, 0, 0, 188,
	325, 189, 326, 327, 328, 329, 330, 0, 331, 0,
	0, 191, 192, 193, 0, 194, 195, 196, 0, 198,
	197, 0, 332, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 333, 528, 0, 207,
	208, 210, 209, 0, 0, 0, 334, 211, 335, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 336,
	0, 217, 0, 337, 218, 219, 220, 221, 222, 0,
	223, 338, 224, 339, 225, 0, 226, 227, 228, 229,
	230, 340, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 341, 248, 0, 252, 253, 254, 255, 0,
	257, 342, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 343, 344, 263, 0, 270, 264, 265, 251,
	266, 269, 345, 267, 268, 346, 0, 271, 0, 272,
	273, 274, 275, 276, 277, 278, 0, 524, 348, 349,
	0, 0, 279, 778, 350, 351, 0, 281, 282, 283,
	284, 0, 0, 285, 286, 287, 288, 0, 289, 0,
	352, 290, 291, 292, 353, 354, 140, 0, 293, 0,
	0, 0, 0, 294, 295, 296, 297, 298, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 146, 147, 148, 300, 301,
	302, 303, 149, 304, 305, 0, 150, 306, 307, 151,
	152, 0, 0, 308, 309, 310, 0, 153, 311, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 357, 166, 312, 167, 313,
	314, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 315, 174, 175, 176,
	316, 317, 0, 0, 0, 177, 178, 318, 319, 320,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 321,
	0, 322, 0, 182, 183, 184, 185, 186, 323, 324,
	0, 0, 190, 0, 187, 0, 0, 188, 325, 189,
	326, 327, 328, 329, 330, 0, 331, 0, 0, 191,
	192, 193, 0, 194, 195, 196, 0, 198, 197, 0,
	332, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 333, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 334, 211, 335, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 336, 0, 217,
	0, 337, 218, 219, 220, 221, 222, 0, 223, 338,
	224, 339, 225, 0, 226, 227, 228, 229, 230, 340,
	614, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	341, 248, 0, 252, 253, 254, 255, 0, 257, 342,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	343, 344, 263, 0, 270, 264, 265, 251, 266, 269,
	345, 267, 268, 346, 0, 271, 0, 272, 273, 274,
	275, 276, 277, 278, 0, 347, 348, 349, 0, 0,
	279, 280, 350, 351, 0, 281, 282, 283, 284, 0,
	0, 285, 286, 287, 288, 0, 289, 0, 352, 290,
	291, 292, 353, 354, 140, 0, 293, 0, 0, 0,
	0, 294, 295, 296, 297, 298, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 146, 147, 148, 300, 301, 302, 303,
	149, 304, 305, 0, 150, 306, 307, 151, 152, 0,
	0, 308, 309, 310, 0, 518, 311, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 357, 166, 312, 167, 313, 314, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 315, 174, 175, 176, 316, 317,
	0, 0, 0, 177, 178, 318, 319, 320, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 321, 0, 322,
	0, 182, 183, 184, 185, 186, 323, 324, 0, 0,
	190, 0, 187, 0, 0, 188, 325, 189, 326, 327,
	328, 329, 330, 0, 331, 0, 0, 191, 192, 193,
	0, 194, 195, 196, 0, 198, 197, 0, 332, 0,
	199, 0, 0, 517, 0, 0, 201, 0, 202, 203,
	204, 206, 333, 528, 0, 207, 208, 210, 209, 0,
	0, 0, 334, 211, 335, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 336, 0, 217, 0, 337,
	218, 219, 220, 221, 222, 0, 223, 338, 224, 339,
	225, 0, 226, 227, 228, 229, 230, 340, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 519, 248,
	0, 252, 253, 254, 255, 0, 257, 342, 256, 520,
	259, 0, 260, 249, 250, 261, 0, 262, 343, 344,
	263, 0, 270, 264, 265, 251, 266, 269, 345, 267,
	268, 346, 0, 271, 0, 272, 273, 274, 275, 276,
	277, 278, 0, 524, 348, 349, 0, 0, 279, 522,
	350, 351, 0, 281, 282, 283, 284, 0, 0, 285,
	286, 287, 288, 0, 289, 0, 352, 290, 291, 292,
	353, 354, 140, 0, 293, 0, 0, 0, 0, 294,
	295, 296, 297, 298, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 146, 147, 148, 300, 301, 302, 303, 149, 304,
	305, 0, 150, 306, 307, 151, 152, 0, 0, 308,
	309, 310, 0, 153, 311, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 357, 166, 312, 167, 313, 314, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 315, 174, 175, 176, 316, 317, 0, 0,
	0, 177, 178, 318, 319, 320, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 321, 0, 322, 0, 182,
	183, 184, 185, 186, 323, 324, 0, 0, 190, 0,
	187, 0, 0, 188, 325, 189, 326, 327, 328, 329,
	330, 0, 331, 0, 0, 191, 192, 193, 0, 194,
	195, 196, 0, 198, 197, 0, 332, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	333, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	334, 211, 335, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 336, 0, 217, 0, 337, 218, 219,
	0, 221, 222, 0, 223, 338, 224, 339, 225, 0,
	226, 227, 228, 0, 230, 340, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 341, 0, 0, 252,
	253, 254, 255, 0, 257, 342, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 343, 344, 263, 0,
	270, 264, 265, 251, 266, 269, 345, 267, 268, 346,
	0, 271, 0, 272, 273, 274, 275, 276, 277, 278,
	0, 347, 348, 349, 0, 0, 279, 280, 350, 351,
	0, 281, 282, 283, 284, 0, 0, 285, 286, 287,
	288, 0, 289, 0, 352, 290, 291, 292, 353, 354,
	0, 0, 293, 0, 0, 0, 0, 294, 295, 296,
	297, 298, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 974, 0,
	940, 941, 0, 960, 961, 962, 970, 971, 972, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 942,
	0, 0, 0, 943, 0, 957, 974, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 942, 0, 0,
	0, 943, 0, 957, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	948, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 975, 0, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 975,
	0, 0, 0, 965, 0, 0, 948, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 975, 0, 0,
	0, 965, 0, 0, 964, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 964, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 0, 0, 968, 963, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 974, 959, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 0, 0, 0, 968, 963, 0, 0, 942, 0,
	0, 0, 943, 0, 957, 974, 966, 0, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 942, 2215, 0, 0,
	0, 0, 957, 0, 966, 0, 0, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 0, 0, 0, 2193, 0, 0, 0, 948,
	0, 0, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 967,
	975, 0, 0, 2137, 0, 0, 0, 948, 0, 0,
	0, 1653, 1654, 0, 1671, 1672, 1673, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 975, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	965, 0, 0, 964, 1668, 0, 958, 963, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 0, 942, 0,
	0, 0, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 940, 941, 1659,
	960, 961, 962, 970, 971, 972, 0, 968, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 959,
	943, 0, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 1674, 0, 948,
	0, 0, 0, 0, 942, 0, 0, 0, 940, 941,
	957, 960, 961, 962, 970, 971, 972, 0, 1669, 967,
	975, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 974, 966, 0, 973, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 965, 0, 0, 942, 2132, 0, 958, 0,
	0, 957, 0, 966, 0, 948, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	0, 0, 0, 964, 2128, 967, 975, 0, 0, 0,
	0, 1670, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 948, 0, 965, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 967, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 964,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 958, 0, 0, 1665, 1666,
	1667, 0, 0, 1664, 1662, 1663, 1655, 1656, 1657, 1658,
	1660, 1661, 0, 0, 0, 0, 0, 959, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 0, 0, 2120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 940, 941, 0, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 968, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 974, 0, 0,
	0, 966, 0, 0, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 942, 0,
	0, 0, 2043, 0, 957, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 943, 0,
	0, 974, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 942, 2042, 0, 0, 0, 0, 957, 948,
	0, 0, 0, 0, 0, 0, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 967,
	975, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	943, 0, 0, 974, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 948, 942, 0, 0, 0, 958, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 958, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 967, 975, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 964,
	0, 968, 0, 963, 0, 0, 0, 0, 0, 0,
	943, 0, 0, 974, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 942, 0, 2007, 0, 0, 0,
	957, 0, 0, 0, 0, 940, 941, 959, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 968, 0, 0, 0, 0, 943, 966,
	0, 974, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 0, 0,
	1934, 0, 942, 0, 0, 948, 0, 0, 957, 0,
	0, 0, 940, 941, 0, 960, 961, 962, 970, 971,
	972, 0, 0, 0, 0, 967, 975, 0, 963, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 974, 0,
	0, 966, 0, 973, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 965, 942,
	0, 0, 1866, 948, 958, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 975, 0, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	948, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	967, 975, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 0, 0,
	0, 0, 1842, 0, 0, 0, 0, 0, 0, 0,
	940, 941, 959, 960, 961, 962, 970, 971, 972, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 968, 0,
	0, 0, 0, 943, 0, 0, 974, 0, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 942, 0, 0,
	1357, 0, 0, 957, 0, 0, 0, 940, 941, 0,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 1487, 0,
	943, 0, 0, 974, 0, 0, 966, 0, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 942, 1615, 0, 0, 948, 2285,
	957, 0, 0, 0, 0, 940, 941, 0, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 0, 967, 975,
	0, 963, 0, 0, 0, 0, 0, 0, 943, 0,
	1488, 974, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 942, 0, 0, 948, 0, 958, 957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 2284, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 948, 958, 1685, 0, 0, 1684, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 967, 975, 0, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 1217,
	0, 0, 0, 0, 0, 940, 941, 959, 960, 961,
	962, 970, 971, 972, 0, 0, 0, 964, 0, 0,
	0, 963, 0, 968, 0, 1216, 0, 0, 943, 0,
	0, 974, 0, 0, 966, 0, 0, 954, 955, 956,
	969, 0, 953, 951, 952, 944, 945, 946, 947, 949,
	950, 0, 942, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 940, 941, 959, 960, 961, 962, 970,
	971, 972, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 968, 0, 0, 0, 0, 943, 0, 0, 974,
	0, 966, 0, 0, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 0, 0,
	942, 0, 0, 948, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 973, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 965, 0, 0, 0,
	0, 948, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 975, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 941, 959, 960, 961, 962, 970,
	971, 972, 0, 0, 0, 964, 553, 0, 0, 963,
	0, 968, 0, 0, 0, 0, 943, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 940, 941, 959, 960, 961, 962, 970, 971, 972,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 968,
	0, 0, 0, 0, 943, 0, 0, 974, 0, 966,
	0, 0, 954, 955, 956, 969, 0, 953, 951, 952,
	944, 945, 946, 947, 949, 950, 0, 0, 942, 0,
	0, 948, 0, 0, 957, 0, 0, 0, 0, 940,
	941, 0, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 967, 975, 0, 0, 963, 0, 0, 0, 1686,
	0, 0, 943, 0, 0, 974, 0, 966, 0, 973,
	954, 955, 956, 969, 0, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 965, 0, 942, 0, 0, 948,
	958, 0, 957, 0, 1691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	975, 0, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 948, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 967, 975, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 1846, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	941, 959, 960, 961, 962, 970, 971, 972, 0, 0,
	0, 964, 0, 0, 0, 963, 0, 968, 0, 0,
	0, 0, 943, 0, 0, 974, 0, 966, 0, 0,
	954, 955, 956, 969, 0, 953, 951, 952, 944, 945,
	946, 947, 949, 950, 0, 0, 942, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 940, 941, 959,
	960, 961, 962, 970, 971, 972, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 968, 0, 1644, 0, 0,
	943, 0, 0, 974, 0, 966, 0, 0, 954, 955,
	956, 969, 0, 953, 951, 952, 944, 945, 946, 947,
	949, 950, 0, 0, 942, 0, 0, 948, 0, 0,
	957, 0, 0, 0, 940, 941, 0, 960, 961, 962,
	970, 971, 972, 0, 0, 0, 0, 967, 975, 0,
	963, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	974, 0, 0, 966, 0, 973, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	965, 942, 0, 0, 0, 948, 958, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 975, 0, 0, 0,
	0, 964, 0, 0, 0, 1653, 1654, 0, 1671, 1672,
	1673, 0, 0, 973, 1651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 948, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 967, 975, 0, 0, 0, 0, 1668, 964,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 1659, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 966, 1675, 0, 954, 955, 956, 969,
	0, 953, 951, 952, 944, 945, 946, 947, 949, 950,
	0, 1674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 941, 959, 960, 961, 962, 970, 971,
	972, 0, 1669, 0, 0, 0, 0, 0, 963, 0,
	968, 0, 0, 0, 0, 943, 0, 0, 974, 0,
	0, 966, 0, 0, 954, 955, 956, 969, 0, 953,
	951, 952, 944, 945, 946, 947, 949, 950, 0, 942,
	0, 0, 0, 0, 0, 957, 0, 0, 940, 941,
	0, 960, 961, 962, 970, 971, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 974, 1670, 0, 0, 966, 0,
	0, 954, 955, 956, 969, 0, 953, 951, 952, 944,
	945, 946, 947, 949, 950, 942, 0, 0, 0, 0,
	948, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 948, 0, 0, 958,
	0, 0, 1665, 1666, 1667, 0, 0, 1664, 1662, 1663,
	1655, 1656, 1657, 1658, 1660, 1661, 967, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 1065, 1055, 1084, 1047, 1075, 1074, 0, 0, 1049,
	1048, 0, 0, 0, 968, 1086, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 954,
	955, 956, 969, 0, 953, 951, 952, 944, 945, 946,
	947, 949, 950, 0, 0, 0, 0, 0, 0, 1080,
	0, 1072, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	1067, 1068, 966, 0, 0, 954, 955, 956, 969, 0,
	953, 951, 952, 944, 945, 946, 947, 949, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 1057, 1059, 1060, 1061, 1062, 1063, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 1065, 1055, 1084, 1047,
	1075, 1074, 0, 0, 1049, 1048, 0, 0, 0, 0,
	1086, 1085, 0, 0, 0, 0, 1051, 0, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 1056, 0, 0, 0, 0, 0, 0, 580,
	0, 0, 0, 0, 1080, 0, 1072, 1071, 0, 0,
	0, 578, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 1066, 0, 0, 0, 1292, 1290, 1291, 1294, 1293,
	0, 0, 579, 0, 1069, 1067, 1068, 581, 0, 0,
	0, 0, 587, 588, 0, 0, 597, 0, 0, 0,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 582, 1064, 1053, 0, 1058, 1057, 1059, 1060, 1061,
	1062, 1063, 1088, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 0, 1050, 0, 0, 1081, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1051, 0, 583, 0, 0, 0, 0, 0, 0,
	1054, 0, 0, 1073, 0, 1087, 0, 1056, 584, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 586,
	593, 0, 0, 0, 0, 0, 1066, 0, 0, 0,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 0, 0, 1081, 1082, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 577, 594, 515, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 599, 0, 0, 0,
	516, 0, 0, 0, 0, 592, 596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598,
}
var sqlPact = [...]int{

	142, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18564, -1000,
	-1000, 23334, -1000, -1000, -1000, -1000, -1000, -1000, 23016, 725,
	1121, -1000, -1000, -1000, -1000, -1000, 23334, 233, 1819, 5834,
	647, 1203, 23334, 18564, 1197, 1819, 24606, -1000, -1000, 24606,
	1732, -1000, -1000, -1000, -1000, -1000, 28740, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 642, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	916, 719, 160, 717, -1000, 831, -25, 15346, 32477, 535,
	537, 535, 535, 536, 716, 28422, 23334, 1572, 19, -1000,
	342, 16309, 142, 611, 11, 19200, 23334, -1000, 29, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 410, 29, -1000, -1000, 22698,
	-1000, 1363, 1217, 1188, 21426, -1000, -1000, -1000, -1000, -1000,
	346, -1000, 14024, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 982, -1000, 12, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23334,
	11668, 345, 1362, 11668, 981, -1000, 23334, -1000, -1000, -1000,
	1187, -1000, -1000, -1000, -1000, -1000, 434, 1749, 696, 344,
	28104, -1000, 929, -1000, 433, 594, -1000, -1000, 15016, 45,
	21426, -1000, 11668, 11668, 27786, 23334, 23334, 1237, 27468, -1000,
	831, -1000, -1000, 27150, 26832, 26514, 26196, 25878, -1000, 1157,
	1569, 1569, 1569, 1605, 179, 167, 160, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1693, -1000, -1000, -1000,
	-1000, 1733, -1000, -1000, -1000, -1000, -1000, 1187, 18246, 874,
	1570, 1355, -1000, 979, 1353, 1348, 1346, 1342, 1338, -1000,
	821, -1000, 1373, 540, -1000, 1335, 826, 517, -1000, 1334,
	1333, 929, -1000, 929, -1000, -1000, -1000, 607, 24606, 22380,
	25560, 23334, 22062, 1, 23334, -1000, 343, 1, 10295, 10295,
	-1000, -1000, 342, -1000, 9609, 1538, 184, -181, 178, 401,
	-1000, 15665, 17598, -1000, 18246, 19200, 11, -39, -1000, -1000,
	-1000, 5504, 679, 16631, 29, -1000, -1000, -1000, -1000, -1000,
	21426, 23334, 23334, 701, 25242, 368, -1000, 11668, 55, -1000,
	-1000, 342, 18564, 918, 378, 31784, -1000, 11668, 11668, 11668,
	11668, 11668, 885, 362, -1000, 340, 339, 6851, -1000, -1000,
	1730, -1000, -1000, -1000, 176, -1000, -1000, 11668, 29, -1000,
	-1000, -1000, -1000, 326, 1744, -1000, 468, -1000, -1000, -1000,
	443, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1369, 325, 323, 321, -1000, -1000, -1000, -1000, 319, 318,
	316, 315, 314, 312, 310, 306, 305, 302, 295, 294,
	291, 287, 284, 842, -1000, 463, -1000, -1000, 463, 463,
	-1000, 253, 253, 254, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 253, -1000, -1000, -1000, 413, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 280, 1649, 32419, 18246, 31784, 18564,
	-1000, -1000, -1000, -1000, 23334, 11668, -1000, 1648, 929, -10,
	-1000, -1000, -1000, -1000, 1122, 1204, 569, 1232, 14686, 14356,
	1522, -1000, -1000, -1000, 43, 5834, 126, -1000, 31784, 31784,
	277, 1060, 449, 121, 24924, 449, 1058, -1000, 1157, 125,
	1457, -1000, 125, 1454, 120, 1449, -1000, -133, -1000, 1447,
	-39, 1445, -1000, 999, 1185, 10982, 1167, 11668, 160, -1000,
	-1000, 160, 160, 7881, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 21744, -1000, -1000, 693, 23334, 1367, 18564,
	23334, 23334, 23334, 23334, 23334, -1000, -1000, 173, 1318, 23334,
	1118, -1000, -1000, 23334, 23334, 788, 638, -1000, -10, -1000,
	24606, -1000, 866, 1421, 469, 832, 1418, 814, 813, 1416,
	23334, 1, 1647, 23334, 83, -1000, 31135, -1000, 83, -1000,
	50, -1000, 31784, -1000, 1186, 1182, 16309, 1190, 922, 922,
	922, -1000, 263, 357, 401, 4830, 11668, -1000, 20472, 928,
	74, 169, 1538, -1000, 23334, 399, -1000, 23334, -1000, -1000,
	-1000, 1331, 34, -1000, -1000, 454, 92, 1644, 92, 16954,
	-1000, 23334, 32, 31784, 232, 19518, 606, -1000, 495, 19836,
	32294, 32419, 5834, 632, 11668, 11668, 11668, 11668, 11668, 11668,
	11668, 11668, 11668, 11668, 11668, 11668, 11668, 11668, 11668, 11668,
	11668, 11668, 11668, 11668, 11668, 11668, 986, 11668, 600, 11668,
	11668, 11668, 11668, 1158, 919, 247, 943, -1000, 1686, 1686,
	1686, 32078, 32078, 275, 362, -1000, 11668, -1000, 10639, 167,
	30545, -9, -1000, -1000, -1000, 8224, 461, 31784, 29, 6507,
	-1000, 1727, 688, 1381, 1267, 262, 165, 158, 156, 11668,
	11668, 12354, 12354, 11668, 12697, 11668, 11668, 7194, 11668, 11668,
	11668, 11668, 11668, 11668, -1000, 260, -1000, -1000, -1000, -1000,
	1725, -1000, -1000, 1723, -1000, 630, 621, 1722, -25, 20,
	-1000, 601, -1000, -1000, -1000, -1000, 118, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 254,
	842, 253, 253, 253, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 413, -1000, -1000, 463, 463, 463, -1000, -1000, -66,
	-1000, 1329, -1000, 424, 13, 534, -10, 929, 815, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1743, -22, -1000, -1000, -22, -1000, -1000, 5834,
	-1000, -1000, 21426, -1000, -1000, 19836, 1643, 1415, -1000, 851,
	-1000, 1642, 23334, 977, 1035, -1000, 572, 1411, -1000, -1000,
	23334, 23334, -1000, 23334, -1000, 23334, 23334, 5834, 23334, 23334,
	-1000, -1000, -1000, 31784, -1000, 388, -1000, -1000, 31784, 756,
	1223, -1000, 1223, -24, -1000, 30897, 1180, 23334, -1000, -1000,
	-1000, -1000, -1000, 23334, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 141, -1000, -1000, -1000, -1000, 23334, 23334, 23334,
	-1000, -58, 834, -1000, 20154, 1564, 1540, 1547, 21426, 1622,
	-25, 1321, 1618, -25, 1320, 599, 23334, 598, 589, 21426,
	-1000, 251, 0, 454, 10295, 16309, 5834, -1000, 454, 9609,
	-1000, 16309, 16309, 1315, 1170, 16309, -1000, -1000, -1000, -1000,
	20472, 384, 401, 20472, -1000, 1714, 1169, -1, -1000, -1000,
	23334, 250, -1000, 401, 155, 1247, 1005, -1000, 676, 1309,
	23334, 745, 11668, 848, -1000, 15987, 486, 23334, 745, 75,
	-1000, -1000, -1000, 392, 23334, -1000, -1000, 11668, -1000, -1000,
	23334, 18246, -5, -1000, -1000, -1000, -1000, -1000, 32419, 23334,
	289, 23334, 23334, -1000, 249, 1171, 1165, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 432, 563, 563,
	617, 617, 617, 617, 1682, 341, 2973, 2665, 4092, 4092,
	4092, 2322, 276, 276, 4092, 4092, 4092, 32078, 32022, 2519,
	11668, 11668, 583, 915, 247, 2519, 11668, 2519, 2519, 2519,
	2519, -1000, 1082, -1000, -1000, -1000, -1000, 1300, 245, 12697,
	12697, -1000, -1000, -1000, 6851, 13040, -1000, -1000, -1000, -1000,
	244, 11668, -1000, 30602, -200, -12, -1000, -1000, 11668, -89,
	-108, -1000, -1000, 708, -1000, 11668, -1000, -32, 11668, 11668,
	11668, 154, 151, -1000, 582, -1000, 580, 577, 573, -1000,
	243, 912, 241, 240, 11668, -1000, -1000, -1000, 31727, 4451,
	148, 1294, -131, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	147, 144, 31669, -131, 137, 31865, -1000, 12697, 12697, 12697,
	6851, 239, 136, 30955, -131, 31489, 9952, 9952, 9952, 135,
	31431, 11668, -131, 4365, 4152, 3898, -13, -14, -23, 1711,
	-30, 134, 429, 416, 131, -1000, -1000, 32419, -1000, 361,
	585, -1000, 1709, 448, 18246, 23334, -1000, 1160, -1000, -1000,
	777, -1000, 825, -1000, 15346, -1000, -1000, 127, -31, -35,
	32419, -25, 23334, 1741, -25, 23334, 1404, 1464, 377, 23334,
	-1000, 125, 125, -1000, 120, -1000, -1000, -39, 756, -1000,
	11668, 1702, -1000, -1000, -1000, 7881, -1000, -1000, -1000, 23334,
	-159, -52, -1000, -1000, -1000, -1000, -1000, 399, 803, 23334,
	23334, 23334, -1000, -1000, 1030, 24288, 1029, 236, 23334, 23334,
	23970, 23652, 23334, 790, -25, -1000, 235, -25, -1000, 234,
	23334, 810, 23334, 23334, 785, -25, -1000, 1266, -1000, -143,
	1538, -1000, 1266, -1000, -1000, 1315, -1000, 230, 11668, 16309,
	-1000, 356, -1000, -37, -1000, 20472, -1000, 355, -195, -1000,
	391, -1000, 401, 229, 23334, 20472, -1000, 448, 1290, 654,
	-1000, 668, -1000, -1000, 7537, 31784, -1000, 745, 1551, -38,
	-1000, -1000, -1000, 454, 16954, 16309, 9609, -42, 31784, -52,
	1526, 1526, 19836, -1000, 228, 23334, 13702, 226, 769, 11668,
	224, 223, 11668, 2519, 2519, 11668, 12697, 12697, -1000, 2519,
	-1000, -1000, -1000, -1000, -1000, 1289, 222, 11668, 32419, 4397,
	2942, -44, -1000, 9266, -46, -1000, 11668, -1000, 30487, -1000,
	-1000, 324, 1461, -1000, 11668, 31373, 124, 8923, -1000, 31193,
	-36, -36, -1000, 1739, 1070, 1042, 891, 723, 1699, -1000,
	17276, 458, 949, 30307, 32294, 32419, -1000, 11668, -1000, -1000,
	1287, 11668, -1000, 32294, 32419, 12697, 12697, 12697, 12697, 12697,
	12697, 12697, 12697, 12697, 12697, 12697, 12697, 12697, 12697, 12697,
	12697, 12697, 12697, 12697, 1138, 12697, 1680, 1680, 1680, -51,
	8580, -1000, 1281, 1287, 11668, 11668, 32419, 112, 111, 110,
	-1000, 11668, -131, 11668, 11668, 11668, -1000, -1000, -1000, 109,
	-1000, 1698, -1000, -1000, -1000, -1000, -1000, 1697, -1000, 352,
	105, -1000, 21108, -1000, -52, -1000, -1000, -1000, -1000, -1000,
	1239, -1000, -1000, 218, -1000, -1000, 217, 23334, 1128, 377,
	18882, -1000, 449, -1000, -1000, -1000, 954, 30245, -1000, 1550,
	5834, 23334, -1000, -1000, -1000, 567, 566, 1403, -1000, 1022,
	-1000, 471, 877, -1000, 1401, 1050, 1400, 1050, -1000, -58,
	833, -1000, 11668, -1000, 11668, -1000, 565, -1000, -1000, 553,
	103, 1260, 1596, -1000, 16309, 1260, -1000, 23334, 31784, -1000,
	-181, -1000, 1696, -1000, -1000, 1169, -1000, 5171, 20472, 23334,
	-50, -1000, -1000, 18246, 615, -1000, -64, -1000, -1000, 264,
	-25, 745, -1000, -83, -1000, 390, 1503, -1000, 1502, -1000,
	3005, 13702, 216, -59, -1000, 322, 1567, 11668, -1000, -1000,
	212, 23334, -1000, 30191, 13702, 23334, 1624, 2519, 2795, 408,
	11668, 32419, 3601, -65, 11668, 11668, -1000, -70, -1000, 11668,
	349, 31784, -1000, -1000, -1000, 31784, 11668, 1738, 11668, 98,
	97, 96, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	93, -1000, -1000, 29058, 11668, 87, -1000, 85, 82, 31784,
	1281, 31784, -1000, -1000, 445, 445, 715, 715, 715, 715,
	1680, 1183, 2599, 2732, 817, 817, 817, 2480, 1018, 1018,
	817, 817, 817, 1285, 1140, 211, 29791, 11668, -74, -1000,
	-1000, -1000, 31784, 31784, 81, -1000, -1000, -1000, -131, 3544,
	29948, 29897, -1000, 80, 348, -1000, -1000, -106, 208, -1000,
	389, 379, -1000, 1242, 19836, 1630, 13702, 973, 1130, 377,
	18882, -1000, 572, -1000, -1000, -1000, 1550, -1000, 23334, 23334,
	23334, 1394, -1000, -1000, 1159, 1156, 521, 23334, -1000, 23334,
	-1000, 23334, 23334, 23334, -81, -90, 23334, 23334, -1000, 446,
	11668, 11668, 1538, 446, -92, 401, -1000, -1000, -1000, 1681,
	-1000, -97, -1000, -121, 17928, 1472, 23334, 1542, -1000, -1000,
	205, 204, 203, -1000, 23334, -1000, 5834, 23334, 1278, 1013,
	-1000, -1000, 1137, 201, 12697, 23334, -101, 13702, 873, 13702,
	1550, 29, 5834, 1550, 29831, 6507, -114, -1000, -120, -124,
	11668, 11668, 3601, -130, -1000, 2519, 2519, -1000, 29679, -1000,
	31784, -1000, 31193, -1000, -1000, -1000, -1000, 859, -1000, 29651,
	-1000, -1000, -1000, -1000, 12697, 1276, 200, 32419, 29438, -1000,
	-1000, 11668, -1000, -1000, -1000, -1000, 20790, 20790, 18246, 18246,
	882, 76, -25, -134, 23334, -1000, 377, 18882, -1000, 1464,
	-1000, -1000, -1000, -1000, 23334, 1012, -1000, 1011, 11668, -1000,
	32419, 1050, 1050, -1000, 551, 549, 547, 545, -1000, -1000,
	-1000, 23334, 31784, -131, -1000, -1000, 20472, 128, -1000, -1000,
	197, 29, 629, -135, 23334, -1000, -1000, 6164, 18246, 18246,
	1262, -1000, -1000, 23334, 1016, -1000, -1000, 11668, 29791, 196,
	873, -136, 1239, 195, -1000, -1000, -1000, -1000, -1000, -1000,
	1567, -32, -1000, -1000, 783, 2519, 2519, -1000, -1000, 69,
	949, 1583, -1000, 768, 12697, 32419, -141, -1000, 29410, -1000,
	-142, -1000, -1000, 23334, 1239, -1000, 873, 189, 18882, -1000,
	1128, -1000, -1000, -1000, 31784, 1563, -1000, -1000, 23334, 23334,
	188, 187, -125, -1000, 1626, -1000, -1000, 11668, 699, -1000,
	454, -1000, -153, -161, -1000, -1000, 1393, 29382, 1106, 23334,
	1239, 873, -1000, 23334, 1550, 62, 23334, -1000, 766, 11668,
	768, -163, -1000, -1000, -1000, 186, -1000, 1239, 13702, -1000,
	1130, 494, 5834, -1000, -1000, 11668, 11668, 23334, 161, -36,
	16954, -1000, 448, 448, 1385, -1000, 957, 975, 59, -1000,
	1239, -168, -1000, -1000, 121, 56, 12011, 12011, -131, -1000,
	23334, -1000, -170, -1000, -1000, 11668, -1000, -172, -176, -1000,
	-1000, 48, -146, -1000, -1000, 23334, -1000, 972, 970, 728,
	-1000, -1000, -1000, -1000, -1000, -1000, 1106, -1000, -1000, -1000,
	13372, 990, 721, 30840, -1000, -186, 873, 31784, -1000, -1000,
	1738, -1000, -1000, -1000, 1487, -1000, 502, 1134, 1134, 957,
	1660, -1000, -1000, -1000, -1000, -1000, 971, 1239, -1000, 1667,
	-1000, -1000, 1124, -1000, -1000, 11325, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2122, 2117, 1434, 1481, 2108, 2107, 2106, 2103, 2102,
	2096, 2094, 2093, 2092, 2091, 2090, 2089, 2088, 2086, 2084,
	2080, 2079, 2078, 2070, 2067, 2061, 2060, 1473, 2059, 2057,
	2056, 2054, 2052, 2051, 1449, 2046, 1441, 2045, 2042, 2035,
	2033, 2032, 1430, 1426, 2030, 92, 110, 1424, 2027, 2024,
	1421, 2023, 2017, 2016, 2014, 2013, 2012, 2008, 85, 2007,
	2006, 2005, 2004, 2002, 2001, 2000, 145, 161, 1999, 1419,
	1992, 1990, 1989, 1986, 1984, 1982, 1981, 1980, 1979, 1975,
	1972, 1970, 1969, 1966, 1965, 1961, 1960, 1959, 160, 1955,
	1951, 1415, 1403, 1947, 1946, 28, 37, 13, 75, 29,
	149, 2795, 147, 1945, 1942, 1938, 1937, 25, 94, 84,
	1936, 62, 1935, 1934, 45, 21, 16, 18, 1932, 95,
	1930, 1929, 1261, 24, 1923, 1922, 131, 1921, 22, 19,
	443, 155, 151, 116, 112, 1920, 1919, 1918, 1910, 51,
	120, 7, 1906, 1904, 11, 59, 15, 1903, 36, 33,
	1900, 1899, 128, 1898, 76, 106, 1406, 102, 122, 66,
	1892, 83, 12, 79, 1891, 1890, 148, 38, 1889, 34,
	80, 141, 1887, 48, 159, 124, 81, 125, 114, 1885,
	1884, 1882, 99, 1881, 111, 88, 1880, 1879, 58, 1878,
	133, 138, 1877, 1875, 93, 1869, 129, 1865, 1863, 157,
	142, 108, 8, 32, 78, 6, 1402, 1400, 115, 72,
	54, 53, 1860, 2436, 654, 1215, 46, 101, 61, 55,
	103, 56, 73, 140, 35, 1856, 1854, 119, 1852, 1851,
	1849, 1844, 1843, 100, 1842, 1840, 91, 139, 82, 23,
	43, 87, 44, 52, 153, 109, 152, 107, 1833, 89,
	123, 1830, 65, 1828, 1824, 986, 113, 1821, 1817, 1816,
	966, 960, 916, 30, 1814, 1813, 904, 695, 1804, 1803,
	69, 1802, 143, 104, 1799, 134, 144, 50, 1795, 121,
	40, 90, 1793, 27, 31, 0, 1777, 1750, 1787, 117,
	74, 1786, 1785, 1784, 1781, 17, 2, 9, 3, 5,
	4, 71, 41, 1780, 1779, 130, 96, 68, 1776, 156,
	1774, 1773, 1772, 47, 1770, 14, 1769, 20, 1767, 1766,
	10, 1, 1764, 1763, 135, 1762, 98, 1760, 1604, 1759,
	150, 1757, 1755, 1479, 26, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 7, 8, 6, 6, 6, 6,
	9, 9, 10, 16, 13, 18, 12, 12, 15, 15,
	109, 109, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 106, 106, 111,
	111, 111, 113, 113, 110, 110, 105, 105, 20, 56,
	98, 51, 51, 283, 283, 284, 284, 94, 94, 95,
	95, 95, 95, 96, 96, 97, 97, 97, 26, 26,
	26, 22, 22, 23, 24, 27, 27, 27, 27, 27,
	27, 34, 35, 35, 35, 35, 35, 36, 36, 36,
	36, 36, 41, 41, 39, 39, 38, 38, 37, 37,
	40, 40, 158, 158, 157, 157, 160, 160, 42, 42,
	45, 45, 45, 45, 45, 46, 46, 46, 46, 46,
	46, 46, 46, 251, 251, 250, 44, 225, 225, 47,
	183, 183, 48, 48, 48, 48, 49, 57, 324, 324,
	324, 328, 328, 329, 329, 330, 330, 330, 330, 330,
	330, 330, 326, 326, 54, 54, 93, 61, 61, 61,
	61, 61, 61, 63, 65, 62, 62, 62, 64, 64,
	66, 66, 66, 66, 67, 67, 67, 67, 68, 68,
	138, 138, 276, 275, 275, 281, 281, 281, 136, 136,
	136, 136, 136, 137, 137, 137, 274, 274, 274, 274,
	282, 282, 282, 282, 282, 282, 280, 280, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 81, 81, 88, 88,
	88, 88, 88, 88, 70, 75, 75, 75, 71, 76,
	77, 78, 78, 78, 72, 72, 80, 80, 80, 79,
	85, 85, 85, 85, 82, 82, 82, 83, 83, 86,
	86, 86, 73, 74, 87, 84, 84, 84, 43, 325,
	325, 327, 327, 52, 30, 30, 31, 31, 139, 139,
	140, 140, 204, 204, 204, 204, 141, 141, 112, 112,
	112, 203, 293, 293, 294, 294, 294, 294, 294, 294,
	295, 295, 295, 295, 295, 295, 295, 291, 291, 292,
	289, 289, 290, 290, 290, 290, 331, 331, 202, 202,
	144, 144, 298, 298, 298, 298, 296, 296, 296, 296,
	296, 299, 297, 300, 300, 300, 300, 300, 237, 237,
	237, 90, 32, 118, 118, 33, 29, 29, 187, 187,
	148, 148, 242, 242, 242, 129, 129, 107, 107, 107,
	14, 11, 11, 11, 11, 11, 11, 19, 19, 17,
	17, 188, 188, 189, 189, 53, 55, 60, 89, 89,
	89, 21, 21, 25, 25, 59, 333, 333, 125, 125,
	125, 125, 126, 126, 199, 199, 200, 200, 201, 201,
	201, 120, 119, 121, 121, 28, 28, 114, 114, 115,
	115, 116, 116, 117, 117, 334, 334, 50, 50, 92,
	132, 132, 196, 196, 196, 198, 198, 197, 197, 197,
	173, 173, 173, 91, 153, 153, 162, 162, 163, 163,
	248, 164, 164, 58, 58, 101, 101, 99, 99, 99,
	99, 99, 99, 100, 100, 102, 102, 102, 102, 102,
	102, 102, 104, 306, 306, 306, 309, 309, 305, 307,
	307, 308, 308, 332, 332, 174, 174, 174, 143, 142,
	142, 146, 146, 145, 147, 147, 241, 241, 241, 171,
	171, 171, 171, 190, 190, 191, 191, 192, 192, 193,
	193, 193, 194, 194, 195, 195, 170, 170, 221, 221,
	103, 103, 152, 152, 154, 154, 211, 211, 211, 212,
	212, 210, 210, 210, 210, 243, 243, 243, 243, 243,
	243, 243, 322, 322, 322, 323, 323, 240, 240, 244,
	244, 244, 244, 244, 244, 238, 238, 238, 238, 239,
	239, 249, 249, 177, 177, 177, 177, 175, 175, 176,
	176, 245, 245, 245, 245, 172, 172, 246, 246, 246,
	205, 205, 252, 252, 252, 270, 270, 151, 151, 151,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 254, 254, 254,
	254, 256, 256, 256, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 269, 269, 269, 269, 269, 257, 257, 264,
	264, 265, 265, 266, 267, 258, 258, 259, 259, 260,
	261, 268, 268, 268, 268, 272, 272, 262, 262, 262,
	262, 262, 263, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 185, 185, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 215, 215, 215, 215, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 301, 301, 301, 301,
	301, 301, 301, 303, 303, 304, 304, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 310, 310, 311, 311,
	313, 313, 314, 314, 315, 316, 316, 316, 317, 318,
	318, 312, 312, 319, 319, 319, 320, 320, 321, 321,
	321, 321, 321, 227, 227, 227, 228, 228, 229, 235,
	235, 235, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 127, 127,
	127, 127, 127, 159, 159, 224, 224, 222, 222, 222,
	226, 226, 178, 178, 271, 271, 271, 271, 271, 271,
	271, 179, 179, 179, 186, 180, 180, 181, 181, 181,
	181, 181, 181, 218, 219, 182, 182, 182, 220, 220,
	230, 234, 234, 233, 232, 232, 231, 231, 208, 208,
	209, 209, 207, 206, 167, 167, 166, 166, 165, 165,
	335, 335, 236, 236, 168, 168, 169, 161, 161, 247,
	247, 247, 247, 155, 155, 134, 134, 156, 156, 130,
	130, 133, 133, 131, 131, 131, 131, 149, 149, 150,
	150, 128, 128, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 273, 273, 273, 223, 122, 122,
	122, 123, 123, 124, 124, 278, 278, 278, 279, 279,
	279, 279, 277, 277, 277, 277, 277, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 6, 6, 6, 5, 5, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 7, 6,
	1, 12, 12, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 4, 6,
	7, 1, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 6, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 4, 6, 4, 6, 4, 6, 3, 5,
	3, 5, 1, 3, 1, 2, 2, 3, 2, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 5, 3, 0, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 2, 1, 1, 1,
	1, 1, 3, 4, 5, 3, 2, 6, 3, 4,
	3, 3, 3, 3, 1, 3, 3, 1, 2, 2,
	1, 0, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 1, 1,
	1, 1, 1, 2, 3, 4, 4, 4, 4, 2,
	4, 4, 4, 4, 4, 4, 2, 3, 3, 2,
	4, 5, 4, 5, 2, 3, 3, 4, 2, 4,
	3, 3, 4, 4, 2, 5, 5, 6, 2, 2,
	0, 2, 0, 3, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 4, 3, 0, 6, 11, 14, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 3, 2, 1, 1,
	1, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 1, 4,
	4, 4, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 6, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 6,
	4, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 34, -23,
	-24, 67, -28, -29, -30, -31, -32, -33, 90, -308,
	94, -37, -38, -39, -41, -40, 105, 107, 125, 131,
	134, 214, 220, 240, 242, 244, 251, -99, -101, 238,
	239, -62, -63, -64, -65, -93, 262, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -21, -25, -59, 303, -9,
	-10, -13, -12, -11, -16, -18, -15, -17, -19, -14,
	47, 69, -306, 98, -102, -100, 354, 312, 265, 35,
	274, 61, 101, 246, 23, 328, 335, 255, -103, -104,
	320, 284, 357, -324, -156, 284, 83, -131, -122, 347,
	4, -285, -287, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 48, 55, 60, 61, 62, 64, 66, 67,
	68, 71, 72, 73, 81, 82, 84, 86, 90, 92,
	94, 97, 98, 100, 105, 106, 107, 113, 114, 119,
	121, 126, 131, 132, 133, 134, 135, 142, 145, 147,
	140, 157, 158, 159, 161, 162, 163, 166, 165, 170,
	173, 176, 178, 179, 180, 183, 181, 185, 186, 188,
	187, 193, 195, 196, 198, 201, 204, 207, 210, 211,
	212, 213, 214, 216, 218, 220, 222, 223, 224, 225,
	226, 228, 229, 231, 232, 233, 234, 235, 238, 236,
	237, 239, 240, 241, 242, 244, 246, 247, 249, 263,
	264, 275, 251, 252, 253, 254, 258, 256, 259, 260,
	262, 265, 267, 270, 273, 274, 276, 279, 280, 277,
	272, 283, 285, 286, 287, 288, 289, 290, 291, 298,
	299, 303, 304, 305, 306, 309, 310, 311, 312, 314,
	317, 318, 319, 324, 329, 330, 331, 332, 333, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 85, 87, 88, 104, 108, 109, 115, 116,
	117, 127, 129, 136, 137, 146, 148, 149, 150, 151,
	152, 154, 168, 182, 192, 194, 205, 209, 217, 219,
	227, 248, 257, 268, 269, 278, 281, 293, 294, 295,
	300, 301, 316, 320, 321, -130, -122, 83, -122, 220,
	22, 92, 145, 311, 310, 22, 216, 256, 286, 288,
	-122, -46, 354, -45, -4, -27, -36, -47, -42, -43,
	-69, -58, -34, -50, -91, -92, -328, 22, -329, -330,
	69, 98, 125, 255, 145, 92, 310, -277, 4, -285,
	-287, -286, -288, 58, 70, 124, 144, 138, 156, 160,
	169, 171, 184, 206, 208, 245, 266, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 65, 69, 74, 75, 77, 76, 78, 79,
	80, 89, 91, 93, 95, 96, 99, 101, 103, 110,
	111, 112, 120, 122, 123, 125, 128, 130, 139, 141,
	143, 153, 155, 164, 167, 172, 174, 175, 189, 190,
	191, 197, 199, 200, 202, 203, 215, 221, 230, 243,
	255, 261, 271, 282, 284, 292, 296, 297, 302, 307,
	308, 313, 315, 322, 323, 325, 326, 327, 328, 284,
	158, -122, -324, 158, -328, -126, 251, -122, -126, -88,
	259, 4, 22, 83, 183, 261, 293, 173, 55, 248,
	259, -67, 299, -66, 293, -276, -68, -157, 183, -122,
	-332, 284, 158, 224, 284, 313, 323, -187, 83, 308,
	-100, -102, -101, 323, 284, 141, 83, 313, -145, -146,
	307, 153, 103, 203, -99, -101, -306, -281, -274, -237,
	9, 302, 110, 199, -280, 8, 346, -273, -279, 5,
	7, 345, 4, -285, -287, -286, -88, 259, 34, 55,
	22, 60, 84, 126, 141, 142, 162, 65, 66, 223,
	173, 159, 298, 163, 260, 285, 299, 69, 314, 289,
	106, -333, 299, 299, -333, -333, -125, 299, 296, 284,
	141, 83, 323, -309, 228, -305, -122, -309, -142, -143,
	22, 95, 358, -169, 354, -243, 352, -245, -130, -101,
	-244, 354, 200, -3, 296, 358, -156, -149, -122, -207,
	-206, 356, 123, 354, -166, -167, -206, -207, -122, 22,
	123, 155, 155, -246, -245, -130, -183, 354, -251, -250,
	-279, 320, 199, 358, -157, -213, -215, 345, 346, 340,
	189, 334, -227, -217, -230, 104, 248, 354, -130, -216,
	359, 9, -303, -101, 29, -228, -229, 49, -122, 7,
	8, 5, 6, -128, -254, -223, -263, 302, 110, 191,
	-301, -302, 4, -285, -278, -255, -265, -259, -262, 154,
	58, 75, 76, 79, 77, 80, 261, 313, 50, 28,
	108, 109, 209, 217, 281, 300, 301, 136, 192, 137,
	56, 127, 168, 97, 37, 39, 41, 42, 51, 52,
	85, 87, 88, 115, 116, 117, 146, 148, 149, 150,
	151, 152, 194, 227, 268, 278, 294, 295, 321, -286,
	-266, -267, -260, -261, -268, -225, 354, 123, -213, 199,
	-122, -88, 333, 2, 263, 354, -67, 53, 299, -200,
	-201, -119, -120, -121, 157, 222, 226, 333, 296, 339,
	123, -281, -138, 89, -160, 356, -172, -245, -213, -213,
	-157, 136, -122, -157, 141, -122, 136, -145, -146, -158,
	136, -157, -158, 136, -134, 136, -133, -130, -122, 136,
	-149, 136, -171, -190, -191, 172, 112, 197, -174, 22,
	95, -174, -174, 44, 355, 355, 8, 7, 7, -88,
	-283, -280, 9, 263, 223, 260, 55, 123, -325, 199,
	123, 123, 123, 123, 123, 223, 260, 120, 298, 123,
	157, 222, 275, 284, 323, 123, 123, -199, -200, -199,
	296, -126, -245, 136, -130, -133, 136, -122, -245, 136,
	358, -309, -150, 354, -161, -247, -213, 347, -161, -169,
	-168, -236, -213, 89, 70, -177, 160, 184, 124, 169,
	245, 144, 7, -46, -210, 359, 354, 347, -240, 335,
	-101, -244, -243, -130, 354, -283, -131, 358, -277, 347,
	276, 355, -155, -130, -167, -246, -132, -130, -132, 262,
	-122, 30, -159, -213, 355, 358, -324, -330, 69, 354,
	10, 11, 57, 33, 345, 346, 347, 348, 118, 349,
	350, 343, 344, 342, 337, 338, 339, 63, 177, 250,
	13, 14, 15, 26, 202, 171, 334, 138, 266, 340,
	16, 17, 18, 156, 36, 139, -127, -135, -213, -213,
	-213, -213, -213, 208, -165, -208, 352, -101, 354, -101,
	-213, -159, 7, -101, -222, 352, -231, -213, -166, 354,
	5, 354, 5, -310, 329, 120, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 219, -272, 324, -272, -272, -256,
	354, -256, -257, 354, -256, 330, 335, 354, 30, -224,
	-252, -253, -255, -264, -258, -262, -263, 40, 46, 45,
	291, 182, 257, 269, 316, 38, 198, 147, 146, 148,
	149, 150, 151, 152, 268, 37, 227, 116, 117, 115,
	97, 88, 87, 194, 42, 41, -266, -267, -260, -261,
	85, 294, 295, 154, 39, 52, 51, 321, 278, -284,
	-283, -324, -66, -276, -159, 30, -200, 358, 170, -137,
	176, 188, 132, 200, 331, -282, 5, 4, -223, -237,
	89, 173, -263, -275, 89, -281, -275, 89, 73, 356,
	-277, -111, 358, 48, 241, 354, -144, 189, -118, -307,
	328, -144, 354, -123, 136, -122, -307, 189, -171, -111,
	358, 104, -111, 104, -111, 358, 104, 359, 104, 104,
	-191, -190, -192, -213, 22, -195, 114, 185, -213, -215,
	-100, -100, -100, -147, -241, -213, 221, 141, -157, 22,
	264, -276, -327, 120, -324, -276, -276, -276, -276, -276,
	259, -46, 120, -122, 170, -276, -276, 284, 141, 284,
	-126, -109, 236, -108, 21, 23, 98, 318, 104, 272,
	290, 252, 272, 290, 252, 236, 104, 236, 236, 104,
	-305, 30, -149, -152, 358, 123, 30, 4, -152, 358,
	355, 160, 160, -243, -177, 160, -175, 206, -175, -175,
	-322, 354, 353, -240, -277, 352, 360, -159, -239, -238,
	30, -122, 204, 355, -130, -249, 336, -122, 123, 355,
	358, -205, 326, -196, -58, 354, 89, 30, -196, -162,
	-163, -248, -164, -130, 354, -122, 355, 358, -46, -250,
	296, 315, -140, -204, -203, -291, -292, -289, -122, 141,
	308, 111, 65, -290, 54, 221, 122, -270, -252, -269,
	232, 233, 231, 235, 234, -252, -277, 293, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	171, 138, 266, 36, 139, -213, 296, -213, -213, -213,
	-213, 181, 189, 191, 302, 110, 309, 95, 195, -335,
	282, 32, -220, -101, 354, -235, 27, 271, 22, -227,
	248, 354, -208, -213, -209, -159, 355, 355, 358, -159,
	-226, 353, -222, -234, -233, 325, 355, -159, 322, 22,
	95, 347, 7, -184, 332, 180, 86, 133, 179, -185,
	254, -311, 113, 128, 354, 355, 355, 355, -213, -213,
	-178, -271, -159, 4, 332, 180, 86, 133, 179, 254,
	-178, -179, -213, -159, -180, -214, -215, 345, 346, 340,
	354, 248, -181, -213, -159, -213, 43, 167, 297, -182,
	-213, 123, -159, -213, -213, -213, -159, -159, -159, 354,
	7, 7, 293, 293, 7, -45, 355, 358, -151, 29,
	352, -184, 354, -249, 358, 123, 355, 299, -201, -136,
	226, 270, 237, 258, 358, -277, -245, -139, -149, -140,
	-122, 30, 104, 213, 30, 199, 189, -114, 287, 104,
	-157, -158, -158, -133, -134, -277, -122, -149, -193, -273,
	354, 346, -194, 248, 249, 358, -107, 31, 93, 161,
	-130, -326, -122, 259, -46, -130, -133, -130, 358, 296,
	-188, 65, 59, -203, 136, 59, -289, 308, -188, 65,
	-188, 65, 65, -245, 33, -58, 123, 33, -58, 123,
	296, -133, 296, 296, -245, 354, 355, -205, -247, -154,
	-243, -277, -205, -236, -243, -243, -176, 315, 199, 160,
	-243, -238, 355, -323, 7, -240, -239, 7, -212, -211,
	121, 187, 355, -122, 354, -240, 355, -94, 135, 195,
	276, 123, -130, -173, 243, -213, -173, -198, 199, -155,
	320, -122, -173, -153, 358, 123, 339, -155, -213, -326,
	-283, 355, 358, -252, -123, 141, 354, -123, -122, 354,
	161, 161, 333, -213, -213, 296, -335, 282, -220, -213,
	181, 191, 302, 110, 309, 95, 195, 123, 354, -214,
	-214, -159, -217, 354, -159, 353, 362, 355, -213, 353,
	353, 358, -232, -233, 99, -213, -146, 358, -145, -213,
	-159, -159, 355, 355, 296, 296, 296, 296, 354, -316,
	207, 354, 354, -213, 30, 358, 355, 123, 355, 355,
	-186, 215, 355, 10, 11, 345, 346, 347, 348, 118,
	349, 350, 343, 344, 342, 337, 338, 339, 63, 177,
	250, 13, 14, 15, 156, 139, -214, -214, -214, -159,
	354, 355, -218, -219, 123, 120, 30, -182, -182, -182,
	355, 123, -159, 358, 358, 358, 355, 355, 355, 7,
	355, 358, 355, 333, 333, 355, -252, 352, 353, 7,
	7, -97, 328, -283, -326, -119, 306, 62, 226, -281,
	355, 355, -58, -157, 5, -58, -130, 104, -115, 100,
	-334, 339, -122, -111, -111, -111, -194, -213, -241, -130,
	359, 358, -249, -108, -130, -122, -122, 189, -203, 136,
	-113, 189, -122, -122, 136, -122, 136, -122, -122, -109,
	236, -58, 354, -58, 354, -122, 236, -122, -130, 236,
	-45, -170, 128, -249, 358, -170, -176, 354, -213, -243,
	353, 355, 358, -239, 353, 358, 361, 339, -240, 354,
	-149, -238, -97, 123, 283, 276, -161, 190, -173, 64,
	355, -205, -163, -154, -236, 355, -98, 71, -98, -204,
	-293, 354, -123, -148, -242, -122, -304, 354, -301, -302,
	-128, 354, -290, -213, 354, 354, -213, -213, -214, -214,
	123, 354, -213, -224, 26, 26, 355, -159, 355, 358,
	-209, -213, 355, -222, 101, -213, 292, 355, 322, -146,
	-146, -146, 5, 180, 133, 179, -185, 179, -185, -185,
	7, -317, -122, 354, 326, -145, 355, -270, -252, -213,
	-218, -213, -270, -252, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, 95, 189, 195, -214, 358, -159, 355,
	-219, -218, -213, -213, -252, 355, 355, 355, -159, -213,
	-213, -213, 355, 7, 7, 353, 355, -96, 201, -95,
	-122, 5, -141, 140, 354, -144, 354, -122, -116, 166,
	-334, -280, -307, 200, 355, -107, -277, -122, 296, 296,
	104, 189, 317, -106, 98, 262, -189, 104, -111, 104,
	-111, 296, -188, 65, -159, -159, 296, 296, 355, -221,
	130, 44, -243, -221, -149, -210, 7, -211, -277, 352,
	-239, -149, 355, -284, 293, -197, 354, 199, -58, -173,
	339, 82, 82, -294, 65, -295, 57, 111, 69, 189,
	191, 308, 221, 54, 89, 230, -148, 354, 355, 358,
	-129, -166, 57, -129, -213, 354, -149, 355, -148, -149,
	26, 26, -213, -224, 355, -213, -213, 355, -213, 353,
	-213, 5, -213, 355, 355, 355, 355, -318, -122, -213,
	355, 355, 355, -219, 123, 95, 195, 354, -213, 355,
	355, 358, 355, 355, 355, 353, 358, 354, 339, 339,
	139, -139, 30, -148, 199, -117, 165, -334, -280, -114,
	-107, -122, -122, -203, 104, 189, 89, 189, 89, 82,
	304, -122, -122, -130, -122, -122, 355, 355, -122, -130,
	-313, 327, -213, -159, -313, 355, -240, 7, 355, -216,
	-128, -122, 96, -149, 65, -169, -101, 354, 354, 354,
	-122, -277, -122, 111, 136, 191, 161, 354, -214, -130,
	355, -148, -202, -331, 68, 280, -242, -107, -277, -107,
	355, -159, 355, 355, 355, -213, -213, 355, 355, -146,
	-312, 212, 355, -214, 123, 354, -224, 355, -213, -95,
	-96, -283, -283, 210, 355, -58, 355, -130, -334, -280,
	-115, -203, 191, 191, -213, -252, -111, -111, 296, 296,
	296, 296, -314, -315, -122, -239, 353, 354, 310, 190,
	355, -122, -284, -284, -295, -123, 189, -213, -124, 354,
	-202, 355, -141, 354, -129, -146, 230, 355, -146, 44,
	-214, -224, 355, 355, 355, -130, -141, -202, 354, -280,
	-116, -110, 57, -122, -122, 354, 354, 358, 30, -159,
	262, -205, 355, 355, 104, 355, -298, 178, -122, -141,
	-202, -149, -107, 355, -130, -319, 225, 249, -159, 355,
	354, -141, -148, -117, -105, 315, -277, -159, -159, -315,
	-317, -146, -162, -97, -97, 111, -296, -299, -297, 199,
	124, 211, 267, 355, -141, 355, -144, 355, -320, -321,
	36, 305, 73, -213, -320, -149, 355, -213, 355, 355,
	355, -205, -122, -297, 199, -299, 199, 310, 92, -298,
	-321, 218, 119, 248, 218, 119, 355, -202, -300, 186,
	241, 48, 262, -300, -296, 26, -112, 48, 241, -141,
	20, 191, 89, -321,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 35, 36, 37, 38, 0, 111,
	112, 0, 115, 116, 117, 118, 119, 120, 0, 0,
	0, 127, 128, 129, 130, 131, 0, 512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 483, -2, 0,
	0, 197, 198, 199, 200, 201, 0, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 418, 419, 420, 514, 39,
	40, 41, 42, 43, 46, 47, 48, 49, 44, 45,
	0, 389, 511, 0, -2, 522, 0, 0, 0, 427,
	0, 427, 427, 431, 0, 0, 0, 520, 497, 498,
	0, 0, -2, 0, 178, 0, 1060, 987, 993, 994,
	1018, 1019, 1020, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 0, 989, 1060, 172, 1120,
	174, 0, 0, 0, 0, 122, 123, 124, 125, 126,
	171, 148, 0, 155, 156, 157, 158, 159, 160, 161,
	162, 150, 151, 152, 153, 154, 0, 181, 182, 183,
	185, 186, 187, 188, 189, 190, 191, 308, 1032, 1033,
	1034, 1035, 1036, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 0,
	0, 168, 0, 0, 0, 417, 1147, 433, 415, 194,
	0, 268, 269, 270, 271, 272, 0, -2, 1047, 1236,
	1153, 206, 1175, 214, 1242, 0, 217, 222, -2, 144,
	0, 513, 0, 0, 0, 0, 0, 0, 0, 388,
	-2, 493, 494, 0, 0, 0, 0, 0, -2, 0,
	517, 517, 517, 0, 0, 494, 0, 196, 225, 226,
	227, 236, 237, 238, 239, 378, 0, 380, 246, 247,
	1014, 0, 1028, 1029, 1030, 1031, 266, 0, 0, 0,
	269, 0, 279, 310, 0, 0, 0, 0, 0, 286,
	0, 289, 0, 0, 294, 298, 0, 0, 304, 0,
	0, 435, 426, 435, 423, 424, 425, 428, 0, 0,
	0, 0, 0, 503, 1126, 506, 1000, 504, 0, 0,
	519, 518, 0, 550, 0, 502, 512, 564, 601, 578,
	569, 0, 0, 2, 0, 0, 179, 180, 997, 995,
	996, 0, 0, 0, 990, 966, 964, 965, 173, 175,
	0, 0, 0, 0, 607, 601, 169, 0, 0, 163,
	165, 1248, 0, 0, 0, 313, 709, 0, 0, 0,
	0, 0, 0, 801, 803, 1210, 1236, 0, 805, 806,
	0, 808, 810, 811, 0, 814, 815, 957, 989, 1003,
	1004, 1005, 1006, 0, 0, 1009, 0, 1011, 1012, 1013,
	857, 824, -2, -2, 1001, 637, 638, 639, 640, -2,
	1250, 828, 830, 832, 834, 835, 836, 837, 0, 1194,
	1211, 1212, 1232, 1233, 1241, 1245, 1246, 1218, 1229, 1219,
	1206, 1216, 1227, 1066, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1027,
	671, 672, 677, 678, 680, 0, 0, 0, 416, 0,
	432, 195, 273, 202, 0, 0, 205, 1205, 1175, 208,
	436, 438, 439, 440, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 145, 0, 81, 605, 113, 114,
	361, 1218, -2, 361, 1022, 510, 1218, -2, 0, 81,
	1218, 142, 81, 1218, 81, 1218, 985, 992, 138, 1218,
	140, 1218, 489, 531, 532, 0, 0, 0, 0, 515,
	516, 0, 0, 0, 485, 486, 379, 1016, 1015, 267,
	274, 93, 94, 0, 287, 295, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 288, 296, 512, 0, 0,
	0, 300, 301, 0, 0, 0, 0, 421, 434, 422,
	0, 430, 0, 1218, 601, 0, 1218, 0, 0, 1218,
	0, 505, 0, 0, 553, 977, 981, 982, 553, 551,
	0, 974, 972, 973, 0, 0, 0, 0, 598, 598,
	598, 596, 572, 0, 578, 0, 0, 602, 590, 0,
	-2, 569, 0, 603, 0, 592, 988, 0, 962, 963,
	108, 0, 0, 983, 967, 611, 0, 460, 0, 0,
	608, 0, 0, 913, 512, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 892, 893, 894, 895, 896, 897,
	900, 901, 898, 899, 902, 903, 904, 0, 0, 0,
	905, 906, 907, 0, 0, 909, 0, 911, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 908, 714, 715,
	716, 738, 739, 0, 802, 968, 961, 804, 0, -2,
	913, 0, 807, 812, 813, 0, 0, 956, -2, 0,
	1008, 0, 706, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 656, 674, 685, 682, 681, 658,
	0, 657, 655, 0, 659, 0, 0, 0, 512, 0,
	915, 619, 620, 621, 622, 623, 706, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 668,
	0, 643, 643, 643, 660, 661, 669, 670, 675, 676,
	687, 688, 690, 692, 686, 686, 686, 683, 684, 592,
	95, 0, 203, 0, 0, 0, 209, 0, 0, 441,
	233, 234, 235, 443, 444, 215, 240, 241, 242, 243,
	244, 245, 0, 210, 212, 223, 211, 213, 216, 0,
	146, 381, 0, 79, 80, 319, 0, 0, 382, 0,
	509, 0, 0, 0, 1218, 1021, 448, 0, 492, 132,
	0, 0, 134, 0, 136, 0, 0, 0, 0, 0,
	529, 530, 533, 537, 538, 541, 544, 545, 535, 709,
	499, 500, 501, 523, 524, 399, 0, 0, 275, 276,
	277, 278, 280, 0, 309, 281, 282, 283, 284, 285,
	290, 292, 512, 297, 299, 302, 303, 0, 0, 0,
	429, 50, 412, 60, 0, 412, 412, 0, 0, 0,
	0, 56, 0, 0, 58, 0, 0, 0, 0, 0,
	507, 0, 0, 611, 0, 0, 0, 980, 611, 0,
	976, 0, 0, 0, 0, 0, 593, 597, 594, 595,
	0, 0, 578, 590, 561, 0, 0, 0, 568, 589,
	0, 588, 577, -2, 0, 98, 0, 998, 0, 0,
	0, 472, 0, 472, 462, 0, 0, 0, 472, 475,
	476, 478, 479, 0, 0, 609, 170, 0, 149, 164,
	0, 0, 0, 320, 322, 323, 324, 325, 0, 1022,
	0, 1022, 0, 351, 0, 0, 0, 710, 615, 616,
	662, 663, 664, 665, 666, 711, 712, 0, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, -2, -2,
	-2, 730, 731, 732, -2, -2, -2, 736, 737, -2,
	910, 912, 0, 971, 0, -2, 0, -2, -2, -2,
	-2, 750, 0, 752, 755, 757, 759, 0, 0, 0,
	0, 970, 769, 948, 0, 0, 889, 890, 891, 754,
	0, 0, 969, 960, 0, 0, -2, 809, 0, 0,
	0, 919, 920, 955, 951, 0, 816, 522, 0, 0,
	0, 0, 0, 1017, 693, 694, 695, 696, 697, 698,
	707, 867, 0, 0, 0, 829, 831, 833, 0, 0,
	0, 0, 923, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 913, 933, 0, 0, 772, 0, 0, 0,
	0, 1236, 0, 913, 941, 0, 0, 0, 0, 0,
	913, 0, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 0, 612, 614,
	0, 624, 0, 107, 0, 0, 204, 0, 437, 442,
	0, 230, 0, 232, 0, 147, 606, 0, 0, 318,
	997, 0, 0, 0, 0, 0, 0, 450, 456, 0,
	143, 81, 81, 986, 81, 991, 139, 141, 0, 539,
	0, 0, 536, 542, 543, 0, 526, 397, 398, 0,
	0, 311, 192, 291, 293, 305, 306, 592, 0, 0,
	0, 0, 411, 62, 1218, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 55, 0,
	0, 0, 0, 0, 0, 512, 999, 547, 978, 592,
	554, 979, 547, 975, 580, 0, 582, 0, 0, 0,
	584, 0, 573, 0, 575, 590, 566, 0, 0, 559,
	0, 558, 578, 586, 0, 0, 604, 107, 0, 0,
	109, 0, 984, 121, 0, 610, 457, 472, 0, 0,
	464, 461, 459, 611, 0, 0, 0, 0, 914, 176,
	0, 0, 0, 333, 0, 1022, 0, 0, 0, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 770, -2,
	751, 753, 756, 758, 760, 0, 0, 0, 0, 0,
	0, 0, 771, 0, 0, 958, 961, -2, 914, 917,
	918, 0, 0, 952, 0, 0, 0, 0, 521, 522,
	522, 522, 822, 0, 0, 0, 0, 0, 0, 823,
	0, 0, 0, 0, 0, 0, 840, 0, 841, 842,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 775, 776, 777, 0,
	0, 844, 939, 940, 0, 0, 0, 0, 0, 0,
	849, 0, 946, 0, 0, 0, 853, 854, 855, 0,
	641, 0, 667, 689, 691, 679, 916, 0, 617, 0,
	0, 89, 0, 96, 177, 207, 228, 229, 231, 224,
	327, 360, 316, 361, 383, 385, 0, 0, 452, 456,
	0, 455, 510, 133, 135, 137, 0, 0, 525, 399,
	0, 0, 307, 61, 401, 0, 0, 0, 64, 1218,
	72, 0, 414, 73, 1218, 81, 1218, 81, 74, 51,
	412, 52, 0, 53, 0, 409, 0, 400, 407, 0,
	0, 549, 0, 552, 0, 549, 581, 0, 600, 583,
	564, 574, 0, 571, 562, 0, 563, 0, 590, 0,
	0, 570, 88, 0, 0, 110, 470, 471, 458, 469,
	0, 472, 477, 474, 480, 0, 0, 90, 0, 321,
	331, 0, 0, 0, 390, 396, 396, 0, 825, 826,
	0, 0, 350, 0, 0, 0, 713, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 949, 0, 884, 0,
	0, 960, -2, 921, 950, 954, 0, 817, 0, 0,
	0, 0, 1010, 699, 700, 701, 702, 703, 704, 705,
	0, 865, 866, 870, 0, 0, 827, 0, 0, 922,
	932, 934, 773, 774, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, -2, -2, -2, 791, 792, 793,
	-2, -2, -2, 0, 0, 0, 935, 0, 0, 887,
	937, 938, 943, 944, 0, 846, 847, 848, 945, 0,
	0, 0, 673, 0, 0, 618, 625, 105, 1110, 103,
	100, 102, 314, 0, 319, 0, 0, 0, 454, 456,
	0, 447, 448, 534, 540, 527, 399, 193, 0, 0,
	0, 0, 82, 66, 0, 0, 0, 0, 70, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 508, 861,
	0, 0, 555, 861, 0, 578, 576, 560, 556, 0,
	567, 0, 587, 97, 0, 0, 0, 0, 463, 473,
	0, 0, 0, 332, 0, 335, 0, 0, 0, 0,
	341, 342, 0, 0, 0, 0, 0, 0, 359, 0,
	399, 1002, 0, 399, 0, 0, 0, 352, 0, 0,
	0, 0, -2, 0, 763, -2, -2, 883, 914, 959,
	953, 1007, 522, 818, 820, 821, 708, 872, 869, 0,
	856, 838, 839, 931, 0, 0, 0, 0, 914, 886,
	845, 0, 851, 852, 642, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 445, 456, 0, 449, 450,
	528, 403, 405, 63, 0, 0, 78, 0, 0, 413,
	0, 81, 81, 402, 0, 0, 0, 0, 410, 408,
	495, 0, 548, 546, 496, 599, 590, 0, 585, 591,
	0, 0, 0, 0, 0, 481, 482, 0, 0, 0,
	0, 336, 337, 1022, 0, 340, 343, 0, 345, 1024,
	359, 0, 327, 0, 356, 357, 391, 392, 395, 393,
	396, 522, 349, 354, 0, -2, -2, 764, 885, 0,
	522, 0, 858, -2, 0, 0, 0, 888, 0, 104,
	0, 99, 101, 0, 327, 317, 359, 0, 0, 451,
	452, 65, 67, 68, 77, 85, 69, 75, 0, 0,
	0, 0, 860, 862, 0, 565, 557, 0, 0, 466,
	611, 468, 0, 0, 334, 338, 0, 0, 365, 0,
	327, 359, 353, 0, 399, 0, 0, 819, 875, 0,
	-2, 0, 799, 850, 106, 0, 315, 327, 0, 453,
	454, 87, 0, 404, 406, 0, 0, 0, 0, 522,
	0, 467, 107, 107, 0, 344, 370, 0, 0, 347,
	327, 0, 394, 817, 361, 0, 0, 0, 871, 800,
	0, 386, 0, 446, 71, 0, 84, 0, 0, 863,
	864, 0, 611, 91, 92, 0, 346, 366, 367, 0,
	362, 363, 364, 1023, 348, 358, 365, 868, 873, 876,
	-2, 1178, 1057, 0, 874, 0, 359, 86, 57, 59,
	0, 465, 339, 368, 0, 369, 0, 0, 0, 370,
	0, 878, 879, 880, 881, 882, 330, 327, 371, 0,
	374, 375, 0, 372, 355, 0, 326, 328, 329, 387,
	373, 376, 377, 877,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 358, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 362, 357,
	337, 339, 338, 3, 359, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 360, 342, 361, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 34:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1040
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1063
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = nil
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = DropCascade
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = DropRestrict
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = DropDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1136
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter using")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1140
		{
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.str = "CSV"
		}
	case 91:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1162
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1166
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1237
		{
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1294
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1420
		{ /* SKIP DOC */
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1618
		{ /* SKIP DOC */
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{ /* SKIP DOC */
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			return unimplemented(sqllex, "set local")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			return unimplemented(sqllex, "set from current")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1707
		{
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = Low
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = Normal
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = High
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.str = "client_encoding"
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2015
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2019
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2023
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2057
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = DropDefault
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2142
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			return unimplemented(sqllex, "match full")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			return unimplemented(sqllex, "match partial")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			return unimplemented(sqllex, "match simple")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2356
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2360
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			return unimplemented(sqllex, "no action")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2372
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2374
		{
			return unimplemented(sqllex, "action set null")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			return unimplemented(sqllex, "action set default")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = true
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = false
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2483
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2486
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2487
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = Ascending
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = Descending
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2527
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2529
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = true
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = false
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2563
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.str = ""
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.str = ""
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = ReadOnly
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = ReadWrite
		}
	case 445:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.str = ""
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.str = ""
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.str = ""
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2777
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2843
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2847
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 473:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2878
		{
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3109
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3114
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3117
		{
			return unimplemented(sqllex, "cte")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3121
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3125
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3129
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = true
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = false
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = false
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = true
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3153
		{
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3200
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3220
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3272
		{
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3276
		{
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3277
		{
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &From{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3367
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3429
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = nil
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3494
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3500
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = true
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = false
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.str = astFullJoin
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.str = astLeftJoin
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.str = astRightJoin
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.str = astInnerJoin
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3612
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3711
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3737
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3809
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = nil
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3970
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4002
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = year
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = month
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = day
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = hour
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = minute
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = month
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = hour
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = minute
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = minute
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = nil
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = second
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4137
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4172
		{
			return unimplemented(sqllex, "at tz")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4340
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4406
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4579
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4632
		{
			return unimplemented(sqllex, "variadic")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4633
		{
			return unimplemented(sqllex, "variadic")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4656
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			return unimplemented(sqllex, "func_application")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4677
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			return unimplemented(sqllex, "current role")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			return unimplemented(sqllex, "current user")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			return unimplemented(sqllex, "session user")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			return unimplemented(sqllex, "user")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4734
		{
			return unimplemented(sqllex, "treat")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4778
		{
			return unimplemented(sqllex, "within group")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4779
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = Window(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.str = ""
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4876
		{
			return unimplemented(sqllex, "frame range")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4877
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4878
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4882
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4888
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4889
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4890
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4891
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = Any
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = Some
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = All
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = Plus
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = Minus
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = Mult
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = Div
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = FloorDiv
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = Mod
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = Bitand
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = Bitor
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = Pow
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = Bitxor
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = LT
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = GT
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = EQ
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = LE
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = GE
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = NE
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = Like
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = NotLike
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = ILike
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = NotILike
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5256
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5257
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5375
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5419
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5455
		{
			return unimplemented(sqllex, "func const")
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5464
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = DNull
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5491
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.str = ""
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
