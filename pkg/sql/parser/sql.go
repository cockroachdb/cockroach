// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const HELPTOKEN = 57362
const ACTION = 57363
const ADD = 57364
const ALL = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISTINCT = 57434
const DO = 57435
const DOUBLE = 57436
const DROP = 57437
const ELSE = 57438
const ENCODING = 57439
const END = 57440
const ESCAPE = 57441
const EXCEPT = 57442
const EXISTS = 57443
const EXECUTE = 57444
const EXPERIMENTAL_FINGERPRINTS = 57445
const EXPLAIN = 57446
const EXTRACT = 57447
const EXTRACT_DURATION = 57448
const FALSE = 57449
const FAMILY = 57450
const FETCH = 57451
const FILTER = 57452
const FIRST = 57453
const FLOAT = 57454
const FLOORDIV = 57455
const FOLLOWING = 57456
const FOR = 57457
const FORCE_INDEX = 57458
const FOREIGN = 57459
const FROM = 57460
const FULL = 57461
const GRANT = 57462
const GRANTS = 57463
const GREATEST = 57464
const GROUP = 57465
const GROUPING = 57466
const HAVING = 57467
const HELP = 57468
const HIGH = 57469
const HOUR = 57470
const INCREMENTAL = 57471
const IF = 57472
const IFNULL = 57473
const ILIKE = 57474
const IN = 57475
const INTERLEAVE = 57476
const INDEX = 57477
const INDEXES = 57478
const INITIALLY = 57479
const INNER = 57480
const INSERT = 57481
const INT = 57482
const INT2VECTOR = 57483
const INT8 = 57484
const INT64 = 57485
const INTEGER = 57486
const INTERSECT = 57487
const INTERVAL = 57488
const INTO = 57489
const IS = 57490
const ISOLATION = 57491
const JOIN = 57492
const KEY = 57493
const KEYS = 57494
const LATERAL = 57495
const LC_CTYPE = 57496
const LC_COLLATE = 57497
const LEADING = 57498
const LEAST = 57499
const LEFT = 57500
const LEVEL = 57501
const LIKE = 57502
const LIMIT = 57503
const LOCAL = 57504
const LOCALTIME = 57505
const LOCALTIMESTAMP = 57506
const LOW = 57507
const LSHIFT = 57508
const MATCH = 57509
const MINUTE = 57510
const MONTH = 57511
const NAN = 57512
const NAME = 57513
const NAMES = 57514
const NATURAL = 57515
const NEXT = 57516
const NO = 57517
const NO_INDEX_JOIN = 57518
const NORMAL = 57519
const NOT = 57520
const NOTHING = 57521
const NULL = 57522
const NULLIF = 57523
const NULLS = 57524
const NUMERIC = 57525
const OF = 57526
const OFF = 57527
const OFFSET = 57528
const OID = 57529
const ON = 57530
const ONLY = 57531
const OPTIONS = 57532
const OR = 57533
const ORDER = 57534
const ORDINALITY = 57535
const OUT = 57536
const OUTER = 57537
const OVER = 57538
const OVERLAPS = 57539
const OVERLAY = 57540
const PARENT = 57541
const PARTIAL = 57542
const PARTITION = 57543
const PASSWORD = 57544
const PLACING = 57545
const POSITION = 57546
const PRECEDING = 57547
const PRECISION = 57548
const PREPARE = 57549
const PRIMARY = 57550
const PRIORITY = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSION_USER = 57585
const SET = 57586
const SETTING = 57587
const SETTINGS = 57588
const SHOW = 57589
const SIMILAR = 57590
const SIMPLE = 57591
const SMALLINT = 57592
const SMALLSERIAL = 57593
const SNAPSHOT = 57594
const SOME = 57595
const SPLIT = 57596
const SQL = 57597
const START = 57598
const STATUS = 57599
const STDIN = 57600
const STRICT = 57601
const STRING = 57602
const STORING = 57603
const SUBSTRING = 57604
const SYMMETRIC = 57605
const SYSTEM = 57606
const TABLE = 57607
const TABLES = 57608
const TEMPLATE = 57609
const TESTING_RANGES = 57610
const TESTING_RELOCATE = 57611
const TEXT = 57612
const THEN = 57613
const TIME = 57614
const TIMESTAMP = 57615
const TIMESTAMPTZ = 57616
const TO = 57617
const TRAILING = 57618
const TRANSACTION = 57619
const TREAT = 57620
const TRIM = 57621
const TRUE = 57622
const TRUNCATE = 57623
const TYPE = 57624
const UNBOUNDED = 57625
const UNCOMMITTED = 57626
const UNION = 57627
const UNIQUE = 57628
const UNKNOWN = 57629
const UPDATE = 57630
const UPSERT = 57631
const USER = 57632
const USERS = 57633
const USING = 57634
const UUID = 57635
const VALID = 57636
const VALIDATE = 57637
const VALUE = 57638
const VALUES = 57639
const VARCHAR = 57640
const VARIADIC = 57641
const VIEW = 57642
const VARYING = 57643
const WHEN = 57644
const WHERE = 57645
const WINDOW = 57646
const WITH = 57647
const WITHIN = 57648
const WITHOUT = 57649
const YEAR = 57650
const ZONE = 57651
const NOT_LA = 57652
const WITH_LA = 57653
const AS_LA = 57654
const POSTFIXOP = 57655
const UMINUS = 57656

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"HELPTOKEN",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5792

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 45,
	333, 45,
	-2, 590,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 37,
	135, 453,
	-2, 0,
	-1, 50,
	90, 590,
	139, 590,
	288, 590,
	289, 590,
	-2, 0,
	-1, 59,
	100, 566,
	109, 566,
	145, 566,
	161, 566,
	186, 566,
	192, 566,
	285, 566,
	-2, 556,
	-1, 84,
	4, 592,
	21, 592,
	22, 592,
	24, 592,
	29, 592,
	34, 592,
	35, 592,
	36, 592,
	37, 592,
	38, 592,
	39, 592,
	40, 592,
	41, 592,
	42, 592,
	43, 592,
	45, 592,
	46, 592,
	47, 592,
	48, 592,
	51, 592,
	52, 592,
	53, 592,
	55, 592,
	56, 592,
	60, 592,
	61, 592,
	62, 592,
	64, 592,
	66, 592,
	67, 592,
	68, 592,
	71, 592,
	72, 592,
	79, 592,
	80, 592,
	81, 592,
	82, 592,
	83, 592,
	84, 592,
	85, 592,
	86, 592,
	88, 592,
	90, 592,
	94, 592,
	95, 592,
	97, 592,
	101, 592,
	102, 592,
	103, 592,
	104, 592,
	105, 592,
	106, 592,
	110, 592,
	111, 592,
	112, 592,
	114, 592,
	116, 592,
	121, 592,
	122, 592,
	124, 592,
	126, 592,
	127, 592,
	128, 592,
	129, 592,
	130, 592,
	131, 592,
	134, 592,
	136, 592,
	139, 592,
	140, 592,
	141, 592,
	142, 592,
	143, 592,
	144, 592,
	146, 592,
	149, 592,
	151, 592,
	152, 592,
	154, 592,
	155, 592,
	157, 592,
	159, 592,
	162, 592,
	165, 592,
	167, 592,
	168, 592,
	169, 592,
	170, 592,
	171, 592,
	172, 592,
	174, 592,
	175, 592,
	176, 592,
	177, 592,
	181, 592,
	182, 592,
	183, 592,
	184, 592,
	185, 592,
	187, 592,
	189, 592,
	190, 592,
	193, 592,
	194, 592,
	196, 592,
	198, 592,
	199, 592,
	200, 592,
	201, 592,
	202, 592,
	204, 592,
	205, 592,
	206, 592,
	207, 592,
	209, 592,
	210, 592,
	211, 592,
	212, 592,
	213, 592,
	214, 592,
	216, 592,
	217, 592,
	218, 592,
	219, 592,
	220, 592,
	221, 592,
	222, 592,
	223, 592,
	224, 592,
	225, 592,
	226, 592,
	228, 592,
	230, 592,
	231, 592,
	232, 592,
	233, 592,
	235, 592,
	236, 592,
	237, 592,
	238, 592,
	240, 592,
	241, 592,
	242, 592,
	244, 592,
	245, 592,
	246, 592,
	247, 592,
	249, 592,
	250, 592,
	251, 592,
	252, 592,
	254, 592,
	255, 592,
	256, 592,
	257, 592,
	258, 592,
	259, 592,
	260, 592,
	261, 592,
	262, 592,
	264, 592,
	266, 592,
	267, 592,
	268, 592,
	269, 592,
	270, 592,
	272, 592,
	273, 592,
	274, 592,
	277, 592,
	278, 592,
	279, 592,
	281, 592,
	282, 592,
	283, 592,
	284, 592,
	287, 592,
	288, 592,
	289, 592,
	291, 592,
	293, 592,
	294, 592,
	295, 592,
	296, 592,
	297, 592,
	298, 592,
	301, 592,
	306, 592,
	307, 592,
	308, 592,
	309, 592,
	-2, 0,
	-1, 97,
	100, 565,
	109, 565,
	145, 565,
	161, 565,
	186, 565,
	192, 565,
	285, 565,
	-2, 559,
	-1, 100,
	1, 500,
	20, 500,
	149, 500,
	209, 500,
	333, 500,
	-2, 0,
	-1, 102,
	1, 500,
	20, 500,
	333, 500,
	-2, 0,
	-1, 103,
	1, 500,
	20, 500,
	333, 500,
	-2, 0,
	-1, 104,
	1, 504,
	20, 504,
	333, 504,
	-2, 0,
	-1, 108,
	4, 598,
	5, 598,
	6, 598,
	7, 598,
	8, 598,
	9, 598,
	21, 598,
	22, 598,
	24, 598,
	29, 598,
	30, 598,
	34, 598,
	35, 598,
	36, 598,
	37, 598,
	38, 598,
	39, 598,
	40, 598,
	41, 598,
	42, 598,
	43, 598,
	45, 598,
	46, 598,
	47, 598,
	48, 598,
	49, 598,
	50, 598,
	51, 598,
	52, 598,
	53, 598,
	55, 598,
	56, 598,
	58, 598,
	60, 598,
	61, 598,
	62, 598,
	64, 598,
	66, 598,
	67, 598,
	68, 598,
	70, 598,
	71, 598,
	72, 598,
	74, 598,
	75, 598,
	77, 598,
	78, 598,
	79, 598,
	80, 598,
	81, 598,
	82, 598,
	83, 598,
	84, 598,
	85, 598,
	86, 598,
	88, 598,
	90, 598,
	94, 598,
	95, 598,
	97, 598,
	101, 598,
	102, 598,
	103, 598,
	104, 598,
	105, 598,
	106, 598,
	107, 598,
	110, 598,
	111, 598,
	112, 598,
	114, 598,
	116, 598,
	119, 598,
	121, 598,
	122, 598,
	124, 598,
	126, 598,
	127, 598,
	128, 598,
	129, 598,
	130, 598,
	131, 598,
	132, 598,
	134, 598,
	136, 598,
	138, 598,
	139, 598,
	140, 598,
	141, 598,
	142, 598,
	143, 598,
	144, 598,
	146, 598,
	148, 598,
	149, 598,
	150, 598,
	151, 598,
	152, 598,
	154, 598,
	155, 598,
	157, 598,
	158, 598,
	159, 598,
	160, 598,
	162, 598,
	165, 598,
	167, 598,
	168, 598,
	169, 598,
	170, 598,
	171, 598,
	172, 598,
	173, 598,
	174, 598,
	175, 598,
	176, 598,
	177, 598,
	178, 598,
	180, 598,
	181, 598,
	182, 598,
	183, 598,
	184, 598,
	185, 598,
	187, 598,
	190, 598,
	193, 598,
	194, 598,
	195, 598,
	196, 598,
	197, 598,
	198, 598,
	199, 598,
	200, 598,
	201, 598,
	202, 598,
	204, 598,
	205, 598,
	206, 598,
	207, 598,
	209, 598,
	210, 598,
	211, 598,
	212, 598,
	213, 598,
	214, 598,
	216, 598,
	217, 598,
	218, 598,
	219, 598,
	220, 598,
	221, 598,
	222, 598,
	223, 598,
	224, 598,
	225, 598,
	226, 598,
	228, 598,
	229, 598,
	230, 598,
	231, 598,
	232, 598,
	233, 598,
	235, 598,
	236, 598,
	237, 598,
	238, 598,
	240, 598,
	241, 598,
	242, 598,
	243, 598,
	244, 598,
	245, 598,
	246, 598,
	247, 598,
	248, 598,
	249, 598,
	250, 598,
	251, 598,
	252, 598,
	254, 598,
	255, 598,
	256, 598,
	257, 598,
	258, 598,
	259, 598,
	260, 598,
	261, 598,
	262, 598,
	264, 598,
	266, 598,
	267, 598,
	268, 598,
	269, 598,
	270, 598,
	272, 598,
	273, 598,
	274, 598,
	277, 598,
	278, 598,
	279, 598,
	280, 598,
	281, 598,
	282, 598,
	283, 598,
	284, 598,
	287, 598,
	288, 598,
	289, 598,
	290, 598,
	291, 598,
	293, 598,
	294, 598,
	295, 598,
	296, 598,
	297, 598,
	298, 598,
	301, 598,
	306, 598,
	307, 598,
	308, 598,
	309, 598,
	310, 598,
	316, 598,
	321, 598,
	322, 598,
	323, 598,
	330, 598,
	335, 598,
	-2, 0,
	-1, 113,
	1, 45,
	333, 45,
	-2, 590,
	-1, 511,
	118, 1173,
	275, 1173,
	315, 1173,
	332, 1173,
	-2, 0,
	-1, 512,
	118, 1131,
	275, 1131,
	315, 1131,
	332, 1131,
	-2, 0,
	-1, 514,
	118, 1225,
	275, 1225,
	315, 1225,
	332, 1225,
	-2, 0,
	-1, 516,
	118, 1242,
	275, 1242,
	315, 1242,
	332, 1242,
	-2, 0,
	-1, 520,
	1, 295,
	20, 295,
	333, 295,
	-2, 1178,
	-1, 529,
	1, 371,
	20, 371,
	115, 371,
	329, 371,
	333, 371,
	-2, 0,
	-1, 531,
	1, 342,
	20, 342,
	329, 342,
	333, 342,
	-2, 0,
	-1, 537,
	1, 355,
	20, 355,
	329, 355,
	333, 355,
	-2, 0,
	-1, 540,
	1, 365,
	20, 365,
	329, 365,
	333, 365,
	-2, 0,
	-1, 572,
	109, 600,
	161, 600,
	186, 600,
	-2, 562,
	-1, 575,
	109, 599,
	161, 599,
	186, 599,
	-2, 560,
	-1, 650,
	202, 588,
	-2, 446,
	-1, 654,
	188, 1107,
	-2, 0,
	-1, 688,
	4, 1309,
	10, 1309,
	11, 1309,
	13, 1309,
	14, 1309,
	15, 1309,
	16, 1309,
	17, 1309,
	18, 1309,
	21, 1309,
	22, 1309,
	24, 1309,
	27, 1309,
	29, 1309,
	31, 1309,
	34, 1309,
	35, 1309,
	36, 1309,
	37, 1309,
	38, 1309,
	39, 1309,
	40, 1309,
	41, 1309,
	42, 1309,
	43, 1309,
	45, 1309,
	46, 1309,
	47, 1309,
	48, 1309,
	51, 1309,
	52, 1309,
	53, 1309,
	55, 1309,
	56, 1309,
	57, 1309,
	60, 1309,
	61, 1309,
	62, 1309,
	63, 1309,
	64, 1309,
	66, 1309,
	67, 1309,
	68, 1309,
	70, 1309,
	71, 1309,
	72, 1309,
	79, 1309,
	80, 1309,
	81, 1309,
	82, 1309,
	83, 1309,
	84, 1309,
	85, 1309,
	86, 1309,
	88, 1309,
	90, 1309,
	94, 1309,
	95, 1309,
	97, 1309,
	101, 1309,
	102, 1309,
	103, 1309,
	104, 1309,
	105, 1309,
	106, 1309,
	110, 1309,
	111, 1309,
	112, 1309,
	113, 1309,
	114, 1309,
	116, 1309,
	119, 1309,
	121, 1309,
	122, 1309,
	124, 1309,
	126, 1309,
	127, 1309,
	128, 1309,
	129, 1309,
	130, 1309,
	131, 1309,
	132, 1309,
	133, 1309,
	134, 1309,
	136, 1309,
	138, 1309,
	139, 1309,
	140, 1309,
	141, 1309,
	142, 1309,
	143, 1309,
	144, 1309,
	146, 1309,
	148, 1309,
	149, 1309,
	150, 1309,
	151, 1309,
	152, 1309,
	154, 1309,
	155, 1309,
	157, 1309,
	158, 1309,
	159, 1309,
	160, 1309,
	162, 1309,
	165, 1309,
	166, 1309,
	167, 1309,
	168, 1309,
	169, 1309,
	170, 1309,
	171, 1309,
	172, 1309,
	173, 1309,
	174, 1309,
	175, 1309,
	176, 1309,
	177, 1309,
	181, 1309,
	182, 1309,
	183, 1309,
	184, 1309,
	185, 1309,
	187, 1309,
	190, 1309,
	191, 1309,
	193, 1309,
	194, 1309,
	196, 1309,
	198, 1309,
	199, 1309,
	200, 1309,
	201, 1309,
	202, 1309,
	204, 1309,
	205, 1309,
	206, 1309,
	207, 1309,
	209, 1309,
	210, 1309,
	211, 1309,
	212, 1309,
	213, 1309,
	214, 1309,
	216, 1309,
	217, 1309,
	218, 1309,
	219, 1309,
	220, 1309,
	221, 1309,
	222, 1309,
	223, 1309,
	224, 1309,
	225, 1309,
	226, 1309,
	228, 1309,
	229, 1309,
	230, 1309,
	231, 1309,
	232, 1309,
	233, 1309,
	234, 1309,
	235, 1309,
	236, 1309,
	237, 1309,
	238, 1309,
	240, 1309,
	241, 1309,
	242, 1309,
	244, 1309,
	245, 1309,
	246, 1309,
	247, 1309,
	248, 1309,
	249, 1309,
	250, 1309,
	251, 1309,
	252, 1309,
	254, 1309,
	255, 1309,
	256, 1309,
	257, 1309,
	258, 1309,
	259, 1309,
	260, 1309,
	261, 1309,
	262, 1309,
	264, 1309,
	266, 1309,
	267, 1309,
	268, 1309,
	269, 1309,
	270, 1309,
	272, 1309,
	273, 1309,
	274, 1309,
	277, 1309,
	278, 1309,
	279, 1309,
	281, 1309,
	282, 1309,
	283, 1309,
	284, 1309,
	287, 1309,
	288, 1309,
	289, 1309,
	291, 1309,
	293, 1309,
	294, 1309,
	295, 1309,
	296, 1309,
	297, 1309,
	298, 1309,
	301, 1309,
	306, 1309,
	307, 1309,
	308, 1309,
	309, 1309,
	310, 1309,
	311, 1309,
	313, 1309,
	314, 1309,
	315, 1309,
	316, 1309,
	318, 1309,
	319, 1309,
	320, 1309,
	321, 1309,
	322, 1309,
	323, 1309,
	324, 1309,
	325, 1309,
	326, 1309,
	328, 1309,
	331, 1309,
	332, 1309,
	334, 1309,
	335, 1309,
	-2, 0,
	-1, 708,
	118, 1242,
	275, 1242,
	315, 1242,
	332, 1242,
	-2, 0,
	-1, 762,
	109, 599,
	161, 599,
	186, 599,
	-2, 563,
	-1, 828,
	330, 1110,
	-2, 1103,
	-1, 829,
	330, 1111,
	-2, 1104,
	-1, 835,
	5, 770,
	330, 770,
	-2, 1287,
	-1, 859,
	5, 731,
	-2, 1261,
	-1, 860,
	5, 764,
	330, 764,
	-2, 1263,
	-1, 861,
	5, 739,
	-2, 1264,
	-1, 862,
	5, 738,
	-2, 1265,
	-1, 863,
	5, 764,
	330, 764,
	-2, 1268,
	-1, 864,
	5, 764,
	330, 764,
	-2, 1269,
	-1, 865,
	5, 765,
	-2, 1272,
	-1, 866,
	5, 725,
	-2, 1273,
	-1, 867,
	5, 725,
	-2, 1274,
	-1, 868,
	5, 746,
	-2, 1278,
	-1, 869,
	5, 726,
	-2, 1283,
	-1, 870,
	5, 727,
	-2, 1284,
	-1, 871,
	5, 728,
	-2, 1285,
	-1, 872,
	5, 729,
	-2, 1286,
	-1, 873,
	5, 725,
	-2, 1291,
	-1, 874,
	5, 732,
	-2, 1296,
	-1, 875,
	5, 730,
	-2, 1299,
	-1, 876,
	5, 762,
	330, 762,
	-2, 1301,
	-1, 877,
	5, 766,
	-2, 1304,
	-1, 878,
	5, 768,
	-2, 1305,
	-1, 879,
	5, 761,
	330, 761,
	-2, 1310,
	-1, 1159,
	100, 566,
	109, 566,
	145, 566,
	161, 566,
	186, 566,
	192, 566,
	285, 566,
	-2, 889,
	-1, 1168,
	330, 1087,
	-2, 1075,
	-1, 1184,
	331, 1027,
	-2, 0,
	-1, 1387,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 805,
	-1, 1388,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 806,
	-1, 1389,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 807,
	-1, 1393,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 811,
	-1, 1394,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 812,
	-1, 1395,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 813,
	-1, 1398,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 818,
	-1, 1404,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 820,
	-1, 1406,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 824,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 825,
	-1, 1408,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 826,
	-1, 1409,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 827,
	-1, 1436,
	197, 969,
	-2, 972,
	-1, 1469,
	118, 1009,
	330, 1110,
	-2, 1103,
	-1, 1470,
	118, 1010,
	-2, 1257,
	-1, 1471,
	118, 1011,
	-2, 1177,
	-1, 1472,
	118, 1012,
	-2, 1145,
	-1, 1473,
	118, 1013,
	-2, 1161,
	-1, 1474,
	118, 1014,
	-2, 1176,
	-1, 1475,
	118, 1015,
	-2, 1223,
	-1, 1636,
	90, 590,
	139, 590,
	288, 590,
	289, 590,
	-2, 0,
	-1, 1643,
	100, 566,
	109, 566,
	145, 566,
	161, 566,
	186, 566,
	192, 566,
	285, 566,
	-2, 660,
	-1, 1647,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 819,
	-1, 1648,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 821,
	-1, 1653,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 822,
	-1, 1671,
	197, 968,
	-2, 971,
	-1, 1865,
	1, 661,
	20, 661,
	70, 661,
	100, 661,
	109, 661,
	119, 661,
	123, 661,
	125, 661,
	138, 661,
	145, 661,
	150, 661,
	158, 661,
	161, 661,
	173, 661,
	186, 661,
	188, 661,
	192, 661,
	227, 661,
	229, 661,
	285, 661,
	292, 661,
	303, 661,
	304, 661,
	312, 661,
	329, 661,
	331, 661,
	333, 661,
	334, 661,
	-2, 660,
	-1, 1867,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 823,
	-1, 1872,
	148, 0,
	-2, 839,
	-1, 1882,
	197, 970,
	-2, 973,
	-1, 1916,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 866,
	-1, 1917,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 867,
	-1, 1918,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 868,
	-1, 1922,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 872,
	-1, 1923,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 873,
	-1, 1924,
	13, 0,
	14, 0,
	15, 0,
	313, 0,
	314, 0,
	315, 0,
	-2, 874,
	-1, 2045,
	148, 0,
	-2, 840,
	-1, 2048,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 843,
	-1, 2049,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 845,
	-1, 2155,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 844,
	-1, 2156,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	132, 0,
	133, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 846,
	-1, 2163,
	148, 0,
	-2, 875,
	-1, 2219,
	148, 0,
	-2, 876,
	-1, 2284,
	37, 0,
	132, 0,
	160, 0,
	248, 0,
	310, 0,
	316, 0,
	-2, 1260,
}

const sqlPrivate = 57344

const sqlLast = 35778

var sqlAct = [...]int{

	829, 2283, 2261, 2225, 2308, 2089, 2263, 2282, 2262, 2001,
	932, 1282, 1860, 1794, 1893, 1274, 1861, 576, 2036, 940,
	58, 1953, 1638, 2135, 819, 2021, 1641, 370, 383, 1359,
	2115, 1573, 1804, 1575, 1967, 148, 148, 148, 805, 583,
	96, 612, 1765, 644, 1732, 2015, 916, 1254, 918, 1258,
	1348, 681, 385, 148, 148, 148, 1271, 1253, 148, 924,
	1835, 1731, 1434, 1314, 1283, 148, 1366, 966, 1628, 1164,
	1357, 1682, 1578, 1844, 889, 1257, 1764, 788, 1555, 1222,
	935, 1623, 1444, 148, 148, 1213, 799, 1421, 1364, 1418,
	96, 380, 23, 377, 18, 1297, 1498, 1344, 1245, 378,
	28, 967, 1097, 1334, 827, 895, 148, 148, 376, 17,
	379, 9, 897, 148, 925, 1046, 522, 928, 1307, 1465,
	581, 826, 372, 21, 798, 1155, 789, 712, 1040, 682,
	674, 1194, 148, 148, 148, 148, 1361, 711, 1198, 1105,
	667, 677, 1276, 148, 148, 1968, 1261, 140, 599, 765,
	97, 952, 563, 96, 766, 98, 1044, 1048, 821, 764,
	710, 518, 496, 946, 144, 665, 597, 778, 526, 515,
	575, 770, 1852, 2148, 1670, 1275, 2149, 580, 954, 2298,
	954, 580, 921, 339, 29, 1639, 1590, 1674, 954, 149,
	1279, 635, 1675, 1317, 29, 34, 100, 2277, 2273, 2272,
	1966, 1317, 1317, 113, 914, 23, 1589, 18, 2269, 2259,
	1107, 921, 1304, 28, 1702, 1703, 1246, 1720, 1721, 1722,
	2254, 102, 17, 921, 9, 1702, 1703, 36, 2203, 37,
	2250, 2044, 2221, 921, 2215, 1304, 21, 921, 1626, 37,
	1249, 386, 2201, 1501, 608, 921, 1626, 573, 54, 615,
	2193, 2188, 572, 1966, 2187, 45, 2157, 2145, 103, 1304,
	964, 1246, 53, 2142, 50, 45, 2143, 1717, 620, 624,
	1311, 1108, 1109, 601, 50, 1106, 629, 1138, 1139, 1140,
	55, 2123, 1929, 1249, 1966, 108, 51, 2120, 2118, 2100,
	921, 1966, 921, 1879, 2099, 1111, 51, 1966, 1142, 2071,
	2050, 2047, 1317, 1317, 1304, 2039, 1988, 1617, 1317, 1317,
	369, 112, 1986, 1965, 1312, 1317, 1966, 1708, 1110, 1317,
	1211, 1563, 1876, 1681, 1125, 1317, 1818, 1813, 1708, 1252,
	1252, 1749, 29, 1747, 1750, 1746, 1317, 1745, 1317, 1673,
	1317, 1438, 108, 111, 1317, 148, 148, 148, 1347, 148,
	1671, 105, 1723, 1317, 1313, 1310, 955, 106, 955, 1332,
	148, 784, 148, 148, 148, 148, 955, 52, 112, 1100,
	1718, 1099, 685, 1024, 1116, 1562, 99, 37, 921, 1354,
	2029, 1718, 921, 82, 83, 35, 1320, 1023, 56, 1317,
	104, 921, 581, 1135, 1143, 57, 1702, 1703, 1316, 108,
	111, 1317, 1589, 45, 64, 633, 700, 65, 105, 108,
	1303, 1969, 50, 1304, 106, 1251, 101, 65, 1252, 1209,
	683, 1133, 1208, 521, 1315, 112, 1106, 1126, 963, 2297,
	108, 964, 639, 1278, 51, 112, 1056, 723, 1719, 2281,
	1462, 84, 1642, 2268, 2230, 2216, 1108, 1109, 1460, 1719,
	2121, 2076, 2072, 2064, 2063, 2062, 112, 111, 2058, 1702,
	1703, 648, 777, 652, 960, 105, 953, 111, 2057, 2056,
	1111, 106, 1041, 2014, 1081, 105, 1944, 1939, 670, 670,
	2008, 106, 1938, 1937, 1887, 1865, 1834, 643, 111, 1822,
	99, 148, 1754, 1110, 1309, 1127, 666, 1751, 1739, 1708,
	1851, 1702, 1703, 671, 1720, 1721, 1722, 567, 1730, 1136,
	1701, 1698, 1697, 1695, 1687, 148, 1308, 1714, 1715, 1716,
	1686, 99, 1713, 1711, 1712, 1704, 1705, 1706, 1707, 1709,
	1710, 1561, 1565, 1713, 1711, 1712, 1704, 1705, 1706, 1707,
	1709, 1710, 1108, 1109, 892, 1518, 1172, 108, 777, 1116,
	1430, 1640, 1718, 776, 1717, 65, 938, 1165, 609, 99,
	1895, 686, 1708, 2240, 611, 148, 1111, 2196, 641, 148,
	148, 1134, 2186, 112, 2185, 1702, 1703, 1137, 2184, 1121,
	1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118, 2176, 1110,
	763, 1753, 2174, 2165, 2152, 1125, 2138, 148, 2133, 148,
	2086, 2069, 1126, 2041, 1708, 111, 1995, 1992, 1972, 1871,
	1849, 1802, 1820, 105, 1800, 1799, 1797, 1773, 148, 106,
	1719, 1772, 2007, 1729, 1724, 1691, 1690, 1667, 1717, 1662,
	1423, 1608, 1549, 685, 148, 1108, 1109, 1544, 371, 1723,
	385, 685, 1531, 148, 762, 1116, 1530, 1510, 1431, 1458,
	1353, 887, 1199, 1202, 1206, 148, 1192, 1718, 1191, 1111,
	148, 1190, 148, 937, 148, 1189, 1188, 148, 922, 1187,
	1127, 1186, 1185, 1184, 1183, 1182, 1181, 1180, 1708, 1179,
	1178, 1177, 1110, 886, 706, 1176, 639, 930, 1169, 1158,
	99, 931, 613, 787, 725, 705, 696, 694, 1126, 2280,
	148, 2252, 148, 2147, 2027, 148, 761, 1704, 1705, 1706,
	1707, 1709, 1710, 780, 2052, 1165, 780, 2030, 2026, 2013,
	2012, 685, 685, 779, 385, 1719, 779, 1531, 1853, 148,
	1602, 1718, 1601, 148, 573, 148, 1156, 943, 148, 572,
	148, 892, 148, 2190, 148, 905, 148, 915, 148, 783,
	773, 774, 1057, 148, 148, 2150, 781, 1112, 1113, 1114,
	1115, 1117, 1118, 903, 1246, 785, 1127, 1053, 1053, 1461,
	1704, 1705, 1706, 1707, 1709, 1710, 1576, 1459, 904, 719,
	642, 720, 2011, 148, 1591, 148, 1042, 1343, 148, 1642,
	1752, 1702, 1703, 1702, 1703, 1342, 666, 1204, 920, 1719,
	936, 1205, 1646, 757, 1714, 1715, 1716, 715, 1174, 1713,
	1711, 1712, 1704, 1705, 1706, 1707, 1709, 1710, 1556, 2016,
	1275, 721, 686, 957, 581, 945, 959, 948, 1896, 386,
	686, 1445, 892, 752, 1678, 1104, 1195, 1585, 360, 1760,
	2233, 2294, 1980, 1321, 356, 1058, 898, 1014, 899, 1016,
	1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118, 343,
	2295, 2200, 1311, 1015, 579, 1614, 1017, 591, 753, 1022,
	1483, 1171, 2110, 1034, 1033, 2109, 1702, 1703, 1054, 2108,
	1064, 1108, 1109, 1713, 1711, 1712, 1704, 1705, 1706, 1707,
	1709, 1710, 613, 357, 1708, 148, 589, 29, 2107, 148,
	587, 130, 1788, 148, 1786, 1111, 1312, 593, 148, 578,
	686, 686, 1080, 386, 148, 148, 1084, 364, 584, 900,
	1083, 573, 148, 1082, 573, 573, 1093, 1757, 1110, 1094,
	1095, 1756, 148, 1102, 1819, 1101, 720, 1649, 348, 148,
	1012, 1223, 37, 1108, 1109, 1607, 1313, 1310, 1216, 1019,
	148, 1118, 148, 1606, 148, 1605, 580, 148, 1604, 148,
	1168, 148, 148, 148, 1405, 685, 1318, 1111, 45, 1242,
	2199, 363, 1238, 1236, 782, 632, 721, 50, 1991, 1708,
	133, 1514, 1215, 814, 1116, 1227, 1229, 1513, 1784, 1376,
	1110, 1295, 759, 1272, 1078, 1196, 1197, 1079, 570, 51,
	1702, 1703, 1793, 96, 1226, 96, 1200, 1791, 1558, 1215,
	926, 1420, 1203, 683, 1420, 1214, 1315, 804, 145, 145,
	341, 727, 1060, 1248, 2246, 1315, 1207, 1234, 949, 2265,
	1345, 1346, 1718, 1240, 134, 1579, 485, 487, 489, 1232,
	1445, 507, 359, 358, 1237, 1219, 1116, 1161, 523, 577,
	898, 2305, 899, 703, 340, 1243, 1427, 385, 2294, 1300,
	1775, 1425, 1551, 1635, 148, 1301, 565, 523, 1546, 1277,
	1289, 1277, 908, 670, 1299, 670, 1302, 906, 148, 148,
	148, 1615, 148, 2091, 2179, 1333, 1309, 1613, 1298, 600,
	600, 1281, 1293, 713, 1296, 1225, 341, 1290, 748, 1291,
	1719, 362, 1292, 1708, 1706, 1707, 1709, 1710, 148, 1710,
	2266, 385, 108, 714, 880, 341, 341, 627, 341, 901,
	65, 1355, 344, 900, 1077, 2256, 145, 636, 1018, 1267,
	616, 1193, 2161, 1200, 1827, 1203, 361, 2117, 112, 1375,
	1197, 1196, 586, 349, 1689, 2304, 385, 345, 2257, 622,
	616, 1322, 631, 714, 686, 1153, 1718, 346, 1065, 2267,
	1636, 1066, 1323, 1067, 131, 1068, 387, 1069, 912, 1070,
	111, 586, 1627, 1224, 1428, 588, 1074, 1076, 105, 792,
	596, 1845, 595, 911, 106, 1711, 1712, 1704, 1705, 1706,
	1707, 1709, 1710, 586, 1114, 1115, 1117, 1118, 1782, 132,
	898, 909, 899, 99, 1315, 1864, 580, 1792, 769, 1776,
	1367, 1374, 930, 148, 148, 148, 910, 1341, 1339, 148,
	1337, 1631, 148, 1516, 1719, 1212, 1832, 1351, 148, 148,
	148, 148, 148, 1356, 2316, 1442, 2303, 148, 1352, 148,
	1634, 1651, 954, 148, 1419, 749, 386, 1108, 1109, 1542,
	685, 2264, 1629, 148, 1112, 1113, 1114, 1115, 1117, 1118,
	1632, 571, 2311, 148, 728, 148, 1061, 148, 1524, 1583,
	148, 1111, 2293, 900, 148, 1630, 2092, 1416, 1429, 148,
	1432, 148, 1564, 1517, 1566, 2291, 1426, 2000, 148, 1269,
	2023, 1454, 1414, 730, 1110, 701, 704, 1824, 699, 581,
	386, 1476, 1554, 65, 2102, 750, 1961, 2101, 1579, 1954,
	1712, 1704, 1705, 1706, 1707, 1709, 1710, 1952, 2084, 148,
	148, 1956, 1528, 901, 1519, 2067, 1659, 2171, 523, 650,
	523, 1633, 656, 685, 1021, 386, 709, 1825, 1541, 1962,
	724, 1657, 543, 341, 1759, 523, 523, 341, 678, 1581,
	1116, 1961, 1013, 751, 1587, 1410, 1543, 1527, 1528, 497,
	1955, 726, 1548, 1411, 1557, 1412, 148, 1523, 2322, 1417,
	1270, 944, 1823, 1402, 933, 2226, 1072, 616, 1025, 1053,
	502, 631, 1805, 1568, 1962, 498, 581, 713, 1567, 2309,
	2002, 1570, 1925, 96, 2022, 1645, 1584, 1032, 1031, 896,
	1041, 1038, 1435, 1126, 1654, 1592, 1600, 1315, 1979, 1439,
	499, 768, 2317, 1448, 1655, 1978, 1325, 2068, 1660, 545,
	955, 2085, 1610, 1611, 1468, 1468, 1481, 1327, 1493, 501,
	1957, 1089, 1958, 2037, 1505, 1506, 1508, 1618, 1619, 686,
	2310, 1976, 1593, 1594, 581, 1595, 1328, 1300, 1616, 1622,
	1621, 1029, 1637, 1301, 1644, 768, 1625, 1326, 2312, 1612,
	1960, 2321, 1299, 767, 1302, 1413, 1680, 1963, 1400, 1403,
	1533, 1127, 1415, 901, 697, 1957, 1298, 1958, 1926, 732,
	1035, 713, 1532, 713, 1927, 1631, 687, 2024, 769, 1027,
	1840, 1652, 1650, 2038, 1090, 1839, 1399, 578, 523, 662,
	646, 1028, 654, 660, 1634, 1960, 1977, 767, 141, 581,
	1795, 1666, 1963, 1993, 1656, 2082, 1843, 645, 1553, 1836,
	1624, 1658, 686, 1457, 1632, 746, 1677, 2164, 2066, 500,
	1733, 1870, 1975, 744, 1790, 1696, 742, 2083, 1959, 1006,
	1661, 714, 1559, 714, 1319, 1250, 740, 1241, 758, 1235,
	756, 755, 523, 341, 640, 1036, 1771, 1120, 1112, 1113,
	1114, 1115, 1117, 1118, 148, 1734, 148, 1175, 738, 1063,
	736, 733, 882, 148, 1456, 2260, 685, 658, 503, 1801,
	565, 544, 600, 1959, 1401, 1798, 3, 616, 2223, 1950,
	148, 148, 1736, 1737, 1738, 1633, 1780, 1778, 1755, 381,
	12, 341, 1884, 1758, 1814, 382, 11, 1572, 1806, 1762,
	546, 822, 374, 10, 373, 8, 1273, 145, 148, 1266,
	375, 4, 1807, 962, 881, 961, 341, 148, 1783, 958,
	148, 1789, 1574, 956, 913, 893, 1770, 585, 942, 1796,
	385, 747, 148, 341, 663, 341, 637, 341, 661, 745,
	950, 634, 743, 1769, 1815, 1811, 1838, 1809, 1808, 1841,
	929, 1816, 741, 638, 1850, 1854, 1817, 1665, 1855, 1826,
	1828, 1829, 907, 902, 2128, 1668, 96, 616, 2295, 947,
	771, 947, 717, 145, 739, 145, 737, 734, 523, 1779,
	148, 1781, 1349, 659, 1684, 1685, 834, 1043, 884, 1842,
	618, 1889, 1890, 1891, 2130, 1215, 1846, 1847, 1231, 1812,
	883, 1230, 523, 12, 1042, 1039, 145, 729, 523, 11,
	2181, 523, 603, 523, 1969, 523, 10, 523, 8, 523,
	1873, 1071, 1728, 1880, 4, 492, 523, 523, 2218, 1837,
	590, 592, 1215, 606, 1741, 1883, 775, 687, 1228, 772,
	1239, 1350, 1108, 1109, 387, 687, 831, 148, 148, 148,
	1899, 1902, 1233, 1897, 718, 686, 565, 2204, 600, 1904,
	1998, 636, 1280, 2320, 148, 1268, 1932, 1265, 1103, 148,
	1020, 148, 965, 148, 148, 148, 1306, 148, 1785, 148,
	2319, 685, 504, 1787, 1933, 1367, 1900, 1771, 1599, 1110,
	148, 148, 1970, 1598, 1367, 1905, 1597, 685, 1949, 1108,
	1109, 1596, 607, 1627, 692, 691, 1946, 690, 689, 754,
	610, 1974, 1771, 602, 561, 560, 559, 1771, 558, 386,
	557, 556, 555, 1111, 554, 687, 687, 1936, 387, 2003,
	148, 148, 553, 552, 148, 551, 550, 1996, 549, 1973,
	1990, 548, 685, 2004, 547, 148, 1110, 510, 1997, 509,
	508, 368, 1631, 148, 367, 2005, 366, 2033, 365, 2019,
	2020, 355, 581, 2025, 1994, 354, 353, 1770, 341, 1999,
	2032, 1634, 1220, 352, 1858, 351, 341, 2010, 350, 138,
	137, 341, 2042, 1629, 1769, 136, 148, 341, 1244, 135,
	683, 1632, 1770, 2031, 129, 1247, 128, 1770, 127, 126,
	125, 1877, 1210, 124, 123, 1256, 1630, 122, 121, 1769,
	616, 120, 636, 119, 1769, 616, 118, 117, 116, 115,
	114, 631, 2253, 341, 2207, 1288, 2009, 523, 2034, 2046,
	523, 1945, 523, 1830, 341, 341, 1294, 2065, 1821, 1092,
	1748, 148, 1330, 148, 1603, 385, 148, 790, 790, 1702,
	1703, 1108, 1109, 1515, 148, 1512, 890, 1286, 1330, 1329,
	385, 1511, 1633, 1930, 1453, 1331, 1162, 2054, 631, 631,
	686, 2239, 2116, 2080, 1940, 1892, 1569, 1172, 1170, 735,
	702, 1771, 2077, 569, 2090, 495, 686, 1062, 2095, 731,
	2078, 148, 2028, 1848, 685, 2255, 2059, 1688, 148, 2093,
	2134, 2160, 930, 1455, 1173, 44, 2112, 148, 2094, 1767,
	1771, 2096, 808, 1951, 1761, 148, 1260, 1259, 388, 1030,
	2111, 830, 1047, 148, 1467, 1368, 2125, 2127, 885, 832,
	970, 686, 148, 148, 833, 2146, 2137, 1335, 971, 2141,
	2126, 1201, 820, 2131, 2140, 2129, 968, 2144, 1284, 2154,
	1424, 341, 341, 341, 1443, 341, 2151, 1676, 1166, 800,
	812, 1770, 2119, 2159, 811, 1440, 693, 2035, 62, 687,
	63, 2018, 2104, 148, 1582, 2006, 1088, 1340, 1769, 2153,
	1085, 341, 1777, 347, 1699, 1336, 631, 1338, 695, 616,
	1770, 2169, 2170, 2175, 1490, 1482, 1478, 760, 148, 148,
	888, 1154, 1285, 722, 1588, 1305, 2178, 1769, 148, 786,
	1086, 2122, 1091, 1096, 2192, 1362, 685, 605, 1098, 2195,
	604, 148, 2177, 2105, 2106, 2194, 1255, 2166, 716, 148,
	1026, 1324, 1147, 1144, 386, 148, 1148, 1149, 1150, 1151,
	1152, 385, 148, 148, 581, 594, 1160, 2208, 2173, 386,
	2198, 934, 1526, 2315, 2213, 2180, 1167, 2210, 2206, 1774,
	2232, 387, 2197, 2209, 110, 148, 109, 148, 2217, 2211,
	148, 107, 385, 2189, 2114, 96, 2205, 1552, 27, 80,
	81, 79, 24, 686, 78, 77, 341, 1521, 1522, 2242,
	2214, 76, 1220, 75, 148, 1529, 2241, 148, 2245, 2243,
	2234, 1534, 1535, 1537, 1539, 1540, 2098, 2247, 2238, 2249,
	341, 1771, 1547, 2251, 2228, 387, 1550, 2248, 2229, 74,
	1520, 73, 72, 2220, 71, 70, 341, 69, 68, 67,
	66, 148, 2270, 61, 60, 22, 942, 148, 942, 20,
	523, 19, 6, 341, 1545, 2274, 2276, 1577, 2278, 26,
	387, 148, 341, 25, 1586, 2288, 16, 1000, 15, 2290,
	1560, 341, 2292, 2244, 2296, 14, 13, 49, 48, 2279,
	148, 47, 46, 2299, 43, 42, 2302, 1571, 2275, 1663,
	1664, 41, 2301, 40, 2300, 39, 929, 38, 7, 2314,
	2313, 1770, 1335, 1335, 5, 929, 973, 94, 505, 91,
	93, 90, 92, 2318, 95, 686, 87, 88, 1769, 999,
	89, 2323, 86, 85, 33, 32, 31, 1037, 30, 494,
	2, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 1108, 1109, 0, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 0, 0, 1725, 1726, 1727, 0,
	0, 0, 0, 1484, 687, 1111, 0, 0, 0, 0,
	0, 386, 0, 0, 0, 497, 0, 0, 0, 0,
	0, 0, 0, 1362, 0, 0, 0, 0, 1110, 0,
	0, 972, 0, 1002, 0, 0, 502, 0, 0, 809,
	59, 498, 0, 1702, 1703, 1001, 1720, 1721, 1722, 0,
	0, 0, 0, 1108, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 499, 0, 2235, 2236,
	2237, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 1116, 501, 0, 687, 0, 0,
	59, 969, 0, 0, 0, 0, 1717, 0, 0, 790,
	1110, 0, 2258, 0, 0, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 0, 1404, 0,
	1406, 1407, 1408, 1409, 0, 0, 574, 1126, 0, 582,
	0, 0, 0, 0, 0, 0, 1708, 0, 0, 1433,
	0, 0, 0, 59, 0, 1766, 1116, 0, 0, 0,
	0, 1868, 1869, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 1464, 0, 0, 1480, 0, 1492, 1494, 1499,
	1502, 1503, 1504, 0, 0, 500, 0, 1220, 0, 942,
	493, 0, 0, 0, 0, 0, 1803, 0, 0, 1718,
	0, 890, 0, 0, 0, 1127, 0, 0, 0, 1126,
	0, 494, 0, 341, 341, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 503, 1928, 0, 0, 1484, 1484,
	0, 1831, 0, 0, 0, 0, 0, 1286, 1362, 0,
	341, 0, 0, 341, 0, 0, 0, 497, 0, 0,
	0, 0, 0, 0, 0, 1863, 0, 1719, 1580, 0,
	0, 0, 0, 0, 0, 0, 0, 1127, 502, 0,
	0, 0, 0, 498, 1362, 0, 0, 1362, 0, 1121,
	1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118, 0, 0,
	0, 0, 0, 0, 0, 1484, 1484, 1484, 499, 0,
	1609, 0, 0, 1894, 0, 0, 0, 0, 0, 0,
	0, 1000, 1000, 0, 0, 0, 0, 501, 0, 0,
	687, 0, 0, 0, 0, 1620, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 1714, 1715, 1716, 0,
	0, 1713, 1711, 1712, 1704, 1705, 1706, 1707, 1709, 1710,
	973, 973, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118,
	0, 0, 0, 999, 999, 0, 0, 0, 0, 0,
	1947, 1948, 1220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1647, 1648, 387, 0, 1766, 636, 1653, 0,
	0, 0, 1981, 0, 1982, 0, 341, 1984, 1985, 0,
	341, 582, 1989, 0, 0, 0, 0, 0, 0, 0,
	0, 1766, 0, 636, 1256, 0, 1766, 500, 0, 0,
	0, 1672, 0, 1000, 0, 0, 0, 0, 1679, 0,
	1983, 0, 1683, 0, 1987, 972, 972, 1002, 1002, 0,
	0, 1692, 0, 0, 0, 0, 0, 0, 0, 1001,
	1001, 0, 0, 341, 341, 0, 0, 341, 0, 1000,
	1484, 1484, 973, 2087, 0, 0, 503, 0, 1863, 0,
	0, 1160, 0, 0, 0, 999, 2040, 0, 1499, 1499,
	1499, 0, 0, 0, 0, 0, 0, 1362, 1362, 0,
	0, 1362, 0, 0, 0, 969, 969, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 1000, 0, 2060,
	0, 999, 0, 1763, 1484, 1484, 1484, 1484, 1484, 1484,
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
	1484, 1484, 1484, 0, 1484, 687, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 972, 0, 1002,
	0, 687, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 1001, 790, 0, 1220, 0, 2079, 2163, 0, 2081,
	0, 0, 0, 0, 890, 0, 0, 341, 0, 0,
	1766, 0, 0, 972, 0, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 687, 1001, 0, 0,
	0, 0, 0, 0, 0, 2113, 0, 969, 0, 1766,
	0, 2088, 0, 574, 341, 0, 0, 0, 0, 0,
	0, 636, 0, 0, 0, 0, 0, 0, 0, 1866,
	2136, 972, 1867, 1002, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 969, 1872, 1001, 1863, 0, 2124, 0,
	0, 0, 0, 1881, 0, 636, 1863, 0, 0, 0,
	0, 1885, 0, 0, 1609, 2219, 0, 0, 0, 0,
	0, 0, 1362, 0, 0, 0, 0, 0, 0, 1901,
	0, 0, 0, 1903, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 942, 0, 0, 387,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 387, 0, 1934, 1935, 0, 0,
	0, 2182, 2183, 0, 0, 1941, 1942, 1943, 0, 0,
	0, 2191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2202, 0, 0, 0, 687, 0,
	0, 1971, 636, 0, 0, 0, 0, 0, 1863, 0,
	0, 0, 0, 0, 0, 1863, 636, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2227, 0,
	636, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	574, 0, 0, 574, 574, 0, 0, 0, 0, 0,
	1766, 0, 0, 0, 0, 0, 0, 2136, 0, 2017,
	1863, 0, 0, 0, 0, 0, 0, 2231, 0, 0,
	0, 1157, 0, 1159, 0, 0, 0, 0, 0, 0,
	1163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2045, 636, 0, 0, 2048, 2049, 0,
	341, 0, 2051, 0, 0, 1000, 0, 0, 0, 2053,
	687, 2055, 0, 0, 2289, 0, 1484, 0, 0, 2061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1863, 1286, 387, 1000, 1000, 0, 0,
	0, 0, 0, 0, 973, 1000, 1000, 0, 0, 0,
	0, 0, 2070, 0, 0, 1108, 1109, 999, 1128, 1129,
	1130, 1138, 1139, 1140, 0, 0, 387, 0, 0, 0,
	0, 0, 1131, 0, 59, 973, 973, 0, 1000, 1111,
	59, 0, 1142, 0, 973, 973, 0, 0, 999, 999,
	0, 0, 0, 0, 0, 0, 0, 999, 999, 0,
	0, 2103, 1110, 0, 0, 0, 0, 0, 1125, 0,
	0, 0, 0, 0, 1484, 0, 59, 973, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	999, 1002, 0, 59, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 2139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	972, 972, 1002, 1002, 0, 0, 2155, 2156, 0, 972,
	972, 1002, 1002, 0, 1001, 1001, 0, 1135, 1143, 0,
	0, 0, 0, 1001, 1001, 0, 0, 1702, 1703, 969,
	1720, 1721, 1722, 1141, 0, 0, 2168, 0, 0, 0,
	0, 0, 972, 0, 1002, 1133, 0, 0, 0, 2172,
	0, 1126, 0, 0, 1000, 0, 1001, 0, 0, 0,
	969, 969, 0, 0, 0, 0, 0, 0, 0, 969,
	969, 0, 0, 0, 0, 0, 1132, 0, 0, 0,
	1717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 1702, 1703, 890, 1720, 1721, 1722,
	0, 0, 969, 0, 0, 0, 999, 0, 0, 0,
	0, 2043, 0, 0, 0, 0, 0, 1363, 0, 1127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1708, 0, 0, 1136, 1108, 1109, 0, 1128, 1129, 1130,
	1138, 1139, 1140, 0, 0, 0, 0, 1717, 0, 0,
	0, 1131, 0, 1422, 0, 0, 0, 0, 1111, 0,
	0, 1142, 0, 1000, 0, 1723, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	1002, 1110, 0, 1718, 0, 0, 0, 1125, 0, 0,
	0, 0, 1001, 0, 0, 1134, 2271, 1708, 1122, 1123,
	1124, 1137, 973, 1121, 1119, 1120, 1112, 1113, 1114, 1115,
	1117, 1118, 0, 0, 0, 999, 2224, 0, 0, 2287,
	2287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1723, 0, 0, 0, 0, 1116, 969, 0,
	0, 0, 0, 59, 0, 0, 0, 2287, 0, 59,
	1718, 1719, 1000, 0, 0, 0, 1135, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 59, 0, 0, 59, 0,
	0, 0, 2287, 0, 1133, 0, 0, 972, 582, 1002,
	1126, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1001, 0, 0, 999, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1132, 0, 0, 1719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1714, 1715, 1716, 0, 0, 1713, 1711, 1712, 1704, 1705,
	1706, 1707, 1709, 1710, 0, 0, 0, 969, 1000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 1136, 0, 0, 1643, 972, 0, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 1714, 1715, 1716,
	999, 0, 1713, 1711, 1712, 1704, 1705, 1706, 1707, 1709,
	1710, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1159, 1134, 0, 969, 1122, 1123, 1124,
	1137, 0, 1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117,
	1118, 0, 0, 0, 0, 0, 0, 0, 2073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 1002, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1001, 828, 817, 818,
	815, 816, 807, 0, 0, 0, 0, 0, 1159, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 0,
	0, 0, 844, 810, 0, 0, 0, 153, 154, 155,
	287, 859, 289, 860, 156, 861, 862, 0, 157, 293,
	294, 158, 969, 843, 863, 864, 297, 0, 159, 855,
	0, 836, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 390, 167, 168, 0, 837, 839, 0,
	838, 840, 169, 170, 342, 171, 865, 172, 866, 867,
	0, 173, 0, 174, 0, 0, 0, 858, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 845, 846,
	824, 0, 0, 181, 182, 868, 0, 183, 0, 184,
	1363, 0, 391, 0, 185, 856, 0, 307, 0, 186,
	187, 188, 189, 852, 854, 393, 0, 193, 0, 190,
	0, 392, 191, 869, 192, 870, 871, 872, 0, 835,
	0, 394, 194, 395, 195, 196, 1363, 198, 197, 1363,
	857, 396, 199, 397, 0, 200, 59, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 398, 207, 208, 210,
	209, 0, 0, 825, 853, 211, 873, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 399, 217,
	400, 847, 218, 219, 220, 221, 0, 848, 222, 322,
	223, 0, 224, 225, 226, 874, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 401, 241, 242, 1489, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 841, 253, 244, 245,
	254, 402, 255, 875, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 876, 260, 849, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 877, 878, 0, 0,
	269, 850, 851, 823, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 842, 277, 0, 335, 278, 279, 280,
	336, 879, 0, 0, 281, 0, 0, 0, 0, 282,
	283, 284, 285, 1108, 1109, 0, 1128, 1129, 1130, 1138,
	1139, 1140, 0, 0, 0, 0, 524, 0, 543, 0,
	1131, 0, 0, 1488, 0, 0, 0, 1111, 806, 0,
	1142, 1702, 1703, 59, 1720, 1721, 1722, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1875, 0,
	1110, 0, 0, 0, 0, 0, 1125, 0, 0, 1363,
	1363, 0, 0, 1363, 0, 0, 0, 0, 0, 527,
	0, 582, 0, 0, 530, 0, 0, 0, 0, 532,
	533, 0, 0, 539, 1717, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 545, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 0, 0,
	0, 0, 0, 0, 0, 1135, 1143, 0, 0, 0,
	0, 0, 0, 0, 1708, 529, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 534,
	535, 0, 0, 1133, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 0, 536, 0, 0, 1723,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 0, 1718, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 1127, 0, 0,
	0, 2132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1136, 0, 0, 1363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1719, 525, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 0, 541, 0, 0, 0, 546, 0, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 0, 540, 1122, 1123, 1124, 1137,
	0, 1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118,
	0, 0, 0, 0, 0, 0, 0, 1744, 0, 0,
	0, 0, 0, 0, 1714, 1715, 1716, 0, 0, 1713,
	1711, 1712, 1704, 1705, 1706, 1707, 1709, 1710, 0, 384,
	0, 0, 0, 1159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 150, 151, 403, 152,
	404, 405, 406, 407, 286, 408, 409, 410, 411, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 412,
	157, 293, 294, 158, 413, 414, 295, 296, 297, 415,
	159, 298, 416, 389, 417, 160, 161, 162, 0, 163,
	418, 164, 165, 166, 419, 390, 167, 168, 420, 421,
	422, 423, 424, 425, 169, 170, 342, 171, 299, 172,
	300, 301, 426, 173, 427, 174, 428, 429, 430, 175,
	176, 431, 177, 432, 0, 433, 302, 178, 179, 180,
	303, 304, 434, 435, 436, 181, 182, 305, 0, 183,
	437, 184, 438, 439, 391, 440, 185, 306, 441, 307,
	442, 186, 187, 188, 189, 308, 309, 393, 443, 193,
	444, 190, 445, 392, 191, 310, 192, 311, 312, 313,
	446, 314, 447, 394, 194, 395, 195, 196, 448, 198,
	197, 449, 315, 396, 199, 397, 450, 200, 451, 452,
	201, 0, 202, 203, 204, 206, 316, 205, 398, 207,
	208, 210, 209, 453, 454, 455, 317, 211, 318, 212,
	213, 456, 214, 457, 458, 215, 459, 460, 216, 319,
	399, 217, 400, 320, 218, 219, 220, 221, 461, 321,
	222, 322, 223, 462, 224, 225, 226, 323, 227, 228,
	463, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 464, 240, 401, 241, 242, 324, 243, 0,
	247, 248, 249, 250, 465, 325, 251, 252, 466, 253,
	244, 245, 254, 402, 255, 326, 327, 256, 467, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 468, 263,
	469, 264, 265, 266, 267, 268, 470, 330, 331, 332,
	471, 472, 269, 333, 334, 473, 270, 271, 272, 273,
	474, 475, 274, 275, 276, 476, 277, 477, 335, 278,
	279, 280, 336, 337, 478, 479, 281, 480, 481, 482,
	483, 282, 283, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 1856, 0, 0, 0, 0, 0, 0,
	0, 1857, 150, 151, 403, 152, 404, 405, 406, 407,
	286, 408, 409, 410, 411, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 412, 157, 293, 294, 158,
	413, 414, 295, 296, 297, 415, 159, 298, 416, 389,
	417, 160, 161, 162, 0, 163, 418, 164, 165, 166,
	419, 390, 167, 168, 420, 421, 422, 423, 424, 425,
	169, 170, 342, 171, 299, 172, 300, 301, 426, 173,
	427, 174, 428, 429, 430, 175, 176, 431, 177, 432,
	0, 433, 302, 178, 179, 180, 303, 304, 434, 435,
	436, 181, 182, 305, 0, 183, 437, 184, 438, 439,
	391, 440, 185, 306, 441, 307, 442, 186, 187, 188,
	189, 308, 309, 393, 443, 193, 444, 190, 445, 392,
	191, 310, 192, 311, 312, 313, 446, 314, 447, 394,
	194, 395, 195, 196, 448, 198, 197, 449, 315, 396,
	199, 397, 450, 200, 451, 452, 201, 0, 202, 203,
	204, 206, 316, 205, 398, 207, 208, 210, 209, 453,
	454, 455, 317, 211, 318, 212, 213, 456, 214, 457,
	458, 215, 459, 460, 216, 319, 399, 217, 400, 320,
	218, 219, 220, 221, 461, 321, 222, 322, 223, 462,
	224, 225, 226, 323, 227, 228, 463, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 464, 240,
	401, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	465, 325, 251, 252, 466, 253, 244, 245, 254, 402,
	255, 326, 327, 256, 467, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 468, 263, 469, 264, 265, 266,
	267, 268, 470, 330, 331, 332, 471, 472, 269, 333,
	334, 473, 270, 271, 272, 273, 474, 475, 274, 275,
	276, 476, 277, 477, 335, 278, 279, 280, 336, 337,
	478, 479, 281, 480, 481, 482, 483, 282, 283, 284,
	285, 0, 0, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2212,
	150, 151, 403, 152, 404, 405, 406, 407, 286, 408,
	409, 410, 411, 153, 154, 155, 287, 288, 289, 290,
	156, 291, 292, 412, 157, 293, 294, 158, 413, 414,
	295, 296, 297, 415, 159, 298, 416, 389, 417, 160,
	161, 162, 0, 163, 418, 164, 165, 166, 419, 390,
	167, 168, 420, 421, 422, 423, 424, 425, 169, 170,
	342, 171, 299, 172, 300, 301, 426, 173, 427, 174,
	428, 429, 430, 175, 176, 431, 177, 432, 0, 433,
	302, 178, 179, 180, 303, 304, 434, 435, 436, 181,
	182, 305, 0, 183, 437, 184, 438, 439, 391, 440,
	185, 306, 441, 307, 442, 186, 187, 188, 189, 308,
	309, 393, 443, 193, 444, 190, 445, 392, 191, 310,
	192, 311, 312, 313, 446, 314, 447, 394, 194, 395,
	195, 196, 448, 198, 197, 449, 315, 396, 199, 397,
	450, 200, 451, 452, 201, 0, 202, 203, 204, 206,
	316, 205, 398, 207, 208, 210, 209, 453, 454, 455,
	317, 211, 318, 212, 213, 456, 214, 457, 458, 215,
	459, 460, 216, 319, 399, 217, 400, 320, 218, 219,
	220, 221, 461, 321, 222, 322, 223, 462, 224, 225,
	226, 323, 227, 228, 463, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 464, 240, 401, 241,
	242, 324, 243, 0, 247, 248, 249, 250, 465, 325,
	251, 252, 466, 253, 244, 245, 254, 402, 255, 326,
	327, 256, 467, 262, 257, 258, 246, 259, 261, 328,
	260, 329, 468, 263, 469, 264, 265, 266, 267, 268,
	470, 330, 331, 332, 471, 472, 269, 333, 334, 473,
	270, 271, 272, 273, 474, 475, 274, 275, 276, 476,
	277, 477, 335, 278, 279, 280, 336, 337, 478, 479,
	281, 480, 481, 482, 483, 282, 283, 284, 285, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 0, 0, 0, 150, 151, 403, 152,
	404, 405, 406, 407, 286, 408, 409, 410, 411, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 412,
	157, 293, 294, 158, 413, 414, 295, 296, 297, 415,
	159, 298, 416, 389, 417, 160, 161, 162, 0, 163,
	418, 164, 165, 166, 419, 390, 167, 168, 420, 421,
	422, 423, 424, 425, 169, 170, 342, 171, 299, 172,
	300, 301, 426, 173, 427, 174, 428, 429, 430, 175,
	176, 431, 177, 432, 0, 433, 302, 178, 179, 180,
	303, 304, 434, 435, 436, 181, 182, 305, 0, 183,
	437, 184, 438, 439, 391, 440, 185, 306, 441, 307,
	442, 186, 187, 188, 189, 308, 309, 393, 443, 193,
	444, 190, 445, 392, 191, 310, 192, 311, 312, 313,
	446, 314, 447, 394, 194, 395, 195, 196, 448, 198,
	197, 449, 315, 396, 199, 397, 450, 200, 451, 452,
	201, 0, 202, 203, 204, 206, 316, 205, 398, 207,
	208, 210, 209, 453, 454, 455, 317, 211, 318, 212,
	213, 456, 214, 457, 458, 215, 459, 460, 216, 319,
	399, 217, 400, 320, 218, 219, 220, 221, 461, 321,
	222, 322, 223, 462, 224, 225, 226, 323, 227, 228,
	463, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 464, 240, 401, 241, 242, 324, 243, 0,
	247, 248, 249, 250, 465, 325, 251, 252, 466, 253,
	244, 245, 254, 402, 255, 326, 327, 256, 467, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 468, 263,
	469, 264, 265, 266, 267, 268, 470, 330, 331, 332,
	471, 472, 269, 333, 334, 473, 270, 271, 272, 273,
	474, 475, 274, 275, 276, 476, 277, 477, 335, 278,
	279, 280, 336, 337, 478, 479, 281, 480, 481, 482,
	483, 282, 283, 284, 285, 1446, 0, 828, 817, 818,
	815, 816, 807, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 151, 1450, 152, 0, 0,
	0, 0, 844, 810, 0, 0, 0, 153, 154, 155,
	287, 859, 289, 860, 156, 861, 862, 0, 157, 293,
	294, 158, 813, 843, 863, 864, 297, 0, 159, 855,
	0, 836, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 390, 167, 168, 0, 837, 839, 0,
	838, 840, 169, 170, 342, 171, 865, 172, 866, 867,
	0, 173, 0, 174, 0, 1451, 0, 858, 176, 0,
	177, 0, 0, 0, 801, 178, 179, 180, 845, 846,
	824, 0, 0, 181, 182, 868, 0, 183, 0, 184,
	0, 0, 391, 0, 185, 856, 0, 307, 0, 186,
	187, 188, 189, 852, 854, 393, 0, 193, 0, 190,
	0, 392, 191, 869, 192, 870, 871, 872, 0, 835,
	0, 394, 194, 395, 195, 196, 0, 198, 197, 0,
	857, 396, 199, 397, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 398, 207, 208, 210,
	209, 796, 0, 825, 853, 211, 873, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 399, 217,
	400, 847, 218, 219, 220, 221, 0, 848, 222, 322,
	223, 0, 224, 225, 226, 874, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 401, 241, 242, 802, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 841, 253, 244, 245,
	254, 402, 255, 875, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 876, 260, 849, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 877, 878, 0, 0,
	269, 850, 851, 823, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 842, 277, 0, 335, 278, 279, 280,
	336, 879, 1449, 0, 281, 0, 0, 0, 0, 282,
	283, 284, 285, 797, 0, 0, 0, 0, 0, 795,
	0, 0, 0, 0, 793, 794, 1452, 828, 817, 818,
	815, 816, 807, 803, 1447, 0, 0, 0, 806, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 0,
	0, 0, 844, 810, 0, 0, 0, 153, 154, 155,
	287, 859, 289, 860, 156, 861, 862, 0, 157, 293,
	294, 158, 813, 843, 863, 864, 297, 0, 159, 855,
	0, 836, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 390, 167, 168, 0, 837, 839, 0,
	838, 840, 169, 170, 342, 171, 865, 172, 866, 867,
	891, 173, 0, 174, 0, 0, 0, 858, 176, 0,
	177, 0, 0, 0, 801, 178, 179, 180, 845, 846,
	824, 0, 0, 181, 182, 868, 0, 183, 0, 184,
	0, 0, 391, 0, 185, 856, 0, 307, 0, 186,
	187, 188, 189, 852, 854, 393, 0, 193, 0, 190,
	0, 392, 191, 869, 192, 870, 871, 872, 0, 835,
	0, 394, 194, 395, 195, 196, 0, 198, 197, 0,
	857, 396, 199, 397, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 398, 207, 208, 210,
	209, 796, 0, 825, 853, 211, 873, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 399, 217,
	400, 847, 218, 219, 220, 221, 0, 848, 222, 322,
	223, 0, 224, 225, 226, 874, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 401, 241, 242, 802, 243, 0, 247, 248,
	249, 250, 108, 325, 251, 252, 841, 253, 244, 245,
	254, 402, 255, 875, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 876, 260, 849, 0, 263, 112, 264,
	265, 266, 267, 268, 0, 330, 877, 878, 0, 0,
	269, 850, 851, 823, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 842, 277, 0, 335, 278, 279, 280,
	688, 879, 0, 0, 281, 0, 0, 0, 105, 282,
	283, 284, 285, 797, 106, 0, 0, 0, 0, 795,
	0, 0, 0, 0, 793, 794, 828, 817, 818, 815,
	816, 807, 0, 803, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 150, 151, 0, 152, 0, 0, 0,
	0, 844, 810, 0, 0, 0, 153, 154, 155, 287,
	859, 289, 860, 156, 861, 862, 0, 157, 293, 294,
	158, 813, 843, 863, 864, 297, 0, 159, 855, 0,
	836, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 390, 167, 168, 0, 837, 839, 0, 838,
	840, 169, 170, 342, 171, 865, 172, 866, 867, 0,
	173, 0, 174, 0, 0, 0, 858, 176, 0, 177,
	0, 0, 0, 801, 178, 179, 180, 845, 846, 824,
	0, 0, 181, 182, 868, 0, 183, 0, 184, 0,
	0, 391, 0, 185, 856, 0, 307, 0, 186, 187,
	188, 189, 852, 854, 393, 0, 193, 0, 190, 0,
	392, 191, 869, 192, 870, 871, 872, 0, 835, 0,
	394, 194, 395, 195, 196, 0, 198, 197, 0, 857,
	396, 199, 397, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 398, 207, 208, 210, 209,
	796, 0, 825, 853, 211, 873, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 399, 217, 400,
	847, 218, 219, 220, 221, 0, 848, 222, 322, 223,
	0, 224, 225, 226, 874, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 401, 241, 242, 802, 243, 0, 247, 248, 249,
	250, 108, 325, 251, 252, 841, 253, 244, 245, 254,
	402, 255, 875, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 876, 260, 849, 0, 263, 112, 264, 265,
	266, 267, 268, 0, 330, 877, 878, 0, 0, 269,
	850, 851, 823, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 842, 277, 0, 335, 278, 279, 280, 688,
	879, 0, 0, 281, 0, 0, 0, 105, 282, 283,
	284, 285, 797, 106, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 793, 794, 828, 817, 818, 815, 816,
	807, 0, 803, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 0,
	844, 810, 0, 0, 0, 153, 154, 155, 287, 859,
	289, 860, 156, 861, 862, 1495, 157, 293, 294, 158,
	813, 843, 863, 864, 297, 0, 159, 855, 0, 836,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 390, 167, 168, 0, 837, 839, 0, 838, 840,
	169, 170, 342, 171, 865, 172, 866, 867, 0, 173,
	0, 174, 0, 0, 0, 858, 176, 0, 177, 0,
	0, 0, 801, 178, 179, 180, 845, 846, 824, 0,
	0, 181, 182, 868, 0, 183, 0, 184, 0, 1500,
	391, 0, 185, 856, 0, 307, 0, 186, 187, 188,
	189, 852, 854, 393, 0, 193, 0, 190, 0, 392,
	191, 869, 192, 870, 871, 872, 0, 835, 0, 394,
	194, 395, 195, 196, 0, 198, 197, 1496, 857, 396,
	199, 397, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 398, 207, 208, 210, 209, 796,
	0, 825, 853, 211, 873, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 399, 217, 400, 847,
	218, 219, 220, 221, 0, 848, 222, 322, 223, 0,
	224, 225, 226, 874, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	401, 241, 242, 802, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 841, 253, 244, 245, 254, 402,
	255, 875, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 876, 260, 849, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 877, 878, 0, 1497, 269, 850,
	851, 823, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 842, 277, 0, 335, 278, 279, 280, 336, 879,
	0, 0, 281, 0, 0, 0, 0, 282, 283, 284,
	285, 797, 0, 0, 0, 0, 0, 795, 0, 0,
	0, 0, 793, 794, 828, 817, 818, 815, 816, 807,
	0, 803, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 150, 151, 0, 152, 0, 0, 0, 0, 844,
	810, 0, 0, 0, 153, 154, 155, 287, 859, 289,
	860, 156, 861, 862, 0, 157, 293, 294, 158, 813,
	843, 863, 864, 297, 0, 159, 855, 0, 836, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	390, 167, 168, 0, 837, 839, 0, 838, 840, 169,
	170, 342, 171, 865, 172, 866, 867, 0, 173, 0,
	174, 0, 0, 0, 858, 176, 0, 177, 0, 0,
	0, 801, 178, 179, 180, 845, 846, 824, 0, 0,
	181, 182, 868, 0, 183, 0, 184, 0, 0, 391,
	0, 185, 856, 0, 307, 0, 186, 187, 188, 189,
	852, 854, 393, 0, 193, 0, 190, 0, 392, 191,
	869, 192, 870, 871, 872, 0, 835, 0, 394, 194,
	395, 195, 196, 0, 198, 197, 0, 857, 396, 199,
	397, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 398, 207, 208, 210, 209, 796, 1810,
	825, 853, 211, 873, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 399, 217, 400, 847, 218,
	219, 220, 221, 0, 848, 222, 322, 223, 0, 224,
	225, 226, 874, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 401,
	241, 242, 802, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 841, 253, 244, 245, 254, 402, 255,
	875, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	876, 260, 849, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 877, 878, 0, 0, 269, 850, 851,
	823, 270, 271, 272, 273, 0, 0, 274, 275, 276,
	842, 277, 0, 335, 278, 279, 280, 336, 879, 0,
	0, 281, 0, 0, 0, 0, 282, 283, 284, 285,
	797, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 793, 794, 791, 828, 817, 818, 815, 816, 807,
	803, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 150, 151, 0, 152, 0, 0, 0, 0, 844,
	810, 0, 0, 0, 153, 154, 155, 287, 859, 289,
	860, 156, 861, 862, 0, 157, 293, 294, 158, 813,
	843, 863, 864, 297, 0, 159, 855, 0, 836, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	390, 167, 168, 0, 837, 839, 0, 838, 840, 169,
	170, 342, 171, 865, 172, 866, 867, 0, 173, 0,
	174, 0, 0, 0, 858, 176, 0, 177, 0, 0,
	0, 801, 178, 179, 180, 845, 846, 824, 0, 0,
	181, 182, 868, 0, 183, 0, 184, 0, 0, 391,
	0, 185, 856, 0, 307, 0, 186, 187, 188, 189,
	852, 854, 393, 0, 193, 0, 190, 0, 392, 191,
	869, 192, 870, 871, 872, 0, 835, 0, 394, 194,
	395, 195, 196, 0, 198, 197, 0, 857, 396, 199,
	397, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 398, 207, 208, 210, 209, 796, 0,
	825, 853, 211, 873, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 399, 217, 400, 847, 218,
	219, 220, 221, 0, 848, 222, 322, 223, 0, 224,
	225, 226, 874, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 401,
	241, 242, 802, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 841, 253, 244, 245, 254, 402, 255,
	875, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	876, 260, 849, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 877, 878, 0, 0, 269, 850, 851,
	823, 270, 271, 272, 273, 0, 0, 274, 275, 276,
	842, 277, 0, 335, 278, 279, 280, 336, 879, 0,
	0, 281, 0, 0, 0, 0, 282, 283, 284, 285,
	797, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 793, 794, 0, 0, 0, 0, 0, 1165, 1441,
	803, 0, 0, 0, 0, 806, 828, 817, 818, 815,
	816, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 151, 0, 152, 0, 0, 0,
	0, 844, 810, 0, 0, 0, 153, 154, 155, 287,
	859, 289, 860, 156, 861, 862, 0, 157, 293, 294,
	158, 813, 843, 863, 864, 297, 0, 159, 855, 0,
	836, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 390, 167, 168, 0, 837, 839, 0, 838,
	840, 169, 170, 342, 171, 865, 172, 866, 867, 0,
	173, 0, 174, 0, 0, 0, 858, 176, 0, 177,
	0, 0, 0, 801, 178, 179, 180, 845, 846, 824,
	0, 0, 181, 182, 868, 0, 183, 0, 184, 0,
	0, 391, 0, 185, 856, 0, 307, 0, 186, 187,
	188, 189, 852, 854, 393, 0, 193, 0, 190, 0,
	392, 191, 869, 192, 870, 871, 872, 0, 835, 0,
	394, 194, 395, 195, 196, 0, 198, 197, 0, 857,
	396, 199, 397, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 398, 207, 208, 210, 209,
	796, 0, 825, 853, 211, 873, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 399, 217, 400,
	847, 218, 219, 220, 221, 0, 848, 222, 322, 223,
	0, 224, 225, 226, 874, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 401, 241, 242, 802, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 841, 253, 244, 245, 254,
	402, 255, 875, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 876, 260, 849, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 877, 878, 0, 0, 269,
	850, 851, 823, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 842, 277, 0, 335, 278, 279, 280, 336,
	879, 0, 0, 281, 0, 0, 0, 0, 282, 283,
	284, 285, 797, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 793, 794, 828, 817, 818, 815, 816,
	807, 0, 803, 1931, 0, 0, 0, 806, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 0,
	844, 810, 0, 0, 0, 153, 154, 155, 287, 859,
	289, 860, 156, 861, 862, 0, 157, 293, 294, 158,
	813, 843, 863, 864, 297, 0, 159, 855, 0, 836,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 390, 167, 168, 0, 837, 839, 0, 838, 840,
	169, 170, 342, 171, 865, 172, 866, 867, 0, 173,
	0, 174, 0, 0, 0, 858, 176, 0, 177, 0,
	0, 0, 801, 178, 179, 180, 845, 846, 824, 0,
	0, 181, 182, 868, 0, 183, 0, 184, 0, 0,
	391, 0, 185, 856, 0, 307, 0, 186, 187, 188,
	189, 852, 854, 393, 0, 193, 0, 190, 0, 392,
	191, 869, 192, 870, 871, 872, 0, 835, 0, 394,
	194, 395, 195, 196, 0, 198, 197, 0, 857, 396,
	199, 397, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 398, 207, 208, 210, 209, 796,
	0, 825, 853, 211, 873, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 399, 217, 400, 847,
	218, 219, 220, 221, 0, 848, 222, 322, 223, 0,
	224, 225, 226, 874, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	401, 241, 242, 802, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 841, 253, 244, 245, 254, 402,
	255, 875, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 876, 260, 849, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 877, 878, 0, 0, 269, 850,
	851, 823, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 842, 277, 0, 335, 278, 279, 280, 336, 879,
	1888, 0, 281, 0, 0, 0, 0, 282, 283, 284,
	285, 797, 0, 0, 0, 0, 0, 795, 0, 0,
	0, 0, 793, 794, 828, 817, 818, 815, 816, 807,
	0, 803, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 150, 151, 0, 152, 0, 0, 0, 0, 844,
	810, 0, 0, 0, 153, 154, 155, 287, 859, 289,
	860, 156, 861, 862, 0, 157, 293, 294, 158, 813,
	843, 863, 864, 297, 0, 159, 855, 0, 836, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	390, 167, 168, 0, 837, 839, 0, 838, 840, 169,
	170, 342, 171, 865, 172, 866, 867, 0, 173, 0,
	174, 0, 0, 0, 858, 176, 0, 177, 0, 0,
	0, 801, 178, 179, 180, 845, 846, 824, 0, 0,
	181, 182, 868, 0, 183, 0, 184, 0, 0, 391,
	0, 185, 856, 0, 307, 0, 186, 187, 188, 189,
	852, 854, 393, 0, 193, 0, 190, 0, 392, 191,
	869, 192, 870, 871, 872, 0, 835, 0, 394, 194,
	395, 195, 196, 0, 198, 197, 0, 857, 396, 199,
	397, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 398, 207, 208, 210, 209, 796, 0,
	825, 853, 211, 873, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 399, 217, 400, 847, 218,
	219, 220, 221, 0, 848, 222, 322, 223, 0, 224,
	225, 226, 874, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 401,
	241, 242, 802, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 841, 253, 244, 245, 254, 402, 255,
	875, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	876, 260, 849, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 877, 878, 0, 0, 269, 850, 851,
	823, 270, 271, 272, 273, 0, 0, 274, 275, 276,
	842, 277, 0, 335, 278, 279, 280, 336, 879, 0,
	0, 281, 0, 0, 0, 0, 282, 283, 284, 285,
	797, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 793, 794, 0, 0, 0, 0, 0, 0, 0,
	803, 1878, 0, 0, 1859, 806, 828, 817, 818, 815,
	816, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 151, 0, 152, 0, 0, 0,
	0, 844, 810, 0, 0, 0, 153, 154, 155, 287,
	859, 289, 860, 156, 861, 862, 0, 157, 293, 294,
	158, 813, 843, 863, 864, 297, 0, 159, 855, 0,
	836, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 390, 167, 168, 0, 837, 839, 0, 838,
	840, 169, 170, 342, 171, 865, 172, 866, 867, 0,
	173, 0, 174, 0, 0, 0, 858, 176, 0, 177,
	0, 0, 0, 801, 178, 179, 180, 845, 846, 824,
	0, 0, 181, 182, 868, 0, 183, 0, 184, 0,
	0, 391, 0, 185, 856, 0, 307, 0, 186, 187,
	188, 189, 852, 854, 393, 0, 193, 0, 190, 0,
	392, 191, 869, 192, 870, 871, 872, 0, 835, 0,
	394, 194, 395, 195, 196, 0, 198, 197, 0, 857,
	396, 199, 397, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 398, 207, 208, 210, 209,
	796, 0, 825, 853, 211, 873, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 399, 217, 400,
	847, 218, 219, 220, 221, 0, 848, 222, 322, 223,
	0, 224, 225, 226, 874, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 401, 241, 242, 802, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 841, 253, 244, 245, 254,
	402, 255, 875, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 876, 260, 849, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 877, 878, 0, 0, 269,
	850, 851, 823, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 842, 277, 0, 335, 278, 279, 280, 336,
	879, 0, 0, 281, 0, 0, 0, 0, 282, 283,
	284, 285, 797, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 793, 794, 828, 817, 818, 815, 816,
	807, 0, 803, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 0,
	844, 810, 0, 0, 0, 153, 154, 155, 287, 859,
	289, 860, 156, 861, 862, 0, 157, 293, 294, 158,
	813, 843, 863, 864, 297, 0, 159, 855, 0, 836,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 390, 167, 168, 0, 837, 839, 0, 838, 840,
	169, 170, 342, 171, 865, 172, 866, 867, 891, 173,
	0, 174, 0, 0, 0, 858, 176, 0, 177, 0,
	0, 0, 801, 178, 179, 180, 845, 846, 824, 0,
	0, 181, 182, 868, 0, 183, 0, 184, 0, 0,
	391, 0, 185, 856, 0, 307, 0, 186, 187, 188,
	189, 852, 854, 393, 0, 193, 0, 190, 0, 392,
	191, 869, 192, 870, 871, 872, 0, 835, 0, 394,
	194, 395, 195, 196, 0, 198, 197, 0, 857, 396,
	199, 397, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 398, 207, 208, 210, 209, 796,
	0, 825, 853, 211, 873, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 399, 217, 400, 847,
	218, 219, 220, 221, 0, 848, 222, 322, 223, 0,
	224, 225, 226, 874, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	401, 241, 242, 802, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 841, 253, 244, 245, 254, 402,
	255, 875, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 876, 260, 849, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 877, 878, 0, 0, 269, 850,
	851, 823, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 842, 277, 0, 335, 278, 279, 280, 336, 879,
	0, 0, 281, 0, 0, 0, 0, 282, 283, 284,
	285, 797, 0, 0, 0, 0, 0, 795, 0, 0,
	0, 0, 793, 794, 828, 817, 818, 815, 816, 807,
	0, 803, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 150, 151, 0, 152, 0, 0, 0, 0, 844,
	810, 0, 0, 0, 153, 154, 155, 287, 859, 289,
	860, 156, 861, 862, 0, 157, 293, 294, 158, 813,
	843, 863, 864, 297, 0, 159, 855, 0, 836, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	390, 167, 168, 0, 837, 839, 0, 838, 840, 169,
	170, 342, 171, 865, 172, 866, 867, 0, 173, 0,
	174, 0, 0, 0, 858, 176, 0, 177, 0, 0,
	0, 801, 178, 179, 180, 845, 846, 824, 0, 0,
	181, 182, 868, 0, 183, 0, 184, 0, 1500, 391,
	0, 185, 856, 0, 307, 0, 186, 187, 188, 189,
	852, 854, 393, 0, 193, 0, 190, 0, 392, 191,
	869, 192, 870, 871, 872, 0, 835, 0, 394, 194,
	395, 195, 196, 0, 198, 197, 0, 857, 396, 199,
	397, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 398, 207, 208, 210, 209, 796, 0,
	825, 853, 211, 873, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 399, 217, 400, 847, 218,
	219, 220, 221, 0, 848, 222, 322, 223, 0, 224,
	225, 226, 874, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 401,
	241, 242, 802, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 841, 253, 244, 245, 254, 402, 255,
	875, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	876, 260, 849, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 877, 878, 0, 0, 269, 850, 851,
	823, 270, 271, 272, 273, 0, 0, 274, 275, 276,
	842, 277, 0, 335, 278, 279, 280, 336, 879, 0,
	0, 281, 0, 0, 0, 0, 282, 283, 284, 285,
	797, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 793, 794, 0, 0, 0, 0, 0, 0, 0,
	803, 0, 0, 0, 1509, 806, 828, 817, 818, 815,
	816, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 151, 0, 152, 0, 0, 0,
	0, 844, 810, 0, 0, 0, 153, 154, 155, 287,
	859, 289, 860, 156, 861, 862, 0, 157, 293, 294,
	158, 813, 843, 863, 864, 297, 0, 159, 855, 0,
	836, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 390, 167, 168, 0, 837, 839, 0, 838,
	840, 169, 170, 342, 171, 865, 172, 866, 867, 0,
	173, 0, 174, 0, 0, 0, 858, 176, 0, 177,
	0, 0, 0, 801, 178, 179, 180, 845, 846, 824,
	0, 0, 181, 182, 868, 0, 183, 0, 184, 0,
	0, 391, 0, 185, 856, 0, 307, 0, 186, 187,
	188, 189, 852, 854, 393, 0, 193, 0, 190, 0,
	392, 191, 869, 192, 870, 871, 872, 0, 835, 0,
	394, 194, 395, 195, 196, 0, 198, 197, 0, 857,
	396, 199, 397, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 398, 207, 208, 210, 209,
	796, 0, 825, 853, 211, 873, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 399, 217, 400,
	847, 218, 219, 220, 221, 0, 848, 222, 322, 223,
	0, 224, 225, 226, 874, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 401, 241, 242, 802, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 841, 253, 244, 245, 254,
	402, 255, 875, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 876, 260, 849, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 877, 878, 0, 0, 269,
	850, 851, 823, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 842, 277, 0, 335, 278, 279, 280, 336,
	879, 0, 0, 281, 0, 0, 0, 0, 282, 283,
	284, 285, 797, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 793, 794, 0, 0, 0, 0, 0,
	0, 0, 803, 0, 0, 0, 1507, 806, 828, 817,
	818, 815, 816, 807, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 151, 0, 152, 0,
	0, 0, 0, 844, 810, 0, 0, 0, 153, 154,
	155, 287, 859, 289, 860, 156, 861, 862, 0, 157,
	293, 294, 158, 813, 843, 863, 864, 297, 0, 159,
	855, 0, 836, 0, 160, 161, 162, 0, 163, 0,
	164, 165, 166, 0, 390, 167, 168, 0, 837, 839,
	0, 838, 840, 169, 170, 342, 171, 865, 172, 866,
	867, 0, 173, 0, 174, 0, 0, 0, 858, 176,
	0, 177, 0, 0, 0, 801, 178, 179, 180, 845,
	846, 824, 0, 0, 181, 182, 868, 0, 183, 0,
	184, 0, 0, 391, 0, 185, 856, 0, 307, 0,
	186, 187, 188, 189, 852, 854, 393, 0, 193, 0,
	190, 0, 392, 191, 869, 192, 870, 871, 872, 0,
	835, 0, 394, 194, 395, 195, 196, 0, 198, 197,
	0, 857, 396, 199, 397, 0, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 316, 205, 398, 207, 208,
	210, 209, 796, 0, 825, 853, 211, 873, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 319, 399,
	217, 400, 847, 218, 219, 220, 221, 0, 848, 222,
	322, 223, 0, 224, 225, 226, 874, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 0, 240, 401, 241, 242, 802, 243, 0, 247,
	248, 249, 250, 0, 325, 251, 252, 841, 253, 244,
	245, 254, 402, 255, 875, 327, 256, 0, 262, 257,
	258, 246, 259, 261, 876, 260, 849, 0, 263, 0,
	264, 265, 266, 267, 268, 0, 330, 877, 878, 0,
	0, 269, 850, 851, 823, 270, 271, 272, 273, 0,
	0, 274, 275, 276, 842, 277, 0, 335, 278, 279,
	280, 336, 879, 0, 0, 281, 0, 0, 0, 0,
	282, 283, 284, 285, 797, 0, 0, 0, 0, 0,
	795, 0, 0, 0, 0, 793, 794, 0, 0, 0,
	0, 0, 0, 0, 803, 0, 0, 0, 1491, 806,
	828, 817, 818, 815, 816, 807, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 151, 0,
	152, 0, 0, 0, 0, 844, 810, 0, 0, 0,
	153, 154, 155, 287, 859, 289, 860, 156, 861, 862,
	0, 157, 293, 294, 158, 813, 843, 863, 864, 297,
	0, 159, 855, 0, 836, 0, 160, 161, 162, 0,
	163, 0, 164, 165, 166, 0, 390, 167, 168, 0,
	837, 839, 0, 838, 840, 169, 170, 342, 171, 865,
	172, 866, 867, 0, 173, 0, 174, 0, 0, 0,
	858, 176, 0, 177, 0, 0, 0, 801, 178, 179,
	180, 845, 846, 824, 0, 0, 181, 182, 868, 0,
	183, 0, 184, 0, 0, 391, 0, 185, 856, 0,
	307, 0, 186, 187, 188, 189, 852, 854, 393, 0,
	193, 0, 190, 0, 392, 191, 869, 192, 870, 871,
	872, 0, 835, 0, 394, 194, 395, 195, 196, 0,
	198, 197, 0, 857, 396, 199, 397, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 316, 205, 398,
	207, 208, 210, 209, 796, 0, 825, 853, 211, 873,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	319, 399, 217, 400, 847, 218, 219, 220, 221, 0,
	848, 222, 322, 223, 0, 224, 225, 226, 874, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 0, 240, 401, 241, 242, 802, 243,
	0, 247, 248, 249, 250, 0, 325, 251, 252, 841,
	253, 244, 245, 254, 402, 255, 875, 327, 256, 0,
	262, 257, 258, 246, 259, 261, 876, 260, 849, 0,
	263, 0, 264, 265, 266, 267, 268, 0, 330, 877,
	878, 0, 0, 269, 850, 851, 823, 270, 271, 272,
	273, 0, 0, 274, 275, 276, 842, 277, 0, 335,
	278, 279, 280, 336, 879, 0, 0, 281, 0, 0,
	0, 0, 282, 283, 284, 285, 797, 0, 0, 0,
	0, 0, 795, 0, 0, 0, 0, 793, 794, 0,
	0, 0, 0, 0, 0, 0, 803, 0, 0, 0,
	1479, 806, 828, 817, 818, 815, 816, 807, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	151, 0, 152, 0, 0, 0, 0, 844, 810, 0,
	0, 0, 153, 154, 155, 287, 859, 289, 860, 156,
	861, 862, 0, 157, 293, 294, 158, 813, 843, 863,
	864, 297, 0, 159, 855, 0, 836, 0, 160, 161,
	162, 0, 163, 0, 164, 165, 166, 0, 390, 167,
	168, 0, 837, 839, 0, 838, 840, 169, 170, 342,
	171, 865, 172, 866, 867, 0, 173, 0, 174, 0,
	0, 0, 858, 176, 0, 177, 0, 0, 0, 801,
	178, 179, 180, 845, 846, 824, 0, 0, 181, 182,
	868, 0, 183, 0, 184, 0, 0, 391, 0, 185,
	856, 0, 307, 0, 186, 187, 188, 189, 852, 854,
	393, 0, 193, 0, 190, 0, 392, 191, 869, 192,
	870, 871, 872, 0, 835, 0, 394, 194, 395, 195,
	196, 0, 198, 197, 0, 857, 396, 199, 397, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 316,
	205, 398, 207, 208, 210, 209, 796, 0, 825, 853,
	211, 873, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 319, 399, 217, 400, 847, 218, 219, 220,
	221, 0, 848, 222, 322, 223, 0, 224, 225, 226,
	874, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 0, 240, 401, 241, 242,
	802, 243, 0, 247, 248, 249, 250, 0, 325, 251,
	252, 841, 253, 244, 245, 254, 402, 255, 875, 327,
	256, 0, 262, 257, 258, 246, 259, 261, 876, 260,
	849, 0, 263, 0, 264, 265, 266, 267, 268, 0,
	330, 877, 878, 0, 0, 269, 850, 851, 823, 270,
	271, 272, 273, 0, 0, 274, 275, 276, 842, 277,
	0, 335, 278, 279, 280, 336, 879, 0, 0, 281,
	0, 0, 0, 0, 282, 283, 284, 285, 797, 0,
	0, 0, 0, 0, 795, 0, 0, 0, 0, 793,
	794, 0, 0, 0, 0, 0, 0, 0, 803, 0,
	0, 0, 1477, 806, 1469, 817, 818, 815, 816, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 151, 0, 152, 0, 0, 0, 0, 844,
	810, 0, 0, 0, 153, 154, 155, 287, 859, 289,
	860, 156, 861, 862, 0, 157, 293, 294, 158, 813,
	843, 863, 864, 297, 0, 159, 855, 0, 836, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	390, 167, 168, 0, 837, 839, 0, 838, 840, 169,
	170, 342, 171, 865, 1472, 866, 867, 0, 173, 0,
	174, 0, 0, 0, 858, 176, 0, 177, 0, 0,
	0, 801, 178, 179, 180, 845, 846, 824, 0, 0,
	181, 182, 868, 0, 183, 0, 184, 0, 0, 391,
	0, 185, 856, 0, 307, 0, 186, 187, 1473, 189,
	852, 854, 393, 0, 193, 0, 190, 0, 392, 191,
	869, 192, 870, 871, 872, 0, 835, 0, 394, 194,
	395, 195, 196, 0, 198, 197, 0, 857, 396, 199,
	397, 0, 200, 0, 0, 201, 0, 202, 1474, 1471,
	206, 316, 205, 398, 207, 208, 210, 209, 796, 0,
	825, 853, 211, 873, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 399, 217, 400, 847, 218,
	219, 220, 221, 0, 848, 222, 322, 223, 0, 224,
	225, 226, 874, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 401,
	241, 242, 802, 243, 0, 247, 248, 249, 1475, 0,
	325, 251, 252, 841, 253, 244, 245, 254, 402, 255,
	875, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	876, 260, 849, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 877, 878, 0, 0, 269, 850, 851,
	823, 270, 271, 272, 273, 0, 0, 274, 275, 276,
	842, 277, 0, 335, 278, 279, 280, 336, 879, 0,
	0, 281, 0, 0, 0, 0, 282, 283, 1470, 285,
	797, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 793, 794, 0, 0, 0, 0, 0, 0, 0,
	803, 0, 0, 0, 1466, 806, 1469, 817, 818, 815,
	816, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 151, 0, 152, 0, 0, 0,
	0, 844, 810, 0, 0, 0, 153, 154, 155, 287,
	859, 289, 860, 156, 861, 862, 0, 157, 293, 294,
	158, 813, 843, 863, 864, 297, 0, 159, 855, 0,
	836, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 390, 167, 168, 0, 837, 839, 0, 838,
	840, 169, 170, 342, 171, 865, 1472, 866, 867, 0,
	173, 0, 174, 0, 0, 0, 858, 176, 0, 177,
	0, 0, 0, 801, 178, 179, 180, 845, 846, 824,
	0, 0, 181, 182, 868, 0, 183, 0, 184, 0,
	0, 391, 0, 185, 856, 0, 307, 0, 186, 187,
	1473, 189, 852, 854, 393, 0, 193, 0, 190, 0,
	392, 191, 869, 192, 870, 871, 872, 0, 835, 0,
	394, 194, 395, 195, 196, 0, 198, 197, 0, 857,
	396, 199, 397, 0, 200, 0, 0, 201, 0, 202,
	1474, 1471, 206, 316, 205, 398, 207, 208, 210, 209,
	796, 0, 825, 853, 211, 873, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 399, 217, 400,
	847, 218, 219, 220, 221, 0, 848, 222, 322, 223,
	0, 224, 225, 226, 874, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 401, 241, 242, 802, 243, 0, 247, 248, 249,
	1475, 0, 325, 251, 252, 841, 253, 244, 245, 254,
	402, 255, 875, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 876, 260, 849, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 877, 878, 0, 0, 269,
	850, 851, 823, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 842, 277, 0, 335, 278, 279, 280, 336,
	879, 0, 0, 281, 0, 0, 0, 0, 282, 283,
	1470, 285, 797, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 793, 794, 828, 817, 818, 815, 816,
	807, 0, 803, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 0,
	844, 810, 0, 0, 0, 153, 154, 155, 287, 859,
	289, 860, 156, 861, 862, 0, 157, 293, 294, 158,
	813, 843, 863, 864, 297, 0, 159, 855, 0, 836,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 390, 167, 168, 0, 837, 839, 0, 838, 840,
	169, 170, 342, 171, 865, 172, 866, 867, 0, 173,
	0, 174, 0, 0, 0, 858, 176, 0, 177, 0,
	0, 0, 801, 178, 179, 180, 845, 846, 824, 0,
	0, 181, 182, 868, 0, 183, 0, 184, 0, 0,
	391, 0, 185, 856, 0, 307, 0, 186, 187, 188,
	189, 852, 854, 393, 0, 193, 0, 190, 0, 392,
	191, 869, 192, 870, 871, 872, 0, 835, 0, 394,
	194, 395, 195, 196, 0, 198, 197, 0, 857, 396,
	199, 397, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 398, 207, 208, 210, 209, 796,
	0, 825, 853, 211, 873, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 399, 217, 400, 847,
	218, 219, 220, 221, 0, 848, 222, 322, 223, 0,
	224, 225, 226, 874, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	401, 241, 242, 802, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 841, 253, 244, 245, 254, 402,
	255, 875, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 876, 260, 849, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 877, 878, 0, 0, 269, 850,
	851, 823, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 842, 277, 0, 335, 278, 279, 280, 336, 879,
	0, 0, 281, 0, 0, 0, 0, 282, 283, 284,
	285, 797, 0, 0, 0, 0, 0, 795, 0, 0,
	0, 0, 793, 794, 828, 817, 818, 815, 816, 807,
	0, 803, 1436, 0, 0, 0, 806, 0, 0, 0,
	0, 150, 151, 0, 152, 0, 0, 0, 0, 844,
	810, 0, 0, 0, 153, 154, 155, 287, 859, 289,
	860, 156, 861, 862, 0, 157, 293, 294, 158, 813,
	843, 863, 864, 297, 0, 159, 855, 0, 836, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	390, 167, 168, 0, 837, 839, 0, 838, 840, 169,
	170, 342, 171, 865, 172, 866, 867, 0, 173, 0,
	174, 0, 0, 0, 858, 176, 0, 177, 0, 0,
	0, 801, 178, 179, 180, 845, 846, 824, 0, 0,
	181, 182, 868, 0, 183, 0, 184, 0, 0, 391,
	0, 185, 856, 0, 307, 0, 186, 187, 188, 189,
	852, 854, 393, 0, 193, 0, 190, 0, 392, 191,
	869, 192, 870, 871, 872, 0, 835, 0, 394, 194,
	395, 195, 196, 0, 198, 197, 0, 857, 396, 199,
	397, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 398, 207, 208, 210, 209, 796, 0,
	825, 853, 211, 873, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 399, 217, 400, 847, 218,
	219, 220, 221, 0, 848, 222, 322, 223, 0, 224,
	225, 226, 874, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 401,
	241, 242, 802, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 841, 253, 244, 245, 254, 402, 255,
	875, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	876, 260, 849, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 877, 878, 0, 0, 269, 850, 851,
	823, 270, 271, 272, 273, 0, 0, 274, 275, 276,
	842, 277, 0, 335, 278, 279, 280, 336, 879, 0,
	0, 281, 0, 0, 0, 0, 282, 283, 284, 285,
	797, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 793, 794, 791, 828, 817, 818, 815, 816, 807,
	803, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 150, 151, 1087, 152, 0, 0, 0, 0, 844,
	810, 0, 0, 0, 153, 154, 155, 287, 859, 289,
	860, 156, 861, 862, 0, 157, 293, 294, 158, 813,
	843, 863, 864, 297, 0, 159, 855, 0, 836, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	390, 167, 168, 0, 837, 839, 0, 838, 840, 169,
	170, 342, 171, 865, 172, 866, 867, 0, 173, 0,
	174, 0, 0, 0, 858, 176, 0, 177, 0, 0,
	0, 801, 178, 179, 180, 845, 846, 824, 0, 0,
	181, 182, 868, 0, 183, 0, 184, 0, 0, 391,
	0, 185, 856, 0, 307, 0, 186, 187, 188, 189,
	852, 854, 393, 0, 193, 0, 190, 0, 392, 191,
	869, 192, 870, 871, 872, 0, 835, 0, 394, 194,
	395, 195, 196, 0, 198, 197, 0, 857, 396, 199,
	397, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 398, 207, 208, 210, 209, 796, 0,
	825, 853, 211, 873, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 399, 217, 400, 847, 218,
	219, 220, 221, 0, 848, 222, 322, 223, 0, 224,
	225, 226, 874, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 401,
	241, 242, 802, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 841, 253, 244, 245, 254, 402, 255,
	875, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	876, 260, 849, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 877, 878, 0, 0, 269, 850, 851,
	823, 270, 271, 272, 273, 0, 0, 274, 275, 276,
	842, 277, 0, 335, 278, 279, 280, 336, 879, 0,
	0, 281, 0, 0, 0, 0, 282, 283, 284, 285,
	797, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 793, 794, 828, 817, 818, 815, 816, 807, 0,
	803, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	150, 151, 0, 152, 0, 0, 0, 0, 844, 810,
	0, 0, 0, 153, 154, 155, 287, 859, 289, 860,
	156, 861, 862, 0, 157, 293, 294, 158, 813, 843,
	863, 864, 297, 0, 159, 855, 0, 836, 0, 160,
	161, 162, 0, 163, 0, 164, 165, 166, 0, 390,
	167, 2286, 0, 837, 839, 0, 838, 840, 169, 170,
	342, 171, 865, 172, 866, 867, 0, 173, 0, 174,
	0, 0, 0, 858, 176, 0, 177, 0, 0, 0,
	801, 178, 179, 180, 845, 846, 824, 0, 0, 181,
	182, 868, 0, 183, 0, 184, 0, 0, 391, 0,
	185, 856, 0, 307, 0, 186, 187, 188, 189, 852,
	854, 393, 0, 193, 0, 190, 0, 392, 191, 869,
	192, 870, 871, 872, 0, 835, 0, 394, 194, 395,
	195, 196, 0, 198, 197, 0, 857, 396, 199, 397,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	316, 205, 398, 207, 208, 210, 209, 796, 0, 825,
	853, 211, 873, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 319, 399, 217, 400, 847, 218, 219,
	220, 221, 0, 848, 222, 322, 223, 0, 224, 225,
	226, 874, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 0, 240, 401, 241,
	242, 802, 243, 0, 247, 248, 249, 250, 0, 325,
	251, 252, 841, 253, 244, 245, 254, 402, 255, 875,
	327, 256, 0, 262, 257, 258, 246, 259, 261, 876,
	260, 849, 0, 263, 0, 264, 265, 266, 267, 268,
	0, 330, 877, 878, 0, 0, 269, 850, 851, 823,
	270, 271, 2285, 273, 0, 0, 274, 275, 276, 842,
	277, 0, 335, 278, 279, 280, 336, 879, 0, 0,
	281, 0, 0, 0, 0, 282, 283, 284, 285, 797,
	0, 0, 0, 0, 0, 795, 0, 0, 0, 0,
	793, 794, 828, 817, 818, 815, 816, 807, 0, 803,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 150,
	151, 0, 152, 0, 0, 0, 0, 844, 810, 0,
	0, 0, 153, 154, 155, 2284, 859, 289, 860, 156,
	861, 862, 0, 157, 293, 294, 158, 813, 843, 863,
	864, 297, 0, 159, 855, 0, 836, 0, 160, 161,
	162, 0, 163, 0, 164, 165, 166, 0, 390, 167,
	2286, 0, 837, 839, 0, 838, 840, 169, 170, 342,
	171, 865, 172, 866, 867, 0, 173, 0, 174, 0,
	0, 0, 858, 176, 0, 177, 0, 0, 0, 801,
	178, 179, 180, 845, 846, 824, 0, 0, 181, 182,
	868, 0, 183, 0, 184, 0, 0, 391, 0, 185,
	856, 0, 307, 0, 186, 187, 188, 189, 852, 854,
	393, 0, 193, 0, 190, 0, 392, 191, 869, 192,
	870, 871, 872, 0, 835, 0, 394, 194, 395, 195,
	196, 0, 198, 197, 0, 857, 396, 199, 397, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 316,
	205, 398, 207, 208, 210, 209, 796, 0, 825, 853,
	211, 873, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 319, 399, 217, 400, 847, 218, 219, 220,
	221, 0, 848, 222, 322, 223, 0, 224, 225, 226,
	874, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 0, 240, 401, 241, 242,
	802, 243, 0, 247, 248, 249, 250, 0, 325, 251,
	252, 841, 253, 244, 245, 254, 402, 255, 875, 327,
	256, 0, 262, 257, 258, 246, 259, 261, 876, 260,
	849, 0, 263, 0, 264, 265, 266, 267, 268, 0,
	330, 877, 878, 0, 0, 269, 850, 851, 823, 270,
	271, 2285, 273, 0, 0, 274, 275, 276, 842, 277,
	0, 335, 278, 279, 280, 336, 879, 0, 0, 281,
	0, 0, 0, 0, 282, 283, 284, 285, 797, 0,
	0, 0, 0, 0, 795, 0, 0, 0, 0, 793,
	794, 828, 817, 818, 815, 816, 807, 0, 803, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 150, 151,
	0, 152, 0, 0, 0, 0, 844, 810, 0, 0,
	0, 153, 154, 155, 287, 859, 289, 860, 156, 861,
	862, 0, 157, 293, 294, 158, 813, 843, 863, 864,
	297, 0, 159, 855, 0, 836, 0, 160, 161, 162,
	0, 163, 0, 164, 165, 166, 0, 390, 167, 168,
	0, 837, 839, 0, 838, 840, 169, 170, 342, 171,
	865, 172, 866, 867, 0, 173, 0, 174, 0, 0,
	0, 858, 176, 0, 177, 0, 0, 0, 801, 178,
	179, 180, 845, 846, 824, 0, 0, 181, 182, 868,
	0, 183, 0, 184, 0, 0, 391, 0, 185, 856,
	0, 307, 0, 186, 187, 188, 189, 852, 854, 393,
	0, 193, 0, 190, 0, 392, 191, 869, 192, 870,
	871, 872, 0, 835, 0, 394, 194, 395, 195, 196,
	0, 198, 197, 0, 857, 396, 199, 397, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 316, 205,
	398, 207, 208, 210, 209, 796, 0, 825, 853, 211,
	873, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 319, 399, 217, 400, 847, 218, 219, 220, 221,
	0, 848, 222, 322, 223, 0, 224, 225, 226, 874,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 0, 240, 401, 241, 242, 802,
	243, 0, 247, 248, 249, 250, 0, 325, 251, 252,
	841, 253, 244, 245, 254, 402, 255, 875, 327, 256,
	0, 262, 257, 258, 246, 259, 261, 876, 260, 849,
	0, 263, 0, 264, 265, 266, 267, 268, 0, 330,
	877, 878, 0, 0, 269, 850, 851, 823, 270, 271,
	272, 273, 0, 0, 274, 275, 276, 842, 277, 0,
	335, 278, 279, 280, 336, 879, 0, 0, 281, 0,
	0, 0, 0, 282, 283, 284, 285, 797, 0, 0,
	0, 0, 0, 795, 0, 0, 0, 0, 793, 794,
	828, 817, 818, 815, 816, 807, 0, 803, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 150, 151, 0,
	152, 0, 0, 0, 0, 844, 810, 0, 0, 0,
	153, 154, 155, 287, 859, 289, 860, 156, 861, 862,
	0, 157, 293, 294, 158, 813, 843, 863, 864, 297,
	0, 159, 855, 0, 836, 0, 160, 161, 162, 0,
	163, 0, 164, 165, 166, 0, 390, 167, 168, 0,
	837, 839, 0, 838, 840, 169, 170, 342, 171, 865,
	172, 866, 867, 0, 173, 0, 174, 0, 0, 0,
	858, 176, 0, 177, 0, 0, 0, 801, 178, 179,
	180, 845, 846, 824, 0, 0, 181, 182, 868, 0,
	183, 0, 184, 0, 0, 391, 0, 185, 856, 0,
	307, 0, 186, 187, 188, 189, 852, 854, 393, 0,
	193, 0, 190, 0, 392, 191, 869, 192, 870, 871,
	872, 0, 835, 0, 394, 194, 395, 195, 196, 0,
	198, 197, 0, 857, 396, 199, 397, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 316, 205, 398,
	207, 208, 210, 209, 0, 0, 825, 853, 211, 873,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	319, 399, 217, 400, 847, 218, 219, 220, 221, 0,
	848, 222, 322, 223, 0, 224, 225, 226, 874, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 0, 240, 401, 241, 242, 1489, 243,
	0, 247, 248, 249, 250, 0, 325, 251, 252, 841,
	253, 244, 245, 254, 402, 255, 875, 327, 256, 0,
	262, 257, 258, 246, 259, 261, 876, 260, 849, 0,
	263, 0, 264, 265, 266, 267, 268, 0, 330, 877,
	878, 0, 0, 269, 850, 851, 823, 270, 271, 272,
	273, 0, 0, 274, 275, 276, 842, 277, 0, 335,
	278, 279, 280, 336, 879, 0, 0, 281, 0, 0,
	0, 0, 282, 283, 284, 285, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 1485, 1486, 828,
	817, 818, 815, 816, 807, 0, 1488, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 150, 151, 0, 152,
	0, 0, 0, 0, 844, 810, 0, 0, 0, 153,
	154, 155, 0, 859, 289, 860, 156, 861, 862, 0,
	157, 293, 294, 158, 813, 843, 863, 864, 297, 0,
	159, 855, 0, 836, 0, 160, 161, 162, 0, 163,
	0, 164, 165, 166, 0, 390, 167, 2286, 0, 837,
	839, 0, 838, 840, 169, 170, 342, 171, 865, 172,
	866, 867, 0, 173, 0, 174, 0, 0, 0, 858,
	176, 0, 177, 0, 0, 0, 801, 178, 179, 180,
	845, 846, 824, 0, 0, 181, 182, 868, 0, 183,
	0, 184, 0, 0, 391, 0, 185, 856, 0, 307,
	0, 186, 187, 188, 189, 852, 854, 0, 0, 193,
	0, 190, 0, 392, 191, 869, 192, 870, 871, 872,
	0, 835, 0, 0, 194, 395, 195, 196, 0, 198,
	197, 0, 857, 396, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 316, 205, 398, 207,
	208, 210, 209, 796, 0, 825, 853, 211, 873, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 319,
	399, 217, 400, 847, 218, 219, 220, 221, 0, 848,
	222, 322, 223, 0, 224, 225, 226, 874, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 0, 240, 401, 241, 242, 802, 243, 0,
	247, 248, 249, 250, 0, 325, 251, 252, 841, 253,
	244, 245, 254, 0, 255, 875, 327, 256, 0, 262,
	257, 258, 246, 259, 261, 876, 260, 849, 0, 263,
	0, 264, 265, 266, 267, 268, 0, 330, 877, 878,
	0, 0, 269, 850, 851, 823, 270, 271, 2285, 273,
	0, 0, 274, 275, 276, 842, 277, 0, 335, 278,
	279, 280, 336, 879, 0, 0, 281, 0, 0, 0,
	0, 282, 283, 284, 285, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 793, 794, 0, 0,
	0, 0, 0, 150, 151, 803, 152, 0, 0, 0,
	806, 844, 0, 0, 0, 0, 153, 154, 155, 287,
	288, 289, 290, 156, 291, 292, 0, 157, 293, 294,
	158, 0, 843, 295, 296, 297, 0, 159, 855, 0,
	836, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 390, 167, 168, 0, 837, 839, 0, 838,
	840, 169, 170, 342, 171, 299, 172, 300, 301, 0,
	173, 0, 174, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 302, 178, 179, 180, 845, 846, 0,
	0, 0, 181, 182, 305, 0, 183, 0, 184, 0,
	0, 391, 0, 185, 856, 0, 307, 0, 186, 187,
	188, 189, 852, 854, 393, 0, 193, 0, 190, 0,
	392, 191, 310, 192, 311, 312, 313, 0, 314, 0,
	394, 194, 395, 195, 196, 0, 198, 197, 0, 857,
	396, 199, 397, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 398, 207, 208, 210, 209,
	0, 0, 0, 853, 211, 318, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 399, 217, 400,
	847, 218, 219, 220, 221, 0, 848, 222, 322, 223,
	0, 224, 225, 226, 323, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 401, 241, 242, 324, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 841, 253, 244, 245, 254,
	402, 255, 326, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 328, 260, 849, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 331, 332, 0, 0, 269,
	850, 851, 0, 270, 271, 272, 273, 684, 0, 274,
	275, 276, 842, 277, 0, 335, 278, 279, 280, 336,
	337, 0, 0, 281, 150, 151, 0, 152, 282, 283,
	284, 285, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 1768, 0, 295, 296, 297, 0, 159, 298,
	0, 389, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 390, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 391, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 308, 309, 393, 0, 193, 0, 190,
	0, 392, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 394, 194, 395, 195, 196, 0, 198, 197, 0,
	315, 396, 199, 397, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 398, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 399, 217,
	400, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 401, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 108, 325, 251, 252, 0, 253, 244, 245,
	254, 402, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 112, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	688, 337, 0, 0, 281, 0, 0, 0, 105, 282,
	283, 284, 285, 0, 106, 0, 0, 684, 919, 0,
	1041, 1038, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 150, 151, 0, 152, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 389, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 390, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	1055, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	1051, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 391, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 308, 309, 393, 0, 193, 0, 190,
	0, 392, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 394, 194, 395, 195, 196, 0, 198, 197, 0,
	315, 396, 199, 397, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 398, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 1052, 0, 215, 0, 0, 216, 319, 399, 217,
	400, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 401, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 402, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 1050, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 684, 919, 281, 1041, 1038, 1049, 0, 282,
	283, 284, 285, 0, 0, 0, 0, 0, 0, 150,
	151, 0, 152, 0, 1042, 1039, 0, 286, 0, 0,
	0, 0, 153, 154, 155, 287, 288, 289, 290, 156,
	291, 292, 0, 157, 293, 294, 158, 0, 0, 295,
	296, 297, 0, 159, 298, 0, 389, 0, 160, 161,
	162, 0, 163, 0, 164, 165, 166, 0, 390, 167,
	168, 0, 0, 0, 0, 0, 0, 169, 170, 342,
	171, 299, 172, 300, 301, 1045, 173, 0, 174, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 302,
	178, 179, 180, 303, 304, 1051, 0, 0, 181, 182,
	305, 0, 183, 0, 184, 0, 0, 391, 0, 185,
	306, 0, 307, 0, 186, 187, 188, 189, 308, 309,
	393, 0, 193, 0, 190, 0, 392, 191, 310, 192,
	311, 312, 313, 0, 314, 0, 394, 194, 395, 195,
	196, 0, 198, 197, 0, 315, 396, 199, 397, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 316,
	205, 398, 207, 208, 210, 209, 0, 0, 0, 317,
	211, 318, 212, 213, 0, 214, 1052, 0, 215, 0,
	0, 216, 319, 399, 217, 400, 320, 218, 219, 220,
	221, 0, 321, 222, 322, 223, 0, 224, 225, 226,
	323, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 0, 240, 401, 241, 242,
	324, 243, 0, 247, 248, 249, 250, 0, 325, 251,
	252, 0, 253, 244, 245, 254, 402, 255, 326, 327,
	256, 0, 262, 257, 258, 246, 259, 261, 328, 260,
	329, 0, 263, 0, 264, 265, 266, 267, 268, 0,
	330, 331, 332, 0, 0, 269, 333, 334, 1050, 270,
	271, 272, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 335, 278, 279, 280, 336, 337, 684, 919, 281,
	1041, 1038, 1049, 0, 282, 283, 284, 285, 0, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 1042,
	1039, 0, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 389, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 390, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	1051, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 391, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 308, 309, 393, 0, 193, 0, 190,
	0, 392, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 394, 194, 395, 195, 196, 0, 198, 197, 0,
	315, 396, 199, 397, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 398, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 1052, 0, 215, 0, 0, 216, 319, 399, 217,
	400, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 401, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 402, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 1050, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 147, 0, 281, 0, 0, 0, 0, 282,
	283, 284, 285, 0, 0, 0, 0, 0, 0, 150,
	151, 0, 152, 0, 1042, 1039, 0, 286, 0, 0,
	0, 0, 153, 154, 155, 287, 288, 289, 290, 156,
	291, 292, 0, 157, 293, 294, 158, 0, 0, 295,
	296, 297, 0, 159, 298, 0, 0, 0, 160, 161,
	162, 0, 163, 0, 164, 165, 166, 0, 0, 167,
	168, 0, 0, 0, 0, 0, 0, 169, 170, 342,
	171, 299, 172, 300, 301, 0, 173, 0, 174, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 302,
	178, 179, 180, 303, 304, 0, 0, 0, 181, 182,
	305, 0, 183, 0, 184, 0, 0, 0, 0, 185,
	306, 0, 307, 0, 186, 187, 188, 189, 308, 309,
	0, 0, 193, 0, 190, 0, 0, 191, 310, 192,
	311, 312, 313, 0, 314, 0, 0, 194, 0, 195,
	196, 0, 198, 197, 0, 315, 0, 199, 0, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 316,
	205, 0, 207, 208, 210, 209, 0, 0, 0, 317,
	211, 318, 212, 213, 0, 214, 0, 617, 215, 0,
	0, 216, 319, 0, 217, 0, 320, 218, 219, 220,
	221, 0, 321, 222, 322, 223, 0, 224, 225, 226,
	323, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 0, 240, 0, 241, 242,
	324, 243, 0, 247, 248, 249, 250, 108, 325, 251,
	252, 0, 253, 244, 245, 254, 0, 255, 326, 327,
	256, 0, 262, 257, 258, 246, 259, 261, 328, 260,
	329, 0, 263, 112, 264, 265, 266, 267, 268, 0,
	330, 331, 332, 0, 0, 269, 333, 334, 0, 270,
	271, 272, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 335, 278, 279, 280, 688, 337, 0, 0, 281,
	147, 0, 0, 105, 282, 283, 284, 285, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 150, 151, 0,
	152, 0, 0, 0, 0, 286, 1360, 0, 1365, 0,
	153, 154, 155, 287, 288, 289, 290, 156, 291, 292,
	0, 157, 293, 294, 158, 0, 0, 295, 296, 297,
	0, 159, 298, 0, 0, 0, 160, 161, 162, 0,
	163, 0, 164, 165, 166, 0, 0, 167, 168, 0,
	0, 0, 0, 0, 0, 169, 170, 342, 171, 299,
	172, 300, 301, 0, 173, 0, 174, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 302, 178, 179,
	180, 303, 304, 0, 0, 0, 181, 182, 305, 0,
	183, 0, 184, 0, 0, 0, 0, 185, 306, 0,
	307, 0, 186, 187, 188, 189, 308, 309, 0, 0,
	193, 0, 190, 0, 0, 191, 310, 192, 311, 312,
	313, 0, 314, 0, 0, 194, 0, 195, 196, 0,
	198, 197, 0, 315, 0, 199, 0, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 316, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 317, 211, 318,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	319, 0, 217, 0, 320, 218, 219, 220, 221, 0,
	321, 222, 322, 223, 0, 224, 225, 226, 323, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 0, 240, 0, 241, 242, 324, 243,
	0, 247, 248, 249, 250, 108, 325, 251, 252, 0,
	253, 244, 245, 254, 0, 255, 326, 327, 256, 0,
	262, 257, 258, 246, 259, 261, 328, 260, 329, 0,
	263, 112, 264, 265, 266, 267, 268, 0, 330, 331,
	332, 0, 0, 269, 333, 334, 0, 270, 271, 272,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 335,
	278, 279, 280, 688, 337, 0, 1358, 281, 147, 0,
	0, 105, 282, 283, 284, 285, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 150, 151, 0, 152, 0,
	0, 0, 0, 286, 0, 0, 99, 0, 153, 154,
	155, 287, 288, 289, 290, 156, 291, 292, 0, 157,
	293, 294, 158, 0, 0, 295, 296, 297, 0, 159,
	298, 0, 0, 0, 160, 161, 162, 0, 163, 0,
	164, 165, 166, 0, 0, 167, 168, 0, 0, 0,
	0, 0, 0, 169, 170, 342, 171, 299, 172, 300,
	301, 0, 173, 0, 174, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 302, 178, 179, 180, 303,
	304, 0, 0, 0, 181, 182, 305, 0, 183, 0,
	184, 0, 0, 0, 0, 185, 306, 0, 307, 0,
	186, 187, 188, 189, 308, 309, 0, 0, 193, 0,
	190, 0, 0, 191, 310, 192, 311, 312, 313, 0,
	314, 0, 0, 194, 0, 195, 196, 0, 198, 197,
	0, 315, 0, 199, 0, 0, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 316, 205, 0, 207, 208,
	210, 209, 0, 0, 0, 317, 211, 318, 212, 213,
	0, 214, 0, 617, 215, 0, 0, 216, 319, 0,
	217, 0, 320, 218, 219, 220, 221, 0, 321, 222,
	322, 223, 0, 224, 225, 226, 323, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 0, 240, 0, 241, 242, 324, 243, 0, 247,
	248, 249, 250, 0, 325, 251, 252, 0, 253, 244,
	245, 254, 0, 255, 326, 327, 256, 0, 262, 257,
	258, 246, 259, 261, 328, 260, 329, 0, 263, 0,
	264, 265, 266, 267, 268, 0, 330, 331, 332, 0,
	0, 269, 333, 334, 0, 270, 271, 272, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 335, 278, 279,
	280, 336, 337, 0, 0, 281, 147, 0, 0, 0,
	282, 283, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 151, 0, 152, 0, 0, 0,
	0, 286, 1360, 0, 1365, 0, 153, 154, 155, 287,
	288, 289, 290, 156, 291, 292, 0, 157, 293, 294,
	158, 0, 0, 295, 296, 297, 0, 159, 298, 0,
	0, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 0, 167, 168, 0, 0, 0, 0, 0,
	0, 169, 170, 342, 171, 299, 172, 300, 301, 0,
	173, 0, 174, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 302, 178, 179, 180, 303, 304, 0,
	0, 0, 181, 182, 305, 0, 183, 0, 184, 0,
	0, 0, 0, 185, 306, 0, 307, 0, 186, 187,
	188, 189, 308, 309, 0, 0, 193, 0, 190, 0,
	0, 191, 310, 192, 311, 312, 313, 0, 314, 0,
	0, 194, 0, 195, 196, 0, 198, 197, 0, 315,
	0, 199, 0, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 317, 211, 318, 212, 213, 0, 214,
	0, 617, 215, 0, 0, 216, 319, 0, 217, 0,
	320, 218, 219, 220, 221, 0, 321, 222, 322, 223,
	0, 224, 225, 226, 323, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 0, 241, 242, 324, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 0, 253, 244, 245, 254,
	0, 255, 326, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 328, 260, 329, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 331, 332, 0, 0, 269,
	333, 334, 0, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 335, 278, 279, 280, 336,
	337, 0, 0, 281, 147, 0, 0, 0, 282, 283,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 151, 0, 152, 0, 0, 0, 0, 286,
	1360, 0, 1365, 0, 153, 154, 155, 287, 288, 289,
	290, 156, 291, 292, 0, 157, 293, 294, 158, 0,
	0, 295, 296, 297, 0, 159, 298, 0, 0, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	0, 167, 168, 0, 0, 0, 0, 0, 0, 169,
	170, 342, 171, 299, 172, 300, 301, 0, 173, 0,
	174, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 302, 178, 179, 180, 303, 304, 0, 0, 0,
	181, 182, 305, 0, 183, 0, 184, 0, 0, 0,
	0, 185, 306, 0, 307, 0, 186, 187, 188, 189,
	308, 309, 0, 0, 193, 0, 190, 0, 0, 191,
	310, 192, 311, 312, 313, 0, 314, 0, 0, 194,
	0, 195, 196, 0, 198, 197, 0, 315, 0, 199,
	0, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 317, 211, 318, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 0, 217, 0, 320, 218,
	219, 220, 221, 0, 321, 222, 322, 223, 0, 224,
	225, 226, 323, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 0,
	241, 242, 324, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 0, 253, 244, 245, 254, 0, 255,
	326, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	328, 260, 329, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 331, 332, 0, 0, 269, 333, 334,
	0, 270, 271, 272, 273, 147, 0, 274, 275, 276,
	0, 277, 0, 335, 278, 279, 280, 336, 337, 0,
	0, 281, 150, 151, 0, 152, 282, 283, 284, 285,
	286, 0, 0, 0, 0, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 0, 157, 293, 294, 158,
	0, 927, 295, 296, 297, 0, 159, 298, 0, 0,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 0, 167, 168, 0, 0, 0, 0, 0, 0,
	169, 170, 342, 171, 299, 172, 300, 301, 0, 173,
	0, 174, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 302, 178, 179, 180, 303, 304, 0, 0,
	0, 181, 182, 305, 0, 183, 0, 184, 0, 0,
	0, 0, 185, 306, 0, 307, 0, 186, 187, 188,
	189, 308, 309, 0, 0, 193, 0, 190, 0, 0,
	191, 310, 192, 311, 312, 313, 0, 314, 0, 0,
	194, 0, 195, 196, 0, 198, 197, 0, 315, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 317, 211, 318, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 0, 217, 0, 320,
	218, 219, 220, 221, 0, 321, 222, 322, 223, 0,
	224, 225, 226, 323, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	0, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 0, 253, 244, 245, 254, 0,
	255, 326, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 331, 332, 0, 0, 269, 333,
	334, 0, 270, 271, 272, 273, 147, 0, 274, 275,
	276, 0, 277, 0, 335, 278, 279, 280, 336, 337,
	0, 0, 281, 150, 151, 0, 152, 282, 283, 284,
	285, 286, 0, 0, 0, 0, 153, 154, 155, 287,
	288, 289, 290, 156, 291, 292, 0, 157, 293, 294,
	158, 1287, 0, 295, 296, 297, 0, 159, 298, 0,
	0, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 0, 167, 168, 0, 0, 0, 0, 0,
	0, 169, 170, 342, 171, 299, 172, 300, 301, 0,
	173, 0, 174, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 302, 178, 179, 180, 303, 304, 0,
	0, 0, 181, 182, 305, 0, 183, 0, 184, 0,
	0, 0, 0, 185, 306, 0, 307, 0, 186, 187,
	188, 189, 308, 309, 0, 0, 193, 0, 190, 0,
	0, 191, 310, 192, 311, 312, 313, 0, 314, 0,
	0, 194, 0, 195, 196, 0, 198, 197, 0, 315,
	0, 199, 0, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 317, 211, 318, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 0, 217, 0,
	320, 218, 219, 220, 221, 0, 321, 222, 322, 223,
	0, 224, 225, 226, 323, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 0, 241, 242, 324, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 0, 253, 244, 245, 254,
	0, 255, 326, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 328, 260, 329, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 331, 332, 0, 0, 269,
	333, 334, 0, 270, 271, 272, 273, 147, 0, 274,
	275, 276, 0, 277, 0, 335, 278, 279, 280, 336,
	337, 0, 0, 281, 150, 151, 0, 152, 282, 283,
	284, 285, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 1895, 0, 295, 296, 297, 0, 159, 298,
	0, 0, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 0, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 0, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 308, 309, 0, 0, 193, 0, 190,
	0, 0, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 0, 194, 0, 195, 196, 0, 198, 197, 0,
	315, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 0, 217,
	0, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 0, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 0, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 0, 0, 281, 0, 0, 0, 0, 282,
	283, 284, 285, 0, 828, 817, 818, 815, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 151, 894, 152, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 153, 154, 155, 287, 859, 289,
	860, 156, 861, 862, 0, 157, 293, 294, 158, 0,
	0, 863, 864, 297, 0, 159, 298, 0, 389, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	390, 167, 168, 0, 0, 0, 0, 0, 0, 169,
	170, 342, 171, 865, 172, 866, 867, 0, 173, 0,
	174, 0, 0, 0, 858, 176, 0, 177, 0, 0,
	0, 302, 178, 179, 180, 303, 304, 824, 0, 0,
	181, 182, 868, 0, 183, 0, 184, 0, 0, 391,
	0, 185, 306, 0, 307, 0, 186, 187, 188, 189,
	308, 309, 393, 0, 193, 0, 190, 0, 392, 191,
	869, 192, 870, 871, 872, 0, 835, 0, 394, 194,
	395, 195, 196, 0, 198, 197, 0, 315, 396, 199,
	397, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 398, 207, 208, 210, 209, 0, 0,
	825, 317, 211, 873, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 399, 217, 400, 320, 218,
	219, 220, 221, 0, 321, 222, 322, 223, 0, 224,
	225, 226, 874, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 401,
	241, 242, 324, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 0, 253, 244, 245, 254, 402, 255,
	875, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	876, 260, 329, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 877, 878, 0, 0, 269, 333, 334,
	823, 270, 271, 272, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 335, 278, 279, 280, 336, 879, 0,
	338, 281, 147, 0, 0, 0, 282, 283, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	151, 0, 152, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 153, 154, 155, 287, 288, 289, 290, 156,
	291, 292, 0, 157, 293, 294, 158, 0, 0, 295,
	296, 297, 0, 159, 298, 0, 0, 0, 160, 161,
	162, 0, 163, 0, 164, 165, 166, 0, 0, 167,
	168, 0, 0, 0, 0, 0, 0, 169, 170, 143,
	171, 299, 172, 300, 301, 0, 173, 0, 174, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 302,
	178, 179, 180, 303, 304, 0, 0, 0, 181, 182,
	305, 0, 183, 0, 184, 0, 0, 0, 0, 185,
	306, 0, 307, 0, 186, 187, 188, 189, 308, 309,
	0, 0, 193, 0, 190, 0, 0, 191, 310, 192,
	311, 312, 313, 0, 314, 0, 0, 194, 0, 195,
	196, 0, 198, 197, 0, 315, 0, 199, 0, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 316,
	205, 0, 207, 208, 210, 209, 0, 0, 0, 317,
	211, 318, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 319, 0, 217, 0, 320, 218, 219, 220,
	221, 0, 321, 222, 322, 223, 0, 224, 225, 226,
	323, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 0, 240, 0, 241, 242,
	324, 243, 0, 247, 248, 249, 250, 0, 325, 251,
	252, 0, 253, 244, 245, 254, 0, 255, 326, 327,
	256, 0, 262, 257, 258, 246, 259, 261, 328, 260,
	329, 0, 263, 142, 264, 265, 266, 267, 268, 0,
	330, 331, 332, 0, 0, 269, 333, 334, 0, 270,
	271, 272, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 335, 278, 279, 280, 336, 337, 0, 139, 281,
	147, 0, 0, 0, 282, 283, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 151, 0,
	152, 146, 0, 0, 0, 286, 0, 0, 0, 0,
	153, 154, 155, 287, 288, 289, 290, 156, 291, 292,
	0, 157, 293, 294, 158, 0, 0, 295, 296, 297,
	0, 159, 298, 0, 0, 0, 160, 161, 162, 0,
	163, 0, 164, 165, 166, 0, 0, 167, 168, 0,
	0, 0, 0, 0, 0, 169, 170, 143, 171, 299,
	172, 300, 301, 0, 173, 0, 174, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 302, 178, 179,
	180, 303, 304, 0, 0, 0, 181, 182, 305, 0,
	183, 0, 184, 0, 0, 0, 0, 185, 306, 0,
	307, 0, 186, 187, 188, 189, 308, 309, 0, 0,
	193, 0, 190, 0, 0, 191, 310, 192, 311, 312,
	313, 0, 314, 0, 0, 194, 0, 195, 196, 0,
	198, 197, 0, 315, 0, 199, 0, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 316, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 317, 211, 318,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	319, 0, 217, 0, 320, 218, 219, 220, 221, 0,
	321, 222, 322, 223, 0, 224, 225, 226, 323, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 0, 240, 0, 241, 242, 324, 243,
	0, 247, 248, 249, 250, 0, 325, 251, 252, 0,
	253, 244, 245, 254, 0, 255, 326, 327, 256, 0,
	262, 257, 258, 246, 259, 261, 328, 260, 329, 0,
	263, 142, 264, 265, 266, 267, 268, 0, 330, 331,
	332, 0, 0, 269, 333, 334, 0, 270, 271, 272,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 335,
	278, 279, 280, 336, 337, 684, 919, 281, 0, 0,
	917, 0, 282, 283, 284, 285, 0, 0, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 146,
	286, 0, 0, 0, 0, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 0, 157, 293, 294, 158,
	0, 0, 295, 296, 297, 0, 159, 298, 0, 389,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 390, 167, 168, 0, 0, 0, 0, 0, 0,
	169, 170, 342, 171, 299, 172, 300, 301, 0, 173,
	0, 174, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 302, 178, 179, 180, 303, 304, 0, 0,
	0, 181, 182, 305, 0, 183, 0, 184, 0, 0,
	391, 0, 185, 306, 0, 307, 0, 186, 187, 188,
	189, 308, 309, 393, 0, 193, 0, 190, 0, 392,
	191, 310, 192, 311, 312, 313, 0, 314, 0, 394,
	194, 395, 195, 196, 0, 198, 197, 0, 315, 396,
	199, 397, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 398, 207, 208, 210, 209, 0,
	0, 0, 317, 211, 318, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 399, 217, 400, 320,
	218, 219, 220, 221, 0, 321, 222, 322, 223, 0,
	224, 225, 226, 323, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	401, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 0, 253, 244, 245, 254, 402,
	255, 326, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 331, 332, 0, 0, 269, 333,
	334, 0, 270, 271, 272, 273, 147, 0, 274, 275,
	276, 0, 277, 0, 335, 278, 279, 280, 336, 337,
	0, 0, 281, 150, 151, 0, 152, 282, 283, 284,
	285, 286, 0, 0, 0, 0, 153, 154, 155, 287,
	288, 289, 290, 156, 291, 292, 0, 157, 293, 294,
	158, 0, 0, 295, 296, 297, 0, 159, 298, 0,
	0, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 0, 167, 168, 0, 0, 0, 0, 0,
	0, 169, 170, 143, 171, 299, 172, 300, 301, 0,
	173, 0, 174, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 302, 178, 179, 180, 303, 304, 0,
	0, 0, 181, 182, 305, 0, 183, 0, 184, 0,
	0, 0, 0, 185, 306, 0, 307, 0, 186, 187,
	188, 189, 308, 309, 0, 0, 193, 0, 190, 0,
	0, 191, 310, 192, 311, 312, 313, 0, 314, 0,
	0, 194, 0, 195, 196, 0, 198, 197, 0, 315,
	0, 199, 0, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 317, 211, 318, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 0, 217, 0,
	320, 218, 219, 220, 221, 0, 321, 222, 322, 223,
	0, 224, 225, 226, 323, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 0, 241, 242, 324, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 0, 253, 244, 245, 254,
	0, 255, 326, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 328, 260, 329, 0, 263, 142, 264, 265,
	266, 267, 268, 0, 330, 331, 332, 0, 0, 269,
	333, 334, 0, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 335, 278, 279, 280, 336,
	337, 684, 919, 281, 0, 0, 0, 0, 282, 283,
	284, 285, 0, 0, 0, 0, 0, 0, 150, 151,
	0, 152, 0, 0, 0, 146, 286, 0, 0, 0,
	0, 153, 154, 155, 287, 288, 289, 290, 156, 291,
	292, 0, 157, 293, 294, 158, 0, 0, 295, 296,
	297, 0, 159, 298, 0, 389, 0, 160, 161, 162,
	0, 163, 0, 164, 165, 166, 0, 390, 167, 168,
	0, 0, 0, 0, 0, 0, 169, 170, 342, 171,
	299, 172, 300, 301, 0, 173, 0, 174, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 302, 178,
	179, 180, 303, 304, 0, 0, 0, 181, 182, 305,
	0, 183, 0, 184, 0, 0, 391, 0, 185, 306,
	0, 307, 0, 186, 187, 188, 189, 308, 309, 393,
	0, 193, 0, 190, 0, 392, 191, 310, 192, 311,
	312, 313, 0, 314, 0, 394, 194, 395, 195, 196,
	0, 198, 197, 0, 315, 396, 199, 397, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 316, 205,
	398, 207, 208, 210, 209, 0, 0, 0, 317, 211,
	318, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 319, 399, 217, 400, 320, 218, 219, 220, 221,
	0, 321, 222, 322, 223, 0, 224, 225, 226, 323,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 0, 240, 401, 241, 242, 324,
	243, 0, 247, 248, 249, 250, 0, 325, 251, 252,
	0, 253, 244, 245, 254, 402, 255, 326, 327, 256,
	0, 262, 257, 258, 246, 259, 261, 328, 260, 329,
	0, 263, 0, 264, 265, 266, 267, 268, 0, 330,
	331, 332, 0, 0, 269, 333, 334, 0, 270, 271,
	272, 273, 147, 0, 274, 275, 276, 0, 277, 0,
	335, 278, 279, 280, 336, 337, 0, 0, 281, 150,
	151, 0, 152, 282, 283, 284, 285, 286, 0, 0,
	0, 0, 153, 154, 155, 287, 288, 289, 290, 156,
	291, 292, 0, 157, 293, 294, 158, 0, 0, 295,
	296, 297, 0, 159, 298, 0, 0, 0, 160, 161,
	162, 0, 163, 0, 164, 165, 166, 0, 0, 167,
	168, 0, 0, 0, 0, 0, 0, 169, 170, 342,
	171, 299, 172, 300, 301, 0, 173, 0, 174, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 302,
	178, 179, 180, 303, 304, 0, 0, 0, 181, 182,
	305, 0, 183, 0, 184, 0, 0, 0, 0, 185,
	306, 0, 307, 0, 186, 187, 188, 189, 308, 309,
	0, 0, 193, 0, 190, 0, 0, 191, 310, 192,
	311, 312, 313, 0, 314, 0, 0, 194, 0, 195,
	196, 0, 198, 197, 0, 315, 0, 199, 0, 0,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 316,
	205, 0, 207, 208, 210, 209, 0, 0, 0, 317,
	211, 318, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 319, 0, 217, 0, 320, 218, 219, 220,
	221, 0, 321, 222, 322, 223, 0, 224, 225, 226,
	323, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 0, 240, 0, 241, 242,
	324, 243, 0, 247, 248, 249, 250, 0, 325, 251,
	252, 0, 253, 244, 245, 254, 0, 255, 326, 327,
	256, 0, 262, 257, 258, 246, 259, 261, 328, 260,
	329, 0, 263, 0, 264, 265, 266, 267, 268, 0,
	330, 331, 332, 0, 0, 269, 333, 334, 0, 270,
	271, 272, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 335, 278, 279, 280, 336, 337, 684, 0, 281,
	0, 0, 0, 0, 282, 283, 284, 285, 0, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 0,
	0, 146, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 389, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 390, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 391, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 308, 309, 393, 0, 193, 0, 190,
	0, 392, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 394, 194, 395, 195, 196, 0, 198, 197, 0,
	315, 396, 199, 397, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 398, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 399, 217,
	400, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 401, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 402, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 147, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 0, 0, 281, 150, 151, 0, 152, 282,
	283, 284, 285, 286, 0, 0, 0, 0, 153, 154,
	155, 287, 288, 289, 290, 156, 291, 292, 0, 157,
	293, 294, 158, 0, 0, 295, 296, 297, 1223, 159,
	298, 0, 0, 0, 160, 161, 162, 0, 163, 1221,
	164, 165, 166, 0, 0, 167, 168, 0, 0, 0,
	0, 0, 0, 169, 170, 342, 171, 299, 172, 300,
	301, 0, 173, 0, 174, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 302, 178, 179, 180, 303,
	304, 0, 1264, 0, 181, 182, 305, 0, 183, 0,
	184, 1226, 0, 0, 0, 185, 306, 0, 307, 0,
	186, 187, 188, 189, 308, 309, 0, 0, 193, 1262,
	190, 0, 0, 191, 310, 192, 311, 312, 313, 0,
	314, 0, 0, 194, 0, 195, 196, 0, 198, 197,
	0, 315, 0, 199, 0, 0, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 316, 205, 0, 207, 208,
	210, 209, 0, 0, 0, 317, 211, 318, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 319, 0,
	217, 0, 320, 218, 219, 220, 221, 0, 321, 222,
	322, 223, 1225, 224, 225, 226, 323, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 0, 240, 0, 241, 242, 324, 243, 0, 247,
	248, 249, 250, 0, 325, 251, 252, 0, 253, 244,
	245, 254, 0, 255, 326, 327, 256, 0, 262, 257,
	258, 246, 259, 261, 328, 260, 329, 0, 263, 0,
	264, 265, 266, 267, 268, 0, 330, 331, 332, 0,
	0, 269, 333, 334, 0, 270, 271, 272, 273, 147,
	1263, 274, 275, 276, 0, 277, 0, 335, 278, 279,
	280, 336, 337, 0, 0, 281, 150, 151, 0, 152,
	282, 283, 284, 285, 286, 0, 0, 0, 0, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 0,
	157, 293, 294, 158, 0, 0, 295, 296, 297, 1223,
	159, 298, 0, 0, 1218, 160, 161, 162, 0, 163,
	1221, 164, 165, 166, 0, 0, 167, 168, 0, 0,
	0, 0, 0, 0, 169, 170, 342, 171, 299, 172,
	300, 301, 0, 173, 0, 174, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 302, 178, 179, 180,
	303, 304, 0, 0, 0, 181, 182, 305, 0, 183,
	0, 184, 1226, 0, 0, 0, 185, 306, 0, 307,
	0, 186, 187, 188, 189, 1217, 309, 0, 0, 193,
	0, 190, 0, 0, 191, 310, 192, 311, 312, 313,
	0, 314, 0, 0, 194, 0, 195, 196, 0, 198,
	197, 0, 315, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 316, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 317, 211, 318, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 319,
	0, 217, 0, 320, 218, 219, 220, 221, 0, 321,
	222, 322, 223, 1225, 224, 225, 226, 323, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 0, 240, 0, 241, 242, 324, 243, 0,
	247, 248, 249, 250, 0, 325, 251, 252, 0, 253,
	244, 245, 254, 0, 255, 326, 327, 256, 0, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 0, 263,
	0, 264, 265, 266, 267, 268, 0, 330, 331, 332,
	0, 0, 269, 333, 334, 0, 270, 271, 272, 273,
	0, 1224, 274, 275, 276, 0, 277, 0, 335, 278,
	279, 280, 336, 337, 0, 664, 281, 147, 0, 0,
	0, 282, 283, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 0, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 0, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 0, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 308, 309, 0, 0, 193, 0, 190,
	0, 0, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 0, 194, 0, 195, 196, 0, 198, 197, 0,
	315, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 617, 215, 0, 0, 216, 319, 0, 217,
	0, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 0, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 0, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 0, 623, 281, 147, 0, 0, 0, 282,
	283, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 0, 157, 293, 294, 158,
	0, 0, 295, 296, 297, 0, 159, 298, 0, 0,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 0, 167, 168, 0, 0, 0, 0, 0, 0,
	169, 170, 342, 171, 299, 172, 300, 301, 0, 173,
	0, 174, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 302, 178, 179, 180, 303, 304, 0, 0,
	0, 181, 182, 305, 0, 183, 0, 184, 0, 0,
	0, 0, 185, 306, 0, 307, 0, 186, 187, 188,
	189, 625, 309, 0, 0, 193, 0, 190, 0, 0,
	191, 310, 192, 311, 312, 313, 0, 314, 0, 0,
	194, 0, 195, 196, 0, 198, 197, 0, 315, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 317, 211, 318, 212, 213, 0, 214, 0,
	617, 215, 0, 0, 216, 319, 0, 217, 0, 320,
	218, 219, 220, 221, 0, 321, 222, 322, 223, 0,
	224, 225, 226, 323, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	0, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 0, 253, 244, 245, 254, 0,
	255, 326, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 331, 332, 0, 0, 269, 333,
	334, 0, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 335, 278, 279, 280, 336, 337,
	0, 619, 281, 147, 0, 0, 0, 282, 283, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 151, 0, 152, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 153, 154, 155, 287, 288, 289, 290,
	156, 291, 292, 0, 157, 293, 294, 158, 0, 0,
	295, 296, 297, 0, 159, 298, 0, 0, 0, 160,
	161, 162, 0, 163, 0, 164, 165, 166, 0, 0,
	167, 168, 0, 0, 0, 0, 0, 0, 169, 170,
	342, 171, 299, 172, 300, 301, 0, 173, 0, 174,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	302, 178, 179, 180, 303, 304, 0, 0, 0, 181,
	182, 305, 0, 183, 0, 184, 0, 0, 0, 0,
	185, 306, 0, 307, 0, 186, 187, 188, 189, 621,
	309, 0, 0, 193, 0, 190, 0, 0, 191, 310,
	192, 311, 312, 313, 0, 314, 0, 0, 194, 0,
	195, 196, 0, 198, 197, 0, 315, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	316, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	317, 211, 318, 212, 213, 0, 214, 0, 617, 215,
	0, 0, 216, 319, 0, 217, 0, 320, 218, 219,
	220, 221, 0, 321, 222, 322, 223, 0, 224, 225,
	226, 323, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 0, 240, 0, 241,
	242, 324, 243, 0, 247, 248, 249, 250, 0, 325,
	251, 252, 0, 253, 244, 245, 254, 0, 255, 326,
	327, 256, 0, 262, 257, 258, 246, 259, 261, 328,
	260, 329, 0, 263, 0, 264, 265, 266, 267, 268,
	0, 330, 331, 332, 0, 0, 269, 333, 334, 0,
	270, 271, 272, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 335, 278, 279, 280, 336, 337, 0, 614,
	281, 147, 0, 0, 0, 282, 283, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 151,
	0, 152, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 153, 154, 155, 287, 288, 289, 290, 156, 291,
	292, 0, 157, 293, 294, 158, 0, 0, 295, 296,
	297, 0, 159, 298, 0, 0, 0, 160, 161, 162,
	0, 163, 0, 164, 165, 166, 0, 0, 167, 168,
	0, 0, 0, 0, 0, 0, 169, 170, 342, 171,
	299, 172, 300, 301, 0, 173, 0, 174, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 302, 178,
	179, 180, 303, 304, 0, 0, 0, 181, 182, 305,
	0, 183, 0, 184, 0, 0, 0, 0, 185, 306,
	0, 307, 0, 186, 187, 188, 189, 308, 309, 0,
	0, 193, 0, 190, 0, 0, 191, 310, 192, 311,
	312, 313, 0, 314, 0, 0, 194, 0, 195, 196,
	0, 198, 197, 0, 315, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 316, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 317, 211,
	318, 212, 213, 0, 214, 0, 617, 215, 0, 0,
	216, 319, 0, 217, 0, 320, 218, 219, 220, 221,
	0, 321, 222, 322, 223, 0, 224, 225, 226, 323,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 0, 240, 0, 241, 242, 324,
	243, 0, 247, 248, 249, 250, 0, 325, 251, 252,
	0, 253, 244, 245, 254, 0, 255, 326, 327, 256,
	0, 262, 257, 258, 246, 259, 261, 328, 260, 329,
	0, 263, 0, 264, 265, 266, 267, 268, 0, 330,
	331, 332, 0, 0, 269, 333, 334, 0, 270, 271,
	272, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	335, 278, 279, 280, 336, 337, 0, 488, 281, 147,
	0, 0, 0, 282, 283, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 151, 491, 152,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 0,
	157, 293, 294, 158, 0, 0, 295, 296, 297, 0,
	159, 298, 0, 0, 0, 160, 161, 162, 0, 163,
	0, 164, 165, 166, 0, 0, 167, 168, 0, 0,
	0, 0, 0, 0, 169, 170, 342, 171, 299, 172,
	300, 301, 0, 173, 0, 174, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 302, 178, 179, 180,
	303, 304, 0, 0, 0, 181, 182, 305, 0, 183,
	0, 184, 0, 0, 0, 0, 185, 306, 0, 307,
	0, 186, 187, 188, 189, 308, 309, 0, 0, 193,
	0, 190, 0, 0, 191, 310, 192, 311, 312, 313,
	0, 314, 0, 0, 194, 0, 195, 196, 0, 198,
	197, 0, 315, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 316, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 317, 211, 318, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 319,
	0, 217, 0, 320, 218, 219, 220, 221, 0, 321,
	222, 322, 490, 0, 224, 225, 226, 323, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 0, 240, 0, 241, 242, 324, 243, 0,
	247, 248, 249, 250, 0, 325, 251, 252, 0, 253,
	244, 245, 254, 0, 255, 326, 327, 256, 0, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 0, 263,
	0, 264, 265, 266, 267, 268, 0, 330, 331, 332,
	0, 0, 269, 333, 334, 0, 270, 271, 272, 273,
	147, 0, 274, 275, 276, 0, 277, 0, 335, 278,
	279, 280, 336, 337, 0, 0, 281, 150, 151, 0,
	152, 282, 283, 284, 285, 286, 0, 1862, 0, 0,
	153, 154, 155, 287, 288, 289, 290, 156, 291, 292,
	0, 157, 293, 294, 158, 0, 0, 295, 296, 297,
	0, 159, 298, 0, 0, 0, 160, 161, 162, 0,
	163, 0, 164, 165, 166, 0, 0, 167, 168, 0,
	0, 0, 0, 0, 0, 169, 170, 342, 171, 299,
	172, 300, 301, 0, 173, 0, 174, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 302, 178, 179,
	180, 303, 304, 0, 0, 0, 181, 182, 305, 0,
	183, 0, 184, 0, 0, 0, 0, 185, 306, 0,
	307, 0, 186, 187, 188, 189, 308, 309, 0, 0,
	193, 0, 190, 0, 0, 191, 310, 192, 311, 312,
	313, 0, 314, 0, 0, 194, 0, 195, 196, 0,
	198, 197, 0, 315, 0, 199, 0, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 316, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 317, 211, 318,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	319, 0, 217, 0, 320, 218, 219, 220, 221, 0,
	321, 222, 322, 223, 0, 224, 225, 226, 323, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 0, 240, 0, 241, 242, 324, 243,
	0, 247, 248, 249, 250, 0, 325, 251, 252, 0,
	253, 244, 245, 254, 0, 255, 326, 327, 256, 0,
	262, 257, 258, 246, 259, 261, 328, 260, 329, 0,
	263, 0, 264, 265, 266, 267, 268, 0, 330, 331,
	332, 0, 0, 269, 333, 334, 0, 270, 271, 272,
	273, 147, 0, 274, 275, 276, 0, 277, 0, 335,
	278, 279, 280, 336, 337, 0, 0, 281, 150, 151,
	0, 152, 282, 283, 284, 285, 286, 0, 0, 0,
	0, 153, 154, 155, 287, 288, 289, 290, 156, 291,
	292, 0, 157, 293, 294, 158, 0, 0, 295, 296,
	297, 0, 159, 298, 0, 0, 0, 160, 161, 162,
	0, 163, 0, 164, 165, 166, 0, 0, 167, 168,
	0, 0, 0, 0, 0, 0, 169, 170, 342, 171,
	299, 172, 300, 301, 0, 173, 0, 174, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 302, 178,
	179, 180, 303, 304, 0, 0, 0, 181, 182, 305,
	0, 183, 0, 184, 0, 0, 0, 0, 185, 306,
	0, 307, 0, 186, 187, 188, 189, 308, 309, 0,
	0, 193, 0, 190, 0, 0, 191, 310, 192, 311,
	312, 313, 0, 314, 0, 0, 194, 0, 195, 196,
	0, 198, 197, 0, 315, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 316, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 317, 211,
	318, 212, 213, 0, 214, 0, 617, 215, 0, 0,
	216, 319, 0, 217, 0, 320, 218, 219, 220, 221,
	0, 321, 222, 322, 223, 0, 224, 225, 226, 323,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 0, 240, 0, 241, 242, 324,
	243, 0, 247, 248, 249, 250, 0, 325, 251, 252,
	0, 253, 244, 245, 254, 0, 255, 326, 327, 256,
	0, 262, 257, 258, 246, 259, 261, 328, 260, 329,
	0, 263, 0, 264, 265, 266, 267, 268, 0, 330,
	331, 332, 0, 0, 269, 333, 334, 0, 270, 271,
	272, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	335, 278, 279, 280, 336, 337, 0, 1075, 281, 147,
	0, 0, 0, 282, 283, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 151, 0, 152,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 0,
	157, 293, 294, 158, 0, 0, 295, 296, 297, 0,
	159, 298, 0, 0, 0, 160, 161, 162, 0, 163,
	0, 164, 165, 166, 0, 0, 167, 168, 0, 0,
	0, 0, 0, 0, 169, 170, 342, 171, 299, 172,
	300, 301, 0, 173, 0, 174, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 302, 178, 179, 180,
	303, 304, 0, 0, 0, 181, 182, 305, 0, 183,
	0, 184, 0, 0, 0, 0, 185, 306, 0, 307,
	0, 186, 187, 188, 189, 308, 309, 0, 0, 193,
	0, 190, 0, 0, 191, 310, 192, 311, 312, 313,
	0, 314, 0, 0, 194, 0, 195, 196, 0, 198,
	197, 0, 315, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 316, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 317, 211, 318, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 319,
	0, 217, 0, 320, 218, 219, 220, 221, 0, 321,
	222, 322, 223, 0, 224, 225, 226, 323, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 0, 240, 0, 241, 242, 324, 243, 0,
	247, 248, 249, 250, 0, 325, 251, 252, 0, 253,
	244, 245, 254, 0, 255, 326, 327, 256, 0, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 0, 263,
	0, 264, 265, 266, 267, 268, 0, 330, 331, 332,
	0, 0, 269, 333, 334, 0, 270, 271, 272, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 335, 278,
	279, 280, 336, 337, 0, 1073, 281, 147, 0, 0,
	0, 282, 283, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 0, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 0, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 0, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 308, 309, 0, 0, 193, 0, 190,
	0, 0, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 0, 194, 0, 195, 196, 0, 198, 197, 0,
	315, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 0, 217,
	0, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 0, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 0, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 147, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 0, 0, 281, 150, 151, 1059, 152, 282,
	283, 284, 285, 286, 0, 0, 0, 0, 153, 154,
	155, 287, 288, 289, 290, 156, 291, 292, 0, 157,
	293, 294, 158, 0, 0, 295, 296, 297, 0, 159,
	298, 0, 0, 0, 160, 161, 162, 0, 163, 0,
	164, 165, 166, 0, 0, 167, 168, 0, 0, 0,
	0, 0, 0, 169, 170, 342, 171, 299, 172, 300,
	301, 0, 173, 0, 174, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 302, 178, 179, 180, 303,
	304, 0, 0, 0, 181, 182, 305, 0, 183, 0,
	184, 0, 0, 0, 0, 185, 306, 0, 307, 0,
	186, 187, 188, 189, 308, 309, 0, 0, 193, 0,
	190, 0, 0, 191, 310, 192, 311, 312, 313, 0,
	314, 0, 0, 194, 0, 195, 196, 0, 198, 197,
	0, 315, 0, 199, 0, 0, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 316, 205, 0, 207, 208,
	210, 209, 0, 0, 0, 317, 211, 318, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 319, 0,
	217, 0, 320, 218, 219, 220, 221, 0, 321, 222,
	322, 223, 0, 224, 225, 226, 323, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 0, 240, 0, 241, 242, 324, 243, 0, 247,
	248, 249, 250, 0, 325, 251, 252, 0, 253, 244,
	245, 254, 0, 255, 326, 327, 256, 0, 262, 257,
	258, 246, 259, 261, 328, 260, 329, 0, 263, 0,
	264, 265, 266, 267, 268, 0, 330, 331, 332, 0,
	0, 269, 333, 334, 0, 270, 271, 272, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 335, 278, 279,
	280, 336, 337, 0, 939, 281, 147, 0, 0, 0,
	282, 283, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 151, 0, 152, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 153, 154, 155, 287,
	288, 289, 290, 156, 291, 292, 0, 157, 293, 294,
	158, 0, 0, 295, 296, 297, 0, 159, 298, 0,
	0, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 0, 167, 168, 0, 0, 0, 0, 0,
	0, 169, 170, 342, 171, 299, 172, 300, 301, 0,
	173, 0, 174, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 302, 178, 179, 180, 303, 304, 0,
	0, 0, 181, 182, 305, 0, 183, 0, 184, 0,
	0, 0, 0, 185, 306, 0, 307, 0, 186, 187,
	188, 189, 941, 309, 0, 0, 193, 0, 190, 0,
	0, 191, 310, 192, 311, 312, 313, 0, 314, 0,
	0, 194, 0, 195, 196, 0, 198, 197, 0, 315,
	0, 199, 0, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 317, 211, 318, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 0, 217, 0,
	320, 218, 219, 220, 221, 0, 321, 222, 322, 223,
	0, 224, 225, 226, 323, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 0, 241, 242, 324, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 0, 253, 244, 245, 254,
	0, 255, 326, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 328, 260, 329, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 331, 332, 0, 0, 269,
	333, 334, 0, 270, 271, 272, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 335, 278, 279, 280, 336,
	337, 0, 517, 281, 147, 0, 0, 0, 282, 283,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 151, 0, 152, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 153, 154, 155, 287, 288, 289,
	290, 156, 291, 292, 0, 157, 293, 294, 158, 0,
	0, 295, 296, 707, 0, 159, 298, 0, 0, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	0, 167, 168, 0, 0, 0, 0, 0, 0, 169,
	170, 342, 171, 299, 172, 300, 301, 0, 173, 0,
	174, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 302, 178, 179, 180, 303, 304, 0, 0, 0,
	181, 182, 305, 0, 183, 0, 184, 0, 0, 0,
	0, 185, 306, 0, 307, 0, 186, 187, 188, 189,
	308, 309, 0, 0, 193, 0, 190, 0, 0, 191,
	310, 192, 311, 312, 313, 0, 314, 0, 0, 194,
	0, 195, 196, 0, 198, 197, 0, 315, 0, 199,
	0, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 520, 0, 207, 208, 210, 209, 0, 0,
	0, 317, 211, 318, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 0, 217, 0, 320, 218,
	219, 220, 221, 0, 321, 222, 322, 223, 0, 224,
	225, 226, 323, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 0,
	241, 242, 324, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 0, 253, 244, 245, 254, 0, 255,
	326, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	328, 260, 329, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 519, 331, 332, 0, 0, 708, 333, 334,
	0, 270, 271, 272, 273, 147, 0, 274, 275, 276,
	0, 277, 0, 335, 278, 279, 280, 336, 337, 0,
	0, 281, 150, 151, 698, 152, 282, 283, 284, 285,
	286, 0, 0, 0, 0, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 0, 157, 293, 294, 158,
	0, 0, 295, 296, 297, 0, 159, 298, 0, 0,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 0, 167, 168, 0, 0, 0, 0, 0, 0,
	169, 170, 342, 171, 299, 172, 300, 301, 0, 173,
	0, 174, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 302, 178, 179, 180, 303, 304, 0, 0,
	0, 181, 182, 305, 0, 183, 0, 184, 0, 0,
	0, 0, 185, 306, 0, 307, 0, 186, 187, 188,
	189, 308, 309, 0, 0, 193, 0, 190, 0, 0,
	191, 310, 192, 311, 312, 313, 0, 314, 0, 0,
	194, 0, 195, 196, 0, 198, 197, 0, 315, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 317, 211, 318, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 0, 217, 0, 320,
	218, 219, 220, 221, 0, 321, 222, 322, 223, 0,
	224, 225, 226, 323, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	0, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 0, 253, 244, 245, 254, 0,
	255, 326, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 331, 332, 0, 0, 269, 333,
	334, 0, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 335, 278, 279, 280, 336, 337,
	0, 680, 281, 147, 0, 0, 0, 282, 283, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 151, 0, 152, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 153, 154, 155, 287, 288, 289, 290,
	156, 291, 292, 0, 157, 293, 294, 158, 0, 0,
	295, 296, 297, 0, 159, 298, 0, 0, 0, 160,
	161, 162, 0, 163, 0, 164, 165, 166, 0, 0,
	167, 168, 0, 0, 0, 0, 0, 0, 169, 170,
	342, 171, 299, 172, 300, 301, 0, 173, 0, 174,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	302, 178, 179, 180, 303, 304, 0, 0, 0, 181,
	182, 305, 0, 183, 0, 184, 0, 0, 0, 0,
	185, 306, 0, 307, 0, 186, 187, 188, 189, 679,
	309, 0, 0, 193, 0, 190, 0, 0, 191, 310,
	192, 311, 312, 313, 0, 314, 0, 0, 194, 0,
	195, 196, 0, 198, 197, 0, 315, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	316, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	317, 211, 318, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 319, 0, 217, 0, 320, 218, 219,
	220, 221, 0, 321, 222, 322, 223, 0, 224, 225,
	226, 323, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 0, 240, 0, 241,
	242, 324, 243, 0, 247, 248, 249, 250, 0, 325,
	251, 252, 0, 253, 244, 245, 254, 0, 255, 326,
	327, 256, 0, 262, 257, 258, 246, 259, 261, 328,
	260, 329, 0, 263, 0, 264, 265, 266, 267, 268,
	0, 330, 331, 332, 0, 0, 269, 333, 334, 0,
	270, 271, 272, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 335, 278, 279, 280, 336, 337, 0, 676,
	281, 147, 0, 0, 0, 282, 283, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 151,
	0, 152, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 153, 154, 155, 287, 288, 289, 290, 156, 291,
	292, 0, 157, 293, 294, 158, 0, 0, 295, 296,
	297, 0, 159, 298, 0, 0, 0, 160, 161, 162,
	0, 163, 0, 164, 165, 166, 0, 0, 167, 168,
	0, 0, 0, 0, 0, 0, 169, 170, 342, 171,
	299, 172, 300, 301, 0, 173, 0, 174, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 302, 178,
	179, 180, 303, 304, 0, 0, 0, 181, 182, 305,
	0, 183, 0, 184, 0, 0, 0, 0, 185, 306,
	0, 307, 0, 186, 187, 188, 189, 675, 309, 0,
	0, 193, 0, 190, 0, 0, 191, 310, 192, 311,
	312, 313, 0, 314, 0, 0, 194, 0, 195, 196,
	0, 198, 197, 0, 315, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 316, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 317, 211,
	318, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 319, 0, 217, 0, 320, 218, 219, 220, 221,
	0, 321, 222, 322, 223, 0, 224, 225, 226, 323,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 0, 240, 0, 241, 242, 324,
	243, 0, 247, 248, 249, 250, 0, 325, 251, 252,
	0, 253, 244, 245, 254, 0, 255, 326, 327, 256,
	0, 262, 257, 258, 246, 259, 261, 328, 260, 329,
	0, 263, 0, 264, 265, 266, 267, 268, 0, 330,
	331, 332, 0, 0, 269, 333, 334, 0, 270, 271,
	272, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	335, 278, 279, 280, 336, 337, 0, 673, 281, 147,
	0, 0, 0, 282, 283, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 151, 0, 152,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 0,
	157, 293, 294, 158, 0, 0, 295, 296, 297, 0,
	159, 298, 0, 0, 0, 160, 161, 162, 0, 163,
	0, 164, 165, 166, 0, 0, 167, 168, 0, 0,
	0, 0, 0, 0, 169, 170, 342, 171, 299, 172,
	300, 301, 0, 173, 0, 174, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 302, 178, 179, 180,
	303, 304, 0, 0, 0, 181, 182, 305, 0, 183,
	0, 184, 0, 0, 0, 0, 185, 306, 0, 307,
	0, 186, 187, 188, 189, 672, 309, 0, 0, 193,
	0, 190, 0, 0, 191, 310, 192, 311, 312, 313,
	0, 314, 0, 0, 194, 0, 195, 196, 0, 198,
	197, 0, 315, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 316, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 317, 211, 318, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 319,
	0, 217, 0, 320, 218, 219, 220, 221, 0, 321,
	222, 322, 223, 0, 224, 225, 226, 323, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 0, 240, 0, 241, 242, 324, 243, 0,
	247, 248, 249, 250, 0, 325, 251, 252, 0, 253,
	244, 245, 254, 0, 255, 326, 327, 256, 0, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 0, 263,
	0, 264, 265, 266, 267, 268, 0, 330, 331, 332,
	0, 0, 269, 333, 334, 0, 270, 271, 272, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 335, 278,
	279, 280, 336, 337, 0, 669, 281, 147, 0, 0,
	0, 282, 283, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 0, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 0, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 0, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 668, 309, 0, 0, 193, 0, 190,
	0, 0, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 0, 194, 0, 195, 196, 0, 198, 197, 0,
	315, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 0, 217,
	0, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 0, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 0, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 0, 655, 281, 147, 0, 0, 0, 282,
	283, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 0, 157, 293, 294, 158,
	0, 0, 295, 296, 297, 0, 159, 298, 0, 0,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 0, 167, 168, 0, 0, 0, 0, 0, 0,
	169, 170, 342, 171, 299, 172, 300, 301, 0, 173,
	0, 174, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 302, 178, 179, 180, 303, 304, 0, 0,
	0, 181, 182, 305, 0, 183, 0, 184, 0, 0,
	0, 0, 185, 306, 0, 307, 0, 186, 187, 188,
	189, 657, 309, 0, 0, 193, 0, 190, 0, 0,
	191, 310, 192, 311, 312, 313, 0, 314, 0, 0,
	194, 0, 195, 196, 0, 198, 197, 0, 315, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 317, 211, 318, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 0, 217, 0, 320,
	218, 219, 220, 221, 0, 321, 222, 322, 223, 0,
	224, 225, 226, 323, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	0, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 0, 253, 244, 245, 254, 0,
	255, 326, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 331, 332, 0, 0, 269, 333,
	334, 0, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 335, 278, 279, 280, 336, 337,
	0, 653, 281, 147, 0, 0, 0, 282, 283, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 151, 0, 152, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 153, 154, 155, 287, 288, 289, 290,
	156, 291, 292, 0, 157, 293, 294, 158, 0, 0,
	295, 296, 297, 0, 159, 298, 0, 0, 0, 160,
	161, 162, 0, 163, 0, 164, 165, 166, 0, 0,
	167, 168, 0, 0, 0, 0, 0, 0, 169, 170,
	342, 171, 299, 172, 300, 301, 0, 173, 0, 174,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	302, 178, 179, 180, 303, 304, 0, 0, 0, 181,
	182, 305, 0, 183, 0, 184, 0, 0, 0, 0,
	185, 306, 0, 307, 0, 186, 187, 188, 189, 308,
	309, 0, 0, 193, 0, 190, 0, 0, 191, 310,
	192, 311, 312, 313, 0, 314, 0, 0, 194, 0,
	195, 196, 0, 198, 197, 0, 315, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	316, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	317, 211, 318, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 319, 0, 217, 0, 320, 218, 219,
	220, 221, 0, 321, 222, 322, 223, 0, 224, 225,
	226, 323, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 0, 240, 0, 241,
	242, 324, 243, 0, 247, 248, 249, 250, 0, 325,
	251, 252, 0, 253, 244, 245, 254, 0, 255, 326,
	327, 256, 0, 262, 257, 258, 246, 259, 261, 328,
	260, 329, 0, 263, 0, 264, 265, 266, 267, 268,
	0, 330, 331, 332, 0, 0, 269, 333, 334, 0,
	270, 271, 272, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 335, 278, 279, 280, 336, 337, 0, 651,
	281, 147, 0, 0, 0, 282, 283, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 151,
	0, 152, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 153, 154, 155, 287, 288, 289, 290, 156, 291,
	292, 0, 157, 293, 294, 158, 0, 0, 295, 296,
	297, 0, 159, 298, 0, 0, 0, 160, 161, 162,
	0, 163, 0, 164, 165, 166, 0, 0, 167, 168,
	0, 0, 0, 0, 0, 0, 169, 170, 342, 171,
	299, 172, 300, 301, 0, 173, 0, 174, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 302, 178,
	179, 180, 303, 304, 0, 0, 0, 181, 182, 305,
	0, 183, 0, 184, 0, 0, 0, 0, 185, 306,
	0, 307, 0, 186, 187, 188, 189, 308, 309, 0,
	0, 193, 0, 190, 0, 0, 191, 310, 192, 311,
	312, 313, 0, 314, 0, 0, 194, 0, 195, 196,
	0, 198, 197, 0, 315, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 316, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 317, 211,
	318, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 319, 0, 217, 0, 320, 218, 219, 220, 221,
	0, 321, 222, 322, 223, 0, 224, 225, 226, 323,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 0, 240, 0, 241, 242, 324,
	243, 0, 247, 248, 249, 250, 0, 325, 251, 252,
	0, 253, 244, 245, 254, 0, 255, 326, 327, 256,
	0, 262, 257, 258, 246, 259, 261, 328, 260, 329,
	0, 263, 0, 264, 265, 266, 267, 268, 0, 330,
	331, 332, 0, 0, 269, 333, 334, 0, 270, 271,
	272, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	335, 278, 279, 280, 336, 337, 0, 647, 281, 147,
	0, 0, 0, 282, 283, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 151, 0, 152,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 0,
	157, 293, 294, 158, 0, 0, 295, 296, 297, 0,
	159, 298, 0, 0, 0, 160, 161, 162, 0, 163,
	0, 164, 165, 166, 0, 0, 167, 168, 0, 0,
	0, 0, 0, 0, 169, 170, 342, 171, 299, 172,
	300, 301, 0, 173, 0, 174, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 302, 178, 179, 180,
	303, 304, 0, 0, 0, 181, 182, 305, 0, 183,
	0, 184, 0, 0, 0, 0, 185, 306, 0, 307,
	0, 186, 187, 188, 189, 649, 309, 0, 0, 193,
	0, 190, 0, 0, 191, 310, 192, 311, 312, 313,
	0, 314, 0, 0, 194, 0, 195, 196, 0, 198,
	197, 0, 315, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 316, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 317, 211, 318, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 319,
	0, 217, 0, 320, 218, 219, 220, 221, 0, 321,
	222, 322, 223, 0, 224, 225, 226, 323, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 0, 240, 0, 241, 242, 324, 243, 0,
	247, 248, 249, 250, 0, 325, 251, 252, 0, 253,
	244, 245, 254, 0, 255, 326, 327, 256, 0, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 0, 263,
	0, 264, 265, 266, 267, 268, 0, 330, 331, 332,
	0, 0, 269, 333, 334, 0, 270, 271, 272, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 335, 278,
	279, 280, 336, 337, 0, 628, 281, 147, 0, 0,
	0, 282, 283, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 0, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 0, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 0, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 630, 309, 0, 0, 193, 0, 190,
	0, 0, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 0, 194, 0, 195, 196, 0, 198, 197, 0,
	315, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 0, 217,
	0, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 0, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 0, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 0, 626, 281, 147, 0, 0, 0, 282,
	283, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 0, 157, 293, 294, 158,
	0, 0, 295, 296, 297, 0, 159, 298, 0, 0,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 0, 167, 168, 0, 0, 0, 0, 0, 0,
	169, 170, 342, 171, 299, 172, 300, 301, 0, 173,
	0, 174, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 302, 178, 179, 180, 303, 304, 0, 0,
	0, 181, 182, 305, 0, 183, 0, 184, 0, 0,
	0, 0, 185, 306, 0, 307, 0, 186, 187, 188,
	189, 308, 309, 0, 0, 193, 0, 190, 0, 0,
	191, 310, 192, 311, 312, 313, 0, 314, 0, 0,
	194, 0, 195, 196, 0, 198, 197, 0, 315, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 317, 211, 318, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 0, 217, 0, 320,
	218, 219, 220, 221, 0, 321, 222, 322, 223, 0,
	224, 225, 226, 323, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	0, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 0, 253, 244, 245, 254, 0,
	255, 326, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 331, 332, 0, 0, 269, 333,
	334, 0, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 335, 278, 279, 280, 336, 337,
	0, 566, 281, 147, 0, 0, 0, 282, 283, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 151, 0, 152, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 153, 154, 155, 287, 288, 289, 290,
	156, 291, 292, 0, 157, 293, 294, 158, 0, 0,
	295, 296, 297, 0, 159, 298, 0, 0, 0, 160,
	161, 162, 0, 163, 0, 164, 165, 166, 0, 0,
	167, 168, 0, 0, 0, 0, 0, 0, 169, 170,
	342, 171, 299, 172, 300, 301, 0, 173, 0, 174,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	302, 178, 179, 180, 303, 304, 0, 0, 0, 181,
	182, 305, 0, 183, 0, 184, 0, 0, 0, 0,
	185, 306, 0, 307, 0, 186, 187, 188, 189, 308,
	309, 0, 0, 193, 0, 190, 0, 0, 191, 310,
	192, 311, 312, 313, 0, 314, 0, 0, 194, 0,
	195, 196, 0, 198, 197, 0, 315, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	316, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	317, 211, 318, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 319, 0, 217, 0, 320, 218, 219,
	220, 221, 0, 321, 222, 322, 223, 0, 224, 225,
	226, 323, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 0, 240, 0, 241,
	242, 324, 243, 0, 247, 248, 249, 250, 0, 325,
	251, 568, 0, 253, 244, 245, 254, 0, 255, 326,
	327, 256, 0, 262, 257, 258, 246, 259, 261, 328,
	260, 329, 0, 263, 0, 264, 265, 266, 267, 268,
	0, 330, 331, 332, 0, 0, 269, 333, 334, 0,
	270, 271, 272, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 335, 278, 279, 280, 336, 337, 0, 562,
	281, 147, 0, 0, 0, 282, 283, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 151,
	0, 152, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 153, 154, 155, 287, 288, 289, 290, 156, 291,
	292, 0, 157, 293, 294, 158, 0, 0, 295, 296,
	297, 0, 159, 298, 0, 0, 0, 160, 161, 162,
	0, 163, 0, 164, 165, 166, 0, 0, 167, 168,
	0, 0, 0, 0, 0, 0, 169, 170, 342, 171,
	299, 172, 300, 301, 0, 173, 0, 174, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 302, 178,
	179, 180, 303, 304, 0, 0, 0, 181, 182, 305,
	0, 183, 0, 184, 0, 0, 0, 0, 185, 306,
	0, 307, 0, 186, 187, 188, 189, 308, 309, 0,
	0, 193, 0, 190, 0, 0, 191, 310, 192, 311,
	312, 313, 0, 314, 0, 0, 194, 0, 195, 196,
	0, 198, 197, 0, 315, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 316, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 317, 211,
	318, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 319, 0, 217, 0, 320, 218, 219, 220, 221,
	0, 321, 222, 322, 223, 0, 224, 225, 226, 323,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 0, 240, 0, 241, 242, 324,
	243, 0, 564, 248, 249, 250, 0, 325, 251, 252,
	0, 253, 244, 245, 254, 0, 255, 326, 327, 256,
	0, 262, 257, 258, 246, 259, 261, 328, 260, 329,
	0, 263, 0, 264, 265, 266, 267, 268, 0, 330,
	331, 332, 0, 0, 269, 333, 334, 0, 270, 271,
	272, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	335, 278, 279, 280, 336, 337, 0, 517, 281, 147,
	0, 0, 0, 282, 283, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 151, 0, 152,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 0,
	157, 293, 294, 158, 0, 0, 295, 296, 297, 0,
	512, 298, 0, 0, 0, 160, 161, 162, 0, 163,
	0, 164, 165, 166, 0, 0, 167, 168, 0, 0,
	0, 0, 0, 0, 169, 170, 342, 171, 299, 172,
	300, 301, 0, 173, 0, 174, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 302, 178, 179, 180,
	303, 304, 0, 0, 0, 181, 182, 305, 0, 183,
	0, 184, 0, 0, 0, 0, 185, 306, 0, 307,
	0, 186, 187, 188, 189, 308, 309, 0, 0, 193,
	0, 190, 0, 0, 191, 310, 192, 311, 312, 313,
	0, 314, 0, 0, 194, 0, 195, 196, 0, 198,
	197, 0, 315, 0, 199, 0, 0, 511, 0, 0,
	201, 0, 202, 203, 204, 206, 316, 520, 0, 207,
	208, 210, 209, 0, 0, 0, 317, 211, 318, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 319,
	0, 217, 0, 320, 218, 219, 220, 221, 0, 321,
	222, 322, 223, 0, 224, 225, 226, 323, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 0, 240, 0, 241, 242, 513, 243, 0,
	247, 248, 249, 250, 0, 325, 251, 514, 0, 253,
	244, 245, 254, 0, 255, 326, 327, 256, 0, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 0, 263,
	0, 264, 265, 266, 267, 268, 0, 519, 331, 332,
	0, 0, 516, 333, 334, 0, 270, 271, 272, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 335, 278,
	279, 280, 336, 337, 0, 506, 281, 147, 0, 0,
	0, 282, 283, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 151, 0, 152, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 0, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 0, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 0, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 308, 309, 0, 0, 193, 0, 190,
	0, 0, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 0, 194, 0, 195, 196, 0, 198, 197, 0,
	315, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 0, 217,
	0, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 0, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 0, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 0, 486, 281, 147, 0, 0, 0, 282,
	283, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 151, 0, 152, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 0, 157, 293, 294, 158,
	0, 0, 295, 296, 297, 0, 159, 298, 0, 0,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 0, 167, 168, 0, 0, 0, 0, 0, 0,
	169, 170, 342, 171, 299, 172, 300, 301, 0, 173,
	0, 174, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 302, 178, 179, 180, 303, 304, 0, 0,
	0, 181, 182, 305, 0, 183, 0, 184, 0, 0,
	0, 0, 185, 306, 0, 307, 0, 186, 187, 188,
	189, 308, 309, 0, 0, 193, 0, 190, 0, 0,
	191, 310, 192, 311, 312, 313, 0, 314, 0, 0,
	194, 0, 195, 196, 0, 198, 197, 0, 315, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 317, 211, 318, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 0, 217, 0, 320,
	218, 219, 220, 221, 0, 321, 222, 322, 223, 0,
	224, 225, 226, 323, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	0, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 0, 253, 244, 245, 254, 0,
	255, 326, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 331, 332, 0, 0, 269, 333,
	334, 0, 270, 271, 272, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 335, 278, 279, 280, 336, 337,
	0, 484, 281, 147, 0, 0, 0, 282, 283, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 151, 0, 152, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 153, 154, 155, 287, 288, 289, 290,
	156, 291, 292, 0, 157, 293, 294, 158, 0, 0,
	295, 296, 297, 0, 159, 298, 0, 0, 0, 160,
	161, 162, 0, 163, 0, 164, 165, 166, 0, 0,
	167, 168, 0, 0, 0, 0, 0, 0, 169, 170,
	342, 171, 299, 172, 300, 301, 0, 173, 0, 174,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	302, 178, 179, 180, 303, 304, 0, 0, 0, 181,
	182, 305, 0, 183, 0, 184, 0, 0, 0, 0,
	185, 306, 0, 307, 0, 186, 187, 188, 189, 308,
	309, 0, 0, 193, 0, 190, 0, 0, 191, 310,
	192, 311, 312, 313, 0, 314, 0, 0, 194, 0,
	195, 196, 0, 198, 197, 0, 315, 0, 199, 0,
	0, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	316, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	317, 211, 318, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 319, 0, 217, 0, 320, 218, 219,
	220, 221, 0, 321, 222, 322, 223, 0, 224, 225,
	226, 323, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 0, 240, 0, 241,
	242, 324, 243, 0, 247, 248, 249, 250, 0, 325,
	251, 252, 0, 253, 244, 245, 254, 0, 255, 326,
	327, 256, 0, 262, 257, 258, 246, 259, 261, 328,
	260, 329, 0, 263, 0, 264, 265, 266, 267, 268,
	0, 330, 331, 332, 0, 0, 269, 333, 334, 0,
	270, 271, 272, 273, 147, 0, 274, 275, 276, 0,
	277, 0, 335, 278, 279, 280, 336, 337, 0, 0,
	281, 150, 151, 0, 152, 282, 283, 284, 285, 286,
	0, 0, 0, 0, 153, 154, 155, 287, 288, 289,
	290, 156, 291, 292, 0, 157, 293, 294, 158, 0,
	0, 295, 296, 297, 0, 159, 298, 0, 0, 0,
	160, 161, 162, 0, 163, 0, 164, 165, 166, 0,
	0, 167, 168, 0, 0, 0, 0, 0, 0, 169,
	170, 342, 171, 299, 172, 300, 301, 0, 173, 0,
	174, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 302, 178, 179, 180, 303, 304, 0, 0, 0,
	181, 182, 305, 0, 183, 0, 184, 0, 0, 0,
	0, 185, 306, 0, 307, 0, 186, 187, 188, 189,
	308, 309, 0, 0, 193, 0, 190, 0, 0, 191,
	310, 192, 311, 312, 313, 0, 314, 0, 0, 194,
	0, 195, 196, 0, 198, 197, 0, 315, 0, 199,
	0, 0, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 316, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 317, 211, 318, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 319, 0, 217, 0, 320, 218,
	219, 220, 221, 0, 321, 222, 322, 223, 0, 224,
	225, 226, 323, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 0, 240, 0,
	241, 242, 324, 243, 0, 247, 248, 249, 250, 0,
	325, 251, 252, 0, 253, 244, 245, 254, 0, 255,
	326, 327, 256, 0, 262, 257, 258, 246, 259, 261,
	328, 260, 329, 0, 263, 0, 264, 265, 266, 267,
	268, 0, 330, 331, 332, 0, 0, 269, 333, 334,
	0, 270, 271, 272, 273, 147, 0, 274, 275, 276,
	0, 277, 0, 335, 278, 279, 280, 336, 337, 0,
	0, 281, 150, 151, 0, 152, 282, 283, 284, 285,
	286, 0, 0, 0, 0, 153, 154, 155, 287, 288,
	289, 290, 156, 291, 292, 0, 157, 293, 294, 158,
	0, 0, 295, 296, 297, 0, 159, 298, 0, 0,
	0, 160, 161, 162, 0, 163, 0, 164, 165, 166,
	0, 0, 167, 168, 0, 0, 0, 0, 0, 0,
	169, 170, 342, 171, 299, 172, 300, 301, 0, 173,
	0, 174, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 302, 178, 179, 180, 303, 304, 0, 0,
	0, 181, 182, 305, 0, 183, 0, 184, 0, 0,
	0, 0, 185, 306, 0, 307, 0, 186, 187, 188,
	189, 1538, 309, 0, 0, 193, 0, 190, 0, 0,
	191, 310, 192, 311, 312, 313, 0, 314, 0, 0,
	194, 0, 195, 196, 0, 198, 197, 0, 315, 0,
	199, 0, 0, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 316, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 317, 211, 318, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 319, 0, 217, 0, 320,
	218, 219, 220, 221, 0, 321, 222, 322, 223, 0,
	224, 225, 226, 323, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 0, 240,
	0, 241, 242, 324, 243, 0, 247, 248, 249, 250,
	0, 325, 251, 252, 0, 253, 244, 245, 254, 0,
	255, 326, 327, 256, 0, 262, 257, 258, 246, 259,
	261, 328, 260, 329, 0, 263, 0, 264, 265, 266,
	267, 268, 0, 330, 331, 332, 0, 0, 269, 333,
	334, 0, 270, 271, 272, 273, 147, 0, 274, 275,
	276, 0, 277, 0, 335, 278, 279, 280, 336, 337,
	0, 0, 281, 150, 151, 0, 152, 282, 283, 284,
	285, 286, 0, 0, 0, 0, 153, 154, 155, 287,
	288, 289, 290, 156, 291, 292, 0, 157, 293, 294,
	158, 0, 0, 295, 296, 297, 0, 159, 298, 0,
	0, 0, 160, 161, 162, 0, 163, 0, 164, 165,
	166, 0, 0, 167, 168, 0, 0, 0, 0, 0,
	0, 169, 170, 342, 171, 299, 172, 300, 301, 0,
	173, 0, 174, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 302, 178, 179, 180, 303, 304, 0,
	0, 0, 181, 182, 305, 0, 183, 0, 184, 0,
	0, 0, 0, 185, 306, 0, 307, 0, 186, 187,
	188, 189, 1536, 309, 0, 0, 193, 0, 190, 0,
	0, 191, 310, 192, 311, 312, 313, 0, 314, 0,
	0, 194, 0, 195, 196, 0, 198, 197, 0, 315,
	0, 199, 0, 0, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 316, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 317, 211, 318, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 319, 0, 217, 0,
	320, 218, 219, 220, 221, 0, 321, 222, 322, 223,
	0, 224, 225, 226, 323, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 0,
	240, 0, 241, 242, 324, 243, 0, 247, 248, 249,
	250, 0, 325, 251, 252, 0, 253, 244, 245, 254,
	0, 255, 326, 327, 256, 0, 262, 257, 258, 246,
	259, 261, 328, 260, 329, 0, 263, 0, 264, 265,
	266, 267, 268, 0, 330, 331, 332, 0, 0, 269,
	333, 334, 0, 270, 271, 272, 273, 147, 0, 274,
	275, 276, 0, 277, 0, 335, 278, 279, 280, 336,
	337, 0, 0, 281, 150, 151, 0, 152, 282, 283,
	284, 285, 286, 0, 0, 0, 0, 153, 154, 155,
	287, 288, 289, 290, 156, 291, 292, 0, 157, 293,
	294, 158, 0, 0, 295, 296, 297, 0, 159, 298,
	0, 0, 0, 160, 161, 162, 0, 163, 0, 164,
	165, 166, 0, 0, 167, 168, 0, 0, 0, 0,
	0, 0, 169, 170, 342, 171, 299, 172, 300, 301,
	0, 173, 0, 174, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 302, 178, 179, 180, 303, 304,
	0, 0, 0, 181, 182, 305, 0, 183, 0, 184,
	0, 0, 0, 0, 185, 306, 0, 307, 0, 186,
	187, 188, 189, 1525, 309, 0, 0, 193, 0, 190,
	0, 0, 191, 310, 192, 311, 312, 313, 0, 314,
	0, 0, 194, 0, 195, 196, 0, 198, 197, 0,
	315, 0, 199, 0, 0, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 316, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 317, 211, 318, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 319, 0, 217,
	0, 320, 218, 219, 220, 221, 0, 321, 222, 322,
	223, 0, 224, 225, 226, 323, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	0, 240, 0, 241, 242, 324, 243, 0, 247, 248,
	249, 250, 0, 325, 251, 252, 0, 253, 244, 245,
	254, 0, 255, 326, 327, 256, 0, 262, 257, 258,
	246, 259, 261, 328, 260, 329, 0, 263, 0, 264,
	265, 266, 267, 268, 0, 330, 331, 332, 0, 0,
	269, 333, 334, 0, 270, 271, 272, 273, 147, 0,
	274, 275, 276, 0, 277, 0, 335, 278, 279, 280,
	336, 337, 0, 0, 281, 150, 151, 0, 152, 282,
	283, 284, 285, 286, 0, 0, 0, 0, 153, 154,
	155, 287, 288, 289, 290, 156, 291, 292, 0, 157,
	293, 294, 158, 0, 0, 295, 296, 297, 0, 159,
	298, 0, 0, 0, 160, 161, 162, 0, 163, 0,
	164, 165, 166, 0, 0, 167, 168, 0, 0, 0,
	0, 0, 0, 169, 170, 342, 171, 299, 172, 300,
	301, 0, 173, 0, 174, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 302, 178, 179, 180, 303,
	304, 0, 0, 0, 181, 182, 305, 0, 183, 0,
	184, 0, 0, 0, 0, 185, 306, 0, 307, 0,
	186, 187, 188, 189, 308, 309, 0, 0, 193, 0,
	190, 0, 0, 191, 310, 192, 311, 312, 313, 0,
	314, 0, 0, 194, 0, 195, 196, 0, 198, 197,
	0, 315, 0, 199, 0, 0, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 316, 205, 0, 207, 208,
	210, 209, 0, 0, 0, 317, 211, 318, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 319, 0,
	217, 0, 320, 218, 219, 220, 221, 0, 321, 222,
	322, 223, 0, 224, 225, 226, 323, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 0, 240, 0, 241, 242, 324, 243, 0, 564,
	248, 249, 250, 0, 325, 251, 252, 0, 253, 244,
	245, 254, 0, 255, 326, 327, 256, 0, 262, 257,
	258, 246, 259, 261, 328, 260, 329, 0, 263, 0,
	264, 265, 266, 267, 268, 0, 330, 331, 332, 0,
	0, 269, 333, 334, 0, 270, 271, 272, 273, 147,
	0, 274, 275, 276, 0, 277, 0, 335, 278, 279,
	280, 336, 337, 0, 0, 281, 150, 151, 0, 152,
	282, 283, 284, 285, 286, 0, 951, 0, 0, 153,
	154, 155, 287, 288, 289, 290, 156, 291, 292, 0,
	157, 293, 294, 158, 0, 0, 295, 296, 297, 0,
	159, 298, 0, 0, 0, 160, 161, 162, 0, 163,
	0, 164, 165, 166, 0, 0, 167, 168, 0, 0,
	0, 0, 0, 0, 169, 170, 342, 171, 299, 172,
	300, 301, 0, 173, 0, 174, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 302, 178, 179, 180,
	303, 304, 0, 0, 0, 181, 182, 305, 0, 183,
	0, 184, 0, 0, 0, 0, 185, 306, 0, 307,
	0, 186, 187, 188, 189, 308, 309, 0, 0, 193,
	0, 190, 0, 0, 191, 310, 192, 311, 312, 313,
	0, 314, 0, 0, 194, 0, 195, 196, 0, 198,
	197, 0, 315, 0, 199, 0, 0, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 316, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 317, 211, 318, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 319,
	0, 217, 0, 320, 218, 219, 220, 221, 0, 321,
	222, 322, 223, 0, 224, 225, 226, 323, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 0, 240, 0, 241, 242, 324, 243, 0,
	247, 248, 249, 250, 0, 325, 251, 252, 0, 0,
	244, 245, 254, 0, 255, 326, 327, 256, 0, 262,
	257, 258, 246, 259, 261, 328, 260, 329, 0, 263,
	0, 264, 265, 266, 267, 268, 0, 330, 331, 332,
	0, 0, 269, 333, 334, 0, 270, 271, 272, 273,
	147, 0, 274, 275, 276, 0, 277, 0, 335, 278,
	279, 280, 336, 337, 0, 0, 281, 150, 151, 0,
	152, 282, 283, 284, 285, 286, 0, 0, 0, 0,
	153, 154, 155, 287, 288, 289, 290, 156, 291, 292,
	0, 157, 293, 294, 158, 0, 0, 295, 296, 297,
	0, 159, 298, 0, 0, 0, 160, 161, 162, 0,
	163, 0, 164, 165, 166, 0, 0, 167, 168, 0,
	0, 0, 0, 0, 0, 169, 170, 342, 171, 299,
	172, 300, 301, 0, 173, 0, 174, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 302, 178, 179,
	180, 303, 304, 0, 0, 0, 181, 182, 305, 0,
	183, 0, 184, 0, 0, 0, 0, 185, 306, 0,
	307, 0, 186, 187, 188, 189, 308, 309, 0, 0,
	193, 0, 190, 0, 0, 191, 310, 192, 311, 312,
	313, 0, 314, 0, 0, 194, 0, 195, 196, 0,
	198, 197, 0, 315, 0, 199, 0, 0, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 316, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 317, 211, 318,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	319, 0, 217, 0, 320, 218, 219, 220, 221, 0,
	321, 222, 322, 223, 0, 224, 225, 226, 323, 598,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 0, 240, 0, 241, 242, 324, 243,
	0, 247, 248, 249, 250, 0, 325, 251, 252, 0,
	253, 244, 245, 254, 0, 255, 326, 327, 256, 0,
	262, 257, 258, 246, 259, 261, 328, 260, 329, 0,
	263, 0, 264, 265, 266, 267, 268, 0, 330, 331,
	332, 0, 0, 269, 333, 334, 0, 270, 271, 272,
	273, 147, 0, 274, 275, 276, 0, 277, 0, 335,
	278, 279, 280, 336, 337, 0, 0, 281, 150, 151,
	0, 152, 282, 283, 284, 285, 286, 0, 0, 0,
	0, 153, 154, 155, 287, 288, 289, 290, 156, 291,
	292, 0, 157, 293, 294, 158, 0, 0, 295, 296,
	297, 0, 159, 298, 0, 0, 0, 160, 161, 162,
	0, 163, 0, 164, 165, 166, 0, 0, 167, 168,
	0, 0, 0, 0, 0, 0, 169, 170, 342, 171,
	299, 172, 300, 301, 0, 173, 0, 174, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 302, 178,
	179, 180, 303, 304, 0, 0, 0, 181, 182, 305,
	0, 183, 0, 184, 0, 0, 0, 0, 185, 306,
	0, 307, 0, 186, 187, 188, 189, 308, 309, 0,
	0, 193, 0, 190, 0, 0, 191, 310, 192, 311,
	312, 313, 0, 314, 0, 0, 194, 0, 195, 196,
	0, 198, 197, 0, 315, 0, 199, 0, 0, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 316, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 317, 211,
	318, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 319, 0, 217, 0, 320, 218, 219, 0, 221,
	0, 321, 222, 322, 223, 0, 224, 0, 226, 323,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 0, 240, 0, 241, 242, 324,
	0, 0, 247, 248, 249, 250, 0, 325, 251, 252,
	0, 253, 244, 245, 254, 0, 255, 326, 327, 256,
	0, 262, 257, 258, 246, 259, 261, 328, 260, 329,
	0, 263, 0, 264, 265, 266, 267, 268, 0, 330,
	331, 332, 0, 0, 269, 333, 334, 0, 270, 271,
	272, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	335, 278, 279, 280, 336, 337, 0, 0, 281, 0,
	0, 0, 0, 282, 283, 284, 285, 1108, 1109, 0,
	1128, 1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0,
	0, 0, 0, 0, 1131, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 1142, 0, 0, 0, 0, 1108,
	1109, 0, 1128, 1129, 1130, 1138, 1139, 1140, 0, 0,
	0, 0, 0, 0, 1110, 0, 1131, 0, 0, 0,
	1125, 0, 0, 1111, 0, 0, 1142, 0, 0, 0,
	0, 1108, 1109, 0, 1128, 1129, 1130, 1138, 1139, 1140,
	0, 0, 0, 0, 0, 0, 1110, 0, 1131, 0,
	0, 0, 1125, 0, 0, 1111, 0, 0, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 1125, 0, 0, 0, 0, 1135,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1133, 0, 0,
	0, 1135, 1143, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 1133,
	0, 0, 0, 1135, 1143, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 1133, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1136, 0, 0, 0, 0,
	0, 0, 1132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 0, 1136,
	1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113,
	1114, 1115, 1117, 1118, 0, 0, 0, 0, 0, 0,
	0, 1743, 0, 0, 0, 0, 0, 0, 0, 1134,
	0, 0, 1122, 1123, 1124, 1137, 0, 1121, 1119, 1120,
	1112, 1113, 1114, 1115, 1117, 1118, 0, 0, 0, 0,
	0, 0, 0, 1742, 0, 0, 0, 0, 0, 0,
	0, 1134, 0, 0, 1122, 1123, 1124, 1137, 0, 1121,
	1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118, 0, 0,
	0, 0, 0, 1108, 1109, 1694, 1128, 1129, 1130, 1138,
	1139, 1140, 0, 0, 0, 0, 0, 0, 0, 0,
	1131, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	1142, 0, 0, 0, 0, 1108, 1109, 0, 1128, 1129,
	1130, 1138, 1139, 1140, 0, 0, 0, 0, 0, 0,
	1110, 0, 1131, 0, 0, 0, 1125, 0, 0, 1111,
	0, 0, 1142, 0, 0, 0, 0, 1108, 1109, 0,
	1128, 1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0,
	0, 0, 1110, 0, 1131, 0, 0, 0, 1125, 0,
	0, 1111, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	1125, 0, 0, 0, 0, 1135, 1143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1133, 0, 0, 0, 1135, 1143, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 1133, 0, 0, 0, 1135,
	1143, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1132, 1133, 0, 0,
	0, 0, 0, 1126, 0, 0, 0, 1127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1136, 0, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 0, 1136, 1122, 1123, 1124, 1137,
	0, 1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118,
	0, 0, 0, 0, 2222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1134, 0, 0, 1122, 1123,
	1124, 1137, 0, 1121, 1119, 1120, 1112, 1113, 1114, 1115,
	1117, 1118, 0, 0, 0, 0, 2167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 0, 0,
	1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113,
	1114, 1115, 1117, 1118, 0, 0, 1108, 1109, 2162, 1128,
	1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 1142, 0, 0, 0, 0, 1108, 1109,
	0, 1128, 1129, 1130, 1138, 1139, 1140, 0, 0, 0,
	0, 0, 0, 1110, 0, 1131, 0, 0, 0, 1125,
	0, 0, 1111, 0, 0, 1142, 0, 0, 0, 0,
	1108, 1109, 0, 1128, 1129, 1130, 1138, 1139, 1140, 0,
	0, 0, 0, 0, 0, 1110, 0, 1131, 0, 0,
	0, 1125, 0, 0, 1111, 0, 0, 1142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 1125, 0, 0, 0, 0, 1135, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1133, 0, 0, 0,
	1135, 1143, 1126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 1133, 0,
	0, 0, 1135, 1143, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1132,
	1133, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	1127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 0, 1136, 1122,
	1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113, 1114,
	1115, 1117, 1118, 0, 0, 0, 0, 2158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 0,
	0, 1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112,
	1113, 1114, 1115, 1117, 1118, 0, 0, 0, 0, 2097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1134, 0, 0, 1122, 1123, 1124, 1137, 0, 1121, 1119,
	1120, 1112, 1113, 1114, 1115, 1117, 1118, 0, 0, 1108,
	1109, 2075, 1128, 1129, 1130, 1138, 1139, 1140, 0, 0,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 1142, 0, 0, 0,
	0, 1108, 1109, 0, 1128, 1129, 1130, 1138, 1139, 1140,
	0, 0, 0, 0, 0, 0, 1110, 0, 1131, 0,
	0, 0, 1125, 0, 0, 1111, 0, 0, 1142, 0,
	0, 0, 0, 1108, 1109, 0, 1128, 1129, 1130, 1138,
	1139, 1140, 0, 0, 0, 0, 0, 0, 1110, 0,
	1131, 0, 0, 0, 1125, 0, 0, 1111, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 0, 1125, 0, 0, 0,
	0, 1135, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1133,
	0, 0, 0, 1135, 1143, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 1133, 0, 0, 0, 1135, 1143, 1126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1132, 1133, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1136, 0, 0,
	0, 0, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1134,
	0, 1136, 1122, 1123, 1124, 1137, 0, 1121, 1119, 1120,
	1112, 1113, 1114, 1115, 1117, 1118, 0, 0, 0, 0,
	2074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1134, 0, 0, 1122, 1123, 1124, 1137, 0, 1121,
	1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118, 0, 0,
	0, 0, 1964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 0, 0, 1122, 1123, 1124, 1137,
	0, 1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118,
	0, 0, 1108, 1109, 1898, 1128, 1129, 1130, 1138, 1139,
	1140, 0, 0, 0, 0, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 1142,
	0, 0, 0, 0, 1108, 1109, 0, 1128, 1129, 1130,
	1138, 1139, 1140, 0, 0, 0, 0, 0, 0, 1110,
	0, 1131, 0, 0, 0, 1125, 0, 0, 1111, 0,
	0, 1142, 0, 0, 0, 0, 1108, 1109, 0, 1128,
	1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0, 0,
	0, 1110, 0, 1131, 0, 0, 0, 1125, 0, 0,
	1111, 0, 0, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 1125,
	0, 0, 0, 0, 1135, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1133, 0, 0, 0, 1135, 1143, 1126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 1141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1132, 1133, 0, 0, 0, 1135, 1143,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1132, 1133, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1136, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1134, 0, 1136, 1122, 1123, 1124, 1137, 0,
	1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118, 0,
	0, 0, 0, 1882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1134, 0, 0, 1122, 1123, 1124,
	1137, 0, 1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117,
	1118, 0, 0, 0, 0, 1833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 0, 0, 1122,
	1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113, 1114,
	1115, 1117, 1118, 0, 0, 1108, 1109, 1437, 1128, 1129,
	1130, 1138, 1139, 1140, 0, 0, 0, 0, 0, 0,
	0, 0, 1131, 0, 0, 0, 0, 0, 0, 1111,
	0, 0, 1142, 0, 0, 0, 0, 1108, 1109, 0,
	1128, 1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0,
	0, 0, 1110, 0, 1131, 0, 0, 0, 1125, 0,
	0, 1111, 0, 0, 1142, 0, 0, 0, 0, 1108,
	1109, 0, 1128, 1129, 1130, 1138, 1139, 1140, 0, 0,
	0, 0, 0, 0, 1110, 0, 1131, 0, 0, 0,
	1125, 0, 0, 1111, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 0, 0,
	0, 0, 1125, 0, 0, 0, 0, 1135, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 2307, 0, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1133, 0, 0, 0, 1135,
	1143, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 1734, 1141, 0, 1733, 0, 0,
	0, 0, 0, 0, 0, 0, 1132, 1133, 0, 0,
	0, 1135, 1143, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 1133,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 1127,
	0, 0, 2306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1136, 0, 0, 0, 0, 0, 0,
	1132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1134, 0, 1136, 1122, 1123,
	1124, 1137, 0, 1121, 1119, 1120, 1112, 1113, 1114, 1115,
	1117, 1118, 0, 0, 1669, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 0, 0,
	1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113,
	1114, 1115, 1117, 1118, 0, 0, 0, 0, 0, 1702,
	1703, 0, 1720, 1721, 1722, 0, 0, 0, 0, 1134,
	0, 0, 1122, 1123, 1124, 1137, 1874, 1121, 1119, 1120,
	1112, 1113, 1114, 1115, 1117, 1118, 1108, 1109, 0, 1128,
	1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 0, 1349, 0,
	1111, 0, 1717, 1142, 0, 0, 0, 1146, 0, 0,
	0, 0, 0, 1108, 1109, 0, 1128, 1129, 1130, 1138,
	1139, 1140, 0, 1110, 0, 0, 0, 0, 0, 1125,
	1131, 0, 0, 0, 1145, 0, 0, 1111, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1708, 0, 0, 0, 0, 1350, 0, 0,
	1110, 0, 0, 0, 0, 0, 1125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 0, 1723, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1135, 1143,
	0, 0, 0, 0, 0, 1718, 0, 0, 0, 0,
	0, 0, 0, 0, 1141, 0, 1116, 1108, 1109, 0,
	1128, 1129, 1130, 1138, 1139, 1140, 1133, 0, 0, 0,
	0, 0, 1126, 0, 1131, 1135, 1143, 0, 0, 0,
	0, 1111, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 1132, 0, 0,
	0, 0, 0, 1133, 1110, 0, 0, 0, 0, 1126,
	1125, 0, 0, 1719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 0, 0, 0, 0,
	1127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1127, 0, 1135,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1136, 1714, 1715, 1716, 1141, 0, 1713, 1711, 1712,
	1704, 1705, 1706, 1707, 1709, 1710, 0, 1133, 0, 0,
	0, 0, 0, 1126, 0, 0, 1134, 0, 0, 1122,
	1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113, 1114,
	1115, 1117, 1118, 0, 0, 0, 0, 0, 1132, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 0, 0, 1122, 1123, 1124, 1137,
	0, 1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118,
	0, 0, 1108, 1109, 0, 1128, 1129, 1130, 1138, 1139,
	1140, 1127, 0, 0, 0, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 1136, 1111, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1110,
	0, 0, 0, 0, 0, 1125, 0, 1108, 1109, 0,
	1128, 1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0,
	0, 0, 0, 0, 1131, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 1142, 0, 0, 1134, 0, 0,
	1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113,
	1114, 1115, 1117, 1118, 1110, 1116, 0, 0, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1135, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1133, 0, 0, 0, 0, 0, 1126, 0,
	1116, 0, 0, 0, 0, 1740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1135,
	1143, 0, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 1108, 1109, 0,
	1128, 1129, 1130, 1138, 1139, 1140, 0, 1133, 0, 0,
	0, 0, 0, 1126, 1131, 0, 0, 0, 1735, 0,
	0, 1111, 0, 0, 1142, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	1136, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	1125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1136, 0, 0, 0, 0,
	1116, 0, 1134, 0, 0, 1122, 1123, 1124, 1137, 0,
	1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118, 1135,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1133, 0, 0,
	0, 0, 0, 1126, 0, 0, 0, 1134, 0, 0,
	1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113,
	1114, 1115, 1117, 1118, 0, 0, 1108, 1109, 1132, 1128,
	1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 0, 1110, 0, 0, 0, 0, 0, 1125,
	0, 0, 0, 0, 0, 1136, 1108, 1109, 0, 1128,
	1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 1693, 0, 0,
	1111, 0, 0, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 0, 1110, 0, 0, 0, 0, 0, 1125,
	0, 0, 0, 0, 0, 0, 0, 1134, 1135, 1143,
	1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113,
	1114, 1115, 1117, 1118, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1133, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 1135, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1700,
	0, 0, 1108, 1109, 1141, 1128, 1129, 1130, 1138, 1139,
	1140, 0, 0, 0, 0, 0, 1133, 0, 0, 1131,
	0, 0, 1126, 0, 0, 0, 1111, 0, 0, 1142,
	1127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1136, 0, 0, 1132, 0, 1110,
	0, 0, 0, 0, 0, 1125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1136, 1116, 1134, 0, 0, 1122,
	1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113, 1114,
	1115, 1117, 1118, 0, 1135, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1108, 1109,
	1141, 1128, 1129, 1130, 1138, 1139, 1140, 0, 0, 0,
	0, 0, 1133, 0, 0, 1131, 0, 0, 1126, 0,
	0, 0, 1111, 0, 0, 1142, 1134, 0, 0, 1122,
	1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113, 1114,
	1115, 1117, 1118, 1132, 0, 1110, 0, 0, 0, 0,
	0, 1125, 0, 0, 0, 0, 0, 1108, 1109, 0,
	1128, 1129, 1130, 1138, 1139, 1140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 1142, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1136, 1116, 0, 0, 1110, 0, 0, 0, 1108, 1109,
	1125, 1128, 1129, 1130, 1138, 1139, 1140, 0, 0, 0,
	1135, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 1142, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1133, 0,
	0, 0, 0, 0, 1126, 1110, 0, 0, 0, 0,
	1116, 1125, 1134, 0, 0, 1122, 1123, 1124, 1137, 0,
	1121, 1119, 1120, 1112, 1113, 1114, 1115, 1117, 1118, 1135,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1133, 0, 0,
	0, 1116, 0, 1126, 0, 0, 0, 0, 0, 0,
	0, 0, 1127, 0, 0, 0, 0, 0, 0, 0,
	1135, 1143, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1133, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1136, 0, 0, 1134, 0,
	0, 1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112,
	1113, 1114, 1115, 1117, 1118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1127, 0, 0, 990, 982, 1007, 974, 998,
	997, 0, 0, 976, 975, 0, 1136, 0, 1009, 1008,
	0, 0, 0, 0, 0, 0, 0, 1134, 0, 0,
	1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112, 1113,
	1114, 1115, 1117, 1118, 0, 0, 0, 0, 0, 0,
	1003, 0, 995, 994, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 992,
	0, 1122, 1123, 1124, 1137, 0, 1121, 1119, 1120, 1112,
	1113, 1114, 1115, 1117, 1118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 984, 986,
	987, 988, 0, 1006, 0, 0, 0, 990, 982, 1007,
	974, 998, 997, 0, 0, 976, 975, 0, 0, 0,
	1009, 1008, 0, 0, 0, 0, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 983, 0, 0, 0, 0, 0,
	0, 0, 1003, 0, 995, 994, 0, 0, 0, 0,
	0, 0, 0, 993, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 1371, 1369, 1370, 1373, 1372, 0, 0,
	0, 992, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 980, 985,
	984, 986, 987, 988, 0, 1006, 0, 1011, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 0,
	1004, 1005, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 996, 0, 0, 1010, 983, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	980, 0, 0, 0, 0, 0, 0, 0, 0, 1011,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 977,
	0, 0, 1004, 1005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 1010,
}
var sqlPact = [...]int{

	160, -1000, -130, -1000, -1000, 1910, 1909, -1000, -1000, 1908,
	-1000, 1907, -1000, 1906, 1903, 1901, 1898, 1897, 1894, 1893,
	1890, -1000, -1000, -1000, -1000, 1889, 1888, 1886, 1884, 899,
	1879, 1875, 1870, 1869, 18566, 18268, 29430, 857, 1868, 1865,
	1863, 1856, 1855, 1851, 754, 836, 1848, 1846, 1844, 1841,
	308, 5455, 29149, 28851, 22065, 2548, 2306, 28553, -1000, -1000,
	1840, 1839, 1837, -1000, 28255, 4194, 1834, 1831, 1828, 1826,
	1825, 1823, 1822, 1814, 1812, 1811, -1000, 1810, 1808, 1806,
	1805, 1804, 27957, 27659, 996, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 191, -1000, 764, 46,
	916, 898, 894, 865, 905, 31116, 29430, 1803, 1720, 224,
	1800, 562, 21767, 160, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 21469, 21171, 27361, 27063, -1000, -1000, -1000, -1000, -1000,
	700, 71, 19718, 29430, -1000, 100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1436,
	450, 100, -1000, -1000, 26765, 26467, 26169, 1367, 25871, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1575, 1501, 1497, 20873,
	-1000, 25573, 25275, 24977, 24679, -1000, -1000, -1000, -1000, -1000,
	-1000, 14433, -1000, -1000, -1000, -1000, 1798, 1797, 1795, 1794,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 367, -1000, 366, -1000, -1000,
	24381, -1000, 1110, -1000, -1000, 72, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1107, -1000, -1000, -1000, -1000, -1000,
	-1000, 1988, 1051, 365, 24100, -1000, 1334, -1000, -1000, 498,
	1677, 661, -1000, 105, -1000, 1338, -1000, 1019, 1662, 1291,
	1569, 1987, 1568, 1566, 1544, 1534, 1531, 1523, 1096, 568,
	1817, 1433, 1432, -1000, -1000, -1000, 494, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 29430, -1000, -1000, -1000, 29430, 22627,
	-1000, -1000, 764, -1000, -1000, -1000, 1302, 1657, 1657, 1657,
	1701, 222, 217, 191, -1000, 944, -1000, -1000, 944, -1000,
	-1000, -1000, -1000, -1000, -1000, 699, 30554, 27, 29430, -1000,
	363, 27, -1000, -1000, 11930, 11930, -1000, -1000, -1000, 362,
	-1000, -1000, -1000, 8981, -1000, -1000, 418, 17663, -1000, -1000,
	1178, 1572, 509, -1000, 856, 1571, -1000, 851, -1000, 947,
	1533, -131, 18861, 19718, 71, 57, -1000, -1000, -1000, 5149,
	18861, 752, 16820, 100, -1000, -1000, -1000, -1000, 361, 1196,
	495, -1000, 226, -1000, 23802, -1000, 495, 1193, -1000, 22627,
	-1000, 29430, -1000, 29430, -1000, 784, 30835, 132, 1532, -1000,
	-1000, 132, 1528, -1000, 130, 1524, -1000, -1000, -1000, 1522,
	-1000, 97, -1000, -1000, -1000, -1000, -1000, -1000, 562, -1000,
	-1000, -1000, -1000, 1751, 35479, -1000, 13207, -1000, -1000, 19142,
	1290, 19142, -1000, -1000, 29430, 13207, -1000, 1749, 1332, -1000,
	-1000, 53, 39, 1219, 1324, 1393, -1000, -1000, -1000, 1625,
	15038, 14743, 104, 5455, -1000, -1000, -1000, -1000, 23504, 1020,
	-1000, 1454, 19142, -1000, 29430, -1000, -1000, 29430, -1000, 29430,
	-1000, 29430, -1000, 29430, -1000, 29430, -1000, 29430, -1000, 1217,
	-1000, -1000, 23223, 22925, -1000, 859, 732, -1000, -1000, -1000,
	140, -1000, -1000, 1302, -1000, 1022, 1346, 12250, 1320, 13207,
	191, -1000, -1000, 191, 191, 13207, -1000, -1000, -1000, 37,
	35, -1000, 30554, -1000, 29430, 27, 1747, 29430, 92, -1000,
	34033, -1000, -1000, 13207, 13207, 13207, 13207, 13207, 958, 408,
	-1000, 360, 359, 6402, -1000, -1000, 1969, -1000, -1000, -1000,
	229, -1000, -1000, 13207, 100, -1000, -1000, -1000, -1000, 358,
	1983, -1000, 541, -1000, -1000, -1000, 502, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1452, 355, 351, -1000,
	-1000, -1000, -1000, 350, 349, 347, 346, 345, 344, 343,
	342, 341, 339, 336, 335, 331, 328, 326, 925, -1000,
	535, -1000, -1000, 535, 535, -1000, 322, 322, 323, -1000,
	-1000, -1000, -1000, 322, -1000, -1000, -1000, 490, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 324, 92, -1000, 88, -1000,
	34922, -1000, -1000, -1000, 29430, -14, 950, -1000, 20575, 1683,
	1646, 1643, 22627, 1728, 46, 1431, 698, 22627, 697, 1716,
	46, 1429, 694, 29430, 29430, 452, -1000, -1000, -1000, -1000,
	-1000, 29430, -1000, -1000, -51, -1000, -1000, 1427, 84, -1000,
	-1000, 20294, 1746, 1518, -1000, 927, -1000, 1744, 29430, -1000,
	1101, 1192, -1000, 726, 1515, 517, 103, 1741, 103, 17101,
	-1000, 29430, -1000, 29430, -1000, -1000, 29430, -1000, 29430, -1000,
	29430, 29430, 29430, 873, 20013, 46, 79, -1000, 1756, -1000,
	-1000, -1000, -1000, 186, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 323, 925, 322, 322, 322, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 490, -1000, -1000, 535, 535, 535,
	-1000, -1000, 67, 34922, 691, -1000, 1426, -1000, 506, 55,
	566, -1000, -1000, 904, 1238, 1205, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1982, -1000, 1961,
	-1000, -1000, 1968, -1000, 25, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 25, -1000, 5455, -1000, -1000, -1000,
	-1000, -1000, -1000, 29430, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 29430, 29430, 29430,
	-1000, 22627, -1000, -1000, -1000, -1000, 34922, -1000, 465, -1000,
	-1000, 34922, 798, 1352, -1000, 1352, 14, -1000, 33996, 904,
	1238, -1000, -1000, 320, 48, 517, 11930, 16224, 35367, 35479,
	5455, 717, 13207, 13207, 13207, 13207, 13207, 13207, 13207, 13207,
	13207, 13207, 13207, 13207, 13207, 13207, 13207, 13207, 13207, 13207,
	13207, 13207, 13207, 13207, 1336, 13207, 689, 13207, 13207, 13207,
	13207, 1185, 981, 300, 1033, 5455, -1000, -1000, 1951, 1951,
	1951, 35117, 35117, 318, 408, -1000, 13207, -1000, 11611, 217,
	33296, 7, -1000, -1000, -1000, 7360, 529, 34922, 100, 5763,
	-1000, 1967, 778, 1464, 1400, 319, 446, 438, 13207, 13207,
	11292, 10960, 10628, 13526, 10296, 13207, 6721, 13207, 13207, 13207,
	13207, 9964, 9632, -1000, 317, -1000, -1000, -1000, -1000, 1964,
	-1000, -1000, 1958, -1000, 715, 709, 1956, 517, 8981, -1000,
	214, 824, 29430, 29430, 29430, -1000, -1000, 1189, 30273, 1179,
	35479, 29430, -1000, 316, 312, 1331, 1319, 29430, 29430, 29992,
	29711, 29430, 1028, 46, -1000, 307, 29430, 847, 29430, 46,
	-1000, 302, 29430, 841, -1000, 1389, 1118, -1000, 513, 18861,
	750, 1424, 29430, 200, 44, -13, 35479, -1000, -1000, -1000,
	-1000, -1000, 29430, 397, 29430, 46, 29430, 1981, 46, 29430,
	1506, 1535, 461, 29430, 808, 13207, 1081, -1000, 15926, 540,
	29430, 808, 68, -1000, -1000, -1000, 469, 29430, -1000, -1000,
	132, 132, -1000, 130, -1000, -1000, -1000, -1000, -1000, 1791,
	1786, 1783, 1778, -1000, 35479, 404, 402, -1000, 1947, 683,
	-1000, 680, 678, 670, -1000, 301, -1000, 13207, 29430, 29430,
	-1000, 1238, -1000, -1000, -1000, 803, -1000, 870, -1000, -1000,
	-1000, -1000, 15333, -1000, -27, -1000, -1000, -1000, 452, -1000,
	798, -1000, 13207, 1945, -1000, -1000, -1000, 13207, -1000, -1000,
	-1000, -1000, -1000, 46, -1000, 1397, -1000, -96, -1000, 1743,
	1056, -150, 221, 478, -1000, 15628, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 493, 871, 871, 625,
	625, 625, 625, 1799, 1237, 436, 2403, 261, 261, 261,
	2331, 933, 933, 261, 261, 261, 35117, 35058, 532, 13207,
	13207, 662, 978, 300, 532, 13207, 532, 532, 532, 532,
	-1000, 1234, -1000, -1000, -1000, -1000, 1422, 299, 13526, 13526,
	-1000, -1000, -1000, 6402, 3873, -1000, -1000, -1000, -1000, -1000,
	297, 13207, -1000, 33615, -164, 19, -1000, -1000, 13207, 10,
	-142, -1000, -1000, 738, -1000, 13207, -1000, -1000, -11, 13207,
	13207, 13207, 189, 183, -1000, 948, 296, 295, 13207, -1000,
	-1000, -1000, -1000, 34786, 31761, 182, -1000, 1417, -141, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 181, -1000, 180, -1000,
	34726, -141, 179, 491, -1000, 13526, 13526, 13526, 6402, 293,
	177, -1000, 33679, -141, 34547, 9300, 9300, 9300, 167, 34407,
	13207, -141, 31729, 31697, 4173, 6, 4, -1000, 2, -1000,
	1943, 0, 166, 481, 282, 161, 1397, -1000, -1000, -1000,
	-1000, 656, 652, 1502, -1000, 1166, -1000, 545, -1000, 887,
	13207, 14152, 291, 287, 965, -1000, 1496, 1194, 1495, 1194,
	-1000, -14, 923, -1000, 13207, -1000, 629, -1000, -1000, 13207,
	-1000, 627, 513, 1416, 743, -1000, 1017, -1000, -1000, 744,
	-1000, 1376, -1000, 20294, 286, 29430, 285, -1000, 284, -1000,
	-1000, 281, 29430, 1227, 461, 19437, -1000, 495, -1000, 7040,
	34922, -1000, 808, 1645, -4, -1000, -1000, -1000, 517, 17101,
	16522, 8981, -5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 605, 1941, 158, 1203, 1169, 966, 787, 1936, 34922,
	-27, -27, -1000, -1000, -1000, -1000, -1000, 29430, -1000, 1037,
	33264, -1000, 155, 1394, 1694, -1000, 16522, 1345, 1340, 16522,
	1366, 986, 986, 986, -1000, 280, 170, 399, 478, 4525,
	8662, 22346, 1012, 131, 154, 1743, 13207, 532, 532, 13207,
	13526, 13526, -1000, 532, -1000, -1000, -1000, -1000, -1000, 1413,
	279, 13207, 35479, 33969, 4201, -9, -1000, 8330, -41, -1000,
	13207, -1000, 33232, -1000, -1000, 387, 1504, -1000, 13207, 34352,
	153, 8011, -1000, 34137, -15, -15, -1000, 1980, -1000, 17382,
	525, 1014, 32913, 35367, 35479, -1000, 13207, -1000, -1000, 1412,
	13207, -1000, 35367, 35479, 13526, 13526, 13526, 13526, 13526, 13526,
	13526, 13526, 13526, 13526, 13526, 13526, 13526, 13526, 13526, 13526,
	13526, 13526, 13526, 1300, 13526, 1949, 1949, 1949, -52, 7692,
	-1000, 1450, 1412, 13207, 13207, 35479, 152, 151, 146, -1000,
	13207, -141, 13207, 13207, 13207, -1000, -1000, -1000, 145, -1000,
	1934, -1000, -1000, -1000, -1000, 1394, 29430, 29430, 29430, 1488,
	-1000, 1252, -1000, 32881, -18, -1000, 354, 1667, 13207, -1000,
	-1000, 278, 14152, 29430, -1000, 1354, 1328, 560, 29430, -1000,
	29430, -1000, 29430, 29430, 29430, -19, 29430, -25, 29430, -1000,
	18861, 706, 277, -1000, -1000, 1380, -1000, 14152, 276, 29430,
	20294, 1739, 14152, 1099, 1236, 461, 19437, -1000, 726, -59,
	-1000, -1000, 292, 46, 808, -1000, -88, -1000, 467, -1000,
	391, 390, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	142, -1000, -1000, -1000, -1000, 515, 13207, 13207, 1743, 16522,
	16522, 1102, 1337, 16522, -1000, -1000, -1000, -1000, 389, 373,
	388, 14433, -1000, 478, 22346, -1000, 1931, 1317, -26, -1000,
	-1000, -1000, 29430, 273, -1000, 478, 1742, 532, 3474, 204,
	13207, 35479, 35168, -30, 13207, 13207, -1000, -31, -1000, 13207,
	385, 34922, -1000, -1000, -1000, 34922, 13207, 1972, 13207, 138,
	137, 127, -1000, -1000, -1000, 31397, 13207, 124, -1000, 123,
	122, 34922, 1450, 34922, -1000, -1000, 781, 781, 783, 783,
	783, 783, 1949, 990, 386, 866, 565, 565, 565, 215,
	449, 449, 565, 565, 565, 1410, 1233, 271, 3407, 13207,
	-32, -1000, -1000, -1000, 34922, 34922, 121, -1000, -1000, -1000,
	-141, 3514, 32849, 32530, -1000, 120, 515, -1000, -1000, -1000,
	29430, -1000, 29430, -1000, 5455, 29430, 1407, 1138, -1000, -1000,
	1270, 270, 13526, 29430, -1000, 1015, 14152, 1660, 100, 5455,
	1660, 32498, 5763, -37, -42, 1127, -1000, 1124, 13207, -1000,
	35479, 1194, 1194, -1000, 623, 604, 600, -1000, 597, -1000,
	-94, 17970, 1977, 938, -43, 14152, -44, 119, 46, -50,
	29430, -1000, 461, 19437, -1000, 1535, 1581, 29430, 1639, -1000,
	-1000, 268, -1000, -1000, -1000, -1000, 29430, 34922, -141, -1000,
	1102, -1000, 266, 13207, 16522, -1000, -150, -1000, -68, -1000,
	478, -74, 22346, -1000, 374, -161, -1000, 440, -1000, 478,
	264, 29430, 22346, 13207, 13207, 35168, -75, -1000, 532, 532,
	-1000, 32466, -1000, 34922, -1000, 34137, -1000, -1000, -1000, 931,
	-1000, 32147, -1000, -1000, -1000, -1000, 13526, 1409, 263, 35479,
	32115, -1000, -1000, 13207, -1000, -1000, -1000, -1000, -1000, 1297,
	-1000, -1000, 29430, 1149, -1000, -1000, 13207, 3407, 262, 1376,
	258, -1000, -1000, -1000, -1000, -1000, -1000, 1667, -11, -1000,
	869, -1000, -1000, 34922, 1663, -1000, -1000, 29430, 29430, 248,
	244, -1000, 242, 100, -80, -1000, 428, 29430, 1015, -81,
	-1000, 1376, -1000, 1015, 237, 19437, -1000, 1227, 682, -89,
	29430, -1000, -1000, 6083, -106, -1000, 1736, -1000, 29430, 34922,
	-1000, 478, -1000, 1927, 22346, 873, -1000, -1000, 1317, -1000,
	4841, 22346, 29430, -97, -1000, 532, 532, -1000, -1000, 114,
	1014, 1693, -1000, 2393, 13526, 35479, -99, -1000, 32083, -1000,
	-1000, 1487, 3275, 1208, 29430, -1000, 29430, 1660, 113, 29430,
	548, 5455, -1000, -1000, 13207, 13207, 13207, 1977, -1000, -1000,
	1976, 233, 1376, 1015, -1000, 1376, 14152, -1000, 1236, 780,
	-1000, 517, -1000, 29430, 230, -101, 22346, -1000, -1000, 372,
	-1000, -1000, 1925, -1000, -111, -1000, -1000, 915, 13207, 2393,
	-122, -1000, -1000, 1467, -1000, 1063, 910, 112, -123, -1000,
	-1000, 226, -1000, 13207, -1000, -132, -133, -15, -1000, -1000,
	29430, -1000, 1376, -1000, -134, -1000, 17101, -1000, -1000, -1000,
	-1000, -1000, 478, 370, -1000, 108, 12888, 12888, -141, -1000,
	29430, -1000, 1097, 1084, 770, -1000, -1000, -1000, -1000, -1000,
	1208, 34922, -1000, -1000, 98, -152, -1000, 1015, -128, 22346,
	-1000, -1000, -1000, -1000, 13845, 1031, 819, 33647, -1000, -1000,
	-1000, 1588, -1000, 553, 1214, 1214, 1063, 1972, 1186, 1376,
	-1000, -1000, 1763, -1000, -1000, -1000, -1000, -1000, -1000, 1752,
	-1000, -1000, 1281, -1000, -1000, -1000, -1000, -1000, -1000, 12569,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2331, 2330, 1586, 1620, 2328, 2326, 2325, 2324, 2323,
	2322, 2320, 2317, 2316, 2314, 2312, 2311, 2310, 2309, 2307,
	2304, 2298, 1614, 2297, 2295, 2293, 2291, 2285, 2284, 110,
	1612, 2282, 2281, 2278, 2277, 1605, 27, 1599, 2276, 95,
	2275, 2268, 2266, 108, 2263, 2259, 2252, 2251, 122, 2249,
	2245, 2244, 2243, 91, 2240, 2239, 2238, 2237, 2235, 2234,
	2232, 2231, 2229, 2203, 2201, 2195, 2194, 2192, 2191, 2190,
	2189, 2188, 99, 93, 2187, 30, 2184, 78, 2183, 20,
	155, 2399, 150, 2181, 2176, 2174, 2170, 2169, 50, 112,
	105, 2165, 151, 2163, 2162, 56, 31, 32, 9, 2161,
	137, 127, 983, 19, 2158, 2155, 152, 168, 2143, 24,
	34, 1017, 164, 163, 141, 130, 2142, 2141, 2140, 2138,
	57, 2136, 13, 2130, 2127, 10, 71, 17, 2123, 76,
	47, 2119, 2115, 139, 2114, 70, 117, 1508, 116, 140,
	243, 2113, 77, 11, 64, 2112, 2111, 145, 43, 2110,
	41, 81, 159, 2107, 72, 171, 73, 25, 68, 119,
	2106, 2105, 2104, 96, 2098, 118, 63, 2094, 2093, 85,
	2092, 149, 154, 2090, 2087, 97, 2086, 142, 2085, 2084,
	161, 169, 160, 167, 2080, 2078, 5, 49, 75, 15,
	1517, 1500, 125, 62, 22, 18, 2077, 1352, 870, 1179,
	38, 86, 61, 44, 87, 60, 69, 158, 67, 2076,
	2075, 124, 2074, 2070, 2069, 2068, 2067, 82, 2064, 2060,
	74, 157, 16, 12, 26, 102, 42, 29, 88, 136,
	165, 126, 2058, 98, 129, 51, 101, 2056, 2052, 1756,
	138, 2051, 2048, 2044, 1710, 1698, 1696, 1611, 2040, 2039,
	1624, 1572, 2038, 2035, 66, 2034, 131, 128, 2032, 156,
	423, 28, 2031, 48, 46, 115, 2029, 114, 59, 0,
	1114, 189, 2028, 146, 79, 2027, 2026, 2024, 2023, 21,
	2, 6, 3, 8, 4, 121, 104, 2022, 2019, 148,
	39, 80, 2015, 166, 2014, 2013, 2011, 45, 2010, 23,
	2007, 14, 2006, 2005, 7, 1, 2003, 2002, 147, 1999,
	103, 1997, 1735, 1995, 162, 1994, 1993, 1637, 33, 89,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 6, 6, 6, 6, 6,
	9, 9, 10, 16, 13, 18, 12, 12, 15, 15,
	90, 90, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 87, 87, 92,
	92, 92, 94, 94, 91, 91, 86, 86, 20, 20,
	46, 46, 267, 267, 268, 268, 74, 74, 78, 78,
	75, 76, 76, 77, 77, 21, 21, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 29, 29, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 34, 34, 34, 33, 33, 33, 32,
	32, 32, 31, 31, 31, 139, 139, 138, 138, 141,
	141, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 235,
	235, 234, 38, 38, 209, 209, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 40, 40, 164, 164, 41,
	41, 41, 41, 41, 42, 42, 47, 47, 308, 308,
	308, 312, 312, 313, 313, 314, 314, 314, 314, 314,
	314, 314, 310, 310, 45, 45, 45, 50, 50, 50,
	50, 50, 50, 50, 50, 52, 52, 184, 51, 51,
	51, 185, 185, 185, 185, 182, 182, 182, 182, 101,
	181, 181, 181, 181, 181, 180, 180, 180, 180, 260,
	259, 259, 265, 265, 265, 117, 117, 117, 117, 117,
	118, 118, 118, 258, 258, 258, 258, 266, 266, 266,
	266, 266, 266, 119, 119, 119, 264, 264, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 62, 62, 62, 107, 107, 107,
	107, 107, 58, 58, 58, 58, 58, 60, 60, 54,
	54, 59, 59, 55, 55, 55, 55, 61, 61, 61,
	61, 61, 61, 63, 63, 63, 65, 65, 65, 65,
	56, 56, 57, 57, 66, 66, 64, 64, 64, 37,
	309, 309, 311, 311, 25, 25, 26, 26, 120, 120,
	121, 121, 188, 188, 188, 188, 122, 122, 93, 93,
	93, 187, 277, 277, 278, 278, 278, 278, 278, 278,
	279, 279, 279, 279, 279, 279, 279, 275, 275, 276,
	273, 273, 274, 274, 274, 274, 315, 315, 186, 186,
	125, 125, 282, 282, 282, 282, 280, 280, 280, 280,
	280, 283, 281, 284, 284, 284, 284, 284, 221, 221,
	221, 71, 71, 27, 27, 99, 99, 28, 28, 24,
	24, 24, 168, 168, 129, 129, 226, 226, 226, 110,
	110, 88, 88, 88, 14, 11, 11, 11, 11, 11,
	11, 19, 19, 17, 17, 169, 169, 170, 170, 44,
	44, 49, 49, 67, 67, 67, 67, 67, 67, 68,
	68, 68, 68, 70, 70, 70, 70, 69, 69, 317,
	317, 105, 105, 105, 105, 106, 106, 183, 183, 183,
	183, 183, 100, 23, 23, 23, 95, 95, 96, 96,
	97, 97, 98, 98, 318, 318, 43, 43, 43, 73,
	73, 113, 113, 177, 177, 177, 179, 179, 178, 178,
	178, 154, 154, 154, 72, 72, 134, 134, 143, 143,
	144, 144, 232, 145, 145, 48, 48, 81, 81, 79,
	79, 79, 79, 79, 79, 80, 80, 82, 82, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 85,
	85, 290, 290, 290, 293, 293, 289, 291, 291, 292,
	292, 316, 316, 155, 155, 155, 124, 123, 123, 127,
	127, 126, 128, 128, 225, 152, 152, 152, 152, 171,
	171, 172, 172, 173, 173, 174, 174, 174, 175, 175,
	176, 176, 151, 151, 205, 205, 84, 84, 84, 133,
	133, 133, 135, 135, 195, 195, 195, 196, 196, 194,
	194, 194, 194, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 306, 306, 306, 307, 307, 224,
	224, 228, 228, 228, 228, 228, 228, 222, 222, 222,
	222, 223, 223, 233, 233, 158, 158, 158, 158, 156,
	156, 157, 157, 229, 229, 229, 229, 153, 153, 230,
	230, 230, 189, 189, 236, 236, 236, 254, 254, 132,
	132, 132, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 238,
	238, 238, 238, 240, 240, 240, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	253, 253, 253, 253, 253, 241, 241, 248, 248, 249,
	249, 250, 251, 242, 242, 243, 243, 244, 245, 252,
	252, 252, 252, 256, 256, 246, 246, 246, 246, 246,
	247, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 166, 166, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 199,
	199, 199, 199, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 285, 285, 285, 285, 285, 285,
	285, 285, 287, 287, 288, 288, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 294, 294, 295, 295, 297, 297, 298, 298, 299,
	300, 300, 300, 301, 302, 302, 296, 296, 303, 303,
	303, 304, 304, 305, 305, 305, 305, 305, 211, 211,
	211, 212, 212, 213, 219, 219, 219, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 108, 108, 108, 108, 108, 140, 140,
	208, 208, 206, 206, 206, 210, 210, 159, 159, 255,
	255, 255, 255, 255, 255, 255, 160, 160, 160, 167,
	161, 161, 162, 162, 162, 162, 162, 162, 202, 203,
	163, 163, 163, 204, 204, 214, 218, 218, 217, 216,
	216, 215, 215, 192, 192, 193, 193, 191, 190, 148,
	148, 147, 147, 146, 146, 319, 319, 220, 220, 149,
	149, 150, 142, 142, 231, 231, 231, 231, 136, 136,
	115, 115, 137, 137, 111, 111, 114, 114, 112, 112,
	112, 112, 130, 130, 131, 131, 109, 109, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 257,
	257, 257, 207, 102, 102, 102, 103, 103, 104, 104,
	262, 262, 262, 263, 263, 263, 263, 261, 261, 261,
	261, 261, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 0, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 3, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	4, 6, 6, 6, 5, 5, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 2, 7,
	2, 6, 1, 1, 1, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 4, 6, 7, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 3, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 1, 3, 1, 2, 2,
	3, 2, 2, 5, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	3, 1, 2, 5, 3, 0, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 0, 2,
	2, 3, 2, 3, 6, 2, 6, 2, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 2, 3, 1, 2, 1,
	2, 1, 2, 1, 3, 3, 4, 5, 3, 2,
	6, 3, 3, 4, 4, 1, 1, 3, 3, 2,
	1, 1, 3, 2, 3, 3, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 3, 2, 3, 1, 1, 1,
	1, 2, 3, 4, 4, 4, 4, 3, 4, 3,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 2, 3, 4, 3, 3,
	4, 4, 4, 4, 3, 2, 5, 5, 6, 2,
	2, 0, 2, 0, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 2, 4, 3, 3, 0, 6, 3, 4,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 3, 8, 11, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 3, 6, 7, 3,
	6, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 3, 8, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 1, 2, 2,
	8, 8, 1, 2, 1, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 7, 4, 6, 3, 3, 1, 5,
	6, 9, 3, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -46, -21, -22, -29,
	-30, -35, -37, -38, -40, -41, -42, -43, -73, -47,
	-49, -48, -50, -53, -67, -44, -45, -71, -72, 24,
	-5, -6, -7, -8, 35, 225, 67, 69, -23, -24,
	-25, -26, -27, -28, -292, 95, -31, -32, -33, -34,
	104, 126, 207, 102, 88, 120, 228, 235, -79, -81,
	-51, -52, -185, -184, 244, 247, -54, -55, -56, -57,
	-58, -59, -60, -61, -62, -63, -64, -65, -66, -68,
	-70, -69, 223, 224, 281, -9, -10, -13, -12, -11,
	-16, -18, -15, -17, -19, -14, -290, -82, -80, 330,
	36, 256, 61, 98, 230, 305, 311, -83, 239, -84,
	-85, 297, 265, 333, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	2, 265, 300, 81, 135, 20, 20, 20, 20, 2,
	-308, -137, 265, 81, -112, -102, 323, 4, -269, -271,
	21, 22, 24, 34, 35, 36, 41, 45, 48, 55,
	60, 61, 62, 64, 66, 67, 68, 71, 72, 79,
	80, 82, 84, 88, 90, 94, 95, 97, 102, 103,
	104, 110, 111, 114, 116, 121, 126, 127, 128, 129,
	136, 139, 141, 134, 149, 151, 152, 155, 154, 159,
	162, 165, 167, 168, 169, 172, 170, 174, 175, 177,
	176, 182, 184, 185, 187, 190, 193, 196, 199, 200,
	201, 202, 205, 207, 209, 210, 211, 213, 214, 216,
	217, 218, 219, 220, 223, 221, 222, 224, 225, 226,
	228, 230, 231, 233, 245, 246, 257, 235, 236, 237,
	238, 241, 242, 244, 247, 249, 252, 255, 256, 258,
	261, 259, 254, 264, 266, 267, 268, 269, 270, 277,
	281, 282, 283, 284, 287, 288, 289, 291, 294, 295,
	296, 301, 306, 307, 308, 309, 29, 37, 38, 39,
	40, 42, 43, 46, 47, 51, 52, 53, 56, 83,
	85, 86, 101, 105, 106, 112, 122, 124, 130, 131,
	140, 142, 143, 144, 146, 157, 171, 181, 183, 194,
	198, 204, 206, 212, 232, 240, 250, 251, 260, 262,
	272, 273, 274, 278, 279, 293, 297, 298, 2, -308,
	-111, -102, 81, 2, 265, 290, 300, -168, 81, 286,
	20, 20, 20, 20, 20, 20, 90, 139, 289, 288,
	2, 300, 265, 135, 81, 20, 20, 20, 20, 2,
	-36, 330, -48, -22, -30, -4, -43, -73, -72, -29,
	-53, -37, -35, -261, 4, -269, -271, -270, -272, 58,
	70, 119, 138, 132, 148, 150, 158, 160, 173, 195,
	197, 229, 248, 23, 25, 26, 27, 28, 30, 31,
	32, 33, 44, 49, 50, 54, 57, 59, 65, 69,
	73, 74, 75, 76, 77, 78, 87, 89, 91, 92,
	93, 96, 98, 100, 107, 108, 109, 115, 117, 118,
	120, 123, 125, 133, 135, 137, 145, 147, 153, 156,
	161, 163, 164, 178, 179, 180, 186, 188, 189, 191,
	192, 203, 208, 215, 227, 239, 243, 253, 263, 265,
	271, 275, 276, 280, 285, 286, 290, 292, 299, 300,
	302, 303, 304, 305, 2, -102, 2, -102, 2, -102,
	207, 23, -312, 2, 23, -313, -314, 69, 95, 120,
	239, 139, 90, 288, -312, 2, 2, -102, 20, 20,
	20, 162, 55, 232, 242, -181, 277, 2, -180, 272,
	172, -260, -138, -102, 2, 242, -107, 55, 23, 121,
	60, 82, 65, 66, 135, 136, 152, 266, 277, 69,
	291, 268, 103, 4, 243, 81, 272, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 2, -106, 235, -102, 2, -260, 242, -316,
	2, 265, -80, -82, -81, -126, -127, 285, 145, 100,
	192, -79, -81, -290, 2, -317, 277, 2, 277, 2,
	-317, 2, -317, 2, -105, 277, 275, -293, 213, -289,
	-102, -293, 20, 2, -123, -124, 23, 92, 20, 334,
	20, 2, -150, 330, 2, -229, -111, 189, -3, 2,
	-229, 130, -111, 2, -229, 130, 2, -102, 2, -114,
	130, -111, 275, 334, -137, -130, -102, -191, -190, 332,
	118, 118, 330, -147, -148, -190, -191, 2, -138, 130,
	-102, 2, -138, 2, 135, 2, -102, 130, 2, 118,
	2, 147, 2, 147, 2, -230, -229, -139, 130, 2,
	-138, -139, 130, 2, -115, 130, 2, -114, -102, 130,
	2, -235, -234, -263, 4, -269, -271, -270, 297, 20,
	20, 20, 20, -209, 330, -164, 330, -102, 23, 188,
	334, 188, 2, 2, 245, 330, -181, 53, 277, 2,
	-182, -100, -101, 149, 209, 309, -119, 5, 87, 118,
	275, 315, -141, 332, 2, -107, 23, 2, 245, 55,
	2, -309, 188, 2, 118, 2, 2, 118, 2, 118,
	2, 118, 2, 118, 2, 118, 2, 118, 2, 149,
	209, 257, 265, 300, 2, 118, 118, 309, -102, -260,
	-153, -229, -126, -127, -152, -171, -172, 161, 109, 186,
	-155, 23, 92, -155, -155, 45, 331, 331, -183, -100,
	-101, -183, 275, -106, 334, -293, -131, 330, -142, -231,
	-197, 323, -199, 321, 322, 316, 178, 310, -211, -201,
	-214, 101, 232, 330, -111, -200, 335, 9, -287, -81,
	30, -212, -213, 49, -102, 7, 8, 5, 6, -109,
	-238, -207, -247, 280, 107, 180, -285, -286, 4, -269,
	-262, -239, -249, -243, -246, 146, 58, 74, 77, 75,
	78, 243, 290, 50, 29, 105, 106, 198, 204, 262,
	278, 279, 130, 181, 131, 56, 122, 157, 94, 38,
	40, 42, 43, 51, 52, 83, 85, 86, 112, 140,
	142, 143, 144, 183, 212, 250, 260, 273, 274, 298,
	-270, -250, -251, -244, -245, -252, -142, -150, -149, -220,
	-197, 87, 323, -111, 330, -90, 221, -89, 22, 24,
	95, 295, 101, 254, 269, 236, 221, 101, 221, 254,
	269, 236, 221, 101, 335, -267, -264, 9, -263, 5,
	-112, 334, -261, 323, -268, -267, 258, 331, -136, -111,
	-148, 330, -125, 178, -99, -291, 305, -125, 330, 2,
	-103, 130, -102, -291, 178, -230, -113, -111, -113, 244,
	-102, 31, -92, 334, 48, 226, 101, -92, 101, -92,
	334, 101, 101, 331, 334, 31, -208, -236, -237, -239,
	-248, -242, -246, -247, 41, 47, 46, 270, 171, 240,
	251, 293, 39, 187, 141, 140, 142, 143, 144, 250,
	38, 212, 112, 94, 86, 85, 183, 43, 42, -250,
	-251, -244, -245, 83, 273, 274, 146, 40, 52, 51,
	298, 260, -140, -197, -308, -314, -308, -180, -260, -140,
	31, 2, -182, 334, 334, 159, -118, 165, 177, 127,
	-266, 5, 4, -207, -221, 87, 162, -247, 8, 322,
	-257, 7, 321, 72, -259, 87, -265, -258, -221, 9,
	280, 107, 188, -264, -259, 87, 332, -261, -138, 23,
	2, 246, -311, 115, -308, -260, -260, -260, -260, -260,
	-260, -102, 159, 2, -260, 2, -260, 265, 135, 265,
	-92, 334, -152, -172, -171, -173, -197, 23, -176, 111,
	174, -197, -199, -80, -80, -80, -128, -225, -197, 334,
	334, -106, -289, 31, -130, -133, 334, 118, 10, 11,
	57, 34, 321, 322, 323, 324, 113, 325, 326, 319,
	320, 318, 313, 314, 315, 63, 166, 234, 13, 14,
	15, 27, 191, 160, 310, 132, 248, 316, 16, 17,
	18, 148, 37, 133, -108, 31, 4, -116, -197, -197,
	-197, -197, -197, 197, -146, -192, 328, -81, 330, -81,
	-197, -140, 7, -81, -206, 328, -215, -197, -147, 330,
	5, 330, 5, -294, 306, 115, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 206, -256, 301, -256, -256, -240, 330,
	-240, -241, 330, -240, 307, 311, 330, -133, 334, 331,
	-111, 334, 275, -169, 65, 59, -187, 130, 59, -273,
	-102, 65, -274, 54, 286, 208, 117, -169, 65, -169,
	65, 65, -229, 34, -48, 118, 275, -229, 275, 34,
	-48, 118, 275, -114, -102, -233, 312, -102, -233, 334,
	118, 331, 334, -120, -130, -121, -102, -188, -187, -275,
	-276, -273, 135, 286, 108, 31, 101, 202, 31, 188,
	178, -95, 267, 101, -189, 303, -177, -48, 330, 87,
	31, -177, -143, -144, -232, -145, -111, 330, -102, -138,
	-139, -139, -114, -115, -102, -36, -234, -39, -48, -43,
	-73, -72, -29, 331, 334, -132, 30, -165, 330, 308,
	169, 84, 128, 168, -166, 238, 331, 334, 275, 118,
	331, 277, -101, -100, -117, 211, 252, 222, 241, 8,
	7, 7, 334, -261, -310, -102, -111, -114, -111, -229,
	-174, -257, 330, 322, -175, 232, 233, 334, -88, 32,
	91, -101, -100, 330, 331, -189, -231, -135, 2, -227,
	328, -229, -111, -81, -228, 330, -254, -236, -253, 217,
	218, 216, 220, 219, -236, -261, 272, -197, -197, -197,
	-197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
	-197, -197, -197, -197, -197, -197, -197, -197, -197, 160,
	132, 248, 37, 133, -197, 275, -197, -197, -197, -197,
	170, 178, 180, 280, 107, 287, 92, 184, -319, 263,
	33, -204, -81, 330, -219, 28, 253, 23, -261, -211,
	232, 330, -192, -197, -193, -140, 331, 331, 334, -140,
	-210, 329, -206, -218, -217, 302, 2, 331, -140, 299,
	23, 92, 323, 7, -165, -295, 110, 123, 330, 331,
	2, 331, 2, -197, -197, -159, 2, -255, -140, 4,
	308, 169, 84, 128, 168, 238, -159, 2, -160, 2,
	-197, -140, -161, -198, -199, 321, 322, 316, 330, 232,
	-162, 2, -197, -140, -197, 44, 156, 276, -163, -197,
	118, -140, -197, -197, -197, -140, -140, 2, -140, 2,
	330, 7, 7, 272, 272, 7, -189, -220, 331, -89,
	-111, -102, -102, 178, -187, 130, -94, 178, -236, -102,
	330, 330, 151, 151, -102, -102, 130, -102, 130, -102,
	-102, -90, 221, -48, 330, -111, 221, -102, -48, 330,
	-102, 221, -74, 129, 184, -77, 305, -267, 258, 118,
	-111, 331, 331, 334, -103, 135, -103, -48, -138, 5,
	-48, -111, 101, -96, 97, -318, 315, -102, -154, 227,
	-197, -154, -179, 188, -136, 297, -102, -154, -134, 334,
	118, 315, -136, -92, -92, -92, 20, 20, 20, 20,
	-236, 328, 328, 7, 275, 275, 275, 275, 330, -197,
	-310, -310, -100, 284, 62, 211, -265, 334, -233, -175,
	-197, -225, -39, -151, 123, -233, 334, 70, -158, 150,
	173, 119, 158, 229, 138, 7, 104, -53, -194, 335,
	330, -224, 311, -81, -228, -227, 309, -197, -197, 275,
	-319, 263, -204, -197, 170, 180, 280, 107, 287, 92,
	184, 118, 330, -198, -198, -140, -201, 330, -140, 329,
	338, 331, -197, 329, 329, 334, -216, -217, 96, -197,
	-127, 334, -126, -197, -140, -140, 331, 331, -300, 196,
	330, 330, -197, 31, 334, 331, 118, 331, 331, -167,
	203, 331, 10, 11, 321, 322, 323, 324, 113, 325,
	326, 319, 320, 318, 313, 314, 315, 63, 166, 234,
	13, 14, 15, 148, 133, -198, -198, -198, -140, 330,
	331, -202, -203, 118, 115, 31, -163, -163, -163, 331,
	118, -140, 334, 334, 334, 331, 331, 331, 7, 331,
	334, 331, 309, 309, 331, -151, 275, 275, 101, 178,
	294, -277, -274, -197, -129, -226, -102, -288, 330, -285,
	-286, -109, 330, 330, -87, 95, 244, -170, 101, -92,
	101, -92, 275, -169, 65, -140, 275, -140, 275, -77,
	118, 264, 190, 258, -122, 134, -188, 330, -103, 330,
	330, -125, 330, -102, -97, 155, -318, -264, -291, -142,
	179, -154, 64, 331, -189, -144, -135, -220, 331, 329,
	7, 7, 331, 169, 128, 168, -166, 168, -166, -166,
	7, -102, 189, 331, 331, -205, 125, 45, -227, 150,
	150, -227, -158, 150, -156, 195, -156, -156, -306, 330,
	-36, 330, 2, 329, -224, -261, 328, 336, -140, 2,
	-223, -222, 31, -102, 193, 331, -197, -197, -198, -198,
	118, 330, -197, -208, 27, 27, 331, -140, 331, 334,
	-193, -197, 331, -206, 98, -197, 271, 331, 299, -127,
	-127, -127, 5, -301, -102, 330, 303, -126, 331, -254,
	-236, -197, -202, -197, -254, -236, -198, -198, -198, -198,
	-198, -198, -198, -198, -198, -198, -198, -198, -198, -198,
	-198, -198, -198, -198, -198, 92, 178, 184, -198, 334,
	-140, 331, -203, -202, -197, -197, -236, 331, 331, 331,
	-140, -197, -197, -197, 331, 7, -205, -102, -102, -187,
	101, -278, 65, -279, 57, 108, 69, 178, 180, 286,
	208, 54, 87, 215, 331, 331, 334, -110, -147, 57,
	-110, -197, 330, -129, -130, 178, 87, 178, 87, 80,
	282, -102, -102, -111, -102, -102, 331, -111, 331, -102,
	-268, 272, 330, 133, -129, 330, -130, -120, 31, -129,
	188, -98, 154, -318, -264, -95, -178, 330, 188, -48,
	-154, 315, 329, 329, 331, -297, 304, -197, -140, -227,
	-227, -157, 292, 188, 150, -227, 329, 331, -307, 7,
	329, -235, -224, -223, 7, -196, -195, 116, 176, 331,
	-102, 330, -224, 27, 27, -197, -208, 331, -197, -197,
	331, -197, 329, -197, 5, -197, 331, 331, 331, -302,
	-102, -197, 331, 331, 331, -203, 118, 92, 184, 330,
	-197, 331, 331, 334, 331, 331, 331, -297, -187, -102,
	-261, -102, 108, 130, 180, 151, 330, -198, -111, -186,
	-315, 68, 261, -226, -88, -261, -88, 331, -140, 331,
	331, 180, 180, -197, -236, -92, -92, 275, 275, 275,
	275, -200, -109, -102, -76, -75, 5, 199, 331, -129,
	331, 331, -48, 331, -111, -318, -264, -96, 93, -130,
	65, -150, -81, 330, -298, -299, -102, -157, 330, -197,
	-227, -194, 331, 334, -224, 331, -223, 329, 334, 337,
	315, -224, 330, -130, -222, -197, -197, 331, 331, -127,
	-296, 201, 331, -198, 118, 330, -208, 331, -197, -279,
	-103, 178, -197, -104, 330, -122, 330, -110, -127, 215,
	-91, 57, -102, -102, 330, 330, 330, 334, 331, -78,
	315, -102, -186, 331, -122, -186, 330, -264, -97, 288,
	179, 331, -102, 334, 31, -130, -224, 7, -223, -36,
	-195, -261, 328, -223, -130, 331, 331, -127, 45, -198,
	-208, 331, 331, 101, 331, -282, 167, -102, -130, -88,
	331, -111, -86, 292, -261, -140, -140, -140, -75, 5,
	330, -122, -186, -122, -129, -98, 244, -189, -299, -301,
	331, -222, 329, 7, 331, -303, 210, 233, -140, 331,
	108, -280, -283, -281, 188, 119, 200, 249, 331, 331,
	-125, -197, 331, 331, -127, -130, -122, 331, -143, -224,
	329, 331, -304, -305, 37, 283, 72, -197, -304, -102,
	-281, 188, -283, 188, 288, 90, -282, 331, 331, -186,
	-189, -223, -305, 205, 114, 232, 205, 114, -284, 175,
	226, 48, 244, -284, -280, -93, 48, 226, -122, 27,
	21, 180, 87, -305,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 9, 10, 11,
	13, 14, 16, 17, 19, 21, 23, 25, 27, 29,
	31, 33, 34, 35, 36, 37, 39, 41, 43, 0,
	47, 49, 51, 53, 0, 0, 0, -2, 129, 131,
	133, 135, 138, 140, 0, 0, 145, 147, 149, 151,
	-2, 0, 0, 0, 0, 0, 0, 0, 555, -2,
	237, 239, 241, 243, 0, 0, 299, 301, 303, 305,
	307, 309, 311, 313, 315, 317, 319, 320, 322, 483,
	485, 487, 0, 0, -2, 56, 57, 58, 59, 60,
	66, 67, 68, 69, 62, 64, 589, -2, 600, 0,
	-2, 0, -2, -2, -2, 0, 0, 567, -2, 572,
	574, 0, 0, -2, 6, 8, 12, 15, 18, 20,
	22, 24, 26, 28, 30, 32, 38, 40, 42, 44,
	46, 0, 0, 0, 0, 48, 50, 52, 54, 108,
	0, 218, 0, 1143, 1072, 1078, 1079, 1103, 1104, 1105,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 110, 0,
	0, 1074, 1143, 128, 0, 0, 0, 0, 0, 452,
	130, 132, 134, 136, 139, 141, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 146, 148, 150, 152, 171,
	172, 0, 174, 175, 176, 177, 178, 180, 182, 184,
	186, 187, 188, 369, 1117, 1118, 1119, 1120, 1121, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 192, 195, 205, 208, 209, 210,
	1196, 212, 0, 215, 221, 222, 223, 225, 226, 227,
	228, 229, 230, 231, 0, 217, 481, 482, 238, 240,
	242, -2, -2, 1297, -2, 249, -2, 260, 261, 1303,
	-2, 0, 269, 167, 298, 0, 325, 0, 328, -2,
	0, -2, 0, 0, 0, 0, 0, -2, 0, 0,
	-2, 0, 0, 327, 329, 330, 0, 300, 302, 304,
	306, 308, 310, 312, 314, 316, 318, 321, 323, 484,
	486, 488, 479, 480, 1220, 506, 234, 235, 1225, 0,
	442, 591, -2, 565, 566, -2, 0, 595, 595, 595,
	0, 0, 566, 0, 489, 511, 499, 491, 511, 493,
	494, 495, 496, 497, 498, 501, 0, 581, 1200, 584,
	1085, 582, 568, 569, 0, 0, 597, 596, 573, 0,
	575, 626, 627, 0, 579, 580, 683, 0, 2, 55,
	0, 1281, 683, 61, 0, 1281, 63, 0, 65, 0,
	1281, 1077, 0, 0, 219, 220, 1082, 1080, 1081, 0,
	0, 0, 0, 1075, 1051, 1049, 1050, 137, 421, 1281,
	-2, 444, 421, 448, -2, 513, 588, 1281, 142, 0,
	526, 0, 529, 0, 544, 0, 689, 101, 1281, 155,
	165, 101, 1281, 158, 101, 1281, 161, 1070, 162, 1281,
	164, 0, 189, 191, 1113, 1114, 1115, 1116, -2, 179,
	181, 183, 185, 0, 0, 206, 0, 211, 213, 0,
	0, 0, 244, 245, 0, 0, 248, 1270, -2, 251,
	252, 255, 256, 0, 0, 0, 263, 293, 294, 0,
	0, 0, 168, 0, 324, 326, 328, 332, 0, 0,
	337, 373, 0, 339, 0, 341, 343, 0, 345, 0,
	347, 0, 349, 0, 351, 0, 353, 0, 356, 0,
	358, 359, 0, 0, 364, 0, 0, 331, 505, 236,
	101, 687, -2, 0, 561, 607, 608, 0, 0, 0,
	0, 593, 594, 0, 0, 0, 557, 558, 490, 507,
	508, 492, 0, 503, 0, 583, 0, 0, 631, 1062,
	1066, 1067, 787, 0, 0, 0, 0, 0, 0, 879,
	881, 1275, 1297, 0, 883, 884, 0, 886, 888, 889,
	0, 892, 893, 1042, 1074, 1088, 1089, 1090, 1091, 0,
	0, 1094, 0, 1096, 1097, 1098, 942, 903, -2, -2,
	1086, 719, 720, 721, 722, -2, 1311, 907, 910, 913,
	914, 915, 916, 0, 1259, 1276, 1277, 1293, 1294, 1302,
	1306, 1307, 1281, 1290, 1282, 1271, 1279, 1288, 1148, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1112, 749, 750, 755, 756, 758, 631, 628, 0, 1059,
	1057, 1058, 684, 685, 0, 70, 476, 80, 0, 476,
	476, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 674, 112, 113, 296, 297,
	1073, 0, 1047, 1048, 674, 114, 125, 0, 0, 1068,
	1052, 379, 0, 0, 443, 0, 587, 0, 0, 449,
	0, 1281, 1106, 517, 0, 693, 0, 531, 0, 0,
	690, 0, 153, 0, 99, 100, 0, 156, 0, 159,
	0, 0, 0, 590, 0, 590, 0, 1000, 701, 702,
	703, 704, 705, 784, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 726, 727, 728, 729, 730,
	731, 732, 746, 0, 725, 725, 725, 738, 739, 747,
	748, 753, 754, 765, 766, 768, 770, 764, 764, 764,
	761, 762, 0, 998, 0, 224, 0, 246, 0, 0,
	0, 253, 254, 0, 0, 0, 259, 280, 281, 282,
	262, 287, 288, 289, 290, 291, 292, 0, 438, 0,
	440, 1099, 0, 264, 265, 267, 270, 272, 273, 274,
	283, 284, 285, 286, 266, 268, 0, 169, 333, 334,
	335, 336, 338, 0, 370, 340, 344, 346, 348, 350,
	352, 354, 357, 360, 361, 362, 363, 0, 0, 0,
	441, 0, 564, 605, 606, 609, 613, 614, 617, 620,
	621, 611, 787, 576, 577, 578, 601, 602, 463, 0,
	0, 502, 585, 0, 0, 693, 0, 0, 0, 0,
	0, 0, 977, 978, 979, 980, 981, 982, 985, 986,
	983, 984, 987, 988, 989, 0, 0, 0, 990, 991,
	992, 0, 0, 994, 0, 996, 0, 0, 0, 0,
	0, 0, 1056, 0, 0, 0, 1065, 993, 792, 793,
	794, 816, 817, 0, 880, 1053, 1046, 882, 0, -2,
	998, 0, 885, 890, 891, 0, 0, 1041, -2, 0,
	1093, 0, 784, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1021, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 752, 763, 760, 759, 736, 0,
	735, 733, 0, 737, 0, 0, 0, 693, 0, 1061,
	0, 0, 0, 0, 0, 475, 82, 1281, 0, 103,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 1076, 117, 0, 1083, 124, 0,
	0, 0, 0, 0, 0, 378, 1082, 380, 382, 383,
	384, 385, 1107, 0, 1107, 0, 0, 0, 0, 0,
	0, 519, 525, 0, 543, 0, 543, 533, 0, 0,
	0, 543, 547, 548, 550, 551, 0, 0, 691, 166,
	101, 101, 1071, 101, 163, 173, 190, 193, 196, 197,
	199, 201, 203, 194, 0, 694, 696, 706, 0, 771,
	772, 773, 774, 775, 776, 785, 207, 0, 0, 0,
	247, 0, 257, 258, 512, 0, 277, 0, 279, 439,
	1101, 1100, 0, 170, 372, 232, 366, 367, 674, 688,
	0, 615, 0, 0, 612, 618, 619, 0, 604, 461,
	462, 509, 510, 590, 1084, 623, 1063, 674, 630, 632,
	0, 642, 683, 660, 648, 0, 788, 697, 698, 740,
	741, 742, 743, 744, 789, 790, 0, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, -2, -2, -2,
	808, 809, 810, -2, -2, -2, 814, 815, -2, 995,
	997, 0, 1056, 0, -2, 0, -2, -2, -2, -2,
	828, 0, 830, 833, 835, 837, 0, 0, 0, 0,
	1055, 847, 1033, 0, 0, 974, 975, 976, 1064, 832,
	0, 0, 1054, 1045, 0, 0, -2, 887, 0, 0,
	0, 1004, 1005, 1040, 1036, 0, 894, 895, 600, 0,
	0, 0, 0, 0, 1102, 952, 0, 0, 0, 908,
	909, 911, 912, 0, 0, 0, 920, 0, 1008, -2,
	-2, -2, -2, -2, -2, -2, 0, 922, 0, 924,
	998, 1018, 0, 0, 850, 0, 0, 0, 0, 1297,
	0, 927, 998, 1026, 0, 0, 0, 0, 0, 998,
	0, 1032, 0, 0, 0, 0, 0, 938, 0, 940,
	0, 0, 0, 0, 0, 0, 623, 1060, 686, 81,
	465, 0, 0, 0, 84, 1281, 92, 0, 393, 0,
	0, 0, 0, 0, 478, 93, 1281, 101, 1281, 101,
	94, 71, 476, 72, 0, 471, 0, 464, 73, 0,
	473, 0, 124, 0, 0, 111, 0, 115, 126, 0,
	1069, 387, 420, 0, 0, 1107, 0, 376, 421, 445,
	447, 0, 0, 521, 525, 0, 524, 588, 143, 0,
	692, 527, 543, 0, 0, 535, 532, 530, 693, 0,
	0, 0, 0, 154, 157, 160, 198, 200, 202, 204,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	214, 216, 250, 275, 276, 278, 271, 0, 368, 0,
	0, 603, 0, 625, 0, 629, 0, 0, 0, 0,
	0, 680, 680, 680, 678, 654, -2, 0, 660, 0,
	0, 672, 0, -2, 648, 0, 0, -2, -2, 0,
	0, 0, 848, -2, 829, 831, 834, 836, 838, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 1043,
	1046, -2, 999, 1002, 1003, 0, 0, 1037, 0, 0,
	0, 0, 599, 600, 600, 600, 901, 0, 902, 0,
	0, 0, 0, 0, 0, 919, 0, 921, 923, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 854, 855, 0, 0,
	926, 1024, 1025, 0, 0, 0, 0, 0, 0, 932,
	0, 1031, 0, 0, 0, 936, 937, 939, 0, 723,
	0, 745, 767, 769, 757, 625, 0, 0, 0, 0,
	102, 391, 410, 0, 0, 454, 460, 460, 0, 904,
	905, 0, 0, 0, 86, 0, 0, 0, 0, 90,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 127, 374, 0, 381, 0, 0, 0,
	379, 0, 0, 0, 523, 525, 0, 516, 517, 541,
	542, 528, 540, 0, 543, 549, 546, 552, 0, 699,
	0, 0, 707, 777, 778, 779, 780, 781, 782, 783,
	0, 233, 610, 616, 586, 946, 0, 0, 633, 0,
	0, 0, 0, 0, 675, 679, 676, 677, 0, 0,
	0, 0, 652, 660, 672, 639, 0, 0, 0, 646,
	647, 671, 0, 670, 659, -2, 791, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1034, 0, 969, 0,
	0, 1045, -2, 1006, 1035, 1039, 0, 896, 0, 0,
	0, 0, 1095, 950, 951, 955, 0, 0, 906, 0,
	0, 1007, 1017, 1019, 851, 852, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, -2, -2, -2, 869,
	870, 871, -2, -2, -2, 0, 0, 0, 1020, 0,
	0, 972, 1022, 1023, 1028, 1029, 0, 929, 930, 931,
	1030, 0, 0, 0, 751, 0, 946, 467, 469, 83,
	0, 392, 0, 395, 0, 0, 0, 0, 401, 402,
	0, 0, 0, 0, 412, 419, 0, 463, 1087, 0,
	463, 0, 0, 0, 0, 0, 98, 0, 0, 477,
	0, 101, 101, 466, 0, 0, 0, 472, 0, 474,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 525, 0, 518, 519, 0, 0, 0, 534,
	545, 0, 700, 695, 786, 570, 0, 624, 622, 662,
	0, 664, 0, 0, 0, 666, 642, 655, 0, 657,
	660, 0, 672, 644, 0, 0, 637, 0, 636, 660,
	668, 0, 0, 0, 0, -2, 0, 841, -2, -2,
	968, 999, 1044, 1038, 1092, 600, 897, 899, 900, 957,
	954, 0, 941, 917, 918, 1016, 0, 0, 0, 0,
	999, 971, 928, 0, 934, 935, 724, 571, 85, 0,
	396, 397, 1107, 0, 400, 403, 0, 405, 1109, 387,
	0, 416, 417, 455, 456, 459, 457, 460, 600, 414,
	0, 87, 88, 97, 105, 89, 95, 0, 0, 0,
	0, 673, 0, 0, 0, 121, 119, 0, 419, 0,
	409, 387, 377, 419, 0, 0, 520, 521, 0, 0,
	0, 553, 554, 0, 945, 947, 0, 663, 0, 682,
	665, 660, 656, 0, 672, 590, 653, 640, 0, 641,
	0, 672, 0, 0, 649, -2, -2, 842, 970, 0,
	600, 0, 943, -2, 0, 0, 0, 973, 0, 394,
	398, 0, 0, 425, 0, 413, 0, 463, 0, 0,
	107, 0, 468, 470, 0, 0, 0, 0, 123, 120,
	0, 0, 387, 419, 375, 387, 0, 522, 523, 0,
	537, 693, 539, 0, 0, 0, 0, 658, 650, 0,
	638, 634, 0, 645, 0, 669, 898, 960, 0, -2,
	0, 877, 933, 0, 404, 430, 0, 0, 0, 458,
	896, 421, 91, 0, 104, 0, 0, 600, 122, 118,
	0, 407, 387, 450, 0, 515, 0, 538, 948, 949,
	681, 643, 660, 0, 667, 0, 0, 0, 956, 878,
	0, 406, 426, 427, 0, 422, 423, 424, 1108, 418,
	425, 106, 77, 79, 0, 0, 408, 419, 693, 672,
	635, 953, 958, 961, -2, 1245, 1140, 0, 959, 399,
	428, 0, 429, 0, 0, 0, 430, 0, 390, 387,
	536, 651, 0, 963, 964, 965, 966, 967, 431, 0,
	434, 435, 0, 432, 415, 386, 388, 389, 451, 0,
	433, 436, 437, 962,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 319, 3, 325, 320, 3,
	330, 331, 323, 321, 334, 322, 332, 324, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 338, 333,
	313, 315, 314, 3, 335, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 328, 3, 329, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 336, 318, 337, 316,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 317, 57656, 327, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:823
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:829
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:840
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 8:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:842
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:846
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:849
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:854
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:862
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:866
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:875
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:877
		{
			return helpWith(sqllex, "RESET")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:881
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "ALTER")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:941
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:947
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:953
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:959
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:979
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1025
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1048
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = nil
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = DropCascade
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = DropRestrict
		}
	case 101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = DropDefault
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1120
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1121
		{
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			return unimplemented(sqllex, "alter using")
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1125
		{
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1128
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.str = ""
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1220
		{
			return helpWith(sqllex, "CREATE")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1224
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1226
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1234
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			return helpWith(sqllex, "DELETE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			return helpWith(sqllex, "DROP")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1252
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1256
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1364
		{
			return helpWith(sqllex, "INSERT")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1368
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1370
		{
			return helpWith(sqllex, "DELETE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{ /* SKIP DOC */
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1390
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "INSERT")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "DELETE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "GRANT")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1507
		{
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1564
		{
			return helpWith(sqllex, "RESET")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[3].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{ /* SKIP DOC */
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1584
		{
			return unimplemented(sqllex, "set local")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1587
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			return unimplemented(sqllex, "set names")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			return unimplemented(sqllex, "set from current")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = Low
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = Normal
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = High
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1793
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			return helpWith(sqllex, "SHOW")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1802
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1812
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1844
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1867
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1886
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1893
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1911
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1924
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1928
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1932
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1937
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1944
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1959
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = DropDefault
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			return unimplemented(sqllex, "match full")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			return unimplemented(sqllex, "match partial")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return unimplemented(sqllex, "match simple")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2287
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2293
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2294
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2297
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			return unimplemented(sqllex, "no action")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2309
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2310
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			return unimplemented(sqllex, "action set null")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			return unimplemented(sqllex, "action set default")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = true
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = false
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2424
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2428
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = Ascending
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = Descending
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2468
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2470
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = true
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = false
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2503
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2504
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2507
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2514
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2523
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2525
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2527
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2530
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2566
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.str = ""
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.str = ""
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.str = ""
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.str = ""
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.str = ""
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.str = ""
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2689
		{
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2693
		{
			return helpWith(sqllex, "INSERT")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2758
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2770
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2793
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2794
		{
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2949
		{
			return helpWith(sqllex, "SELECT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
			return helpWith(sqllex, "SELECT")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2981
		{
			return helpWith(sqllex, "VALUES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
			return helpWith(sqllex, "TABLE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			return helpWith(sqllex, "TABLE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3041
		{
			return unimplemented(sqllex, "cte")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3044
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3045
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3048
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3049
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3052
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3053
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = true
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = false
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = false
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = true
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3077
		{
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3187
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3192
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3241
		{
			return helpWith(sqllex, "VALUES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3262
		{
			return helpWith(sqllex, "<source>")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &From{}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3284
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3329
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3346
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3402
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = nil
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3415
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = true
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = false
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.str = astFullJoin
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.str = astLeftJoin
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.str = astRightJoin
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.str = astInnerJoin
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3533
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3632
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3656
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3728
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = nil
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3777
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3873
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3905
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3944
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3945
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = year
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = month
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = day
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = hour
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = minute
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = month
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = hour
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = minute
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = minute
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = nil
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = second
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4040
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4075
		{
			return unimplemented(sqllex, "at tz")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4309
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4527
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4536
		{
			return unimplemented(sqllex, "variadic")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4537
		{
			return unimplemented(sqllex, "variadic")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4560
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			return unimplemented(sqllex, "func_application")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4581
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4590
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4599
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			return unimplemented(sqllex, "current role")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			return unimplemented(sqllex, "current user")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			return unimplemented(sqllex, "session user")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			return unimplemented(sqllex, "user")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4616
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4621
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4626
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4635
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4636
		{
			return unimplemented(sqllex, "treat")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4673
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4678
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4682
		{
			return unimplemented(sqllex, "within group")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4683
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = Window(nil)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.str = ""
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4780
		{
			return unimplemented(sqllex, "frame range")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4781
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4782
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4785
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4786
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4792
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4793
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4794
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4795
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4796
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = Any
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = Some
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = All
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = Plus
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = Minus
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = Mult
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = Div
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = FloorDiv
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = Mod
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = Bitand
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = Bitor
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = Pow
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = Bitxor
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = LT
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = GT
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = EQ
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = LE
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = GE
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = NE
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = Like
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = NotLike
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = ILike
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = NotILike
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5160
		{
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5161
		{
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5279
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5323
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5359
		{
			return unimplemented(sqllex, "func const")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5368
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = DNull
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5395
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.str = ""
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
