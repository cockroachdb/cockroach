// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESET = 57563
const RESTORE = 57564
const RESTRICT = 57565
const RETURNING = 57566
const REVOKE = 57567
const RIGHT = 57568
const ROLLBACK = 57569
const ROLLUP = 57570
const ROW = 57571
const ROWS = 57572
const RSHIFT = 57573
const STATUS = 57574
const SAVEPOINT = 57575
const SEARCH = 57576
const SECOND = 57577
const SELECT = 57578
const SERIAL = 57579
const SERIALIZABLE = 57580
const SESSION = 57581
const SESSION_USER = 57582
const SET = 57583
const SHOW = 57584
const SIMILAR = 57585
const SIMPLE = 57586
const SMALLINT = 57587
const SMALLSERIAL = 57588
const SNAPSHOT = 57589
const SOME = 57590
const SPLIT = 57591
const SQL = 57592
const START = 57593
const STDIN = 57594
const STRICT = 57595
const STRING = 57596
const STORING = 57597
const SUBSTRING = 57598
const SYMMETRIC = 57599
const SYSTEM = 57600
const TABLE = 57601
const TABLES = 57602
const TEMPLATE = 57603
const TESTING_RANGES = 57604
const TESTING_RELOCATE = 57605
const TEXT = 57606
const THEN = 57607
const TIME = 57608
const TIMESTAMP = 57609
const TIMESTAMPTZ = 57610
const TO = 57611
const TRAILING = 57612
const TRANSACTION = 57613
const TREAT = 57614
const TRIM = 57615
const TRUE = 57616
const TRUNCATE = 57617
const TYPE = 57618
const UNBOUNDED = 57619
const UNCOMMITTED = 57620
const UNION = 57621
const UNIQUE = 57622
const UNKNOWN = 57623
const UPDATE = 57624
const UPSERT = 57625
const USER = 57626
const USERS = 57627
const USING = 57628
const VALID = 57629
const VALIDATE = 57630
const VALUE = 57631
const VALUES = 57632
const VARCHAR = 57633
const VARIADIC = 57634
const VIEW = 57635
const VARYING = 57636
const WHEN = 57637
const WHERE = 57638
const WINDOW = 57639
const WITH = 57640
const WITHIN = 57641
const WITHOUT = 57642
const YEAR = 57643
const ZONE = 57644
const NOT_LA = 57645
const WITH_LA = 57646
const AS_LA = 57647
const POSTFIXOP = 57648
const UMINUS = 57649

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5430

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 30,
	326, 30,
	-2, 419,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	98, 402,
	142, 402,
	158, 402,
	183, 402,
	189, 402,
	279, 402,
	-2, 392,
	-1, 65,
	98, 401,
	142, 401,
	158, 401,
	183, 401,
	189, 401,
	279, 401,
	-2, 395,
	-1, 74,
	1, 30,
	326, 30,
	-2, 419,
	-1, 428,
	1, 197,
	326, 197,
	-2, 984,
	-1, 466,
	158, 429,
	183, 429,
	-2, 398,
	-1, 469,
	158, 428,
	183, 428,
	-2, 396,
	-1, 602,
	158, 428,
	183, 428,
	-2, 399,
	-1, 661,
	323, 918,
	-2, 911,
	-1, 662,
	323, 919,
	-2, 912,
	-1, 668,
	5, 587,
	323, 587,
	-2, 1090,
	-1, 692,
	5, 548,
	-2, 1064,
	-1, 693,
	5, 581,
	323, 581,
	-2, 1066,
	-1, 694,
	5, 556,
	-2, 1067,
	-1, 695,
	5, 555,
	-2, 1068,
	-1, 696,
	5, 581,
	323, 581,
	-2, 1071,
	-1, 697,
	5, 581,
	323, 581,
	-2, 1072,
	-1, 698,
	5, 582,
	-2, 1075,
	-1, 699,
	5, 542,
	-2, 1076,
	-1, 700,
	5, 542,
	-2, 1077,
	-1, 701,
	5, 563,
	-2, 1081,
	-1, 702,
	5, 543,
	-2, 1086,
	-1, 703,
	5, 544,
	-2, 1087,
	-1, 704,
	5, 545,
	-2, 1088,
	-1, 705,
	5, 546,
	-2, 1089,
	-1, 706,
	5, 542,
	-2, 1094,
	-1, 707,
	5, 549,
	-2, 1099,
	-1, 708,
	5, 547,
	-2, 1102,
	-1, 709,
	5, 579,
	323, 579,
	-2, 1104,
	-1, 710,
	5, 583,
	-2, 1107,
	-1, 711,
	5, 585,
	-2, 1108,
	-1, 712,
	5, 578,
	323, 578,
	-2, 1112,
	-1, 976,
	98, 402,
	142, 402,
	158, 402,
	183, 402,
	189, 402,
	279, 402,
	-2, 706,
	-1, 985,
	323, 895,
	-2, 883,
	-1, 1197,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 622,
	-1, 1198,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 623,
	-1, 1199,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 624,
	-1, 1203,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 628,
	-1, 1204,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 629,
	-1, 1205,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 630,
	-1, 1208,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 635,
	-1, 1214,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 637,
	-1, 1217,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 642,
	-1, 1218,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 643,
	-1, 1219,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 644,
	-1, 1246,
	194, 777,
	-2, 780,
	-1, 1275,
	115, 817,
	323, 918,
	-2, 911,
	-1, 1276,
	115, 818,
	-2, 1060,
	-1, 1277,
	115, 819,
	-2, 983,
	-1, 1278,
	115, 820,
	-2, 952,
	-1, 1279,
	115, 821,
	-2, 967,
	-1, 1280,
	115, 822,
	-2, 982,
	-1, 1281,
	115, 823,
	-2, 1026,
	-1, 1435,
	98, 402,
	142, 402,
	158, 402,
	183, 402,
	189, 402,
	279, 402,
	-2, 478,
	-1, 1439,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 636,
	-1, 1440,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 638,
	-1, 1445,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 639,
	-1, 1463,
	194, 776,
	-2, 779,
	-1, 1650,
	1, 479,
	68, 479,
	98, 479,
	116, 479,
	120, 479,
	122, 479,
	135, 479,
	142, 479,
	147, 479,
	155, 479,
	158, 479,
	170, 479,
	183, 479,
	185, 479,
	189, 479,
	224, 479,
	226, 479,
	279, 479,
	286, 479,
	296, 479,
	297, 479,
	305, 479,
	322, 479,
	324, 479,
	326, 479,
	327, 479,
	-2, 478,
	-1, 1652,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 640,
	-1, 1657,
	145, 0,
	-2, 656,
	-1, 1667,
	194, 778,
	-2, 781,
	-1, 1701,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 683,
	-1, 1702,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 684,
	-1, 1703,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 685,
	-1, 1707,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 689,
	-1, 1708,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 690,
	-1, 1709,
	13, 0,
	14, 0,
	15, 0,
	306, 0,
	307, 0,
	308, 0,
	-2, 691,
	-1, 1827,
	145, 0,
	-2, 657,
	-1, 1830,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 660,
	-1, 1831,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 662,
	-1, 1934,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 661,
	-1, 1935,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 663,
	-1, 1942,
	145, 0,
	-2, 692,
	-1, 1996,
	145, 0,
	-2, 693,
	-1, 2057,
	36, 0,
	129, 0,
	157, 0,
	243, 0,
	303, 0,
	-2, 1063,
}

const sqlPrivate = 57344

const sqlLast = 28062

var sqlAct = [...]int{

	87, 2056, 2036, 1607, 2081, 2002, 2037, 2055, 1645, 2038,
	1871, 894, 1076, 1646, 470, 1818, 1678, 652, 1915, 1136,
	1793, 1895, 283, 1556, 1752, 1433, 1161, 1617, 786, 50,
	1738, 1068, 298, 1804, 900, 1430, 1409, 491, 1411, 477,
	64, 638, 1557, 755, 300, 1140, 1798, 660, 1524, 1154,
	515, 1523, 749, 1135, 1623, 533, 1176, 1474, 1244, 896,
	981, 1360, 1169, 1421, 725, 1077, 1139, 728, 1632, 747,
	1039, 1354, 659, 1030, 1168, 1416, 1254, 632, 1301, 1174,
	1231, 1060, 64, 621, 1228, 917, 1092, 290, 29, 289,
	16, 847, 291, 8, 759, 756, 730, 475, 1272, 1128,
	1171, 972, 506, 1101, 622, 631, 525, 1015, 534, 1143,
	922, 528, 605, 1070, 64, 1753, 480, 606, 65, 426,
	604, 429, 588, 416, 469, 845, 589, 66, 407, 763,
	521, 1304, 79, 1108, 527, 849, 654, 478, 83, 770,
	609, 1011, 587, 1462, 772, 419, 30, 1494, 1495, 1069,
	1512, 1513, 1514, 1927, 1105, 772, 1928, 31, 55, 772,
	474, 474, 29, 1826, 16, 271, 2072, 8, 2051, 752,
	1111, 1751, 2044, 488, 2034, 752, 494, 1098, 1980, 501,
	1371, 457, 57, 467, 456, 1431, 2029, 70, 33, 752,
	63, 2025, 466, 1998, 752, 297, 1098, 1106, 1509, 1992,
	1974, 1970, 752, 1751, 752, 1965, 742, 482, 1964, 46,
	72, 497, 1936, 925, 926, 1098, 41, 1925, 1922, 58,
	781, 1923, 1061, 45, 42, 925, 926, 1909, 1906, 1904,
	1751, 752, 1751, 1064, 1419, 923, 928, 1107, 1104, 63,
	47, 73, 1882, 787, 1419, 752, 43, 1500, 928, 68,
	1881, 1372, 1714, 1751, 1073, 69, 1853, 1832, 927, 1111,
	1111, 1664, 1466, 1829, 942, 41, 1098, 1467, 1821, 1750,
	927, 1111, 1751, 42, 67, 924, 1661, 1593, 1588, 1111,
	1067, 1067, 1515, 1541, 1539, 537, 1542, 1111, 1538, 1537,
	1463, 1111, 1111, 1111, 1398, 43, 1465, 752, 1111, 1473,
	1510, 1111, 1165, 1115, 1396, 752, 1111, 1109, 647, 1110,
	1061, 1028, 1111, 933, 475, 1399, 1248, 1160, 1494, 1495,
	773, 1097, 1123, 1066, 1098, 933, 1067, 44, 617, 889,
	1027, 773, 1064, 1026, 888, 773, 780, 535, 839, 781,
	84, 84, 273, 60, 61, 32, 838, 752, 48, 504,
	59, 550, 487, 399, 400, 401, 49, 74, 418, 70,
	510, 430, 871, 1812, 52, 54, 943, 570, 1511, 418,
	430, 1754, 1434, 1103, 56, 2070, 2054, 481, 481, 522,
	2043, 273, 72, 2007, 273, 273, 500, 273, 1993, 514,
	84, 507, 616, 1907, 531, 1102, 1778, 1858, 62, 1854,
	1846, 1845, 70, 530, 530, 70, 1844, 1840, 70, 1839,
	1838, 1784, 1729, 73, 54, 1724, 1723, 1722, 1500, 1672,
	1650, 68, 1622, 1597, 776, 72, 1546, 69, 72, 1543,
	1531, 72, 989, 1522, 944, 771, 512, 1493, 1490, 892,
	1489, 925, 926, 1506, 1507, 1508, 67, 1505, 1502, 1503,
	1504, 1496, 1497, 1498, 1499, 1501, 73, 1487, 1479, 73,
	1401, 721, 73, 1371, 928, 1478, 1397, 68, 1432, 899,
	68, 1510, 1318, 69, 1269, 1268, 69, 925, 926, 616,
	1240, 603, 925, 926, 662, 662, 927, 923, 982, 67,
	67, 1680, 1072, 662, 615, 67, 2017, 1977, 1963, 1955,
	928, 1953, 1944, 1931, 537, 928, 1918, 1902, 1868, 1851,
	1823, 300, 537, 938, 935, 936, 937, 929, 930, 931,
	932, 934, 927, 954, 602, 720, 2053, 927, 1787, 929,
	930, 931, 932, 934, 1777, 954, 1494, 1495, 2027, 1511,
	1775, 933, 1757, 753, 1656, 1637, 558, 662, 1494, 1495,
	559, 1615, 925, 926, 1613, 1612, 1610, 662, 1565, 594,
	1564, 1521, 1595, 537, 537, 761, 553, 555, 719, 1483,
	1482, 300, 1459, 1454, 1241, 1233, 1387, 933, 1332, 592,
	1331, 1311, 595, 1267, 598, 1164, 1016, 273, 523, 273,
	430, 430, 1019, 590, 943, 1023, 467, 927, 1009, 746,
	1008, 1007, 1006, 872, 1005, 466, 1004, 1003, 662, 662,
	898, 1002, 1001, 612, 613, 662, 1000, 618, 999, 522,
	998, 1504, 1496, 1497, 1498, 1499, 1501, 662, 662, 662,
	662, 662, 854, 854, 997, 996, 1500, 662, 995, 1926,
	921, 510, 782, 751, 513, 994, 993, 662, 1500, 762,
	765, 1332, 986, 975, 67, 893, 492, 620, 556, 546,
	903, 544, 944, 1834, 1813, 1809, 475, 1783, 775, 1782,
	982, 778, 925, 926, 1381, 1380, 973, 784, 831, 834,
	1810, 655, 833, 721, 835, 736, 1967, 1929, 837, 860,
	1412, 873, 1781, 1373, 877, 878, 879, 880, 881, 737,
	1061, 867, 866, 564, 884, 885, 876, 1434, 1021, 1545,
	1799, 547, 1022, 1544, 1438, 890, 580, 565, 991, 907,
	897, 1355, 1069, 906, 905, 1681, 552, 1470, 467, 430,
	430, 467, 467, 891, 919, 1255, 1012, 913, 1367, 1552,
	914, 915, 935, 936, 937, 929, 930, 931, 932, 934,
	988, 954, 721, 1969, 2010, 584, 2067, 1393, 1765, 455,
	1032, 454, 1114, 985, 418, 2068, 1576, 273, 978, 430,
	597, 430, 464, 600, 449, 450, 1890, 1033, 1889, 1578,
	1577, 1549, 537, 931, 932, 934, 1548, 954, 481, 585,
	1441, 1386, 954, 1385, 1384, 731, 1383, 732, 1215, 273,
	1112, 1058, 731, 1089, 732, 1057, 1044, 1046, 1017, 1054,
	279, 77, 591, 84, 1020, 503, 1774, 1315, 1314, 1186,
	64, 1155, 273, 275, 459, 64, 1105, 273, 273, 273,
	1024, 767, 1581, 731, 535, 732, 1049, 1063, 1013, 1014,
	887, 1036, 1498, 1499, 1501, 1873, 1059, 738, 1583, 1230,
	273, 273, 1496, 1497, 1498, 1499, 1501, 562, 84, 1968,
	84, 739, 954, 280, 76, 1357, 757, 733, 1287, 1106,
	1230, 276, 300, 1095, 733, 1094, 1055, 1594, 1096, 1075,
	430, 1085, 84, 430, 430, 430, 430, 430, 882, 1087,
	1090, 1088, 2015, 430, 430, 766, 563, 1032, 1086, 530,
	418, 530, 542, 1031, 1127, 733, 1084, 1040, 902, 1107,
	1104, 1602, 1567, 865, 864, 1109, 858, 855, 1158, 1159,
	1237, 1017, 473, 1020, 662, 1235, 481, 2078, 1255, 507,
	662, 662, 662, 662, 662, 662, 662, 662, 662, 662,
	662, 662, 662, 662, 662, 662, 662, 662, 662, 662,
	662, 662, 460, 662, 1166, 662, 662, 662, 662, 2067,
	1361, 2031, 1117, 300, 1958, 1116, 472, 886, 1043, 1014,
	1013, 1350, 1574, 465, 662, 1392, 662, 461, 2089, 1109,
	1347, 1109, 954, 662, 2032, 744, 462, 662, 1394, 743,
	281, 75, 1343, 1134, 868, 1238, 662, 662, 662, 662,
	662, 662, 662, 662, 662, 662, 662, 662, 662, 662,
	662, 772, 1133, 474, 625, 1132, 1424, 278, 277, 925,
	926, 1746, 1131, 2040, 282, 78, 740, 662, 1167, 541,
	729, 561, 273, 1365, 1874, 1427, 761, 2077, 1010, 560,
	1037, 1150, 928, 1252, 273, 1103, 1903, 1631, 1420, 1185,
	273, 1056, 825, 1747, 273, 1425, 1317, 738, 1599, 1042,
	1568, 1062, 734, 581, 927, 537, 1940, 970, 869, 734,
	662, 739, 1361, 1242, 1443, 273, 1239, 1082, 1083, 637,
	273, 1325, 1481, 273, 1633, 430, 430, 1451, 430, 1649,
	715, 1319, 474, 1263, 608, 1229, 1424, 1282, 1600, 561,
	734, 1449, 475, 471, 2041, 1582, 2039, 1245, 2066, 1029,
	2064, 1353, 662, 272, 1249, 1427, 1849, 1342, 1257, 933,
	2084, 1792, 1152, 582, 537, 1320, 1426, 1422, 2076, 1274,
	1274, 1285, 1363, 1296, 1041, 1425, 1119, 1369, 573, 1308,
	1309, 1310, 551, 1742, 549, 1743, 1236, 1121, 714, 583,
	1423, 2042, 489, 1884, 2090, 496, 499, 1819, 489, 1883,
	1356, 662, 1866, 607, 1446, 1806, 1122, 1366, 1109, 1177,
	1184, 844, 943, 1745, 1447, 1120, 1374, 2095, 1452, 1400,
	1748, 1402, 1212, 1761, 1129, 1950, 1551, 773, 608, 1710,
	1764, 1328, 1378, 854, 1324, 273, 273, 1763, 667, 1153,
	904, 273, 1138, 895, 64, 475, 1426, 1850, 507, 842,
	662, 662, 1389, 1390, 717, 1395, 662, 1820, 716, 1598,
	2003, 843, 607, 859, 856, 1375, 793, 1376, 1377, 662,
	662, 883, 840, 273, 662, 662, 430, 1391, 1437, 1618,
	944, 1420, 662, 1867, 1794, 2082, 1414, 870, 1744, 662,
	1418, 1415, 1095, 1334, 1094, 1436, 662, 1096, 1333, 662,
	662, 662, 1807, 475, 664, 1628, 1805, 1627, 662, 2094,
	1404, 1448, 1472, 1760, 1711, 1210, 1213, 560, 1450, 520,
	1712, 1329, 519, 472, 1226, 599, 1608, 1762, 1785, 1424,
	662, 662, 662, 662, 1444, 1864, 2083, 1442, 1224, 662,
	662, 662, 1352, 1209, 662, 1624, 1417, 1266, 1427, 1526,
	1943, 1848, 1458, 1525, 2085, 1655, 1580, 1865, 1488, 1453,
	1422, 1358, 475, 929, 930, 931, 932, 934, 1425, 954,
	1469, 1113, 662, 662, 1065, 586, 579, 578, 273, 1322,
	1323, 577, 1379, 1423, 1037, 576, 575, 1330, 574, 571,
	1563, 518, 511, 1335, 1336, 1338, 1340, 1341, 489, 992,
	499, 1220, 662, 1346, 875, 1457, 1348, 273, 1265, 1221,
	2035, 1222, 2000, 1460, 662, 1227, 273, 1528, 1529, 1530,
	1562, 273, 1329, 1368, 1735, 1428, 1572, 1570, 1550, 1211,
	273, 1476, 1477, 1547, 1408, 1156, 1148, 1091, 779, 1426,
	273, 1554, 1589, 777, 774, 1561, 769, 745, 741, 735,
	1669, 1410, 537, 1897, 1162, 2068, 1614, 1575, 610, 862,
	485, 1129, 1129, 1579, 1520, 1899, 1586, 1048, 1032, 1587,
	1960, 517, 300, 662, 1047, 1533, 1611, 1590, 1592, 662,
	516, 80, 662, 662, 662, 1584, 1342, 1591, 1754, 1619,
	567, 1995, 1638, 902, 662, 902, 1640, 430, 1625, 3,
	662, 273, 614, 662, 1641, 1413, 1609, 1052, 1223, 64,
	1050, 662, 1163, 1621, 662, 1225, 832, 1981, 1571, 1429,
	1573, 1620, 1626, 1658, 273, 1629, 611, 1630, 486, 662,
	1674, 1675, 1676, 662, 1634, 1635, 1790, 662, 662, 662,
	662, 662, 662, 662, 662, 662, 662, 662, 662, 662,
	662, 662, 662, 662, 662, 662, 508, 662, 1601, 1603,
	1604, 1665, 662, 505, 1151, 509, 662, 662, 1668, 1147,
	568, 297, 1074, 662, 493, 662, 662, 662, 489, 920,
	1032, 1682, 1684, 1687, 836, 408, 1045, 448, 404, 785,
	1100, 1689, 295, 24, 294, 23, 2092, 2093, 1494, 1495,
	2028, 662, 925, 926, 1644, 662, 413, 292, 22, 1984,
	722, 409, 1717, 293, 11, 63, 1718, 296, 10, 1125,
	1124, 537, 1563, 1816, 1755, 1759, 1730, 1605, 1758, 1596,
	1540, 1662, 1382, 760, 1316, 410, 1734, 415, 489, 764,
	764, 41, 1731, 287, 9, 451, 452, 793, 793, 42,
	1313, 662, 1562, 1312, 412, 1262, 662, 1126, 979, 1836,
	537, 496, 499, 912, 1773, 662, 662, 24, 1563, 23,
	2014, 43, 1788, 1563, 1786, 819, 1896, 1561, 1677, 1791,
	537, 1558, 22, 286, 7, 1405, 288, 4, 11, 1815,
	989, 1780, 10, 1715, 405, 987, 662, 1795, 1562, 458,
	662, 662, 1872, 1562, 1725, 662, 406, 1789, 874, 475,
	572, 1797, 662, 1811, 662, 1636, 1824, 2030, 9, 1841,
	273, 273, 662, 1561, 1480, 1828, 1914, 1939, 1561, 1796,
	1802, 1803, 535, 818, 1808, 1814, 1264, 990, 40, 408,
	1559, 285, 20, 641, 1736, 1606, 1553, 88, 1037, 1142,
	902, 1141, 303, 863, 411, 662, 663, 1616, 7, 793,
	413, 4, 848, 857, 1273, 409, 1178, 718, 273, 1177,
	1685, 273, 665, 790, 666, 791, 1847, 1018, 1177, 1690,
	653, 788, 1648, 792, 70, 1078, 1234, 1253, 662, 410,
	54, 301, 662, 1468, 983, 633, 645, 1801, 662, 821,
	414, 644, 1250, 820, 662, 543, 1817, 72, 412, 1563,
	53, 1721, 557, 424, 425, 662, 20, 1364, 1859, 1876,
	793, 1860, 1878, 1776, 1157, 908, 1569, 463, 662, 1491,
	1679, 545, 1892, 1294, 1875, 1286, 537, 1898, 73, 1562,
	1283, 593, 724, 1025, 761, 1563, 68, 662, 971, 789,
	1079, 1905, 69, 569, 1370, 489, 1891, 1099, 619, 1900,
	793, 499, 916, 484, 1561, 489, 662, 662, 483, 1137,
	566, 1639, 841, 1911, 1913, 1562, 1118, 1917, 1933, 1924,
	964, 961, 453, 1932, 1952, 1921, 1080, 1930, 1149, 662,
	1327, 499, 1938, 2088, 499, 1959, 662, 1732, 1733, 1037,
	1561, 1862, 1566, 2009, 71, 1912, 1966, 1894, 411, 662,
	1920, 1351, 28, 1558, 507, 1954, 1877, 25, 21, 1766,
	1945, 1767, 19, 273, 1769, 1770, 1771, 273, 18, 1880,
	27, 17, 1948, 26, 15, 1957, 14, 13, 12, 1949,
	39, 38, 37, 662, 1956, 36, 1887, 1888, 35, 34,
	6, 1975, 537, 5, 414, 1973, 2, 1, 0, 1558,
	1976, 507, 1138, 0, 1558, 0, 0, 0, 0, 0,
	300, 0, 475, 1985, 0, 0, 273, 273, 1982, 1990,
	273, 1979, 0, 1987, 662, 0, 0, 1983, 1986, 1648,
	0, 1991, 0, 0, 1994, 0, 1822, 0, 0, 0,
	623, 623, 1988, 0, 662, 64, 1130, 499, 0, 726,
	0, 0, 489, 1997, 0, 2005, 0, 2018, 662, 0,
	2020, 1978, 0, 2006, 0, 2019, 2013, 0, 0, 1842,
	0, 0, 538, 0, 0, 1563, 662, 2026, 2024, 2023,
	2022, 2021, 2016, 0, 1172, 0, 0, 0, 0, 1886,
	0, 662, 0, 0, 0, 1288, 819, 819, 0, 0,
	2045, 0, 0, 2050, 0, 1562, 0, 2047, 2048, 0,
	0, 0, 662, 662, 0, 0, 0, 2049, 0, 0,
	2061, 0, 0, 0, 1037, 2065, 1861, 2063, 430, 1863,
	1561, 2069, 0, 2052, 0, 0, 0, 273, 662, 2075,
	1558, 2074, 2073, 430, 0, 0, 0, 0, 0, 0,
	0, 0, 2087, 2086, 818, 818, 0, 2091, 0, 0,
	2071, 0, 2011, 1893, 909, 911, 507, 0, 0, 0,
	0, 918, 0, 662, 2096, 2012, 1558, 1455, 1456, 0,
	0, 273, 0, 965, 966, 967, 968, 969, 1916, 1321,
	0, 0, 0, 977, 0, 0, 273, 0, 0, 0,
	642, 51, 0, 984, 792, 792, 0, 2033, 819, 0,
	0, 0, 507, 1648, 0, 0, 793, 0, 1349, 0,
	821, 821, 0, 0, 820, 820, 0, 1359, 0, 0,
	0, 0, 760, 0, 0, 0, 0, 0, 1517, 1518,
	1519, 760, 0, 51, 0, 0, 0, 793, 793, 0,
	0, 489, 0, 902, 0, 0, 793, 793, 0, 0,
	0, 0, 0, 0, 0, 468, 818, 0, 476, 819,
	789, 789, 0, 0, 0, 51, 0, 0, 1961, 1962,
	0, 0, 0, 0, 0, 0, 0, 0, 1971, 793,
	0, 538, 1972, 0, 0, 0, 713, 0, 301, 538,
	0, 0, 0, 0, 0, 0, 0, 507, 0, 819,
	0, 0, 1407, 1648, 925, 926, 792, 0, 0, 1648,
	507, 0, 0, 1288, 1288, 0, 0, 818, 0, 925,
	926, 0, 821, 0, 0, 1172, 820, 928, 0, 0,
	302, 0, 2004, 0, 507, 0, 0, 273, 0, 430,
	538, 538, 928, 0, 0, 0, 0, 0, 301, 927,
	0, 0, 0, 0, 0, 0, 1558, 818, 0, 1916,
	0, 0, 1648, 0, 927, 0, 0, 792, 0, 0,
	0, 0, 789, 0, 1288, 1288, 1288, 0, 0, 0,
	0, 1653, 1654, 821, 0, 0, 0, 820, 0, 0,
	0, 0, 0, 0, 273, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 933, 0, 0, 792, 793, 0,
	0, 0, 0, 0, 2062, 0, 0, 0, 0, 933,
	0, 0, 0, 821, 0, 0, 0, 820, 0, 0,
	0, 1648, 0, 789, 0, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 0, 1713, 0, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 0, 0, 0,
	623, 0, 943, 789, 0, 476, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 0, 1214,
	0, 1216, 1217, 1218, 1219, 0, 0, 0, 0, 1051,
	63, 1053, 0, 0, 0, 0, 0, 793, 0, 0,
	1243, 1080, 1172, 0, 0, 944, 0, 1288, 1288, 0,
	0, 0, 0, 0, 0, 1071, 41, 1071, 0, 0,
	944, 0, 1270, 1271, 42, 0, 1284, 0, 1295, 1297,
	1302, 1305, 1306, 1307, 0, 0, 0, 1093, 0, 538,
	0, 0, 0, 0, 1494, 1495, 43, 0, 0, 1172,
	0, 539, 1172, 726, 0, 0, 0, 0, 0, 0,
	0, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
	1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
	0, 1288, 0, 793, 938, 935, 936, 937, 929, 930,
	931, 932, 934, 0, 954, 819, 1362, 0, 0, 0,
	0, 0, 937, 929, 930, 931, 932, 934, 0, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 819, 819, 0, 301,
	0, 0, 0, 0, 0, 819, 819, 0, 1388, 0,
	1494, 1495, 0, 0, 1500, 0, 0, 0, 468, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 54, 1869, 0, 819, 0,
	0, 1494, 1495, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 72, 0, 818, 818, 0, 918, 0, 0,
	0, 1509, 0, 818, 818, 0, 0, 1510, 0, 0,
	0, 0, 0, 792, 1768, 0, 0, 0, 1772, 0,
	0, 0, 0, 73, 0, 0, 0, 1494, 1495, 821,
	301, 68, 0, 820, 0, 0, 818, 69, 0, 0,
	0, 0, 0, 0, 792, 792, 1439, 1440, 0, 0,
	1500, 0, 1445, 792, 792, 0, 284, 0, 0, 0,
	821, 821, 0, 0, 820, 820, 0, 1172, 1172, 821,
	821, 1172, 0, 820, 820, 1511, 0, 1942, 0, 789,
	539, 1500, 0, 0, 0, 1464, 792, 302, 539, 0,
	468, 0, 1471, 468, 468, 1475, 0, 0, 0, 0,
	0, 0, 821, 1510, 1484, 0, 820, 819, 0, 0,
	789, 789, 1344, 0, 1345, 974, 0, 976, 0, 789,
	789, 0, 1288, 0, 980, 0, 0, 1500, 0, 977,
	0, 0, 538, 0, 1510, 1302, 1302, 1302, 0, 539,
	539, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 789, 0, 1505, 1502, 1503, 1504, 1496, 1497,
	1498, 1499, 1501, 0, 0, 818, 0, 0, 1555, 0,
	0, 1511, 1996, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 1746, 1870, 1739,
	0, 538, 0, 0, 0, 0, 0, 1737, 623, 0,
	0, 1741, 1511, 0, 0, 0, 0, 0, 0, 1403,
	726, 0, 0, 1406, 0, 792, 819, 0, 51, 1747,
	51, 0, 0, 1288, 0, 0, 1093, 0, 0, 0,
	0, 821, 1910, 0, 0, 820, 0, 0, 0, 1740,
	0, 0, 0, 0, 51, 0, 51, 1172, 1511, 0,
	1505, 1502, 1503, 1504, 1496, 1497, 1498, 1499, 1501, 0,
	0, 51, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 818, 1651, 0, 0, 1652, 0,
	0, 789, 1502, 1503, 1504, 1496, 1497, 1498, 1499, 1501,
	1657, 0, 0, 0, 431, 0, 0, 0, 0, 1666,
	0, 0, 819, 0, 0, 0, 0, 1670, 0, 1742,
	1388, 1743, 432, 0, 0, 0, 0, 0, 1288, 0,
	0, 0, 0, 0, 792, 1686, 0, 0, 0, 1688,
	0, 1496, 1497, 1498, 1499, 1501, 0, 0, 0, 1745,
	821, 0, 0, 0, 820, 0, 1748, 0, 434, 0,
	0, 0, 0, 439, 440, 0, 0, 445, 539, 0,
	818, 0, 1719, 1720, 0, 0, 0, 0, 0, 433,
	435, 1726, 1727, 1728, 1494, 1495, 0, 1512, 1513, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 0, 0, 0, 0, 819, 0, 1756, 2008, 0,
	0, 0, 0, 0, 0, 1173, 0, 0, 436, 0,
	792, 0, 0, 0, 1744, 0, 0, 0, 0, 0,
	0, 0, 437, 438, 0, 1509, 821, 0, 0, 0,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 441,
	0, 1232, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 818, 0, 1080, 0, 0, 0, 0,
	0, 1800, 925, 926, 0, 945, 946, 947, 955, 956,
	957, 0, 0, 0, 1500, 0, 789, 0, 948, 538,
	0, 0, 0, 0, 0, 928, 0, 0, 959, 0,
	0, 0, 1827, 0, 1516, 0, 1830, 1831, 0, 301,
	0, 1833, 0, 792, 0, 0, 0, 927, 1835, 1515,
	1837, 0, 0, 942, 0, 0, 0, 0, 1843, 821,
	0, 0, 0, 820, 0, 0, 0, 1510, 0, 0,
	0, 51, 0, 51, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 1852, 447, 476, 0, 0, 443, 0, 0, 0,
	0, 444, 933, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 0, 0, 0, 446, 0, 0, 0, 0,
	0, 952, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 958, 0, 0,
	1885, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	949, 539, 0, 1919, 0, 51, 0, 0, 538, 0,
	1779, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 1934, 1935, 0, 0, 0, 0, 0, 0,
	1506, 1507, 1508, 0, 1505, 1502, 1503, 1504, 1496, 1497,
	1498, 1499, 1501, 944, 0, 0, 0, 538, 0, 0,
	0, 0, 1947, 0, 1232, 953, 0, 0, 0, 0,
	539, 0, 0, 0, 0, 1951, 0, 538, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 925, 926, 0, 945,
	946, 947, 955, 956, 957, 0, 0, 0, 0, 726,
	0, 0, 948, 0, 0, 0, 0, 0, 0, 928,
	0, 0, 959, 0, 0, 951, 0, 0, 939, 940,
	941, 0, 938, 935, 936, 937, 929, 930, 931, 932,
	934, 927, 954, 976, 0, 0, 0, 942, 0, 1855,
	0, 0, 0, 0, 0, 0, 0, 0, 925, 926,
	0, 945, 946, 947, 955, 956, 957, 0, 0, 0,
	0, 0, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 928, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 1494, 1495, 0,
	1512, 1513, 1514, 927, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 1825, 0, 952, 960, 2046, 0, 0,
	0, 0, 1908, 1173, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 538, 0, 0, 0, 0, 2060, 2060,
	0, 0, 0, 950, 0, 0, 0, 0, 1509, 943,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 0, 2060, 0, 0, 0, 0, 0,
	1173, 0, 0, 1173, 949, 0, 0, 952, 960, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 1500, 0, 2060,
	0, 0, 0, 0, 0, 950, 0, 0, 0, 0,
	0, 943, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 1515, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	1510, 0, 0, 0, 0, 0, 0, 0, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	1494, 1495, 0, 1512, 1513, 1514, 0, 0, 302, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 951,
	0, 953, 939, 940, 941, 0, 938, 935, 936, 937,
	929, 930, 931, 932, 934, 0, 954, 0, 0, 0,
	0, 0, 0, 1536, 0, 0, 0, 0, 1511, 0,
	0, 1509, 925, 926, 0, 945, 946, 947, 955, 956,
	957, 0, 0, 0, 0, 0, 0, 0, 948, 51,
	0, 0, 0, 0, 0, 928, 0, 0, 959, 0,
	0, 951, 0, 0, 939, 940, 941, 0, 938, 935,
	936, 937, 929, 930, 931, 932, 934, 927, 954, 0,
	1500, 0, 0, 942, 0, 1535, 0, 0, 1173, 1173,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 1506, 1507, 1508, 0, 1505, 1502, 1503,
	1504, 1496, 1497, 1498, 1499, 1501, 0, 0, 0, 0,
	925, 926, 0, 945, 946, 947, 955, 956, 957, 0,
	0, 0, 933, 1510, 0, 0, 948, 539, 0, 0,
	0, 0, 0, 928, 1494, 1495, 959, 1512, 1513, 1514,
	0, 952, 960, 0, 0, 0, 0, 0, 0, 0,
	1660, 0, 0, 0, 0, 927, 0, 958, 0, 0,
	0, 942, 0, 0, 925, 926, 539, 0, 0, 950,
	955, 956, 957, 0, 0, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 539, 928, 0, 0,
	959, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 927,
	933, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 952,
	960, 0, 1901, 0, 1500, 0, 0, 0, 0, 0,
	0, 51, 0, 944, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 950, 1173, 0,
	0, 0, 0, 943, 933, 0, 1506, 1507, 1508, 1515,
	1505, 1502, 1503, 1504, 1496, 1497, 1498, 1499, 1501, 0,
	0, 0, 0, 952, 960, 0, 0, 1510, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 951, 0, 943, 939, 940,
	941, 0, 938, 935, 936, 937, 929, 930, 931, 932,
	934, 944, 954, 0, 0, 0, 0, 0, 0, 1534,
	0, 0, 539, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 951, 0, 0, 939, 940, 941, 0,
	938, 935, 936, 937, 929, 930, 931, 932, 934, 0,
	954, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	1506, 1507, 1508, 0, 1505, 1502, 1503, 1504, 1496, 1497,
	1498, 1499, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 951, 539, 0,
	0, 299, 0, 0, 938, 935, 936, 937, 929, 930,
	931, 932, 934, 0, 954, 0, 302, 89, 90, 318,
	91, 319, 320, 321, 322, 220, 323, 324, 325, 326,
	92, 93, 94, 221, 222, 223, 224, 95, 225, 226,
	327, 96, 227, 228, 97, 328, 329, 229, 230, 231,
	330, 232, 331, 304, 332, 98, 99, 100, 0, 101,
	333, 102, 103, 104, 334, 305, 105, 106, 335, 336,
	337, 338, 339, 340, 107, 108, 274, 109, 233, 110,
	234, 235, 341, 111, 342, 112, 343, 344, 345, 113,
	114, 346, 115, 347, 0, 348, 236, 116, 117, 237,
	238, 349, 350, 351, 118, 119, 239, 0, 120, 352,
	121, 353, 354, 306, 355, 122, 240, 356, 241, 357,
	123, 124, 125, 126, 242, 243, 308, 358, 130, 359,
	127, 360, 307, 128, 244, 129, 245, 246, 247, 361,
	248, 362, 309, 131, 310, 132, 133, 363, 135, 134,
	364, 249, 311, 136, 312, 365, 137, 366, 367, 138,
	0, 139, 140, 141, 143, 250, 142, 313, 144, 145,
	147, 146, 368, 369, 370, 251, 148, 252, 149, 150,
	371, 151, 372, 373, 152, 374, 375, 153, 253, 314,
	154, 315, 254, 155, 156, 157, 158, 376, 255, 159,
	256, 160, 377, 161, 162, 163, 257, 164, 165, 378,
	166, 167, 168, 169, 170, 172, 173, 171, 174, 175,
	176, 379, 177, 316, 178, 179, 258, 180, 0, 181,
	182, 183, 184, 380, 259, 185, 186, 381, 187, 188,
	317, 189, 260, 261, 190, 382, 196, 191, 192, 193,
	195, 262, 194, 263, 383, 197, 384, 198, 199, 200,
	201, 202, 385, 264, 265, 266, 386, 387, 203, 267,
	268, 388, 204, 205, 206, 207, 389, 390, 208, 209,
	210, 391, 211, 392, 212, 213, 214, 269, 270, 393,
	394, 215, 395, 396, 397, 398, 216, 217, 218, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 1642, 0,
	0, 0, 0, 0, 0, 0, 1643, 89, 90, 318,
	91, 319, 320, 321, 322, 220, 323, 324, 325, 326,
	92, 93, 94, 221, 222, 223, 224, 95, 225, 226,
	327, 96, 227, 228, 97, 328, 329, 229, 230, 231,
	330, 232, 331, 304, 332, 98, 99, 100, 0, 101,
	333, 102, 103, 104, 334, 305, 105, 106, 335, 336,
	337, 338, 339, 340, 107, 108, 274, 109, 233, 110,
	234, 235, 341, 111, 342, 112, 343, 344, 345, 113,
	114, 346, 115, 347, 0, 348, 236, 116, 117, 237,
	238, 349, 350, 351, 118, 119, 239, 0, 120, 352,
	121, 353, 354, 306, 355, 122, 240, 356, 241, 357,
	123, 124, 125, 126, 242, 243, 308, 358, 130, 359,
	127, 360, 307, 128, 244, 129, 245, 246, 247, 361,
	248, 362, 309, 131, 310, 132, 133, 363, 135, 134,
	364, 249, 311, 136, 312, 365, 137, 366, 367, 138,
	0, 139, 140, 141, 143, 250, 142, 313, 144, 145,
	147, 146, 368, 369, 370, 251, 148, 252, 149, 150,
	371, 151, 372, 373, 152, 374, 375, 153, 253, 314,
	154, 315, 254, 155, 156, 157, 158, 376, 255, 159,
	256, 160, 377, 161, 162, 163, 257, 164, 165, 378,
	166, 167, 168, 169, 170, 172, 173, 171, 174, 175,
	176, 379, 177, 316, 178, 179, 258, 180, 0, 181,
	182, 183, 184, 380, 259, 185, 186, 381, 187, 188,
	317, 189, 260, 261, 190, 382, 196, 191, 192, 193,
	195, 262, 194, 263, 383, 197, 384, 198, 199, 200,
	201, 202, 385, 264, 265, 266, 386, 387, 203, 267,
	268, 388, 204, 205, 206, 207, 389, 390, 208, 209,
	210, 391, 211, 392, 212, 213, 214, 269, 270, 393,
	394, 215, 395, 396, 397, 398, 216, 217, 218, 219,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1989, 89,
	90, 318, 91, 319, 320, 321, 322, 220, 323, 324,
	325, 326, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 327, 96, 227, 228, 97, 328, 329, 229,
	230, 231, 330, 232, 331, 304, 332, 98, 99, 100,
	0, 101, 333, 102, 103, 104, 334, 305, 105, 106,
	335, 336, 337, 338, 339, 340, 107, 108, 274, 109,
	233, 110, 234, 235, 341, 111, 342, 112, 343, 344,
	345, 113, 114, 346, 115, 347, 0, 348, 236, 116,
	117, 237, 238, 349, 350, 351, 118, 119, 239, 0,
	120, 352, 121, 353, 354, 306, 355, 122, 240, 356,
	241, 357, 123, 124, 125, 126, 242, 243, 308, 358,
	130, 359, 127, 360, 307, 128, 244, 129, 245, 246,
	247, 361, 248, 362, 309, 131, 310, 132, 133, 363,
	135, 134, 364, 249, 311, 136, 312, 365, 137, 366,
	367, 138, 0, 139, 140, 141, 143, 250, 142, 313,
	144, 145, 147, 146, 368, 369, 370, 251, 148, 252,
	149, 150, 371, 151, 372, 373, 152, 374, 375, 153,
	253, 314, 154, 315, 254, 155, 156, 157, 158, 376,
	255, 159, 256, 160, 377, 161, 162, 163, 257, 164,
	165, 378, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 379, 177, 316, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 380, 259, 185, 186, 381,
	187, 188, 317, 189, 260, 261, 190, 382, 196, 191,
	192, 193, 195, 262, 194, 263, 383, 197, 384, 198,
	199, 200, 201, 202, 385, 264, 265, 266, 386, 387,
	203, 267, 268, 388, 204, 205, 206, 207, 389, 390,
	208, 209, 210, 391, 211, 392, 212, 213, 214, 269,
	270, 393, 394, 215, 395, 396, 397, 398, 216, 217,
	218, 219, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 754, 0, 0, 89, 90,
	318, 91, 319, 320, 321, 322, 220, 323, 324, 325,
	326, 92, 93, 94, 221, 222, 223, 224, 95, 225,
	226, 327, 96, 227, 228, 97, 328, 329, 229, 230,
	231, 330, 232, 331, 304, 332, 98, 99, 100, 0,
	101, 333, 102, 103, 104, 334, 305, 105, 106, 335,
	336, 337, 338, 339, 340, 107, 108, 274, 109, 233,
	110, 234, 235, 341, 111, 342, 112, 343, 344, 345,
	113, 114, 346, 115, 347, 0, 348, 236, 116, 117,
	237, 238, 349, 350, 351, 118, 119, 239, 0, 120,
	352, 121, 353, 354, 306, 355, 122, 240, 356, 241,
	357, 123, 124, 125, 126, 242, 243, 308, 358, 130,
	359, 127, 360, 307, 128, 244, 129, 245, 246, 247,
	361, 248, 362, 309, 131, 310, 132, 133, 363, 135,
	134, 364, 249, 311, 136, 312, 365, 137, 366, 367,
	138, 0, 139, 140, 141, 143, 250, 142, 313, 144,
	145, 147, 146, 368, 369, 370, 251, 148, 252, 149,
	150, 371, 151, 372, 373, 152, 374, 375, 153, 253,
	314, 154, 315, 254, 155, 156, 157, 158, 376, 255,
	159, 256, 160, 377, 161, 162, 163, 257, 164, 165,
	378, 166, 167, 168, 169, 170, 172, 173, 171, 174,
	175, 176, 379, 177, 316, 178, 179, 258, 180, 0,
	181, 182, 183, 184, 380, 259, 185, 186, 381, 187,
	188, 317, 189, 260, 261, 190, 382, 196, 191, 192,
	193, 195, 262, 194, 263, 383, 197, 384, 198, 199,
	200, 201, 202, 385, 264, 265, 266, 386, 387, 203,
	267, 268, 388, 204, 205, 206, 207, 389, 390, 208,
	209, 210, 391, 211, 392, 212, 213, 214, 269, 270,
	393, 394, 215, 395, 396, 397, 398, 216, 217, 218,
	219, 661, 650, 651, 648, 649, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 677, 643, 0, 0, 0,
	92, 93, 94, 221, 692, 223, 693, 95, 694, 695,
	0, 96, 227, 228, 97, 646, 676, 696, 697, 231,
	0, 688, 0, 669, 0, 98, 99, 100, 0, 101,
	0, 102, 103, 104, 0, 305, 105, 106, 0, 670,
	672, 0, 671, 673, 107, 108, 274, 109, 698, 110,
	699, 700, 727, 111, 0, 112, 0, 0, 0, 691,
	114, 0, 115, 0, 0, 0, 634, 116, 117, 678,
	679, 657, 0, 0, 118, 119, 701, 0, 120, 0,
	121, 0, 0, 306, 0, 122, 689, 0, 241, 0,
	123, 124, 125, 126, 685, 687, 308, 0, 130, 0,
	127, 0, 307, 128, 702, 129, 703, 704, 705, 0,
	668, 0, 309, 131, 310, 132, 133, 0, 135, 134,
	0, 690, 311, 136, 312, 0, 137, 0, 0, 138,
	0, 139, 140, 141, 143, 250, 142, 313, 144, 145,
	147, 146, 629, 0, 658, 686, 148, 706, 149, 150,
	0, 151, 0, 0, 152, 0, 0, 153, 253, 314,
	154, 315, 680, 155, 156, 157, 158, 0, 681, 159,
	256, 160, 0, 161, 162, 163, 707, 164, 165, 0,
	166, 167, 168, 169, 170, 172, 173, 171, 174, 175,
	176, 0, 177, 316, 178, 179, 635, 180, 0, 181,
	182, 183, 184, 70, 259, 185, 186, 674, 187, 188,
	317, 189, 708, 261, 190, 0, 196, 191, 192, 193,
	195, 709, 194, 682, 0, 197, 72, 198, 199, 200,
	201, 202, 0, 264, 710, 711, 0, 0, 203, 683,
	684, 656, 204, 205, 206, 207, 0, 0, 208, 209,
	210, 675, 211, 0, 212, 213, 214, 540, 712, 0,
	0, 215, 0, 0, 0, 68, 216, 217, 218, 219,
	630, 69, 0, 0, 0, 661, 650, 651, 648, 649,
	640, 626, 627, 0, 0, 0, 0, 628, 0, 0,
	636, 89, 90, 1259, 91, 639, 0, 0, 0, 677,
	643, 0, 0, 0, 92, 93, 94, 221, 692, 223,
	693, 95, 694, 695, 0, 96, 227, 228, 97, 646,
	676, 696, 697, 231, 0, 688, 0, 669, 0, 98,
	99, 100, 0, 101, 0, 102, 103, 104, 0, 305,
	105, 106, 0, 670, 672, 0, 671, 673, 107, 108,
	274, 109, 698, 110, 699, 700, 0, 111, 0, 112,
	0, 1260, 0, 691, 114, 0, 115, 0, 0, 0,
	634, 116, 117, 678, 679, 657, 0, 0, 118, 119,
	701, 0, 120, 0, 121, 0, 0, 306, 0, 122,
	689, 0, 241, 0, 123, 124, 125, 126, 685, 687,
	308, 0, 130, 0, 127, 0, 307, 128, 702, 129,
	703, 704, 705, 0, 668, 0, 309, 131, 310, 132,
	133, 0, 135, 134, 0, 690, 311, 136, 312, 0,
	137, 0, 0, 138, 0, 139, 140, 141, 143, 250,
	142, 313, 144, 145, 147, 146, 629, 0, 658, 686,
	148, 706, 149, 150, 0, 151, 0, 0, 152, 0,
	0, 153, 253, 314, 154, 315, 680, 155, 156, 157,
	158, 0, 681, 159, 256, 160, 0, 161, 162, 163,
	707, 164, 165, 0, 166, 167, 168, 169, 170, 172,
	173, 171, 174, 175, 176, 0, 177, 316, 178, 179,
	635, 180, 0, 181, 182, 183, 184, 0, 259, 185,
	186, 674, 187, 188, 317, 189, 708, 261, 190, 0,
	196, 191, 192, 193, 195, 709, 194, 682, 0, 197,
	0, 198, 199, 200, 201, 202, 0, 264, 710, 711,
	0, 0, 203, 683, 684, 656, 204, 205, 206, 207,
	0, 0, 208, 209, 210, 675, 211, 0, 212, 213,
	214, 269, 712, 1258, 0, 215, 0, 0, 0, 0,
	216, 217, 218, 219, 630, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 627, 1261, 0, 0,
	0, 628, 0, 0, 636, 1256, 0, 0, 0, 639,
	661, 650, 651, 648, 649, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 677, 643, 0, 0, 0, 92,
	93, 94, 221, 692, 223, 693, 95, 694, 695, 0,
	96, 227, 228, 97, 646, 676, 696, 697, 231, 0,
	688, 0, 669, 0, 98, 99, 100, 0, 101, 0,
	102, 103, 104, 0, 305, 105, 106, 0, 670, 672,
	0, 671, 673, 107, 108, 274, 109, 698, 110, 699,
	700, 0, 111, 0, 112, 0, 0, 0, 691, 114,
	0, 115, 0, 0, 0, 634, 116, 117, 678, 679,
	657, 0, 0, 118, 119, 701, 0, 120, 0, 121,
	0, 0, 306, 0, 122, 689, 0, 241, 0, 123,
	124, 125, 126, 685, 687, 308, 0, 130, 0, 127,
	0, 307, 128, 702, 129, 703, 704, 705, 0, 668,
	0, 309, 131, 310, 132, 133, 0, 135, 134, 0,
	690, 311, 136, 312, 0, 137, 0, 0, 138, 0,
	139, 140, 141, 143, 250, 142, 313, 144, 145, 147,
	146, 629, 0, 658, 686, 148, 706, 149, 150, 0,
	151, 0, 0, 152, 0, 0, 153, 253, 314, 154,
	315, 680, 155, 156, 157, 158, 0, 681, 159, 256,
	160, 0, 161, 162, 163, 707, 164, 165, 0, 166,
	167, 168, 169, 170, 172, 173, 171, 174, 175, 176,
	0, 177, 316, 178, 179, 635, 180, 0, 181, 182,
	183, 184, 70, 259, 185, 186, 674, 187, 188, 317,
	189, 708, 261, 190, 0, 196, 191, 192, 193, 195,
	709, 194, 682, 0, 197, 72, 198, 199, 200, 201,
	202, 0, 264, 710, 711, 0, 0, 203, 683, 684,
	656, 204, 205, 206, 207, 0, 0, 208, 209, 210,
	675, 211, 0, 212, 213, 214, 540, 712, 0, 0,
	215, 0, 0, 0, 68, 216, 217, 218, 219, 630,
	69, 661, 650, 651, 648, 649, 640, 0, 0, 0,
	626, 627, 0, 0, 0, 0, 628, 89, 90, 636,
	91, 0, 0, 0, 639, 677, 643, 0, 0, 0,
	92, 93, 94, 221, 692, 223, 693, 95, 694, 695,
	1298, 96, 227, 228, 97, 646, 676, 696, 697, 231,
	0, 688, 0, 669, 0, 98, 99, 100, 0, 101,
	0, 102, 103, 104, 0, 305, 105, 106, 0, 670,
	672, 0, 671, 673, 107, 108, 274, 109, 698, 110,
	699, 700, 0, 111, 0, 112, 0, 0, 0, 691,
	114, 0, 115, 0, 0, 0, 634, 116, 117, 678,
	679, 657, 0, 0, 118, 119, 701, 0, 120, 0,
	121, 0, 1303, 306, 0, 122, 689, 0, 241, 0,
	123, 124, 125, 126, 685, 687, 308, 0, 130, 0,
	127, 0, 307, 128, 702, 129, 703, 704, 705, 0,
	668, 0, 309, 131, 310, 132, 133, 0, 135, 134,
	1299, 690, 311, 136, 312, 0, 137, 0, 0, 138,
	0, 139, 140, 141, 143, 250, 142, 313, 144, 145,
	147, 146, 629, 0, 658, 686, 148, 706, 149, 150,
	0, 151, 0, 0, 152, 0, 0, 153, 253, 314,
	154, 315, 680, 155, 156, 157, 158, 0, 681, 159,
	256, 160, 0, 161, 162, 163, 707, 164, 165, 0,
	166, 167, 168, 169, 170, 172, 173, 171, 174, 175,
	176, 0, 177, 316, 178, 179, 635, 180, 0, 181,
	182, 183, 184, 0, 259, 185, 186, 674, 187, 188,
	317, 189, 708, 261, 190, 0, 196, 191, 192, 193,
	195, 709, 194, 682, 0, 197, 0, 198, 199, 200,
	201, 202, 0, 264, 710, 711, 0, 1300, 203, 683,
	684, 656, 204, 205, 206, 207, 0, 0, 208, 209,
	210, 675, 211, 0, 212, 213, 214, 269, 712, 0,
	0, 215, 0, 0, 0, 0, 216, 217, 218, 219,
	630, 0, 661, 650, 651, 648, 649, 640, 0, 0,
	0, 626, 627, 0, 0, 0, 0, 628, 89, 90,
	636, 91, 0, 0, 0, 639, 677, 643, 0, 0,
	0, 92, 93, 94, 221, 692, 223, 693, 95, 694,
	695, 0, 96, 227, 228, 97, 646, 676, 696, 697,
	231, 0, 688, 0, 669, 0, 98, 99, 100, 0,
	101, 0, 102, 103, 104, 0, 305, 105, 106, 0,
	670, 672, 0, 671, 673, 107, 108, 274, 109, 698,
	110, 699, 700, 0, 111, 0, 112, 0, 0, 0,
	691, 114, 0, 115, 0, 0, 0, 634, 116, 117,
	678, 679, 657, 0, 0, 118, 119, 701, 0, 120,
	0, 121, 0, 0, 306, 0, 122, 689, 0, 241,
	0, 123, 124, 125, 126, 685, 687, 308, 0, 130,
	0, 127, 0, 307, 128, 702, 129, 703, 704, 705,
	0, 668, 0, 309, 131, 310, 132, 133, 0, 135,
	134, 0, 690, 311, 136, 312, 0, 137, 0, 0,
	138, 0, 139, 140, 141, 143, 250, 142, 313, 144,
	145, 147, 146, 629, 1585, 658, 686, 148, 706, 149,
	150, 0, 151, 0, 0, 152, 0, 0, 153, 253,
	314, 154, 315, 680, 155, 156, 157, 158, 0, 681,
	159, 256, 160, 0, 161, 162, 163, 707, 164, 165,
	0, 166, 167, 168, 169, 170, 172, 173, 171, 174,
	175, 176, 0, 177, 316, 178, 179, 635, 180, 0,
	181, 182, 183, 184, 0, 259, 185, 186, 674, 187,
	188, 317, 189, 708, 261, 190, 0, 196, 191, 192,
	193, 195, 709, 194, 682, 0, 197, 0, 198, 199,
	200, 201, 202, 0, 264, 710, 711, 0, 0, 203,
	683, 684, 656, 204, 205, 206, 207, 0, 0, 208,
	209, 210, 675, 211, 0, 212, 213, 214, 269, 712,
	0, 0, 215, 0, 0, 0, 0, 216, 217, 218,
	219, 630, 0, 661, 650, 651, 648, 649, 640, 0,
	0, 0, 626, 627, 624, 0, 0, 0, 628, 89,
	90, 636, 91, 0, 0, 0, 639, 677, 643, 0,
	0, 0, 92, 93, 94, 221, 692, 223, 693, 95,
	694, 695, 0, 96, 227, 228, 97, 646, 676, 696,
	697, 231, 0, 688, 0, 669, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 305, 105, 106,
	0, 670, 672, 0, 671, 673, 107, 108, 274, 109,
	698, 110, 699, 700, 0, 111, 0, 112, 0, 0,
	0, 691, 114, 0, 115, 0, 0, 0, 634, 116,
	117, 678, 679, 657, 0, 0, 118, 119, 701, 0,
	120, 0, 121, 0, 0, 306, 0, 122, 689, 0,
	241, 0, 123, 124, 125, 126, 685, 687, 308, 0,
	130, 0, 127, 0, 307, 128, 702, 129, 703, 704,
	705, 0, 668, 0, 309, 131, 310, 132, 133, 0,
	135, 134, 0, 690, 311, 136, 312, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 313,
	144, 145, 147, 146, 629, 0, 658, 686, 148, 706,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 314, 154, 315, 680, 155, 156, 157, 158, 0,
	681, 159, 256, 160, 0, 161, 162, 163, 707, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 316, 178, 179, 635, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 674,
	187, 188, 317, 189, 708, 261, 190, 0, 196, 191,
	192, 193, 195, 709, 194, 682, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 710, 711, 0, 0,
	203, 683, 684, 656, 204, 205, 206, 207, 0, 0,
	208, 209, 210, 675, 211, 0, 212, 213, 214, 269,
	712, 0, 0, 215, 0, 0, 0, 0, 216, 217,
	218, 219, 630, 0, 0, 0, 0, 661, 650, 651,
	648, 649, 640, 626, 627, 0, 0, 0, 0, 628,
	982, 1251, 636, 89, 90, 0, 91, 639, 0, 0,
	0, 677, 643, 0, 0, 0, 92, 93, 94, 221,
	692, 223, 693, 95, 694, 695, 0, 96, 227, 228,
	97, 646, 676, 696, 697, 231, 0, 688, 0, 669,
	0, 98, 99, 100, 0, 101, 0, 102, 103, 104,
	0, 305, 105, 106, 0, 670, 672, 0, 671, 673,
	107, 108, 274, 109, 698, 110, 699, 700, 0, 111,
	0, 112, 0, 0, 0, 691, 114, 0, 115, 0,
	0, 0, 634, 116, 117, 678, 679, 657, 0, 0,
	118, 119, 701, 0, 120, 0, 121, 0, 0, 306,
	0, 122, 689, 0, 241, 0, 123, 124, 125, 126,
	685, 687, 308, 0, 130, 0, 127, 0, 307, 128,
	702, 129, 703, 704, 705, 0, 668, 0, 309, 131,
	310, 132, 133, 0, 135, 134, 0, 690, 311, 136,
	312, 0, 137, 0, 0, 138, 0, 139, 140, 141,
	143, 250, 142, 313, 144, 145, 147, 146, 629, 0,
	658, 686, 148, 706, 149, 150, 0, 151, 0, 0,
	152, 0, 0, 153, 253, 314, 154, 315, 680, 155,
	156, 157, 158, 0, 681, 159, 256, 160, 0, 161,
	162, 163, 707, 164, 165, 0, 166, 167, 168, 169,
	170, 172, 173, 171, 174, 175, 176, 0, 177, 316,
	178, 179, 635, 180, 0, 181, 182, 183, 184, 0,
	259, 185, 186, 674, 187, 188, 317, 189, 708, 261,
	190, 0, 196, 191, 192, 193, 195, 709, 194, 682,
	0, 197, 0, 198, 199, 200, 201, 202, 0, 264,
	710, 711, 0, 0, 203, 683, 684, 656, 204, 205,
	206, 207, 0, 0, 208, 209, 210, 675, 211, 0,
	212, 213, 214, 269, 712, 0, 0, 215, 0, 0,
	0, 0, 216, 217, 218, 219, 630, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 627, 0,
	0, 0, 0, 628, 0, 0, 636, 1716, 0, 0,
	0, 639, 661, 650, 651, 648, 649, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 677, 643, 0, 0,
	0, 92, 93, 94, 221, 692, 223, 693, 95, 694,
	695, 0, 96, 227, 228, 97, 646, 676, 696, 697,
	231, 0, 688, 0, 669, 0, 98, 99, 100, 0,
	101, 0, 102, 103, 104, 0, 305, 105, 106, 0,
	670, 672, 0, 671, 673, 107, 108, 274, 109, 698,
	110, 699, 700, 0, 111, 0, 112, 0, 0, 0,
	691, 114, 0, 115, 0, 0, 0, 634, 116, 117,
	678, 679, 657, 0, 0, 118, 119, 701, 0, 120,
	0, 121, 0, 0, 306, 0, 122, 689, 0, 241,
	0, 123, 124, 125, 126, 685, 687, 308, 0, 130,
	0, 127, 0, 307, 128, 702, 129, 703, 704, 705,
	0, 668, 0, 309, 131, 310, 132, 133, 0, 135,
	134, 0, 690, 311, 136, 312, 0, 137, 0, 0,
	138, 0, 139, 140, 141, 143, 250, 142, 313, 144,
	145, 147, 146, 629, 0, 658, 686, 148, 706, 149,
	150, 0, 151, 0, 0, 152, 0, 0, 153, 253,
	314, 154, 315, 680, 155, 156, 157, 158, 0, 681,
	159, 256, 160, 0, 161, 162, 163, 707, 164, 165,
	0, 166, 167, 168, 169, 170, 172, 173, 171, 174,
	175, 176, 0, 177, 316, 178, 179, 635, 180, 0,
	181, 182, 183, 184, 0, 259, 185, 186, 674, 187,
	188, 317, 189, 708, 261, 190, 0, 196, 191, 192,
	193, 195, 709, 194, 682, 0, 197, 0, 198, 199,
	200, 201, 202, 0, 264, 710, 711, 0, 0, 203,
	683, 684, 656, 204, 205, 206, 207, 0, 0, 208,
	209, 210, 675, 211, 0, 212, 213, 214, 269, 712,
	1673, 0, 215, 0, 0, 0, 0, 216, 217, 218,
	219, 630, 0, 661, 650, 651, 648, 649, 640, 0,
	0, 0, 626, 627, 0, 0, 0, 0, 628, 89,
	90, 636, 91, 0, 0, 0, 639, 677, 643, 0,
	0, 0, 92, 93, 94, 221, 692, 223, 693, 95,
	694, 695, 0, 96, 227, 228, 97, 646, 676, 696,
	697, 231, 0, 688, 0, 669, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 305, 105, 106,
	0, 670, 672, 0, 671, 673, 107, 108, 274, 109,
	698, 110, 699, 700, 0, 111, 0, 112, 0, 0,
	0, 691, 114, 0, 115, 0, 0, 0, 634, 116,
	117, 678, 679, 657, 0, 0, 118, 119, 701, 0,
	120, 0, 121, 0, 0, 306, 0, 122, 689, 0,
	241, 0, 123, 124, 125, 126, 685, 687, 308, 0,
	130, 0, 127, 0, 307, 128, 702, 129, 703, 704,
	705, 0, 668, 0, 309, 131, 310, 132, 133, 0,
	135, 134, 0, 690, 311, 136, 312, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 313,
	144, 145, 147, 146, 629, 0, 658, 686, 148, 706,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 314, 154, 315, 680, 155, 156, 157, 158, 0,
	681, 159, 256, 160, 0, 161, 162, 163, 707, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 316, 178, 179, 635, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 674,
	187, 188, 317, 189, 708, 261, 190, 0, 196, 191,
	192, 193, 195, 709, 194, 682, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 710, 711, 0, 0,
	203, 683, 684, 656, 204, 205, 206, 207, 0, 0,
	208, 209, 210, 675, 211, 0, 212, 213, 214, 269,
	712, 0, 0, 215, 0, 0, 0, 0, 216, 217,
	218, 219, 630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 627, 0, 0, 0, 0, 628,
	0, 0, 636, 1663, 0, 0, 0, 639, 661, 650,
	651, 648, 649, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 677, 643, 0, 0, 0, 92, 93, 94,
	221, 692, 223, 693, 95, 694, 695, 0, 96, 227,
	228, 97, 646, 676, 696, 697, 231, 0, 688, 0,
	669, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 305, 105, 106, 0, 670, 672, 0, 671,
	673, 107, 108, 274, 109, 698, 110, 699, 700, 727,
	111, 0, 112, 0, 0, 0, 691, 114, 0, 115,
	0, 0, 0, 634, 116, 117, 678, 679, 657, 0,
	0, 118, 119, 701, 0, 120, 0, 121, 0, 0,
	306, 0, 122, 689, 0, 241, 0, 123, 124, 125,
	126, 685, 687, 308, 0, 130, 0, 127, 0, 307,
	128, 702, 129, 703, 704, 705, 0, 668, 0, 309,
	131, 310, 132, 133, 0, 135, 134, 0, 690, 311,
	136, 312, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 313, 144, 145, 147, 146, 629,
	0, 658, 686, 148, 706, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 314, 154, 315, 680,
	155, 156, 157, 158, 0, 681, 159, 256, 160, 0,
	161, 162, 163, 707, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	316, 178, 179, 635, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 674, 187, 188, 317, 189, 708,
	261, 190, 0, 196, 191, 192, 193, 195, 709, 194,
	682, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 710, 711, 0, 0, 203, 683, 684, 656, 204,
	205, 206, 207, 0, 0, 208, 209, 210, 675, 211,
	0, 212, 213, 214, 269, 712, 0, 0, 215, 0,
	0, 0, 0, 216, 217, 218, 219, 630, 0, 661,
	650, 651, 648, 649, 640, 0, 0, 0, 626, 627,
	0, 0, 0, 0, 628, 89, 90, 636, 91, 0,
	0, 0, 639, 677, 643, 0, 0, 0, 92, 93,
	94, 221, 692, 223, 693, 95, 694, 695, 0, 96,
	227, 228, 97, 646, 676, 696, 697, 231, 0, 688,
	0, 669, 0, 98, 99, 100, 0, 101, 0, 102,
	103, 104, 0, 305, 105, 106, 0, 670, 672, 0,
	671, 673, 107, 108, 274, 109, 698, 110, 699, 700,
	0, 111, 0, 112, 0, 0, 0, 691, 114, 0,
	115, 0, 0, 0, 634, 116, 117, 678, 679, 657,
	0, 0, 118, 119, 701, 0, 120, 0, 121, 0,
	1303, 306, 0, 122, 689, 0, 241, 0, 123, 124,
	125, 126, 685, 687, 308, 0, 130, 0, 127, 0,
	307, 128, 702, 129, 703, 704, 705, 0, 668, 0,
	309, 131, 310, 132, 133, 0, 135, 134, 0, 690,
	311, 136, 312, 0, 137, 0, 0, 138, 0, 139,
	140, 141, 143, 250, 142, 313, 144, 145, 147, 146,
	629, 0, 658, 686, 148, 706, 149, 150, 0, 151,
	0, 0, 152, 0, 0, 153, 253, 314, 154, 315,
	680, 155, 156, 157, 158, 0, 681, 159, 256, 160,
	0, 161, 162, 163, 707, 164, 165, 0, 166, 167,
	168, 169, 170, 172, 173, 171, 174, 175, 176, 0,
	177, 316, 178, 179, 635, 180, 0, 181, 182, 183,
	184, 0, 259, 185, 186, 674, 187, 188, 317, 189,
	708, 261, 190, 0, 196, 191, 192, 193, 195, 709,
	194, 682, 0, 197, 0, 198, 199, 200, 201, 202,
	0, 264, 710, 711, 0, 0, 203, 683, 684, 656,
	204, 205, 206, 207, 0, 0, 208, 209, 210, 675,
	211, 0, 212, 213, 214, 269, 712, 0, 0, 215,
	0, 0, 0, 0, 216, 217, 218, 219, 630, 0,
	661, 650, 651, 648, 649, 640, 0, 0, 0, 626,
	627, 0, 0, 0, 0, 628, 89, 90, 636, 91,
	0, 0, 0, 639, 677, 643, 0, 0, 0, 92,
	93, 94, 221, 692, 223, 693, 95, 694, 695, 0,
	96, 227, 228, 97, 646, 676, 696, 697, 231, 0,
	688, 0, 669, 0, 98, 99, 100, 0, 101, 0,
	102, 103, 104, 0, 305, 105, 106, 0, 670, 672,
	0, 671, 673, 107, 108, 274, 109, 698, 110, 699,
	700, 0, 111, 0, 112, 0, 0, 0, 691, 114,
	0, 115, 0, 0, 0, 634, 116, 117, 678, 679,
	657, 0, 0, 118, 119, 701, 0, 120, 0, 121,
	0, 0, 306, 0, 122, 689, 0, 241, 0, 123,
	124, 125, 126, 685, 687, 308, 0, 130, 0, 127,
	0, 307, 128, 702, 129, 703, 704, 705, 0, 668,
	0, 309, 131, 310, 132, 133, 0, 135, 134, 0,
	690, 311, 136, 312, 0, 137, 0, 0, 138, 0,
	139, 140, 141, 143, 250, 142, 313, 144, 145, 147,
	146, 629, 0, 658, 686, 148, 706, 149, 150, 0,
	151, 0, 0, 152, 0, 0, 153, 253, 314, 154,
	315, 680, 155, 156, 157, 158, 0, 681, 159, 256,
	160, 0, 161, 162, 163, 707, 164, 165, 0, 166,
	167, 168, 169, 170, 172, 173, 171, 174, 175, 176,
	0, 177, 316, 178, 179, 635, 180, 0, 181, 182,
	183, 184, 0, 259, 185, 186, 674, 187, 188, 317,
	189, 708, 261, 190, 0, 196, 191, 192, 193, 195,
	709, 194, 682, 0, 197, 0, 198, 199, 200, 201,
	202, 0, 264, 710, 711, 0, 0, 203, 683, 684,
	656, 204, 205, 206, 207, 0, 0, 208, 209, 210,
	675, 211, 0, 212, 213, 214, 269, 712, 0, 0,
	215, 0, 0, 0, 0, 216, 217, 218, 219, 630,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 627, 0, 0, 0, 0, 628, 0, 0, 636,
	1246, 0, 0, 0, 639, 661, 650, 651, 648, 649,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 677,
	643, 0, 0, 0, 92, 93, 94, 221, 692, 223,
	693, 95, 694, 695, 0, 96, 227, 228, 97, 646,
	676, 696, 697, 231, 0, 688, 0, 669, 0, 98,
	99, 100, 0, 101, 0, 102, 103, 104, 0, 305,
	105, 106, 0, 670, 672, 0, 671, 673, 107, 108,
	274, 109, 698, 110, 699, 700, 0, 111, 0, 112,
	0, 0, 0, 691, 114, 0, 115, 0, 0, 0,
	634, 116, 117, 678, 679, 657, 0, 0, 118, 119,
	701, 0, 120, 0, 121, 0, 0, 306, 0, 122,
	689, 0, 241, 0, 123, 124, 125, 126, 685, 687,
	308, 0, 130, 0, 127, 0, 307, 128, 702, 129,
	703, 704, 705, 0, 668, 0, 309, 131, 310, 132,
	133, 0, 135, 134, 0, 690, 311, 136, 312, 0,
	137, 0, 0, 138, 0, 139, 140, 141, 143, 250,
	142, 313, 144, 145, 147, 146, 629, 0, 658, 686,
	148, 706, 149, 150, 0, 151, 0, 0, 152, 0,
	0, 153, 253, 314, 154, 315, 680, 155, 156, 157,
	158, 0, 681, 159, 256, 160, 0, 161, 162, 163,
	707, 164, 165, 0, 166, 167, 168, 169, 170, 172,
	173, 171, 174, 175, 176, 0, 177, 316, 178, 179,
	635, 180, 0, 181, 182, 183, 184, 0, 259, 185,
	186, 674, 187, 188, 317, 189, 708, 261, 190, 0,
	196, 191, 192, 193, 195, 709, 194, 682, 0, 197,
	0, 198, 199, 200, 201, 202, 0, 264, 710, 711,
	0, 0, 203, 683, 684, 656, 204, 205, 206, 207,
	0, 0, 208, 209, 210, 675, 211, 0, 212, 213,
	214, 269, 712, 0, 0, 215, 0, 0, 0, 0,
	216, 217, 218, 219, 630, 0, 0, 0, 0, 661,
	650, 651, 648, 649, 640, 626, 627, 624, 0, 0,
	0, 628, 0, 0, 636, 89, 90, 910, 91, 639,
	0, 0, 0, 677, 643, 0, 0, 0, 92, 93,
	94, 221, 692, 223, 693, 95, 694, 695, 0, 96,
	227, 228, 97, 646, 676, 696, 697, 231, 0, 688,
	0, 669, 0, 98, 99, 100, 0, 101, 0, 102,
	103, 104, 0, 305, 105, 106, 0, 670, 672, 0,
	671, 673, 107, 108, 274, 109, 698, 110, 699, 700,
	0, 111, 0, 112, 0, 0, 0, 691, 114, 0,
	115, 0, 0, 0, 634, 116, 117, 678, 679, 657,
	0, 0, 118, 119, 701, 0, 120, 0, 121, 0,
	0, 306, 0, 122, 689, 0, 241, 0, 123, 124,
	125, 126, 685, 687, 308, 0, 130, 0, 127, 0,
	307, 128, 702, 129, 703, 704, 705, 0, 668, 0,
	309, 131, 310, 132, 133, 0, 135, 134, 0, 690,
	311, 136, 312, 0, 137, 0, 0, 138, 0, 139,
	140, 141, 143, 250, 142, 313, 144, 145, 147, 146,
	629, 0, 658, 686, 148, 706, 149, 150, 0, 151,
	0, 0, 152, 0, 0, 153, 253, 314, 154, 315,
	680, 155, 156, 157, 158, 0, 681, 159, 256, 160,
	0, 161, 162, 163, 707, 164, 165, 0, 166, 167,
	168, 169, 170, 172, 173, 171, 174, 175, 176, 0,
	177, 316, 178, 179, 635, 180, 0, 181, 182, 183,
	184, 0, 259, 185, 186, 674, 187, 188, 317, 189,
	708, 261, 190, 0, 196, 191, 192, 193, 195, 709,
	194, 682, 0, 197, 0, 198, 199, 200, 201, 202,
	0, 264, 710, 711, 0, 0, 203, 683, 684, 656,
	204, 205, 206, 207, 0, 0, 208, 209, 210, 675,
	211, 0, 212, 213, 214, 269, 712, 0, 0, 215,
	0, 0, 0, 0, 216, 217, 218, 219, 630, 0,
	661, 650, 651, 648, 649, 640, 0, 0, 0, 626,
	627, 0, 0, 0, 0, 628, 89, 90, 636, 91,
	0, 0, 0, 639, 677, 643, 0, 0, 0, 92,
	93, 94, 221, 692, 223, 693, 95, 694, 695, 0,
	96, 227, 228, 97, 646, 676, 696, 697, 231, 0,
	688, 0, 669, 0, 98, 99, 100, 0, 101, 0,
	102, 103, 104, 0, 305, 105, 2059, 0, 670, 672,
	0, 671, 673, 107, 108, 274, 109, 698, 110, 699,
	700, 0, 111, 0, 112, 0, 0, 0, 691, 114,
	0, 115, 0, 0, 0, 634, 116, 117, 678, 679,
	657, 0, 0, 118, 119, 701, 0, 120, 0, 121,
	0, 0, 306, 0, 122, 689, 0, 241, 0, 123,
	124, 125, 126, 685, 687, 308, 0, 130, 0, 127,
	0, 307, 128, 702, 129, 703, 704, 705, 0, 668,
	0, 309, 131, 310, 132, 133, 0, 135, 134, 0,
	690, 311, 136, 312, 0, 137, 0, 0, 138, 0,
	139, 140, 141, 143, 250, 142, 313, 144, 145, 147,
	146, 629, 0, 658, 686, 148, 706, 149, 150, 0,
	151, 0, 0, 152, 0, 0, 153, 253, 314, 154,
	315, 680, 155, 156, 157, 158, 0, 681, 159, 256,
	160, 0, 161, 162, 163, 707, 164, 165, 0, 166,
	167, 168, 169, 170, 172, 173, 171, 174, 175, 176,
	0, 177, 316, 178, 179, 635, 180, 0, 181, 182,
	183, 184, 0, 259, 185, 186, 674, 187, 188, 317,
	189, 708, 261, 190, 0, 196, 191, 192, 193, 195,
	709, 194, 682, 0, 197, 0, 198, 199, 200, 201,
	202, 0, 264, 710, 711, 0, 0, 203, 683, 684,
	656, 204, 205, 2058, 207, 0, 0, 208, 209, 210,
	675, 211, 0, 212, 213, 214, 269, 712, 0, 0,
	215, 0, 0, 0, 0, 216, 217, 218, 219, 630,
	0, 661, 650, 651, 648, 649, 640, 0, 0, 0,
	626, 627, 0, 0, 0, 0, 628, 89, 90, 636,
	91, 0, 0, 0, 639, 677, 643, 0, 0, 0,
	92, 93, 94, 2057, 692, 223, 693, 95, 694, 695,
	0, 96, 227, 228, 97, 646, 676, 696, 697, 231,
	0, 688, 0, 669, 0, 98, 99, 100, 0, 101,
	0, 102, 103, 104, 0, 305, 105, 2059, 0, 670,
	672, 0, 671, 673, 107, 108, 274, 109, 698, 110,
	699, 700, 0, 111, 0, 112, 0, 0, 0, 691,
	114, 0, 115, 0, 0, 0, 634, 116, 117, 678,
	679, 657, 0, 0, 118, 119, 701, 0, 120, 0,
	121, 0, 0, 306, 0, 122, 689, 0, 241, 0,
	123, 124, 125, 126, 685, 687, 308, 0, 130, 0,
	127, 0, 307, 128, 702, 129, 703, 704, 705, 0,
	668, 0, 309, 131, 310, 132, 133, 0, 135, 134,
	0, 690, 311, 136, 312, 0, 137, 0, 0, 138,
	0, 139, 140, 141, 143, 250, 142, 313, 144, 145,
	147, 146, 629, 0, 658, 686, 148, 706, 149, 150,
	0, 151, 0, 0, 152, 0, 0, 153, 253, 314,
	154, 315, 680, 155, 156, 157, 158, 0, 681, 159,
	256, 160, 0, 161, 162, 163, 707, 164, 165, 0,
	166, 167, 168, 169, 170, 172, 173, 171, 174, 175,
	176, 0, 177, 316, 178, 179, 635, 180, 0, 181,
	182, 183, 184, 0, 259, 185, 186, 674, 187, 188,
	317, 189, 708, 261, 190, 0, 196, 191, 192, 193,
	195, 709, 194, 682, 0, 197, 0, 198, 199, 200,
	201, 202, 0, 264, 710, 711, 0, 0, 203, 683,
	684, 656, 204, 205, 2058, 207, 0, 0, 208, 209,
	210, 675, 211, 0, 212, 213, 214, 269, 712, 0,
	0, 215, 0, 0, 0, 0, 216, 217, 218, 219,
	630, 0, 661, 650, 651, 648, 649, 640, 0, 0,
	0, 626, 627, 0, 0, 0, 0, 628, 89, 90,
	636, 91, 0, 0, 0, 639, 677, 643, 0, 0,
	0, 92, 93, 94, 221, 692, 223, 693, 95, 694,
	695, 0, 96, 227, 228, 97, 646, 676, 696, 697,
	231, 0, 688, 0, 669, 0, 98, 99, 100, 0,
	101, 0, 102, 103, 104, 0, 305, 105, 106, 0,
	670, 672, 0, 671, 673, 107, 108, 274, 109, 698,
	110, 699, 700, 0, 111, 0, 112, 0, 0, 0,
	691, 114, 0, 115, 0, 0, 0, 634, 116, 117,
	678, 679, 657, 0, 0, 118, 119, 701, 0, 120,
	0, 121, 0, 0, 306, 0, 122, 689, 0, 241,
	0, 123, 124, 125, 126, 685, 687, 308, 0, 130,
	0, 127, 0, 307, 128, 702, 129, 703, 704, 705,
	0, 668, 0, 309, 131, 310, 132, 133, 0, 135,
	134, 0, 690, 311, 136, 312, 0, 137, 0, 0,
	138, 0, 139, 140, 141, 143, 250, 142, 313, 144,
	145, 147, 146, 629, 0, 658, 686, 148, 706, 149,
	150, 0, 151, 0, 0, 152, 0, 0, 153, 253,
	314, 154, 315, 680, 155, 156, 157, 158, 0, 681,
	159, 256, 160, 0, 161, 162, 163, 707, 164, 165,
	0, 166, 167, 168, 169, 170, 172, 173, 171, 174,
	175, 176, 0, 177, 316, 178, 179, 635, 180, 0,
	181, 182, 183, 184, 0, 259, 185, 186, 674, 187,
	188, 317, 189, 708, 261, 190, 0, 196, 191, 192,
	193, 195, 709, 194, 682, 0, 197, 0, 198, 199,
	200, 201, 202, 0, 264, 710, 711, 0, 0, 203,
	683, 684, 656, 204, 205, 206, 207, 0, 0, 208,
	209, 210, 675, 211, 0, 212, 213, 214, 269, 712,
	0, 0, 215, 0, 0, 0, 0, 216, 217, 218,
	219, 630, 0, 1275, 650, 651, 648, 649, 640, 0,
	0, 0, 626, 627, 0, 0, 0, 0, 628, 89,
	90, 636, 91, 0, 0, 0, 639, 677, 643, 0,
	0, 0, 92, 93, 94, 221, 692, 223, 693, 95,
	694, 695, 0, 96, 227, 228, 97, 646, 676, 696,
	697, 231, 0, 688, 0, 669, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 305, 105, 106,
	0, 670, 672, 0, 671, 673, 107, 108, 274, 109,
	698, 1278, 699, 700, 0, 111, 0, 112, 0, 0,
	0, 691, 114, 0, 115, 0, 0, 0, 634, 116,
	117, 678, 679, 657, 0, 0, 118, 119, 701, 0,
	120, 0, 121, 0, 0, 306, 0, 122, 689, 0,
	241, 0, 123, 124, 1279, 126, 685, 687, 308, 0,
	130, 0, 127, 0, 307, 128, 702, 129, 703, 704,
	705, 0, 668, 0, 309, 131, 310, 132, 133, 0,
	135, 134, 0, 690, 311, 136, 312, 0, 137, 0,
	0, 138, 0, 139, 1280, 1277, 143, 250, 142, 313,
	144, 145, 147, 146, 629, 0, 658, 686, 148, 706,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 314, 154, 315, 680, 155, 156, 157, 158, 0,
	681, 159, 256, 160, 0, 161, 162, 163, 707, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 316, 178, 179, 635, 180,
	0, 181, 182, 183, 1281, 0, 259, 185, 186, 674,
	187, 188, 317, 189, 708, 261, 190, 0, 196, 191,
	192, 193, 195, 709, 194, 682, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 710, 711, 0, 0,
	203, 683, 684, 656, 204, 205, 206, 207, 0, 0,
	208, 209, 210, 675, 211, 0, 212, 213, 214, 269,
	712, 0, 0, 215, 0, 0, 0, 0, 216, 217,
	1276, 219, 630, 0, 661, 650, 651, 648, 649, 640,
	0, 0, 0, 626, 627, 0, 0, 0, 0, 628,
	89, 90, 636, 91, 0, 0, 0, 639, 677, 643,
	0, 0, 0, 92, 93, 94, 221, 692, 223, 693,
	95, 694, 695, 0, 96, 227, 228, 97, 646, 676,
	696, 697, 231, 0, 688, 0, 669, 0, 98, 99,
	100, 0, 101, 0, 102, 103, 104, 0, 305, 105,
	106, 0, 670, 672, 0, 671, 673, 107, 108, 274,
	109, 698, 110, 699, 700, 0, 111, 0, 112, 0,
	0, 0, 691, 114, 0, 115, 0, 0, 0, 634,
	116, 117, 678, 679, 657, 0, 0, 118, 119, 701,
	0, 120, 0, 121, 0, 0, 306, 0, 122, 689,
	0, 241, 0, 123, 124, 125, 126, 685, 687, 308,
	0, 130, 0, 127, 0, 307, 128, 702, 129, 703,
	704, 705, 0, 668, 0, 309, 131, 310, 132, 133,
	0, 135, 134, 0, 690, 311, 136, 312, 0, 137,
	0, 0, 138, 0, 139, 140, 141, 143, 250, 142,
	313, 144, 145, 147, 146, 0, 0, 658, 686, 148,
	706, 149, 150, 0, 151, 0, 0, 152, 0, 0,
	153, 253, 314, 154, 315, 680, 155, 156, 157, 158,
	0, 681, 159, 256, 160, 0, 161, 162, 163, 707,
	164, 165, 0, 166, 167, 168, 169, 170, 172, 173,
	171, 174, 175, 176, 0, 177, 316, 178, 179, 1293,
	180, 0, 181, 182, 183, 184, 0, 259, 185, 186,
	674, 187, 188, 317, 189, 708, 261, 190, 0, 196,
	191, 192, 193, 195, 709, 194, 682, 0, 197, 0,
	198, 199, 200, 201, 202, 0, 264, 710, 711, 0,
	0, 203, 683, 684, 656, 204, 205, 206, 207, 0,
	0, 208, 209, 210, 675, 211, 0, 212, 213, 214,
	269, 712, 0, 0, 215, 0, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 661, 650, 651, 648, 649,
	640, 0, 0, 0, 1289, 1290, 0, 0, 0, 0,
	1291, 89, 90, 1292, 91, 0, 0, 0, 639, 677,
	643, 0, 0, 0, 92, 93, 94, 0, 692, 223,
	693, 95, 694, 695, 0, 96, 227, 228, 97, 646,
	676, 696, 697, 231, 0, 688, 0, 669, 0, 98,
	99, 100, 0, 101, 0, 102, 103, 104, 0, 305,
	105, 2059, 0, 670, 672, 0, 671, 673, 107, 108,
	274, 109, 698, 110, 699, 700, 0, 111, 0, 112,
	0, 0, 0, 691, 114, 0, 115, 0, 0, 0,
	634, 116, 117, 678, 679, 657, 0, 0, 118, 119,
	701, 0, 120, 0, 121, 0, 0, 306, 0, 122,
	689, 0, 241, 0, 123, 124, 125, 126, 685, 687,
	0, 0, 130, 0, 127, 0, 307, 128, 702, 129,
	703, 704, 705, 0, 668, 0, 0, 131, 310, 132,
	133, 0, 135, 134, 0, 690, 311, 136, 0, 0,
	137, 0, 0, 138, 0, 139, 140, 141, 143, 250,
	142, 313, 144, 145, 147, 146, 629, 0, 658, 686,
	148, 706, 149, 150, 0, 151, 0, 0, 152, 0,
	0, 153, 253, 314, 154, 315, 680, 155, 156, 157,
	158, 0, 681, 159, 256, 160, 0, 161, 162, 163,
	707, 164, 165, 0, 166, 167, 168, 169, 170, 172,
	173, 171, 174, 175, 176, 0, 177, 316, 178, 179,
	635, 180, 0, 181, 182, 183, 184, 0, 259, 185,
	186, 674, 187, 188, 0, 189, 708, 261, 190, 0,
	196, 191, 192, 193, 195, 709, 194, 682, 0, 197,
	0, 198, 199, 200, 201, 202, 0, 264, 710, 711,
	0, 0, 203, 683, 684, 656, 204, 205, 2058, 207,
	0, 0, 208, 209, 210, 675, 211, 0, 212, 213,
	214, 269, 712, 0, 0, 215, 0, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 661, 650, 651, 648,
	649, 640, 0, 0, 0, 626, 627, 0, 0, 0,
	0, 628, 89, 90, 636, 91, 0, 0, 0, 639,
	677, 643, 0, 0, 0, 92, 93, 94, 221, 692,
	223, 693, 95, 694, 695, 0, 96, 227, 228, 97,
	0, 676, 696, 697, 231, 0, 688, 0, 669, 0,
	98, 99, 100, 0, 101, 0, 102, 103, 104, 0,
	305, 105, 106, 0, 670, 672, 0, 671, 673, 107,
	108, 274, 109, 698, 110, 699, 700, 0, 111, 0,
	112, 0, 0, 0, 691, 114, 0, 115, 0, 0,
	0, 236, 116, 117, 678, 679, 657, 0, 0, 118,
	119, 701, 0, 120, 0, 121, 0, 0, 306, 0,
	122, 689, 0, 241, 0, 123, 124, 125, 126, 685,
	687, 308, 0, 130, 0, 127, 0, 307, 128, 702,
	129, 703, 704, 705, 0, 668, 0, 309, 131, 310,
	132, 133, 0, 135, 134, 0, 690, 311, 136, 312,
	0, 137, 0, 0, 138, 0, 139, 140, 141, 143,
	250, 142, 313, 144, 145, 147, 146, 0, 0, 658,
	686, 148, 706, 149, 150, 0, 151, 0, 0, 152,
	0, 0, 153, 253, 314, 154, 315, 680, 155, 156,
	157, 158, 0, 681, 159, 256, 160, 0, 161, 162,
	163, 707, 164, 165, 0, 166, 167, 168, 169, 170,
	172, 173, 171, 174, 175, 176, 0, 177, 316, 178,
	179, 1293, 180, 0, 181, 182, 183, 184, 0, 259,
	185, 186, 674, 187, 188, 317, 189, 708, 261, 190,
	0, 196, 191, 192, 193, 195, 709, 194, 682, 0,
	197, 0, 198, 199, 200, 201, 202, 0, 264, 710,
	711, 0, 0, 203, 683, 684, 656, 204, 205, 206,
	207, 661, 0, 208, 209, 210, 675, 211, 0, 212,
	213, 214, 269, 712, 0, 0, 215, 89, 90, 0,
	91, 216, 217, 218, 219, 677, 0, 0, 0, 0,
	92, 93, 94, 221, 222, 223, 224, 95, 225, 226,
	0, 96, 227, 228, 97, 1292, 676, 229, 230, 231,
	639, 688, 0, 669, 0, 98, 99, 100, 0, 101,
	0, 102, 103, 104, 0, 305, 105, 106, 0, 670,
	672, 0, 671, 673, 107, 108, 274, 109, 233, 110,
	234, 235, 0, 111, 0, 112, 0, 0, 0, 113,
	114, 0, 115, 0, 0, 0, 236, 116, 117, 678,
	679, 0, 0, 0, 118, 119, 239, 0, 120, 0,
	121, 0, 0, 306, 0, 122, 689, 0, 241, 0,
	123, 124, 125, 126, 685, 687, 308, 0, 130, 0,
	127, 0, 307, 128, 244, 129, 245, 246, 247, 0,
	248, 0, 309, 131, 310, 132, 133, 0, 135, 134,
	0, 690, 311, 136, 312, 0, 137, 0, 0, 138,
	0, 139, 140, 141, 143, 250, 142, 313, 144, 145,
	147, 146, 0, 0, 0, 686, 148, 252, 149, 150,
	0, 151, 0, 0, 152, 0, 0, 153, 253, 314,
	154, 315, 680, 155, 156, 157, 158, 0, 681, 159,
	256, 160, 0, 161, 162, 163, 257, 164, 165, 0,
	166, 167, 168, 169, 170, 172, 173, 171, 174, 175,
	176, 0, 177, 316, 178, 179, 258, 180, 0, 181,
	182, 183, 184, 0, 259, 185, 186, 674, 187, 188,
	317, 189, 260, 261, 190, 0, 196, 191, 192, 193,
	195, 262, 194, 682, 0, 197, 0, 198, 199, 200,
	201, 202, 0, 264, 265, 266, 0, 0, 203, 683,
	684, 0, 204, 205, 206, 207, 536, 0, 208, 209,
	210, 675, 211, 0, 212, 213, 214, 269, 270, 0,
	0, 215, 89, 90, 0, 91, 216, 217, 218, 219,
	220, 0, 0, 0, 0, 92, 93, 94, 221, 222,
	223, 224, 95, 225, 226, 0, 96, 227, 228, 97,
	1560, 0, 229, 230, 231, 0, 232, 0, 304, 0,
	98, 99, 100, 0, 101, 0, 102, 103, 104, 0,
	305, 105, 106, 0, 0, 0, 0, 0, 0, 107,
	108, 274, 109, 233, 110, 234, 235, 0, 111, 0,
	112, 0, 0, 0, 113, 114, 0, 115, 0, 0,
	0, 236, 116, 117, 237, 238, 0, 0, 0, 118,
	119, 239, 0, 120, 0, 121, 0, 0, 306, 0,
	122, 240, 0, 241, 0, 123, 124, 125, 126, 242,
	243, 308, 0, 130, 0, 127, 0, 307, 128, 244,
	129, 245, 246, 247, 0, 248, 0, 309, 131, 310,
	132, 133, 0, 135, 134, 0, 249, 311, 136, 312,
	0, 137, 0, 0, 138, 0, 139, 140, 141, 143,
	250, 142, 313, 144, 145, 147, 146, 0, 0, 0,
	251, 148, 252, 149, 150, 0, 151, 0, 0, 152,
	0, 0, 153, 253, 314, 154, 315, 254, 155, 156,
	157, 158, 0, 255, 159, 256, 160, 0, 161, 162,
	163, 257, 164, 165, 0, 166, 167, 168, 169, 170,
	172, 173, 171, 174, 175, 176, 0, 177, 316, 178,
	179, 258, 180, 0, 181, 182, 183, 184, 70, 259,
	185, 186, 0, 187, 188, 317, 189, 260, 261, 190,
	0, 196, 191, 192, 193, 195, 262, 194, 263, 0,
	197, 72, 198, 199, 200, 201, 202, 0, 264, 265,
	266, 0, 0, 203, 267, 268, 0, 204, 205, 206,
	207, 0, 0, 208, 209, 210, 0, 211, 0, 212,
	213, 214, 540, 270, 0, 0, 215, 0, 0, 0,
	68, 216, 217, 218, 219, 0, 69, 536, 750, 0,
	858, 855, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 67, 91, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 92, 93, 94, 221,
	222, 223, 224, 95, 225, 226, 0, 96, 227, 228,
	97, 0, 0, 229, 230, 231, 0, 232, 0, 304,
	0, 98, 99, 100, 0, 101, 0, 102, 103, 104,
	0, 305, 105, 106, 0, 0, 0, 0, 0, 0,
	107, 108, 274, 109, 233, 110, 234, 235, 861, 111,
	0, 112, 0, 0, 0, 113, 114, 0, 115, 0,
	0, 0, 236, 116, 117, 237, 238, 852, 0, 0,
	118, 119, 239, 0, 120, 0, 121, 0, 0, 306,
	0, 122, 240, 0, 241, 0, 123, 124, 125, 126,
	242, 243, 308, 0, 130, 0, 127, 0, 307, 128,
	244, 129, 245, 246, 247, 0, 248, 0, 309, 131,
	310, 132, 133, 0, 135, 134, 0, 249, 311, 136,
	312, 0, 137, 0, 0, 138, 0, 139, 140, 141,
	143, 250, 142, 313, 144, 145, 147, 146, 0, 0,
	0, 251, 148, 252, 149, 150, 0, 151, 853, 0,
	152, 0, 0, 153, 253, 314, 154, 315, 254, 155,
	156, 157, 158, 0, 255, 159, 256, 160, 0, 161,
	162, 163, 257, 164, 165, 0, 166, 167, 168, 169,
	170, 172, 173, 171, 174, 175, 176, 0, 177, 316,
	178, 179, 258, 180, 0, 181, 182, 183, 184, 0,
	259, 185, 186, 0, 187, 188, 317, 189, 260, 261,
	190, 0, 196, 191, 192, 193, 195, 262, 194, 263,
	0, 197, 0, 198, 199, 200, 201, 202, 0, 264,
	265, 266, 0, 0, 203, 267, 268, 851, 204, 205,
	206, 207, 0, 0, 208, 209, 210, 0, 211, 0,
	212, 213, 214, 269, 270, 536, 750, 215, 858, 855,
	850, 0, 216, 217, 218, 219, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 859, 856, 220,
	0, 0, 0, 0, 92, 93, 94, 221, 222, 223,
	224, 95, 225, 226, 0, 96, 227, 228, 97, 0,
	0, 229, 230, 231, 0, 232, 0, 304, 0, 98,
	99, 100, 0, 101, 0, 102, 103, 104, 0, 305,
	105, 106, 0, 0, 0, 0, 0, 0, 107, 108,
	274, 109, 233, 110, 234, 235, 846, 111, 0, 112,
	0, 0, 0, 113, 114, 0, 115, 0, 0, 0,
	236, 116, 117, 237, 238, 852, 0, 0, 118, 119,
	239, 0, 120, 0, 121, 0, 0, 306, 0, 122,
	240, 0, 241, 0, 123, 124, 125, 126, 242, 243,
	308, 0, 130, 0, 127, 0, 307, 128, 244, 129,
	245, 246, 247, 0, 248, 0, 309, 131, 310, 132,
	133, 0, 135, 134, 0, 249, 311, 136, 312, 0,
	137, 0, 0, 138, 0, 139, 140, 141, 143, 250,
	142, 313, 144, 145, 147, 146, 0, 0, 0, 251,
	148, 252, 149, 150, 0, 151, 853, 0, 152, 0,
	0, 153, 253, 314, 154, 315, 254, 155, 156, 157,
	158, 0, 255, 159, 256, 160, 0, 161, 162, 163,
	257, 164, 165, 0, 166, 167, 168, 169, 170, 172,
	173, 171, 174, 175, 176, 0, 177, 316, 178, 179,
	258, 180, 0, 181, 182, 183, 184, 0, 259, 185,
	186, 0, 187, 188, 317, 189, 260, 261, 190, 0,
	196, 191, 192, 193, 195, 262, 194, 263, 0, 197,
	0, 198, 199, 200, 201, 202, 0, 264, 265, 266,
	0, 0, 203, 267, 268, 851, 204, 205, 206, 207,
	0, 0, 208, 209, 210, 0, 211, 0, 212, 213,
	214, 269, 270, 536, 750, 215, 858, 855, 850, 0,
	216, 217, 218, 219, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 859, 856, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 304, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 305, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 852, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 306, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 308, 0,
	130, 0, 127, 0, 307, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 309, 131, 310, 132, 133, 0,
	135, 134, 0, 249, 311, 136, 312, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 313,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 853, 0, 152, 0, 0, 153,
	253, 314, 154, 315, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 316, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 317, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 851, 204, 205, 206, 207, 0, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 86, 0, 215, 0, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 859, 856, 220, 0, 0, 0, 0,
	92, 93, 94, 221, 222, 223, 224, 95, 225, 226,
	0, 96, 227, 228, 97, 0, 0, 229, 230, 231,
	0, 232, 0, 0, 0, 98, 99, 100, 0, 101,
	0, 102, 103, 104, 0, 0, 105, 106, 0, 0,
	0, 0, 0, 0, 107, 108, 274, 109, 233, 110,
	234, 235, 0, 111, 0, 112, 0, 0, 0, 113,
	114, 0, 115, 0, 0, 0, 236, 116, 117, 237,
	238, 0, 0, 0, 118, 119, 239, 0, 120, 0,
	121, 0, 0, 0, 0, 122, 240, 0, 241, 0,
	123, 124, 125, 126, 242, 243, 0, 0, 130, 0,
	127, 0, 0, 128, 244, 129, 245, 246, 247, 0,
	248, 0, 0, 131, 0, 132, 133, 0, 135, 134,
	0, 249, 0, 136, 0, 0, 137, 0, 0, 138,
	0, 139, 140, 141, 143, 250, 142, 0, 144, 145,
	147, 146, 0, 0, 0, 251, 148, 252, 149, 150,
	0, 151, 0, 490, 152, 0, 0, 153, 253, 0,
	154, 0, 254, 155, 156, 157, 158, 0, 255, 159,
	256, 160, 0, 161, 162, 163, 257, 164, 165, 0,
	166, 167, 168, 169, 170, 172, 173, 171, 174, 175,
	176, 0, 177, 0, 178, 179, 258, 180, 0, 181,
	182, 183, 184, 70, 259, 185, 186, 0, 187, 188,
	0, 189, 260, 261, 190, 0, 196, 191, 192, 193,
	195, 262, 194, 263, 0, 197, 72, 198, 199, 200,
	201, 202, 0, 264, 265, 266, 0, 0, 203, 267,
	268, 0, 204, 205, 206, 207, 0, 0, 208, 209,
	210, 0, 211, 0, 212, 213, 214, 540, 270, 0,
	0, 215, 86, 0, 0, 68, 216, 217, 218, 219,
	0, 69, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 220, 0, 1170, 0,
	1175, 92, 93, 94, 221, 222, 223, 224, 95, 225,
	226, 0, 96, 227, 228, 97, 0, 0, 229, 230,
	231, 0, 232, 0, 0, 0, 98, 99, 100, 0,
	101, 0, 102, 103, 104, 0, 0, 105, 106, 0,
	0, 0, 0, 0, 0, 107, 108, 274, 109, 233,
	110, 234, 235, 0, 111, 0, 112, 0, 0, 0,
	113, 114, 0, 115, 0, 0, 0, 236, 116, 117,
	237, 238, 0, 0, 0, 118, 119, 239, 0, 120,
	0, 121, 0, 0, 0, 0, 122, 240, 0, 241,
	0, 123, 124, 125, 126, 242, 243, 0, 0, 130,
	0, 127, 0, 0, 128, 244, 129, 245, 246, 247,
	0, 248, 0, 0, 131, 0, 132, 133, 0, 135,
	134, 0, 249, 0, 136, 0, 0, 137, 0, 0,
	138, 0, 139, 140, 141, 143, 250, 142, 0, 144,
	145, 147, 146, 0, 0, 0, 251, 148, 252, 149,
	150, 0, 151, 0, 0, 152, 0, 0, 153, 253,
	0, 154, 0, 254, 155, 156, 157, 158, 0, 255,
	159, 256, 160, 0, 161, 162, 163, 257, 164, 165,
	0, 166, 167, 168, 169, 170, 172, 173, 171, 174,
	175, 176, 0, 177, 0, 178, 179, 258, 180, 0,
	181, 182, 183, 184, 70, 259, 185, 186, 0, 187,
	188, 0, 189, 260, 261, 190, 0, 196, 191, 192,
	193, 195, 262, 194, 263, 0, 197, 72, 198, 199,
	200, 201, 202, 0, 264, 265, 266, 0, 0, 203,
	267, 268, 0, 204, 205, 206, 207, 0, 0, 208,
	209, 210, 0, 211, 0, 212, 213, 214, 540, 270,
	0, 0, 215, 86, 0, 0, 68, 216, 217, 218,
	219, 0, 69, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 220, 0, 0,
	0, 67, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 490, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 0, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 86, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 220, 0,
	1170, 0, 1175, 92, 93, 94, 221, 222, 223, 224,
	95, 225, 226, 0, 96, 227, 228, 97, 0, 0,
	229, 230, 231, 0, 232, 0, 0, 0, 98, 99,
	100, 0, 101, 0, 102, 103, 104, 0, 0, 105,
	106, 0, 0, 0, 0, 0, 0, 107, 108, 274,
	109, 233, 110, 234, 235, 0, 111, 0, 112, 0,
	0, 0, 113, 114, 0, 115, 0, 0, 0, 236,
	116, 117, 237, 238, 0, 0, 0, 118, 119, 239,
	0, 120, 0, 121, 0, 0, 0, 0, 122, 240,
	0, 241, 0, 123, 124, 125, 126, 242, 243, 0,
	0, 130, 0, 127, 0, 0, 128, 244, 129, 245,
	246, 247, 0, 248, 0, 0, 131, 0, 132, 133,
	0, 135, 134, 0, 249, 0, 136, 0, 0, 137,
	0, 0, 138, 0, 139, 140, 141, 143, 250, 142,
	0, 144, 145, 147, 146, 0, 0, 0, 251, 148,
	252, 149, 150, 0, 151, 0, 0, 152, 0, 0,
	153, 253, 0, 154, 0, 254, 155, 156, 157, 158,
	0, 255, 159, 256, 160, 0, 161, 162, 163, 257,
	164, 165, 0, 166, 167, 168, 169, 170, 172, 173,
	171, 174, 175, 176, 0, 177, 0, 178, 179, 258,
	180, 0, 181, 182, 183, 184, 0, 259, 185, 186,
	0, 187, 188, 0, 189, 260, 261, 190, 0, 196,
	191, 192, 193, 195, 262, 194, 263, 0, 197, 0,
	198, 199, 200, 201, 202, 0, 264, 265, 266, 0,
	0, 203, 267, 268, 0, 204, 205, 206, 207, 86,
	0, 208, 209, 210, 0, 211, 0, 212, 213, 214,
	269, 270, 0, 0, 215, 89, 90, 0, 91, 216,
	217, 218, 219, 220, 0, 0, 0, 0, 92, 93,
	94, 221, 222, 223, 224, 95, 225, 226, 0, 96,
	227, 228, 97, 0, 758, 229, 230, 231, 0, 232,
	0, 0, 0, 98, 99, 100, 0, 101, 0, 102,
	103, 104, 0, 0, 105, 106, 0, 0, 0, 0,
	0, 0, 107, 108, 274, 109, 233, 110, 234, 235,
	0, 111, 0, 112, 0, 0, 0, 113, 114, 0,
	115, 0, 0, 0, 236, 116, 117, 237, 238, 0,
	0, 0, 118, 119, 239, 0, 120, 0, 121, 0,
	0, 0, 0, 122, 240, 0, 241, 0, 123, 124,
	125, 126, 242, 243, 0, 0, 130, 0, 127, 0,
	0, 128, 244, 129, 245, 246, 247, 0, 248, 0,
	0, 131, 0, 132, 133, 0, 135, 134, 0, 249,
	0, 136, 0, 0, 137, 0, 0, 138, 0, 139,
	140, 141, 143, 250, 142, 0, 144, 145, 147, 146,
	0, 0, 0, 251, 148, 252, 149, 150, 0, 151,
	0, 0, 152, 0, 0, 153, 253, 0, 154, 0,
	254, 155, 156, 157, 158, 0, 255, 159, 256, 160,
	0, 161, 162, 163, 257, 164, 165, 0, 166, 167,
	168, 169, 170, 172, 173, 171, 174, 175, 176, 0,
	177, 0, 178, 179, 258, 180, 0, 181, 182, 183,
	184, 0, 259, 185, 186, 0, 187, 188, 0, 189,
	260, 261, 190, 0, 196, 191, 192, 193, 195, 262,
	194, 263, 0, 197, 0, 198, 199, 200, 201, 202,
	0, 264, 265, 266, 0, 0, 203, 267, 268, 0,
	204, 205, 206, 207, 86, 0, 208, 209, 210, 0,
	211, 0, 212, 213, 214, 269, 270, 0, 0, 215,
	89, 90, 0, 91, 216, 217, 218, 219, 220, 0,
	0, 0, 0, 92, 93, 94, 221, 222, 223, 224,
	95, 225, 226, 0, 96, 227, 228, 97, 1081, 0,
	229, 230, 231, 0, 232, 0, 0, 0, 98, 99,
	100, 0, 101, 0, 102, 103, 104, 0, 0, 105,
	106, 0, 0, 0, 0, 0, 0, 107, 108, 274,
	109, 233, 110, 234, 235, 0, 111, 0, 112, 0,
	0, 0, 113, 114, 0, 115, 0, 0, 0, 236,
	116, 117, 237, 238, 0, 0, 0, 118, 119, 239,
	0, 120, 0, 121, 0, 0, 0, 0, 122, 240,
	0, 241, 0, 123, 124, 125, 126, 242, 243, 0,
	0, 130, 0, 127, 0, 0, 128, 244, 129, 245,
	246, 247, 0, 248, 0, 0, 131, 0, 132, 133,
	0, 135, 134, 0, 249, 0, 136, 0, 0, 137,
	0, 0, 138, 0, 139, 140, 141, 143, 250, 142,
	0, 144, 145, 147, 146, 0, 0, 0, 251, 148,
	252, 149, 150, 0, 151, 0, 0, 152, 0, 0,
	153, 253, 0, 154, 0, 254, 155, 156, 157, 158,
	0, 255, 159, 256, 160, 0, 161, 162, 163, 257,
	164, 165, 0, 166, 167, 168, 169, 170, 172, 173,
	171, 174, 175, 176, 0, 177, 0, 178, 179, 258,
	180, 0, 181, 182, 183, 184, 0, 259, 185, 186,
	0, 187, 188, 0, 189, 260, 261, 190, 0, 196,
	191, 192, 193, 195, 262, 194, 263, 0, 197, 0,
	198, 199, 200, 201, 202, 0, 264, 265, 266, 0,
	0, 203, 267, 268, 0, 204, 205, 206, 207, 86,
	0, 208, 209, 210, 0, 211, 0, 212, 213, 214,
	269, 270, 0, 0, 215, 89, 90, 0, 91, 216,
	217, 218, 219, 220, 0, 0, 0, 0, 92, 93,
	94, 221, 222, 223, 224, 95, 225, 226, 0, 96,
	227, 228, 97, 1680, 0, 229, 230, 231, 0, 232,
	0, 0, 0, 98, 99, 100, 0, 101, 0, 102,
	103, 104, 0, 0, 105, 106, 0, 0, 0, 0,
	0, 0, 107, 108, 274, 109, 233, 110, 234, 235,
	0, 111, 0, 112, 0, 0, 0, 113, 114, 0,
	115, 0, 0, 0, 236, 116, 117, 237, 238, 0,
	0, 0, 118, 119, 239, 0, 120, 0, 121, 0,
	0, 0, 0, 122, 240, 0, 241, 0, 123, 124,
	125, 126, 242, 243, 0, 0, 130, 0, 127, 0,
	0, 128, 244, 129, 245, 246, 247, 0, 248, 0,
	0, 131, 0, 132, 133, 0, 135, 134, 0, 249,
	0, 136, 0, 0, 137, 0, 0, 138, 0, 139,
	140, 141, 143, 250, 142, 0, 144, 145, 147, 146,
	0, 0, 0, 251, 148, 252, 149, 150, 0, 151,
	0, 0, 152, 0, 0, 153, 253, 0, 154, 0,
	254, 155, 156, 157, 158, 0, 255, 159, 256, 160,
	0, 161, 162, 163, 257, 164, 165, 0, 166, 167,
	168, 169, 170, 172, 173, 171, 174, 175, 176, 0,
	177, 0, 178, 179, 258, 180, 0, 181, 182, 183,
	184, 0, 259, 185, 186, 0, 187, 188, 0, 189,
	260, 261, 190, 0, 196, 191, 192, 193, 195, 262,
	194, 263, 0, 197, 0, 198, 199, 200, 201, 202,
	0, 264, 265, 266, 0, 0, 203, 267, 268, 0,
	204, 205, 206, 207, 0, 0, 208, 209, 210, 0,
	211, 0, 212, 213, 214, 269, 270, 0, 0, 215,
	0, 0, 0, 0, 216, 217, 218, 219, 661, 650,
	651, 648, 649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 723, 0,
	0, 0, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 692, 223, 693, 95, 694, 695, 0, 96, 227,
	228, 97, 0, 0, 696, 697, 231, 0, 232, 0,
	304, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 305, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 698, 110, 699, 700, 0,
	111, 0, 112, 0, 0, 0, 691, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 657, 0,
	0, 118, 119, 701, 0, 120, 0, 121, 0, 0,
	306, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 242, 243, 308, 0, 130, 0, 127, 0, 307,
	128, 702, 129, 703, 704, 705, 0, 668, 0, 309,
	131, 310, 132, 133, 0, 135, 134, 0, 249, 311,
	136, 312, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 313, 144, 145, 147, 146, 0,
	0, 658, 251, 148, 706, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 314, 154, 315, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 707, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	316, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 317, 189, 708,
	261, 190, 0, 196, 191, 192, 193, 195, 709, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 710, 711, 0, 0, 203, 267, 268, 656, 204,
	205, 206, 207, 536, 750, 208, 209, 210, 748, 211,
	0, 212, 213, 214, 269, 712, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 304, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 305, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 306, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 308, 0,
	130, 0, 127, 0, 307, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 309, 131, 310, 132, 133, 0,
	135, 134, 0, 249, 311, 136, 312, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 313,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 314, 154, 315, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 316, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 317, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 82, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 242, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 81, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 0, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 536,
	750, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	85, 0, 0, 220, 0, 0, 0, 0, 92, 93,
	94, 221, 222, 223, 224, 95, 225, 226, 0, 96,
	227, 228, 97, 0, 0, 229, 230, 231, 0, 232,
	0, 304, 0, 98, 99, 100, 0, 101, 0, 102,
	103, 104, 0, 305, 105, 106, 0, 0, 0, 0,
	0, 0, 107, 108, 274, 109, 233, 110, 234, 235,
	0, 111, 0, 112, 0, 0, 0, 113, 114, 0,
	115, 0, 0, 0, 236, 116, 117, 237, 238, 0,
	0, 0, 118, 119, 239, 0, 120, 0, 121, 0,
	0, 306, 0, 122, 240, 0, 241, 0, 123, 124,
	125, 126, 242, 243, 308, 0, 130, 0, 127, 0,
	307, 128, 244, 129, 245, 246, 247, 0, 248, 0,
	309, 131, 310, 132, 133, 0, 135, 134, 0, 249,
	311, 136, 312, 0, 137, 0, 0, 138, 0, 139,
	140, 141, 143, 250, 142, 313, 144, 145, 147, 146,
	0, 0, 0, 251, 148, 252, 149, 150, 0, 151,
	0, 0, 152, 0, 0, 153, 253, 314, 154, 315,
	254, 155, 156, 157, 158, 0, 255, 159, 256, 160,
	0, 161, 162, 163, 257, 164, 165, 0, 166, 167,
	168, 169, 170, 172, 173, 171, 174, 175, 176, 0,
	177, 316, 178, 179, 258, 180, 0, 181, 182, 183,
	184, 0, 259, 185, 186, 0, 187, 188, 317, 189,
	260, 261, 190, 0, 196, 191, 192, 193, 195, 262,
	194, 263, 0, 197, 0, 198, 199, 200, 201, 202,
	0, 264, 265, 266, 0, 0, 203, 267, 268, 0,
	204, 205, 206, 207, 86, 0, 208, 209, 210, 0,
	211, 0, 212, 213, 214, 269, 270, 0, 0, 215,
	89, 90, 0, 91, 216, 217, 218, 219, 220, 0,
	0, 0, 0, 92, 93, 94, 221, 222, 223, 224,
	95, 225, 226, 0, 96, 227, 228, 97, 0, 0,
	229, 230, 231, 0, 232, 0, 0, 0, 98, 99,
	100, 0, 101, 0, 102, 103, 104, 0, 0, 105,
	106, 0, 0, 0, 0, 0, 0, 107, 108, 274,
	109, 233, 110, 234, 235, 0, 111, 0, 112, 0,
	0, 0, 113, 114, 0, 115, 0, 0, 0, 236,
	116, 117, 237, 238, 0, 0, 0, 118, 119, 239,
	0, 120, 0, 121, 0, 0, 0, 0, 122, 240,
	0, 241, 0, 123, 124, 125, 126, 242, 243, 0,
	0, 130, 0, 127, 0, 0, 128, 244, 129, 245,
	246, 247, 0, 248, 0, 0, 131, 0, 132, 133,
	0, 135, 134, 0, 249, 0, 136, 0, 0, 137,
	0, 0, 138, 0, 139, 140, 141, 143, 250, 142,
	0, 144, 145, 147, 146, 0, 0, 0, 251, 148,
	252, 149, 150, 0, 151, 0, 0, 152, 0, 0,
	153, 253, 0, 154, 0, 254, 155, 156, 157, 158,
	0, 255, 159, 256, 160, 0, 161, 162, 163, 257,
	164, 165, 0, 166, 167, 168, 169, 170, 172, 173,
	171, 174, 175, 176, 0, 177, 0, 178, 179, 258,
	180, 0, 181, 182, 183, 184, 0, 259, 185, 186,
	0, 187, 188, 0, 189, 260, 261, 190, 0, 196,
	191, 192, 193, 195, 262, 194, 263, 0, 197, 0,
	198, 199, 200, 201, 202, 0, 264, 265, 266, 0,
	0, 203, 267, 268, 0, 204, 205, 206, 207, 0,
	0, 208, 209, 210, 0, 211, 0, 212, 213, 214,
	269, 270, 0, 536, 215, 0, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 85, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 304, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 305, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 306, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 308, 0,
	130, 0, 127, 0, 307, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 309, 131, 310, 132, 133, 0,
	135, 134, 0, 249, 311, 136, 312, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 313,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 314, 154, 315, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 316, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 317, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 1040, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 1038, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 1146,
	0, 118, 119, 239, 0, 120, 0, 121, 1043, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 242, 243, 0, 0, 130, 1144, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 1042,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 1145, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 1040, 232, 0, 0, 1035, 98, 99, 100,
	0, 101, 1038, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 1043, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 1034, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 1042, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 1041,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 1647, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 242, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 490, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 783, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	490, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 548, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 502, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	490, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 495, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 490, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 403, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 242, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 402, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 1339, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 1337, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 1326, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 901, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 242, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 417, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 768,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	0, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 601, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 596, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 554, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 242, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 428, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	427, 265, 266, 0, 0, 423, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 428, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 427, 265, 266, 0, 0,
	423, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 532, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 529, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 526, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 524, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 498, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 137, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 142, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 258, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 186, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	264, 265, 266, 0, 0, 203, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 157, 158, 0,
	255, 159, 256, 160, 0, 161, 162, 163, 257, 479,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 180,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 86, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 89, 90, 0, 91, 216, 217,
	218, 219, 220, 0, 0, 0, 0, 92, 93, 94,
	221, 222, 223, 224, 95, 225, 226, 0, 96, 227,
	228, 97, 0, 0, 229, 230, 231, 0, 232, 0,
	0, 0, 98, 99, 100, 0, 101, 0, 102, 103,
	104, 0, 0, 105, 106, 0, 0, 0, 0, 0,
	0, 107, 108, 274, 109, 233, 110, 234, 235, 0,
	111, 0, 112, 0, 0, 0, 113, 114, 0, 115,
	0, 0, 0, 236, 116, 117, 237, 238, 0, 0,
	0, 118, 119, 239, 0, 120, 0, 121, 0, 0,
	0, 0, 122, 240, 0, 241, 0, 123, 124, 125,
	126, 242, 243, 0, 0, 130, 0, 127, 0, 0,
	128, 244, 129, 245, 246, 247, 0, 248, 0, 0,
	131, 0, 132, 133, 0, 135, 134, 0, 249, 0,
	136, 0, 0, 420, 0, 0, 138, 0, 139, 140,
	141, 143, 250, 428, 0, 144, 145, 147, 146, 0,
	0, 0, 251, 148, 252, 149, 150, 0, 151, 0,
	0, 152, 0, 0, 153, 253, 0, 154, 0, 254,
	155, 156, 157, 158, 0, 255, 159, 256, 160, 0,
	161, 162, 163, 257, 164, 165, 0, 166, 167, 168,
	169, 170, 172, 173, 171, 174, 175, 176, 0, 177,
	0, 178, 179, 422, 180, 0, 181, 182, 183, 184,
	0, 259, 185, 421, 0, 187, 188, 0, 189, 260,
	261, 190, 0, 196, 191, 192, 193, 195, 262, 194,
	263, 0, 197, 0, 198, 199, 200, 201, 202, 0,
	427, 265, 266, 0, 0, 423, 267, 268, 0, 204,
	205, 206, 207, 86, 0, 208, 209, 210, 0, 211,
	0, 212, 213, 214, 269, 270, 0, 0, 215, 89,
	90, 0, 91, 216, 217, 218, 219, 220, 0, 0,
	0, 0, 92, 93, 94, 221, 222, 223, 224, 95,
	225, 226, 0, 96, 227, 228, 97, 0, 0, 229,
	230, 231, 0, 232, 0, 0, 0, 98, 99, 100,
	0, 101, 0, 102, 103, 104, 0, 0, 105, 106,
	0, 0, 0, 0, 0, 0, 107, 108, 274, 109,
	233, 110, 234, 235, 0, 111, 0, 112, 0, 0,
	0, 113, 114, 0, 115, 0, 0, 0, 236, 116,
	117, 237, 238, 0, 0, 0, 118, 119, 239, 0,
	120, 0, 121, 0, 0, 0, 0, 122, 240, 0,
	241, 0, 123, 124, 125, 126, 242, 243, 0, 0,
	130, 0, 127, 0, 0, 128, 244, 129, 245, 246,
	247, 0, 248, 0, 0, 131, 0, 132, 133, 0,
	135, 134, 0, 249, 0, 136, 0, 0, 137, 0,
	0, 138, 0, 139, 140, 141, 143, 250, 142, 0,
	144, 145, 147, 146, 0, 0, 0, 251, 148, 252,
	149, 150, 0, 151, 0, 0, 152, 0, 0, 153,
	253, 0, 154, 0, 254, 155, 156, 0, 158, 0,
	255, 159, 256, 160, 0, 161, 0, 163, 257, 164,
	165, 0, 166, 167, 168, 169, 170, 172, 173, 171,
	174, 175, 176, 0, 177, 0, 178, 179, 258, 0,
	0, 181, 182, 183, 184, 0, 259, 185, 186, 0,
	187, 188, 0, 189, 260, 261, 190, 0, 196, 191,
	192, 193, 195, 262, 194, 263, 0, 197, 0, 198,
	199, 200, 201, 202, 0, 264, 265, 266, 0, 0,
	203, 267, 268, 0, 204, 205, 206, 207, 0, 0,
	208, 209, 210, 0, 211, 0, 212, 213, 214, 269,
	270, 0, 0, 215, 0, 0, 0, 0, 216, 217,
	218, 219, 925, 926, 0, 945, 946, 947, 955, 956,
	957, 0, 0, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 928, 925, 926, 959, 945,
	946, 947, 955, 956, 957, 0, 0, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 0, 927, 0, 928,
	0, 0, 959, 942, 0, 0, 925, 926, 0, 945,
	946, 947, 955, 956, 957, 0, 0, 0, 0, 0,
	0, 927, 948, 0, 0, 0, 0, 942, 0, 928,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 927, 933, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 960, 0, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 952, 960, 0, 0, 950,
	0, 0, 0, 0, 0, 943, 933, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 952, 960, 0, 0, 943,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 949, 0, 0, 0, 0, 943,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 949, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 951, 0, 0, 939, 940,
	941, 0, 938, 935, 936, 937, 929, 930, 931, 932,
	934, 0, 954, 0, 0, 0, 2001, 0, 0, 951,
	0, 0, 939, 940, 941, 0, 938, 935, 936, 937,
	929, 930, 931, 932, 934, 0, 954, 0, 0, 0,
	1999, 0, 0, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 939, 940, 941, 0, 938, 935, 936, 937,
	929, 930, 931, 932, 934, 0, 954, 0, 925, 926,
	1946, 945, 946, 947, 955, 956, 957, 0, 0, 0,
	0, 0, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 928, 925, 926, 959, 945, 946, 947, 955, 956,
	957, 0, 0, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 927, 0, 928, 0, 0, 959, 942,
	0, 0, 925, 926, 0, 945, 946, 947, 955, 956,
	957, 0, 0, 0, 0, 0, 0, 927, 948, 0,
	0, 0, 0, 942, 0, 928, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 927, 933, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 960, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 952, 960, 0, 0, 950, 0, 0, 0, 0,
	0, 943, 933, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 952, 960, 0, 0, 943, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	949, 0, 0, 0, 0, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	949, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 951, 0, 0, 939, 940, 941, 0, 938, 935,
	936, 937, 929, 930, 931, 932, 934, 0, 954, 0,
	0, 0, 1941, 0, 0, 951, 0, 0, 939, 940,
	941, 0, 938, 935, 936, 937, 929, 930, 931, 932,
	934, 0, 954, 0, 0, 0, 1937, 0, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 939, 940,
	941, 0, 938, 935, 936, 937, 929, 930, 931, 932,
	934, 0, 954, 0, 925, 926, 1879, 945, 946, 947,
	955, 956, 957, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 928, 925, 926,
	959, 945, 946, 947, 955, 956, 957, 0, 0, 0,
	0, 0, 0, 0, 948, 0, 0, 0, 0, 927,
	0, 928, 0, 0, 959, 942, 0, 0, 925, 926,
	0, 945, 946, 947, 955, 956, 957, 0, 0, 0,
	0, 0, 0, 927, 948, 0, 0, 0, 0, 942,
	0, 928, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 933, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 960, 0, 0, 0, 933, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 952, 960, 0,
	0, 950, 0, 0, 0, 0, 0, 943, 933, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 0, 952, 960, 0,
	0, 943, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 949, 0, 0, 0,
	0, 943, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 949, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 951, 0, 0,
	939, 940, 941, 0, 938, 935, 936, 937, 929, 930,
	931, 932, 934, 0, 954, 0, 0, 0, 1857, 0,
	0, 951, 0, 0, 939, 940, 941, 0, 938, 935,
	936, 937, 929, 930, 931, 932, 934, 0, 954, 0,
	0, 0, 1856, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 939, 940, 941, 0, 938, 935,
	936, 937, 929, 930, 931, 932, 934, 0, 954, 0,
	925, 926, 1749, 945, 946, 947, 955, 956, 957, 0,
	0, 0, 0, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 928, 925, 926, 959, 945, 946, 947,
	955, 956, 957, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 927, 0, 928, 0, 0,
	959, 942, 0, 0, 925, 926, 0, 945, 946, 947,
	955, 956, 957, 0, 0, 0, 0, 0, 0, 927,
	948, 0, 0, 0, 0, 942, 0, 928, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 927,
	933, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 952,
	960, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 952, 960, 0, 0, 950, 0, 0,
	0, 0, 0, 943, 933, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 952, 960, 0, 0, 943, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 949, 0, 0, 0, 0, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 951, 0, 0, 939, 940, 941, 0,
	938, 935, 936, 937, 929, 930, 931, 932, 934, 0,
	954, 0, 0, 0, 1683, 0, 0, 951, 0, 0,
	939, 940, 941, 0, 938, 935, 936, 937, 929, 930,
	931, 932, 934, 0, 954, 0, 0, 0, 1667, 0,
	0, 0, 0, 0, 0, 0, 0, 951, 0, 0,
	939, 940, 941, 0, 938, 935, 936, 937, 929, 930,
	931, 932, 934, 0, 954, 0, 925, 926, 1247, 945,
	946, 947, 955, 956, 957, 0, 0, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 0, 0, 0, 928,
	925, 926, 959, 945, 946, 947, 955, 956, 957, 0,
	0, 0, 0, 0, 0, 0, 948, 0, 0, 0,
	0, 927, 0, 928, 0, 0, 959, 942, 0, 0,
	0, 0, 925, 926, 0, 945, 946, 947, 955, 956,
	957, 0, 0, 0, 0, 927, 0, 0, 948, 0,
	0, 942, 0, 0, 0, 928, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 927, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 960, 0, 0, 0,
	933, 2080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 952,
	960, 0, 0, 950, 0, 0, 0, 0, 0, 943,
	0, 0, 933, 0, 1526, 958, 0, 1525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 0, 0,
	0, 952, 960, 943, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 950,
	0, 0, 0, 0, 0, 943, 0, 0, 0, 0,
	0, 0, 2079, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 951,
	0, 0, 939, 940, 941, 0, 938, 935, 936, 937,
	929, 930, 931, 932, 934, 0, 954, 0, 1461, 0,
	0, 0, 0, 951, 0, 0, 939, 940, 941, 0,
	938, 935, 936, 937, 929, 930, 931, 932, 934, 0,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 951, 0, 0, 939, 940,
	941, 0, 938, 935, 936, 937, 929, 930, 931, 932,
	934, 0, 954, 925, 926, 0, 945, 946, 947, 955,
	956, 957, 0, 0, 0, 0, 0, 0, 0, 948,
	0, 963, 0, 0, 1162, 0, 928, 925, 926, 959,
	945, 946, 947, 955, 956, 957, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 962, 927, 0,
	928, 0, 0, 959, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 0, 0, 0, 0, 0, 942, 0,
	0, 0, 1163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1495, 0, 1512, 1513, 1514, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 960, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 1509, 0, 952, 960, 0, 0,
	950, 0, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	943, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 0, 925, 926, 1515, 945,
	946, 947, 955, 956, 957, 0, 953, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 1510, 0, 944, 928,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 927, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 939,
	940, 941, 0, 938, 935, 936, 937, 929, 930, 931,
	932, 934, 0, 954, 1511, 0, 0, 0, 0, 0,
	951, 0, 0, 939, 940, 941, 933, 938, 935, 936,
	937, 929, 930, 931, 932, 934, 0, 954, 0, 0,
	0, 0, 0, 0, 0, 952, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 925, 926, 0, 945, 946, 947, 955, 956,
	957, 0, 0, 950, 0, 0, 0, 0, 948, 943,
	0, 0, 0, 0, 0, 928, 0, 0, 959, 1506,
	1507, 1508, 0, 1505, 1502, 1503, 1504, 1496, 1497, 1498,
	1499, 1501, 0, 0, 949, 474, 0, 927, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 925, 926,
	0, 945, 946, 947, 955, 956, 957, 0, 0, 0,
	0, 0, 0, 0, 948, 0, 0, 0, 1527, 0,
	0, 928, 0, 0, 959, 0, 0, 944, 0, 0,
	925, 926, 0, 945, 946, 947, 955, 956, 957, 953,
	0, 0, 933, 927, 0, 0, 948, 0, 0, 942,
	0, 0, 0, 928, 0, 0, 959, 0, 0, 0,
	0, 952, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 927, 0, 958, 0, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 943, 0, 0, 933, 951,
	0, 0, 939, 940, 941, 0, 938, 935, 936, 937,
	929, 930, 931, 932, 934, 0, 954, 952, 960, 0,
	949, 0, 1494, 1495, 0, 1512, 1513, 1514, 0, 0,
	933, 0, 0, 958, 0, 1532, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 0, 0, 0, 952,
	960, 943, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 1509, 0, 953, 949, 950, 0, 0,
	0, 0, 0, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 951, 0, 0, 939, 940,
	941, 0, 938, 935, 936, 937, 929, 930, 931, 932,
	934, 944, 954, 0, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 953, 925, 926, 0, 945, 946, 947,
	955, 956, 957, 0, 0, 1510, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	959, 951, 0, 0, 939, 940, 941, 0, 938, 935,
	936, 937, 929, 930, 931, 932, 934, 0, 954, 927,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 939, 940, 941, 0,
	938, 935, 936, 937, 929, 930, 931, 932, 934, 0,
	954, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 925, 926, 0, 945, 946, 947, 955, 956,
	957, 0, 0, 0, 933, 0, 0, 0, 948, 0,
	0, 0, 1485, 0, 0, 928, 0, 0, 959, 0,
	0, 0, 0, 952, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 927, 0, 958,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 943, 1506, 1507,
	1508, 0, 1505, 1502, 1503, 1504, 1496, 1497, 1498, 1499,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 1492, 0, 0, 0, 925, 926,
	0, 945, 946, 947, 955, 956, 957, 0, 0, 0,
	0, 952, 960, 0, 948, 0, 0, 0, 0, 0,
	0, 928, 0, 0, 959, 944, 0, 958, 925, 926,
	0, 945, 946, 947, 955, 956, 957, 953, 0, 950,
	0, 0, 0, 927, 948, 943, 0, 0, 0, 942,
	0, 928, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	949, 0, 0, 927, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 951, 933, 0,
	939, 940, 941, 0, 938, 935, 936, 937, 929, 930,
	931, 932, 934, 944, 954, 0, 0, 952, 960, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 933, 0,
	0, 0, 0, 958, 0, 925, 926, 0, 945, 946,
	947, 955, 956, 957, 0, 950, 0, 952, 960, 0,
	0, 943, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 959, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 949, 0, 0, 0,
	927, 943, 0, 0, 0, 951, 942, 0, 939, 940,
	941, 0, 938, 935, 936, 937, 929, 930, 931, 932,
	934, 0, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 933, 0, 0, 0, 925,
	926, 0, 945, 946, 947, 955, 956, 957, 0, 944,
	0, 0, 0, 0, 952, 960, 0, 0, 0, 0,
	0, 953, 928, 0, 0, 959, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 927, 0, 0, 0, 943, 0,
	942, 951, 0, 0, 939, 940, 941, 0, 938, 935,
	936, 937, 929, 930, 931, 932, 934, 0, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 939, 940, 941, 0, 938, 935,
	936, 937, 929, 930, 931, 932, 934, 0, 954, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 952, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 943, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 801, 826,
	794, 817, 816, 0, 0, 796, 795, 0, 0, 0,
	828, 827, 0, 0, 0, 0, 0, 0, 951, 0,
	0, 939, 940, 941, 0, 938, 935, 936, 937, 929,
	930, 931, 932, 934, 0, 954, 0, 0, 0, 0,
	0, 822, 0, 814, 813, 0, 0, 0, 0, 0,
	944, 0, 812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 804, 803, 805,
	806, 807, 0, 825, 0, 0, 0, 809, 801, 826,
	794, 817, 816, 0, 0, 796, 795, 0, 0, 0,
	828, 827, 951, 0, 0, 939, 940, 941, 798, 938,
	935, 936, 937, 929, 930, 931, 932, 934, 0, 954,
	815, 0, 0, 0, 802, 0, 0, 0, 0, 0,
	0, 822, 0, 814, 813, 0, 0, 0, 0, 0,
	0, 0, 812, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 0, 1181, 1179, 1180, 1183, 1182, 0, 811,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 0, 0, 0, 808, 800, 804, 803, 805,
	806, 807, 0, 825, 830, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 823, 824, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 798, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	815, 829, 0, 0, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 0, 0, 0, 808, 800, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 823, 824, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829,
}
var sqlPact = [...]int{

	123, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	732, 15724, 15724, 19329, -1000, -1000, -1000, -1000, -1000, -1000,
	735, 731, 2373, 5038, 19329, 19329, 19054, 1632, 1632, 20704,
	-1000, -1000, 24004, -1000, 2930, 503, 504, 503, 503, 490,
	20704, 19329, 565, 693, 166, -1000, 824, -49, 23729, 19329,
	1398, 25, 17679, 333, 123, 18779, 23454, 19329, 18504, 546,
	22, 16290, 19329, -1000, 35, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1237, 321, 35, -1000, 1236, 1138, 1135, 17679, 23179,
	22904, 22629, 22354, -1000, 12012, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 770, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 338,
	336, -1000, 18229, -1000, 959, -1000, 24, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 957, -1000, 19329, -1000, -1000,
	22079, 21804, 335, 893, -1000, -1000, 588, 415, 1445, -1000,
	42, -1000, -1000, -1000, 1234, -1000, 953, 1233, 1231, 1230,
	1226, 1222, 1221, 414, 917, 496, -1000, 1220, 893, -1000,
	893, -1000, -1000, -1000, 543, 20704, -1000, -1000, 17679, -1000,
	21529, 19329, 19329, 1153, 21254, -1000, 824, -1000, -1000, -1000,
	1005, 1396, 1396, 1396, 1418, 170, 155, 166, 1, 19329,
	-1000, 334, 1, 9051, 9051, -1000, -1000, 333, -1000, 367,
	14875, -1000, 8124, -1000, 812, 1310, 436, 808, 1309, -122,
	771, 767, 1308, 15449, 16290, 22, 20, -1000, -1000, -1000,
	4739, 15449, 614, 14050, 35, -1000, -1000, -1000, 17679, 19329,
	19329, 654, 20979, -1000, 1307, 108, 1305, -1000, 97, 1304,
	-1000, 97, 1299, 12, -1000, -1000, -1000, -1000, -1000, -1000,
	333, 17954, 19329, 1519, 27770, -1000, 10258, -1000, -1000, 15724,
	1478, 15724, -1000, -1000, 1514, -1000, 10258, -1000, 19, 11,
	1076, 1047, 12601, 12313, 1349, 909, -1000, -1000, -1000, 37,
	5038, 19329, 1252, 15724, 19329, 19329, 19329, 19329, 19329, 19329,
	-1000, 1075, -1000, -1000, 19329, 19329, 708, -1000, 7, 2,
	-1000, 20704, -1000, 112, -1000, 332, 1028, 422, 146, 20429,
	422, 1025, -1000, 1005, -1000, 911, 1064, 9355, 10258, 166,
	-1000, -1000, 166, 166, 10258, -1000, -1000, 19329, 1, 1509,
	19329, 160, -1000, 26427, -1000, -1000, 10258, 10258, 10258, 10258,
	10258, 873, 355, -1000, 331, 330, 5966, -1000, -1000, 1611,
	-1000, -1000, -1000, 167, -1000, -1000, 10258, 35, -1000, -1000,
	-1000, -1000, 329, 1650, -1000, 427, -1000, -1000, -1000, 419,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1247,
	323, 322, -1000, -1000, -1000, -1000, 315, 312, 311, 297,
	295, 293, 289, 288, 284, 283, 281, 279, 278, 277,
	275, 835, -1000, 442, -1000, -1000, 442, 442, -1000, 263,
	263, 269, -1000, -1000, -1000, -1000, 263, -1000, -1000, -1000,
	408, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 272, 160,
	-1000, -1000, -1000, 19329, 6, -1000, 27278, -1000, -16, 840,
	-1000, 17129, 1483, 1371, 1364, 17679, 1437, -49, 1434, -49,
	540, 19329, 19329, 536, 532, 17679, 395, -1000, -1000, -1000,
	-1000, -1000, 19329, -1000, -1000, 5, -1000, -1000, 1219, -1,
	-1000, -1000, 426, 169, 1502, 169, 14325, -1000, 19329, 19329,
	-1000, 19329, -1000, -1000, 19329, -1000, 19329, 19329, -1000, 19329,
	172, 16579, 781, 1298, 598, -49, -3, -1000, 1521, -1000,
	-1000, -1000, -1000, 72, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 269, 835, 263, 263, 263, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 408, -1000, -1000, 442, 442, 442, -1000,
	-1000, -15, 27278, 531, -1000, 1216, 491, -21, 825, 1131,
	928, -1000, -1000, -1000, -1000, -5, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1572, -1000, -1000, 1610,
	-5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1645, 5038, -1000, -1000, -1000, 19329, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19329, 19329, 825, 1131,
	-1000, -1000, 17679, 16854, 1499, 1297, 842, -1000, 1494, 19329,
	937, 1024, -1000, 560, 1296, -1000, -1000, -1000, -1000, 27278,
	-1000, 27278, 689, 1141, -1000, 1141, -10, -1000, 26403, -1000,
	262, -22, 426, 9051, 13759, 27660, 27770, 19329, 553, 10258,
	10258, 10258, 10258, 10258, 10258, 10258, 10258, 10258, 10258, 10258,
	10258, 10258, 10258, 10258, 10258, 10258, 10258, 10258, 10258, 10258,
	10258, 1146, 10258, 529, 10258, 10258, 10258, 10258, 1194, 838,
	252, 898, 5038, -1000, -1000, 662, 662, 662, 27415, 27415,
	251, 355, -1000, 10258, -1000, 8726, 155, 25724, -11, -1000,
	-1000, -1000, 6869, 440, 27278, 35, 5641, -1000, 1608, 744,
	1261, 1187, 260, 151, 150, 10258, 10258, 10559, 10559, 10258,
	10860, 10258, 10258, 6267, 10258, 10258, 10258, 10258, 10258, 10258,
	-1000, 258, -1000, -1000, -1000, -1000, 1606, -1000, -1000, 1603,
	-1000, 552, 551, 1587, 426, 148, 8124, -1000, 781, 19329,
	19329, 19329, -1000, -1000, 1019, 20154, 1016, 27770, 19329, -1000,
	257, 255, 1110, 1105, 19329, 19329, 19879, 19604, 19329, 774,
	-49, -1000, -49, -1000, 19329, 762, -1000, 19329, 19329, 753,
	1176, 930, -1000, 423, 15449, 613, 1206, 19329, 736, 10258,
	848, -1000, 13468, 448, 19329, 736, 136, -1000, -1000, -1000,
	385, 19329, -1000, -1000, -1000, 108, -1000, 97, 97, -1000,
	-1000, 17679, -1000, -1000, -1000, -1000, -1000, -1000, 27770, 354,
	353, -1000, 1585, 527, -1000, 525, 524, 522, -1000, 253,
	-1000, 10258, 19329, 19329, 1131, -1000, -1000, -1000, -1000, 697,
	-1000, 780, -1000, 12889, -1000, -1000, -1000, -1000, -23, -1000,
	-1000, -1000, -1000, -1000, -1000, 142, -30, -12, 27770, -1000,
	-1000, -1000, -1000, -1000, 19329, 328, 19329, -49, 19329, -1000,
	1640, -49, 19329, 1295, 1316, 382, 19329, -1000, -1000, -1000,
	10258, -1000, -1000, -1000, -49, -1000, 1186, -1000, -83, 1173,
	1378, -143, 145, 403, -1000, 13177, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 412, 467, 467, 472,
	472, 472, 472, 2239, 2239, 1009, 431, 3824, 3824, 3824,
	2224, 215, 215, 3824, 3824, 3824, 27415, 27308, 203, 10258,
	10258, 521, 817, 252, 203, 10258, 1552, 203, 203, 203,
	-1000, 997, -1000, -1000, -1000, -1000, 1204, 250, 10860, 10860,
	-1000, -1000, -1000, 5966, 11462, -1000, -1000, -1000, -1000, -1000,
	249, 10258, -1000, 26036, -188, -34, -1000, -1000, 10258, -26,
	-60, -1000, -1000, 633, -1000, 10258, -1000, -28, 10258, 10258,
	10258, 141, 134, -1000, 889, 247, 246, 10258, -1000, -1000,
	27172, 3770, 133, 1203, -157, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 116, 114, 27084, -157, 113, 3004, -1000, 10860,
	10860, 10860, 5966, 238, 109, 26092, -157, 26818, 8425, 8425,
	8425, 106, 26850, 10258, -157, 3682, 3418, 3356, -35, -36,
	-40, 1583, -41, 105, 411, 407, 102, 1186, -1000, -1000,
	-1000, -1000, 517, 512, 1289, -1000, 1011, -1000, 452, -1000,
	854, 10258, 11737, 237, 235, 819, -1000, 1288, 964, 1287,
	964, -1000, -16, 703, -1000, -1000, -1000, 511, -1000, -1000,
	510, 423, 1201, 574, -1000, 918, -1000, -1000, 596, -1000,
	-1000, 6568, 27278, -1000, 736, 1367, -46, -1000, -1000, -1000,
	426, 14325, 13759, 8124, -47, -1000, -1000, -1000, 781, -1000,
	555, 1582, 99, 1053, 933, 746, 680, 1580, 27278, -23,
	-23, -1000, -1000, -1000, -1000, -1000, 19329, 1155, -1000, 16854,
	233, 19329, 232, -1000, 231, -1000, -1000, 228, 19329, 1087,
	382, 16015, -1000, 422, -1000, 98, 1183, 1414, -1000, 13759,
	1120, 1118, 13759, 900, 892, 892, 892, -1000, 222, 1508,
	403, 4127, 10258, 17404, 899, 68, 96, 1173, 10258, 203,
	203, 10258, 10860, 10860, -1000, 203, -1000, -1000, -1000, -1000,
	-1000, 1200, 221, 10258, 27770, 26493, 3794, -48, -1000, 7799,
	-66, -1000, 10258, -1000, 25694, -1000, -1000, 349, 1314, -1000,
	10258, 26762, 95, 7498, -1000, 26626, -29, -29, -1000, 1633,
	-1000, 14600, 429, 903, 25670, 27660, 27770, -1000, 10258, -1000,
	-1000, 1198, 10258, -1000, 27660, 27770, 10860, 10860, 10860, 10860,
	10860, 10860, 10860, 10860, 10860, 10860, 10860, 10860, 10860, 10860,
	10860, 10860, 10860, 10860, 10860, 1099, 10860, 1548, 1548, 1548,
	-75, 7173, -1000, 1197, 1198, 10258, 10258, 27770, 93, 92,
	91, -1000, 10258, -157, 10258, 10258, 10258, -1000, -1000, -1000,
	88, -1000, 1579, -1000, -1000, -1000, -1000, 1183, 19329, 19329,
	19329, 1285, -1000, 2774, -1000, 25358, -55, -1000, 316, 1393,
	10258, -1000, -1000, 219, 11737, 19329, -1000, 1098, 1112, 482,
	19329, -1000, 19329, -1000, 19329, 19329, 19329, 19329, 19329, -1000,
	15449, 550, 217, -1000, -92, -1000, -1000, 211, -49, 736,
	-1000, -93, -1000, 384, -1000, 347, 345, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 87, -1000, -1000, 1158, -1000,
	11737, 205, 19329, 16854, 1466, 11737, 936, 1093, 382, 16015,
	-1000, 560, -1000, 413, 10258, 10258, 1173, 13759, 13759, 980,
	1115, 13759, -1000, -1000, -1000, -1000, 343, 356, 342, 12012,
	17404, -1000, 1576, 1044, -56, -1000, -1000, 19329, 187, -1000,
	403, 542, 203, 3457, 137, 10258, 27770, 27519, -61, 10258,
	10258, -1000, -67, -1000, 10258, 341, 27278, -1000, -1000, -1000,
	27278, 10258, 1614, 10258, 86, 85, 83, -1000, -1000, -1000,
	24279, 10258, 82, -1000, 77, 76, 27278, 1197, 27278, -1000,
	-1000, 526, 526, 1548, 1548, 1548, 1548, 308, 308, 2657,
	2611, 2580, 2580, 2580, 2484, 538, 538, 2580, 2580, 2580,
	1196, 1026, 186, 26942, 10258, -68, -1000, -1000, -1000, 27278,
	27278, 75, -1000, -1000, -1000, -157, 3092, 25328, 25304, -1000,
	73, 413, -1000, -1000, -1000, 19329, -1000, 19329, -1000, 19329,
	19329, 1190, 985, -1000, -1000, 1095, 185, 10860, 19329, -1000,
	779, 11737, 1383, 35, 19329, 1383, 24992, 5641, -74, -82,
	982, -1000, 976, 10258, -1000, 27770, 964, 964, -1000, 509,
	507, -1000, -1000, -94, 15174, 1631, 1322, 19329, 1362, -1000,
	-1000, 184, -1000, -1000, -1000, 850, -95, 11737, -96, 69,
	-49, -97, 19329, -1000, 382, 16015, -1000, 1316, -1000, 19329,
	27278, -157, -1000, 980, -1000, 183, 10258, 13759, -1000, -143,
	-1000, -106, -1000, 403, -107, -1000, 317, -174, -1000, 379,
	-1000, 403, 180, 19329, 17404, 10258, 10258, 27519, -112, -1000,
	203, 203, -1000, 24962, -1000, 27278, -1000, 26626, -1000, -1000,
	-1000, 868, -1000, 24938, -1000, -1000, -1000, -1000, 10860, 1195,
	179, 27770, 24626, -1000, -1000, 10258, -1000, -1000, -1000, -1000,
	-1000, 968, -1000, -1000, 19329, 1010, -1000, -1000, 10258, 26942,
	178, 1155, 176, -1000, -1000, -1000, -1000, -1000, -1000, 1393,
	-28, -1000, 752, -1000, -1000, 27278, 1375, -1000, -1000, 19329,
	19329, -1000, 175, 35, -119, -1000, 378, 577, -123, 19329,
	-1000, -1000, 5337, 19329, 779, -124, -1000, 1155, -1000, 779,
	174, 16015, -1000, 1087, -149, -1000, 1447, -1000, 19329, 27278,
	-1000, 403, -1000, 1562, 17404, 172, -1000, 1044, -1000, 4437,
	17404, 19329, -125, -1000, 203, 203, -1000, -1000, 64, 903,
	1407, -1000, 3630, 10860, 27770, -131, -1000, 24596, -1000, -1000,
	1273, 24572, 1056, 19329, -1000, 19329, 1383, 59, 19329, 468,
	19329, -1000, -1000, 10258, 1631, -1000, -1000, 1625, 651, -1000,
	426, -1000, 173, 1155, 779, -1000, 1155, 11737, -1000, 1093,
	19329, 168, -133, 17404, -1000, -1000, 216, -1000, -1000, 1553,
	-1000, -138, -1000, -1000, 754, 10258, 3630, -150, -1000, -1000,
	1265, -1000, 921, 907, 56, -152, -1000, -1000, 146, -1000,
	10258, -1000, -29, -1000, -1000, 14325, -1000, 19329, -1000, 1155,
	-1000, -156, -1000, -1000, -1000, -1000, -1000, 403, 204, -1000,
	52, 9957, 9957, -157, -1000, 19329, -1000, 925, 923, 677,
	-1000, -1000, -1000, -1000, -1000, 1056, 27278, 51, -147, -158,
	-1000, 779, 17404, -1000, -1000, -1000, -1000, 11161, 926, 698,
	26060, -1000, -1000, -1000, 1327, -1000, 474, 1073, 1073, 921,
	1614, -1000, 931, 1155, -1000, 1530, -1000, -1000, -1000, -1000,
	-1000, -1000, 1537, -1000, -1000, 1092, -1000, -1000, -1000, -1000,
	-1000, -1000, 9656, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1917, 1916, 1459, 1646, 1913, 1910, 1643, 1909, 1908,
	1905, 1902, 1901, 1900, 92, 1603, 1577, 22, 1573, 1898,
	86, 1897, 1896, 1894, 89, 1893, 1891, 1890, 1888, 1701,
	1882, 1878, 1567, 1554, 1552, 1877, 1872, 87, 1871, 21,
	1867, 71, 1866, 29, 127, 2120, 118, 1864, 1863, 1862,
	26, 96, 67, 1855, 139, 1853, 1850, 49, 36, 27,
	20, 1848, 122, 126, 308, 34, 1844, 1842, 123, 1841,
	17, 24, 1079, 138, 129, 134, 106, 1840, 1836, 1832,
	1830, 53, 1829, 3, 1828, 1823, 11, 57, 14, 1822,
	23, 19, 1818, 1817, 110, 1814, 74, 94, 1441, 121,
	111, 131, 1813, 83, 12, 65, 1810, 1808, 115, 50,
	1802, 37, 75, 120, 1801, 61, 140, 68, 33, 63,
	98, 1800, 1795, 1793, 78, 1791, 103, 133, 1789, 1787,
	73, 1786, 112, 117, 1785, 1784, 113, 1783, 1777, 1774,
	145, 1773, 1772, 142, 1770, 10, 45, 66, 31, 1440,
	1431, 101, 58, 35, 15, 1766, 1476, 868, 1014, 41,
	77, 51, 48, 80, 54, 60, 136, 28, 1765, 1762,
	105, 1761, 1756, 1755, 1754, 1753, 76, 1747, 1746, 64,
	135, 13, 8, 25, 85, 42, 62, 79, 100, 130,
	104, 1745, 81, 108, 55, 243, 1741, 1740, 1264, 107,
	1737, 1735, 1734, 1218, 1214, 1198, 681, 1733, 1732, 1148,
	1090, 1727, 1726, 56, 1724, 141, 1723, 1722, 125, 119,
	32, 1716, 52, 69, 91, 1713, 95, 43, 0, 2216,
	1707, 1712, 109, 70, 1711, 1709, 1706, 1704, 30, 2,
	9, 5, 6, 4, 72, 47, 1703, 1700, 116, 39,
	59, 1698, 137, 1697, 1696, 1687, 46, 1686, 18, 1684,
	16, 1679, 1677, 7, 1, 1675, 1673, 132, 1670, 99,
	1668, 1548, 1666, 128, 1662, 1659, 1547, 38, 84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 4, 52, 52, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	49, 49, 54, 54, 54, 56, 56, 53, 53, 48,
	48, 5, 5, 226, 226, 227, 227, 38, 38, 42,
	42, 39, 40, 40, 41, 41, 6, 6, 6, 7,
	7, 7, 7, 7, 7, 14, 15, 15, 15, 15,
	15, 15, 15, 15, 100, 100, 99, 99, 102, 102,
	16, 16, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 194, 194, 193, 19, 168, 168,
	20, 20, 20, 20, 21, 125, 125, 22, 22, 22,
	22, 23, 28, 267, 267, 267, 271, 271, 272, 272,
	273, 273, 273, 273, 273, 273, 273, 269, 269, 27,
	31, 31, 31, 31, 31, 144, 140, 140, 142, 142,
	142, 142, 63, 139, 139, 139, 139, 141, 141, 141,
	141, 219, 218, 218, 224, 224, 224, 78, 78, 78,
	78, 78, 79, 79, 79, 217, 217, 217, 217, 225,
	225, 225, 225, 225, 225, 80, 80, 80, 223, 223,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 18, 268, 268, 270, 270, 33, 33, 34,
	34, 10, 10, 11, 11, 81, 81, 82, 82, 147,
	147, 147, 147, 83, 83, 55, 55, 55, 146, 236,
	236, 237, 237, 237, 237, 237, 237, 238, 238, 238,
	238, 238, 238, 238, 234, 234, 235, 232, 232, 233,
	233, 233, 233, 274, 274, 145, 145, 86, 86, 241,
	241, 241, 241, 239, 239, 239, 239, 239, 242, 240,
	243, 243, 243, 243, 243, 180, 180, 180, 36, 12,
	61, 61, 13, 9, 9, 129, 129, 90, 90, 185,
	185, 185, 71, 71, 50, 50, 50, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 130, 130,
	131, 131, 25, 30, 35, 35, 35, 35, 35, 276,
	276, 67, 67, 67, 67, 68, 68, 143, 143, 143,
	143, 143, 62, 8, 8, 57, 57, 58, 58, 59,
	59, 60, 60, 277, 277, 24, 24, 24, 74, 74,
	136, 136, 136, 138, 138, 137, 137, 137, 115, 115,
	115, 37, 95, 95, 104, 104, 105, 105, 191, 106,
	106, 29, 29, 45, 45, 43, 43, 43, 43, 43,
	43, 44, 44, 46, 46, 46, 46, 46, 46, 46,
	249, 249, 249, 252, 252, 248, 250, 250, 251, 251,
	275, 275, 116, 116, 116, 85, 84, 84, 88, 88,
	87, 89, 89, 184, 113, 113, 113, 113, 132, 133,
	133, 134, 134, 135, 135, 112, 112, 164, 164, 47,
	47, 94, 94, 96, 96, 154, 154, 154, 155, 155,
	153, 153, 153, 153, 186, 186, 186, 186, 186, 186,
	186, 186, 265, 265, 265, 266, 266, 183, 183, 187,
	187, 187, 187, 187, 187, 181, 181, 181, 181, 182,
	182, 192, 192, 119, 119, 119, 119, 117, 117, 118,
	118, 188, 188, 188, 188, 114, 114, 189, 189, 189,
	148, 148, 195, 195, 195, 213, 213, 93, 93, 93,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 197, 197, 197, 197,
	199, 199, 199, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 212, 212, 212,
	212, 212, 200, 200, 207, 207, 208, 208, 209, 210,
	201, 201, 202, 202, 203, 204, 211, 211, 211, 211,
	215, 215, 205, 205, 205, 205, 205, 206, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 127, 127, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 158, 158, 158, 158,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 244, 244, 244, 244, 244, 244, 244, 246, 246,
	247, 247, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 253,
	253, 254, 254, 256, 256, 257, 257, 258, 259, 259,
	259, 260, 261, 261, 255, 255, 262, 262, 262, 263,
	263, 264, 264, 264, 264, 264, 170, 170, 170, 171,
	171, 172, 178, 178, 178, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 69, 69, 69, 69, 69, 101, 101, 167, 167,
	165, 165, 165, 169, 169, 120, 120, 214, 214, 214,
	214, 214, 214, 214, 121, 121, 121, 128, 122, 122,
	123, 123, 123, 123, 123, 123, 161, 162, 124, 124,
	124, 163, 163, 173, 177, 177, 176, 175, 175, 174,
	174, 151, 151, 152, 152, 150, 149, 109, 109, 108,
	108, 107, 107, 278, 278, 179, 179, 110, 110, 111,
	103, 103, 190, 190, 190, 190, 97, 97, 76, 76,
	98, 98, 72, 72, 75, 75, 73, 73, 73, 73,
	91, 91, 92, 92, 70, 70, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 216, 216, 216,
	166, 64, 64, 64, 65, 65, 66, 66, 221, 221,
	221, 222, 222, 222, 222, 220, 220, 220, 220, 220,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 4, 6, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 6, 1, 1, 1, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 4, 6, 7, 1,
	1, 1, 1, 1, 1, 6, 3, 5, 4, 6,
	4, 6, 4, 6, 1, 3, 1, 2, 2, 3,
	2, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	1, 1, 1, 1, 3, 3, 0, 2, 3, 2,
	3, 6, 6, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	5, 5, 2, 2, 0, 2, 0, 6, 6, 5,
	5, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 3, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 7, 4, 6, 3, 1, 5,
	6, 9, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -25, -27, -36, -37,
	23, 34, 222, 65, -8, -9, -10, -11, -12, -13,
	-251, 93, 101, 123, 204, 100, 86, 117, 225, 233,
	-43, -45, 241, -144, 242, 35, 251, 59, 96, 227,
	220, 221, 275, 67, -249, -46, -44, 323, 298, 304,
	236, -47, 259, 290, 326, 259, 132, 79, 293, -267,
	-98, 259, 79, -73, -64, 316, 4, -228, -230, 20,
	21, 23, 33, 34, 35, 40, 44, 47, 58, 59,
	60, 62, 64, 65, 66, 69, 70, 77, 78, 80,
	82, 86, 88, 92, 93, 95, 100, 101, 107, 108,
	111, 113, 118, 123, 124, 125, 126, 133, 136, 138,
	131, 146, 148, 149, 152, 151, 156, 159, 162, 164,
	165, 166, 169, 167, 171, 172, 174, 173, 179, 181,
	182, 184, 187, 190, 193, 196, 197, 198, 199, 202,
	204, 206, 207, 208, 210, 211, 213, 214, 215, 216,
	217, 220, 218, 219, 221, 222, 223, 225, 227, 228,
	230, 232, 233, 234, 235, 238, 239, 241, 242, 244,
	247, 250, 251, 252, 255, 253, 249, 258, 260, 261,
	262, 263, 264, 271, 275, 276, 277, 278, 281, 282,
	283, 285, 287, 288, 289, 294, 299, 300, 301, 302,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 50,
	51, 52, 54, 81, 83, 84, 99, 102, 103, 109,
	119, 121, 127, 128, 137, 139, 140, 141, 143, 154,
	168, 178, 180, 191, 195, 201, 203, 209, 229, 237,
	245, 246, 254, 256, 266, 267, 268, 272, 273, 290,
	291, -267, -72, -64, 79, 88, 136, 283, 282, 79,
	132, 259, 293, -17, 323, -29, -7, -15, -4, -24,
	-37, -14, -32, -18, -33, -34, -16, 23, -220, 4,
	-228, -230, -229, -231, 56, 68, 116, 135, 129, 145,
	147, 155, 157, 170, 192, 194, 226, 243, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 43, 48, 49,
	53, 55, 57, 63, 67, 71, 72, 73, 74, 75,
	76, 85, 87, 89, 90, 91, 94, 96, 98, 104,
	105, 106, 112, 114, 115, 117, 120, 122, 130, 132,
	134, 142, 144, 150, 153, 158, 160, 161, 175, 176,
	177, 183, 185, 186, 188, 189, 200, 205, 212, 224,
	236, 240, 248, 257, 259, 265, 269, 270, 274, 279,
	280, 284, 286, 292, 293, 295, 296, 297, 298, -64,
	-64, -64, 204, 22, -271, 22, -272, -273, 67, 93,
	117, 236, 136, 88, 282, -271, -68, 233, -64, -140,
	159, 239, 229, 271, -141, -139, -219, 266, 169, -99,
	-64, 4, 22, 79, 58, 80, 118, 132, 133, 63,
	64, 149, 260, 266, 271, 67, 285, 262, -276, 271,
	271, -276, -276, -67, 271, 269, -68, -219, -275, 259,
	259, 284, 293, -129, 79, 280, -44, -46, -45, -87,
	-88, 279, 142, 98, 189, -43, -45, -249, -252, 210,
	-248, -64, -252, -84, -85, 22, 90, 327, -188, -72,
	186, -111, 323, -3, -188, 127, -72, -75, 127, -72,
	-64, -188, 127, 269, 327, -98, -91, -64, -150, -149,
	325, 115, 115, 323, -108, -109, -149, -150, 115, 144,
	144, -189, -188, -64, 127, -76, 127, -75, -100, 127,
	-99, -100, 127, -194, -193, -222, 4, -228, -230, -229,
	290, 259, 132, -168, 323, -125, 323, -64, 22, 185,
	327, 185, -64, -140, 52, -140, 323, -142, -62, -63,
	146, 206, 269, 308, 115, 302, -80, 5, 85, -102,
	325, 115, -268, 185, 115, 115, 115, 115, 115, 115,
	302, 146, 206, 232, 259, 293, 115, -143, -62, -63,
	-143, 269, -68, -114, -188, -99, 127, -64, -99, 132,
	-64, 127, -87, -88, -113, -132, -133, 158, 183, -116,
	22, 90, -116, -116, 44, 324, 324, 327, -252, -92,
	323, -103, -190, -156, 316, -158, 314, 315, 320, 175,
	303, -170, -160, -173, 99, 229, 323, -72, -159, 328,
	9, -246, -45, 29, -171, -172, 48, -64, 7, 8,
	5, 6, -70, -197, -166, -206, 274, 104, 177, -244,
	-245, 4, -228, -221, -198, -208, -202, -205, 143, 56,
	72, 75, 73, 76, 240, 284, 49, 28, 102, 103,
	195, 201, 256, 272, 273, 127, 178, 128, 54, 119,
	154, 92, 37, 39, 41, 42, 50, 51, 81, 83,
	84, 109, 137, 139, 140, 141, 180, 209, 245, 254,
	267, 268, 291, -229, -209, -210, -203, -204, -211, -103,
	-111, 316, -72, 323, -110, -179, -156, 85, -52, 218,
	-51, 21, 23, 93, 288, 99, 249, 263, 249, 263,
	218, 99, 328, 218, 218, 99, -226, -223, 9, -222,
	5, -73, 327, -220, 316, -227, -226, 252, 324, -97,
	-72, -109, -189, -74, -72, -74, 241, -64, 30, 99,
	-54, 327, 47, 223, 99, -54, 327, 99, -54, 99,
	324, 327, -188, 127, -75, 30, -167, -195, -196, -198,
	-207, -201, -205, -206, 40, 46, 45, 264, 168, 237,
	246, 38, 184, 138, 137, 139, 140, 141, 245, 37,
	209, 109, 92, 84, 83, 180, 42, 41, -209, -210,
	-203, -204, 81, 267, 268, 143, 39, 51, 50, 291,
	254, -101, -156, -267, -273, -267, 30, -101, 327, 327,
	156, -79, 162, 174, 124, -218, 85, -224, -217, -180,
	9, 274, 104, 185, -223, 8, 315, -216, 7, 314,
	-218, 85, 70, -225, 5, 4, -166, -180, 85, 159,
	-206, 325, -220, -219, -270, 112, -267, -219, -219, -219,
	-219, -219, -64, 156, -219, -219, 259, 132, 327, 327,
	-68, -54, 327, 323, -86, 175, -250, 298, -86, 323,
	-65, 127, -64, -250, 175, -113, -133, -132, -134, -156,
	22, -156, -158, -44, -44, -44, -89, -184, -156, -248,
	30, -91, -94, 327, 115, 10, 11, 55, 33, 314,
	315, 316, 317, 110, 318, 311, 312, 313, 310, 306,
	307, 308, 61, 163, 231, 13, 14, 15, 26, 188,
	157, 303, 129, 243, 320, 16, 17, 18, 145, 36,
	130, -69, 30, 4, -77, -156, -156, -156, -156, -156,
	194, -107, -151, 321, -45, 323, -45, -156, -101, 7,
	-45, -165, 321, -174, -156, -108, 323, 5, 323, 5,
	-253, 299, 112, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	203, -215, 294, -215, -215, -199, 323, -199, -200, 323,
	-199, 300, 304, 323, -94, -72, 327, 324, 327, 269,
	-130, 63, 57, -146, 127, 57, -232, -64, 63, -233,
	53, 280, 205, 114, -130, 63, -130, 63, 63, -188,
	33, -29, 33, -29, 269, -75, -64, 269, 269, -188,
	-192, 305, -64, -192, 327, 115, 324, 327, -148, 296,
	-136, -29, 323, 85, 30, -136, -104, -105, -191, -106,
	-72, 323, -64, -64, -75, -76, -99, -100, -100, -17,
	-193, 99, -20, -29, -24, -37, -14, 324, 327, -93,
	29, -126, 323, 301, 166, 82, 125, 165, -127, 235,
	324, 327, 269, 115, 271, 324, -63, -62, -78, 208,
	247, 219, 238, 327, 8, 7, 7, -220, -269, -64,
	-72, -75, -63, -62, -188, -81, -91, -82, -64, -147,
	-146, -234, -235, -232, 132, 280, 105, 30, 99, -61,
	199, 30, 185, 175, -57, 261, 99, -135, 229, 230,
	327, -50, 31, 89, 323, 324, -148, -190, -96, -186,
	321, -188, -72, -45, -187, 323, -213, -195, -212, 214,
	215, 213, 217, 216, -195, -99, 266, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, 157,
	129, 243, 36, 130, -156, 269, -156, -156, -156, -156,
	167, 175, 177, 274, 104, 281, 90, 181, -278, 257,
	32, -163, -45, 323, -178, 27, 248, 22, -220, -170,
	229, 323, -151, -156, -152, -101, 324, 324, 327, -101,
	-169, 322, -165, -177, -176, 295, 324, -101, 292, 22,
	90, 316, 7, -126, -254, 107, 120, 323, 324, 324,
	-156, -156, -120, -214, -101, 4, 301, 166, 82, 125,
	165, 235, -120, -121, -156, -101, -122, -157, -158, 314,
	315, 320, 323, 229, -123, -156, -101, -156, 43, 153,
	270, -124, -156, 115, -101, -156, -156, -156, -101, -101,
	-101, 323, 7, 7, 266, 266, 7, -148, 324, -179,
	-51, -72, -64, -64, 175, -146, 127, -56, 175, -195,
	-64, 323, 323, 148, 148, -64, -64, 127, -64, 127,
	-64, -64, -52, 218, -29, -29, -64, 218, -64, -72,
	218, -38, 126, 181, -41, 298, -226, 252, 115, -72,
	-115, 224, -156, -115, -138, 185, -97, 290, -64, -115,
	-95, 327, 115, 308, -97, -54, -54, -54, -188, -195,
	321, 321, 7, 269, 269, 269, 269, 323, -156, -269,
	-269, -62, 278, 60, 208, -224, 327, 324, 324, 327,
	-65, 132, -65, -29, -99, 5, -29, -72, 99, -58,
	95, -277, 308, -64, -184, -20, -112, 120, -192, 327,
	68, -119, 147, 170, 116, 155, 226, 135, 7, 101,
	-153, 328, 323, -183, 304, -45, -187, -186, 302, -156,
	-156, 269, -278, 257, -163, -156, 167, 177, 274, 104,
	281, 90, 181, 115, 323, -157, -157, -101, -160, 323,
	-101, 322, 331, 324, -156, 322, 322, 327, -175, -176,
	94, -156, -88, 327, -87, -156, -101, -101, 324, 324,
	-259, 193, 323, 323, -156, 30, 327, 324, 115, 324,
	324, -128, 200, 324, 10, 11, 314, 315, 316, 317,
	110, 318, 311, 312, 313, 310, 306, 307, 308, 61,
	163, 231, 13, 14, 15, 145, 130, -157, -157, -157,
	-101, 323, 324, -161, -162, 115, 112, 30, -124, -124,
	-124, 324, 115, -101, 327, 327, 327, 324, 324, 324,
	7, 324, 327, 324, 302, 302, 324, -112, 269, 269,
	99, 175, 287, -236, -233, -156, -90, -185, -64, -247,
	323, -244, -245, -70, 323, 323, -49, 93, 241, -131,
	99, -54, 99, -54, 269, -130, 63, 269, 269, -41,
	115, 258, 187, 252, -103, 176, -115, 62, 324, -148,
	-105, -96, -179, 324, 322, 7, 7, 324, 166, 125,
	165, -127, 165, -127, -127, 7, -64, -83, 131, -147,
	323, -65, 323, 323, -86, 323, -64, -59, 152, -277,
	-223, -250, 324, -164, 122, 44, -186, 147, 147, -186,
	-119, 147, -117, 192, -117, -117, -265, 323, -17, 323,
	-183, -220, 321, 329, -101, -182, -181, 30, -64, 190,
	324, -156, -156, -157, -157, 115, 323, -156, -167, 26,
	26, 324, -101, 324, 327, -152, -156, 324, -165, 96,
	-156, 265, 324, 292, -88, -88, -88, 5, -260, -64,
	323, 296, -87, 324, -213, -195, -156, -161, -156, -213,
	-195, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	90, 175, 181, -157, 327, -101, 324, -162, -161, -156,
	-156, -195, 324, 324, 324, -101, -156, -156, -156, 324,
	7, -164, -64, -64, -146, 99, -237, 63, -238, 55,
	105, 67, 175, 177, 280, 205, 53, 85, 212, 324,
	324, 327, -71, -108, 55, -71, -156, 323, -90, -91,
	175, 85, 175, 85, 78, 276, -64, -64, -72, -64,
	-64, -64, -72, -227, 266, 323, -137, 323, 185, -29,
	-115, 308, 322, 322, 324, 130, -90, 323, -91, -81,
	30, -90, 185, -60, 151, -277, -223, -57, -256, 297,
	-156, -101, -186, -186, -118, 286, 185, 147, -186, 322,
	324, -266, 7, 322, -194, -182, 7, -155, -154, 113,
	173, 324, -64, 323, -183, 26, 26, -156, -167, 324,
	-156, -156, 324, -156, 322, -156, 5, -156, 324, 324,
	324, -261, -64, -156, 324, 324, 324, -162, 115, 90,
	181, 323, -156, 324, 324, 327, 324, 324, 324, -256,
	-146, -64, -99, -64, 105, 127, 177, 148, 323, -157,
	-72, -145, -274, 66, 255, -185, -50, -99, -50, 324,
	-101, 324, 324, 177, 177, -156, -195, -54, -54, 269,
	269, -159, -70, -64, -40, -39, 5, 91, -91, 63,
	-111, -45, 323, 196, 324, -90, 324, 324, -29, 324,
	-72, -277, -223, -58, -257, -258, -64, -118, 323, -156,
	-186, -153, 324, 327, -183, 324, 322, 327, 330, 308,
	-183, 323, -91, -181, -156, -156, 324, 324, -88, -255,
	198, 324, -157, 115, 323, -167, 324, -156, -238, -65,
	175, -156, -66, 323, -83, 323, -71, -88, 212, -53,
	55, -64, -64, 323, 327, 324, -42, 308, 282, 176,
	324, -64, -64, -145, 324, -83, -145, 323, -223, -59,
	327, 30, -91, -183, 7, -182, -17, -154, -220, 321,
	-182, -91, 324, 324, -88, 44, -157, -167, 324, 324,
	99, 324, -241, 164, -64, -91, -50, 324, -72, -48,
	286, -99, -101, -39, 5, 241, -148, 323, -83, -145,
	-83, -90, -60, -258, -260, 324, -181, 322, 7, 324,
	-262, 207, 230, -101, 324, 105, -239, -242, -240, 185,
	116, 197, 244, 324, 324, -86, -156, -88, -104, -91,
	-83, 324, -183, 322, 324, -263, -264, 36, 277, 70,
	-156, -263, -64, -240, 185, -242, 185, 282, 88, -241,
	324, -148, 324, -145, -182, -264, 202, 111, 229, 202,
	111, -243, 172, 223, 47, 241, -243, -239, -55, 47,
	223, -83, 26, 20, 177, 85, -264,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	0, 0, 0, 0, 79, 80, 81, 82, 83, 84,
	0, 0, 419, 0, 0, 0, 0, 0, 0, 0,
	391, -2, 0, 154, 0, 340, 0, 340, 340, 344,
	0, 0, 421, 306, 418, -2, 429, 0, 0, 0,
	427, 405, 0, 0, -2, 0, 0, 0, 0, 0,
	133, 0, 950, 880, 886, 887, 911, 912, 913, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 0, 0, 882, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 0, 222, 925,
	926, 927, 928, 929, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 119,
	126, 127, 1002, 129, 0, 136, 137, 138, 140, 141,
	142, 143, 144, 145, 146, 0, 333, 1024, 346, 150,
	979, 1028, 1100, 1045, 157, 167, 0, 1106, -2, 171,
	96, 200, 201, 202, 0, 204, 224, 0, 0, 0,
	0, 0, 212, 0, 0, 0, 219, 0, 351, 339,
	351, 336, 337, 338, 341, 0, 332, 149, 0, 420,
	0, 0, 0, 0, 0, 305, -2, 401, 402, -2,
	0, 424, 424, 424, 0, 0, 402, 0, 410, 1006,
	413, 893, 411, 0, 0, 426, 425, 0, 406, 501,
	0, 449, 0, 2, 0, 1084, 501, 0, 1084, 885,
	0, 0, 1084, 0, 0, 134, 135, 890, 888, 889,
	0, 0, 0, 0, 883, 859, 857, 858, 0, 0,
	0, 0, 507, 86, 1084, 54, 1084, 878, 54, 1084,
	94, 54, 1084, 0, 114, 116, 921, 922, 923, 924,
	1111, 0, 0, 0, 0, 124, 0, 128, 130, 0,
	0, 0, 345, 151, 1073, 153, 0, 156, 158, 159,
	0, 0, 0, 0, 0, 0, 170, 195, 196, 97,
	0, 0, 226, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 215, 216, 0, 0, 0, 334, 347, 348,
	335, 0, 343, 54, 505, 278, 1084, 417, 278, 915,
	417, 1084, -2, 0, 397, 436, 437, 0, 0, 0,
	422, 423, 0, 0, 0, 393, 394, 0, 412, 0,
	0, 452, 870, 874, 875, 604, 0, 0, 0, 0,
	0, 0, 696, 698, 1078, 1100, 0, 700, 701, 0,
	703, 705, 706, 0, 709, 710, 850, 882, 896, 897,
	898, 899, 0, 0, 902, 0, 904, 905, 906, 750,
	719, -2, -2, 894, 536, 537, 538, 539, -2, 1113,
	723, 725, 727, 728, 729, 730, 0, 1062, 1079, 1080,
	1096, 1097, 1105, 1109, 1110, 1084, 1093, 1085, 1074, 1082,
	1091, 955, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 920, 566, 567, 572, 573, 575, 452,
	450, 502, 503, 0, 0, 867, 865, 866, 31, 329,
	33, 0, 329, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 492, 63, 64, 198,
	199, 881, 0, 855, 856, 492, 65, 76, 0, 0,
	876, 860, 511, 0, 368, 0, 0, 508, 0, 0,
	88, 0, 52, 53, 0, 90, 0, 0, 92, 0,
	419, 0, 0, 1084, 0, 419, 0, 808, 519, 520,
	521, 522, 523, 601, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 543, 544, 545, 546, 547, 548,
	549, 563, 0, 542, 542, 542, 555, 556, 564, 565,
	570, 571, 582, 583, 585, 587, 581, 581, 581, 578,
	579, 0, 806, 0, 139, 0, 0, 0, 0, 0,
	0, 162, 182, 183, 184, 163, 165, 172, 174, 175,
	176, 185, 186, 187, 188, 295, 0, 297, 907, 0,
	164, 166, 168, 169, 189, 190, 191, 192, 193, 194,
	0, 0, 98, 203, 205, 0, 223, 206, 207, 208,
	209, 210, 211, 214, 217, 218, 0, 0, 0, 0,
	342, 298, 0, 236, 0, 0, 301, 416, 0, 0,
	0, 1084, 914, 356, 0, 400, 434, 435, 438, 441,
	442, 439, 604, 407, 408, 409, 430, 431, 316, 414,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 785,
	786, 787, 788, 789, 790, 793, 794, 791, 792, 795,
	796, 797, 0, 0, 0, 798, 799, 800, 0, 0,
	802, 0, 804, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 873, 801, 609, 610, 611, 633, 634,
	0, 697, 861, 854, 699, 0, -2, 806, 0, 702,
	707, 708, 0, 0, 849, -2, 0, 901, 0, 601,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	829, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	551, 569, 580, 577, 576, 553, 0, 552, 550, 0,
	554, 0, 0, 0, 511, 0, 0, 869, 0, 0,
	0, 0, 328, 35, 1084, 0, 56, 0, 0, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 229, 0, 230, 0, 0, 884, 0, 0, 0,
	68, 0, 891, 75, 0, 0, 0, 0, 380, 0,
	380, 370, 0, 0, 0, 380, 383, 384, 386, 387,
	0, 0, 509, 87, 879, 54, 95, 54, 54, 101,
	115, 0, 117, 120, 121, 122, 123, 118, 0, 512,
	514, 524, 0, 588, 589, 590, 591, 592, 593, 602,
	125, 0, 0, 0, 0, 155, 160, 161, 352, 0,
	179, 0, 181, 0, 296, 909, 908, 99, 225, 147,
	220, 221, 349, 350, 506, 0, 0, 235, 890, 237,
	239, 240, 241, 242, 915, 0, 915, 0, 0, 299,
	0, 0, 0, 0, 358, 364, 0, 440, 443, 444,
	0, 433, 314, 315, 419, 892, 446, 871, 492, 453,
	0, 463, 501, 478, 468, 0, 605, 515, 516, 557,
	558, 559, 560, 561, 606, 607, 0, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, -2, -2, -2,
	625, 626, 627, -2, -2, -2, 631, 632, -2, 803,
	805, 0, 864, 0, -2, 0, 641, -2, -2, -2,
	645, 0, 647, 650, 652, 654, 0, 0, 0, 0,
	863, 664, 841, 0, 0, 782, 783, 784, 872, 649,
	0, 0, 862, 853, 0, 0, -2, 704, 0, 0,
	0, 812, 813, 848, 844, 0, 711, 429, 0, 0,
	0, 0, 0, 910, 760, 0, 0, 0, 724, 726,
	0, 0, 0, 0, 816, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 806, 826, 0, 0, 667, 0,
	0, 0, 0, 1100, 0, 806, 834, 0, 0, 0,
	0, 0, 806, 0, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 446, 504, 868,
	34, 318, 0, 0, 0, 37, 1084, 45, 0, 250,
	0, 0, 0, 0, 0, 331, 46, 1084, 54, 1084,
	54, 47, 32, 329, 227, 228, 322, 0, 317, 320,
	0, 75, 0, 0, 62, 0, 66, 77, 0, 877,
	85, 0, 510, 365, 380, 0, 0, 372, 369, 367,
	511, 0, 0, 0, 0, 89, 91, 93, 0, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 131,
	132, 152, 177, 178, 180, 173, 0, 244, 277, 0,
	0, 915, 0, 233, 278, 300, 302, 0, 0, 360,
	364, 0, 363, 417, 432, 0, 448, 0, 451, 0,
	0, 0, 0, 0, 498, 498, 498, 496, 472, 419,
	478, 0, 0, 490, 0, -2, 468, 0, 0, -2,
	-2, 0, 0, 0, 665, -2, 646, 648, 651, 653,
	655, 0, 0, 0, 0, 0, 0, 0, 666, 0,
	0, 851, 854, -2, 807, 810, 811, 0, 0, 845,
	0, 0, 0, 0, 428, 429, 429, 429, 717, 0,
	718, 0, 0, 0, 0, 0, 0, 733, 0, 734,
	735, 0, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 671, 672,
	0, 0, 737, 832, 833, 0, 0, 0, 0, 0,
	0, 742, 0, 839, 0, 0, 0, 746, 747, 748,
	0, 540, 0, 562, 584, 586, 574, 448, 0, 0,
	0, 0, 55, 248, 267, 0, 0, 307, 313, 313,
	0, 720, 721, 0, 0, 0, 39, 0, 0, 0,
	0, 43, 0, 49, 0, 0, 0, 0, 0, 61,
	0, 0, 0, 78, 378, 379, 366, 377, 0, 380,
	385, 382, 388, 0, 517, 0, 0, 525, 594, 595,
	596, 597, 598, 599, 600, 0, 148, 231, 0, 238,
	0, 0, 0, 236, 0, 0, 0, 362, 364, 0,
	355, 356, 415, 754, 0, 0, 454, 0, 0, 0,
	0, 0, 493, 497, 494, 495, 0, 0, 0, 0,
	490, 460, 0, 0, 0, 467, 489, 0, 488, 477,
	-2, 608, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 842, 0, 777, 0, 0, 853, -2, 814, 843,
	847, 0, 712, 0, 0, 0, 0, 903, 758, 759,
	763, 0, 0, 722, 0, 0, 815, 825, 827, 668,
	669, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, -2, -2, -2, 686, 687, 688, -2, -2, -2,
	0, 0, 0, 828, 0, 0, 780, 830, 831, 836,
	837, 0, 739, 740, 741, 838, 0, 0, 0, 568,
	0, 754, 324, 326, 36, 0, 249, 0, 252, 0,
	0, 0, 0, 258, 259, 0, 0, 0, 0, 269,
	276, 0, 316, 895, 0, 316, 0, 0, 0, 0,
	0, 51, 0, 0, 330, 0, 54, 54, 319, 0,
	0, 323, 321, 67, 0, 0, 0, 0, 0, 371,
	381, 0, 518, 513, 603, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 364, 0, 357, 358, 403, 0,
	447, 445, 480, 0, 482, 0, 0, 0, 484, 463,
	473, 0, 475, 478, 0, 465, 0, 0, 458, 0,
	457, 478, 486, 0, 0, 0, 0, -2, 0, 658,
	-2, -2, 776, 807, 852, 846, 900, 429, 713, 715,
	716, 765, 762, 0, 749, 731, 732, 824, 0, 0,
	0, 0, 807, 779, 738, 0, 744, 745, 541, 404,
	38, 0, 253, 254, 915, 0, 257, 260, 0, 262,
	917, 244, 0, 273, 274, 308, 309, 312, 310, 313,
	429, 271, 0, 40, 41, 50, 58, 42, 48, 0,
	0, 491, 0, 0, 0, 72, 70, 0, 0, 0,
	389, 390, 0, 0, 276, 0, 266, 244, 234, 276,
	0, 0, 359, 360, 753, 755, 0, 481, 0, 500,
	483, 478, 474, 0, 490, 419, 461, 0, 462, 0,
	490, 0, 0, 469, -2, -2, 659, 778, 0, 429,
	0, 751, -2, 0, 0, 0, 781, 0, 251, 255,
	0, 0, 282, 0, 270, 0, 316, 0, 0, 60,
	0, 325, 327, 0, 0, 74, 71, 0, 0, 374,
	511, 376, 0, 244, 276, 232, 244, 0, 361, 362,
	0, 0, 0, 0, 476, 470, 0, 459, 455, 0,
	466, 0, 487, 714, 768, 0, -2, 0, 694, 743,
	0, 261, 287, 0, 0, 0, 311, 712, 278, 44,
	0, 57, 429, 73, 69, 0, 375, 0, 264, 244,
	303, 0, 354, 756, 757, 499, 464, 478, 0, 485,
	0, 0, 0, 764, 695, 0, 263, 283, 284, 0,
	279, 280, 281, 916, 275, 282, 59, 0, 511, 0,
	265, 276, 490, 456, 761, 766, 769, -2, 1048, 947,
	0, 767, 256, 285, 0, 286, 0, 0, 0, 287,
	0, 373, 247, 244, 471, 0, 771, 772, 773, 774,
	775, 288, 0, 291, 292, 0, 289, 272, 243, 245,
	246, 304, 0, 290, 293, 294, 770,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 312, 3, 318, 313, 3,
	323, 324, 316, 314, 327, 315, 325, 317, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 331, 326,
	306, 308, 307, 3, 328, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 321, 3, 322, 311, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 329, 310, 330, 320,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 309, 57649, 319,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:784
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:790
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:796
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:914
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			return unimplemented(sqllex)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = nil
		}
	case 52:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropCascade
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropRestrict
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = DropDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return unimplemented(sqllex)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:991
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:999
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 68:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.str = ""
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1064
		{
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{ /* SKIP DOC */
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{ /* SKIP DOC */
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			return unimplemented(sqllex)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = Low
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = Normal
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = High
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			return unimplemented(sqllex)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			return unimplemented(sqllex)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1578
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1666
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1670
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1713
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1717
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = DropDefault
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2008
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2010
		{
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			return unimplemented(sqllex)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2031
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			return unimplemented(sqllex)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = true
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = false
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			return unimplemented(sqllex)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2142
		{
			return unimplemented(sqllex)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			return unimplemented(sqllex)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2146
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = Ascending
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = Descending
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2200
		{
			return unimplemented(sqllex)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2201
		{
			return unimplemented(sqllex)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = true
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = false
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2214
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2215
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2258
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.str = ""
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.str = ""
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.str = ""
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.str = ""
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.str = ""
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2380
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2381
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2445
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			return unimplemented(sqllex)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2480
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2707
		{
			return unimplemented(sqllex)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2708
		{
			return unimplemented(sqllex)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			return unimplemented(sqllex)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			return unimplemented(sqllex)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			return unimplemented(sqllex)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2716
		{
			return unimplemented(sqllex)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2719
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2720
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			return unimplemented(sqllex)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2724
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2728
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = true
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = false
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = false
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = true
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2752
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2851
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2852
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &From{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2946
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2991
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3008
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = nil
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = true
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = false
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.str = astFullJoin
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.str = astLeftJoin
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.str = astRightJoin
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.str = astInnerJoin
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3187
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3273
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3286
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3301
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3310
		{
			return unimplemented(sqllex)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3378
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = nil
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3523
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3555
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3595
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = year
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = month
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = day
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = hour
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = minute
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = month
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = hour
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = minute
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = minute
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = nil
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = second
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3690
		{
			return unimplemented(sqllex)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			return unimplemented(sqllex)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			return unimplemented(sqllex)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3959
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4132
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4185
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4186
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4209
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4225
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4226
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4230
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4248
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			return unimplemented(sqllex)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4279
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4323
		{
			return unimplemented(sqllex)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4324
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = Window(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.str = ""
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4421
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4422
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4423
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			return unimplemented(sqllex)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4427
		{
			return unimplemented(sqllex)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4433
		{
			return unimplemented(sqllex)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4434
		{
			return unimplemented(sqllex)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4435
		{
			return unimplemented(sqllex)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4436
		{
			return unimplemented(sqllex)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4437
		{
			return unimplemented(sqllex)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = Any
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = Some
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = All
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = Plus
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = Minus
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = Mult
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = Div
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = FloorDiv
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = Mod
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = Bitand
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = Bitor
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = Bitxor
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = Bitxor
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = LT
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = GT
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = EQ
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = LE
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = GE
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = NE
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = Like
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = NotLike
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = ILike
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = NotILike
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4802
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4964
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5000
		{
			return unimplemented(sqllex)
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = DNull
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5039
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.str = ""
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
