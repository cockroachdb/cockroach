// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PASSWORD = 57533
const PLACING = 57534
const POSITION = 57535
const PRECEDING = 57536
const PRECISION = 57537
const PREPARE = 57538
const PRIMARY = 57539
const PRIORITY = 57540
const RANGE = 57541
const READ = 57542
const REAL = 57543
const RECURSIVE = 57544
const REF = 57545
const REFERENCES = 57546
const RENAME = 57547
const REPEATABLE = 57548
const RELEASE = 57549
const RESTRICT = 57550
const RETURNING = 57551
const REVOKE = 57552
const RIGHT = 57553
const ROLLBACK = 57554
const ROLLUP = 57555
const ROW = 57556
const ROWS = 57557
const RSHIFT = 57558
const SAVEPOINT = 57559
const SEARCH = 57560
const SECOND = 57561
const SELECT = 57562
const SERIAL = 57563
const SERIALIZABLE = 57564
const SESSION = 57565
const SESSION_USER = 57566
const SET = 57567
const SHOW = 57568
const SIMILAR = 57569
const SIMPLE = 57570
const SMALLINT = 57571
const SMALLSERIAL = 57572
const SNAPSHOT = 57573
const SOME = 57574
const SPLIT = 57575
const SQL = 57576
const START = 57577
const STDIN = 57578
const STRICT = 57579
const STRING = 57580
const STORING = 57581
const SUBSTRING = 57582
const SYMMETRIC = 57583
const SYSTEM = 57584
const TABLE = 57585
const TABLES = 57586
const TEXT = 57587
const THEN = 57588
const TIME = 57589
const TIMESTAMP = 57590
const TIMESTAMPTZ = 57591
const TO = 57592
const TRAILING = 57593
const TRANSACTION = 57594
const TREAT = 57595
const TRIM = 57596
const TRUE = 57597
const TRUNCATE = 57598
const TYPE = 57599
const UNBOUNDED = 57600
const UNCOMMITTED = 57601
const UNION = 57602
const UNIQUE = 57603
const UNKNOWN = 57604
const UPDATE = 57605
const UPSERT = 57606
const USER = 57607
const USING = 57608
const VALID = 57609
const VALIDATE = 57610
const VALUE = 57611
const VALUES = 57612
const VARCHAR = 57613
const VARIADIC = 57614
const VIEW = 57615
const VARYING = 57616
const WHEN = 57617
const WHERE = 57618
const WINDOW = 57619
const WITH = 57620
const WITHIN = 57621
const WITHOUT = 57622
const YEAR = 57623
const ZONE = 57624
const NOT_LA = 57625
const WITH_LA = 57626
const AS_LA = 57627
const POSTFIXOP = 57628
const UMINUS = 57629

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4888

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	306, 27,
	-2, 386,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 359,
	178, 359,
	209, 359,
	304, 359,
	306, 359,
	-2, 369,
	-1, 59,
	1, 362,
	178, 362,
	209, 362,
	304, 362,
	306, 362,
	-2, 368,
	-1, 68,
	1, 27,
	306, 27,
	-2, 386,
	-1, 393,
	1, 177,
	306, 177,
	-2, 889,
	-1, 428,
	153, 396,
	177, 396,
	-2, 365,
	-1, 431,
	153, 395,
	177, 395,
	-2, 363,
	-1, 555,
	153, 395,
	177, 395,
	-2, 366,
	-1, 611,
	303, 827,
	-2, 820,
	-1, 612,
	303, 828,
	-2, 821,
	-1, 618,
	5, 531,
	303, 531,
	-2, 981,
	-1, 642,
	5, 497,
	-2, 955,
	-1, 643,
	5, 525,
	303, 525,
	-2, 957,
	-1, 644,
	5, 505,
	-2, 958,
	-1, 645,
	5, 504,
	-2, 959,
	-1, 646,
	5, 525,
	303, 525,
	-2, 962,
	-1, 647,
	5, 525,
	303, 525,
	-2, 963,
	-1, 648,
	5, 526,
	-2, 966,
	-1, 649,
	5, 491,
	-2, 967,
	-1, 650,
	5, 491,
	-2, 968,
	-1, 651,
	5, 507,
	-2, 972,
	-1, 652,
	5, 492,
	-2, 977,
	-1, 653,
	5, 493,
	-2, 978,
	-1, 654,
	5, 494,
	-2, 979,
	-1, 655,
	5, 495,
	-2, 980,
	-1, 656,
	5, 491,
	-2, 984,
	-1, 657,
	5, 498,
	-2, 989,
	-1, 658,
	5, 496,
	-2, 992,
	-1, 659,
	5, 523,
	303, 523,
	-2, 994,
	-1, 660,
	5, 527,
	-2, 997,
	-1, 661,
	5, 529,
	-2, 998,
	-1, 662,
	5, 522,
	303, 522,
	-2, 1002,
	-1, 913,
	97, 369,
	139, 369,
	153, 369,
	177, 369,
	181, 369,
	260, 369,
	-2, 643,
	-1, 921,
	303, 805,
	-2, 793,
	-1, 1125,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 566,
	-1, 1126,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 567,
	-1, 1127,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 568,
	-1, 1131,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 572,
	-1, 1132,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 573,
	-1, 1133,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 574,
	-1, 1136,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 579,
	-1, 1142,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 581,
	-1, 1145,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 586,
	-1, 1146,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 587,
	-1, 1147,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 588,
	-1, 1172,
	186, 715,
	-2, 718,
	-1, 1195,
	114, 731,
	303, 827,
	-2, 820,
	-1, 1196,
	114, 732,
	-2, 951,
	-1, 1197,
	114, 733,
	-2, 887,
	-1, 1198,
	114, 734,
	-2, 860,
	-1, 1199,
	114, 735,
	-2, 875,
	-1, 1200,
	114, 736,
	-2, 886,
	-1, 1201,
	114, 737,
	-2, 921,
	-1, 1350,
	97, 369,
	139, 369,
	153, 369,
	177, 369,
	181, 369,
	260, 369,
	-2, 444,
	-1, 1354,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 580,
	-1, 1355,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 582,
	-1, 1360,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 583,
	-1, 1378,
	186, 714,
	-2, 717,
	-1, 1543,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 584,
	-1, 1548,
	142, 0,
	-2, 598,
	-1, 1556,
	186, 716,
	-2, 719,
	-1, 1590,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 624,
	-1, 1591,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 625,
	-1, 1592,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 626,
	-1, 1596,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 630,
	-1, 1597,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 631,
	-1, 1598,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 632,
	-1, 1703,
	142, 0,
	-2, 599,
	-1, 1706,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 602,
	-1, 1707,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 604,
	-1, 1794,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 603,
	-1, 1795,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 605,
	-1, 1802,
	142, 0,
	-2, 633,
	-1, 1849,
	142, 0,
	-2, 634,
	-1, 1903,
	35, 0,
	127, 0,
	152, 0,
	227, 0,
	283, 0,
	-2, 954,
}

const sqlNprod = 1097
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25896

var sqlAct = [...]int{

	612, 1902, 1882, 1855, 1510, 1926, 1883, 1901, 1746, 1884,
	1001, 432, 1009, 1097, 1782, 836, 916, 1073, 1668, 1627,
	1567, 586, 1695, 726, 602, 610, 609, 468, 1769, 76,
	1689, 1682, 453, 45, 1669, 842, 1106, 1077, 1347, 266,
	76, 76, 76, 1435, 77, 76, 1434, 1522, 76, 1072,
	1381, 918, 1346, 845, 1105, 264, 76, 1275, 1337, 710,
	1532, 1076, 678, 76, 76, 1041, 727, 76, 675, 394,
	76, 76, 76, 76, 1010, 1331, 968, 977, 574, 1221,
	1182, 1158, 1224, 267, 1155, 1109, 19, 439, 58, 26,
	1025, 467, 663, 1067, 790, 437, 604, 15, 860, 541,
	7, 1034, 774, 680, 1192, 469, 696, 575, 584, 470,
	771, 431, 542, 953, 949, 801, 489, 480, 1080, 22,
	558, 483, 21, 1107, 252, 58, 10, 257, 9, 8,
	6, 268, 4, 250, 482, 256, 866, 442, 258, 1003,
	559, 557, 792, 788, 770, 391, 372, 381, 703, 476,
	440, 562, 263, 436, 540, 384, 58, 261, 59, 263,
	259, 712, 1789, 60, 260, 1790, 262, 254, 253, 712,
	255, 436, 712, 1002, 869, 870, 1038, 889, 890, 891,
	899, 900, 901, 1917, 1345, 1898, 1101, 665, 1768, 1890,
	450, 1880, 1101, 456, 1031, 57, 463, 872, 1875, 903,
	1287, 1101, 57, 419, 1286, 459, 1851, 1845, 1833, 1031,
	1101, 1768, 1823, 690, 444, 1101, 1006, 429, 871, 1039,
	1796, 36, 428, 1031, 886, 868, 1044, 1793, 36, 37,
	1101, 1779, 1776, 1837, 1768, 1101, 37, 1767, 1751, 1750,
	1768, 1101, 1101, 64, 867, 1334, 76, 76, 76, 76,
	76, 38, 492, 1771, 1728, 1040, 1037, 1044, 38, 1708,
	1705, 1603, 1044, 1031, 869, 870, 66, 1654, 1335, 1555,
	1044, 869, 870, 877, 1653, 1639, 1313, 1044, 1101, 1044,
	1552, 1496, 966, 1044, 998, 437, 1490, 872, 1316, 998,
	1334, 896, 904, 67, 872, 1452, 493, 1380, 1453, 1450,
	1449, 62, 1044, 1044, 1101, 1046, 902, 63, 871, 1448,
	1378, 1166, 1044, 1044, 1042, 871, 894, 1096, 485, 485,
	1376, 1061, 887, 713, 1375, 1377, 61, 570, 831, 1044,
	1315, 713, 1102, 1101, 713, 1101, 1053, 1043, 1030, 1044,
	1044, 1031, 997, 965, 494, 998, 964, 720, 830, 64,
	721, 782, 64, 781, 471, 49, 64, 569, 472, 505,
	471, 449, 49, 877, 472, 64, 68, 490, 76, 477,
	877, 486, 66, 1405, 1406, 66, 1036, 472, 815, 66,
	888, 525, 1937, 76, 1900, 1896, 76, 76, 66, 1889,
	1660, 897, 1846, 1286, 1777, 1733, 1729, 1721, 1035, 67,
	1720, 1719, 67, 1714, 1713, 1712, 67, 62, 1666, 1618,
	62, 1613, 887, 63, 62, 67, 63, 1612, 867, 76,
	63, 76, 716, 76, 76, 76, 1611, 76, 1558, 1541,
	711, 1521, 61, 834, 1500, 1005, 1318, 1457, 1454, 251,
	556, 1442, 76, 1433, 1404, 1401, 1400, 895, 61, 1163,
	883, 884, 885, 76, 882, 879, 880, 881, 873, 874,
	875, 876, 878, 1398, 898, 1405, 1406, 76, 1498, 1386,
	888, 1385, 1411, 266, 76, 76, 76, 1314, 76, 555,
	1238, 1189, 670, 1188, 924, 569, 568, 841, 513, 1874,
	1569, 1865, 548, 1836, 551, 698, 1815, 76, 76, 465,
	471, 514, 919, 1813, 472, 76, 1804, 76, 1786, 1774,
	1765, 1743, 1726, 1698, 1676, 1659, 1547, 267, 492, 492,
	1540, 1421, 1518, 1516, 1515, 669, 266, 76, 700, 76,
	76, 76, 76, 76, 76, 76, 1513, 1469, 1164, 76,
	76, 508, 510, 715, 547, 76, 718, 881, 873, 874,
	875, 876, 878, 76, 898, 873, 874, 875, 876, 878,
	1468, 898, 493, 493, 1411, 268, 545, 840, 543, 1432,
	267, 76, 869, 870, 76, 869, 870, 664, 1394, 1422,
	1393, 816, 1372, 1368, 768, 1160, 565, 566, 1302, 1265,
	1264, 864, 571, 1252, 780, 872, 733, 477, 429, 1251,
	1231, 1405, 1406, 428, 1187, 1100, 833, 954, 957, 1252,
	494, 494, 961, 947, 921, 946, 871, 811, 268, 871,
	722, 945, 437, 702, 705, 944, 943, 942, 1405, 1406,
	941, 940, 724, 939, 938, 937, 936, 935, 934, 933,
	932, 931, 922, 920, 61, 835, 454, 573, 511, 501,
	499, 778, 777, 1416, 1413, 1414, 1415, 1407, 1408, 1409,
	1410, 1412, 805, 812, 1665, 686, 1664, 1296, 1207, 869,
	870, 915, 817, 820, 76, 821, 822, 823, 824, 825,
	850, 1295, 76, 671, 828, 829, 76, 756, 466, 519,
	76, 76, 832, 1791, 76, 1663, 1288, 1091, 848, 849,
	1411, 959, 617, 839, 1456, 960, 1455, 76, 862, 76,
	76, 1353, 76, 535, 929, 76, 520, 76, 76, 971,
	76, 429, 492, 1683, 429, 429, 856, 1411, 671, 857,
	858, 246, 1002, 1570, 1183, 538, 1389, 950, 426, 1282,
	1463, 1861, 1309, 1914, 1913, 1647, 418, 1052, 417, 1407,
	1408, 1409, 1410, 1412, 412, 1822, 413, 1759, 1758, 982,
	984, 951, 952, 1497, 955, 539, 493, 71, 1484, 970,
	958, 970, 1483, 76, 76, 1480, 1421, 969, 1460, 1038,
	242, 1459, 925, 247, 1356, 1301, 1019, 485, 578, 485,
	1004, 1048, 1004, 1300, 1299, 978, 1298, 1143, 810, 809,
	974, 803, 798, 1045, 994, 993, 962, 252, 58, 987,
	257, 990, 1026, 58, 494, 1028, 266, 995, 256, 70,
	76, 258, 1039, 1027, 991, 517, 1029, 243, 681, 681,
	682, 682, 1018, 544, 1422, 76, 76, 490, 1023, 1020,
	261, 1021, 76, 259, 1784, 1008, 1017, 260, 1821, 262,
	254, 253, 1235, 255, 1022, 1234, 981, 1114, 1040, 1037,
	267, 1686, 898, 518, 955, 898, 958, 497, 421, 76,
	1157, 1066, 76, 1485, 1157, 1271, 694, 1103, 813, 952,
	951, 1049, 1055, 1047, 687, 1050, 1863, 1409, 1410, 1412,
	1748, 1471, 688, 681, 1054, 682, 248, 435, 706, 683,
	683, 1505, 1502, 422, 1886, 1042, 266, 1877, 268, 1413,
	1414, 1415, 1407, 1408, 1409, 1410, 1412, 1042, 1183, 1913,
	687, 427, 1270, 1878, 1923, 423, 249, 1276, 869, 870,
	667, 1070, 69, 424, 762, 1488, 1111, 1112, 1503, 434,
	980, 1113, 1308, 1069, 698, 1929, 1094, 1095, 814, 698,
	267, 872, 1405, 1406, 1284, 1267, 245, 244, 1071, 898,
	1042, 1161, 72, 1478, 683, 967, 733, 733, 76, 76,
	76, 1170, 871, 1237, 76, 1104, 1934, 76, 1887, 1036,
	496, 436, 692, 76, 76, 76, 76, 76, 691, 712,
	1816, 76, 1310, 515, 76, 76, 516, 1042, 268, 76,
	1280, 1057, 1167, 1171, 979, 1174, 76, 1059, 76, 948,
	1922, 1245, 1263, 679, 1087, 76, 536, 1888, 1194, 1194,
	1205, 1162, 1216, 1060, 1472, 76, 1179, 877, 1228, 1229,
	1230, 1276, 1058, 1239, 1800, 1766, 1533, 912, 1392, 437,
	436, 1202, 1249, 1885, 1912, 1910, 76, 76, 516, 1336,
	1262, 1411, 76, 1681, 1089, 1365, 528, 756, 756, 506,
	433, 1278, 492, 504, 1749, 1927, 561, 560, 1526, 1363,
	1240, 537, 733, 1599, 1941, 684, 684, 755, 1290, 1358,
	1291, 1292, 76, 1156, 76, 1643, 76, 1340, 804, 799,
	76, 561, 1753, 76, 1921, 1752, 666, 1340, 1294, 1724,
	1421, 1501, 76, 1741, 1810, 1343, 493, 1928, 1462, 76,
	1248, 76, 1281, 1646, 1244, 1343, 1531, 1317, 1090, 1319,
	1645, 1289, 1341, 787, 1930, 847, 1338, 837, 733, 1856,
	1405, 1406, 1341, 1423, 1424, 1425, 597, 1361, 1935, 1304,
	684, 1366, 1249, 827, 437, 1306, 1339, 1352, 1293, 1305,
	560, 713, 1307, 1600, 494, 1321, 1311, 785, 1422, 1601,
	1691, 1940, 1696, 756, 783, 74, 1742, 1312, 786, 1254,
	1642, 1320, 733, 1253, 1692, 1323, 364, 365, 366, 1528,
	1420, 383, 1527, 1342, 395, 1725, 1379, 1026, 58, 515,
	1028, 1329, 383, 1342, 437, 1328, 1351, 475, 1027, 443,
	443, 1029, 732, 74, 474, 1644, 74, 74, 462, 74,
	434, 370, 552, 1511, 875, 876, 878, 1697, 898, 756,
	1667, 1362, 1523, 1359, 1635, 1357, 1405, 1406, 1364, 1411,
	1739, 1332, 1186, 1803, 1437, 1415, 1407, 1408, 1409, 1410,
	1412, 614, 1723, 1371, 1436, 1546, 437, 1373, 1690, 1399,
	1367, 1740, 1272, 76, 1051, 373, 1636, 996, 534, 1383,
	1384, 533, 1388, 756, 532, 531, 530, 529, 526, 473,
	1467, 930, 819, 1185, 1881, 1853, 378, 1624, 1421, 1476,
	1474, 374, 1461, 1325, 1092, 1085, 1024, 76, 76, 719,
	717, 714, 709, 693, 689, 1431, 1492, 685, 1439, 1440,
	1441, 1564, 846, 1760, 1914, 375, 1444, 1098, 522, 807,
	563, 1762, 373, 1458, 76, 986, 1489, 76, 1475, 76,
	1477, 447, 3, 377, 970, 1411, 76, 1771, 1465, 1140,
	985, 1818, 1848, 378, 1524, 76, 1422, 1517, 374, 76,
	1479, 1631, 1494, 1632, 567, 76, 266, 1481, 1482, 76,
	855, 76, 970, 989, 1514, 1487, 1262, 1495, 983, 988,
	369, 1493, 375, 1491, 1099, 1504, 1506, 1507, 1838, 1634,
	411, 1525, 1679, 1088, 1421, 1529, 1637, 564, 1512, 1084,
	377, 1520, 74, 478, 74, 395, 395, 523, 448, 1007,
	267, 455, 1549, 76, 1560, 1561, 1562, 1536, 1530, 863,
	779, 1537, 1534, 1535, 380, 725, 1417, 1418, 1419, 376,
	1416, 1413, 1414, 1415, 1407, 1408, 1409, 1410, 1412, 1033,
	1938, 1138, 1141, 414, 415, 1939, 1405, 1406, 1619, 1557,
	758, 1710, 1422, 1633, 869, 870, 1063, 1062, 268, 1508,
	1499, 1451, 1297, 1236, 1233, 1571, 1137, 755, 755, 1576,
	1232, 1180, 379, 1064, 1563, 1553, 1326, 1322, 1065, 923,
	76, 76, 76, 1573, 1574, 733, 376, 420, 1747, 76,
	76, 371, 1578, 1579, 818, 76, 527, 76, 1606, 76,
	76, 76, 1607, 1876, 76, 76, 1640, 1641, 1716, 1391,
	1781, 1799, 1184, 733, 733, 928, 35, 838, 1671, 1623,
	590, 1625, 733, 733, 502, 1610, 1620, 1464, 1079, 379,
	1407, 1408, 1409, 1410, 1412, 1604, 76, 76, 1078, 507,
	269, 1139, 395, 395, 808, 797, 1614, 613, 76, 76,
	791, 800, 76, 1677, 1193, 733, 668, 1680, 1675, 1674,
	1673, 76, 76, 1675, 1674, 1673, 615, 730, 616, 731,
	1662, 956, 603, 755, 728, 383, 756, 74, 1699, 395,
	550, 395, 488, 553, 1687, 1688, 1678, 1657, 1693, 1333,
	76, 1704, 732, 732, 1011, 1181, 1387, 1661, 443, 926,
	1700, 589, 595, 594, 756, 756, 1168, 498, 1694, 74,
	1344, 48, 512, 756, 756, 389, 757, 390, 1279, 1658,
	1093, 851, 1473, 74, 425, 1402, 500, 1685, 1153, 755,
	74, 74, 74, 1214, 707, 1206, 1203, 546, 674, 1012,
	1722, 524, 1151, 1285, 1032, 76, 756, 76, 572, 76,
	76, 859, 446, 74, 74, 445, 1074, 521, 76, 784,
	1056, 775, 416, 775, 733, 1812, 1086, 1247, 1933, 1817,
	1470, 1860, 1734, 755, 65, 25, 23, 20, 18, 17,
	76, 16, 1735, 395, 24, 775, 395, 395, 395, 395,
	395, 826, 14, 13, 12, 395, 395, 1761, 732, 11,
	34, 383, 76, 33, 76, 32, 31, 1770, 1149, 844,
	1148, 30, 29, 76, 1154, 1775, 1763, 5, 1737, 76,
	1772, 1675, 1674, 1673, 2, 1, 0, 443, 1756, 1757,
	865, 0, 0, 0, 1755, 0, 1792, 0, 0, 1785,
	0, 0, 0, 1798, 0, 0, 0, 1208, 0, 1788,
	0, 0, 0, 0, 732, 756, 0, 0, 0, 0,
	76, 729, 0, 0, 733, 0, 0, 0, 0, 0,
	1805, 1814, 0, 0, 0, 0, 1808, 0, 0, 76,
	76, 0, 0, 76, 0, 0, 1778, 76, 0, 0,
	0, 0, 76, 0, 1150, 1809, 1826, 0, 732, 0,
	0, 1152, 1834, 1828, 0, 0, 1830, 76, 1835, 0,
	0, 0, 266, 1675, 1674, 1673, 0, 0, 698, 437,
	758, 758, 0, 1827, 1842, 0, 1839, 0, 0, 1840,
	74, 1847, 1843, 0, 76, 0, 76, 76, 975, 76,
	0, 0, 74, 733, 1369, 1370, 74, 992, 1850, 0,
	74, 1866, 0, 1858, 1864, 756, 267, 769, 76, 0,
	1870, 1829, 1869, 74, 1868, 1015, 1016, 1844, 74, 0,
	1336, 74, 1872, 395, 395, 1871, 395, 1832, 1770, 1873,
	1867, 1675, 1674, 1673, 76, 0, 76, 0, 0, 869,
	870, 0, 0, 0, 1897, 1891, 1893, 0, 1428, 1429,
	1430, 1895, 76, 1894, 268, 0, 1907, 0, 1862, 0,
	0, 1911, 872, 1909, 0, 1915, 0, 0, 1340, 0,
	0, 733, 0, 0, 1916, 1920, 758, 1918, 0, 775,
	865, 1919, 0, 871, 756, 0, 1343, 0, 1932, 0,
	1931, 0, 0, 1936, 0, 0, 0, 1338, 0, 0,
	0, 1879, 0, 1341, 0, 0, 0, 0, 0, 0,
	1942, 0, 0, 0, 1208, 1208, 755, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 1899, 0, 0,
	0, 0, 758, 0, 0, 0, 757, 757, 877, 0,
	0, 74, 1075, 0, 755, 755, 0, 0, 865, 0,
	0, 0, 0, 755, 755, 0, 0, 0, 0, 0,
	0, 0, 756, 0, 1342, 0, 0, 0, 1208, 1208,
	1208, 0, 0, 0, 0, 74, 758, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 755, 887, 0, 0,
	0, 1635, 0, 1628, 0, 0, 1544, 1545, 0, 0,
	0, 1626, 0, 0, 0, 1630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 757, 1629, 0, 888, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 0, 1602, 0, 0, 732,
	732, 0, 0, 0, 74, 1242, 1243, 0, 732, 732,
	975, 729, 729, 1250, 0, 0, 0, 0, 0, 1255,
	1256, 1258, 1260, 1261, 0, 755, 0, 1266, 757, 0,
	1268, 74, 0, 0, 0, 74, 0, 0, 1631, 0,
	1632, 732, 74, 0, 1283, 0, 1208, 1208, 0, 0,
	0, 74, 0, 873, 874, 875, 876, 878, 0, 898,
	0, 74, 0, 0, 0, 0, 1634, 0, 0, 0,
	0, 0, 757, 1637, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 775, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 1208, 1208, 1208, 1208,
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
	1208, 1208, 1208, 1208, 1208, 0, 1208, 729, 844, 0,
	844, 0, 395, 0, 0, 755, 74, 0, 0, 1327,
	1633, 0, 0, 0, 0, 869, 870, 0, 1330, 0,
	0, 899, 900, 901, 0, 1349, 0, 74, 396, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	903, 0, 0, 0, 1405, 1406, 397, 1423, 1424, 1425,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 871,
	1702, 0, 0, 576, 576, 886, 0, 0, 0, 1405,
	1406, 0, 676, 0, 0, 0, 0, 0, 0, 758,
	0, 399, 0, 0, 755, 1744, 404, 405, 0, 699,
	410, 591, 46, 0, 1420, 0, 0, 729, 0, 0,
	0, 0, 398, 400, 0, 0, 0, 758, 758, 0,
	0, 0, 0, 585, 877, 0, 758, 758, 0, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	732, 0, 896, 904, 0, 0, 0, 0, 0, 0,
	0, 401, 73, 1411, 0, 0, 0, 0, 0, 758,
	430, 0, 0, 438, 402, 403, 0, 894, 0, 0,
	46, 0, 755, 887, 0, 0, 0, 0, 1411, 865,
	406, 0, 1802, 0, 0, 0, 1426, 0, 852, 854,
	451, 0, 0, 458, 461, 861, 451, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 907, 908, 909,
	910, 911, 0, 74, 74, 1208, 914, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 888, 0, 0, 0, 0, 927, 0, 0, 0,
	1509, 0, 897, 975, 0, 844, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 757, 0, 0, 0, 0,
	1422, 74, 1849, 0, 0, 74, 0, 0, 758, 0,
	0, 1349, 0, 0, 0, 1539, 0, 1349, 407, 0,
	0, 408, 0, 757, 757, 1422, 409, 0, 0, 0,
	0, 0, 757, 757, 0, 0, 0, 732, 895, 0,
	0, 0, 1208, 0, 0, 882, 879, 880, 881, 873,
	874, 875, 876, 878, 0, 898, 0, 0, 0, 1568,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	1417, 1418, 1419, 0, 1416, 1413, 1414, 1415, 1407, 1408,
	1409, 1410, 1412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 438, 0, 0, 0, 0, 0, 1416,
	1413, 1414, 1415, 1407, 1408, 1409, 1410, 1412, 758, 451,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1208, 0, 0, 0, 1621, 1622, 975, 0,
	0, 0, 0, 0, 0, 865, 865, 0, 0, 0,
	729, 1648, 0, 1649, 0, 74, 1651, 1652, 0, 0,
	1655, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 729,
	0, 0, 0, 0, 757, 0, 0, 729, 729, 0,
	1670, 0, 865, 1075, 0, 1670, 0, 758, 869, 870,
	0, 0, 0, 0, 74, 74, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 1349, 0,
	729, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 871, 0, 0, 576, 1717, 0, 886, 0,
	0, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 0, 1142, 758, 1144, 1145, 1146, 1147,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	0, 430, 0, 0, 451, 0, 0, 877, 0, 0,
	0, 975, 0, 1736, 0, 395, 1738, 0, 0, 0,
	0, 1190, 1191, 0, 74, 1204, 0, 1215, 1217, 1222,
	1225, 1226, 1227, 0, 0, 0, 672, 1405, 1406, 729,
	1423, 1424, 1425, 0, 0, 0, 865, 0, 0, 0,
	697, 0, 676, 1701, 0, 0, 887, 451, 704, 704,
	0, 0, 0, 1670, 0, 0, 0, 0, 74, 0,
	1783, 0, 0, 757, 0, 0, 0, 0, 0, 74,
	458, 461, 0, 0, 0, 865, 0, 1420, 1274, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 0, 844, 430, 430, 0,
	0, 0, 1303, 0, 0, 0, 1411, 0, 0, 729,
	0, 0, 0, 0, 0, 1819, 1820, 0, 0, 1824,
	913, 757, 0, 1825, 917, 1670, 0, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 1841, 0, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 1421, 0, 0, 882, 879,
	880, 881, 873, 874, 875, 876, 878, 0, 898, 0,
	1857, 0, 865, 74, 0, 395, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	0, 0, 0, 1670, 1783, 1354, 1355, 0, 0, 0,
	0, 1360, 869, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	74, 0, 865, 0, 1374, 872, 0, 963, 0, 0,
	0, 0, 0, 1382, 0, 46, 0, 46, 1908, 451,
	0, 1390, 0, 461, 0, 1395, 871, 451, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 46, 0, 0,
	1013, 0, 0, 0, 0, 461, 729, 0, 461, 0,
	914, 0, 0, 0, 0, 0, 1222, 1222, 1222, 0,
	0, 0, 0, 1417, 1418, 1419, 0, 1416, 1413, 1414,
	1415, 1407, 1408, 1409, 1410, 1412, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 1466,
	869, 870, 0, 889, 890, 891, 899, 900, 901, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 872, 576, 903, 0, 0, 0, 0,
	0, 0, 576, 0, 0, 0, 676, 0, 0, 0,
	887, 0, 0, 0, 871, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 1405, 1406, 0, 1423, 1424, 1425, 0, 888, 877,
	0, 1542, 0, 0, 1543, 0, 0, 1551, 0, 0,
	0, 0, 451, 0, 0, 1548, 0, 896, 904, 0,
	0, 0, 0, 0, 0, 0, 1159, 0, 1303, 0,
	0, 0, 902, 0, 0, 0, 0, 1565, 0, 0,
	0, 1420, 894, 0, 0, 0, 0, 1575, 887, 0,
	0, 1577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	893, 0, 882, 879, 880, 881, 873, 874, 875, 876,
	878, 0, 898, 0, 1608, 1609, 0, 0, 0, 0,
	1411, 0, 0, 1615, 1616, 1617, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 1241, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 438, 0, 0,
	0, 0, 0, 0, 0, 0, 576, 0, 1269, 1421,
	0, 0, 1273, 0, 0, 0, 0, 0, 0, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	0, 1684, 0, 895, 0, 0, 883, 884, 885, 0,
	882, 879, 880, 881, 873, 874, 875, 876, 878, 0,
	898, 0, 999, 0, 1703, 0, 0, 1422, 1706, 1707,
	0, 1000, 0, 1709, 0, 0, 46, 1711, 0, 0,
	46, 0, 0, 0, 1715, 0, 0, 0, 1718, 0,
	869, 870, 46, 889, 890, 891, 899, 900, 901, 0,
	0, 0, 1350, 1324, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 872, 0, 903, 0, 0, 0, 0,
	0, 1727, 0, 0, 451, 1405, 1406, 0, 1423, 1424,
	1425, 0, 0, 1159, 871, 0, 0, 1417, 1418, 1419,
	886, 1416, 1413, 1414, 1415, 1407, 1408, 1409, 1410, 1412,
	0, 0, 913, 0, 0, 1405, 1406, 0, 1423, 1424,
	1425, 0, 0, 1754, 0, 0, 0, 0, 0, 0,
	0, 1550, 0, 0, 0, 1420, 0, 869, 870, 0,
	889, 890, 891, 899, 900, 901, 0, 0, 0, 877,
	1773, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	872, 0, 903, 0, 913, 1420, 0, 896, 904, 1787,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1794,
	1795, 871, 902, 0, 1411, 0, 0, 886, 0, 0,
	0, 0, 894, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 1807, 0,
	0, 0, 0, 0, 1411, 0, 0, 1426, 0, 0,
	893, 1811, 0, 0, 0, 0, 869, 870, 0, 0,
	0, 0, 0, 1421, 0, 0, 877, 0, 0, 1108,
	0, 0, 0, 676, 0, 0, 0, 1426, 0, 872,
	0, 0, 0, 0, 896, 904, 888, 0, 0, 0,
	1013, 451, 0, 1421, 0, 0, 0, 897, 0, 902,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 0, 0, 887, 1108, 0, 0, 0,
	1108, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 893, 451, 0,
	0, 0, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 895, 0, 877, 883, 884, 885, 0,
	882, 879, 880, 881, 873, 874, 875, 876, 878, 1892,
	898, 0, 0, 888, 0, 0, 0, 1730, 0, 0,
	0, 0, 0, 0, 897, 1906, 1906, 0, 0, 0,
	0, 1417, 1418, 1419, 0, 1416, 1413, 1414, 1415, 1407,
	1408, 1409, 1410, 1412, 887, 0, 0, 0, 0, 0,
	0, 1906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1418, 1419, 0, 1416, 1413, 1414, 1415, 1407,
	1408, 1409, 1410, 1412, 1405, 1406, 0, 1423, 1424, 1425,
	895, 0, 0, 883, 884, 885, 1906, 882, 879, 880,
	881, 873, 874, 875, 876, 878, 0, 898, 0, 0,
	0, 0, 888, 0, 1447, 0, 0, 0, 0, 0,
	0, 0, 46, 869, 870, 0, 889, 890, 891, 899,
	900, 901, 1650, 0, 1420, 0, 0, 0, 1656, 892,
	0, 0, 0, 0, 0, 0, 872, 0, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1108,
	1108, 0, 0, 1108, 0, 0, 0, 871, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 451, 451, 1411, 0, 451, 0, 879, 880, 881,
	873, 874, 875, 876, 878, 0, 898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	896, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 1745, 0, 893, 0, 1764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1108, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 1780, 0, 0, 0, 0,
	897, 0, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1417, 1418, 1419, 0, 1416, 1413, 1414, 1415, 1407, 1408,
	1409, 1410, 1412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 913, 0, 883,
	884, 885, 0, 882, 879, 880, 881, 873, 874, 875,
	876, 878, 0, 898, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	1859, 0, 0, 0, 0, 0, 0, 78, 79, 284,
	80, 285, 286, 287, 288, 192, 289, 290, 291, 292,
	81, 82, 193, 194, 195, 196, 83, 197, 198, 293,
	84, 199, 200, 85, 294, 295, 201, 202, 203, 296,
	204, 297, 270, 298, 86, 87, 88, 1013, 89, 299,
	90, 91, 92, 300, 271, 93, 94, 301, 302, 303,
	304, 305, 306, 95, 96, 97, 98, 205, 99, 206,
	207, 307, 100, 308, 101, 309, 310, 311, 102, 103,
	312, 104, 313, 0, 314, 208, 105, 106, 209, 210,
	315, 316, 317, 107, 108, 211, 0, 109, 318, 110,
	319, 320, 272, 321, 111, 212, 322, 213, 323, 112,
	113, 114, 214, 215, 274, 324, 117, 325, 115, 326,
	273, 116, 216, 217, 218, 219, 327, 220, 328, 275,
	118, 276, 119, 120, 329, 330, 221, 277, 121, 278,
	331, 122, 332, 333, 123, 0, 124, 125, 126, 127,
	128, 279, 129, 130, 133, 131, 334, 132, 335, 222,
	134, 223, 135, 136, 336, 337, 338, 339, 340, 137,
	224, 280, 138, 281, 225, 139, 140, 141, 142, 341,
	226, 143, 227, 144, 342, 145, 146, 147, 228, 148,
	149, 343, 151, 152, 150, 153, 344, 154, 282, 155,
	156, 229, 157, 0, 158, 159, 160, 345, 230, 161,
	162, 346, 163, 164, 283, 165, 231, 232, 166, 347,
	172, 167, 168, 169, 171, 233, 170, 234, 348, 173,
	349, 174, 175, 350, 235, 236, 237, 351, 352, 176,
	238, 239, 353, 177, 178, 179, 180, 354, 355, 181,
	182, 183, 356, 357, 184, 185, 186, 240, 241, 358,
	359, 187, 360, 361, 362, 363, 188, 189, 190, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1538, 78, 79, 284,
	80, 285, 286, 287, 288, 192, 289, 290, 291, 292,
	81, 82, 193, 194, 195, 196, 83, 197, 198, 293,
	84, 199, 200, 85, 294, 295, 201, 202, 203, 296,
	204, 297, 270, 298, 86, 87, 88, 0, 89, 299,
	90, 91, 92, 300, 271, 93, 94, 301, 302, 303,
	304, 305, 306, 95, 96, 97, 98, 205, 99, 206,
	207, 307, 100, 308, 101, 309, 310, 311, 102, 103,
	312, 104, 313, 0, 314, 208, 105, 106, 209, 210,
	315, 316, 317, 107, 108, 211, 0, 109, 318, 110,
	319, 320, 272, 321, 111, 212, 322, 213, 323, 112,
	113, 114, 214, 215, 274, 324, 117, 325, 115, 326,
	273, 116, 216, 217, 218, 219, 327, 220, 328, 275,
	118, 276, 119, 120, 329, 330, 221, 277, 121, 278,
	331, 122, 332, 333, 123, 0, 124, 125, 126, 127,
	128, 279, 129, 130, 133, 131, 334, 132, 335, 222,
	134, 223, 135, 136, 336, 337, 338, 339, 340, 137,
	224, 280, 138, 281, 225, 139, 140, 141, 142, 341,
	226, 143, 227, 144, 342, 145, 146, 147, 228, 148,
	149, 343, 151, 152, 150, 153, 344, 154, 282, 155,
	156, 229, 157, 0, 158, 159, 160, 345, 230, 161,
	162, 346, 163, 164, 283, 165, 231, 232, 166, 347,
	172, 167, 168, 169, 171, 233, 170, 234, 348, 173,
	349, 174, 175, 350, 235, 236, 237, 351, 352, 176,
	238, 239, 353, 177, 178, 179, 180, 354, 355, 181,
	182, 183, 356, 357, 184, 185, 186, 240, 241, 358,
	359, 187, 360, 361, 362, 363, 188, 189, 190, 191,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 78, 79, 284, 80,
	285, 286, 287, 288, 192, 289, 290, 291, 292, 81,
	82, 193, 194, 195, 196, 83, 197, 198, 293, 84,
	199, 200, 85, 294, 295, 201, 202, 203, 296, 204,
	297, 270, 298, 86, 87, 88, 0, 89, 299, 90,
	91, 92, 300, 271, 93, 94, 301, 302, 303, 304,
	305, 306, 95, 96, 97, 98, 205, 99, 206, 207,
	307, 100, 308, 101, 309, 310, 311, 102, 103, 312,
	104, 313, 0, 314, 208, 105, 106, 209, 210, 315,
	316, 317, 107, 108, 211, 0, 109, 318, 110, 319,
	320, 272, 321, 111, 212, 322, 213, 323, 112, 113,
	114, 214, 215, 274, 324, 117, 325, 115, 326, 273,
	116, 216, 217, 218, 219, 327, 220, 328, 275, 118,
	276, 119, 120, 329, 330, 221, 277, 121, 278, 331,
	122, 332, 333, 123, 0, 124, 125, 126, 127, 128,
	279, 129, 130, 133, 131, 334, 132, 335, 222, 134,
	223, 135, 136, 336, 337, 338, 339, 340, 137, 224,
	280, 138, 281, 225, 139, 140, 141, 142, 341, 226,
	143, 227, 144, 342, 145, 146, 147, 228, 148, 149,
	343, 151, 152, 150, 153, 344, 154, 282, 155, 156,
	229, 157, 0, 158, 159, 160, 345, 230, 161, 162,
	346, 163, 164, 283, 165, 231, 232, 166, 347, 172,
	167, 168, 169, 171, 233, 170, 234, 348, 173, 349,
	174, 175, 350, 235, 236, 237, 351, 352, 176, 238,
	239, 353, 177, 178, 179, 180, 354, 355, 181, 182,
	183, 356, 357, 184, 185, 186, 240, 241, 358, 359,
	187, 360, 361, 362, 363, 188, 189, 190, 191, 611,
	600, 601, 598, 599, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 1176, 80, 0,
	0, 0, 0, 627, 593, 0, 0, 0, 81, 82,
	193, 642, 195, 643, 83, 644, 645, 0, 84, 199,
	200, 85, 608, 626, 646, 647, 203, 0, 638, 0,
	619, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 271, 93, 94, 0, 620, 622, 0, 621,
	623, 95, 96, 97, 98, 648, 99, 649, 650, 0,
	100, 0, 101, 0, 1177, 0, 641, 103, 0, 104,
	0, 0, 0, 592, 105, 106, 628, 629, 606, 0,
	0, 107, 108, 651, 0, 109, 0, 110, 0, 0,
	272, 0, 111, 639, 0, 213, 0, 112, 113, 114,
	635, 637, 274, 0, 117, 0, 115, 0, 273, 116,
	652, 653, 654, 655, 0, 618, 0, 275, 118, 276,
	119, 120, 0, 0, 640, 277, 121, 278, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 279,
	129, 130, 133, 131, 582, 132, 607, 636, 134, 656,
	135, 136, 0, 0, 0, 0, 0, 137, 224, 280,
	138, 281, 630, 139, 140, 141, 142, 0, 631, 143,
	227, 144, 0, 145, 146, 147, 657, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 282, 155, 156, 596,
	157, 0, 158, 159, 160, 0, 230, 161, 162, 624,
	163, 164, 283, 165, 658, 232, 166, 0, 172, 167,
	168, 169, 171, 659, 170, 632, 0, 173, 0, 174,
	175, 0, 235, 660, 661, 0, 0, 176, 633, 634,
	605, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	625, 0, 184, 185, 186, 240, 662, 1175, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 583, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	580, 1178, 0, 0, 0, 581, 0, 0, 588, 1173,
	611, 600, 601, 598, 599, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 627, 593, 0, 0, 0, 81,
	82, 193, 642, 195, 643, 83, 644, 645, 0, 84,
	199, 200, 85, 608, 626, 646, 647, 203, 0, 638,
	0, 619, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 271, 93, 94, 0, 620, 622, 0,
	621, 623, 95, 96, 97, 98, 648, 99, 649, 650,
	677, 100, 0, 101, 0, 0, 0, 641, 103, 0,
	104, 0, 0, 0, 592, 105, 106, 628, 629, 606,
	0, 0, 107, 108, 651, 0, 109, 0, 110, 0,
	0, 272, 0, 111, 639, 0, 213, 0, 112, 113,
	114, 635, 637, 274, 0, 117, 0, 115, 0, 273,
	116, 652, 653, 654, 655, 0, 618, 0, 275, 118,
	276, 119, 120, 0, 0, 640, 277, 121, 278, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	279, 129, 130, 133, 131, 582, 132, 607, 636, 134,
	656, 135, 136, 0, 0, 0, 0, 0, 137, 224,
	280, 138, 281, 630, 139, 140, 141, 142, 0, 631,
	143, 227, 144, 0, 145, 146, 147, 657, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 282, 155, 156,
	596, 157, 0, 158, 159, 160, 64, 230, 161, 162,
	624, 163, 164, 283, 165, 658, 232, 166, 0, 172,
	167, 168, 169, 171, 659, 170, 632, 0, 173, 66,
	174, 175, 0, 235, 660, 661, 0, 0, 176, 633,
	634, 605, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 625, 0, 184, 185, 186, 495, 662, 0, 0,
	187, 0, 0, 0, 62, 188, 189, 190, 191, 583,
	63, 611, 600, 601, 598, 599, 587, 0, 0, 0,
	579, 580, 0, 0, 0, 0, 581, 78, 79, 588,
	80, 0, 0, 0, 0, 627, 593, 0, 0, 0,
	81, 82, 193, 642, 195, 643, 83, 644, 645, 0,
	84, 199, 200, 85, 608, 626, 646, 647, 203, 0,
	638, 0, 619, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 271, 93, 94, 0, 620, 622,
	0, 621, 623, 95, 96, 97, 98, 648, 99, 649,
	650, 0, 100, 0, 101, 0, 0, 0, 641, 103,
	0, 104, 0, 0, 0, 592, 105, 106, 628, 629,
	606, 0, 0, 107, 108, 651, 0, 109, 0, 110,
	0, 0, 272, 0, 111, 639, 0, 213, 0, 112,
	113, 114, 635, 637, 274, 0, 117, 0, 115, 0,
	273, 116, 652, 653, 654, 655, 0, 618, 0, 275,
	118, 276, 119, 120, 0, 0, 640, 277, 121, 278,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 279, 129, 130, 133, 131, 582, 132, 607, 636,
	134, 656, 135, 136, 0, 0, 0, 0, 0, 137,
	224, 280, 138, 281, 630, 139, 140, 141, 142, 0,
	631, 143, 227, 144, 0, 145, 146, 147, 657, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 282, 155,
	156, 596, 157, 0, 158, 159, 160, 64, 230, 161,
	162, 624, 163, 164, 283, 165, 658, 232, 166, 0,
	172, 167, 168, 169, 171, 659, 170, 632, 0, 173,
	66, 174, 175, 0, 235, 660, 661, 0, 0, 176,
	633, 634, 605, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 625, 0, 184, 185, 186, 495, 662, 0,
	0, 187, 0, 0, 0, 62, 188, 189, 190, 191,
	583, 63, 611, 600, 601, 598, 599, 587, 0, 0,
	0, 579, 580, 0, 0, 0, 0, 581, 78, 79,
	588, 80, 0, 0, 0, 0, 627, 593, 0, 0,
	0, 81, 82, 193, 642, 195, 643, 83, 644, 645,
	1218, 84, 199, 200, 85, 608, 626, 646, 647, 203,
	0, 638, 0, 619, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 271, 93, 94, 0, 620,
	622, 0, 621, 623, 95, 96, 97, 98, 648, 99,
	649, 650, 0, 100, 0, 101, 0, 0, 0, 641,
	103, 0, 104, 0, 0, 0, 592, 105, 106, 628,
	629, 606, 0, 0, 107, 108, 651, 0, 109, 0,
	110, 0, 1223, 272, 0, 111, 639, 0, 213, 0,
	112, 113, 114, 635, 637, 274, 0, 117, 0, 115,
	0, 273, 116, 652, 653, 654, 655, 0, 618, 0,
	275, 118, 276, 119, 120, 0, 1219, 640, 277, 121,
	278, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 279, 129, 130, 133, 131, 582, 132, 607,
	636, 134, 656, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 280, 138, 281, 630, 139, 140, 141, 142,
	0, 631, 143, 227, 144, 0, 145, 146, 147, 657,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 282,
	155, 156, 596, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 624, 163, 164, 283, 165, 658, 232, 166,
	0, 172, 167, 168, 169, 171, 659, 170, 632, 0,
	173, 0, 174, 175, 0, 235, 660, 661, 0, 1220,
	176, 633, 634, 605, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 625, 0, 184, 185, 186, 240, 662,
	0, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 583, 0, 611, 600, 601, 598, 599, 587, 0,
	0, 0, 579, 580, 0, 0, 0, 0, 581, 78,
	79, 588, 80, 0, 0, 0, 0, 627, 593, 0,
	0, 0, 81, 82, 193, 642, 195, 643, 83, 644,
	645, 0, 84, 199, 200, 85, 608, 626, 646, 647,
	203, 0, 638, 0, 619, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 271, 93, 94, 0,
	620, 622, 0, 621, 623, 95, 96, 97, 98, 648,
	99, 649, 650, 0, 100, 0, 101, 0, 0, 0,
	641, 103, 0, 104, 0, 0, 0, 592, 105, 106,
	628, 629, 606, 0, 0, 107, 108, 651, 0, 109,
	0, 110, 0, 0, 272, 0, 111, 639, 0, 213,
	0, 112, 113, 114, 635, 637, 274, 0, 117, 0,
	115, 0, 273, 116, 652, 653, 654, 655, 0, 618,
	0, 275, 118, 276, 119, 120, 0, 0, 640, 277,
	121, 278, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 279, 129, 130, 133, 131, 582, 132,
	607, 636, 134, 656, 135, 136, 0, 0, 0, 0,
	0, 137, 224, 280, 138, 281, 630, 139, 140, 141,
	142, 0, 631, 143, 227, 144, 0, 145, 146, 147,
	657, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	282, 155, 156, 596, 157, 0, 158, 159, 160, 0,
	230, 161, 162, 624, 163, 164, 283, 165, 658, 232,
	166, 0, 172, 167, 168, 169, 171, 659, 170, 632,
	0, 173, 0, 174, 175, 0, 235, 660, 661, 0,
	0, 176, 633, 634, 605, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 625, 0, 184, 185, 186, 240,
	662, 0, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 583, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 580, 0, 0, 0, 0, 581,
	0, 0, 588, 1605, 611, 600, 601, 598, 599, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 627, 593,
	0, 0, 0, 81, 82, 193, 642, 195, 643, 83,
	644, 645, 0, 84, 199, 200, 85, 608, 626, 646,
	647, 203, 0, 638, 0, 619, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 271, 93, 94,
	0, 620, 622, 0, 621, 623, 95, 96, 97, 98,
	648, 99, 649, 650, 0, 100, 0, 101, 0, 0,
	0, 641, 103, 0, 104, 0, 0, 0, 592, 105,
	106, 628, 629, 606, 0, 0, 107, 108, 651, 0,
	109, 0, 110, 0, 0, 272, 0, 111, 639, 0,
	213, 0, 112, 113, 114, 635, 637, 274, 0, 117,
	0, 115, 0, 273, 116, 652, 653, 654, 655, 0,
	618, 0, 275, 118, 276, 119, 120, 0, 0, 640,
	277, 121, 278, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 279, 129, 130, 133, 131, 582,
	132, 607, 636, 134, 656, 135, 136, 0, 0, 0,
	0, 0, 137, 224, 280, 138, 281, 630, 139, 140,
	141, 142, 0, 631, 143, 227, 144, 0, 145, 146,
	147, 657, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 282, 155, 156, 596, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 624, 163, 164, 283, 165, 658,
	232, 166, 0, 172, 167, 168, 169, 171, 659, 170,
	632, 0, 173, 0, 174, 175, 0, 235, 660, 661,
	0, 0, 176, 633, 634, 605, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 625, 0, 184, 185, 186,
	240, 662, 0, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 580, 0, 0, 0, 0,
	581, 0, 0, 588, 1554, 611, 600, 601, 598, 599,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 627,
	593, 0, 0, 0, 81, 82, 193, 642, 195, 643,
	83, 644, 645, 0, 84, 199, 200, 85, 608, 626,
	646, 647, 203, 0, 638, 0, 619, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 271, 93,
	94, 0, 620, 622, 0, 621, 623, 95, 96, 97,
	98, 648, 99, 649, 650, 0, 100, 0, 101, 0,
	0, 0, 641, 103, 0, 104, 0, 0, 0, 592,
	105, 106, 628, 629, 606, 0, 0, 107, 108, 651,
	0, 109, 0, 110, 0, 0, 272, 0, 111, 639,
	0, 213, 0, 112, 113, 114, 635, 637, 274, 0,
	117, 0, 115, 0, 273, 116, 652, 653, 654, 655,
	0, 618, 0, 275, 118, 276, 119, 120, 0, 0,
	640, 277, 121, 278, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 279, 129, 130, 133, 131,
	582, 132, 607, 636, 134, 656, 135, 136, 0, 0,
	0, 0, 0, 137, 224, 280, 138, 281, 630, 139,
	140, 141, 142, 0, 631, 143, 227, 144, 0, 145,
	146, 147, 657, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 282, 155, 156, 596, 157, 0, 158, 159,
	160, 0, 230, 161, 162, 624, 163, 164, 283, 165,
	658, 232, 166, 0, 172, 167, 168, 169, 171, 659,
	170, 632, 0, 173, 0, 174, 175, 0, 235, 660,
	661, 0, 0, 176, 633, 634, 605, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 625, 0, 184, 185,
	186, 240, 662, 0, 0, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 580, 0, 0, 0,
	0, 581, 0, 0, 588, 1172, 611, 600, 601, 598,
	599, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	627, 593, 0, 0, 0, 81, 82, 193, 642, 195,
	643, 83, 644, 645, 0, 84, 199, 200, 85, 608,
	626, 646, 647, 203, 0, 638, 0, 619, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 271,
	93, 94, 0, 620, 622, 0, 621, 623, 95, 96,
	97, 98, 648, 99, 649, 650, 0, 100, 0, 101,
	0, 0, 0, 641, 103, 0, 104, 0, 0, 0,
	592, 105, 106, 628, 629, 606, 0, 0, 107, 108,
	651, 0, 109, 0, 110, 0, 0, 272, 0, 111,
	639, 0, 213, 0, 112, 113, 114, 635, 637, 274,
	0, 117, 0, 115, 0, 273, 116, 652, 653, 654,
	655, 0, 618, 0, 275, 118, 276, 119, 120, 0,
	0, 640, 277, 121, 278, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 279, 129, 130, 133,
	131, 582, 132, 607, 636, 134, 656, 135, 136, 0,
	0, 0, 0, 0, 137, 224, 280, 138, 281, 630,
	139, 140, 141, 142, 0, 631, 143, 227, 144, 0,
	145, 146, 147, 657, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 282, 155, 156, 596, 157, 0, 158,
	159, 160, 0, 230, 161, 162, 624, 163, 164, 283,
	165, 658, 232, 166, 0, 172, 167, 168, 169, 171,
	659, 170, 632, 0, 173, 0, 174, 175, 0, 235,
	660, 661, 0, 0, 176, 633, 634, 605, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 625, 0, 184,
	185, 186, 240, 662, 0, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 583, 0, 0, 0, 0,
	611, 600, 601, 598, 599, 587, 579, 580, 0, 0,
	0, 0, 581, 919, 1169, 588, 78, 79, 0, 80,
	0, 0, 0, 0, 627, 593, 0, 0, 0, 81,
	82, 193, 642, 195, 643, 83, 644, 645, 0, 84,
	199, 200, 85, 608, 626, 646, 647, 203, 0, 638,
	0, 619, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 271, 93, 94, 0, 620, 622, 0,
	621, 623, 95, 96, 97, 98, 648, 99, 649, 650,
	0, 100, 0, 101, 0, 0, 0, 641, 103, 0,
	104, 0, 0, 0, 592, 105, 106, 628, 629, 606,
	0, 0, 107, 108, 651, 0, 109, 0, 110, 0,
	0, 272, 0, 111, 639, 0, 213, 0, 112, 113,
	114, 635, 637, 274, 0, 117, 0, 115, 0, 273,
	116, 652, 653, 654, 655, 0, 618, 0, 275, 118,
	276, 119, 120, 0, 0, 640, 277, 121, 278, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	279, 129, 130, 133, 131, 582, 132, 607, 636, 134,
	656, 135, 136, 0, 0, 0, 0, 0, 137, 224,
	280, 138, 281, 630, 139, 140, 141, 142, 0, 631,
	143, 227, 144, 0, 145, 146, 147, 657, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 282, 155, 156,
	596, 157, 0, 158, 159, 160, 0, 230, 161, 162,
	624, 163, 164, 283, 165, 658, 232, 166, 0, 172,
	167, 168, 169, 171, 659, 170, 632, 0, 173, 0,
	174, 175, 0, 235, 660, 661, 0, 0, 176, 633,
	634, 605, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 625, 0, 184, 185, 186, 240, 662, 0, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 583,
	0, 611, 600, 601, 598, 599, 587, 0, 0, 0,
	579, 580, 577, 0, 0, 0, 581, 78, 79, 588,
	80, 0, 0, 0, 0, 627, 593, 0, 0, 0,
	81, 82, 193, 642, 195, 643, 83, 644, 645, 0,
	84, 199, 200, 85, 608, 626, 646, 647, 203, 0,
	638, 0, 619, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 271, 93, 94, 0, 620, 622,
	0, 621, 623, 95, 96, 97, 98, 648, 99, 649,
	650, 0, 100, 0, 101, 0, 0, 0, 641, 103,
	0, 104, 0, 0, 0, 592, 105, 106, 628, 629,
	606, 0, 0, 107, 108, 651, 0, 109, 0, 110,
	0, 0, 272, 0, 111, 639, 0, 213, 0, 112,
	113, 114, 635, 637, 274, 0, 117, 0, 115, 0,
	273, 116, 652, 653, 654, 655, 0, 618, 0, 275,
	118, 276, 119, 120, 0, 0, 640, 277, 121, 278,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 279, 129, 130, 133, 131, 582, 132, 607, 636,
	134, 656, 135, 136, 0, 0, 0, 0, 0, 137,
	224, 280, 138, 281, 630, 139, 140, 141, 142, 0,
	631, 143, 227, 144, 0, 145, 146, 147, 657, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 282, 155,
	156, 596, 157, 0, 158, 159, 160, 0, 230, 161,
	162, 624, 163, 164, 283, 165, 658, 232, 166, 0,
	172, 167, 168, 169, 171, 659, 170, 632, 0, 173,
	0, 174, 175, 0, 235, 660, 661, 0, 0, 176,
	633, 634, 605, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 625, 0, 184, 185, 186, 240, 662, 1559,
	0, 187, 0, 0, 0, 0, 188, 189, 190, 191,
	583, 0, 611, 600, 601, 598, 599, 587, 0, 0,
	0, 579, 580, 0, 0, 0, 0, 581, 78, 79,
	588, 80, 0, 0, 0, 0, 627, 593, 0, 0,
	0, 81, 82, 193, 642, 195, 643, 83, 644, 645,
	0, 84, 199, 200, 85, 608, 626, 646, 647, 203,
	0, 638, 0, 619, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 271, 93, 94, 0, 620,
	622, 0, 621, 623, 95, 96, 97, 98, 648, 99,
	649, 650, 677, 100, 0, 101, 0, 0, 0, 641,
	103, 0, 104, 0, 0, 0, 592, 105, 106, 628,
	629, 606, 0, 0, 107, 108, 651, 0, 109, 0,
	110, 0, 0, 272, 0, 111, 639, 0, 213, 0,
	112, 113, 114, 635, 637, 274, 0, 117, 0, 115,
	0, 273, 116, 652, 653, 654, 655, 0, 618, 0,
	275, 118, 276, 119, 120, 0, 0, 640, 277, 121,
	278, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 279, 129, 130, 133, 131, 582, 132, 607,
	636, 134, 656, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 280, 138, 281, 630, 139, 140, 141, 142,
	0, 631, 143, 227, 144, 0, 145, 146, 147, 657,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 282,
	155, 156, 596, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 624, 163, 164, 283, 165, 658, 232, 166,
	0, 172, 167, 168, 169, 171, 659, 170, 632, 0,
	173, 0, 174, 175, 0, 235, 660, 661, 0, 0,
	176, 633, 634, 605, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 625, 0, 184, 185, 186, 240, 662,
	0, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 583, 0, 611, 600, 601, 598, 599, 587, 0,
	0, 0, 579, 580, 0, 0, 0, 0, 581, 78,
	79, 588, 80, 0, 0, 0, 0, 627, 593, 0,
	0, 0, 81, 82, 193, 642, 195, 643, 83, 644,
	645, 0, 84, 199, 200, 85, 608, 626, 646, 647,
	203, 0, 638, 0, 619, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 271, 93, 94, 0,
	620, 622, 0, 621, 623, 95, 96, 97, 98, 648,
	99, 649, 650, 0, 100, 0, 101, 0, 0, 0,
	641, 103, 0, 104, 0, 0, 0, 592, 105, 106,
	628, 629, 606, 0, 0, 107, 108, 651, 0, 109,
	0, 110, 0, 1223, 272, 0, 111, 639, 0, 213,
	0, 112, 113, 114, 635, 637, 274, 0, 117, 0,
	115, 0, 273, 116, 652, 653, 654, 655, 0, 618,
	0, 275, 118, 276, 119, 120, 0, 0, 640, 277,
	121, 278, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 279, 129, 130, 133, 131, 582, 132,
	607, 636, 134, 656, 135, 136, 0, 0, 0, 0,
	0, 137, 224, 280, 138, 281, 630, 139, 140, 141,
	142, 0, 631, 143, 227, 144, 0, 145, 146, 147,
	657, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	282, 155, 156, 596, 157, 0, 158, 159, 160, 0,
	230, 161, 162, 624, 163, 164, 283, 165, 658, 232,
	166, 0, 172, 167, 168, 169, 171, 659, 170, 632,
	0, 173, 0, 174, 175, 0, 235, 660, 661, 0,
	0, 176, 633, 634, 605, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 625, 0, 184, 185, 186, 240,
	662, 0, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 583, 0, 0, 0, 0, 611, 600, 601,
	598, 599, 587, 579, 580, 0, 0, 0, 0, 581,
	0, 0, 588, 78, 79, 853, 80, 0, 0, 0,
	0, 627, 593, 0, 0, 0, 81, 82, 193, 642,
	195, 643, 83, 644, 645, 0, 84, 199, 200, 85,
	608, 626, 646, 647, 203, 0, 638, 0, 619, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	271, 93, 94, 0, 620, 622, 0, 621, 623, 95,
	96, 97, 98, 648, 99, 649, 650, 0, 100, 0,
	101, 0, 0, 0, 641, 103, 0, 104, 0, 0,
	0, 592, 105, 106, 628, 629, 606, 0, 0, 107,
	108, 651, 0, 109, 0, 110, 0, 0, 272, 0,
	111, 639, 0, 213, 0, 112, 113, 114, 635, 637,
	274, 0, 117, 0, 115, 0, 273, 116, 652, 653,
	654, 655, 0, 618, 0, 275, 118, 276, 119, 120,
	0, 0, 640, 277, 121, 278, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 279, 129, 130,
	133, 131, 582, 132, 607, 636, 134, 656, 135, 136,
	0, 0, 0, 0, 0, 137, 224, 280, 138, 281,
	630, 139, 140, 141, 142, 0, 631, 143, 227, 144,
	0, 145, 146, 147, 657, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 282, 155, 156, 596, 157, 0,
	158, 159, 160, 0, 230, 161, 162, 624, 163, 164,
	283, 165, 658, 232, 166, 0, 172, 167, 168, 169,
	171, 659, 170, 632, 0, 173, 0, 174, 175, 0,
	235, 660, 661, 0, 0, 176, 633, 634, 605, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 625, 0,
	184, 185, 186, 240, 662, 0, 0, 187, 0, 0,
	0, 0, 188, 189, 190, 191, 583, 0, 611, 600,
	601, 598, 599, 587, 0, 0, 0, 579, 580, 0,
	0, 0, 0, 581, 78, 79, 588, 80, 0, 0,
	0, 0, 627, 593, 0, 0, 0, 81, 82, 193,
	642, 195, 643, 83, 644, 645, 0, 84, 199, 200,
	85, 608, 626, 646, 647, 203, 0, 638, 0, 619,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 271, 93, 1905, 0, 620, 622, 0, 621, 623,
	95, 96, 97, 98, 648, 99, 649, 650, 0, 100,
	0, 101, 0, 0, 0, 641, 103, 0, 104, 0,
	0, 0, 592, 105, 106, 628, 629, 606, 0, 0,
	107, 108, 651, 0, 109, 0, 110, 0, 0, 272,
	0, 111, 639, 0, 213, 0, 112, 113, 114, 635,
	637, 274, 0, 117, 0, 115, 0, 273, 116, 652,
	653, 654, 655, 0, 618, 0, 275, 118, 276, 119,
	120, 0, 0, 640, 277, 121, 278, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 279, 129,
	130, 133, 131, 582, 132, 607, 636, 134, 656, 135,
	136, 0, 0, 0, 0, 0, 137, 224, 280, 138,
	281, 630, 139, 140, 141, 142, 0, 631, 143, 227,
	144, 0, 145, 146, 147, 657, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 282, 155, 156, 596, 157,
	0, 158, 159, 160, 0, 230, 161, 162, 624, 163,
	164, 283, 165, 658, 232, 166, 0, 172, 167, 168,
	169, 171, 659, 170, 632, 0, 173, 0, 174, 175,
	0, 235, 660, 661, 0, 0, 176, 633, 634, 605,
	177, 178, 1904, 180, 0, 0, 181, 182, 183, 625,
	0, 184, 185, 186, 240, 662, 0, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 583, 0, 611,
	600, 601, 598, 599, 587, 0, 0, 0, 579, 580,
	0, 0, 0, 0, 581, 78, 79, 588, 80, 0,
	0, 0, 0, 627, 593, 0, 0, 0, 81, 82,
	1903, 642, 195, 643, 83, 644, 645, 0, 84, 199,
	200, 85, 608, 626, 646, 647, 203, 0, 638, 0,
	619, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 271, 93, 1905, 0, 620, 622, 0, 621,
	623, 95, 96, 97, 98, 648, 99, 649, 650, 0,
	100, 0, 101, 0, 0, 0, 641, 103, 0, 104,
	0, 0, 0, 592, 105, 106, 628, 629, 606, 0,
	0, 107, 108, 651, 0, 109, 0, 110, 0, 0,
	272, 0, 111, 639, 0, 213, 0, 112, 113, 114,
	635, 637, 274, 0, 117, 0, 115, 0, 273, 116,
	652, 653, 654, 655, 0, 618, 0, 275, 118, 276,
	119, 120, 0, 0, 640, 277, 121, 278, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 279,
	129, 130, 133, 131, 582, 132, 607, 636, 134, 656,
	135, 136, 0, 0, 0, 0, 0, 137, 224, 280,
	138, 281, 630, 139, 140, 141, 142, 0, 631, 143,
	227, 144, 0, 145, 146, 147, 657, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 282, 155, 156, 596,
	157, 0, 158, 159, 160, 0, 230, 161, 162, 624,
	163, 164, 283, 165, 658, 232, 166, 0, 172, 167,
	168, 169, 171, 659, 170, 632, 0, 173, 0, 174,
	175, 0, 235, 660, 661, 0, 0, 176, 633, 634,
	605, 177, 178, 1904, 180, 0, 0, 181, 182, 183,
	625, 0, 184, 185, 186, 240, 662, 0, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 583, 0,
	611, 600, 601, 598, 599, 587, 0, 0, 0, 579,
	580, 0, 0, 0, 0, 581, 78, 79, 588, 80,
	0, 0, 0, 0, 627, 593, 0, 0, 0, 81,
	82, 193, 642, 195, 643, 83, 644, 645, 0, 84,
	199, 200, 85, 608, 626, 646, 647, 203, 0, 638,
	0, 619, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 271, 93, 94, 0, 620, 622, 0,
	621, 623, 95, 96, 97, 98, 648, 99, 649, 650,
	0, 100, 0, 101, 0, 0, 0, 641, 103, 0,
	104, 0, 0, 0, 592, 105, 106, 628, 629, 606,
	0, 0, 107, 108, 651, 0, 109, 0, 110, 0,
	0, 272, 0, 111, 639, 0, 213, 0, 112, 113,
	114, 635, 637, 274, 0, 117, 0, 115, 0, 273,
	116, 652, 653, 654, 655, 0, 618, 0, 275, 118,
	276, 119, 120, 0, 0, 640, 277, 121, 278, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	279, 129, 130, 133, 131, 582, 132, 607, 636, 134,
	656, 135, 136, 0, 0, 0, 0, 0, 137, 224,
	280, 138, 281, 630, 139, 140, 141, 142, 0, 631,
	143, 227, 144, 0, 145, 146, 147, 657, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 282, 155, 156,
	596, 157, 0, 158, 159, 160, 0, 230, 161, 162,
	624, 163, 164, 283, 165, 658, 232, 166, 0, 172,
	167, 168, 169, 171, 659, 170, 632, 0, 173, 0,
	174, 175, 0, 235, 660, 661, 0, 0, 176, 633,
	634, 605, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 625, 0, 184, 185, 186, 240, 662, 0, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 583,
	0, 1195, 600, 601, 598, 599, 587, 0, 0, 0,
	579, 580, 0, 0, 0, 0, 581, 78, 79, 588,
	80, 0, 0, 0, 0, 627, 593, 0, 0, 0,
	81, 82, 193, 642, 195, 643, 83, 644, 645, 0,
	84, 199, 200, 85, 608, 626, 646, 647, 203, 0,
	638, 0, 619, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 271, 93, 94, 0, 620, 622,
	0, 621, 623, 95, 96, 97, 98, 648, 1198, 649,
	650, 0, 100, 0, 101, 0, 0, 0, 641, 103,
	0, 104, 0, 0, 0, 592, 105, 106, 628, 629,
	606, 0, 0, 107, 108, 651, 0, 109, 0, 110,
	0, 0, 272, 0, 111, 639, 0, 213, 0, 112,
	113, 1199, 635, 637, 274, 0, 117, 0, 115, 0,
	273, 116, 652, 653, 654, 655, 0, 618, 0, 275,
	118, 276, 119, 120, 0, 0, 640, 277, 121, 278,
	0, 122, 0, 0, 123, 0, 124, 1200, 1197, 127,
	128, 279, 129, 130, 133, 131, 582, 132, 607, 636,
	134, 656, 135, 136, 0, 0, 0, 0, 0, 137,
	224, 280, 138, 281, 630, 139, 140, 141, 142, 0,
	631, 143, 227, 144, 0, 145, 146, 147, 657, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 282, 155,
	156, 596, 157, 0, 158, 159, 1201, 0, 230, 161,
	162, 624, 163, 164, 283, 165, 658, 232, 166, 0,
	172, 167, 168, 169, 171, 659, 170, 632, 0, 173,
	0, 174, 175, 0, 235, 660, 661, 0, 0, 176,
	633, 634, 605, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 625, 0, 184, 185, 186, 240, 662, 0,
	0, 187, 0, 0, 0, 0, 188, 189, 1196, 191,
	583, 0, 611, 600, 601, 598, 599, 587, 0, 0,
	0, 579, 580, 0, 0, 0, 0, 581, 78, 79,
	588, 80, 0, 0, 0, 0, 627, 593, 0, 0,
	0, 81, 82, 193, 642, 195, 643, 83, 644, 645,
	0, 84, 199, 200, 85, 608, 626, 646, 647, 203,
	0, 638, 0, 619, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 271, 93, 94, 0, 620,
	622, 0, 621, 623, 95, 96, 97, 98, 648, 99,
	649, 650, 0, 100, 0, 101, 0, 0, 0, 641,
	103, 0, 104, 0, 0, 0, 592, 105, 106, 628,
	629, 606, 0, 0, 107, 108, 651, 0, 109, 0,
	110, 0, 0, 272, 0, 111, 639, 0, 213, 0,
	112, 113, 114, 635, 637, 274, 0, 117, 0, 115,
	0, 273, 116, 652, 653, 654, 655, 0, 618, 0,
	275, 118, 276, 119, 120, 0, 0, 640, 277, 121,
	278, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 279, 129, 130, 133, 131, 0, 132, 607,
	636, 134, 656, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 280, 138, 281, 630, 139, 140, 141, 142,
	0, 631, 143, 227, 144, 0, 145, 146, 147, 657,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 282,
	155, 156, 1213, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 624, 163, 164, 283, 165, 658, 232, 166,
	0, 172, 167, 168, 169, 171, 659, 170, 632, 0,
	173, 0, 174, 175, 0, 235, 660, 661, 0, 0,
	176, 633, 634, 605, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 625, 0, 184, 185, 186, 240, 662,
	0, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 611, 600, 601, 598, 599, 587, 0,
	0, 0, 1209, 1210, 0, 0, 0, 0, 1211, 78,
	79, 1212, 80, 0, 0, 0, 0, 627, 593, 0,
	0, 0, 81, 82, 0, 642, 195, 643, 83, 644,
	645, 0, 84, 199, 200, 85, 608, 626, 646, 647,
	203, 0, 638, 0, 619, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 271, 93, 1905, 0,
	620, 622, 0, 621, 623, 95, 96, 97, 98, 648,
	99, 649, 650, 0, 100, 0, 101, 0, 0, 0,
	641, 103, 0, 104, 0, 0, 0, 592, 105, 106,
	628, 629, 606, 0, 0, 107, 108, 651, 0, 109,
	0, 110, 0, 0, 272, 0, 111, 639, 0, 213,
	0, 112, 113, 114, 635, 637, 0, 0, 117, 0,
	115, 0, 273, 116, 652, 653, 654, 655, 0, 618,
	0, 0, 118, 276, 119, 120, 0, 0, 640, 277,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 279, 129, 130, 133, 131, 582, 132,
	607, 636, 134, 656, 135, 136, 0, 0, 0, 0,
	0, 137, 224, 280, 138, 281, 630, 139, 140, 141,
	142, 0, 631, 143, 227, 144, 0, 145, 146, 147,
	657, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	282, 155, 156, 596, 157, 0, 158, 159, 160, 0,
	230, 161, 162, 624, 163, 164, 0, 165, 658, 232,
	166, 0, 172, 167, 168, 169, 171, 659, 170, 632,
	0, 173, 0, 174, 175, 0, 235, 660, 661, 0,
	0, 176, 633, 634, 605, 177, 178, 1904, 180, 0,
	0, 181, 182, 183, 625, 0, 184, 185, 186, 240,
	662, 0, 0, 187, 0, 0, 0, 0, 188, 189,
	190, 191, 0, 0, 611, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 580, 0, 0, 0, 0, 581,
	78, 79, 588, 80, 0, 0, 0, 0, 627, 0,
	0, 0, 0, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 626, 201,
	202, 203, 0, 638, 0, 619, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 271, 93, 94,
	0, 620, 622, 0, 621, 623, 95, 96, 97, 98,
	205, 99, 206, 207, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 628, 629, 0, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 272, 0, 111, 639, 0,
	213, 0, 112, 113, 114, 635, 637, 274, 0, 117,
	0, 115, 0, 273, 116, 216, 217, 218, 219, 0,
	220, 0, 275, 118, 276, 119, 120, 0, 0, 640,
	277, 121, 278, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 279, 129, 130, 133, 131, 0,
	132, 0, 636, 134, 223, 135, 136, 0, 0, 0,
	0, 0, 137, 224, 280, 138, 281, 630, 139, 140,
	141, 142, 0, 631, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 282, 155, 156, 229, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 624, 163, 164, 283, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	632, 0, 173, 0, 174, 175, 0, 235, 236, 237,
	0, 0, 176, 633, 634, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 625, 0, 184, 185, 186,
	240, 241, 0, 0, 187, 491, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 192,
	0, 0, 0, 1672, 81, 82, 193, 194, 195, 196,
	83, 197, 198, 0, 84, 199, 200, 85, 0, 0,
	201, 202, 203, 0, 204, 0, 270, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 271, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 205, 99, 206, 207, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 208,
	105, 106, 209, 210, 0, 0, 0, 107, 108, 211,
	0, 109, 0, 110, 0, 0, 272, 0, 111, 212,
	0, 213, 0, 112, 113, 114, 214, 215, 274, 0,
	117, 0, 115, 0, 273, 116, 216, 217, 218, 219,
	0, 220, 0, 275, 118, 276, 119, 120, 0, 0,
	221, 277, 121, 278, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 279, 129, 130, 133, 131,
	0, 132, 0, 222, 134, 223, 135, 136, 0, 0,
	0, 0, 0, 137, 224, 280, 138, 281, 225, 139,
	140, 141, 142, 0, 226, 143, 227, 144, 0, 145,
	146, 147, 228, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 282, 155, 156, 229, 157, 0, 158, 159,
	160, 64, 230, 161, 162, 0, 163, 164, 283, 165,
	231, 232, 166, 0, 172, 167, 168, 169, 171, 233,
	170, 234, 0, 173, 66, 174, 175, 0, 235, 236,
	237, 0, 0, 176, 238, 239, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 495, 241, 0, 0, 187, 0, 0, 0, 62,
	188, 189, 190, 191, 0, 63, 491, 802, 0, 803,
	798, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 61, 80, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 81, 82, 193, 194, 195,
	196, 83, 197, 198, 0, 84, 199, 200, 85, 0,
	0, 201, 202, 203, 0, 204, 0, 270, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 271,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 205, 99, 206, 207, 806, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	208, 105, 106, 209, 210, 795, 0, 0, 107, 108,
	211, 0, 109, 0, 110, 0, 0, 272, 0, 111,
	212, 0, 213, 0, 112, 113, 114, 214, 215, 274,
	0, 117, 0, 115, 0, 273, 116, 216, 217, 218,
	219, 0, 220, 0, 275, 118, 276, 119, 120, 0,
	0, 221, 277, 121, 278, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 279, 129, 130, 133,
	131, 0, 132, 0, 222, 134, 223, 135, 136, 0,
	796, 0, 0, 0, 137, 224, 280, 138, 281, 225,
	139, 140, 141, 142, 0, 226, 143, 227, 144, 0,
	145, 146, 147, 228, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 282, 155, 156, 229, 157, 0, 158,
	159, 160, 0, 230, 161, 162, 0, 163, 164, 283,
	165, 231, 232, 166, 0, 172, 167, 168, 169, 171,
	233, 170, 234, 0, 173, 0, 174, 175, 0, 235,
	236, 237, 0, 0, 176, 238, 239, 794, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 240, 241, 491, 802, 187, 803, 798, 793,
	0, 188, 189, 190, 191, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 804, 799, 192, 0,
	0, 0, 0, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 0, 201,
	202, 203, 0, 204, 0, 270, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 271, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	205, 99, 206, 207, 789, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 209, 210, 795, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 272, 0, 111, 212, 0,
	213, 0, 112, 113, 114, 214, 215, 274, 0, 117,
	0, 115, 0, 273, 116, 216, 217, 218, 219, 0,
	220, 0, 275, 118, 276, 119, 120, 0, 0, 221,
	277, 121, 278, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 279, 129, 130, 133, 131, 0,
	132, 0, 222, 134, 223, 135, 136, 0, 796, 0,
	0, 0, 137, 224, 280, 138, 281, 225, 139, 140,
	141, 142, 0, 226, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 282, 155, 156, 229, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 0, 163, 164, 283, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	234, 0, 173, 0, 174, 175, 0, 235, 236, 237,
	0, 0, 176, 238, 239, 794, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	240, 241, 491, 802, 187, 803, 798, 793, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 804, 799, 192, 0, 0, 0,
	0, 81, 82, 193, 194, 195, 196, 83, 197, 198,
	0, 84, 199, 200, 85, 0, 0, 201, 202, 203,
	0, 204, 0, 270, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 271, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 205, 99,
	206, 207, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 208, 105, 106, 209,
	210, 795, 0, 0, 107, 108, 211, 0, 109, 0,
	110, 0, 0, 272, 0, 111, 212, 0, 213, 0,
	112, 113, 114, 214, 215, 274, 0, 117, 0, 115,
	0, 273, 116, 216, 217, 218, 219, 0, 220, 0,
	275, 118, 276, 119, 120, 0, 0, 221, 277, 121,
	278, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 279, 129, 130, 133, 131, 0, 132, 0,
	222, 134, 223, 135, 136, 0, 796, 0, 0, 0,
	137, 224, 280, 138, 281, 225, 139, 140, 141, 142,
	0, 226, 143, 227, 144, 0, 145, 146, 147, 228,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 282,
	155, 156, 229, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 0, 163, 164, 283, 165, 231, 232, 166,
	0, 172, 167, 168, 169, 171, 233, 170, 234, 0,
	173, 0, 174, 175, 0, 235, 236, 237, 0, 0,
	176, 238, 239, 794, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 240, 241,
	75, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 804, 799, 192, 0, 0, 0, 0, 81,
	82, 193, 194, 195, 196, 83, 197, 198, 0, 84,
	199, 200, 85, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 205, 99, 206, 207,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 208, 105, 106, 209, 210, 0,
	0, 0, 107, 108, 211, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 212, 0, 213, 0, 112, 113,
	114, 214, 215, 0, 0, 117, 0, 115, 0, 0,
	116, 216, 217, 218, 219, 0, 220, 0, 0, 118,
	0, 119, 120, 0, 0, 221, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 222, 134,
	223, 135, 136, 0, 0, 452, 0, 0, 137, 224,
	0, 138, 0, 225, 139, 140, 141, 142, 0, 226,
	143, 227, 144, 0, 145, 146, 147, 228, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	229, 157, 0, 158, 159, 160, 64, 230, 161, 162,
	0, 163, 164, 0, 165, 231, 232, 166, 0, 172,
	167, 168, 169, 171, 233, 170, 234, 0, 173, 66,
	174, 175, 0, 235, 236, 237, 0, 0, 176, 238,
	239, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 495, 241, 0, 0,
	187, 75, 0, 0, 62, 188, 189, 190, 191, 0,
	63, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 0, 0, 192, 0, 0, 0, 1110,
	81, 82, 193, 194, 195, 196, 83, 197, 198, 0,
	84, 199, 200, 85, 0, 0, 201, 202, 203, 0,
	204, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 205, 99, 206,
	207, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 208, 105, 106, 209, 210,
	0, 0, 0, 107, 108, 211, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 212, 0, 213, 0, 112,
	113, 114, 214, 215, 0, 0, 117, 0, 115, 0,
	0, 116, 216, 217, 218, 219, 0, 220, 0, 0,
	118, 0, 119, 120, 0, 0, 221, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 222,
	134, 223, 135, 136, 0, 0, 0, 0, 0, 137,
	224, 0, 138, 0, 225, 139, 140, 141, 142, 0,
	226, 143, 227, 144, 0, 145, 146, 147, 228, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 229, 157, 0, 158, 159, 160, 64, 230, 161,
	162, 0, 163, 164, 0, 165, 231, 232, 166, 0,
	172, 167, 168, 169, 171, 233, 170, 234, 0, 173,
	66, 174, 175, 0, 235, 236, 237, 0, 0, 176,
	238, 239, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 0, 184, 185, 186, 495, 241, 0,
	0, 187, 75, 0, 0, 62, 188, 189, 190, 191,
	0, 63, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 192, 0, 1348, 0,
	61, 81, 82, 193, 194, 195, 196, 83, 197, 198,
	0, 84, 199, 200, 85, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 205, 99,
	206, 207, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 208, 105, 106, 209,
	210, 0, 0, 0, 107, 108, 211, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 212, 0, 213, 0,
	112, 113, 114, 214, 215, 0, 0, 117, 0, 115,
	0, 0, 116, 216, 217, 218, 219, 0, 220, 0,
	0, 118, 0, 119, 120, 0, 0, 221, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	222, 134, 223, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 0, 138, 0, 225, 139, 140, 141, 142,
	0, 226, 143, 227, 144, 0, 145, 146, 147, 228,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 229, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 0, 163, 164, 0, 165, 231, 232, 166,
	0, 172, 167, 168, 169, 171, 233, 170, 234, 0,
	173, 0, 174, 175, 0, 235, 236, 237, 0, 0,
	176, 238, 239, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 240, 241,
	0, 0, 187, 0, 75, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 192, 0,
	0, 0, 569, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	205, 99, 206, 207, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 209, 210, 0, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 212, 0,
	213, 0, 112, 113, 114, 214, 215, 0, 0, 117,
	0, 115, 0, 0, 116, 216, 217, 218, 219, 0,
	220, 0, 0, 118, 0, 119, 120, 0, 0, 221,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 222, 134, 223, 135, 136, 0, 0, 452,
	0, 0, 137, 224, 0, 138, 0, 225, 139, 140,
	141, 142, 0, 226, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 229, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 0, 163, 164, 0, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	234, 0, 173, 0, 174, 175, 0, 235, 236, 237,
	0, 0, 176, 238, 239, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	240, 241, 0, 0, 187, 75, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 192,
	0, 0, 0, 1110, 81, 82, 193, 194, 195, 196,
	83, 197, 198, 0, 84, 199, 200, 85, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 205, 99, 206, 207, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 208,
	105, 106, 209, 210, 0, 0, 0, 107, 108, 211,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 212,
	0, 213, 0, 112, 113, 114, 214, 215, 0, 0,
	117, 0, 115, 0, 0, 116, 216, 217, 218, 219,
	0, 220, 0, 0, 118, 0, 119, 120, 0, 0,
	221, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 222, 134, 223, 135, 136, 0, 0,
	0, 0, 0, 137, 224, 0, 138, 0, 225, 139,
	140, 141, 142, 0, 226, 143, 227, 144, 0, 145,
	146, 147, 228, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 229, 157, 0, 158, 159,
	160, 0, 230, 161, 162, 0, 163, 164, 0, 165,
	231, 232, 166, 0, 172, 167, 168, 169, 171, 233,
	170, 234, 0, 173, 0, 174, 175, 0, 235, 236,
	237, 0, 0, 176, 238, 239, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 240, 241, 0, 0, 187, 0, 75, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 192, 0, 0, 0, 695, 81, 82, 193, 194,
	195, 196, 83, 197, 198, 0, 84, 199, 200, 85,
	0, 0, 201, 202, 203, 0, 204, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 205, 99, 206, 207, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 208, 105, 106, 209, 210, 0, 0, 0, 107,
	108, 211, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 212, 0, 213, 0, 112, 113, 114, 214, 215,
	0, 0, 117, 0, 115, 0, 0, 116, 216, 217,
	218, 219, 0, 220, 0, 0, 118, 0, 119, 120,
	0, 0, 221, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 222, 134, 223, 135, 136,
	0, 0, 0, 0, 0, 137, 224, 0, 138, 0,
	225, 139, 140, 141, 142, 0, 226, 143, 227, 144,
	0, 145, 146, 147, 228, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 229, 157, 0,
	158, 159, 160, 0, 230, 161, 162, 0, 163, 164,
	0, 165, 231, 232, 166, 0, 172, 167, 168, 169,
	171, 233, 170, 234, 0, 173, 0, 174, 175, 0,
	235, 236, 237, 0, 0, 176, 238, 239, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 0,
	184, 185, 186, 240, 241, 0, 0, 187, 75, 0,
	0, 0, 188, 189, 190, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 192, 0, 0, 0, 1014, 81, 82, 193,
	194, 195, 196, 83, 197, 198, 0, 84, 199, 200,
	85, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 205, 99, 206, 207, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 208, 105, 106, 209, 210, 0, 0, 0,
	107, 108, 211, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 212, 0, 213, 0, 112, 113, 114, 214,
	215, 0, 0, 117, 0, 115, 0, 0, 116, 216,
	217, 218, 219, 0, 220, 0, 0, 118, 0, 119,
	120, 0, 0, 221, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 222, 134, 223, 135,
	136, 0, 0, 0, 0, 0, 137, 224, 0, 138,
	0, 225, 139, 140, 141, 142, 0, 226, 143, 227,
	144, 0, 145, 146, 147, 228, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 229, 157,
	0, 158, 159, 160, 0, 230, 161, 162, 0, 163,
	164, 0, 165, 231, 232, 166, 0, 172, 167, 168,
	169, 171, 233, 170, 234, 0, 173, 0, 174, 175,
	0, 235, 236, 237, 0, 0, 176, 238, 239, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 240, 241, 0, 0, 187, 75,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 0, 192, 0, 0, 0, 1569, 81, 82,
	193, 194, 195, 196, 83, 197, 198, 0, 84, 199,
	200, 85, 0, 0, 201, 202, 203, 0, 204, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 205, 99, 206, 207, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 208, 105, 106, 209, 210, 0, 0,
	0, 107, 108, 211, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 212, 0, 213, 0, 112, 113, 114,
	214, 215, 0, 0, 117, 0, 115, 0, 0, 116,
	216, 217, 218, 219, 0, 220, 0, 0, 118, 0,
	119, 120, 0, 0, 221, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 222, 134, 223,
	135, 136, 0, 0, 0, 0, 0, 137, 224, 0,
	138, 0, 225, 139, 140, 141, 142, 0, 226, 143,
	227, 144, 0, 145, 146, 147, 228, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 229,
	157, 0, 158, 159, 160, 0, 230, 161, 162, 0,
	163, 164, 0, 165, 231, 232, 166, 0, 172, 167,
	168, 169, 171, 233, 170, 234, 0, 173, 0, 174,
	175, 0, 235, 236, 237, 0, 0, 176, 238, 239,
	0, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	0, 0, 184, 185, 186, 240, 241, 0, 0, 187,
	0, 0, 0, 0, 188, 189, 190, 191, 611, 600,
	601, 598, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 673, 0,
	0, 0, 192, 0, 0, 0, 0, 81, 82, 193,
	642, 195, 643, 83, 644, 645, 0, 84, 199, 200,
	85, 0, 0, 646, 647, 203, 0, 204, 0, 270,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 271, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 648, 99, 649, 650, 0, 100,
	0, 101, 0, 0, 0, 641, 103, 0, 104, 0,
	0, 0, 208, 105, 106, 209, 210, 606, 0, 0,
	107, 108, 651, 0, 109, 0, 110, 0, 0, 272,
	0, 111, 212, 0, 213, 0, 112, 113, 114, 214,
	215, 274, 0, 117, 0, 115, 0, 273, 116, 652,
	653, 654, 655, 0, 618, 0, 275, 118, 276, 119,
	120, 0, 0, 221, 277, 121, 278, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 279, 129,
	130, 133, 131, 0, 132, 607, 222, 134, 656, 135,
	136, 0, 0, 0, 0, 0, 137, 224, 280, 138,
	281, 225, 139, 140, 141, 142, 0, 226, 143, 227,
	144, 0, 145, 146, 147, 657, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 282, 155, 156, 229, 157,
	0, 158, 159, 160, 0, 230, 161, 162, 0, 163,
	164, 283, 165, 658, 232, 166, 0, 172, 167, 168,
	169, 171, 659, 170, 234, 0, 173, 0, 174, 175,
	0, 235, 660, 661, 0, 0, 176, 238, 239, 605,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 240, 662, 75, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 81, 82, 193, 194, 195,
	196, 83, 197, 198, 0, 84, 199, 200, 85, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	773, 98, 205, 99, 206, 207, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	208, 105, 106, 209, 210, 0, 0, 0, 107, 108,
	211, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	212, 0, 213, 0, 112, 113, 114, 214, 215, 0,
	0, 117, 0, 115, 0, 0, 116, 216, 217, 218,
	219, 0, 220, 0, 0, 118, 0, 119, 120, 0,
	0, 221, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 222, 134, 223, 135, 136, 0,
	0, 0, 0, 0, 137, 224, 0, 138, 0, 225,
	139, 140, 141, 142, 0, 226, 143, 227, 144, 0,
	145, 146, 147, 228, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 229, 157, 0, 158,
	159, 160, 0, 230, 161, 162, 0, 163, 164, 0,
	165, 231, 232, 166, 0, 172, 167, 168, 169, 171,
	233, 170, 234, 0, 173, 772, 174, 175, 0, 235,
	236, 237, 0, 0, 176, 238, 239, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 240, 241, 0, 75, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 776, 192,
	0, 0, 0, 0, 81, 82, 193, 194, 195, 196,
	83, 197, 198, 0, 84, 199, 200, 85, 0, 0,
	201, 202, 203, 0, 204, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 205, 99, 206, 207, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 208,
	105, 106, 209, 210, 0, 0, 0, 107, 108, 211,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 212,
	0, 213, 0, 112, 113, 114, 214, 215, 0, 0,
	117, 0, 115, 0, 0, 116, 216, 217, 218, 219,
	0, 220, 0, 0, 118, 0, 119, 120, 0, 0,
	221, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 222, 134, 223, 135, 136, 0, 0,
	0, 0, 0, 137, 224, 0, 138, 0, 225, 139,
	140, 141, 142, 0, 226, 143, 227, 144, 0, 145,
	146, 147, 228, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 229, 157, 0, 158, 159,
	160, 0, 230, 161, 162, 0, 163, 164, 0, 165,
	231, 232, 166, 0, 172, 167, 168, 169, 171, 233,
	170, 234, 0, 173, 0, 174, 175, 0, 235, 236,
	237, 0, 0, 176, 238, 239, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 0, 184, 185,
	186, 240, 241, 0, 491, 187, 0, 0, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 776, 192, 0,
	0, 0, 0, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 0, 201,
	202, 203, 0, 204, 0, 270, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 271, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	205, 99, 206, 207, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 209, 210, 0, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 272, 0, 111, 212, 0,
	213, 0, 112, 113, 114, 214, 215, 274, 0, 117,
	0, 115, 0, 273, 116, 216, 217, 218, 219, 0,
	220, 0, 275, 118, 276, 119, 120, 0, 0, 221,
	277, 121, 278, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 279, 129, 130, 133, 131, 0,
	132, 0, 222, 134, 223, 135, 136, 0, 0, 0,
	0, 0, 137, 224, 280, 138, 281, 225, 139, 140,
	141, 142, 0, 226, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 282, 155, 156, 229, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 0, 163, 164, 283, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	234, 0, 173, 0, 174, 175, 0, 235, 236, 237,
	0, 0, 176, 238, 239, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	240, 241, 75, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 81, 82, 193, 194, 195, 196, 83, 197, 198,
	0, 84, 199, 200, 85, 0, 0, 201, 202, 203,
	978, 204, 0, 0, 0, 86, 87, 88, 0, 89,
	976, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 205, 99,
	206, 207, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 208, 105, 106, 209,
	210, 0, 1083, 0, 107, 108, 211, 0, 109, 0,
	110, 981, 0, 0, 0, 111, 212, 0, 213, 0,
	112, 113, 114, 214, 215, 0, 0, 117, 1081, 115,
	0, 0, 116, 216, 217, 218, 219, 0, 220, 0,
	0, 118, 0, 119, 120, 0, 0, 221, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	222, 134, 223, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 0, 138, 0, 225, 139, 140, 141, 142,
	0, 226, 143, 227, 144, 980, 145, 146, 147, 228,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 229, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 0, 163, 164, 0, 165, 231, 232, 166,
	0, 172, 167, 168, 169, 171, 233, 170, 234, 0,
	173, 0, 174, 175, 0, 235, 236, 237, 0, 0,
	176, 238, 239, 0, 177, 178, 179, 180, 0, 1082,
	181, 182, 183, 0, 0, 184, 185, 186, 240, 241,
	75, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 81,
	82, 193, 194, 195, 196, 83, 197, 198, 0, 84,
	199, 200, 85, 0, 0, 201, 202, 203, 978, 204,
	0, 0, 973, 86, 87, 88, 0, 89, 976, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 205, 99, 206, 207,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 208, 105, 106, 209, 210, 0,
	0, 0, 107, 108, 211, 0, 109, 0, 110, 981,
	0, 0, 0, 111, 212, 0, 213, 0, 112, 113,
	114, 972, 215, 0, 0, 117, 0, 115, 0, 0,
	116, 216, 217, 218, 219, 0, 220, 0, 0, 118,
	0, 119, 120, 0, 0, 221, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 222, 134,
	223, 135, 136, 0, 0, 0, 0, 0, 137, 224,
	0, 138, 0, 225, 139, 140, 141, 142, 0, 226,
	143, 227, 144, 980, 145, 146, 147, 228, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	229, 157, 0, 158, 159, 160, 0, 230, 161, 162,
	0, 163, 164, 0, 165, 231, 232, 166, 0, 172,
	167, 168, 169, 171, 233, 170, 234, 0, 173, 0,
	174, 175, 0, 235, 236, 237, 0, 0, 176, 238,
	239, 0, 177, 178, 179, 180, 0, 979, 181, 182,
	183, 0, 0, 184, 185, 186, 240, 241, 75, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 192, 0, 1348, 0, 0, 81, 82, 193,
	194, 195, 196, 83, 197, 198, 0, 84, 199, 200,
	85, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 205, 99, 206, 207, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 208, 105, 106, 209, 210, 0, 0, 0,
	107, 108, 211, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 212, 0, 213, 0, 112, 113, 114, 214,
	215, 0, 0, 117, 0, 115, 0, 0, 116, 216,
	217, 218, 219, 0, 220, 0, 0, 118, 0, 119,
	120, 0, 0, 221, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 222, 134, 223, 135,
	136, 0, 0, 0, 0, 0, 137, 224, 0, 138,
	0, 225, 139, 140, 141, 142, 0, 226, 143, 227,
	144, 0, 145, 146, 147, 228, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 229, 157,
	0, 158, 159, 160, 0, 230, 161, 162, 0, 163,
	164, 0, 165, 231, 232, 166, 0, 172, 167, 168,
	169, 171, 233, 170, 234, 0, 173, 0, 174, 175,
	0, 235, 236, 237, 0, 0, 176, 238, 239, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 240, 241, 75, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 81, 82, 193, 194, 195,
	196, 83, 197, 198, 0, 84, 199, 200, 85, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 205, 99, 206, 207, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	208, 105, 106, 209, 210, 0, 0, 0, 107, 108,
	211, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	212, 0, 213, 0, 112, 113, 114, 214, 215, 0,
	0, 117, 0, 115, 0, 0, 116, 216, 217, 218,
	219, 0, 220, 0, 0, 118, 0, 119, 120, 0,
	0, 221, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 222, 134, 223, 135, 136, 0,
	0, 452, 0, 0, 137, 224, 0, 138, 0, 225,
	139, 140, 141, 142, 0, 226, 143, 227, 144, 0,
	145, 146, 147, 228, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 229, 157, 0, 158,
	159, 160, 0, 230, 161, 162, 0, 163, 164, 0,
	165, 231, 232, 166, 0, 172, 167, 168, 169, 171,
	233, 170, 234, 0, 173, 0, 174, 175, 0, 235,
	236, 237, 0, 0, 176, 238, 239, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 240, 241, 75, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	205, 99, 206, 207, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 209, 210, 0, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 212, 0,
	213, 0, 112, 113, 114, 723, 215, 0, 0, 117,
	0, 115, 0, 0, 116, 216, 217, 218, 219, 0,
	220, 0, 0, 118, 0, 119, 120, 0, 0, 221,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 222, 134, 223, 135, 136, 0, 0, 452,
	0, 0, 137, 224, 0, 138, 0, 225, 139, 140,
	141, 142, 0, 226, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 229, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 0, 163, 164, 0, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	234, 0, 173, 0, 174, 175, 0, 235, 236, 237,
	0, 0, 176, 238, 239, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	240, 241, 75, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 78, 79,
	503, 80, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 81, 82, 193, 194, 195, 196, 83, 197, 198,
	0, 84, 199, 200, 85, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 205, 99,
	206, 207, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 208, 105, 106, 209,
	210, 0, 0, 0, 107, 108, 211, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 212, 0, 213, 0,
	112, 113, 114, 214, 215, 0, 0, 117, 0, 115,
	0, 0, 116, 216, 217, 218, 219, 0, 220, 0,
	0, 118, 0, 119, 120, 0, 0, 221, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	222, 134, 223, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 0, 138, 0, 225, 139, 140, 141, 142,
	0, 226, 143, 227, 144, 0, 145, 146, 147, 228,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 229, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 0, 163, 164, 0, 165, 231, 232, 166,
	0, 172, 167, 168, 169, 171, 233, 170, 234, 0,
	173, 0, 174, 175, 0, 235, 236, 237, 0, 0,
	176, 238, 239, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 240, 241,
	75, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 81,
	82, 193, 194, 195, 196, 83, 197, 198, 0, 84,
	199, 200, 85, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 205, 99, 206, 207,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 208, 105, 106, 209, 210, 0,
	0, 0, 107, 108, 211, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 212, 0, 213, 0, 112, 113,
	114, 464, 215, 0, 0, 117, 0, 115, 0, 0,
	116, 216, 217, 218, 219, 0, 220, 0, 0, 118,
	0, 119, 120, 0, 0, 221, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 222, 134,
	223, 135, 136, 0, 0, 452, 0, 0, 137, 224,
	0, 138, 0, 225, 139, 140, 141, 142, 0, 226,
	143, 227, 144, 0, 145, 146, 147, 228, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	229, 157, 0, 158, 159, 160, 0, 230, 161, 162,
	0, 163, 164, 0, 165, 231, 232, 166, 0, 172,
	167, 168, 169, 171, 233, 170, 234, 0, 173, 0,
	174, 175, 0, 235, 236, 237, 0, 0, 176, 238,
	239, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 240, 241, 75, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 81, 82, 193,
	194, 195, 196, 83, 197, 198, 0, 84, 199, 200,
	85, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 205, 99, 206, 207, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 208, 105, 106, 209, 210, 0, 0, 0,
	107, 108, 211, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 212, 0, 213, 0, 112, 113, 114, 457,
	215, 0, 0, 117, 0, 115, 0, 0, 116, 216,
	217, 218, 219, 0, 220, 0, 0, 118, 0, 119,
	120, 0, 0, 221, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 222, 134, 223, 135,
	136, 0, 0, 452, 0, 0, 137, 224, 0, 138,
	0, 225, 139, 140, 141, 142, 0, 226, 143, 227,
	144, 0, 145, 146, 147, 228, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 229, 157,
	0, 158, 159, 160, 0, 230, 161, 162, 0, 163,
	164, 0, 165, 231, 232, 166, 0, 172, 167, 168,
	169, 171, 233, 170, 234, 0, 173, 0, 174, 175,
	0, 235, 236, 237, 0, 0, 176, 238, 239, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 240, 241, 75, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	0, 0, 78, 79, 368, 80, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 81, 82, 193, 194, 195,
	196, 83, 197, 198, 0, 84, 199, 200, 85, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 205, 99, 206, 207, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	208, 105, 106, 209, 210, 0, 0, 0, 107, 108,
	211, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	212, 0, 213, 0, 112, 113, 114, 214, 215, 0,
	0, 117, 0, 115, 0, 0, 116, 216, 217, 218,
	219, 0, 220, 0, 0, 118, 0, 119, 120, 0,
	0, 221, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 222, 134, 223, 135, 136, 0,
	0, 0, 0, 0, 137, 224, 0, 138, 0, 225,
	139, 140, 141, 142, 0, 226, 143, 227, 367, 0,
	145, 146, 147, 228, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 229, 157, 0, 158,
	159, 160, 0, 230, 161, 162, 0, 163, 164, 0,
	165, 231, 232, 166, 0, 172, 167, 168, 169, 171,
	233, 170, 234, 0, 173, 0, 174, 175, 0, 235,
	236, 237, 0, 0, 176, 238, 239, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 240, 241, 75, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	205, 99, 206, 207, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 209, 210, 0, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 212, 0,
	213, 0, 112, 113, 114, 214, 215, 0, 0, 117,
	0, 115, 0, 0, 116, 216, 217, 218, 219, 0,
	220, 0, 0, 118, 0, 119, 120, 0, 0, 221,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 222, 134, 223, 135, 136, 0, 0, 0,
	0, 0, 137, 224, 0, 138, 0, 225, 139, 140,
	141, 142, 0, 226, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 229, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 0, 163, 164, 0, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	234, 0, 173, 0, 174, 175, 0, 235, 236, 237,
	0, 0, 176, 238, 239, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	240, 241, 75, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 81, 82, 193, 194, 195, 196, 83, 197, 198,
	0, 84, 199, 200, 85, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 205, 99,
	206, 207, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 208, 105, 106, 209,
	210, 0, 0, 0, 107, 108, 211, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 212, 0, 213, 0,
	112, 113, 114, 1259, 215, 0, 0, 117, 0, 115,
	0, 0, 116, 216, 217, 218, 219, 0, 220, 0,
	0, 118, 0, 119, 120, 0, 0, 221, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	222, 134, 223, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 0, 138, 0, 225, 139, 140, 141, 142,
	0, 226, 143, 227, 144, 0, 145, 146, 147, 228,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 229, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 0, 163, 164, 0, 165, 231, 232, 166,
	0, 172, 167, 168, 169, 171, 233, 170, 234, 0,
	173, 0, 174, 175, 0, 235, 236, 237, 0, 0,
	176, 238, 239, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 240, 241,
	75, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 81,
	82, 193, 194, 195, 196, 83, 197, 198, 0, 84,
	199, 200, 85, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 205, 99, 206, 207,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 208, 105, 106, 209, 210, 0,
	0, 0, 107, 108, 211, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 212, 0, 213, 0, 112, 113,
	114, 1257, 215, 0, 0, 117, 0, 115, 0, 0,
	116, 216, 217, 218, 219, 0, 220, 0, 0, 118,
	0, 119, 120, 0, 0, 221, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 222, 134,
	223, 135, 136, 0, 0, 0, 0, 0, 137, 224,
	0, 138, 0, 225, 139, 140, 141, 142, 0, 226,
	143, 227, 144, 0, 145, 146, 147, 228, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	229, 157, 0, 158, 159, 160, 0, 230, 161, 162,
	0, 163, 164, 0, 165, 231, 232, 166, 0, 172,
	167, 168, 169, 171, 233, 170, 234, 0, 173, 0,
	174, 175, 0, 235, 236, 237, 0, 0, 176, 238,
	239, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 240, 241, 75, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 81, 82, 193,
	194, 195, 196, 83, 197, 198, 0, 84, 199, 200,
	85, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 205, 99, 206, 207, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 208, 105, 106, 209, 210, 0, 0, 0,
	107, 108, 211, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 212, 0, 213, 0, 112, 113, 114, 1246,
	215, 0, 0, 117, 0, 115, 0, 0, 116, 216,
	217, 218, 219, 0, 220, 0, 0, 118, 0, 119,
	120, 0, 0, 221, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 222, 134, 223, 135,
	136, 0, 0, 0, 0, 0, 137, 224, 0, 138,
	0, 225, 139, 140, 141, 142, 0, 226, 143, 227,
	144, 0, 145, 146, 147, 228, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 229, 157,
	0, 158, 159, 160, 0, 230, 161, 162, 0, 163,
	164, 0, 165, 231, 232, 166, 0, 172, 167, 168,
	169, 171, 233, 170, 234, 0, 173, 0, 174, 175,
	0, 235, 236, 237, 0, 0, 176, 238, 239, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 240, 241, 75, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 81, 82, 193, 194, 195,
	196, 83, 197, 198, 0, 84, 199, 200, 85, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 205, 99, 206, 207, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	208, 105, 106, 209, 210, 0, 0, 0, 107, 108,
	211, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	212, 0, 213, 0, 112, 113, 114, 843, 215, 0,
	0, 117, 0, 115, 0, 0, 116, 216, 217, 218,
	219, 0, 220, 0, 0, 118, 0, 119, 120, 0,
	0, 221, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 222, 134, 223, 135, 136, 0,
	0, 0, 0, 0, 137, 224, 0, 138, 0, 225,
	139, 140, 141, 142, 0, 226, 143, 227, 144, 0,
	145, 146, 147, 228, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 229, 157, 0, 158,
	159, 160, 0, 230, 161, 162, 0, 163, 164, 0,
	165, 231, 232, 166, 0, 172, 167, 168, 169, 171,
	233, 170, 234, 0, 173, 0, 174, 175, 0, 235,
	236, 237, 0, 0, 176, 238, 239, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 240, 241, 75, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	205, 99, 206, 207, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 209, 210, 0, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 212, 0,
	213, 0, 112, 113, 114, 214, 215, 0, 0, 117,
	0, 115, 0, 0, 116, 216, 217, 218, 219, 0,
	220, 0, 0, 118, 0, 119, 120, 0, 0, 221,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 222, 134, 223, 135, 136, 0, 0, 0,
	0, 0, 137, 224, 0, 138, 0, 225, 139, 140,
	141, 142, 0, 226, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 229, 157, 0, 382, 159, 160,
	0, 230, 161, 162, 0, 163, 164, 0, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	234, 0, 173, 0, 174, 175, 0, 235, 236, 237,
	0, 0, 176, 238, 239, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	240, 241, 75, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 192, 0, 708, 0,
	0, 81, 82, 193, 194, 195, 196, 83, 197, 198,
	0, 84, 199, 200, 85, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 205, 99,
	206, 207, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 208, 105, 106, 209,
	210, 0, 0, 0, 107, 108, 211, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 212, 0, 213, 0,
	112, 113, 114, 214, 215, 0, 0, 117, 0, 115,
	0, 0, 116, 216, 217, 218, 219, 0, 220, 0,
	0, 118, 0, 119, 120, 0, 0, 221, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	222, 134, 223, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 0, 138, 0, 225, 139, 140, 141, 142,
	0, 226, 143, 227, 144, 0, 145, 146, 147, 228,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 229, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 0, 0, 164, 0, 165, 231, 232, 166,
	0, 172, 167, 168, 169, 171, 233, 170, 234, 0,
	173, 0, 174, 175, 0, 235, 236, 237, 0, 0,
	176, 238, 239, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 240, 241,
	75, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 81,
	82, 193, 194, 195, 196, 83, 197, 198, 0, 84,
	199, 200, 85, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 205, 99, 206, 207,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 208, 105, 106, 209, 210, 0,
	0, 0, 107, 108, 211, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 212, 0, 213, 0, 112, 113,
	114, 554, 215, 0, 0, 117, 0, 115, 0, 0,
	116, 216, 217, 218, 219, 0, 220, 0, 0, 118,
	0, 119, 120, 0, 0, 221, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 222, 134,
	223, 135, 136, 0, 0, 0, 0, 0, 137, 224,
	0, 138, 0, 225, 139, 140, 141, 142, 0, 226,
	143, 227, 144, 0, 145, 146, 147, 228, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	229, 157, 0, 158, 159, 160, 0, 230, 161, 162,
	0, 163, 164, 0, 165, 231, 232, 166, 0, 172,
	167, 168, 169, 171, 233, 170, 234, 0, 173, 0,
	174, 175, 0, 235, 236, 237, 0, 0, 176, 238,
	239, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 240, 241, 75, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 81, 82, 193,
	194, 195, 196, 83, 197, 198, 0, 84, 199, 200,
	85, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 205, 99, 206, 207, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 208, 105, 106, 209, 210, 0, 0, 0,
	107, 108, 211, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 212, 0, 213, 0, 112, 113, 114, 549,
	215, 0, 0, 117, 0, 115, 0, 0, 116, 216,
	217, 218, 219, 0, 220, 0, 0, 118, 0, 119,
	120, 0, 0, 221, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 222, 134, 223, 135,
	136, 0, 0, 0, 0, 0, 137, 224, 0, 138,
	0, 225, 139, 140, 141, 142, 0, 226, 143, 227,
	144, 0, 145, 146, 147, 228, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 229, 157,
	0, 158, 159, 160, 0, 230, 161, 162, 0, 163,
	164, 0, 165, 231, 232, 166, 0, 172, 167, 168,
	169, 171, 233, 170, 234, 0, 173, 0, 174, 175,
	0, 235, 236, 237, 0, 0, 176, 238, 239, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 240, 241, 75, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 81, 82, 193, 194, 195,
	196, 83, 197, 198, 0, 84, 199, 200, 85, 0,
	0, 201, 202, 509, 0, 204, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 205, 99, 206, 207, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	208, 105, 106, 209, 210, 0, 0, 0, 107, 108,
	211, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	212, 0, 213, 0, 112, 113, 114, 214, 215, 0,
	0, 117, 0, 115, 0, 0, 116, 216, 217, 218,
	219, 0, 220, 0, 0, 118, 0, 119, 120, 0,
	0, 221, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 393, 0, 129, 130, 133,
	131, 0, 132, 0, 222, 134, 223, 135, 136, 0,
	0, 0, 0, 0, 137, 224, 0, 138, 0, 225,
	139, 140, 141, 142, 0, 226, 143, 227, 144, 0,
	145, 146, 147, 228, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 229, 157, 0, 158,
	159, 160, 0, 230, 161, 162, 0, 163, 164, 0,
	165, 231, 232, 166, 0, 172, 167, 168, 169, 171,
	233, 170, 234, 0, 173, 0, 174, 175, 0, 392,
	236, 237, 0, 0, 388, 238, 239, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 240, 241, 75, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	205, 99, 206, 207, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 209, 210, 0, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 212, 0,
	213, 0, 112, 113, 114, 214, 215, 0, 0, 117,
	0, 115, 0, 0, 116, 216, 217, 218, 219, 0,
	220, 0, 0, 118, 0, 119, 120, 0, 0, 221,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 393, 0, 129, 130, 133, 131, 0,
	132, 0, 222, 134, 223, 135, 136, 0, 0, 0,
	0, 0, 137, 224, 0, 138, 0, 225, 139, 140,
	141, 142, 0, 226, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 229, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 0, 163, 164, 0, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	234, 0, 173, 0, 174, 175, 0, 392, 236, 237,
	0, 0, 388, 238, 239, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	240, 241, 75, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 81, 82, 193, 194, 195, 196, 83, 197, 198,
	0, 84, 199, 200, 85, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 205, 99,
	206, 207, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 208, 105, 106, 209,
	210, 0, 0, 0, 107, 108, 211, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 212, 0, 213, 0,
	112, 113, 114, 487, 215, 0, 0, 117, 0, 115,
	0, 0, 116, 216, 217, 218, 219, 0, 220, 0,
	0, 118, 0, 119, 120, 0, 0, 221, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	222, 134, 223, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 0, 138, 0, 225, 139, 140, 141, 142,
	0, 226, 143, 227, 144, 0, 145, 146, 147, 228,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 229, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 0, 163, 164, 0, 165, 231, 232, 166,
	0, 172, 167, 168, 169, 171, 233, 170, 234, 0,
	173, 0, 174, 175, 0, 235, 236, 237, 0, 0,
	176, 238, 239, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 240, 241,
	75, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 81,
	82, 193, 194, 195, 196, 83, 197, 198, 0, 84,
	199, 200, 85, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 205, 99, 206, 207,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 208, 105, 106, 209, 210, 0,
	0, 0, 107, 108, 211, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 212, 0, 213, 0, 112, 113,
	114, 484, 215, 0, 0, 117, 0, 115, 0, 0,
	116, 216, 217, 218, 219, 0, 220, 0, 0, 118,
	0, 119, 120, 0, 0, 221, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 222, 134,
	223, 135, 136, 0, 0, 0, 0, 0, 137, 224,
	0, 138, 0, 225, 139, 140, 141, 142, 0, 226,
	143, 227, 144, 0, 145, 146, 147, 228, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	229, 157, 0, 158, 159, 160, 0, 230, 161, 162,
	0, 163, 164, 0, 165, 231, 232, 166, 0, 172,
	167, 168, 169, 171, 233, 170, 234, 0, 173, 0,
	174, 175, 0, 235, 236, 237, 0, 0, 176, 238,
	239, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 240, 241, 75, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 81, 82, 193,
	194, 195, 196, 83, 197, 198, 0, 84, 199, 200,
	85, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 205, 99, 206, 207, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 208, 105, 106, 209, 210, 0, 0, 0,
	107, 108, 211, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 212, 0, 213, 0, 112, 113, 114, 481,
	215, 0, 0, 117, 0, 115, 0, 0, 116, 216,
	217, 218, 219, 0, 220, 0, 0, 118, 0, 119,
	120, 0, 0, 221, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 222, 134, 223, 135,
	136, 0, 0, 0, 0, 0, 137, 224, 0, 138,
	0, 225, 139, 140, 141, 142, 0, 226, 143, 227,
	144, 0, 145, 146, 147, 228, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 229, 157,
	0, 158, 159, 160, 0, 230, 161, 162, 0, 163,
	164, 0, 165, 231, 232, 166, 0, 172, 167, 168,
	169, 171, 233, 170, 234, 0, 173, 0, 174, 175,
	0, 235, 236, 237, 0, 0, 176, 238, 239, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 240, 241, 75, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 81, 82, 193, 194, 195,
	196, 83, 197, 198, 0, 84, 199, 200, 85, 0,
	0, 201, 202, 203, 0, 204, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 205, 99, 206, 207, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	208, 105, 106, 209, 210, 0, 0, 0, 107, 108,
	211, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	212, 0, 213, 0, 112, 113, 114, 479, 215, 0,
	0, 117, 0, 115, 0, 0, 116, 216, 217, 218,
	219, 0, 220, 0, 0, 118, 0, 119, 120, 0,
	0, 221, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 222, 134, 223, 135, 136, 0,
	0, 0, 0, 0, 137, 224, 0, 138, 0, 225,
	139, 140, 141, 142, 0, 226, 143, 227, 144, 0,
	145, 146, 147, 228, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 229, 157, 0, 158,
	159, 160, 0, 230, 161, 162, 0, 163, 164, 0,
	165, 231, 232, 166, 0, 172, 167, 168, 169, 171,
	233, 170, 234, 0, 173, 0, 174, 175, 0, 235,
	236, 237, 0, 0, 176, 238, 239, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 0, 184,
	185, 186, 240, 241, 75, 0, 187, 0, 0, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 81, 82, 193, 194, 195, 196, 83,
	197, 198, 0, 84, 199, 200, 85, 0, 0, 201,
	202, 203, 0, 204, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	205, 99, 206, 207, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 208, 105,
	106, 209, 210, 0, 0, 0, 107, 108, 211, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 212, 0,
	213, 0, 112, 113, 114, 460, 215, 0, 0, 117,
	0, 115, 0, 0, 116, 216, 217, 218, 219, 0,
	220, 0, 0, 118, 0, 119, 120, 0, 0, 221,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 222, 134, 223, 135, 136, 0, 0, 0,
	0, 0, 137, 224, 0, 138, 0, 225, 139, 140,
	141, 142, 0, 226, 143, 227, 144, 0, 145, 146,
	147, 228, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 229, 157, 0, 158, 159, 160,
	0, 230, 161, 162, 0, 163, 164, 0, 165, 231,
	232, 166, 0, 172, 167, 168, 169, 171, 233, 170,
	234, 0, 173, 0, 174, 175, 0, 235, 236, 237,
	0, 0, 176, 238, 239, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 0, 184, 185, 186,
	240, 241, 75, 0, 187, 0, 0, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 81, 82, 193, 194, 195, 196, 83, 197, 198,
	0, 84, 199, 200, 85, 0, 0, 201, 202, 203,
	0, 204, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 205, 99,
	206, 207, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 208, 105, 106, 209,
	210, 0, 0, 0, 107, 108, 211, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 212, 0, 213, 0,
	112, 113, 114, 214, 215, 0, 0, 117, 0, 115,
	0, 0, 116, 216, 217, 218, 219, 0, 220, 0,
	0, 118, 0, 119, 120, 0, 0, 221, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	222, 134, 223, 135, 136, 0, 0, 0, 0, 0,
	137, 224, 0, 138, 0, 225, 139, 140, 141, 142,
	0, 226, 143, 227, 144, 0, 145, 146, 147, 228,
	441, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 229, 157, 0, 158, 159, 160, 0, 230,
	161, 162, 0, 163, 164, 0, 165, 231, 232, 166,
	0, 172, 167, 168, 169, 171, 233, 170, 234, 0,
	173, 0, 174, 175, 0, 235, 236, 237, 0, 0,
	176, 238, 239, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 0, 184, 185, 186, 240, 241,
	75, 0, 187, 0, 0, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 81,
	82, 193, 194, 195, 196, 83, 197, 198, 0, 84,
	199, 200, 85, 0, 0, 201, 202, 203, 0, 204,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 205, 99, 206, 207,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 208, 105, 106, 209, 210, 0,
	0, 0, 107, 108, 211, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 212, 0, 213, 0, 112, 113,
	114, 214, 215, 0, 0, 117, 0, 115, 0, 0,
	116, 216, 217, 218, 219, 0, 220, 0, 0, 118,
	0, 119, 120, 0, 0, 221, 0, 121, 0, 0,
	385, 0, 0, 123, 0, 124, 125, 126, 127, 393,
	0, 129, 130, 133, 131, 0, 132, 0, 222, 134,
	223, 135, 136, 0, 0, 0, 0, 0, 137, 224,
	0, 138, 0, 225, 139, 140, 141, 142, 0, 226,
	143, 227, 144, 0, 145, 146, 147, 228, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	387, 157, 0, 158, 159, 160, 0, 230, 161, 386,
	0, 163, 164, 0, 165, 231, 232, 166, 0, 172,
	167, 168, 169, 171, 233, 170, 234, 0, 173, 0,
	174, 175, 0, 392, 236, 237, 0, 0, 388, 238,
	239, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 0, 184, 185, 186, 240, 241, 75, 0,
	187, 0, 0, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 81, 82, 193,
	194, 195, 196, 83, 197, 198, 0, 84, 199, 200,
	85, 0, 0, 201, 202, 203, 0, 204, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 205, 99, 206, 207, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 208, 105, 106, 209, 210, 0, 0, 0,
	107, 108, 211, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 212, 0, 213, 0, 112, 113, 114, 214,
	215, 0, 0, 117, 0, 115, 0, 0, 116, 216,
	217, 218, 219, 0, 220, 0, 0, 118, 0, 119,
	120, 0, 0, 221, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 222, 134, 223, 135,
	136, 0, 0, 0, 0, 0, 137, 224, 0, 138,
	0, 225, 139, 140, 0, 142, 0, 226, 143, 227,
	144, 0, 145, 0, 147, 228, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 229, 0,
	0, 158, 159, 160, 0, 230, 161, 162, 0, 163,
	164, 0, 165, 231, 232, 166, 0, 172, 167, 168,
	169, 171, 233, 170, 234, 0, 173, 0, 174, 175,
	0, 235, 236, 237, 0, 0, 176, 238, 239, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	0, 184, 185, 186, 240, 241, 0, 0, 187, 0,
	0, 0, 0, 188, 189, 190, 191, 869, 870, 0,
	889, 890, 891, 899, 900, 901, 0, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	872, 0, 903, 869, 870, 0, 889, 890, 891, 899,
	900, 901, 0, 0, 0, 0, 0, 0, 0, 892,
	0, 871, 0, 0, 0, 0, 872, 886, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 904, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 894,
	896, 904, 0, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 893, 0, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 869, 870, 0, 889,
	890, 891, 899, 900, 901, 0, 0, 0, 0, 888,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 872,
	897, 903, 869, 870, 0, 889, 890, 891, 899, 900,
	901, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	871, 0, 0, 0, 0, 872, 886, 903, 0, 0,
	895, 0, 0, 883, 884, 885, 0, 882, 879, 880,
	881, 873, 874, 875, 876, 878, 871, 898, 0, 0,
	0, 0, 886, 0, 1445, 0, 895, 0, 0, 883,
	884, 885, 0, 882, 879, 880, 881, 873, 874, 875,
	876, 878, 0, 898, 0, 877, 0, 0, 0, 0,
	1397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 904, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 894, 896,
	904, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 893, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 869, 870, 0, 889, 890,
	891, 899, 900, 901, 0, 0, 0, 0, 888, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 872, 897,
	903, 869, 870, 0, 889, 890, 891, 899, 900, 901,
	0, 0, 0, 0, 0, 0, 0, 892, 0, 871,
	0, 0, 0, 0, 872, 886, 903, 0, 0, 895,
	0, 0, 883, 884, 885, 0, 882, 879, 880, 881,
	873, 874, 875, 876, 878, 871, 898, 0, 0, 0,
	1854, 886, 0, 0, 0, 895, 0, 0, 883, 884,
	885, 0, 882, 879, 880, 881, 873, 874, 875, 876,
	878, 0, 898, 0, 877, 0, 1852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 904, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 902, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 894, 896, 904,
	0, 0, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 893, 0, 0, 0, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 869, 870, 0, 889, 890, 891,
	899, 900, 901, 0, 0, 0, 0, 888, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 872, 897, 903,
	869, 870, 0, 889, 890, 891, 899, 900, 901, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 871, 0,
	0, 0, 0, 872, 886, 903, 0, 0, 895, 0,
	0, 883, 884, 885, 0, 882, 879, 880, 881, 873,
	874, 875, 876, 878, 871, 898, 0, 0, 0, 1831,
	886, 0, 0, 0, 895, 0, 0, 883, 884, 885,
	0, 882, 879, 880, 881, 873, 874, 875, 876, 878,
	0, 898, 0, 877, 0, 1806, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 896, 904, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 902, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 894, 896, 904, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 894, 0, 893, 0, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	893, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 869, 870, 0, 889, 890, 891, 899,
	900, 901, 0, 0, 0, 0, 888, 0, 0, 892,
	0, 0, 0, 0, 0, 0, 872, 897, 903, 869,
	870, 0, 889, 890, 891, 899, 900, 901, 0, 0,
	0, 0, 0, 0, 0, 892, 0, 871, 0, 0,
	0, 0, 872, 886, 903, 0, 0, 895, 0, 0,
	883, 884, 885, 0, 882, 879, 880, 881, 873, 874,
	875, 876, 878, 871, 898, 0, 0, 0, 1801, 886,
	0, 0, 0, 895, 0, 0, 883, 884, 885, 0,
	882, 879, 880, 881, 873, 874, 875, 876, 878, 0,
	898, 0, 877, 0, 1797, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 904, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 896, 904, 0, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 893, 0, 0, 0, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 869, 870, 0, 889, 890, 891, 899, 900,
	901, 0, 0, 0, 0, 888, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 872, 897, 903, 869, 870,
	0, 889, 890, 891, 899, 900, 901, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 871, 0, 0, 0,
	0, 872, 886, 903, 0, 0, 895, 0, 0, 883,
	884, 885, 0, 882, 879, 880, 881, 873, 874, 875,
	876, 878, 871, 898, 0, 0, 0, 1732, 886, 0,
	0, 0, 895, 0, 0, 883, 884, 885, 0, 882,
	879, 880, 881, 873, 874, 875, 876, 878, 0, 898,
	0, 877, 0, 1731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	904, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 894, 896, 904, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 893, 0, 0, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 869, 870, 0, 889, 890, 891, 899, 900, 901,
	0, 0, 0, 0, 888, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 872, 897, 903, 869, 870, 0,
	889, 890, 891, 899, 900, 901, 0, 0, 0, 0,
	0, 0, 0, 892, 0, 871, 0, 0, 0, 0,
	872, 886, 903, 0, 0, 895, 0, 0, 883, 884,
	885, 0, 882, 879, 880, 881, 873, 874, 875, 876,
	878, 871, 898, 0, 0, 0, 1638, 886, 0, 0,
	0, 895, 0, 0, 883, 884, 885, 0, 882, 879,
	880, 881, 873, 874, 875, 876, 878, 0, 898, 0,
	877, 0, 1572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 904,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 894, 896, 904, 0, 0, 0, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 893, 0, 0, 0, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	869, 870, 0, 889, 890, 891, 899, 900, 901, 0,
	0, 0, 0, 888, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 872, 897, 903, 869, 870, 0, 889,
	890, 891, 899, 900, 901, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 871, 0, 0, 0, 0, 872,
	886, 903, 0, 0, 895, 0, 0, 883, 884, 885,
	0, 882, 879, 880, 881, 873, 874, 875, 876, 878,
	871, 898, 0, 0, 0, 1556, 886, 0, 0, 0,
	895, 0, 0, 883, 884, 885, 0, 882, 879, 880,
	881, 873, 874, 875, 876, 878, 0, 898, 0, 877,
	0, 1165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 904, 0,
	0, 0, 0, 0, 0, 877, 1925, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 894, 896, 904, 0, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	893, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	1924, 0, 0, 0, 0, 0, 0, 897, 0, 869,
	870, 0, 889, 890, 891, 899, 900, 901, 0, 0,
	0, 0, 888, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 872, 897, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 0, 0, 0, 0, 0, 886,
	0, 0, 0, 895, 0, 0, 883, 884, 885, 0,
	882, 879, 880, 881, 873, 874, 875, 876, 878, 0,
	898, 0, 1486, 0, 0, 0, 0, 0, 0, 895,
	0, 0, 883, 884, 885, 0, 882, 879, 880, 881,
	873, 874, 875, 876, 878, 0, 898, 0, 877, 0,
	1437, 0, 0, 1436, 869, 870, 0, 889, 890, 891,
	899, 900, 901, 0, 0, 0, 896, 904, 0, 0,
	892, 0, 0, 0, 0, 1098, 0, 872, 0, 903,
	0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 0, 0, 0, 887, 871, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 906, 0,
	0, 0, 0, 0, 869, 870, 0, 889, 890, 891,
	899, 900, 901, 877, 0, 888, 0, 0, 0, 0,
	892, 0, 0, 0, 905, 0, 897, 872, 0, 903,
	0, 896, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 0, 871, 0,
	0, 0, 0, 0, 886, 0, 894, 0, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 893, 883, 884, 885, 0, 882,
	879, 880, 881, 873, 874, 875, 876, 878, 0, 898,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 896, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 902, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 870, 0, 889, 890, 891, 899, 900, 901,
	0, 0, 0, 0, 893, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 872, 0, 903, 895, 0, 0,
	883, 884, 885, 0, 882, 879, 880, 881, 873, 874,
	875, 876, 878, 0, 898, 871, 0, 0, 0, 0,
	888, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 869, 870, 0, 889, 890, 891, 899,
	900, 901, 0, 0, 0, 0, 0, 0, 0, 892,
	0, 0, 0, 0, 0, 0, 872, 0, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 895, 896, 904,
	883, 884, 885, 0, 882, 879, 880, 881, 873, 874,
	875, 876, 878, 902, 898, 0, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 436, 0, 0, 0, 0, 0, 0, 0,
	896, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 888, 0, 0,
	0, 887, 0, 0, 0, 0, 0, 0, 897, 0,
	869, 870, 0, 889, 890, 891, 899, 900, 901, 0,
	0, 0, 0, 893, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 872, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 0, 0, 888,
	886, 0, 0, 0, 895, 0, 0, 883, 884, 885,
	897, 882, 879, 880, 881, 873, 874, 875, 876, 878,
	0, 898, 0, 0, 0, 0, 0, 0, 0, 1566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 870, 0, 889, 890, 891, 899, 900, 901, 877,
	0, 0, 0, 0, 1443, 0, 892, 0, 0, 0,
	1438, 0, 0, 872, 0, 903, 895, 896, 904, 883,
	884, 885, 0, 882, 879, 880, 881, 873, 874, 875,
	876, 878, 902, 898, 871, 0, 0, 0, 0, 0,
	886, 0, 894, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	893, 0, 0, 0, 0, 0, 869, 870, 0, 889,
	890, 891, 899, 900, 901, 0, 0, 0, 0, 877,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 872,
	0, 903, 0, 0, 0, 0, 888, 896, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	871, 0, 902, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 894, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	893, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 877, 883, 884, 885, 0,
	882, 879, 880, 881, 873, 874, 875, 876, 878, 0,
	898, 0, 0, 896, 904, 0, 888, 869, 870, 0,
	889, 890, 891, 899, 900, 901, 0, 897, 902, 0,
	0, 0, 0, 892, 0, 0, 0, 1396, 894, 0,
	872, 0, 903, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 0, 0, 893, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1403, 0,
	0, 0, 0, 895, 0, 0, 883, 884, 885, 0,
	882, 879, 880, 881, 873, 874, 875, 876, 878, 0,
	898, 0, 888, 869, 870, 0, 889, 890, 891, 899,
	900, 901, 0, 897, 0, 0, 877, 0, 0, 892,
	0, 0, 0, 0, 0, 0, 872, 0, 903, 0,
	0, 0, 0, 0, 896, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 902,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 0, 0, 887, 0, 0, 0, 895,
	0, 0, 883, 884, 885, 0, 882, 879, 880, 881,
	873, 874, 875, 876, 878, 0, 898, 893, 0, 0,
	0, 0, 0, 869, 870, 0, 889, 890, 891, 899,
	900, 901, 877, 0, 0, 0, 0, 0, 0, 892,
	0, 0, 0, 0, 0, 0, 872, 0, 903, 0,
	896, 904, 0, 888, 0, 869, 870, 0, 889, 890,
	891, 899, 900, 901, 897, 902, 0, 871, 0, 0,
	0, 0, 0, 886, 0, 894, 0, 0, 872, 0,
	903, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 893, 0, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 877, 883, 884, 885, 0, 882, 879, 880,
	881, 873, 874, 875, 876, 878, 0, 898, 0, 888,
	896, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 877, 902, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 887, 896, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 894, 50, 0,
	0, 0, 0, 887, 0, 0, 895, 0, 0, 883,
	884, 885, 0, 882, 879, 880, 881, 873, 874, 875,
	876, 878, 52, 898, 0, 0, 0, 0, 28, 888,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 36, 0, 0, 53,
	0, 888, 0, 40, 37, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 0, 0, 883,
	884, 885, 0, 882, 879, 880, 881, 873, 874, 875,
	876, 878, 0, 898, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 0,
	0, 883, 884, 885, 0, 882, 879, 880, 881, 873,
	874, 875, 876, 878, 0, 898, 0, 0, 0, 0,
	746, 740, 763, 734, 754, 753, 0, 0, 736, 735,
	39, 0, 0, 765, 764, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 43, 0, 54, 0, 0, 0,
	0, 44, 0, 0, 64, 0, 0, 0, 0, 47,
	49, 0, 0, 0, 759, 0, 751, 750, 0, 51,
	0, 0, 0, 0, 0, 749, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 63, 741,
	742, 743, 744, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 745, 739, 0, 0, 0, 0, 0,
	0, 0, 767, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 760, 761, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766,
}
var sqlPact = [...]int{

	25474, -1000, 60, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 689, 17430, -1000,
	-1000, -1000, -1000, -1000, -1000, 693, 653, 136, 4706, 17430,
	17430, 17162, 1189, 1189, 18770, -1000, -1000, 21986, -1000, 2244,
	502, 504, 502, 502, 496, 18770, 625, 660, 145, -1000,
	800, 23, 21718, 17430, 1299, 54, 15822, 343, 25474, 16894,
	21450, 17430, 16626, 385, 59, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1155, 1063, 1056, 15822, 21182, 20914, 20646, 20378,
	-1000, 10681, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 737, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 347, 346, -1000, 16358, -1000, 885,
	-1000, 52, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	881, -1000, 17430, -1000, -1000, 20110, 19842, 345, 850, -1000,
	-1000, 575, 434, 1303, -1000, 76, -1000, -1000, -1000, 1154,
	-1000, 878, 1153, 1152, 1151, 1150, 1147, 1144, 431, 873,
	492, 850, -1000, 850, -1000, -1000, -1000, 583, 18770, -1000,
	15822, -1000, 19574, 17430, 17430, 1082, 19306, -1000, 800, -1000,
	-1000, -1000, 914, 1288, 1288, 1288, 1301, 182, 181, 145,
	20, 17430, -1000, 344, 20, 7316, 7316, -1000, -1000, 343,
	-1000, 387, 13665, -1000, 7878, -1000, 808, 1199, 432, 687,
	1196, -95, 783, 777, 1195, 640, 12851, 59, -1000, -1000,
	-1000, 9286, 4427, 15822, 17430, 17430, 673, 19038, -1000, 1194,
	123, 1193, -1000, 115, 1192, -1000, 115, 1191, 43, -1000,
	-1000, -1000, -1000, -1000, -1000, 343, 16090, 17430, 1375, 25624,
	-1000, 9286, -1000, -1000, 14212, 1246, 14212, -1000, -1000, 1370,
	-1000, 9286, -1000, 46, 44, 1013, 1000, 11230, 10962, 1240,
	794, -1000, -1000, -1000, 73, 4706, 17430, 1161, 14212, 17430,
	17430, 17430, 17430, 17430, 17430, -1000, 992, -1000, 17430, 17430,
	-1000, 41, 21, -1000, 18770, -1000, 126, -1000, 342, 958,
	425, 184, 18502, 1208, 956, -1000, 914, -1000, 889, 997,
	8443, 9286, 145, -1000, -1000, 145, 145, 9286, -1000, -1000,
	17430, 20, 1369, 17430, 111, -1000, 24474, -1000, -1000, 9286,
	9286, 9286, 9286, 9286, 851, -1000, -1000, -1000, 5567, -1000,
	-1000, 59, 341, 201, -1000, -1000, 340, 59, -1000, -1000,
	-1000, -1000, 339, 1454, 479, -1000, -1000, -1000, 9286, 435,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1160,
	338, 337, -1000, -1000, -1000, -1000, 336, 335, 334, 333,
	332, 331, 330, 328, 327, 324, 323, 322, 318, 312,
	310, 814, -1000, 463, -1000, -1000, 463, 463, -1000, 304,
	304, 305, -1000, -1000, -1000, -1000, 304, -1000, -1000, -1000,
	421, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 309, 111,
	-1000, -1000, -1000, 17430, 39, -1000, 25233, -1000, -25, 715,
	-1000, 15286, 1296, 1268, 1253, 15822, 1326, 1320, 561, 17430,
	17430, 555, 554, 15822, -1000, 1143, 38, -1000, -1000, 3080,
	-1000, -1000, 456, 132, 1359, 132, 13123, -1000, 17430, 17430,
	-1000, 17430, -1000, -1000, 17430, -1000, 17430, 17430, -1000, 17430,
	129, 14750, 872, 1188, 651, 23, 34, -1000, 1390, -1000,
	-1000, -1000, -1000, 95, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 305, 814,
	304, 304, 304, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	421, -1000, -1000, 463, 463, 463, -1000, -1000, 33, 25233,
	553, -2, 14481, 17430, -1000, 72, -1000, -1000, 1140, 495,
	32, 798, 1046, 801, -1000, -1000, -1000, -1000, 14, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1429,
	-1000, -1000, -1000, -1000, 1446, 14, -1000, -1000, -1000, -1000,
	-1000, 1453, -1000, -1000, -1000, 4706, -1000, -1000, -1000, 17430,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	798, 1046, -1000, -1000, 15822, 15018, 1349, 1187, 823, -1000,
	1343, 17430, 876, 949, -1000, -1000, 409, 1186, -1000, -1000,
	-1000, -1000, 25233, -1000, 25233, 732, 1071, -1000, 1071, 10,
	-1000, 24384, -1000, 302, 28, -1000, 456, 7316, 12580, 25624,
	25624, 17430, 610, 9286, 9286, 9286, 9286, 9286, 9286, 9286,
	9286, 9286, 9286, 9286, 9286, 9286, 9286, 9286, 9286, 9286,
	9286, 9286, 9286, 9286, 9286, 1294, 9286, 547, 9286, 9286,
	9286, 9286, 1519, 842, 282, 4706, -1000, 659, 659, 659,
	164, 164, 235, 53, 23867, 4, 59, -1000, -1000, 7032,
	6731, 59, 4985, -1000, 698, 1444, 459, 25233, 1167, 1113,
	301, 179, 177, 9286, 9286, 9567, 9567, 9286, 9848, 9286,
	9286, 5848, 9286, 9286, 9286, 9286, 9286, 9286, -1000, 297,
	-1000, -1000, -1000, -1000, 1443, -1000, -1000, 1437, -1000, 608,
	605, 1436, 456, 176, 7878, -1000, 872, 17430, 17430, 17430,
	-1000, -1000, 945, 18234, 941, 25624, 17430, -1000, 296, 290,
	1028, 1024, 17430, 17430, 17966, 17698, 17430, 807, 287, 286,
	17430, 750, -1000, 17430, 17430, 717, 639, 1138, 17430, -1000,
	9286, 718, 9286, 822, -1000, 12037, 469, 17430, 745, 86,
	-1000, -1000, -1000, 408, 17430, -1000, -1000, -1000, 123, -1000,
	115, 115, -1000, -1000, 15822, -1000, -1000, -1000, -1000, -1000,
	-1000, 25624, 380, 366, -1000, 1435, 546, -1000, 544, 543,
	535, -1000, 285, -1000, 9286, 17430, 14481, -2, -3, -1000,
	-1000, 17430, 1046, -1000, -1000, -1000, -1000, 683, -1000, 792,
	-1000, 11498, -1000, -1000, -1000, 698, -1000, -31, -1000, -1000,
	-1000, -1000, 173, 26, -19, 25624, -1000, -1000, -1000, -1000,
	-1000, 17430, 306, 17430, 23, 17430, -1000, 1452, 23, 17430,
	1185, 1451, 17430, -1000, -1000, -1000, 9286, -1000, -1000, -1000,
	23, 17430, -1000, 1112, -1000, -17, 1783, -124, 15554, -1000,
	11766, -1000, -1000, -1000, 429, 918, 918, 562, 562, 562,
	562, 254, 254, 1859, 3576, 2225, 2225, 2225, 2972, 261,
	261, 2225, 2225, 2225, 164, 25323, 2648, 9286, 9286, 534,
	838, 282, 2648, 9286, 1424, 2648, 2648, 2648, -1000, 966,
	-1000, -1000, -1000, 1136, 280, 9848, 9848, -1000, -1000, -1000,
	5567, -1000, -1000, 279, 9286, -1000, 9286, 22, 18, -1000,
	-1000, 6, -1000, -1000, -10, 9286, 9286, 9286, 167, -1000,
	165, 643, -1000, 9286, 853, 277, 275, 9286, -1000, -1000,
	25147, 22553, 159, 1135, -81, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 142, 141, 25026, -81, 140, 3435, -1000, 9848,
	9848, 9848, 5567, 266, 139, 24279, -81, 24940, 8159, 8159,
	8159, 137, 24850, 9286, -81, 22527, 3793, 3487, 5, -4,
	-5, 1434, -9, 134, 424, 422, 133, 1112, -1000, -1000,
	-1000, -1000, 531, 528, 1184, -1000, 939, -1000, 473, -1000,
	743, 9286, 17430, 257, 234, 799, -1000, 1182, 943, 1181,
	943, -1000, -25, 713, 9286, 9286, -1000, 522, -1000, -1000,
	518, -1000, 637, -1000, 24060, -1000, 7316, 25233, -1000, 726,
	1255, -18, -1000, -1000, 7316, 456, 13123, 12580, 7878, -23,
	-1000, -1000, -1000, 872, -1000, 461, 1433, 130, 940, 778,
	741, 686, 1432, 25233, -31, -1000, -31, -1000, -1000, -1000,
	-1000, -1000, -1000, 17430, 1084, -1000, 15018, 233, 17430, 221,
	-1000, 220, -1000, -1000, 219, 17430, -1000, 1208, -1000, 127,
	-1000, 1101, 1291, -1000, 12580, 893, 1038, 1035, 12580, 972,
	852, 852, 852, -1000, 15554, 4137, -1000, -1000, 17430, 217,
	12308, 125, 1783, 9286, 2648, 2648, 9286, 9848, 9848, -1000,
	2648, -1000, -1000, -1000, -1000, 1131, 213, 9286, 25624, 3465,
	3171, -24, 6430, -38, 23841, -1000, -1000, 201, -1000, 124,
	7597, -1000, 24631, -28, -28, -1000, 1449, 1206, -1000, 9286,
	24693, -1000, 13394, 457, 859, 23648, 25624, 25624, -1000, 9286,
	-1000, -1000, 1130, 9286, -1000, 25624, 25624, 9848, 9848, 9848,
	9848, 9848, 9848, 9848, 9848, 9848, 9848, 9848, 9848, 9848,
	9848, 9848, 9848, 9848, 9848, 9848, 984, 9848, 1416, 1416,
	1416, -46, 6129, -1000, 1123, 1130, 9286, 9286, 25624, 122,
	113, 107, -1000, 9286, -81, 9286, 9286, 9286, -1000, -1000,
	-1000, 105, -1000, 1421, -1000, -1000, -1000, -1000, 1101, 17430,
	17430, 17430, 1179, -1000, 1969, -1000, 23622, -29, 17430, 17430,
	-1000, 1001, 1036, 488, 17430, -1000, 17430, -1000, 17430, 17430,
	17430, -30, -37, 17430, 17430, -1000, -1000, -63, 7316, 212,
	23, -63, 718, -1000, -62, -1000, 407, -1000, 364, 362,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 104, -1000,
	-1000, 1092, -1000, 10410, 211, 17430, 15018, 1342, 10410, 875,
	-1000, -1000, 446, 9286, 9286, 1783, 619, 12580, 12580, 982,
	1030, 12580, -1000, -1000, -1000, -1000, -1000, -1000, 1050, 210,
	17430, 15554, 565, 2648, 2777, 2254, 9286, 25624, 25355, -44,
	9286, 9286, -1000, -45, -1000, 9286, -1000, -1000, 1426, 9286,
	101, 100, 99, -1000, -1000, 25233, 9286, -1000, -1000, 22254,
	9286, 97, -1000, 96, 93, 25233, 1123, 25233, -1000, -1000,
	591, 591, 1416, 1416, 1416, 1416, 942, 942, 1216, 618,
	2279, 2279, 2279, 363, 455, 455, 2279, 2279, 2279, 1128,
	1010, 209, 3754, 9286, -50, -1000, -1000, -1000, 25233, 25233,
	92, -1000, -1000, -1000, -81, 3400, 23429, 23403, -1000, 91,
	446, -1000, -1000, -1000, 17430, -1000, 17430, -1000, 17430, 17430,
	1126, 932, -1000, -1000, 1021, 208, 9848, 17430, -1000, 825,
	-65, -66, 924, -1000, 921, 9286, -1000, 25624, 943, 943,
	-1000, 508, 507, -1000, -1000, -1000, -1000, -63, 1213, 17430,
	1249, -1000, -1000, 207, -1000, -1000, -1000, 847, -67, -1000,
	199, 1273, 9286, -1000, -1000, 206, 10410, -72, 90, 23,
	-73, 17430, -1000, 17430, 25233, -81, 597, -1000, 982, -1000,
	205, 9286, 12580, -1000, -145, -1000, 405, -1000, 17430, -77,
	-1000, 9286, 9286, 25355, -84, -1000, 2648, 2648, -1000, 23210,
	-1000, 24631, -1000, -1000, -1000, 25233, 844, -1000, 23184, -1000,
	-1000, -1000, -1000, 9848, 1119, 203, 25624, 22991, -1000, -1000,
	9286, -1000, -1000, -1000, -1000, -1000, 1172, -1000, -1000, 17430,
	935, -1000, -1000, 9286, 3754, 200, 1084, 193, -1000, -1000,
	-1000, 786, -1000, -1000, 25233, 1277, -1000, -1000, 17430, 17430,
	585, -92, 17430, -1000, -1000, 5286, 17430, 825, 10410, 1276,
	59, 17430, 1276, 22965, 4985, -96, -1000, 1084, -1000, 825,
	190, -74, -1000, 1338, 13944, -1000, 17430, 25233, -1000, 1050,
	-1000, 4706, -97, -1000, 2648, 2648, -1000, -1000, 88, 859,
	1289, -1000, 1120, 9848, 25624, -98, -1000, 22772, -1000, -1000,
	1177, 22746, 970, 17430, -1000, 17430, 17430, 475, 17430, -1000,
	-1000, 661, -1000, 456, -1000, 188, 1084, -1000, -1000, -1000,
	-1000, 1273, -10, 825, -1000, 1084, 10410, 17430, 187, -1000,
	186, 59, -106, -1000, -1000, -1000, -1000, 708, 9286, 1120,
	-113, -1000, -1000, 1170, -1000, 865, 789, 85, -115, 184,
	-1000, 9286, -1000, 13123, -1000, 17430, -1000, 1276, 81, 1084,
	-1000, -119, -1000, -1000, 9286, -1000, 80, 9005, 9005, -81,
	-1000, 17430, -1000, 867, 866, 656, -1000, -1000, -1000, -1000,
	-1000, 970, 25233, -103, -121, -1000, -1000, -1000, 825, -28,
	-1000, -1000, -1000, 10129, 900, 710, 24086, -1000, -1000, -1000,
	1217, -1000, 481, 899, 899, 865, -1000, 930, 1084, 78,
	1394, -1000, -1000, -1000, -1000, -1000, -1000, 1405, -1000, -1000,
	990, -1000, -1000, -1000, -1000, -1000, -1000, 1426, 8724, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1705, 1704, 1322, 132, 1697, 130, 1692, 1691, 1686,
	1685, 1683, 1680, 100, 129, 128, 133, 126, 1679, 90,
	1674, 1673, 1672, 97, 1664, 1661, 1659, 86, 1658, 1657,
	122, 119, 1656, 1655, 89, 33, 163, 2311, 158, 1654,
	1651, 1650, 13, 103, 62, 1649, 59, 1648, 1647, 53,
	1646, 99, 112, 1136, 35, 1645, 1642, 147, 24, 28,
	2333, 102, 148, 134, 117, 1640, 1639, 1637, 49, 1636,
	4, 1635, 1632, 15, 50, 11, 1631, 18, 17, 1628,
	1624, 136, 1623, 54, 106, 110, 69, 121, 82, 1621,
	78, 12, 74, 1619, 16, 1618, 32, 75, 141, 1617,
	57, 151, 60, 30, 58, 104, 1616, 1615, 1613, 79,
	1606, 101, 65, 1605, 1604, 76, 1602, 120, 140, 1601,
	1600, 139, 1599, 1598, 1597, 155, 1595, 1592, 154, 1591,
	8, 37, 61, 10, 109, 105, 27, 1590, 22, 1588,
	1837, 668, 788, 21, 46, 43, 81, 47, 51, 23,
	1587, 1586, 108, 1583, 1582, 1581, 1579, 1576, 80, 1575,
	68, 142, 38, 52, 98, 34, 36, 85, 123, 149,
	107, 1574, 1569, 116, 1562, 66, 1554, 1552, 1241, 113,
	1551, 1549, 1548, 1096, 930, 702, 96, 1547, 1546, 577,
	187, 1536, 1534, 114, 1531, 1530, 143, 145, 55, 1527,
	115, 1525, 94, 1524, 0, 92, 44, 1520, 118, 77,
	1518, 1508, 1507, 1501, 19, 2, 9, 3, 6, 5,
	26, 25, 1500, 1498, 137, 87, 1497, 1496, 150, 1495,
	1492, 1491, 31, 1490, 14, 1489, 20, 1488, 1483, 7,
	1, 144, 1476, 93, 1474, 1360, 1471, 146, 1468, 1467,
	1370, 84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 87, 87, 86, 86,
	89, 89, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 174, 174, 173, 18, 150,
	150, 19, 19, 19, 19, 20, 110, 110, 21, 21,
	21, 21, 22, 26, 241, 241, 241, 245, 245, 246,
	246, 247, 247, 247, 247, 247, 247, 247, 243, 243,
	29, 29, 29, 29, 29, 129, 125, 125, 127, 127,
	127, 127, 52, 124, 124, 124, 124, 126, 126, 126,
	126, 197, 196, 196, 202, 202, 202, 65, 65, 65,
	65, 65, 66, 66, 66, 195, 195, 195, 195, 203,
	203, 203, 203, 203, 203, 67, 67, 67, 201, 201,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 17, 242,
	242, 244, 244, 31, 31, 9, 9, 10, 10, 68,
	68, 69, 69, 132, 132, 132, 132, 70, 70, 47,
	47, 47, 131, 212, 212, 213, 213, 213, 213, 213,
	213, 214, 214, 214, 214, 214, 214, 214, 210, 210,
	211, 208, 208, 209, 209, 209, 209, 248, 248, 130,
	130, 73, 73, 217, 217, 217, 217, 215, 215, 215,
	215, 215, 218, 216, 219, 219, 219, 219, 219, 161,
	161, 161, 33, 11, 50, 50, 12, 8, 8, 114,
	114, 77, 77, 165, 165, 165, 59, 59, 42, 42,
	42, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 115, 115, 116, 116, 24, 28, 32, 32,
	32, 32, 32, 250, 250, 56, 56, 56, 56, 57,
	57, 128, 128, 128, 128, 128, 51, 7, 7, 49,
	49, 23, 23, 23, 23, 23, 62, 62, 121, 121,
	121, 123, 123, 122, 122, 122, 100, 100, 34, 82,
	82, 91, 91, 92, 92, 171, 93, 93, 27, 27,
	37, 37, 35, 35, 35, 35, 35, 35, 36, 36,
	38, 38, 38, 38, 38, 38, 38, 225, 225, 225,
	228, 228, 224, 226, 226, 227, 227, 249, 249, 101,
	101, 101, 72, 71, 71, 75, 75, 74, 76, 76,
	164, 98, 98, 98, 98, 117, 118, 118, 119, 119,
	120, 120, 97, 97, 147, 147, 39, 39, 81, 81,
	83, 83, 138, 138, 139, 139, 137, 137, 137, 166,
	166, 166, 166, 167, 167, 167, 167, 167, 167, 162,
	162, 162, 162, 163, 163, 172, 172, 104, 104, 104,
	104, 102, 102, 103, 103, 168, 168, 168, 168, 99,
	99, 169, 169, 169, 133, 133, 175, 175, 175, 80,
	80, 80, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 177, 177, 177, 177, 179,
	179, 179, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 180, 180, 187, 187,
	188, 188, 189, 190, 181, 181, 182, 182, 183, 184,
	191, 191, 191, 191, 193, 193, 185, 185, 185, 185,
	185, 186, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 220,
	220, 220, 220, 220, 220, 220, 222, 222, 223, 223,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 229, 229, 230,
	230, 232, 232, 233, 233, 234, 235, 235, 235, 236,
	237, 237, 231, 231, 238, 238, 238, 239, 239, 240,
	240, 240, 240, 240, 152, 152, 152, 153, 153, 154,
	88, 88, 149, 149, 148, 148, 148, 151, 151, 105,
	105, 192, 192, 192, 192, 192, 192, 192, 106, 106,
	106, 113, 107, 107, 108, 108, 108, 108, 108, 108,
	144, 145, 109, 109, 109, 146, 146, 155, 159, 159,
	158, 157, 157, 156, 156, 136, 136, 136, 136, 135,
	134, 94, 94, 251, 251, 160, 160, 95, 95, 96,
	90, 90, 170, 170, 170, 170, 84, 84, 64, 64,
	85, 85, 60, 60, 63, 63, 61, 61, 61, 61,
	78, 78, 79, 79, 58, 58, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 194, 194, 194,
	53, 53, 53, 54, 54, 55, 55, 199, 199, 199,
	200, 200, 200, 200, 198, 198, 198, 198, 198, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 4, 4, 2, 2,
	0, 2, 0, 8, 8, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 5, 2, 0, 6, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 4, 7, 3,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 3,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 1, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -227, 92, 100, 122, 196,
	99, 85, 116, 210, 217, -35, -37, 225, -129, 226,
	34, 235, 58, 95, 212, 207, 256, 66, -225, -38,
	-36, 303, 278, 284, 220, -39, 243, 270, 306, 243,
	130, 78, 273, -60, -53, 4, -204, -206, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 151, 154, 157, 159, 160, 161, 162, 163, 165,
	166, 168, 170, 167, 173, 175, 176, 182, 185, 188,
	189, 190, 191, 194, 196, 198, 199, 200, 202, 203,
	207, 205, 206, 208, 210, 212, 213, 215, 217, 218,
	219, 222, 223, 225, 226, 228, 231, 234, 235, 236,
	239, 237, 233, 242, 244, 245, 252, 256, 257, 258,
	259, 262, 263, 264, 267, 268, 269, 274, 279, 280,
	281, 282, 28, 35, 36, 37, 38, 40, 41, 44,
	45, 49, 50, 51, 53, 80, 82, 83, 98, 101,
	102, 108, 118, 120, 125, 126, 135, 136, 137, 138,
	140, 149, 172, 174, 183, 187, 193, 195, 201, 214,
	221, 229, 230, 238, 240, 247, 248, 249, 253, 254,
	270, 271, 87, 134, 264, 263, 78, 130, 243, 273,
	-16, 303, -27, -6, -14, -4, -23, -34, -13, -30,
	-17, -31, -15, 23, -198, 4, -204, -206, -205, -207,
	55, 67, 115, 133, 127, 142, 144, 150, 152, 164,
	184, 186, 211, 227, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 42, 47, 48, 52, 54, 56, 62,
	66, 70, 71, 72, 73, 74, 75, 84, 86, 88,
	89, 90, 93, 95, 97, 103, 104, 105, 111, 113,
	114, 116, 119, 121, 128, 130, 132, 139, 141, 147,
	148, 153, 155, 156, 169, 171, 177, 178, 179, 180,
	181, 192, 197, 204, 209, 220, 224, 232, 241, 243,
	246, 250, 251, 255, 260, 261, 265, 266, 272, 273,
	275, 276, 277, 278, -53, -53, -53, 196, 22, -245,
	22, -246, -247, 66, 92, 116, 220, 134, 87, 263,
	-245, -57, 217, -53, -125, 154, 223, 214, 252, -126,
	-124, -197, 247, 163, -86, -53, 4, 22, 78, 57,
	79, 117, 130, 131, 62, 63, 146, 244, 247, 252,
	66, -250, 252, 252, -250, -250, -56, 252, 250, -57,
	-249, 243, 243, 265, 273, -114, 78, 261, -36, -38,
	-37, -74, -75, 260, 139, 97, 181, -35, -37, -225,
	-228, 202, -224, -53, -228, -71, -72, 22, 89, 307,
	-168, -60, 179, -96, 303, -3, -168, 125, -60, -63,
	125, -60, -53, -168, 125, 114, 303, -94, -136, -135,
	-134, 301, 305, 114, 141, 141, -169, -168, -53, 125,
	-64, 125, -63, -87, 125, -86, -87, 125, -174, -173,
	-200, 4, -204, -206, -205, 270, 243, 130, -150, 303,
	-110, 303, -53, 22, 178, 307, 178, -53, -125, 51,
	-125, 303, -127, -51, -52, 143, 198, 250, 288, 114,
	282, -67, 5, 84, -89, 305, 114, -242, 178, 114,
	114, 114, 114, 114, 114, 282, 143, 198, 243, 273,
	-128, -51, -52, -128, 250, -57, -99, -168, -86, 125,
	-53, -86, 130, -53, 125, -74, -75, -98, -117, -118,
	153, 177, -101, 22, 89, -101, -101, 43, 304, 304,
	307, -228, -79, 303, -90, -170, -140, 296, -142, 294,
	295, 300, 169, 283, -152, -60, -143, 9, 303, -155,
	-222, -37, 98, 29, -153, -154, 214, -53, 7, 8,
	5, 6, -58, -177, -186, 255, 103, 171, 47, -220,
	-221, 4, -204, -199, -178, -188, -182, -185, 140, 55,
	71, 74, 72, 75, 224, 265, 48, 28, 101, 102,
	187, 193, 240, 253, 254, 125, 172, 126, 53, 118,
	149, 91, 36, 38, 40, 41, 49, 50, 80, 82,
	83, 108, 135, 136, 137, 138, 174, 201, 229, 238,
	248, 249, 271, -205, -189, -190, -183, -184, -191, -90,
	-96, 296, -60, 303, -95, -160, -140, 84, -44, 205,
	-43, 21, 23, 92, 268, 98, 233, 233, 205, 98,
	308, 205, 205, 98, 236, 304, -84, -60, -136, -140,
	-198, 296, -169, -62, -60, -62, 225, -53, 30, 98,
	-46, 307, 46, 208, 98, -46, 307, 98, -46, 98,
	304, 307, -168, 125, -63, 30, -149, -175, -176, -178,
	-187, -181, -185, -186, 39, 45, 44, 245, 221, 230,
	37, 135, 136, 137, 138, 229, 36, 201, 108, 91,
	83, 82, 174, 41, 40, -189, -190, -183, -184, 80,
	248, 249, 140, 38, 50, 49, 271, 238, -88, -140,
	-241, -85, 243, 78, -61, -53, 296, -247, -241, 30,
	-88, 307, 307, 151, -66, 157, 168, 123, -196, 84,
	-202, -195, -161, 9, 255, 103, 178, -201, 8, 295,
	-194, -200, 5, 7, 294, -196, 84, 69, -203, 5,
	4, -186, -161, 84, 154, 305, -198, -197, -244, 111,
	-241, -197, -197, -197, -197, -197, -53, 151, -197, -197,
	307, 307, -57, -46, 307, 303, -73, 169, -226, 278,
	-73, 303, -54, 125, -53, -49, 94, 169, -98, -118,
	-117, -119, -140, 22, -140, -142, -36, -36, -36, -76,
	-164, -140, -224, 30, -78, -53, -81, 307, 114, 10,
	11, 54, 33, 294, 295, 296, 297, 109, 298, 291,
	292, 293, 290, 286, 287, 288, 60, 158, 216, 13,
	14, 15, 26, 180, 152, 283, 127, 227, 300, 16,
	17, 18, 142, 35, 128, 30, 4, -140, -140, -140,
	-140, -140, 186, -37, -140, -88, -94, -37, -148, 301,
	303, -94, 303, 5, 5, 303, -156, -140, -229, 279,
	111, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 195, -193,
	274, -193, -193, -179, 303, -179, -180, 303, -179, 280,
	284, 303, -81, -60, 307, 304, 307, 250, -115, 62,
	56, -131, 125, 56, -208, -53, 62, -209, 52, 261,
	197, 113, -115, 62, -115, 62, 62, -168, 33, 33,
	250, -63, -53, 250, 250, -168, 114, 304, 307, 302,
	311, -133, 276, -121, -27, 303, 84, 30, -121, -91,
	-92, -171, -93, -60, 303, -53, -53, -63, -64, -86,
	-87, -87, -16, -173, 98, -19, -27, -23, -34, -13,
	304, 307, -80, 29, -111, 303, 281, 161, 81, 124,
	160, -112, 219, 304, 307, 250, 307, -85, -78, -135,
	-134, 114, 252, 304, -52, -51, -65, 200, 231, 206,
	222, 307, 8, 7, 7, 5, -198, -243, -53, -52,
	-51, -168, -68, -78, -69, -53, -132, -131, -210, -211,
	-208, 130, 261, 104, 30, 98, -50, 191, 30, 178,
	169, 288, 98, -120, 214, 215, 307, -42, 31, 88,
	303, 307, 304, -133, -170, -83, -166, -168, -37, -167,
	303, -175, -175, -86, 247, -140, -140, -140, -140, -140,
	-140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
	-140, -140, -140, -140, -140, -140, -140, 152, 127, 227,
	35, 128, -140, 250, -140, -140, -140, -140, 171, 169,
	255, 103, 262, 89, 175, -251, 241, 32, -146, -37,
	303, -198, -152, 214, 303, 304, 307, -88, -151, 302,
	-148, -88, 304, 304, -88, 272, 22, 89, 296, -111,
	7, -159, -158, 275, -230, 106, 119, 303, 304, 304,
	-140, -140, -105, -192, -88, 4, 281, 161, 81, 124,
	160, 219, -105, -106, -140, -88, -107, -141, -142, 294,
	295, 300, 303, 214, -108, -140, -88, -140, 42, 148,
	251, -109, -140, 114, -88, -140, -140, -140, -88, -88,
	-88, 303, 7, 7, 247, 247, 7, -133, 304, -160,
	-43, -60, -53, -53, 169, -131, 125, -48, 169, -175,
	-53, 303, 303, 145, 145, -53, -53, 125, -53, 125,
	-53, -53, -44, 205, 303, 303, -53, 205, -53, -60,
	205, 236, 114, -60, -140, -100, 209, -140, -100, -123,
	178, -84, 270, -53, 209, -82, 307, 114, 288, -84,
	-46, -46, -46, -168, -175, 301, 301, 7, 250, 250,
	250, 250, 303, -140, -243, -61, -243, -51, 259, 59,
	200, -202, -111, 307, 304, 304, 307, -54, 130, -54,
	-27, -86, 5, -27, -60, 98, 5, -53, -164, -19,
	-53, -97, 119, -172, 307, 285, 67, -104, 144, 164,
	115, 150, 211, 133, -137, 308, -163, -162, 30, -53,
	-37, -167, -166, 282, -140, -140, 250, -251, 241, -146,
	-140, 171, 255, 103, 262, 89, 175, 114, 303, -141,
	-141, -88, 303, -88, -140, 302, 302, 307, 304, -75,
	307, -74, -140, -88, -88, 304, 304, -157, -158, 93,
	-140, -235, 185, 303, 303, -140, 30, 307, 304, 114,
	304, 304, -113, 192, 304, 10, 11, 294, 295, 296,
	297, 109, 298, 291, 292, 293, 290, 286, 287, 288,
	60, 158, 216, 13, 14, 15, 142, 128, -141, -141,
	-141, -88, 303, 304, -144, -145, 114, 111, 30, -109,
	-109, -109, 304, 114, -88, 307, 307, 307, 304, 304,
	304, 7, 304, 307, 304, 282, 282, 304, -97, 250,
	250, 98, 169, 267, -212, -209, -140, -78, 303, 303,
	-41, 92, 225, -116, 98, -46, 98, -46, 250, -115,
	62, -88, -88, 250, 250, 236, 302, -90, 209, 61,
	304, -90, -133, -92, -83, -160, 304, 302, 7, 7,
	304, 161, 124, 160, -112, 160, -112, -112, 7, -53,
	-70, 129, -132, 303, -54, 303, 303, -73, 303, -53,
	-49, 304, -147, 121, 43, -166, 175, 144, 144, -166,
	-104, 144, -102, 184, -102, -102, -163, -198, 309, -53,
	303, 304, -140, -140, -141, -141, 114, 303, -140, -149,
	26, 26, 304, -88, 304, 307, 304, -148, 304, 272,
	-75, -75, -75, 5, 95, -140, 246, -236, -53, 303,
	276, -74, 304, -175, -175, -140, -144, -140, -175, -175,
	-141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
	-141, -141, -141, -141, -141, -141, -141, -141, -141, 89,
	169, 175, -141, 307, -88, 304, -145, -144, -140, -140,
	-175, 304, 304, 304, -88, -140, -140, -140, 304, 7,
	-147, -53, -53, -131, 98, -213, 62, -214, 54, 104,
	66, 169, 171, 261, 197, 52, 84, 204, 304, 304,
	-78, -78, 169, 84, 169, 84, 77, 257, -53, -53,
	-60, -53, -53, 304, 304, -53, -60, -90, -122, 303,
	178, -27, -100, 288, 302, 302, 304, 128, -77, -165,
	-53, -223, 303, -220, -221, -58, 303, -78, -68, 30,
	-77, 178, -232, 277, -140, -88, 242, -166, -166, -103,
	266, 178, 144, -166, -139, -138, 112, 167, 303, -78,
	-162, 26, 26, -140, -149, 304, -140, -140, 304, -140,
	5, -140, 304, 304, 304, -140, -237, -53, -140, 304,
	304, 304, -145, 114, 89, 175, 303, -140, 304, 304,
	307, 304, 304, 304, -232, -131, -53, -86, -53, 104,
	125, 171, 145, 303, -141, -60, -130, -248, 65, 239,
	304, 304, 171, 171, -140, -175, -46, -46, 250, 250,
	90, -78, 62, -96, -37, 303, 188, 304, 307, -59,
	-94, 54, -59, -140, 303, -77, 304, 304, -27, 304,
	-60, -233, -234, -53, 247, -103, 303, -140, -166, 307,
	310, 288, -78, 304, -140, -140, 304, 304, -75, -231,
	190, 304, -141, 114, 303, -149, 304, -140, -214, -54,
	169, -140, -55, 303, -70, 303, 204, -45, 54, -53,
	-53, 263, 170, 304, -53, -53, -130, -165, -42, -86,
	-42, 304, -88, 304, -70, -130, 303, 307, 30, -143,
	-58, -53, -78, -138, -198, 304, 304, -75, 43, -141,
	-149, 304, 304, 98, 304, -217, 159, -53, -78, -60,
	-40, 266, -86, 225, -133, 303, -70, -59, -75, -130,
	-70, -77, -234, -236, 303, 304, -238, 199, 215, -88,
	304, 104, -215, -218, -216, 178, 115, 189, 228, 304,
	304, -73, -140, -91, -78, -42, 304, -70, 304, -88,
	304, -239, -240, 35, 258, 69, -140, -239, -53, -216,
	178, -218, 178, 263, 87, -217, -133, 304, -130, -75,
	-240, 194, 110, 214, 194, 110, -219, 166, 208, 46,
	225, -219, -215, -47, 46, 208, -70, 304, 26, 20,
	171, 84, -240,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 386, 0, 0,
	0, 0, 0, 0, 0, 358, -2, 0, 134, 0,
	314, 0, 314, 314, 318, 0, 388, 280, 385, -2,
	396, 0, 0, 0, 394, 372, 0, 0, -2, 0,
	0, 0, 0, 0, 792, 820, 821, 822, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 0, 198, 834, 835, 836, 837, 838,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 100, 107, 108, 905, 110, 0,
	117, 118, 119, 121, 122, 123, 124, 125, 126, 127,
	0, 307, 919, 320, 130, 883, 923, 990, 937, 137,
	147, 0, 996, -2, 151, 78, 180, 181, 182, 0,
	184, 200, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 325, 313, 325, 310, 311, 312, 315, 0, 306,
	0, 387, 0, 0, 0, 0, 0, 279, -2, 368,
	369, -2, 0, 391, 391, 391, 0, 0, 369, 0,
	377, 909, 380, 803, 378, 0, 0, 393, 392, 0,
	373, 455, 0, 416, 0, 2, 0, 975, 455, 0,
	975, 795, 0, 0, 975, 0, 0, 793, 771, 765,
	766, 0, 0, 0, 0, 0, 0, 461, 68, 975,
	51, 975, 788, 51, 975, 76, 51, 975, 0, 95,
	97, 830, 831, 832, 833, 1001, 0, 0, 0, 0,
	105, 0, 109, 111, 0, 0, 0, 319, 131, 964,
	133, 0, 136, 138, 139, 0, 0, 0, 0, 0,
	0, 150, 175, 176, 79, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 195, 0, 0,
	308, 321, 322, 309, 0, 317, 51, 459, 252, 975,
	384, 252, 824, 330, 975, -2, 0, 364, 403, 404,
	0, 0, 0, 389, 390, 0, 0, 0, 360, 361,
	0, 379, 0, 0, 419, 780, 784, 785, 548, 0,
	0, 0, 0, 0, 0, 637, 638, 639, 0, 641,
	642, 643, 969, 0, 647, 648, 990, 792, 806, 807,
	808, 809, 0, 0, 0, 814, 815, 816, 764, 688,
	657, -2, -2, 804, 485, 486, 487, 488, -2, 1003,
	661, 663, 665, 666, 667, 668, 0, 953, 970, 971,
	986, 987, 995, 999, 1000, 975, 983, 976, 965, 973,
	982, 863, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 829, 510, 511, 516, 517, 519, 419,
	417, 456, 457, 0, 0, 777, 775, 776, 28, 303,
	30, 0, 303, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 786, 772, 0,
	769, 770, 465, 0, 336, 0, 0, 462, 0, 0,
	70, 0, 49, 50, 0, 72, 0, 0, 74, 0,
	386, 0, 0, 975, 0, 386, 0, 722, 471, 472,
	473, 474, 475, 545, 478, 479, 480, 481, 482, 483,
	484, 492, 493, 494, 495, 496, 497, 498, 507, 0,
	491, 491, 491, 504, 505, 508, 509, 514, 515, 526,
	527, 529, 531, 525, 525, 525, 522, 523, 0, 720,
	0, 114, 0, 858, 790, 796, 797, 120, 0, 0,
	0, 0, 0, 0, 142, 162, 163, 164, 143, 145,
	152, 154, 155, 156, 165, 166, 167, 168, 269, 0,
	271, 178, 179, 817, 0, 144, 146, 148, 149, 169,
	170, 0, 172, 173, 174, 0, 80, 183, 185, 0,
	199, 186, 187, 188, 189, 190, 191, 194, 196, 197,
	0, 0, 316, 272, 0, 210, 0, 0, 275, 383,
	0, 0, 0, 975, 823, 327, 0, 0, 367, 401,
	402, 405, 408, 409, 406, 548, 374, 375, 376, 397,
	398, 290, 381, 0, 0, 800, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 783, 553, 554, 555,
	577, 578, 0, -2, 720, 0, 644, 645, 646, 0,
	0, -2, 0, 811, 545, 0, 0, 763, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 500, 513,
	524, 521, 520, 502, 0, 501, 499, 0, 503, 0,
	0, 0, 465, 0, 0, 779, 0, 0, 0, 0,
	302, 32, 975, 0, 53, 0, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 794, 0, 0, 0, 0, 0, 0, 767,
	0, 347, 0, 347, 338, 0, 0, 0, 334, 350,
	351, 353, 354, 0, 0, 463, 69, 789, 51, 77,
	51, 51, 83, 96, 0, 98, 101, 102, 103, 104,
	99, 0, 466, 468, 476, 0, 532, 533, 534, 535,
	536, 537, 546, 106, 0, 0, 0, 115, 116, 798,
	799, 0, 0, 135, 140, 141, 326, 0, 159, 0,
	161, 0, 270, 819, 818, 545, 81, 201, 128, 323,
	324, 460, 0, 0, 209, 800, 211, 213, 214, 215,
	216, 824, 0, 824, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 407, 410, 411, 0, 400, 288, 289,
	386, 0, 802, 413, 781, 446, 420, 428, 444, 431,
	0, 549, 550, 551, 0, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, -2, -2, -2, 569, 570,
	571, -2, -2, -2, 575, 576, -2, 0, 0, 0,
	774, 0, -2, 0, 585, -2, -2, -2, 589, 0,
	592, 594, 596, 0, 0, 0, 0, 773, 606, 755,
	0, 782, 591, 0, 0, 640, 0, 0, 0, 726,
	727, 0, -2, 649, 396, 0, 0, 0, 0, 812,
	0, 762, 758, 0, 698, 0, 0, 0, 662, 664,
	0, 0, 0, 0, 730, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 720, 740, 0, 0, 608, 0,
	0, 0, 0, 990, 0, 720, 748, 0, 0, 0,
	0, 0, 720, 0, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 458, 778,
	31, 292, 0, 0, 0, 34, 975, 42, 0, 224,
	0, 0, 0, 0, 0, 305, 43, 975, 51, 975,
	51, 44, 29, 303, 0, 0, 296, 0, 291, 294,
	0, 59, 0, 787, 0, 67, 0, 464, 331, 332,
	0, 0, 340, 337, 0, 465, 0, 0, 0, 0,
	71, 73, 75, 0, 723, 0, 0, 0, 0, 0,
	0, 0, 0, 721, 112, 791, 113, 132, 157, 158,
	160, 153, 171, 0, 218, 251, 0, 0, 824, 0,
	207, 252, 274, 276, 0, 0, 329, 330, 399, 0,
	801, 415, 0, 418, 0, 0, 0, 0, 0, 0,
	452, 452, 452, 450, 444, 0, 430, 443, 0, 442,
	-2, 431, 0, 0, -2, -2, 0, 0, 0, 607,
	-2, 590, 593, 595, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 721, 724, 725, 0, -2, 0,
	0, 395, 396, 396, 396, 655, 0, 0, 759, 0,
	0, 656, 0, 0, 0, 0, 0, 0, 671, 0,
	672, 673, 0, 0, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 612,
	613, 0, 0, 675, 746, 747, 0, 0, 0, 0,
	0, 0, 680, 0, 753, 0, 0, 0, 684, 685,
	686, 0, 489, 0, 506, 528, 530, 518, 415, 0,
	0, 0, 0, 52, 222, 241, 0, 0, 0, 0,
	36, 0, 0, 0, 0, 40, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 60, 768, 346, 0, 345,
	0, 335, 347, 352, 349, 355, 0, 469, 0, 0,
	477, 538, 539, 540, 541, 542, 543, 544, 0, 129,
	205, 0, 212, 0, 0, 0, 210, 0, 0, 0,
	328, 382, 692, 0, 0, 421, 0, 0, 0, 0,
	0, 0, 447, 451, 448, 449, 429, 426, 0, 440,
	0, 433, 552, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 756, 0, 715, 0, -2, 728, 650, 0,
	0, 0, 0, 813, 757, 761, 0, 696, 697, 701,
	0, 0, 660, 0, 0, 729, 739, 741, 609, 610,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	-2, -2, -2, 627, 628, 629, -2, -2, -2, 0,
	0, 0, 742, 0, 0, 718, 744, 745, 750, 751,
	0, 677, 678, 679, 752, 0, 0, 0, 512, 0,
	692, 298, 300, 33, 0, 223, 0, 226, 0, 0,
	0, 0, 232, 233, 0, 0, 0, 0, 243, 250,
	0, 0, 0, 48, 0, 0, 304, 0, 51, 51,
	293, 0, 0, 203, 204, 297, 295, 333, 0, 0,
	0, 339, 348, 0, 470, 467, 547, 0, 0, 281,
	287, 287, 0, 658, 659, 0, 0, 0, 0, 0,
	0, 0, 370, 0, 414, 412, 0, 434, 0, 436,
	0, 0, 0, 438, 0, 424, 0, 423, 0, 0,
	432, 0, 0, -2, 0, 600, -2, -2, 714, 721,
	810, 396, 651, 653, 654, 760, 703, 700, 0, 687,
	669, 670, 738, 0, 0, 0, 0, 721, 717, 676,
	0, 682, 683, 490, 371, 35, 0, 227, 228, 824,
	0, 231, 234, 0, 236, 826, 218, 0, 247, 248,
	245, 0, 37, 38, 47, 55, 39, 45, 0, 0,
	0, 0, 0, 356, 357, 0, 0, 250, 0, 290,
	805, 0, 290, 0, 0, 0, 240, 218, 208, 250,
	0, 691, 693, 0, 0, 435, 0, 454, 437, 0,
	427, 0, 0, 441, -2, -2, 601, 716, 0, 396,
	0, 689, -2, 0, 0, 0, 719, 0, 225, 229,
	0, 0, 256, 0, 244, 0, 0, 57, 0, 299,
	301, 0, 342, 465, 344, 0, 218, 282, 283, 286,
	284, 287, 396, 250, 206, 218, 0, 0, 0, 445,
	0, 0, 0, 425, 422, 439, 652, 706, 0, -2,
	0, 635, 681, 0, 235, 261, 0, 0, 0, 252,
	41, 0, 54, 0, 343, 0, 238, 290, 0, 218,
	277, 0, 694, 695, 0, 453, 0, 0, 0, 702,
	636, 0, 237, 257, 258, 0, 253, 254, 255, 825,
	249, 256, 56, 465, 0, 285, 650, 239, 250, 396,
	699, 704, 707, -2, 940, 855, 0, 705, 230, 259,
	0, 260, 0, 0, 0, 261, 341, 221, 218, 0,
	0, 709, 710, 711, 712, 713, 262, 0, 265, 266,
	0, 263, 246, 217, 219, 220, 278, 0, 0, 264,
	267, 268, 708,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 292, 3, 298, 293, 3,
	303, 304, 296, 294, 307, 295, 305, 297, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 311, 306,
	286, 288, 287, 3, 308, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 301, 3, 302, 291, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 309, 290, 310, 300,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 289, 57629, 299,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:717
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:723
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:844
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:921
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1051
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1429
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1623
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = DropDefault
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			return unimplemented(sqllex)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			return unimplemented(sqllex)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1849
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = true
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = false
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1969
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1973
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = Ascending
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = Descending
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2027
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2028
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = true
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = false
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2042
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2085
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.str = ""
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.str = ""
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2179
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2186
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2228
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			return unimplemented(sqllex)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2258
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2485
		{
			return unimplemented(sqllex)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2486
		{
			return unimplemented(sqllex)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			return unimplemented(sqllex)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2490
		{
			return unimplemented(sqllex)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			return unimplemented(sqllex)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2494
		{
			return unimplemented(sqllex)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2497
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2498
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{
			return unimplemented(sqllex)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2506
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = true
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = false
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = false
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = true
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2530
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2630
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &From{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.str = astFullJoin
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.str = astLeftJoin
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.str = astRightJoin
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.str = astInnerJoin
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2875
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2965
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2969
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2970
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2971
		{
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2979
		{
			return unimplemented(sqllex)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3026
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3035
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = nil
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3156
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3188
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3228
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
			return unimplemented(sqllex)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			return unimplemented(sqllex)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
			return unimplemented(sqllex)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
			return unimplemented(sqllex)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			return unimplemented(sqllex)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			return unimplemented(sqllex)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			return unimplemented(sqllex)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			return unimplemented(sqllex)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			return unimplemented(sqllex)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3272
		{
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3276
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3308
		{
			return unimplemented(sqllex)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			return unimplemented(sqllex)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3719
		{
			return unimplemented(sqllex)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3720
		{
			return unimplemented(sqllex)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3743
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			return unimplemented(sqllex)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			return unimplemented(sqllex)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3763
		{
			return unimplemented(sqllex)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			return unimplemented(sqllex)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			return unimplemented(sqllex)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3782
		{
			return unimplemented(sqllex)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			return unimplemented(sqllex)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3812
		{
			return unimplemented(sqllex)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3856
		{
			return unimplemented(sqllex)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3857
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3860
		{
			return unimplemented(sqllex)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3861
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = Window(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.str = ""
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3948
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3950
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3953
		{
			return unimplemented(sqllex)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3954
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3960
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3961
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4300
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4301
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4461
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4497
		{
			return unimplemented(sqllex)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = DNull
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
