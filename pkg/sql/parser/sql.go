// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:348
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const RANGE = 57551
const READ = 57552
const REAL = 57553
const RECURSIVE = 57554
const REF = 57555
const REFERENCES = 57556
const REGCLASS = 57557
const REGPROC = 57558
const REGPROCEDURE = 57559
const REGNAMESPACE = 57560
const REGTYPE = 57561
const RENAME = 57562
const REPEATABLE = 57563
const RELEASE = 57564
const RESET = 57565
const RESTORE = 57566
const RESTRICT = 57567
const RETURNING = 57568
const REVOKE = 57569
const RIGHT = 57570
const ROLLBACK = 57571
const ROLLUP = 57572
const ROW = 57573
const ROWS = 57574
const RSHIFT = 57575
const SAVEPOINT = 57576
const SCATTER = 57577
const SEARCH = 57578
const SECOND = 57579
const SELECT = 57580
const SERIAL = 57581
const SERIALIZABLE = 57582
const SESSION = 57583
const SESSION_USER = 57584
const SET = 57585
const SETTING = 57586
const SETTINGS = 57587
const SHOW = 57588
const SIMILAR = 57589
const SIMPLE = 57590
const SMALLINT = 57591
const SMALLSERIAL = 57592
const SNAPSHOT = 57593
const SOME = 57594
const SPLIT = 57595
const SQL = 57596
const START = 57597
const STATUS = 57598
const STDIN = 57599
const STRICT = 57600
const STRING = 57601
const STORING = 57602
const SUBSTRING = 57603
const SYMMETRIC = 57604
const SYSTEM = 57605
const TABLE = 57606
const TABLES = 57607
const TEMPLATE = 57608
const TESTING_RANGES = 57609
const TESTING_RELOCATE = 57610
const TEXT = 57611
const THEN = 57612
const TIME = 57613
const TIMESTAMP = 57614
const TIMESTAMPTZ = 57615
const TO = 57616
const TRAILING = 57617
const TRANSACTION = 57618
const TREAT = 57619
const TRIM = 57620
const TRUE = 57621
const TRUNCATE = 57622
const TYPE = 57623
const UNBOUNDED = 57624
const UNCOMMITTED = 57625
const UNION = 57626
const UNIQUE = 57627
const UNKNOWN = 57628
const UPDATE = 57629
const UPSERT = 57630
const USER = 57631
const USERS = 57632
const USING = 57633
const UUID = 57634
const VALID = 57635
const VALIDATE = 57636
const VALUE = 57637
const VALUES = 57638
const VARCHAR = 57639
const VARIADIC = 57640
const VIEW = 57641
const VARYING = 57642
const WHEN = 57643
const WHERE = 57644
const WINDOW = 57645
const WITH = 57646
const WITHIN = 57647
const WITHOUT = 57648
const YEAR = 57649
const ZONE = 57650
const NOT_LA = 57651
const WITH_LA = 57652
const AS_LA = 57653
const POSTFIXOP = 57654
const UMINUS = 57655

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5493

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	332, 31,
	-2, 431,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	1, 404,
	187, 404,
	226, 404,
	328, 404,
	330, 404,
	332, 404,
	-2, 414,
	-1, 66,
	1, 407,
	187, 407,
	226, 407,
	328, 407,
	330, 407,
	332, 407,
	-2, 413,
	-1, 75,
	1, 31,
	332, 31,
	-2, 431,
	-1, 437,
	1, 200,
	332, 200,
	-2, 1006,
	-1, 478,
	108, 441,
	160, 441,
	185, 441,
	-2, 410,
	-1, 481,
	108, 440,
	160, 440,
	185, 440,
	-2, 408,
	-1, 618,
	108, 440,
	160, 440,
	185, 440,
	-2, 411,
	-1, 678,
	329, 938,
	-2, 931,
	-1, 679,
	329, 939,
	-2, 932,
	-1, 685,
	5, 607,
	329, 607,
	-2, 1115,
	-1, 709,
	5, 568,
	-2, 1089,
	-1, 710,
	5, 601,
	329, 601,
	-2, 1091,
	-1, 711,
	5, 576,
	-2, 1092,
	-1, 712,
	5, 575,
	-2, 1093,
	-1, 713,
	5, 601,
	329, 601,
	-2, 1096,
	-1, 714,
	5, 601,
	329, 601,
	-2, 1097,
	-1, 715,
	5, 602,
	-2, 1100,
	-1, 716,
	5, 562,
	-2, 1101,
	-1, 717,
	5, 562,
	-2, 1102,
	-1, 718,
	5, 583,
	-2, 1106,
	-1, 719,
	5, 563,
	-2, 1111,
	-1, 720,
	5, 564,
	-2, 1112,
	-1, 721,
	5, 565,
	-2, 1113,
	-1, 722,
	5, 566,
	-2, 1114,
	-1, 723,
	5, 562,
	-2, 1119,
	-1, 724,
	5, 569,
	-2, 1124,
	-1, 725,
	5, 567,
	-2, 1127,
	-1, 726,
	5, 599,
	329, 599,
	-2, 1129,
	-1, 727,
	5, 603,
	-2, 1132,
	-1, 728,
	5, 605,
	-2, 1133,
	-1, 729,
	5, 598,
	329, 598,
	-2, 1138,
	-1, 1005,
	99, 414,
	108, 414,
	144, 414,
	160, 414,
	185, 414,
	191, 414,
	284, 414,
	-2, 726,
	-1, 1014,
	329, 915,
	-2, 903,
	-1, 1233,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 642,
	-1, 1234,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 643,
	-1, 1235,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 644,
	-1, 1239,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 648,
	-1, 1240,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 649,
	-1, 1241,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 650,
	-1, 1244,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 655,
	-1, 1250,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 657,
	-1, 1252,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 661,
	-1, 1253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 662,
	-1, 1254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 663,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 664,
	-1, 1282,
	196, 797,
	-2, 800,
	-1, 1311,
	117, 837,
	329, 938,
	-2, 931,
	-1, 1312,
	117, 838,
	-2, 1085,
	-1, 1313,
	117, 839,
	-2, 1005,
	-1, 1314,
	117, 840,
	-2, 973,
	-1, 1315,
	117, 841,
	-2, 989,
	-1, 1316,
	117, 842,
	-2, 1004,
	-1, 1317,
	117, 843,
	-2, 1051,
	-1, 1477,
	99, 414,
	108, 414,
	144, 414,
	160, 414,
	185, 414,
	191, 414,
	284, 414,
	-2, 497,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 656,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 658,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 659,
	-1, 1505,
	196, 796,
	-2, 799,
	-1, 1697,
	1, 498,
	69, 498,
	99, 498,
	108, 498,
	118, 498,
	122, 498,
	124, 498,
	137, 498,
	144, 498,
	149, 498,
	157, 498,
	160, 498,
	172, 498,
	185, 498,
	187, 498,
	191, 498,
	226, 498,
	228, 498,
	284, 498,
	291, 498,
	302, 498,
	303, 498,
	311, 498,
	328, 498,
	330, 498,
	332, 498,
	333, 498,
	-2, 497,
	-1, 1699,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 660,
	-1, 1704,
	147, 0,
	-2, 676,
	-1, 1714,
	196, 798,
	-2, 801,
	-1, 1748,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 703,
	-1, 1749,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 704,
	-1, 1750,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 705,
	-1, 1754,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 709,
	-1, 1755,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 710,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	312, 0,
	313, 0,
	314, 0,
	-2, 711,
	-1, 1877,
	147, 0,
	-2, 677,
	-1, 1880,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 680,
	-1, 1881,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 682,
	-1, 1987,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 681,
	-1, 1988,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 683,
	-1, 1995,
	147, 0,
	-2, 712,
	-1, 2051,
	147, 0,
	-2, 713,
	-1, 2116,
	36, 0,
	131, 0,
	159, 0,
	247, 0,
	309, 0,
	315, 0,
	-2, 1088,
}

const sqlPrivate = 57344

const sqlLast = 29746

var sqlAct = [...]int{

	679, 1651, 2115, 2093, 2057, 2140, 2094, 1107, 1099, 2095,
	1921, 1692, 920, 2114, 1967, 1725, 1475, 482, 1947, 1842,
	1868, 1693, 677, 1168, 51, 1197, 290, 1661, 306, 805,
	676, 672, 1799, 88, 88, 88, 1598, 1785, 926, 1472,
	503, 1450, 489, 65, 655, 308, 88, 88, 88, 1853,
	768, 88, 527, 1599, 88, 1847, 1172, 545, 1566, 1448,
	1167, 1186, 88, 88, 774, 1669, 1565, 1212, 732, 1010,
	88, 88, 1280, 1516, 88, 1462, 922, 88, 88, 88,
	88, 1398, 1678, 88, 88, 669, 65, 1205, 292, 20,
	745, 1171, 766, 487, 1139, 1204, 1392, 742, 806, 638,
	1108, 1068, 1059, 789, 1457, 1290, 1267, 518, 1337, 1264,
	649, 1210, 299, 22, 1193, 1123, 946, 1091, 65, 297,
	30, 869, 1159, 296, 16, 298, 8, 778, 604, 775,
	1308, 1207, 747, 1132, 648, 1001, 539, 605, 639, 1044,
	1040, 481, 879, 546, 438, 537, 1101, 1800, 540, 1175,
	951, 621, 492, 66, 622, 620, 80, 871, 424, 671,
	867, 415, 434, 782, 20, 84, 533, 490, 626, 603,
	1504, 791, 1980, 67, 427, 1981, 1100, 435, 791, 305,
	31, 486, 305, 2131, 791, 1136, 771, 486, 22, 1104,
	278, 32, 56, 2110, 2105, 30, 1798, 1142, 1410, 16,
	2104, 8, 1473, 1142, 1092, 500, 2101, 1409, 506, 771,
	2091, 513, 2086, 1129, 509, 771, 1142, 58, 2082, 479,
	468, 771, 2035, 34, 64, 64, 1460, 64, 2053, 1137,
	2047, 1129, 2029, 771, 2025, 1798, 1095, 771, 494, 478,
	469, 71, 2020, 1989, 47, 2019, 1129, 75, 761, 1977,
	42, 42, 800, 42, 59, 1460, 953, 1092, 46, 43,
	43, 1974, 43, 952, 1975, 1961, 305, 73, 1798, 1138,
	1135, 1958, 1956, 1508, 771, 1798, 48, 1932, 1509, 1095,
	771, 44, 44, 1761, 44, 1711, 88, 88, 88, 88,
	88, 1931, 549, 1903, 1798, 1882, 1142, 1879, 1142, 74,
	1129, 1871, 1819, 1818, 1142, 1142, 1142, 69, 1434, 1797,
	1057, 64, 1798, 70, 1708, 1637, 487, 1142, 1098, 1632,
	1438, 1583, 1098, 1142, 1584, 1581, 1284, 1580, 1142, 1515,
	1142, 1579, 68, 1507, 1142, 1196, 1801, 42, 1142, 1140,
	1505, 71, 547, 1142, 1437, 1201, 43, 771, 771, 792,
	1146, 1141, 1128, 1142, 1142, 1129, 792, 1154, 634, 915,
	954, 955, 792, 45, 914, 861, 1097, 73, 44, 1098,
	1056, 799, 860, 1055, 800, 731, 771, 516, 562, 61,
	62, 33, 499, 957, 49, 880, 60, 522, 1861, 71,
	1476, 50, 893, 583, 71, 71, 2129, 71, 2113, 74,
	53, 2100, 55, 55, 2062, 55, 956, 69, 2048, 1134,
	633, 88, 57, 70, 1409, 73, 1959, 534, 1908, 1904,
	73, 73, 1896, 73, 1895, 1894, 88, 1890, 526, 88,
	88, 1133, 1103, 542, 542, 1889, 1888, 63, 543, 1833,
	1827, 1776, 1771, 1770, 1769, 1719, 1697, 74, 1668, 1641,
	1588, 1585, 74, 74, 1440, 74, 1573, 795, 1564, 1535,
	69, 69, 962, 69, 790, 1532, 70, 70, 88, 70,
	918, 88, 952, 88, 88, 88, 1531, 88, 1529, 1521,
	68, 71, 1520, 738, 1436, 68, 68, 1276, 1685, 55,
	1474, 524, 88, 1354, 1305, 1304, 619, 633, 1018, 1011,
	632, 68, 925, 88, 1727, 1536, 1537, 73, 2074, 2032,
	2018, 2017, 2016, 2008, 2006, 972, 549, 88, 1997, 1984,
	1970, 954, 955, 308, 549, 1954, 88, 1918, 1901, 1873,
	1836, 88, 88, 88, 1824, 88, 1804, 1703, 1683, 74,
	737, 1659, 1657, 1656, 957, 1654, 1639, 69, 1607, 1606,
	1563, 772, 618, 70, 88, 88, 1525, 1524, 1501, 1496,
	1269, 571, 88, 1425, 88, 1383, 1381, 956, 1368, 88,
	572, 1367, 291, 971, 954, 955, 549, 549, 1347, 780,
	1303, 1200, 1826, 973, 308, 1277, 88, 88, 812, 88,
	88, 88, 88, 88, 88, 88, 736, 957, 1045, 1048,
	88, 88, 610, 565, 567, 1052, 1038, 1542, 88, 2112,
	892, 522, 894, 1037, 1036, 1035, 88, 611, 1034, 614,
	956, 1536, 1537, 962, 1033, 839, 608, 924, 1032, 1031,
	1030, 1029, 606, 1028, 1027, 88, 1026, 1025, 88, 1024,
	1023, 1022, 1015, 479, 794, 765, 1004, 797, 68, 1368,
	919, 504, 637, 629, 630, 569, 954, 955, 558, 635,
	1552, 950, 534, 478, 556, 2084, 1979, 1884, 876, 876,
	958, 959, 960, 961, 963, 964, 972, 1862, 487, 957,
	1858, 1832, 770, 1831, 1686, 801, 1536, 1537, 1011, 642,
	1419, 803, 1418, 929, 1002, 738, 784, 781, 881, 1192,
	575, 2022, 956, 525, 954, 955, 1982, 1191, 577, 1451,
	1830, 1859, 1411, 917, 1092, 755, 1476, 1050, 853, 923,
	855, 1051, 1587, 1542, 854, 1586, 1480, 957, 1553, 595,
	896, 857, 578, 753, 1020, 1393, 889, 882, 888, 1848,
	576, 88, 1100, 1728, 973, 901, 858, 654, 754, 88,
	956, 1291, 1512, 88, 1136, 1041, 1405, 1594, 962, 2065,
	599, 88, 88, 2127, 898, 88, 916, 902, 903, 904,
	905, 906, 88, 2024, 933, 931, 932, 909, 910, 2126,
	479, 1431, 279, 479, 479, 1812, 88, 948, 88, 88,
	286, 88, 1145, 461, 88, 600, 88, 88, 1137, 88,
	942, 549, 738, 943, 944, 1062, 962, 467, 462, 466,
	78, 972, 1014, 1545, 1546, 1538, 1539, 1540, 1541, 1543,
	1544, 501, 1017, 476, 508, 511, 1120, 501, 967, 965,
	966, 958, 959, 960, 961, 963, 964, 1069, 1138, 1135,
	1942, 282, 65, 1080, 287, 1941, 1083, 65, 1940, 1939,
	1622, 547, 1073, 1075, 1042, 1043, 748, 1046, 749, 1621,
	954, 955, 1591, 1049, 77, 575, 1061, 1638, 1061, 1823,
	1590, 1102, 1618, 1102, 1060, 748, 1793, 749, 1483, 973,
	1424, 1423, 2023, 957, 1078, 1351, 748, 1053, 749, 964,
	283, 1422, 1094, 1124, 308, 1421, 1090, 1086, 1065, 1251,
	1072, 88, 1143, 1089, 1088, 576, 956, 1085, 1140, 1794,
	607, 515, 88, 88, 88, 1350, 1222, 1187, 913, 88,
	88, 912, 1158, 471, 1126, 1625, 88, 1115, 1125, 750,
	1127, 1106, 838, 1540, 1541, 1543, 1544, 1266, 1923, 1116,
	1117, 542, 1627, 542, 1121, 1118, 1266, 1119, 750, 554,
	1395, 895, 776, 1609, 88, 585, 568, 308, 1291, 750,
	1202, 2126, 962, 967, 965, 966, 958, 959, 960, 961,
	963, 964, 2072, 1046, 288, 1049, 887, 886, 1134, 880,
	877, 785, 2097, 1140, 2137, 1221, 812, 812, 1043, 1042,
	1148, 1071, 308, 759, 76, 1536, 1537, 596, 1147, 1403,
	1789, 1544, 1790, 1430, 2088, 1273, 2148, 472, 758, 289,
	1271, 1194, 1195, 758, 958, 959, 960, 961, 963, 964,
	1274, 1388, 416, 839, 839, 791, 756, 2089, 477, 79,
	1792, 756, 473, 501, 1385, 511, 763, 1795, 1399, 285,
	284, 757, 474, 421, 1165, 1399, 757, 1248, 417, 1162,
	1166, 911, 1164, 1213, 1220, 1379, 1646, 597, 890, 88,
	88, 88, 1353, 2098, 1469, 88, 2143, 780, 88, 1070,
	485, 762, 2011, 418, 88, 88, 88, 88, 88, 553,
	1190, 1288, 1616, 1432, 1058, 746, 88, 1643, 574, 88,
	88, 1203, 420, 1039, 1536, 1537, 549, 1542, 812, 88,
	2136, 1182, 1610, 573, 88, 598, 88, 1993, 1791, 1536,
	1537, 1955, 2099, 88, 999, 484, 1523, 845, 1679, 1696,
	486, 1361, 1626, 88, 1666, 2096, 1140, 1644, 487, 751,
	2125, 1924, 2123, 891, 1275, 839, 1278, 1841, 1184, 588,
	563, 1262, 1246, 1249, 88, 88, 1551, 625, 751, 413,
	561, 1391, 1299, 1355, 1340, 549, 1260, 624, 1318, 751,
	1470, 812, 486, 574, 1642, 1365, 2154, 1485, 1380, 1378,
	1245, 1382, 960, 961, 963, 964, 1265, 88, 1934, 88,
	1933, 88, 1916, 1401, 2149, 88, 2003, 1593, 1407, 88,
	1356, 2135, 419, 2141, 1364, 416, 1542, 1140, 839, 1493,
	1811, 1360, 812, 792, 1757, 1899, 1185, 1810, 930, 623,
	921, 1542, 88, 866, 1491, 1439, 421, 1441, 501, 1256,
	1413, 417, 1414, 1415, 1869, 1394, 2058, 1257, 1417, 1258,
	1808, 1404, 938, 1263, 625, 1272, 487, 908, 1843, 839,
	1412, 422, 1662, 65, 2142, 1150, 418, 876, 862, 1552,
	739, 864, 1917, 1370, 1416, 483, 1152, 1323, 1247, 2153,
	624, 1369, 2144, 865, 1552, 420, 1427, 1428, 1442, 1365,
	1536, 1537, 1445, 779, 1429, 1153, 1433, 1488, 501, 783,
	783, 1435, 1856, 1674, 1870, 1673, 1151, 1489, 573, 1124,
	1758, 1494, 881, 878, 487, 939, 1759, 1900, 1809, 1479,
	664, 508, 511, 55, 1453, 1538, 1539, 1540, 1541, 1543,
	1544, 1514, 623, 1455, 532, 941, 1456, 1553, 1465, 1471,
	1126, 1807, 1459, 1478, 1125, 1443, 1127, 531, 484, 1259,
	838, 838, 1553, 85, 85, 280, 1261, 1468, 615, 1652,
	1834, 1390, 684, 1670, 1914, 1458, 407, 408, 409, 1677,
	1302, 426, 1996, 487, 439, 1898, 1486, 1466, 1484, 1567,
	1702, 1624, 426, 439, 1530, 419, 1915, 1495, 1396, 1144,
	493, 493, 1542, 1096, 280, 1084, 1081, 280, 280, 512,
	280, 1500, 602, 85, 519, 601, 594, 1490, 593, 592,
	591, 1604, 590, 589, 1492, 1511, 586, 530, 523, 1603,
	1568, 1547, 1545, 1546, 1538, 1539, 1540, 1541, 1543, 1544,
	88, 88, 1021, 900, 422, 1301, 2092, 1633, 1546, 1538,
	1539, 1540, 1541, 1543, 1544, 1552, 2055, 1782, 1467, 1614,
	1612, 1592, 1447, 1188, 1180, 88, 1122, 798, 796, 88,
	793, 88, 838, 1570, 1571, 1572, 788, 764, 88, 760,
	752, 549, 1716, 1449, 1605, 1949, 1658, 1198, 1589, 2127,
	884, 88, 627, 497, 88, 1951, 580, 529, 1596, 528,
	1077, 81, 1631, 2050, 308, 1061, 88, 1061, 1613, 1655,
	1615, 1076, 1617, 1074, 1630, 3, 1623, 2013, 1054, 1687,
	1801, 1663, 584, 1553, 303, 25, 1671, 1684, 631, 1628,
	501, 1082, 1688, 1079, 2036, 838, 1635, 1378, 511, 1636,
	1634, 1839, 501, 65, 1183, 1179, 1199, 1645, 1647, 1648,
	1105, 949, 302, 24, 88, 856, 1705, 804, 812, 1665,
	1653, 628, 498, 1111, 1131, 1721, 1722, 1723, 511, 2151,
	1676, 511, 2152, 1664, 301, 23, 838, 581, 1672, 1680,
	1681, 1675, 460, 520, 517, 521, 300, 11, 2085, 812,
	812, 505, 2039, 304, 10, 839, 294, 9, 812, 812,
	25, 293, 7, 1866, 295, 4, 1777, 1712, 412, 1715,
	1538, 1539, 1540, 1541, 1543, 1544, 280, 535, 280, 439,
	439, 88, 88, 88, 1649, 1731, 839, 839, 24, 1729,
	1734, 812, 1536, 1537, 1736, 839, 839, 1640, 88, 954,
	955, 463, 464, 88, 1582, 88, 1156, 88, 88, 88,
	23, 1420, 88, 88, 1764, 549, 1213, 1732, 423, 1604,
	1352, 1806, 11, 1765, 1802, 1213, 1737, 1603, 839, 10,
	1886, 1349, 9, 1805, 1156, 1155, 1348, 7, 852, 1781,
	4, 954, 955, 1298, 1157, 1778, 1008, 88, 88, 1161,
	511, 1163, 2071, 1948, 549, 1724, 501, 1444, 1768, 1018,
	1016, 954, 955, 470, 88, 88, 1922, 1604, 88, 414,
	1837, 899, 1604, 587, 1860, 1603, 549, 1682, 88, 1822,
	1603, 1835, 1605, 734, 957, 88, 1840, 956, 2087, 1865,
	1891, 1208, 1461, 1864, 1844, 1522, 1966, 1992, 1300, 1019,
	487, 559, 41, 851, 1874, 1829, 1601, 956, 1838, 1324,
	658, 1828, 1783, 1595, 859, 1174, 564, 1846, 88, 439,
	439, 1173, 311, 1878, 885, 812, 547, 680, 870, 1309,
	1605, 1214, 735, 1863, 682, 1605, 809, 683, 810, 1047,
	670, 1465, 807, 1109, 1270, 1289, 1845, 1510, 733, 89,
	1012, 1851, 1852, 650, 662, 1857, 661, 1286, 426, 555,
	1468, 280, 839, 439, 613, 439, 681, 616, 1867, 54,
	570, 433, 1463, 88, 1402, 88, 1825, 308, 88, 937,
	1466, 1189, 493, 1897, 934, 1611, 88, 475, 1533, 557,
	1330, 1322, 308, 280, 309, 1464, 1357, 1319, 1007, 609,
	741, 1000, 1110, 582, 1408, 1912, 1130, 85, 636, 945,
	1855, 1604, 496, 495, 1169, 1926, 280, 88, 1928, 1603,
	1927, 280, 280, 280, 1909, 786, 579, 1387, 863, 1910,
	1149, 993, 88, 990, 812, 549, 1397, 465, 2005, 88,
	1950, 779, 1925, 780, 280, 280, 1181, 88, 1363, 1604,
	779, 1467, 85, 2147, 85, 88, 2012, 1603, 1943, 439,
	501, 1952, 838, 1957, 88, 88, 1978, 1608, 2064, 1976,
	72, 839, 2021, 1946, 1605, 1963, 439, 439, 1983, 85,
	439, 439, 439, 439, 439, 907, 1986, 1985, 1973, 811,
	439, 439, 1969, 838, 838, 1991, 1965, 1389, 426, 1944,
	29, 1936, 838, 838, 26, 88, 928, 1937, 1938, 21,
	19, 18, 1605, 2007, 1854, 28, 17, 27, 1960, 15,
	14, 1998, 1446, 812, 13, 493, 12, 1964, 519, 40,
	88, 88, 39, 38, 1972, 838, 37, 36, 2010, 2001,
	35, 6, 88, 2002, 1324, 1324, 88, 5, 2, 1208,
	1, 2030, 2009, 0, 549, 0, 0, 2028, 0, 0,
	839, 88, 2031, 0, 0, 0, 0, 88, 0, 487,
	0, 730, 0, 308, 88, 88, 0, 0, 2040, 0,
	2038, 0, 0, 2034, 2037, 2045, 0, 0, 0, 0,
	0, 2042, 0, 0, 2041, 0, 0, 88, 2046, 88,
	2049, 2043, 88, 0, 308, 1324, 1324, 1324, 0, 0,
	65, 0, 0, 0, 0, 0, 310, 2052, 0, 812,
	2075, 0, 2060, 2077, 2073, 2061, 88, 0, 2070, 88,
	2076, 280, 2066, 0, 0, 0, 0, 0, 0, 1066,
	2080, 550, 2081, 280, 2079, 1604, 2033, 0, 0, 1461,
	2083, 280, 1087, 1603, 0, 280, 839, 0, 0, 2078,
	0, 0, 1093, 88, 0, 88, 2102, 0, 2109, 838,
	2107, 0, 0, 0, 0, 0, 280, 2106, 1113, 1114,
	0, 280, 0, 88, 280, 0, 439, 439, 2108, 439,
	0, 2111, 2124, 2120, 2122, 0, 0, 2128, 1465, 0,
	0, 0, 88, 0, 0, 0, 2130, 0, 1605, 2134,
	0, 2132, 0, 2133, 0, 0, 0, 1468, 0, 0,
	0, 0, 2146, 2145, 2150, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 640, 640, 0, 1466, 0, 0,
	0, 0, 0, 743, 2155, 0, 0, 1111, 1208, 1281,
	0, 0, 1464, 0, 0, 0, 1285, 0, 0, 0,
	1293, 0, 0, 0, 1324, 1324, 0, 0, 0, 0,
	0, 1310, 1310, 1321, 0, 1332, 0, 0, 838, 0,
	0, 1344, 1345, 1346, 0, 0, 0, 0, 0, 0,
	0, 1160, 0, 0, 0, 0, 0, 0, 1208, 0,
	0, 1208, 280, 280, 280, 0, 0, 0, 1467, 280,
	1170, 0, 0, 0, 0, 0, 519, 0, 1324, 1324,
	1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
	1324, 1324, 1324, 1324, 1324, 1324, 1324, 0, 1324, 0,
	841, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1536, 1537, 0, 1554, 1555,
	1556, 0, 935, 551, 940, 550, 0, 838, 0, 0,
	947, 1876, 309, 550, 0, 954, 955, 0, 1793, 0,
	0, 1786, 994, 995, 996, 997, 998, 811, 811, 1784,
	0, 0, 1006, 1788, 0, 0, 0, 0, 957, 0,
	0, 0, 1013, 0, 0, 840, 0, 1551, 0, 0,
	0, 1794, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 0, 808, 0, 550, 550, 0, 0, 0,
	0, 0, 1787, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	1358, 1359, 0, 0, 1815, 1066, 0, 1542, 1366, 0,
	1821, 0, 0, 838, 1371, 1372, 1374, 1376, 1377, 0,
	1536, 1537, 0, 0, 0, 0, 1384, 962, 0, 1386,
	280, 0, 0, 659, 52, 0, 0, 0, 0, 280,
	0, 0, 1557, 0, 280, 0, 1406, 0, 0, 811,
	0, 0, 1789, 280, 1790, 0, 0, 0, 0, 0,
	1552, 1208, 1208, 280, 1499, 1208, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 52, 0, 0,
	972, 0, 1792, 0, 1160, 1160, 0, 0, 0, 1795,
	1518, 1519, 0, 0, 0, 0, 0, 0, 0, 480,
	0, 0, 488, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 811, 0, 0, 0, 0, 928, 0, 928,
	0, 439, 1542, 1562, 1324, 280, 0, 0, 1553, 1452,
	0, 0, 0, 0, 1575, 0, 0, 551, 0, 0,
	0, 0, 0, 0, 310, 551, 0, 0, 973, 0,
	0, 0, 280, 811, 0, 0, 0, 0, 0, 0,
	1791, 0, 1497, 1498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1552, 1619, 0, 1620, 0,
	0, 0, 0, 1920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 551, 0,
	550, 0, 0, 0, 0, 310, 0, 1548, 1549, 1550,
	0, 0, 1547, 1545, 1546, 1538, 1539, 1540, 1541, 1543,
	1544, 0, 0, 1559, 1560, 1561, 0, 0, 1324, 1962,
	0, 0, 0, 965, 966, 958, 959, 960, 961, 963,
	964, 640, 0, 1553, 1208, 0, 0, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1691,
	1250, 0, 1252, 1253, 1254, 1255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 841,
	0, 1279, 0, 309, 0, 0, 1709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1600,
	0, 0, 0, 1306, 1307, 0, 0, 1320, 0, 1331,
	1333, 1338, 1341, 1342, 1343, 488, 1324, 1547, 1545, 1546,
	1538, 1539, 1540, 1541, 1543, 1544, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 0,
	280, 280, 0, 840, 840, 0, 309, 0, 1762, 0,
	0, 0, 0, 0, 0, 0, 0, 954, 955, 1772,
	0, 808, 808, 0, 0, 1650, 0, 0, 0, 1066,
	0, 928, 1700, 1701, 0, 0, 0, 0, 1660, 1400,
	957, 309, 0, 0, 0, 0, 0, 0, 0, 2063,
	841, 280, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 1695, 0, 0, 0,
	0, 0, 551, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 0, 1760, 0, 0, 0,
	1111, 0, 0, 841, 1726, 840, 1850, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 811,
	1454, 0, 0, 808, 0, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	811, 811, 0, 0, 0, 310, 0, 0, 0, 811,
	811, 0, 972, 480, 0, 0, 0, 0, 840, 0,
	0, 1779, 1780, 1066, 1481, 1482, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 808, 1600, 519, 0,
	0, 0, 811, 1813, 550, 1814, 0, 280, 1816, 1817,
	0, 0, 1820, 280, 0, 0, 0, 0, 0, 840,
	0, 0, 0, 1506, 0, 0, 0, 0, 310, 0,
	1513, 0, 0, 1517, 0, 0, 0, 808, 0, 0,
	973, 0, 1526, 0, 0, 1600, 0, 519, 1170, 1930,
	1600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 280, 280, 0, 1006, 280, 0,
	0, 0, 0, 1338, 1338, 1338, 0, 0, 1695, 0,
	0, 0, 0, 0, 0, 1872, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1597, 0, 0, 0,
	480, 0, 0, 480, 480, 0, 0, 0, 1892, 0,
	0, 0, 0, 0, 0, 0, 966, 958, 959, 960,
	961, 963, 964, 0, 0, 1003, 811, 1005, 640, 0,
	0, 0, 1919, 0, 1009, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 0, 0,
	0, 0, 0, 1066, 0, 1911, 0, 0, 1913, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 1600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1945, 0, 0, 519, 0, 1698,
	0, 0, 1699, 0, 0, 0, 551, 1600, 0, 0,
	0, 0, 280, 0, 1704, 0, 0, 0, 52, 1968,
	0, 52, 0, 1713, 0, 811, 1995, 280, 0, 0,
	0, 1717, 0, 0, 1426, 1695, 0, 0, 0, 0,
	0, 2067, 2068, 2069, 519, 1695, 52, 0, 52, 1733,
	0, 0, 0, 1735, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 52, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 2090, 0, 0, 0, 0,
	550, 0, 0, 0, 0, 928, 1766, 1767, 0, 0,
	0, 841, 841, 0, 0, 1773, 1774, 1775, 0, 0,
	841, 841, 0, 309, 0, 0, 0, 0, 0, 0,
	2014, 2015, 0, 0, 811, 0, 0, 0, 0, 0,
	0, 1803, 2026, 0, 2051, 840, 2027, 0, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 519, 0, 808, 0, 0, 0, 1695, 0, 0,
	0, 0, 0, 0, 1695, 519, 840, 840, 0, 0,
	0, 0, 0, 0, 0, 840, 840, 0, 0, 0,
	0, 0, 0, 0, 808, 808, 0, 2059, 0, 519,
	0, 0, 280, 808, 808, 0, 0, 0, 0, 1849,
	0, 0, 0, 0, 0, 0, 0, 0, 840, 0,
	0, 0, 0, 1600, 0, 0, 1968, 0, 0, 1695,
	811, 0, 0, 0, 0, 0, 808, 1209, 0, 0,
	0, 1877, 0, 0, 0, 1880, 1881, 0, 0, 0,
	1883, 0, 0, 0, 0, 0, 0, 1885, 0, 1887,
	0, 0, 0, 280, 0, 519, 0, 1893, 0, 0,
	0, 0, 0, 1268, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 2121, 0, 0, 0, 841, 954, 955,
	0, 974, 975, 976, 984, 985, 986, 0, 0, 0,
	1902, 0, 1695, 0, 977, 0, 0, 0, 0, 0,
	0, 957, 0, 550, 988, 0, 0, 0, 0, 0,
	0, 0, 551, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 550, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 310, 0, 0, 0, 1935,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 52, 0, 0, 0,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 0, 0,
	962, 0, 0, 0, 1971, 0, 841, 0, 0, 0,
	954, 955, 0, 974, 975, 976, 984, 985, 986, 981,
	989, 0, 0, 0, 1987, 1988, 977, 0, 0, 0,
	0, 0, 0, 957, 0, 987, 988, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 309, 979, 0, 0,
	0, 0, 0, 972, 2000, 0, 956, 0, 0, 0,
	0, 309, 971, 0, 0, 0, 0, 2004, 0, 0,
	0, 840, 0, 52, 0, 0, 0, 52, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 52, 841, 0, 0, 0, 0,
	0, 0, 0, 743, 550, 1477, 551, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 989, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 1268, 0, 551, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	840, 0, 0, 1005, 0, 972, 0, 551, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 841, 0, 0, 0, 0, 0, 980, 0, 0,
	968, 969, 970, 983, 0, 967, 965, 966, 958, 959,
	960, 961, 963, 964, 2103, 0, 0, 0, 0, 0,
	0, 1905, 1005, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 2119, 2119, 0,
	0, 0, 309, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 2119, 0, 0, 310, 0,
	0, 0, 0, 309, 808, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 954, 955, 0, 974, 975,
	976, 984, 985, 986, 0, 0, 0, 0, 0, 0,
	2119, 977, 0, 0, 1209, 0, 0, 0, 957, 980,
	0, 988, 968, 969, 970, 983, 0, 967, 965, 966,
	958, 959, 960, 961, 963, 964, 551, 0, 0, 0,
	0, 956, 0, 1578, 0, 0, 0, 971, 0, 954,
	955, 0, 974, 975, 976, 984, 985, 986, 0, 0,
	0, 0, 0, 0, 1209, 977, 0, 1209, 0, 0,
	0, 0, 957, 0, 52, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 962, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 954, 955, 0, 0, 981, 989, 984, 985,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 987, 0, 0, 957, 0, 0, 988, 0,
	0, 0, 0, 0, 979, 0, 0, 0, 0, 0,
	972, 962, 0, 0, 0, 551, 0, 0, 956, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	981, 989, 0, 0, 310, 978, 0, 0, 1536, 1537,
	0, 1554, 1555, 1556, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 1875, 0, 0, 0, 979, 0,
	0, 0, 0, 0, 972, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 973, 954,
	955, 0, 974, 975, 976, 984, 985, 986, 0, 978,
	1551, 0, 982, 981, 989, 0, 52, 0, 0, 0,
	0, 0, 957, 0, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 956, 0, 972, 0, 0,
	0, 971, 973, 0, 0, 0, 0, 1209, 1209, 0,
	1542, 1209, 0, 0, 0, 0, 982, 0, 0, 488,
	0, 0, 0, 0, 980, 0, 0, 968, 969, 970,
	983, 0, 967, 965, 966, 958, 959, 960, 961, 963,
	964, 0, 0, 0, 0, 1557, 0, 0, 1577, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1552, 0, 973, 0, 0, 0, 0,
	981, 989, 0, 0, 0, 0, 0, 0, 980, 982,
	0, 968, 969, 970, 983, 0, 967, 965, 966, 958,
	959, 960, 961, 963, 964, 0, 0, 0, 979, 0,
	0, 0, 1576, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1553, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 980, 0, 0, 0, 0, 0, 983, 0, 967,
	965, 966, 958, 959, 960, 961, 963, 964, 0, 0,
	0, 0, 0, 0, 1953, 0, 0, 0, 0, 0,
	0, 0, 973, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	1209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1548, 1549, 1550, 0, 0, 1547, 1545, 1546, 1538, 1539,
	1540, 1541, 1543, 1544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 980, 0,
	0, 968, 969, 970, 983, 0, 967, 965, 966, 958,
	959, 960, 961, 963, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 90, 91, 326, 92, 327, 328, 329, 330,
	226, 331, 332, 333, 334, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 335, 97, 233, 234, 98,
	336, 337, 235, 236, 237, 338, 99, 238, 339, 312,
	340, 100, 101, 102, 0, 103, 341, 104, 105, 106,
	342, 313, 107, 108, 343, 344, 345, 346, 347, 348,
	109, 110, 281, 111, 239, 112, 240, 241, 349, 113,
	350, 114, 351, 352, 353, 115, 116, 354, 117, 355,
	0, 356, 242, 118, 119, 120, 243, 244, 357, 358,
	359, 121, 122, 245, 0, 123, 360, 124, 361, 362,
	314, 363, 125, 246, 364, 247, 365, 126, 127, 128,
	129, 248, 249, 316, 366, 133, 367, 130, 368, 315,
	131, 250, 132, 251, 252, 253, 369, 254, 370, 317,
	134, 318, 135, 136, 371, 138, 137, 372, 255, 319,
	139, 320, 373, 140, 374, 375, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 376,
	377, 378, 257, 151, 258, 152, 153, 379, 154, 380,
	381, 155, 382, 383, 156, 259, 322, 157, 323, 260,
	158, 159, 160, 161, 384, 261, 162, 262, 163, 385,
	164, 165, 166, 263, 167, 168, 386, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 387, 180,
	324, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	388, 265, 191, 192, 389, 193, 184, 185, 194, 325,
	195, 266, 267, 196, 390, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 391, 203, 392, 204, 205, 206,
	207, 208, 393, 270, 271, 272, 394, 395, 209, 273,
	274, 396, 210, 211, 212, 213, 397, 398, 214, 215,
	216, 399, 217, 400, 275, 218, 219, 220, 276, 277,
	401, 402, 221, 403, 404, 405, 406, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 1689,
	0, 0, 0, 0, 0, 0, 0, 1690, 90, 91,
	326, 92, 327, 328, 329, 330, 226, 331, 332, 333,
	334, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 335, 97, 233, 234, 98, 336, 337, 235, 236,
	237, 338, 99, 238, 339, 312, 340, 100, 101, 102,
	0, 103, 341, 104, 105, 106, 342, 313, 107, 108,
	343, 344, 345, 346, 347, 348, 109, 110, 281, 111,
	239, 112, 240, 241, 349, 113, 350, 114, 351, 352,
	353, 115, 116, 354, 117, 355, 0, 356, 242, 118,
	119, 120, 243, 244, 357, 358, 359, 121, 122, 245,
	0, 123, 360, 124, 361, 362, 314, 363, 125, 246,
	364, 247, 365, 126, 127, 128, 129, 248, 249, 316,
	366, 133, 367, 130, 368, 315, 131, 250, 132, 251,
	252, 253, 369, 254, 370, 317, 134, 318, 135, 136,
	371, 138, 137, 372, 255, 319, 139, 320, 373, 140,
	374, 375, 141, 0, 142, 143, 144, 146, 256, 145,
	321, 147, 148, 150, 149, 376, 377, 378, 257, 151,
	258, 152, 153, 379, 154, 380, 381, 155, 382, 383,
	156, 259, 322, 157, 323, 260, 158, 159, 160, 161,
	384, 261, 162, 262, 163, 385, 164, 165, 166, 263,
	167, 168, 386, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 387, 180, 324, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 388, 265, 191, 192,
	389, 193, 184, 185, 194, 325, 195, 266, 267, 196,
	390, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	391, 203, 392, 204, 205, 206, 207, 208, 393, 270,
	271, 272, 394, 395, 209, 273, 274, 396, 210, 211,
	212, 213, 397, 398, 214, 215, 216, 399, 217, 400,
	275, 218, 219, 220, 276, 277, 401, 402, 221, 403,
	404, 405, 406, 222, 223, 224, 225, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2044, 90, 91, 326, 92,
	327, 328, 329, 330, 226, 331, 332, 333, 334, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 335,
	97, 233, 234, 98, 336, 337, 235, 236, 237, 338,
	99, 238, 339, 312, 340, 100, 101, 102, 0, 103,
	341, 104, 105, 106, 342, 313, 107, 108, 343, 344,
	345, 346, 347, 348, 109, 110, 281, 111, 239, 112,
	240, 241, 349, 113, 350, 114, 351, 352, 353, 115,
	116, 354, 117, 355, 0, 356, 242, 118, 119, 120,
	243, 244, 357, 358, 359, 121, 122, 245, 0, 123,
	360, 124, 361, 362, 314, 363, 125, 246, 364, 247,
	365, 126, 127, 128, 129, 248, 249, 316, 366, 133,
	367, 130, 368, 315, 131, 250, 132, 251, 252, 253,
	369, 254, 370, 317, 134, 318, 135, 136, 371, 138,
	137, 372, 255, 319, 139, 320, 373, 140, 374, 375,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 376, 377, 378, 257, 151, 258, 152,
	153, 379, 154, 380, 381, 155, 382, 383, 156, 259,
	322, 157, 323, 260, 158, 159, 160, 161, 384, 261,
	162, 262, 163, 385, 164, 165, 166, 263, 167, 168,
	386, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 387, 180, 324, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 388, 265, 191, 192, 389, 193,
	184, 185, 194, 325, 195, 266, 267, 196, 390, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 391, 203,
	392, 204, 205, 206, 207, 208, 393, 270, 271, 272,
	394, 395, 209, 273, 274, 396, 210, 211, 212, 213,
	397, 398, 214, 215, 216, 399, 217, 400, 275, 218,
	219, 220, 276, 277, 401, 402, 221, 403, 404, 405,
	406, 222, 223, 224, 225, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 773, 0,
	0, 90, 91, 326, 92, 327, 328, 329, 330, 226,
	331, 332, 333, 334, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 335, 97, 233, 234, 98, 336,
	337, 235, 236, 237, 338, 99, 238, 339, 312, 340,
	100, 101, 102, 0, 103, 341, 104, 105, 106, 342,
	313, 107, 108, 343, 344, 345, 346, 347, 348, 109,
	110, 281, 111, 239, 112, 240, 241, 349, 113, 350,
	114, 351, 352, 353, 115, 116, 354, 117, 355, 0,
	356, 242, 118, 119, 120, 243, 244, 357, 358, 359,
	121, 122, 245, 0, 123, 360, 124, 361, 362, 314,
	363, 125, 246, 364, 247, 365, 126, 127, 128, 129,
	248, 249, 316, 366, 133, 367, 130, 368, 315, 131,
	250, 132, 251, 252, 253, 369, 254, 370, 317, 134,
	318, 135, 136, 371, 138, 137, 372, 255, 319, 139,
	320, 373, 140, 374, 375, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 376, 377,
	378, 257, 151, 258, 152, 153, 379, 154, 380, 381,
	155, 382, 383, 156, 259, 322, 157, 323, 260, 158,
	159, 160, 161, 384, 261, 162, 262, 163, 385, 164,
	165, 166, 263, 167, 168, 386, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 387, 180, 324,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 388,
	265, 191, 192, 389, 193, 184, 185, 194, 325, 195,
	266, 267, 196, 390, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 391, 203, 392, 204, 205, 206, 207,
	208, 393, 270, 271, 272, 394, 395, 209, 273, 274,
	396, 210, 211, 212, 213, 397, 398, 214, 215, 216,
	399, 217, 400, 275, 218, 219, 220, 276, 277, 401,
	402, 221, 403, 404, 405, 406, 222, 223, 224, 225,
	678, 667, 668, 665, 666, 657, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 694, 660, 0, 0, 0, 93,
	94, 95, 227, 709, 229, 710, 96, 711, 712, 0,
	97, 233, 234, 98, 663, 693, 713, 714, 237, 0,
	99, 705, 0, 686, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 108, 0, 687,
	689, 0, 688, 690, 109, 110, 281, 111, 715, 112,
	716, 717, 744, 113, 0, 114, 0, 0, 0, 708,
	116, 0, 117, 0, 0, 0, 651, 118, 119, 120,
	695, 696, 674, 0, 0, 121, 122, 718, 0, 123,
	0, 124, 0, 0, 314, 0, 125, 706, 0, 247,
	0, 126, 127, 128, 129, 702, 704, 316, 0, 133,
	0, 130, 0, 315, 131, 719, 132, 720, 721, 722,
	0, 685, 0, 317, 134, 318, 135, 136, 0, 138,
	137, 0, 707, 319, 139, 320, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 646, 0, 675, 703, 151, 723, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 697, 158, 159, 160, 161, 0, 698,
	162, 262, 163, 0, 164, 165, 166, 724, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 652, 183, 0,
	187, 188, 189, 190, 71, 265, 191, 192, 691, 193,
	184, 185, 194, 325, 195, 725, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 726, 200, 699, 0, 203,
	73, 204, 205, 206, 207, 208, 0, 270, 727, 728,
	0, 0, 209, 700, 701, 673, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 692, 217, 0, 275, 218,
	219, 220, 552, 729, 0, 0, 221, 0, 0, 0,
	69, 222, 223, 224, 225, 647, 70, 0, 0, 0,
	0, 645, 0, 0, 0, 0, 643, 644, 678, 667,
	668, 665, 666, 657, 0, 653, 0, 0, 0, 0,
	656, 0, 0, 0, 90, 91, 1295, 92, 0, 0,
	0, 0, 694, 660, 0, 0, 0, 93, 94, 95,
	227, 709, 229, 710, 96, 711, 712, 0, 97, 233,
	234, 98, 663, 693, 713, 714, 237, 0, 99, 705,
	0, 686, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 687, 689, 0,
	688, 690, 109, 110, 281, 111, 715, 112, 716, 717,
	0, 113, 0, 114, 0, 1296, 0, 708, 116, 0,
	117, 0, 0, 0, 651, 118, 119, 120, 695, 696,
	674, 0, 0, 121, 122, 718, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 706, 0, 247, 0, 126,
	127, 128, 129, 702, 704, 316, 0, 133, 0, 130,
	0, 315, 131, 719, 132, 720, 721, 722, 0, 685,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	707, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 646, 0, 675, 703, 151, 723, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 697, 158, 159, 160, 161, 0, 698, 162, 262,
	163, 0, 164, 165, 166, 724, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 652, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 691, 193, 184, 185,
	194, 325, 195, 725, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 726, 200, 699, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 727, 728, 0, 0,
	209, 700, 701, 673, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 692, 217, 0, 275, 218, 219, 220,
	276, 729, 1294, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 647, 0, 0, 0, 0, 0, 645,
	0, 0, 0, 0, 643, 644, 1297, 678, 667, 668,
	665, 666, 657, 653, 1292, 0, 0, 0, 656, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 694, 660, 0, 0, 0, 93, 94, 95, 227,
	709, 229, 710, 96, 711, 712, 0, 97, 233, 234,
	98, 663, 693, 713, 714, 237, 0, 99, 705, 0,
	686, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 687, 689, 0, 688,
	690, 109, 110, 281, 111, 715, 112, 716, 717, 0,
	113, 0, 114, 0, 0, 0, 708, 116, 0, 117,
	0, 0, 0, 651, 118, 119, 120, 695, 696, 674,
	0, 0, 121, 122, 718, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 706, 0, 247, 0, 126, 127,
	128, 129, 702, 704, 316, 0, 133, 0, 130, 0,
	315, 131, 719, 132, 720, 721, 722, 0, 685, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 707,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	646, 0, 675, 703, 151, 723, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	697, 158, 159, 160, 161, 0, 698, 162, 262, 163,
	0, 164, 165, 166, 724, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 652, 183, 0, 187, 188, 189,
	190, 71, 265, 191, 192, 691, 193, 184, 185, 194,
	325, 195, 725, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 726, 200, 699, 0, 203, 73, 204, 205,
	206, 207, 208, 0, 270, 727, 728, 0, 0, 209,
	700, 701, 673, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 692, 217, 0, 275, 218, 219, 220, 552,
	729, 0, 0, 221, 0, 0, 0, 69, 222, 223,
	224, 225, 647, 70, 0, 0, 0, 0, 645, 0,
	0, 0, 0, 643, 644, 678, 667, 668, 665, 666,
	657, 0, 653, 0, 0, 0, 0, 656, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 694,
	660, 0, 0, 0, 93, 94, 95, 227, 709, 229,
	710, 96, 711, 712, 1334, 97, 233, 234, 98, 663,
	693, 713, 714, 237, 0, 99, 705, 0, 686, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 687, 689, 0, 688, 690, 109,
	110, 281, 111, 715, 112, 716, 717, 0, 113, 0,
	114, 0, 0, 0, 708, 116, 0, 117, 0, 0,
	0, 651, 118, 119, 120, 695, 696, 674, 0, 0,
	121, 122, 718, 0, 123, 0, 124, 0, 1339, 314,
	0, 125, 706, 0, 247, 0, 126, 127, 128, 129,
	702, 704, 316, 0, 133, 0, 130, 0, 315, 131,
	719, 132, 720, 721, 722, 0, 685, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 1335, 707, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 646, 0,
	675, 703, 151, 723, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 697, 158,
	159, 160, 161, 0, 698, 162, 262, 163, 0, 164,
	165, 166, 724, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 652, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 691, 193, 184, 185, 194, 325, 195,
	725, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	726, 200, 699, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 727, 728, 0, 1336, 209, 700, 701,
	673, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	692, 217, 0, 275, 218, 219, 220, 276, 729, 0,
	0, 221, 0, 0, 0, 0, 222, 223, 224, 225,
	647, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	0, 643, 644, 678, 667, 668, 665, 666, 657, 0,
	653, 0, 0, 0, 0, 656, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 694, 660, 0,
	0, 0, 93, 94, 95, 227, 709, 229, 710, 96,
	711, 712, 0, 97, 233, 234, 98, 663, 693, 713,
	714, 237, 0, 99, 705, 0, 686, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 687, 689, 0, 688, 690, 109, 110, 281,
	111, 715, 112, 716, 717, 0, 113, 0, 114, 0,
	0, 0, 708, 116, 0, 117, 0, 0, 0, 651,
	118, 119, 120, 695, 696, 674, 0, 0, 121, 122,
	718, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	706, 0, 247, 0, 126, 127, 128, 129, 702, 704,
	316, 0, 133, 0, 130, 0, 315, 131, 719, 132,
	720, 721, 722, 0, 685, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 707, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 646, 1629, 675, 703,
	151, 723, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 697, 158, 159, 160,
	161, 0, 698, 162, 262, 163, 0, 164, 165, 166,
	724, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	652, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 691, 193, 184, 185, 194, 325, 195, 725, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 726, 200,
	699, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 727, 728, 0, 0, 209, 700, 701, 673, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 692, 217,
	0, 275, 218, 219, 220, 276, 729, 0, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 647, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 0, 643,
	644, 641, 678, 667, 668, 665, 666, 657, 653, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 694, 660, 0, 0,
	0, 93, 94, 95, 227, 709, 229, 710, 96, 711,
	712, 0, 97, 233, 234, 98, 663, 693, 713, 714,
	237, 0, 99, 705, 0, 686, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 313, 107, 108,
	0, 687, 689, 0, 688, 690, 109, 110, 281, 111,
	715, 112, 716, 717, 0, 113, 0, 114, 0, 0,
	0, 708, 116, 0, 117, 0, 0, 0, 651, 118,
	119, 120, 695, 696, 674, 0, 0, 121, 122, 718,
	0, 123, 0, 124, 0, 0, 314, 0, 125, 706,
	0, 247, 0, 126, 127, 128, 129, 702, 704, 316,
	0, 133, 0, 130, 0, 315, 131, 719, 132, 720,
	721, 722, 0, 685, 0, 317, 134, 318, 135, 136,
	0, 138, 137, 0, 707, 319, 139, 320, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	321, 147, 148, 150, 149, 646, 0, 675, 703, 151,
	723, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 322, 157, 323, 697, 158, 159, 160, 161,
	0, 698, 162, 262, 163, 0, 164, 165, 166, 724,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 324, 181, 182, 652,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	691, 193, 184, 185, 194, 325, 195, 725, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 726, 200, 699,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	727, 728, 0, 0, 209, 700, 701, 673, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 692, 217, 0,
	275, 218, 219, 220, 276, 729, 0, 0, 221, 0,
	0, 0, 0, 222, 223, 224, 225, 647, 0, 0,
	0, 0, 0, 645, 0, 0, 0, 0, 643, 644,
	0, 0, 0, 0, 0, 1011, 1287, 653, 0, 0,
	0, 0, 656, 678, 667, 668, 665, 666, 657, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 694, 660, 0,
	0, 0, 93, 94, 95, 227, 709, 229, 710, 96,
	711, 712, 0, 97, 233, 234, 98, 663, 693, 713,
	714, 237, 0, 99, 705, 0, 686, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 687, 689, 0, 688, 690, 109, 110, 281,
	111, 715, 112, 716, 717, 0, 113, 0, 114, 0,
	0, 0, 708, 116, 0, 117, 0, 0, 0, 651,
	118, 119, 120, 695, 696, 674, 0, 0, 121, 122,
	718, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	706, 0, 247, 0, 126, 127, 128, 129, 702, 704,
	316, 0, 133, 0, 130, 0, 315, 131, 719, 132,
	720, 721, 722, 0, 685, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 707, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 646, 0, 675, 703,
	151, 723, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 697, 158, 159, 160,
	161, 0, 698, 162, 262, 163, 0, 164, 165, 166,
	724, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	652, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 691, 193, 184, 185, 194, 325, 195, 725, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 726, 200,
	699, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 727, 728, 0, 0, 209, 700, 701, 673, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 692, 217,
	0, 275, 218, 219, 220, 276, 729, 0, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 647, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 0, 643,
	644, 678, 667, 668, 665, 666, 657, 0, 653, 1763,
	0, 0, 0, 656, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 694, 660, 0, 0, 0,
	93, 94, 95, 227, 709, 229, 710, 96, 711, 712,
	0, 97, 233, 234, 98, 663, 693, 713, 714, 237,
	0, 99, 705, 0, 686, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 108, 0,
	687, 689, 0, 688, 690, 109, 110, 281, 111, 715,
	112, 716, 717, 0, 113, 0, 114, 0, 0, 0,
	708, 116, 0, 117, 0, 0, 0, 651, 118, 119,
	120, 695, 696, 674, 0, 0, 121, 122, 718, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 706, 0,
	247, 0, 126, 127, 128, 129, 702, 704, 316, 0,
	133, 0, 130, 0, 315, 131, 719, 132, 720, 721,
	722, 0, 685, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 707, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 646, 0, 675, 703, 151, 723,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 697, 158, 159, 160, 161, 0,
	698, 162, 262, 163, 0, 164, 165, 166, 724, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 652, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 691,
	193, 184, 185, 194, 325, 195, 725, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 726, 200, 699, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 727,
	728, 0, 0, 209, 700, 701, 673, 210, 211, 212,
	213, 0, 0, 214, 215, 216, 692, 217, 0, 275,
	218, 219, 220, 276, 729, 1720, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 647, 0, 0, 0,
	0, 0, 645, 0, 0, 0, 0, 643, 644, 678,
	667, 668, 665, 666, 657, 0, 653, 0, 0, 0,
	0, 656, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 694, 660, 0, 0, 0, 93, 94,
	95, 227, 709, 229, 710, 96, 711, 712, 0, 97,
	233, 234, 98, 663, 693, 713, 714, 237, 0, 99,
	705, 0, 686, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 313, 107, 108, 0, 687, 689,
	0, 688, 690, 109, 110, 281, 111, 715, 112, 716,
	717, 0, 113, 0, 114, 0, 0, 0, 708, 116,
	0, 117, 0, 0, 0, 651, 118, 119, 120, 695,
	696, 674, 0, 0, 121, 122, 718, 0, 123, 0,
	124, 0, 0, 314, 0, 125, 706, 0, 247, 0,
	126, 127, 128, 129, 702, 704, 316, 0, 133, 0,
	130, 0, 315, 131, 719, 132, 720, 721, 722, 0,
	685, 0, 317, 134, 318, 135, 136, 0, 138, 137,
	0, 707, 319, 139, 320, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 321, 147, 148,
	150, 149, 646, 0, 675, 703, 151, 723, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 322,
	157, 323, 697, 158, 159, 160, 161, 0, 698, 162,
	262, 163, 0, 164, 165, 166, 724, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 324, 181, 182, 652, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 691, 193, 184,
	185, 194, 325, 195, 725, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 726, 200, 699, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 727, 728, 0,
	0, 209, 700, 701, 673, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 692, 217, 0, 275, 218, 219,
	220, 276, 729, 0, 0, 221, 0, 0, 0, 0,
	222, 223, 224, 225, 647, 0, 0, 0, 0, 0,
	645, 0, 0, 0, 0, 643, 644, 678, 667, 668,
	665, 666, 657, 0, 653, 1710, 0, 0, 0, 656,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 694, 660, 0, 0, 0, 93, 94, 95, 227,
	709, 229, 710, 96, 711, 712, 0, 97, 233, 234,
	98, 663, 693, 713, 714, 237, 0, 99, 705, 0,
	686, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 687, 689, 0, 688,
	690, 109, 110, 281, 111, 715, 112, 716, 717, 744,
	113, 0, 114, 0, 0, 0, 708, 116, 0, 117,
	0, 0, 0, 651, 118, 119, 120, 695, 696, 674,
	0, 0, 121, 122, 718, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 706, 0, 247, 0, 126, 127,
	128, 129, 702, 704, 316, 0, 133, 0, 130, 0,
	315, 131, 719, 132, 720, 721, 722, 0, 685, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 707,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	646, 0, 675, 703, 151, 723, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	697, 158, 159, 160, 161, 0, 698, 162, 262, 163,
	0, 164, 165, 166, 724, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 652, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 691, 193, 184, 185, 194,
	325, 195, 725, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 726, 200, 699, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 727, 728, 0, 0, 209,
	700, 701, 673, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 692, 217, 0, 275, 218, 219, 220, 276,
	729, 0, 0, 221, 0, 0, 0, 0, 222, 223,
	224, 225, 647, 0, 0, 0, 0, 0, 645, 0,
	0, 0, 0, 643, 644, 678, 667, 668, 665, 666,
	657, 0, 653, 0, 0, 0, 0, 656, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 694,
	660, 0, 0, 0, 93, 94, 95, 227, 709, 229,
	710, 96, 711, 712, 0, 97, 233, 234, 98, 663,
	693, 713, 714, 237, 0, 99, 705, 0, 686, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 108, 0, 687, 689, 0, 688, 690, 109,
	110, 281, 111, 715, 112, 716, 717, 0, 113, 0,
	114, 0, 0, 0, 708, 116, 0, 117, 0, 0,
	0, 651, 118, 119, 120, 695, 696, 674, 0, 0,
	121, 122, 718, 0, 123, 0, 124, 0, 1339, 314,
	0, 125, 706, 0, 247, 0, 126, 127, 128, 129,
	702, 704, 316, 0, 133, 0, 130, 0, 315, 131,
	719, 132, 720, 721, 722, 0, 685, 0, 317, 134,
	318, 135, 136, 0, 138, 137, 0, 707, 319, 139,
	320, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 646, 0,
	675, 703, 151, 723, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 697, 158,
	159, 160, 161, 0, 698, 162, 262, 163, 0, 164,
	165, 166, 724, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 652, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 691, 193, 184, 185, 194, 325, 195,
	725, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	726, 200, 699, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 727, 728, 0, 0, 209, 700, 701,
	673, 210, 211, 212, 213, 0, 0, 214, 215, 216,
	692, 217, 0, 275, 218, 219, 220, 276, 729, 0,
	0, 221, 0, 0, 0, 0, 222, 223, 224, 225,
	647, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	0, 643, 644, 678, 667, 668, 665, 666, 657, 0,
	653, 0, 0, 0, 0, 656, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 694, 660, 0,
	0, 0, 93, 94, 95, 227, 709, 229, 710, 96,
	711, 712, 0, 97, 233, 234, 98, 663, 693, 713,
	714, 237, 0, 99, 705, 0, 686, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 687, 689, 0, 688, 690, 109, 110, 281,
	111, 715, 112, 716, 717, 0, 113, 0, 114, 0,
	0, 0, 708, 116, 0, 117, 0, 0, 0, 651,
	118, 119, 120, 695, 696, 674, 0, 0, 121, 122,
	718, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	706, 0, 247, 0, 126, 127, 128, 129, 702, 704,
	316, 0, 133, 0, 130, 0, 315, 131, 719, 132,
	720, 721, 722, 0, 685, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 707, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 646, 0, 675, 703,
	151, 723, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 697, 158, 159, 160,
	161, 0, 698, 162, 262, 163, 0, 164, 165, 166,
	724, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	652, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 691, 193, 184, 185, 194, 325, 195, 725, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 726, 200,
	699, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 727, 728, 0, 0, 209, 700, 701, 673, 210,
	211, 212, 213, 0, 0, 214, 215, 216, 692, 217,
	0, 275, 218, 219, 220, 276, 729, 0, 0, 221,
	0, 0, 0, 0, 222, 223, 224, 225, 647, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 0, 643,
	644, 678, 667, 668, 665, 666, 657, 0, 653, 1282,
	0, 0, 0, 656, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 694, 660, 0, 0, 0,
	93, 94, 95, 227, 709, 229, 710, 96, 711, 712,
	0, 97, 233, 234, 98, 663, 693, 713, 714, 237,
	0, 99, 705, 0, 686, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 108, 0,
	687, 689, 0, 688, 690, 109, 110, 281, 111, 715,
	112, 716, 717, 0, 113, 0, 114, 0, 0, 0,
	708, 116, 0, 117, 0, 0, 0, 651, 118, 119,
	120, 695, 696, 674, 0, 0, 121, 122, 718, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 706, 0,
	247, 0, 126, 127, 128, 129, 702, 704, 316, 0,
	133, 0, 130, 0, 315, 131, 719, 132, 720, 721,
	722, 0, 685, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 707, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 646, 0, 675, 703, 151, 723,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 697, 158, 159, 160, 161, 0,
	698, 162, 262, 163, 0, 164, 165, 166, 724, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 652, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 691,
	193, 184, 185, 194, 325, 195, 725, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 726, 200, 699, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 727,
	728, 0, 0, 209, 700, 701, 673, 210, 211, 212,
	213, 0, 0, 214, 215, 216, 692, 217, 0, 275,
	218, 219, 220, 276, 729, 0, 0, 221, 0, 0,
	0, 0, 222, 223, 224, 225, 647, 0, 0, 0,
	0, 0, 645, 0, 0, 0, 0, 643, 644, 641,
	678, 667, 668, 665, 666, 657, 653, 0, 0, 0,
	0, 656, 0, 0, 0, 0, 90, 91, 936, 92,
	0, 0, 0, 0, 694, 660, 0, 0, 0, 93,
	94, 95, 227, 709, 229, 710, 96, 711, 712, 0,
	97, 233, 234, 98, 663, 693, 713, 714, 237, 0,
	99, 705, 0, 686, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 108, 0, 687,
	689, 0, 688, 690, 109, 110, 281, 111, 715, 112,
	716, 717, 0, 113, 0, 114, 0, 0, 0, 708,
	116, 0, 117, 0, 0, 0, 651, 118, 119, 120,
	695, 696, 674, 0, 0, 121, 122, 718, 0, 123,
	0, 124, 0, 0, 314, 0, 125, 706, 0, 247,
	0, 126, 127, 128, 129, 702, 704, 316, 0, 133,
	0, 130, 0, 315, 131, 719, 132, 720, 721, 722,
	0, 685, 0, 317, 134, 318, 135, 136, 0, 138,
	137, 0, 707, 319, 139, 320, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 646, 0, 675, 703, 151, 723, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 697, 158, 159, 160, 161, 0, 698,
	162, 262, 163, 0, 164, 165, 166, 724, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 652, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 691, 193,
	184, 185, 194, 325, 195, 725, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 726, 200, 699, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 727, 728,
	0, 0, 209, 700, 701, 673, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 692, 217, 0, 275, 218,
	219, 220, 276, 729, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 647, 0, 0, 0, 0,
	0, 645, 0, 0, 0, 0, 643, 644, 678, 667,
	668, 665, 666, 657, 0, 653, 0, 0, 0, 0,
	656, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 694, 660, 0, 0, 0, 93, 94, 95,
	227, 709, 229, 710, 96, 711, 712, 0, 97, 233,
	234, 98, 663, 693, 713, 714, 237, 0, 99, 705,
	0, 686, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 2118, 0, 687, 689, 0,
	688, 690, 109, 110, 281, 111, 715, 112, 716, 717,
	0, 113, 0, 114, 0, 0, 0, 708, 116, 0,
	117, 0, 0, 0, 651, 118, 119, 120, 695, 696,
	674, 0, 0, 121, 122, 718, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 706, 0, 247, 0, 126,
	127, 128, 129, 702, 704, 316, 0, 133, 0, 130,
	0, 315, 131, 719, 132, 720, 721, 722, 0, 685,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	707, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 646, 0, 675, 703, 151, 723, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 697, 158, 159, 160, 161, 0, 698, 162, 262,
	163, 0, 164, 165, 166, 724, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 652, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 691, 193, 184, 185,
	194, 325, 195, 725, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 726, 200, 699, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 727, 728, 0, 0,
	209, 700, 701, 673, 210, 211, 2117, 213, 0, 0,
	214, 215, 216, 692, 217, 0, 275, 218, 219, 220,
	276, 729, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 647, 0, 0, 0, 0, 0, 645,
	0, 0, 0, 0, 643, 644, 678, 667, 668, 665,
	666, 657, 0, 653, 0, 0, 0, 0, 656, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	694, 660, 0, 0, 0, 93, 94, 95, 2116, 709,
	229, 710, 96, 711, 712, 0, 97, 233, 234, 98,
	663, 693, 713, 714, 237, 0, 99, 705, 0, 686,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 2118, 0, 687, 689, 0, 688, 690,
	109, 110, 281, 111, 715, 112, 716, 717, 0, 113,
	0, 114, 0, 0, 0, 708, 116, 0, 117, 0,
	0, 0, 651, 118, 119, 120, 695, 696, 674, 0,
	0, 121, 122, 718, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 706, 0, 247, 0, 126, 127, 128,
	129, 702, 704, 316, 0, 133, 0, 130, 0, 315,
	131, 719, 132, 720, 721, 722, 0, 685, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 707, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 646,
	0, 675, 703, 151, 723, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 697,
	158, 159, 160, 161, 0, 698, 162, 262, 163, 0,
	164, 165, 166, 724, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 652, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 691, 193, 184, 185, 194, 325,
	195, 725, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 726, 200, 699, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 727, 728, 0, 0, 209, 700,
	701, 673, 210, 211, 2117, 213, 0, 0, 214, 215,
	216, 692, 217, 0, 275, 218, 219, 220, 276, 729,
	0, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 647, 0, 0, 0, 0, 0, 645, 0, 0,
	0, 0, 643, 644, 678, 667, 668, 665, 666, 657,
	0, 653, 0, 0, 0, 0, 656, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 694, 660,
	0, 0, 0, 93, 94, 95, 227, 709, 229, 710,
	96, 711, 712, 0, 97, 233, 234, 98, 663, 693,
	713, 714, 237, 0, 99, 705, 0, 686, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 313,
	107, 108, 0, 687, 689, 0, 688, 690, 109, 110,
	281, 111, 715, 112, 716, 717, 0, 113, 0, 114,
	0, 0, 0, 708, 116, 0, 117, 0, 0, 0,
	651, 118, 119, 120, 695, 696, 674, 0, 0, 121,
	122, 718, 0, 123, 0, 124, 0, 0, 314, 0,
	125, 706, 0, 247, 0, 126, 127, 128, 129, 702,
	704, 316, 0, 133, 0, 130, 0, 315, 131, 719,
	132, 720, 721, 722, 0, 685, 0, 317, 134, 318,
	135, 136, 0, 138, 137, 0, 707, 319, 139, 320,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 321, 147, 148, 150, 149, 646, 0, 675,
	703, 151, 723, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 322, 157, 323, 697, 158, 159,
	160, 161, 0, 698, 162, 262, 163, 0, 164, 165,
	166, 724, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 324, 181,
	182, 652, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 691, 193, 184, 185, 194, 325, 195, 725,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 726,
	200, 699, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 727, 728, 0, 0, 209, 700, 701, 673,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 692,
	217, 0, 275, 218, 219, 220, 276, 729, 0, 0,
	221, 0, 0, 0, 0, 222, 223, 224, 225, 647,
	0, 0, 0, 0, 0, 645, 0, 0, 0, 0,
	643, 644, 1311, 667, 668, 665, 666, 657, 0, 653,
	0, 0, 0, 0, 656, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 694, 660, 0, 0,
	0, 93, 94, 95, 227, 709, 229, 710, 96, 711,
	712, 0, 97, 233, 234, 98, 663, 693, 713, 714,
	237, 0, 99, 705, 0, 686, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 313, 107, 108,
	0, 687, 689, 0, 688, 690, 109, 110, 281, 111,
	715, 1314, 716, 717, 0, 113, 0, 114, 0, 0,
	0, 708, 116, 0, 117, 0, 0, 0, 651, 118,
	119, 120, 695, 696, 674, 0, 0, 121, 122, 718,
	0, 123, 0, 124, 0, 0, 314, 0, 125, 706,
	0, 247, 0, 126, 127, 1315, 129, 702, 704, 316,
	0, 133, 0, 130, 0, 315, 131, 719, 132, 720,
	721, 722, 0, 685, 0, 317, 134, 318, 135, 136,
	0, 138, 137, 0, 707, 319, 139, 320, 0, 140,
	0, 0, 141, 0, 142, 1316, 1313, 146, 256, 145,
	321, 147, 148, 150, 149, 646, 0, 675, 703, 151,
	723, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 322, 157, 323, 697, 158, 159, 160, 161,
	0, 698, 162, 262, 163, 0, 164, 165, 166, 724,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 324, 181, 182, 652,
	183, 0, 187, 188, 189, 1317, 0, 265, 191, 192,
	691, 193, 184, 185, 194, 325, 195, 725, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 726, 200, 699,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	727, 728, 0, 0, 209, 700, 701, 673, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 692, 217, 0,
	275, 218, 219, 220, 276, 729, 0, 0, 221, 0,
	0, 0, 0, 222, 223, 1312, 225, 647, 0, 0,
	0, 0, 0, 645, 0, 0, 0, 0, 643, 644,
	678, 667, 668, 665, 666, 657, 0, 653, 0, 0,
	0, 0, 656, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 694, 660, 0, 0, 0, 93,
	94, 95, 227, 709, 229, 710, 96, 711, 712, 0,
	97, 233, 234, 98, 663, 693, 713, 714, 237, 0,
	99, 705, 0, 686, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 108, 0, 687,
	689, 0, 688, 690, 109, 110, 281, 111, 715, 112,
	716, 717, 0, 113, 0, 114, 0, 0, 0, 708,
	116, 0, 117, 0, 0, 0, 651, 118, 119, 120,
	695, 696, 674, 0, 0, 121, 122, 718, 0, 123,
	0, 124, 0, 0, 314, 0, 125, 706, 0, 247,
	0, 126, 127, 128, 129, 702, 704, 316, 0, 133,
	0, 130, 0, 315, 131, 719, 132, 720, 721, 722,
	0, 685, 0, 317, 134, 318, 135, 136, 0, 138,
	137, 0, 707, 319, 139, 320, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 0, 0, 675, 703, 151, 723, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 697, 158, 159, 160, 161, 0, 698,
	162, 262, 163, 0, 164, 165, 166, 724, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 1329, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 691, 193,
	184, 185, 194, 325, 195, 725, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 726, 200, 699, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 727, 728,
	0, 0, 209, 700, 701, 673, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 692, 217, 0, 275, 218,
	219, 220, 276, 729, 0, 0, 221, 0, 0, 0,
	0, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 1325, 1326, 678, 667,
	668, 665, 666, 657, 0, 1328, 0, 0, 0, 0,
	656, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 694, 660, 0, 0, 0, 93, 94, 95,
	227, 709, 229, 710, 96, 711, 712, 0, 97, 233,
	234, 98, 0, 693, 713, 714, 237, 0, 99, 705,
	0, 686, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 687, 689, 0,
	688, 690, 109, 110, 281, 111, 715, 112, 716, 717,
	0, 113, 0, 114, 0, 0, 0, 708, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 695, 696,
	674, 0, 0, 121, 122, 718, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 706, 0, 247, 0, 126,
	127, 128, 129, 702, 704, 316, 0, 133, 0, 130,
	0, 315, 131, 719, 132, 720, 721, 722, 0, 685,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	707, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 0, 0, 675, 703, 151, 723, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 697, 158, 159, 160, 161, 0, 698, 162, 262,
	163, 0, 164, 165, 166, 724, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 1329, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 691, 193, 184, 185,
	194, 325, 195, 725, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 726, 200, 699, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 727, 728, 0, 0,
	209, 700, 701, 673, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 692, 217, 0, 275, 218, 219, 220,
	276, 729, 0, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 0, 0, 678, 667, 668, 665, 666,
	657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 1328, 92, 0, 0, 0, 656, 694,
	660, 0, 0, 0, 93, 94, 95, 0, 709, 229,
	710, 96, 711, 712, 0, 97, 233, 234, 98, 663,
	693, 713, 714, 237, 0, 99, 705, 0, 686, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	313, 107, 2118, 0, 687, 689, 0, 688, 690, 109,
	110, 281, 111, 715, 112, 716, 717, 0, 113, 0,
	114, 0, 0, 0, 708, 116, 0, 117, 0, 0,
	0, 651, 118, 119, 120, 695, 696, 674, 0, 0,
	121, 122, 718, 0, 123, 0, 124, 0, 0, 314,
	0, 125, 706, 0, 247, 0, 126, 127, 128, 129,
	702, 704, 0, 0, 133, 0, 130, 0, 315, 131,
	719, 132, 720, 721, 722, 0, 685, 0, 0, 134,
	318, 135, 136, 0, 138, 137, 0, 707, 319, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 321, 147, 148, 150, 149, 646, 0,
	675, 703, 151, 723, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 322, 157, 323, 697, 158,
	159, 160, 161, 0, 698, 162, 262, 163, 0, 164,
	165, 166, 724, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 324,
	181, 182, 652, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 691, 193, 184, 185, 194, 0, 195,
	725, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	726, 200, 699, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 727, 728, 0, 0, 209, 700, 701,
	673, 210, 211, 2117, 213, 0, 0, 214, 215, 216,
	692, 217, 0, 275, 218, 219, 220, 276, 729, 0,
	0, 221, 0, 0, 0, 0, 222, 223, 224, 225,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 644, 0, 0, 0, 90, 91, 0, 92,
	653, 0, 0, 0, 694, 656, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 693, 235, 236, 237, 0,
	99, 705, 0, 686, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 313, 107, 108, 0, 687,
	689, 0, 688, 690, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	695, 696, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 314, 0, 125, 706, 0, 247,
	0, 126, 127, 128, 129, 702, 704, 316, 0, 133,
	0, 130, 0, 315, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 317, 134, 318, 135, 136, 0, 138,
	137, 0, 707, 319, 139, 320, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 321, 147,
	148, 150, 149, 0, 0, 0, 703, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	322, 157, 323, 697, 158, 159, 160, 161, 0, 698,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 324, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 691, 193,
	184, 185, 194, 325, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 699, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 700, 701, 0, 210, 211, 212, 213,
	0, 548, 214, 215, 216, 692, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 0,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 1602, 0, 235, 236, 237,
	0, 99, 238, 0, 312, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 316, 0,
	133, 0, 130, 0, 315, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 255, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 71, 265, 191, 192, 0,
	193, 184, 185, 194, 325, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 73, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 0, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 552, 277, 0, 0, 221, 0, 0,
	0, 69, 222, 223, 224, 225, 0, 70, 548, 769,
	0, 880, 877, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 68, 92, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 312, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 313, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	883, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	874, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 314, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 316, 0, 133, 0, 130,
	0, 315, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 317, 134, 318, 135, 136, 0, 138, 137, 0,
	255, 319, 139, 320, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 321, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 875, 0, 155, 0, 0, 156, 259, 322, 157,
	323, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 324, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 325, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 873, 210, 211, 212, 213, 0, 0,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 548, 769, 221, 880, 877, 872, 0, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 881, 878, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 312, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 313, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 868, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 874, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 314, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 316,
	0, 133, 0, 130, 0, 315, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 317, 134, 318, 135, 136,
	0, 138, 137, 0, 255, 319, 139, 320, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	321, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 875, 0, 155, 0, 0,
	156, 259, 322, 157, 323, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 324, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 325, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 873, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 548, 769, 221, 880,
	877, 872, 0, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 881, 878,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 312,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 313, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 874, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	314, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 316, 0, 133, 0, 130, 0, 315,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 317,
	134, 318, 135, 136, 0, 138, 137, 0, 255, 319,
	139, 320, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 321, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 875,
	0, 155, 0, 0, 156, 259, 322, 157, 323, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	324, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 325,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 873, 210, 211, 212, 213, 0, 0, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	87, 0, 221, 0, 0, 0, 0, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 881, 878, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 248, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 502, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 71, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	73, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 0, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 552, 277, 0, 0, 221, 87, 0, 0,
	69, 222, 223, 224, 225, 0, 70, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 226, 0, 1206, 0, 1211, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 71, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 73, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 0, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 552,
	277, 0, 0, 221, 87, 0, 0, 69, 222, 223,
	224, 225, 0, 70, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 226, 0,
	0, 0, 68, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 502, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 87, 0, 0, 0, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 226, 0, 1206, 0, 1211,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 777, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 0, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 1112, 0, 235,
	236, 237, 0, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 248, 249,
	0, 0, 133, 0, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 1727, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 0, 0, 0, 0, 222, 223, 224, 225, 678,
	667, 668, 665, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 740,
	0, 0, 0, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 709, 229, 710, 96, 711, 712, 0, 97,
	233, 234, 98, 0, 0, 713, 714, 237, 0, 99,
	238, 0, 312, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 313, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 715, 112, 716,
	717, 0, 113, 0, 114, 0, 0, 0, 708, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 674, 0, 0, 121, 122, 718, 0, 123, 0,
	124, 0, 0, 314, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 316, 0, 133, 0,
	130, 0, 315, 131, 719, 132, 720, 721, 722, 0,
	685, 0, 317, 134, 318, 135, 136, 0, 138, 137,
	0, 255, 319, 139, 320, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 321, 147, 148,
	150, 149, 0, 0, 675, 257, 151, 723, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 322,
	157, 323, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 724, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 324, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 325, 195, 725, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 726, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 727, 728, 0,
	0, 209, 273, 274, 673, 210, 211, 212, 213, 0,
	0, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 729, 548, 769, 221, 0, 0, 767, 0,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 312, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 313, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 314, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 248, 249,
	316, 0, 133, 0, 130, 0, 315, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 317, 134, 318, 135,
	136, 0, 138, 137, 0, 255, 319, 139, 320, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 321, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 322, 157, 323, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 324, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 325, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	83, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 82, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 0, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 548, 769, 0, 0, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 0,
	92, 0, 86, 0, 0, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 312, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 313, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 314, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 316, 0,
	133, 0, 130, 0, 315, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 317, 134, 318, 135, 136, 0,
	138, 137, 0, 255, 319, 139, 320, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 321,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 322, 157, 323, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 324, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 325, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 548, 221, 0,
	0, 0, 0, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	86, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	312, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 313, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 314, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 316, 0, 133, 0, 130, 0,
	315, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	317, 134, 318, 135, 136, 0, 138, 137, 0, 255,
	319, 139, 320, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 321, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 322, 157, 323,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 324, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	325, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 0, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 1069, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 1067, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 1178, 0, 121, 122, 245, 0, 123, 0, 124,
	1072, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 0, 0, 133, 1176, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 1071, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 1177,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 87, 0, 221, 0, 0, 0, 0, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 1069, 99, 238, 0, 0, 1064, 100, 101, 102,
	0, 103, 1067, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 1072, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 1063, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 1071, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 1070, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 87, 0, 221, 0,
	0, 0, 0, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	226, 0, 1694, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 248, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 248, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 502, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 897, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 248, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 802, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 502, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 560, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 248, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 87, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 0,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 514, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 502, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 507, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 502, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 411, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 237, 0, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 248, 249,
	0, 0, 133, 0, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	145, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 410, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	270, 271, 272, 0, 0, 209, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 145, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 270, 271, 272, 0, 0, 209, 273, 274, 0,
	210, 211, 212, 213, 0, 87, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 90, 91, 0, 92, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	1375, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 1373, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 1362, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 0, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 927, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 248, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 425,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 787, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 248, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 167, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 0,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 87, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 0,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 99, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 617, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 140, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 145, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 264, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 192, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 270, 271,
	272, 0, 0, 209, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 612, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 160, 161,
	0, 261, 162, 262, 163, 0, 164, 165, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	183, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 87, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 90,
	91, 0, 92, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 93, 94, 95, 227, 228, 229, 230, 96,
	231, 232, 0, 97, 233, 234, 98, 0, 0, 235,
	236, 566, 0, 99, 238, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 281,
	111, 239, 112, 240, 241, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 242,
	118, 119, 120, 243, 244, 0, 0, 0, 121, 122,
	245, 0, 123, 0, 124, 0, 0, 0, 0, 125,
	246, 0, 247, 0, 126, 127, 128, 129, 248, 249,
	0, 0, 133, 0, 130, 0, 0, 131, 250, 132,
	251, 252, 253, 0, 254, 0, 0, 134, 0, 135,
	136, 0, 138, 137, 0, 255, 0, 139, 0, 0,
	140, 0, 0, 141, 0, 142, 143, 144, 146, 256,
	437, 0, 147, 148, 150, 149, 0, 0, 0, 257,
	151, 258, 152, 153, 0, 154, 0, 0, 155, 0,
	0, 156, 259, 0, 157, 0, 260, 158, 159, 160,
	161, 0, 261, 162, 262, 163, 0, 164, 165, 166,
	263, 167, 168, 0, 169, 170, 171, 172, 173, 175,
	176, 174, 177, 178, 179, 0, 180, 0, 181, 182,
	264, 183, 0, 187, 188, 189, 190, 0, 265, 191,
	192, 0, 193, 184, 185, 194, 0, 195, 266, 267,
	196, 0, 202, 197, 198, 186, 199, 201, 268, 200,
	269, 0, 203, 0, 204, 205, 206, 207, 208, 0,
	436, 271, 272, 0, 0, 432, 273, 274, 0, 210,
	211, 212, 213, 0, 87, 214, 215, 216, 0, 217,
	0, 275, 218, 219, 220, 276, 277, 0, 0, 221,
	90, 91, 0, 92, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 93, 94, 95, 227, 228, 229, 230,
	96, 231, 232, 0, 97, 233, 234, 98, 0, 0,
	235, 236, 237, 0, 99, 238, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	281, 111, 239, 112, 240, 241, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	242, 118, 119, 120, 243, 244, 0, 0, 0, 121,
	122, 245, 0, 123, 0, 124, 0, 0, 0, 0,
	125, 246, 0, 247, 0, 126, 127, 128, 129, 248,
	249, 0, 0, 133, 0, 130, 0, 0, 131, 250,
	132, 251, 252, 253, 0, 254, 0, 0, 134, 0,
	135, 136, 0, 138, 137, 0, 255, 0, 139, 0,
	0, 140, 0, 0, 141, 0, 142, 143, 144, 146,
	256, 437, 0, 147, 148, 150, 149, 0, 0, 0,
	257, 151, 258, 152, 153, 0, 154, 0, 0, 155,
	0, 0, 156, 259, 0, 157, 0, 260, 158, 159,
	160, 161, 0, 261, 162, 262, 163, 0, 164, 165,
	166, 263, 167, 168, 0, 169, 170, 171, 172, 173,
	175, 176, 174, 177, 178, 179, 0, 180, 0, 181,
	182, 264, 183, 0, 187, 188, 189, 190, 0, 265,
	191, 192, 0, 193, 184, 185, 194, 0, 195, 266,
	267, 196, 0, 202, 197, 198, 186, 199, 201, 268,
	200, 269, 0, 203, 0, 204, 205, 206, 207, 208,
	0, 436, 271, 272, 0, 0, 432, 273, 274, 0,
	210, 211, 212, 213, 0, 87, 214, 215, 216, 0,
	217, 0, 275, 218, 219, 220, 276, 277, 0, 0,
	221, 90, 91, 0, 92, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 93, 94, 95, 227, 228, 229,
	230, 96, 231, 232, 0, 97, 233, 234, 98, 0,
	0, 235, 236, 237, 0, 99, 238, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 281, 111, 239, 112, 240, 241, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 242, 118, 119, 120, 243, 244, 0, 0, 0,
	121, 122, 245, 0, 123, 0, 124, 0, 0, 0,
	0, 125, 246, 0, 247, 0, 126, 127, 128, 129,
	544, 249, 0, 0, 133, 0, 130, 0, 0, 131,
	250, 132, 251, 252, 253, 0, 254, 0, 0, 134,
	0, 135, 136, 0, 138, 137, 0, 255, 0, 139,
	0, 0, 140, 0, 0, 141, 0, 142, 143, 144,
	146, 256, 145, 0, 147, 148, 150, 149, 0, 0,
	0, 257, 151, 258, 152, 153, 0, 154, 0, 0,
	155, 0, 0, 156, 259, 0, 157, 0, 260, 158,
	159, 160, 161, 0, 261, 162, 262, 163, 0, 164,
	165, 166, 263, 167, 168, 0, 169, 170, 171, 172,
	173, 175, 176, 174, 177, 178, 179, 0, 180, 0,
	181, 182, 264, 183, 0, 187, 188, 189, 190, 0,
	265, 191, 192, 0, 193, 184, 185, 194, 0, 195,
	266, 267, 196, 0, 202, 197, 198, 186, 199, 201,
	268, 200, 269, 0, 203, 0, 204, 205, 206, 207,
	208, 0, 270, 271, 272, 0, 0, 209, 273, 274,
	0, 210, 211, 212, 213, 0, 87, 214, 215, 216,
	0, 217, 0, 275, 218, 219, 220, 276, 277, 0,
	0, 221, 90, 91, 0, 92, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 93, 94, 95, 227, 228,
	229, 230, 96, 231, 232, 0, 97, 233, 234, 98,
	0, 0, 235, 236, 237, 0, 99, 238, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 281, 111, 239, 112, 240, 241, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 242, 118, 119, 120, 243, 244, 0, 0,
	0, 121, 122, 245, 0, 123, 0, 124, 0, 0,
	0, 0, 125, 246, 0, 247, 0, 126, 127, 128,
	129, 541, 249, 0, 0, 133, 0, 130, 0, 0,
	131, 250, 132, 251, 252, 253, 0, 254, 0, 0,
	134, 0, 135, 136, 0, 138, 137, 0, 255, 0,
	139, 0, 0, 140, 0, 0, 141, 0, 142, 143,
	144, 146, 256, 145, 0, 147, 148, 150, 149, 0,
	0, 0, 257, 151, 258, 152, 153, 0, 154, 0,
	0, 155, 0, 0, 156, 259, 0, 157, 0, 260,
	158, 159, 160, 161, 0, 261, 162, 262, 163, 0,
	164, 165, 166, 263, 167, 168, 0, 169, 170, 171,
	172, 173, 175, 176, 174, 177, 178, 179, 0, 180,
	0, 181, 182, 264, 183, 0, 187, 188, 189, 190,
	0, 265, 191, 192, 0, 193, 184, 185, 194, 0,
	195, 266, 267, 196, 0, 202, 197, 198, 186, 199,
	201, 268, 200, 269, 0, 203, 0, 204, 205, 206,
	207, 208, 0, 270, 271, 272, 0, 0, 209, 273,
	274, 0, 210, 211, 212, 213, 0, 87, 214, 215,
	216, 0, 217, 0, 275, 218, 219, 220, 276, 277,
	0, 0, 221, 90, 91, 0, 92, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 93, 94, 95, 227,
	228, 229, 230, 96, 231, 232, 0, 97, 233, 234,
	98, 0, 0, 235, 236, 237, 0, 99, 238, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 281, 111, 239, 112, 240, 241, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 242, 118, 119, 120, 243, 244, 0,
	0, 0, 121, 122, 245, 0, 123, 0, 124, 0,
	0, 0, 0, 125, 246, 0, 247, 0, 126, 127,
	128, 129, 538, 249, 0, 0, 133, 0, 130, 0,
	0, 131, 250, 132, 251, 252, 253, 0, 254, 0,
	0, 134, 0, 135, 136, 0, 138, 137, 0, 255,
	0, 139, 0, 0, 140, 0, 0, 141, 0, 142,
	143, 144, 146, 256, 145, 0, 147, 148, 150, 149,
	0, 0, 0, 257, 151, 258, 152, 153, 0, 154,
	0, 0, 155, 0, 0, 156, 259, 0, 157, 0,
	260, 158, 159, 160, 161, 0, 261, 162, 262, 163,
	0, 164, 165, 166, 263, 167, 168, 0, 169, 170,
	171, 172, 173, 175, 176, 174, 177, 178, 179, 0,
	180, 0, 181, 182, 264, 183, 0, 187, 188, 189,
	190, 0, 265, 191, 192, 0, 193, 184, 185, 194,
	0, 195, 266, 267, 196, 0, 202, 197, 198, 186,
	199, 201, 268, 200, 269, 0, 203, 0, 204, 205,
	206, 207, 208, 0, 270, 271, 272, 0, 0, 209,
	273, 274, 0, 210, 211, 212, 213, 0, 87, 214,
	215, 216, 0, 217, 0, 275, 218, 219, 220, 276,
	277, 0, 0, 221, 90, 91, 0, 92, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 93, 94, 95,
	227, 228, 229, 230, 96, 231, 232, 0, 97, 233,
	234, 98, 0, 0, 235, 236, 237, 0, 99, 238,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 281, 111, 239, 112, 240, 241,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 242, 118, 119, 120, 243, 244,
	0, 0, 0, 121, 122, 245, 0, 123, 0, 124,
	0, 0, 0, 0, 125, 246, 0, 247, 0, 126,
	127, 128, 129, 536, 249, 0, 0, 133, 0, 130,
	0, 0, 131, 250, 132, 251, 252, 253, 0, 254,
	0, 0, 134, 0, 135, 136, 0, 138, 137, 0,
	255, 0, 139, 0, 0, 140, 0, 0, 141, 0,
	142, 143, 144, 146, 256, 145, 0, 147, 148, 150,
	149, 0, 0, 0, 257, 151, 258, 152, 153, 0,
	154, 0, 0, 155, 0, 0, 156, 259, 0, 157,
	0, 260, 158, 159, 160, 161, 0, 261, 162, 262,
	163, 0, 164, 165, 166, 263, 167, 168, 0, 169,
	170, 171, 172, 173, 175, 176, 174, 177, 178, 179,
	0, 180, 0, 181, 182, 264, 183, 0, 187, 188,
	189, 190, 0, 265, 191, 192, 0, 193, 184, 185,
	194, 0, 195, 266, 267, 196, 0, 202, 197, 198,
	186, 199, 201, 268, 200, 269, 0, 203, 0, 204,
	205, 206, 207, 208, 0, 270, 271, 272, 0, 0,
	209, 273, 274, 0, 210, 211, 212, 213, 0, 87,
	214, 215, 216, 0, 217, 0, 275, 218, 219, 220,
	276, 277, 0, 0, 221, 90, 91, 0, 92, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 93, 94,
	95, 227, 228, 229, 230, 96, 231, 232, 0, 97,
	233, 234, 98, 0, 0, 235, 236, 237, 0, 99,
	238, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 281, 111, 239, 112, 240,
	241, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 242, 118, 119, 120, 243,
	244, 0, 0, 0, 121, 122, 245, 0, 123, 0,
	124, 0, 0, 0, 0, 125, 246, 0, 247, 0,
	126, 127, 128, 129, 510, 249, 0, 0, 133, 0,
	130, 0, 0, 131, 250, 132, 251, 252, 253, 0,
	254, 0, 0, 134, 0, 135, 136, 0, 138, 137,
	0, 255, 0, 139, 0, 0, 140, 0, 0, 141,
	0, 142, 143, 144, 146, 256, 145, 0, 147, 148,
	150, 149, 0, 0, 0, 257, 151, 258, 152, 153,
	0, 154, 0, 0, 155, 0, 0, 156, 259, 0,
	157, 0, 260, 158, 159, 160, 161, 0, 261, 162,
	262, 163, 0, 164, 165, 166, 263, 167, 168, 0,
	169, 170, 171, 172, 173, 175, 176, 174, 177, 178,
	179, 0, 180, 0, 181, 182, 264, 183, 0, 187,
	188, 189, 190, 0, 265, 191, 192, 0, 193, 184,
	185, 194, 0, 195, 266, 267, 196, 0, 202, 197,
	198, 186, 199, 201, 268, 200, 269, 0, 203, 0,
	204, 205, 206, 207, 208, 0, 270, 271, 272, 0,
	0, 209, 273, 274, 0, 210, 211, 212, 213, 0,
	87, 214, 215, 216, 0, 217, 0, 275, 218, 219,
	220, 276, 277, 0, 0, 221, 90, 91, 0, 92,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 93,
	94, 95, 227, 228, 229, 230, 96, 231, 232, 0,
	97, 233, 234, 98, 0, 0, 235, 236, 237, 0,
	99, 238, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 281, 111, 239, 112,
	240, 241, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 242, 118, 119, 120,
	243, 244, 0, 0, 0, 121, 122, 245, 0, 123,
	0, 124, 0, 0, 0, 0, 125, 246, 0, 247,
	0, 126, 127, 128, 129, 248, 249, 0, 0, 133,
	0, 130, 0, 0, 131, 250, 132, 251, 252, 253,
	0, 254, 0, 0, 134, 0, 135, 136, 0, 138,
	137, 0, 255, 0, 139, 0, 0, 140, 0, 0,
	141, 0, 142, 143, 144, 146, 256, 145, 0, 147,
	148, 150, 149, 0, 0, 0, 257, 151, 258, 152,
	153, 0, 154, 0, 0, 155, 0, 0, 156, 259,
	0, 157, 0, 260, 158, 159, 160, 161, 0, 261,
	162, 262, 163, 0, 164, 165, 166, 263, 491, 168,
	0, 169, 170, 171, 172, 173, 175, 176, 174, 177,
	178, 179, 0, 180, 0, 181, 182, 264, 183, 0,
	187, 188, 189, 190, 0, 265, 191, 192, 0, 193,
	184, 185, 194, 0, 195, 266, 267, 196, 0, 202,
	197, 198, 186, 199, 201, 268, 200, 269, 0, 203,
	0, 204, 205, 206, 207, 208, 0, 270, 271, 272,
	0, 0, 209, 273, 274, 0, 210, 211, 212, 213,
	0, 87, 214, 215, 216, 0, 217, 0, 275, 218,
	219, 220, 276, 277, 0, 0, 221, 90, 91, 0,
	92, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	93, 94, 95, 227, 228, 229, 230, 96, 231, 232,
	0, 97, 233, 234, 98, 0, 0, 235, 236, 237,
	0, 430, 238, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 281, 111, 239,
	112, 240, 241, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 242, 118, 119,
	120, 243, 244, 0, 0, 0, 121, 122, 245, 0,
	123, 0, 124, 0, 0, 0, 0, 125, 246, 0,
	247, 0, 126, 127, 128, 129, 248, 249, 0, 0,
	133, 0, 130, 0, 0, 131, 250, 132, 251, 252,
	253, 0, 254, 0, 0, 134, 0, 135, 136, 0,
	138, 137, 0, 255, 0, 139, 0, 0, 428, 0,
	0, 141, 0, 142, 143, 144, 146, 256, 437, 0,
	147, 148, 150, 149, 0, 0, 0, 257, 151, 258,
	152, 153, 0, 154, 0, 0, 155, 0, 0, 156,
	259, 0, 157, 0, 260, 158, 159, 160, 161, 0,
	261, 162, 262, 163, 0, 164, 165, 166, 263, 167,
	168, 0, 169, 170, 171, 172, 173, 175, 176, 174,
	177, 178, 179, 0, 180, 0, 181, 182, 431, 183,
	0, 187, 188, 189, 190, 0, 265, 191, 429, 0,
	193, 184, 185, 194, 0, 195, 266, 267, 196, 0,
	202, 197, 198, 186, 199, 201, 268, 200, 269, 0,
	203, 0, 204, 205, 206, 207, 208, 0, 436, 271,
	272, 0, 0, 432, 273, 274, 0, 210, 211, 212,
	213, 0, 87, 214, 215, 216, 0, 217, 0, 275,
	218, 219, 220, 276, 277, 0, 0, 221, 90, 91,
	0, 92, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 93, 94, 95, 227, 228, 229, 230, 96, 231,
	232, 0, 97, 233, 234, 98, 0, 0, 235, 236,
	237, 0, 99, 238, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 281, 111,
	239, 112, 240, 241, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 242, 118,
	119, 120, 243, 244, 0, 0, 0, 121, 122, 245,
	0, 123, 0, 124, 0, 0, 0, 0, 125, 246,
	0, 247, 0, 126, 127, 128, 129, 248, 249, 0,
	0, 133, 0, 130, 0, 0, 131, 250, 132, 251,
	252, 253, 0, 254, 0, 0, 134, 0, 135, 136,
	0, 138, 137, 0, 255, 0, 139, 0, 0, 140,
	0, 0, 141, 0, 142, 143, 144, 146, 256, 145,
	0, 147, 148, 150, 149, 0, 0, 0, 257, 151,
	258, 152, 153, 0, 154, 0, 0, 155, 0, 0,
	156, 259, 0, 157, 0, 260, 158, 159, 0, 161,
	0, 261, 162, 262, 163, 0, 164, 0, 166, 263,
	167, 168, 0, 169, 170, 171, 172, 173, 175, 176,
	174, 177, 178, 179, 0, 180, 0, 181, 182, 264,
	0, 0, 187, 188, 189, 190, 0, 265, 191, 192,
	0, 193, 184, 185, 194, 0, 195, 266, 267, 196,
	0, 202, 197, 198, 186, 199, 201, 268, 200, 269,
	0, 203, 0, 204, 205, 206, 207, 208, 0, 270,
	271, 272, 0, 0, 209, 273, 274, 0, 210, 211,
	212, 213, 0, 0, 214, 215, 216, 0, 217, 0,
	275, 218, 219, 220, 276, 277, 0, 0, 221, 0,
	0, 0, 0, 222, 223, 224, 225, 954, 955, 0,
	974, 975, 976, 984, 985, 986, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 988, 0, 0, 0, 0, 0, 954,
	955, 0, 974, 975, 976, 984, 985, 986, 0, 0,
	0, 0, 0, 956, 0, 977, 0, 0, 0, 971,
	0, 0, 957, 0, 0, 988, 0, 0, 0, 0,
	0, 954, 955, 0, 974, 975, 976, 984, 985, 986,
	0, 0, 0, 0, 0, 956, 0, 977, 0, 0,
	0, 971, 0, 0, 957, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 981, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	981, 989, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 979, 0,
	0, 0, 981, 989, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 978,
	979, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 982, 968,
	969, 970, 983, 0, 967, 965, 966, 958, 959, 960,
	961, 963, 964, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 0, 0, 0, 0, 0, 0, 980, 0,
	0, 968, 969, 970, 983, 0, 967, 965, 966, 958,
	959, 960, 961, 963, 964, 0, 0, 0, 0, 2056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 968, 969, 970, 983, 0, 967, 965,
	966, 958, 959, 960, 961, 963, 964, 0, 0, 954,
	955, 2054, 974, 975, 976, 984, 985, 986, 0, 0,
	0, 0, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 0, 957, 954, 955, 988, 974, 975, 976, 984,
	985, 986, 0, 0, 0, 0, 0, 0, 0, 977,
	0, 0, 0, 0, 0, 956, 957, 0, 0, 988,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	954, 955, 0, 974, 975, 976, 984, 985, 986, 956,
	0, 0, 0, 0, 0, 971, 977, 0, 0, 0,
	0, 0, 0, 957, 0, 0, 988, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	981, 989, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 981, 989, 0, 0, 979, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	987, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 972, 978,
	0, 981, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 980, 0,
	0, 968, 969, 970, 983, 0, 967, 965, 966, 958,
	959, 960, 961, 963, 964, 0, 0, 0, 0, 1999,
	0, 0, 980, 0, 0, 968, 969, 970, 983, 0,
	967, 965, 966, 958, 959, 960, 961, 963, 964, 0,
	0, 0, 0, 1994, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 980,
	0, 0, 968, 969, 970, 983, 0, 967, 965, 966,
	958, 959, 960, 961, 963, 964, 0, 0, 954, 955,
	1990, 974, 975, 976, 984, 985, 986, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 957, 954, 955, 988, 974, 975, 976, 984, 985,
	986, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 956, 957, 0, 0, 988, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 954,
	955, 0, 974, 975, 976, 984, 985, 986, 956, 0,
	0, 0, 0, 0, 971, 977, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 981,
	989, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 0, 981, 989, 0, 0, 979, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 987,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 972, 978, 0,
	981, 989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 978, 0, 0, 0, 0, 0, 979, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 978,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 980, 0, 0,
	968, 969, 970, 983, 0, 967, 965, 966, 958, 959,
	960, 961, 963, 964, 0, 0, 0, 0, 1929, 0,
	0, 980, 0, 0, 968, 969, 970, 983, 0, 967,
	965, 966, 958, 959, 960, 961, 963, 964, 0, 0,
	0, 0, 1907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 980, 0,
	0, 968, 969, 970, 983, 0, 967, 965, 966, 958,
	959, 960, 961, 963, 964, 0, 0, 954, 955, 1906,
	974, 975, 976, 984, 985, 986, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	957, 954, 955, 988, 974, 975, 976, 984, 985, 986,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 956, 957, 0, 0, 988, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 954, 955,
	0, 974, 975, 976, 984, 985, 986, 956, 0, 0,
	0, 0, 0, 971, 977, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 988, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 981, 989,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 981, 989, 0, 0, 979, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 987, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 972, 978, 0, 981,
	989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 978, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 980, 0, 0, 968,
	969, 970, 983, 0, 967, 965, 966, 958, 959, 960,
	961, 963, 964, 0, 0, 0, 0, 1796, 0, 0,
	980, 0, 0, 968, 969, 970, 983, 0, 967, 965,
	966, 958, 959, 960, 961, 963, 964, 0, 0, 0,
	0, 1730, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 0, 0,
	968, 969, 970, 983, 0, 967, 965, 966, 958, 959,
	960, 961, 963, 964, 0, 0, 954, 955, 1714, 974,
	975, 976, 984, 985, 986, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 957,
	954, 955, 988, 974, 975, 976, 984, 985, 986, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 956, 957, 0, 0, 988, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 954, 955, 0,
	974, 975, 976, 984, 985, 986, 956, 0, 0, 0,
	0, 0, 971, 977, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 988, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 981, 989, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 981, 989, 0, 0, 979, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 987, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 972, 978, 0, 981, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 987, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 978, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 980, 0, 0, 968, 969,
	970, 983, 0, 967, 965, 966, 958, 959, 960, 961,
	963, 964, 0, 0, 0, 0, 1667, 0, 0, 980,
	0, 0, 968, 969, 970, 983, 0, 967, 965, 966,
	958, 959, 960, 961, 963, 964, 0, 0, 0, 0,
	1283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 968,
	969, 970, 983, 0, 967, 965, 966, 958, 959, 960,
	961, 963, 964, 954, 955, 1503, 974, 975, 976, 984,
	985, 986, 0, 0, 0, 0, 0, 0, 0, 977,
	0, 0, 0, 0, 0, 0, 957, 954, 955, 988,
	974, 975, 976, 984, 985, 986, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 956,
	957, 0, 0, 988, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 954, 955, 0, 974, 975, 976,
	984, 985, 986, 956, 0, 0, 0, 0, 0, 971,
	977, 0, 0, 0, 0, 1198, 0, 957, 0, 0,
	988, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 2139, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 981, 989, 0, 0, 0, 962,
	0, 1568, 0, 0, 1567, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 1199, 0, 0, 0, 981, 989,
	0, 0, 979, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 987, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 972, 978, 0, 981, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2138, 0, 0,
	0, 987, 0, 0, 0, 0, 0, 978, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 978, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 1536, 1537,
	0, 1554, 1555, 1556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1707, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 980, 0, 0, 968, 969, 970, 983, 0,
	967, 965, 966, 958, 959, 960, 961, 963, 964, 0,
	1551, 0, 0, 0, 0, 0, 980, 0, 0, 968,
	969, 970, 983, 0, 967, 965, 966, 958, 959, 960,
	961, 963, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 980, 0, 0, 968, 969, 970, 983,
	1542, 967, 965, 966, 958, 959, 960, 961, 963, 964,
	992, 0, 0, 0, 0, 0, 954, 955, 0, 974,
	975, 976, 984, 985, 986, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 1557, 991, 0, 0, 957,
	954, 955, 988, 974, 975, 976, 984, 985, 986, 0,
	0, 0, 0, 1552, 0, 0, 977, 0, 0, 0,
	0, 0, 956, 957, 0, 0, 988, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 954, 955, 0,
	974, 975, 976, 984, 985, 986, 956, 0, 0, 0,
	0, 0, 971, 977, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 988, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 1553, 0, 956, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 981, 989, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 981, 989, 0, 0, 979, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 987, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 972, 978, 0, 981, 989,
	1548, 1549, 1550, 0, 0, 1547, 1545, 1546, 1538, 1539,
	1540, 1541, 1543, 1544, 987, 0, 0, 0, 0, 0,
	978, 486, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 978, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 1536, 1537, 0, 1554, 1555, 1556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 980, 0, 0, 968, 969,
	970, 983, 0, 967, 965, 966, 958, 959, 960, 961,
	963, 964, 0, 1551, 0, 0, 0, 1718, 0, 980,
	0, 0, 968, 969, 970, 983, 0, 967, 965, 966,
	958, 959, 960, 961, 963, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 968,
	969, 970, 983, 1542, 967, 965, 966, 958, 959, 960,
	961, 963, 964, 954, 955, 0, 974, 975, 976, 984,
	985, 986, 0, 0, 0, 0, 0, 0, 0, 977,
	0, 0, 0, 0, 0, 0, 957, 954, 955, 988,
	974, 975, 976, 984, 985, 986, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 1552, 1569, 0, 956,
	957, 0, 0, 988, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	1574, 0, 0, 0, 1553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 989, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 981, 989,
	0, 0, 979, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 972, 978, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1548, 1549, 1550, 0, 0, 1547, 1545,
	1546, 1538, 1539, 1540, 1541, 1543, 1544, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 954, 955, 0, 974, 975, 976, 984, 985, 986,
	982, 0, 0, 0, 0, 0, 0, 977, 0, 0,
	973, 0, 0, 0, 957, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 968, 969, 970, 983, 0,
	967, 965, 966, 958, 959, 960, 961, 963, 964, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 968,
	969, 970, 983, 962, 967, 965, 966, 958, 959, 960,
	961, 963, 964, 954, 955, 0, 974, 975, 976, 984,
	985, 986, 981, 989, 0, 0, 0, 0, 0, 977,
	0, 0, 0, 1527, 0, 0, 957, 0, 987, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 972, 0, 0, 956,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1534, 0, 0, 954, 955, 0, 974,
	975, 976, 984, 985, 986, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 962, 0, 0, 0, 957,
	0, 0, 988, 0, 973, 0, 0, 1536, 1537, 0,
	1554, 1555, 1556, 0, 981, 989, 0, 0, 982, 0,
	0, 0, 956, 1706, 0, 0, 0, 0, 971, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 0, 962, 0,
	980, 0, 0, 968, 969, 970, 983, 0, 967, 965,
	966, 958, 959, 960, 961, 963, 964, 981, 989, 0,
	0, 0, 0, 0, 0, 0, 0, 1536, 1537, 1542,
	1554, 1555, 1556, 987, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	982, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 978, 0, 0, 1551,
	0, 0, 1552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 968, 969, 970, 983, 973,
	967, 965, 966, 958, 959, 960, 961, 963, 964, 1542,
	0, 954, 955, 982, 974, 975, 976, 984, 985, 986,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 1558,
	1553, 0, 0, 0, 957, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 1557, 0, 0, 954, 955, 0,
	974, 975, 976, 984, 985, 986, 0, 956, 0, 0,
	0, 0, 1552, 971, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 988, 0, 980, 0, 0, 968, 969,
	970, 983, 0, 967, 965, 966, 958, 959, 960, 961,
	963, 964, 0, 956, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1548,
	1549, 1550, 0, 962, 1547, 1545, 1546, 1538, 1539, 1540,
	1541, 1543, 1544, 0, 1536, 1537, 0, 1554, 1555, 1556,
	1553, 0, 981, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 972, 0, 981, 989,
	0, 0, 0, 0, 0, 0, 1551, 0, 0, 0,
	0, 0, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 1548,
	1549, 1550, 0, 0, 1547, 1545, 1546, 1538, 1539, 1540,
	1541, 1543, 1544, 0, 0, 0, 1542, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1557, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 1552,
	0, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 968, 969, 970, 983, 0, 967, 965,
	966, 958, 959, 960, 961, 963, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 1553, 0, 968,
	969, 970, 983, 0, 967, 965, 966, 958, 959, 960,
	961, 963, 964, 0, 0, 0, 829, 821, 846, 813,
	837, 836, 0, 0, 815, 814, 0, 0, 0, 848,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 834, 833, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 1548, 1549, 1550, 0,
	0, 1547, 1545, 1546, 1538, 1539, 1540, 1541, 1543, 1544,
	831, 0, 0, 0, 0, 0, 0, 0, 829, 821,
	846, 813, 837, 836, 0, 0, 815, 814, 0, 440,
	0, 848, 847, 0, 0, 0, 0, 0, 824, 823,
	825, 826, 827, 0, 845, 0, 0, 441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 0, 834, 833, 0, 0, 817,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 442,
	0, 835, 0, 0, 445, 822, 0, 0, 0, 450,
	451, 0, 831, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 444, 446, 0, 0, 0,
	830, 0, 0, 0, 1217, 1215, 1216, 1219, 1218, 0,
	824, 823, 825, 826, 827, 0, 845, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 0, 0, 447, 0, 0, 828, 819,
	0, 817, 0, 0, 0, 0, 0, 0, 850, 448,
	449, 0, 0, 835, 0, 0, 0, 822, 816, 0,
	0, 843, 844, 0, 0, 0, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 820, 830, 0, 0, 0, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	828, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 843, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 443, 0, 0,
	0, 0, 0, 820, 0, 0, 0, 0, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 0, 458, 0, 0, 0, 454, 0, 0, 0,
	0, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 457,
}
var sqlPact = [...]int{

	157, -1000, -85, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 730, 16340, 16340, 20330, -1000, -1000, -1000, -1000, -1000,
	-1000, 752, 710, 243, 5281, 20330, 20330, 20049, 1127, 1127,
	21735, -1000, -1000, 25107, -1000, 29455, 517, 532, 517, 517,
	533, 21735, 20330, 659, 743, 151, -1000, 971, 3, 24826,
	20330, 1441, 49, 18363, 322, 157, 19768, 24545, 20330, 19487,
	637, 44, 16918, 20330, -1000, 56, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1281, 374,
	56, -1000, 1280, 1181, 1168, 18363, 24264, 23983, 23702, 23421,
	-1000, 12537, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 815, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 335, 329, -1000,
	19206, -1000, 963, -1000, 45, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 953, -1000, 20330, -1000, -1000, 23140, 22859,
	712, 326, 955, -1000, -1000, 591, 424, 1461, -1000, 62,
	-1000, 1438, 711, -1000, -1000, 1279, -1000, 952, 1276, 1275,
	1273, 1272, 1271, 1269, 421, 849, 496, -1000, 1268, 1265,
	955, -1000, 955, -1000, -1000, -1000, 636, 21735, -1000, -1000,
	18363, -1000, 22578, 20330, 20330, 1204, 22297, -1000, 971, -1000,
	-1000, -1000, 1049, 1440, 1440, 1440, 1454, 170, 167, 151,
	25, 20330, -1000, 323, 25, 9417, 9417, -1000, -1000, 322,
	-1000, 373, 15460, -1000, 8463, -1000, 865, 1350, 480, 773,
	1349, -86, 851, 816, 1347, 16059, 16918, 44, 43, -1000,
	-1000, -1000, 4976, 16059, 695, 14617, 56, -1000, -1000, -1000,
	18363, 20330, 20330, 738, 22016, -1000, 1346, 131, 1340, -1000,
	124, 1338, -1000, 124, 1337, 41, -1000, -1000, -1000, -1000,
	-1000, -1000, 322, 18925, 20330, 1497, 29411, -1000, 10690, -1000,
	-1000, 16340, 954, 16340, -1000, -1000, 1495, -1000, 20330, 10690,
	-1000, 39, 32, 1090, 1087, 13138, 12844, 1389, 972, -1000,
	-1000, -1000, 61, 5281, 706, 18644, 20330, 1299, 16340, 20330,
	20330, 20330, 20330, 20330, 20330, -1000, 1079, -1000, -1000, 20330,
	20330, 787, 654, -1000, 31, 26, -1000, 21735, -1000, 137,
	-1000, 321, 1033, 415, 173, 21454, 415, 1031, -1000, 1049,
	-1000, 962, 1152, 9736, 1122, 10690, 151, -1000, -1000, 151,
	151, 10690, -1000, -1000, 20330, 25, 1491, 20330, 139, -1000,
	27966, -1000, -1000, 10690, 10690, 10690, 10690, 10690, 918, 367,
	-1000, 319, 317, 6223, -1000, -1000, 1649, -1000, -1000, -1000,
	172, -1000, -1000, 10690, 56, -1000, -1000, -1000, -1000, 313,
	1665, -1000, 493, -1000, -1000, -1000, 429, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1298, 312, 311, -1000,
	-1000, -1000, -1000, 310, 308, 307, 305, 304, 302, 301,
	300, 299, 295, 289, 286, 285, 284, 277, 888, -1000,
	455, -1000, -1000, 455, 455, -1000, 269, 269, 270, -1000,
	-1000, -1000, -1000, 269, -1000, -1000, -1000, 411, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 276, 139, -1000, -1000, -1000,
	20330, 40, -1000, 28766, -1000, -23, 810, -1000, 17788, 1419,
	1417, 1406, 18363, 1470, 3, 1259, 1468, 3, 1258, 633,
	20330, 20330, 630, 629, 18363, 403, -1000, -1000, -1000, -1000,
	-1000, 20330, -1000, -1000, -54, -1000, -1000, 1256, 36, -1000,
	-1000, 440, 103, 1490, 103, 14898, -1000, 20330, 20330, -1000,
	20330, -1000, -1000, 20330, -1000, 20330, 20330, -1000, 20330, 156,
	17213, 854, 1336, 778, 3, 22, -1000, 1505, -1000, -1000,
	-1000, -1000, 102, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 270, 888, 269, 269, 269, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 411, -1000, -1000, 455, 455, 455, -1000,
	-1000, 21, 28766, 628, -1000, 1252, 516, -1000, 426, 20,
	880, 1140, 1035, -1000, -1000, -1000, -1000, 24, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1637, -1000,
	-1000, 1647, 24, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1664, 5281, -1000, -1000, -1000, -1000, -1000, -1000,
	20330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20330, 20330, 20330, 880, 1140, -1000, -1000, 18363, 17494,
	1485, 1334, 900, -1000, 1484, 20330, 951, 1029, -1000, 651,
	1333, -1000, -1000, -1000, -1000, 28766, -1000, 378, -1000, -1000,
	28766, 780, 1184, -1000, 1184, 2, -1000, 27644, -1000, 252,
	15, 440, 9417, 14320, 29329, 29411, 5281, 645, 10690, 10690,
	10690, 10690, 10690, 10690, 10690, 10690, 10690, 10690, 10690, 10690,
	10690, 10690, 10690, 10690, 10690, 10690, 10690, 10690, 10690, 10690,
	1011, 10690, 625, 10690, 10690, 10690, 10690, 1050, 914, 231,
	983, 5281, -1000, -1000, 1599, 1599, 1599, 29037, 29037, 256,
	367, -1000, 10690, -1000, 9099, 167, 27230, -7, -1000, -1000,
	-1000, 7178, 450, 28766, 56, 5904, -1000, 1646, 671, 1306,
	1228, 251, 165, 164, 10690, 10690, 11008, 11008, 10690, 11326,
	10690, 10690, 6541, 10690, 10690, 10690, 10690, 10690, 10690, -1000,
	249, -1000, -1000, -1000, -1000, 1639, -1000, -1000, 1634, -1000,
	644, 614, 1623, 440, 163, 8463, -1000, 854, 20330, 20330,
	20330, -1000, -1000, 1024, 21173, 1017, 29411, 20330, -1000, 242,
	239, 1111, 1103, 20330, 20330, 20892, 20611, 20330, 835, 3,
	-1000, 237, 3, -1000, 236, 20330, 814, -1000, 20330, 20330,
	801, 1213, 968, -1000, 431, 16059, 693, 1251, 20330, 819,
	10690, 812, -1000, 14023, 460, 20330, 819, 81, -1000, -1000,
	-1000, 398, 20330, -1000, -1000, -1000, 131, -1000, 124, 124,
	-1000, -1000, 18363, -1000, -1000, -1000, -1000, -1000, -1000, 29411,
	365, 363, -1000, 1614, 621, -1000, 617, 607, 606, -1000,
	234, -1000, 10690, 20330, 20330, 1140, -1000, -1000, -1000, -1000,
	720, -1000, 873, -1000, 13432, -1000, -1000, -1000, -1000, -25,
	-1000, -1000, -1000, 403, -1000, -1000, -1000, 154, 14, -13,
	29411, -1000, -1000, -1000, -1000, -1000, 20330, 320, 20330, 3,
	20330, -1000, 1662, 3, 20330, 1332, 1357, 395, 20330, 780,
	-1000, 10690, 1609, -1000, -1000, -1000, 10690, -1000, -1000, -1000,
	3, -1000, 1223, -1000, -107, 1990, 1057, -132, 161, 406,
	-1000, 13726, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 418, 850, 850, 564, 564, 564, 564, 1661,
	2717, 350, 2275, 3892, 3892, 3892, 646, 694, 694, 3892,
	3892, 3892, 29037, 29001, 511, 10690, 10690, 604, 905, 231,
	511, 10690, 511, 511, 511, 511, -1000, 1108, -1000, -1000,
	-1000, -1000, 1250, 230, 11326, 11326, -1000, -1000, -1000, 6223,
	11644, -1000, -1000, -1000, -1000, -1000, 229, 10690, -1000, 27267,
	-167, 10, -1000, -1000, 10690, 5, -55, -1000, -1000, 657,
	-1000, 10690, -1000, -4, 10690, 10690, 10690, 152, 149, -1000,
	921, 228, 227, 10690, -1000, -1000, 28683, 25687, 148, 1247,
	-117, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 146, 135,
	28571, -117, 129, 28897, -1000, 11326, 11326, 11326, 6223, 221,
	128, 27607, -117, 28367, 8781, 8781, 8781, 126, 28343, 10690,
	-117, 3829, 3775, 3500, 1, -3, -5, 1607, -9, 121,
	417, 414, 120, 1223, -1000, -1000, -1000, -1000, 596, 588,
	1331, -1000, 1010, -1000, 464, -1000, 784, 10690, 12256, 220,
	219, 859, -1000, 1330, 978, 1329, 978, -1000, -23, 808,
	-1000, 10690, -1000, 10690, -1000, 585, -1000, -1000, 576, 431,
	1244, 662, -1000, 933, -1000, -1000, 685, -1000, -1000, 6859,
	28766, -1000, 819, 1409, -11, -1000, -1000, -1000, 440, 14898,
	14320, 8463, -15, -1000, -1000, -1000, 854, -1000, 539, 1600,
	119, 996, 960, 889, 746, 1587, 28766, -25, -25, -1000,
	-1000, -1000, -1000, -1000, 20330, -1000, 1206, -1000, 17494, 216,
	20330, 214, -1000, 213, -1000, -1000, 212, 20330, 1088, 395,
	16637, -1000, 415, 936, 27206, -1000, 118, 1219, 1452, -1000,
	14320, 1136, 1134, 14320, 1200, 924, 924, 924, -1000, 209,
	159, 356, 406, 4352, 10690, 18082, 927, 80, 116, 1990,
	10690, 511, 511, 10690, 11326, 11326, -1000, 511, -1000, -1000,
	-1000, -1000, -1000, 1243, 208, 10690, 29411, 28797, 27848, -16,
	-1000, 8145, -48, -1000, 10690, -1000, 26888, -1000, -1000, 361,
	1355, -1000, 10690, 28027, 115, 7827, -1000, 27990, -10, -10,
	-1000, 1660, -1000, 15179, 441, 929, 26851, 29329, 29411, -1000,
	10690, -1000, -1000, 1242, 10690, -1000, 29329, 29411, 11326, 11326,
	11326, 11326, 11326, 11326, 11326, 11326, 11326, 11326, 11326, 11326,
	11326, 11326, 11326, 11326, 11326, 11326, 11326, 1113, 11326, 1592,
	1592, 1592, -50, 7509, -1000, 1286, 1242, 10690, 10690, 29411,
	114, 113, 112, -1000, 10690, -117, 10690, 10690, 10690, -1000,
	-1000, -1000, 111, -1000, 1569, -1000, -1000, -1000, -1000, 1219,
	20330, 20330, 20330, 1327, -1000, 2235, -1000, 26827, -21, -1000,
	280, 1434, 10690, -1000, -1000, 207, 12256, 20330, -1000, 1144,
	1121, 504, 20330, -1000, 20330, -1000, 20330, 20330, 20330, -27,
	-28, 20330, 20330, -1000, 16059, 598, 205, -1000, -70, -1000,
	-1000, 253, 3, 819, -1000, -78, -1000, 396, -1000, 355,
	353, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 109,
	-1000, -1000, 1208, -1000, 12256, 201, 20330, 17494, 1481, 12256,
	950, 1085, 395, 16637, -1000, 651, -1000, -1000, -1000, 436,
	10690, 10690, 1990, 14320, 14320, 1633, 1133, 14320, -1000, -1000,
	-1000, -1000, 352, 381, 349, 12537, 406, 18082, -1000, 1566,
	1109, -29, -1000, -1000, 20330, 200, -1000, 406, 1641, 511,
	3958, 2255, 10690, 29411, 3999, -33, 10690, 10690, -1000, -35,
	-1000, 10690, 339, 28766, -1000, -1000, -1000, 28766, 10690, 1635,
	10690, 106, 105, 97, -1000, -1000, -1000, 25388, 10690, 95,
	-1000, 94, 92, 28766, 1286, 28766, -1000, -1000, 611, 611,
	676, 676, 676, 676, 1592, 1099, 1260, 495, 1084, 1084,
	1084, 2370, 985, 985, 1084, 1084, 1084, 1238, 1114, 199,
	29114, 10690, -37, -1000, -1000, -1000, 28766, 28766, 89, -1000,
	-1000, -1000, -117, 3388, 26509, 26472, -1000, 88, 436, -1000,
	-1000, -1000, 20330, -1000, 20330, -1000, 5281, 20330, 1237, 1003,
	-1000, -1000, 1102, 198, 11326, 20330, -1000, 871, 12256, 1426,
	56, 5281, 1426, 26448, 5904, -39, -53, 1001, -1000, 999,
	10690, -1000, 29411, 978, 978, -1000, 575, 574, 571, 566,
	-1000, -1000, -97, 15765, 1658, 1363, 20330, 1401, -1000, -1000,
	196, -1000, -1000, -1000, 913, -58, 12256, -59, 86, 3,
	-65, 20330, -1000, 395, 16637, -1000, 1357, -1000, 20330, 28766,
	-117, -1000, 1633, -1000, 191, 10690, 14320, -1000, -132, -1000,
	-69, -1000, 406, -81, 18082, -1000, 338, -161, -1000, 392,
	-1000, 406, 190, 20330, 18082, 10690, 10690, 3999, -87, -1000,
	511, 511, -1000, 26130, -1000, 28766, -1000, 27990, -1000, -1000,
	-1000, 907, -1000, 26093, -1000, -1000, -1000, -1000, 11326, 1235,
	189, 29411, 26069, -1000, -1000, 10690, -1000, -1000, -1000, -1000,
	-1000, 823, -1000, -1000, 20330, 1009, -1000, -1000, 10690, 29114,
	185, 1206, 184, -1000, -1000, -1000, -1000, -1000, -1000, 1434,
	-4, -1000, 858, -1000, -1000, 28766, 1431, -1000, -1000, 20330,
	20330, 183, 182, -1000, 181, 56, -88, -1000, 387, 595,
	-96, 20330, -1000, -1000, 5586, 20330, 871, -98, -1000, 1206,
	-1000, 871, 180, 16637, -1000, 1088, -111, -1000, 1474, -1000,
	20330, 28766, -1000, 406, -1000, 1555, 18082, 156, -1000, -1000,
	1109, -1000, 4668, 18082, 20330, -100, -1000, 511, 511, -1000,
	-1000, 78, 929, 1429, -1000, 28231, 11326, 29411, -102, -1000,
	25751, -1000, -1000, 1326, 25719, 1060, 20330, -1000, 20330, 1426,
	74, 20330, 468, 5281, -1000, -1000, 10690, 10690, 10690, 1658,
	-1000, -1000, 1657, 729, -1000, 440, -1000, 179, 1206, 871,
	-1000, 1206, 12256, -1000, 1085, 20330, 175, -112, 18082, -1000,
	-1000, 337, -1000, -1000, 1551, -1000, -118, -1000, -1000, 795,
	10690, 28231, -120, -1000, -1000, 1309, -1000, 938, 864, 71,
	-124, -1000, -1000, 173, -1000, 10690, -1000, -130, -136, -10,
	-1000, -1000, 14898, -1000, 20330, -1000, 1206, -1000, -137, -1000,
	-1000, -1000, -1000, -1000, 406, 281, -1000, 68, 10372, 10372,
	-117, -1000, 20330, -1000, 945, 943, 674, -1000, -1000, -1000,
	-1000, -1000, 1060, 28766, -1000, -1000, 66, -126, -147, -1000,
	871, 18082, -1000, -1000, -1000, -1000, 11951, 987, 753, 27583,
	-1000, -1000, -1000, 1370, -1000, 492, 1019, 1019, 938, 1635,
	-1000, 959, 1206, -1000, 1513, -1000, -1000, -1000, -1000, -1000,
	-1000, 1522, -1000, -1000, 1080, -1000, -1000, -1000, -1000, -1000,
	-1000, 10054, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1960, 1958, 1485, 1574, 1957, 1951, 1571, 1950, 1947,
	1946, 1943, 1942, 1939, 125, 1566, 1563, 26, 1556, 1936,
	115, 1934, 1930, 1929, 123, 1927, 1926, 1925, 1921, 88,
	1920, 1919, 112, 1544, 1522, 1494, 1914, 1910, 119, 1907,
	18, 1883, 96, 1882, 24, 173, 2393, 153, 1880, 1878,
	1877, 25, 132, 90, 1866, 103, 1863, 1858, 61, 59,
	27, 19, 1856, 128, 137, 1300, 38, 1848, 1847, 158,
	1843, 85, 32, 747, 165, 163, 136, 145, 1841, 1840,
	1838, 1836, 60, 1824, 1, 1823, 1822, 12, 73, 17,
	1819, 36, 23, 1818, 1816, 150, 1814, 95, 127, 1471,
	144, 148, 1154, 1813, 99, 7, 100, 1812, 1811, 147,
	52, 1810, 40, 104, 155, 1809, 81, 168, 82, 49,
	75, 130, 1807, 1801, 1800, 108, 1799, 133, 94, 1798,
	1797, 102, 1795, 151, 154, 1794, 1791, 114, 1789, 146,
	1786, 1784, 162, 174, 1781, 1780, 169, 1779, 10, 56,
	91, 8, 1469, 1467, 135, 72, 39, 20, 1778, 1648,
	1257, 689, 44, 110, 66, 58, 106, 65, 69, 159,
	29, 1769, 1767, 134, 1766, 1764, 1763, 1760, 1757, 105,
	1755, 1754, 97, 157, 21, 11, 16, 116, 53, 87,
	111, 131, 166, 138, 1753, 117, 143, 57, 98, 1752,
	1750, 1776, 139, 1749, 1748, 1747, 1758, 1693, 1342, 31,
	1746, 1744, 375, 68, 1742, 1741, 67, 1739, 140, 142,
	1738, 160, 177, 28, 1737, 50, 92, 121, 1734, 129,
	64, 0, 1981, 1759, 1732, 149, 101, 1731, 1725, 1723,
	1722, 37, 3, 9, 4, 6, 5, 30, 22, 1720,
	1716, 152, 42, 76, 1712, 167, 1709, 1708, 1707, 55,
	1706, 14, 1705, 15, 1700, 1698, 13, 2, 1687, 1684,
	156, 1683, 122, 1681, 1578, 1679, 161, 1676, 1673, 1552,
	41, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 229, 229, 230, 230, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 197, 197, 196, 19,
	171, 171, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 270, 270, 270, 274, 274,
	275, 275, 276, 276, 276, 276, 276, 276, 276, 272,
	272, 27, 31, 31, 31, 31, 31, 31, 147, 143,
	143, 145, 145, 145, 145, 64, 142, 142, 142, 142,
	144, 144, 144, 144, 222, 221, 221, 227, 227, 227,
	79, 79, 79, 79, 79, 80, 80, 80, 220, 220,
	220, 220, 228, 228, 228, 228, 228, 228, 81, 81,
	81, 226, 226, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	18, 271, 271, 273, 273, 33, 33, 34, 34, 35,
	35, 35, 35, 10, 10, 11, 11, 82, 82, 83,
	83, 150, 150, 150, 150, 84, 84, 56, 56, 56,
	149, 239, 239, 240, 240, 240, 240, 240, 240, 241,
	241, 241, 241, 241, 241, 241, 237, 237, 238, 235,
	235, 236, 236, 236, 236, 277, 277, 148, 148, 87,
	87, 244, 244, 244, 244, 242, 242, 242, 242, 242,
	245, 243, 246, 246, 246, 246, 246, 183, 183, 183,
	37, 12, 62, 62, 13, 9, 9, 130, 130, 91,
	91, 188, 188, 188, 72, 72, 51, 51, 51, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	131, 131, 132, 132, 25, 30, 36, 36, 36, 36,
	36, 279, 279, 68, 68, 68, 68, 69, 69, 146,
	146, 146, 146, 146, 63, 8, 8, 58, 58, 59,
	59, 60, 60, 61, 61, 280, 280, 24, 24, 24,
	75, 75, 139, 139, 139, 141, 141, 140, 140, 140,
	116, 116, 116, 38, 96, 96, 105, 105, 106, 106,
	194, 107, 107, 29, 29, 46, 46, 44, 44, 44,
	44, 44, 44, 45, 45, 47, 47, 47, 47, 47,
	47, 47, 252, 252, 252, 255, 255, 251, 253, 253,
	254, 254, 278, 278, 117, 117, 117, 86, 85, 85,
	89, 89, 88, 90, 90, 187, 114, 114, 114, 114,
	133, 133, 134, 134, 135, 135, 136, 136, 136, 137,
	137, 138, 138, 113, 113, 167, 167, 48, 48, 95,
	95, 97, 97, 157, 157, 157, 158, 158, 156, 156,
	156, 156, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 268, 268, 268, 269, 269, 186, 186, 190, 190,
	190, 190, 190, 190, 184, 184, 184, 184, 185, 185,
	195, 195, 120, 120, 120, 120, 118, 118, 119, 119,
	191, 191, 191, 191, 115, 115, 192, 192, 192, 151,
	151, 198, 198, 198, 216, 216, 94, 94, 94, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 200, 200, 200, 200,
	202, 202, 202, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 215, 215, 215,
	215, 215, 203, 203, 210, 210, 211, 211, 212, 213,
	204, 204, 205, 205, 206, 207, 214, 214, 214, 214,
	218, 218, 208, 208, 208, 208, 208, 209, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 128, 128, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 161, 161, 161, 161,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 247, 247, 247, 247, 247, 247, 247, 249, 249,
	250, 250, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 256,
	256, 257, 257, 259, 259, 260, 260, 261, 262, 262,
	262, 263, 264, 264, 258, 258, 265, 265, 265, 266,
	266, 267, 267, 267, 267, 267, 173, 173, 173, 174,
	174, 175, 181, 181, 181, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 70, 70, 70, 70, 70, 102, 102, 170, 170,
	168, 168, 168, 172, 172, 121, 121, 217, 217, 217,
	217, 217, 217, 217, 122, 122, 122, 129, 123, 123,
	124, 124, 124, 124, 124, 124, 164, 165, 125, 125,
	125, 166, 166, 176, 180, 180, 179, 178, 178, 177,
	177, 154, 154, 155, 155, 153, 152, 110, 110, 109,
	109, 108, 108, 281, 281, 182, 182, 111, 111, 112,
	104, 104, 193, 193, 193, 193, 98, 98, 77, 77,
	99, 99, 73, 73, 76, 76, 74, 74, 74, 74,
	92, 92, 93, 93, 71, 71, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 219, 219, 219,
	169, 65, 65, 65, 66, 66, 67, 67, 224, 224,
	224, 225, 225, 225, 225, 223, 223, 223, 223, 223,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 233, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 4, 2,
	3, 4, 3, 3, 4, 4, 2, 5, 5, 6,
	2, 2, 0, 2, 0, 6, 6, 5, 5, 4,
	12, 4, 12, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 5, 2, 0, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 7, 4, 6, 3, 1, 5, 6, 9,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 224, 66, -8, -9, -10, -11, -12,
	-13, -254, 94, 103, 125, 206, 101, 87, 119, 227,
	234, -44, -46, 243, -147, 246, 35, 255, 60, 97,
	229, 222, 223, 280, 68, -252, -47, -45, 329, 304,
	310, 238, -48, 264, 296, 332, 264, 134, 80, 299,
	-270, -99, 264, 80, -74, -65, 322, 4, -231, -233,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	103, 109, 110, 113, 115, 120, 125, 126, 127, 128,
	135, 138, 140, 133, 148, 150, 151, 154, 153, 158,
	161, 164, 166, 167, 168, 171, 169, 173, 174, 176,
	175, 181, 183, 184, 186, 189, 192, 195, 198, 199,
	200, 201, 204, 206, 208, 209, 210, 212, 213, 215,
	216, 217, 218, 219, 222, 220, 221, 223, 224, 225,
	227, 229, 230, 232, 244, 245, 256, 234, 235, 236,
	237, 240, 241, 243, 246, 248, 251, 254, 255, 257,
	260, 258, 253, 263, 265, 266, 267, 268, 269, 276,
	280, 281, 282, 283, 286, 287, 288, 290, 293, 294,
	295, 300, 305, 306, 307, 308, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 50, 51, 52, 55, 82,
	84, 85, 100, 104, 105, 111, 121, 123, 129, 130,
	139, 141, 142, 143, 145, 156, 170, 180, 182, 193,
	197, 203, 205, 211, 231, 239, 249, 250, 259, 261,
	271, 272, 273, 277, 278, 292, 296, 297, -270, -73,
	-65, 80, 89, 138, 288, 287, 80, 134, 264, 299,
	-17, 329, -29, -7, -15, -4, -24, -38, -14, -32,
	-18, -33, -34, -35, -16, 23, -223, 4, -231, -233,
	-232, -234, 57, 69, 118, 137, 131, 147, 149, 157,
	159, 172, 194, 196, 228, 247, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 48, 49, 53, 56,
	58, 64, 68, 72, 73, 74, 75, 76, 77, 86,
	88, 90, 91, 92, 95, 97, 99, 106, 107, 108,
	114, 116, 117, 119, 122, 124, 132, 134, 136, 144,
	146, 152, 155, 160, 162, 163, 177, 178, 179, 185,
	187, 188, 190, 191, 202, 207, 214, 226, 238, 242,
	252, 262, 264, 270, 274, 275, 279, 284, 285, 289,
	291, 298, 299, 301, 302, 303, 304, -65, -65, -65,
	206, 22, -274, 22, -275, -276, 68, 94, 119, 238,
	138, 89, 287, -274, -69, 234, -65, -143, 161, 241,
	54, 231, 276, -144, -142, -222, 271, 171, -100, -65,
	4, 22, 54, 242, 80, 59, 81, 120, 134, 135,
	64, 65, 151, 265, 271, 276, 68, 290, 267, 102,
	-279, 276, 276, -279, -279, -68, 276, 274, -69, -222,
	-278, 264, 264, 289, 299, -130, 80, 285, -45, -47,
	-46, -88, -89, 284, 144, 99, 191, -44, -46, -252,
	-255, 212, -251, -65, -255, -85, -86, 22, 91, 333,
	-191, -73, 188, -112, 329, -3, -191, 129, -73, -76,
	129, -73, -65, -191, 129, 274, 333, -99, -92, -65,
	-153, -152, 331, 117, 117, 329, -109, -110, -152, -153,
	117, 146, 146, -192, -191, -65, 129, -77, 129, -76,
	-101, 129, -100, -101, 129, -197, -196, -225, 4, -231,
	-233, -232, 296, 264, 134, -171, 329, -126, 329, -65,
	22, 187, 333, 187, -65, -143, 52, -143, 244, 329,
	-145, -63, -64, 148, 208, 274, 314, 117, 308, -81,
	5, 86, -103, 331, 54, 244, 117, -271, 187, 117,
	117, 117, 117, 117, 117, 308, 148, 208, 256, 264,
	299, 117, 117, -146, -63, -64, -146, 274, -69, -115,
	-191, -100, 129, -65, -100, 134, -65, 129, -88, -89,
	-114, -133, -134, 160, 108, 185, -117, 22, 91, -117,
	-117, 44, 330, 330, 333, -255, -93, 329, -104, -193,
	-159, 322, -161, 320, 321, 315, 177, 309, -173, -163,
	-176, 100, 231, 329, -73, -162, 334, 9, -249, -46,
	29, -174, -175, 48, -65, 7, 8, 5, 6, -71,
	-200, -169, -209, 279, 106, 179, -247, -248, 4, -231,
	-224, -201, -211, -205, -208, 145, 57, 73, 76, 74,
	77, 242, 289, 49, 28, 104, 105, 197, 203, 261,
	277, 278, 129, 180, 130, 55, 121, 156, 93, 37,
	39, 41, 42, 50, 51, 82, 84, 85, 111, 139,
	141, 142, 143, 182, 211, 249, 259, 272, 273, 297,
	-232, -212, -213, -206, -207, -214, -104, -112, 322, -73,
	329, -111, -182, -159, 86, -53, 220, -52, 21, 23,
	94, 294, 100, 253, 268, 235, 253, 268, 235, 220,
	100, 334, 220, 220, 100, -229, -226, 9, -225, 5,
	-74, 333, -223, 322, -230, -229, 257, 330, -98, -73,
	-110, -192, -75, -73, -75, 243, -65, 30, 100, -55,
	333, 47, 225, 100, -55, 333, 100, -55, 100, 330,
	333, -191, 129, -76, 30, -170, -198, -199, -201, -210,
	-204, -208, -209, 40, 46, 45, 269, 170, 239, 250,
	292, 38, 186, 140, 139, 141, 142, 143, 249, 37,
	211, 111, 93, 85, 84, 182, 42, 41, -212, -213,
	-206, -207, 82, 272, 273, 145, 39, 51, 50, 297,
	259, -102, -159, -270, -276, -270, 30, -142, -222, -102,
	333, 333, 158, -80, 164, 176, 126, -221, 86, -227,
	-220, -183, 9, 279, 106, 187, -226, 8, 321, -219,
	7, 320, -221, 86, 71, -228, 5, 4, -169, -183,
	86, 161, -209, 331, -223, 245, -100, 22, -222, -273,
	114, -270, -222, -222, -222, -222, -222, -65, 158, -222,
	-222, 264, 134, 264, 333, 333, -69, -55, 333, 329,
	-87, 177, -253, 304, -87, 329, -66, 129, -65, -253,
	177, -114, -134, -133, -135, -159, 22, -138, 110, 173,
	-159, -161, -45, -45, -45, -90, -187, -159, -251, 30,
	-92, -95, 333, 117, 10, 11, 56, 33, 320, 321,
	322, 323, 112, 324, 325, 318, 319, 317, 312, 313,
	314, 62, 165, 233, 13, 14, 15, 26, 190, 159,
	309, 131, 247, 315, 16, 17, 18, 147, 36, 132,
	-70, 30, 4, -78, -159, -159, -159, -159, -159, 196,
	-108, -154, 327, -46, 329, -46, -159, -102, 7, -46,
	-168, 327, -177, -159, -109, 329, 5, 329, 5, -256,
	305, 114, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 205,
	-218, 300, -218, -218, -202, 329, -202, -203, 329, -202,
	306, 310, 329, -95, -73, 333, 330, 333, 274, -131,
	64, 58, -149, 129, 58, -235, -65, 64, -236, 53,
	285, 207, 116, -131, 64, -131, 64, 64, -191, 33,
	-29, 117, 33, -29, 117, 274, -76, -65, 274, 274,
	-191, -195, 311, -65, -195, 333, 117, 330, 333, -151,
	302, -139, -29, 329, 86, 30, -139, -105, -106, -194,
	-107, -73, 329, -65, -65, -76, -77, -100, -101, -101,
	-17, -196, 100, -20, -29, -24, -38, -14, 330, 333,
	-94, 29, -127, 329, 307, 168, 83, 127, 167, -128,
	237, 330, 333, 274, 117, 276, 330, -64, -63, -79,
	210, 251, 221, 240, 333, 8, 7, 7, -223, -272,
	-65, -73, -76, -73, -64, -63, -191, -82, -92, -83,
	-65, -150, -149, -237, -238, -235, 134, 285, 107, 30,
	100, -62, 201, 30, 187, 177, -58, 266, 100, -136,
	-219, 329, 321, -137, 231, 232, 333, -51, 31, 90,
	329, 330, -151, -193, -97, -189, 327, -191, -73, -46,
	-190, 329, -216, -198, -215, 216, 217, 215, 219, 218,
	-198, -223, 271, -159, -159, -159, -159, -159, -159, -159,
	-159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
	-159, -159, -159, -159, -159, 159, 131, 247, 36, 132,
	-159, 274, -159, -159, -159, -159, 169, 177, 179, 279,
	106, 286, 91, 183, -281, 262, 32, -166, -46, 329,
	-181, 27, 252, 22, -223, -173, 231, 329, -154, -159,
	-155, -102, 330, 330, 333, -102, -172, 328, -168, -180,
	-179, 301, 330, -102, 298, 22, 91, 322, 7, -127,
	-257, 109, 122, 329, 330, 330, -159, -159, -121, -217,
	-102, 4, 307, 168, 83, 127, 167, 237, -121, -122,
	-159, -102, -123, -160, -161, 320, 321, 315, 329, 231,
	-124, -159, -102, -159, 43, 155, 275, -125, -159, 117,
	-102, -159, -159, -159, -102, -102, -102, 329, 7, 7,
	271, 271, 7, -151, 330, -182, -52, -73, -65, -65,
	177, -149, 129, -57, 177, -198, -65, 329, 329, 150,
	150, -65, -65, 129, -65, 129, -65, -65, -53, 220,
	-29, 329, -29, 329, -65, 220, -65, -73, 220, -39,
	128, 183, -42, 304, -229, 257, 117, -73, -116, 226,
	-159, -116, -141, 187, -98, 296, -65, -116, -96, 333,
	117, 314, -98, -55, -55, -55, -191, -198, 327, 327,
	7, 274, 274, 274, 274, 329, -159, -272, -272, -63,
	283, 61, 210, -227, 333, -195, 330, 330, 333, -66,
	134, -66, -29, -100, 5, -29, -73, 100, -59, 96,
	-280, 314, -65, -137, -159, -187, -20, -113, 122, -195,
	333, 69, -120, 149, 172, 118, 157, 228, 137, 7,
	103, -32, -156, 334, 329, -186, 310, -46, -190, -189,
	308, -159, -159, 274, -281, 262, -166, -159, 169, 179,
	279, 106, 286, 91, 183, 117, 329, -160, -160, -102,
	-163, 329, -102, 328, 337, 330, -159, 328, 328, 333,
	-178, -179, 95, -159, -89, 333, -88, -159, -102, -102,
	330, 330, -262, 195, 329, 329, -159, 30, 333, 330,
	117, 330, 330, -129, 202, 330, 10, 11, 320, 321,
	322, 323, 112, 324, 325, 318, 319, 317, 312, 313,
	314, 62, 165, 233, 13, 14, 15, 147, 132, -160,
	-160, -160, -102, 329, 330, -164, -165, 117, 114, 30,
	-125, -125, -125, 330, 117, -102, 333, 333, 333, 330,
	330, 330, 7, 330, 333, 330, 308, 308, 330, -113,
	274, 274, 100, 177, 293, -239, -236, -159, -91, -188,
	-65, -250, 329, -247, -248, -71, 329, 329, -50, 94,
	243, -132, 100, -55, 100, -55, 274, -131, 64, -102,
	-102, 274, 274, -42, 117, 263, 189, 257, -104, 178,
	-116, 63, 330, -151, -106, -97, -182, 330, 328, 7,
	7, 330, 168, 127, 167, -128, 167, -128, -128, 7,
	-65, -84, 133, -150, 329, -66, 329, 329, -87, 329,
	-65, -60, 154, -280, -226, -253, 188, 330, 330, -167,
	124, 44, -189, 149, 149, -189, -120, 149, -118, 194,
	-118, -118, -268, 329, -17, 329, 328, -186, -223, 327,
	335, -102, -185, -184, 30, -65, 192, 330, -159, -159,
	-160, -160, 117, 329, -159, -170, 26, 26, 330, -102,
	330, 333, -155, -159, 330, -168, 97, -159, 270, 330,
	298, -89, -89, -89, 5, -263, -65, 329, 302, -88,
	330, -216, -198, -159, -164, -159, -216, -198, -160, -160,
	-160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
	-160, -160, -160, -160, -160, -160, -160, 91, 177, 183,
	-160, 333, -102, 330, -165, -164, -159, -159, -198, 330,
	330, 330, -102, -159, -159, -159, 330, 7, -167, -65,
	-65, -149, 100, -240, 64, -241, 56, 107, 68, 177,
	179, 285, 207, 53, 86, 214, 330, 330, 333, -72,
	-109, 56, -72, -159, 329, -91, -92, 177, 86, 177,
	86, 79, 281, -65, -65, -73, -65, -65, 330, 330,
	-65, -73, -230, 271, 329, -140, 329, 187, -29, -116,
	314, 328, 328, 330, 132, -91, 329, -92, -82, 30,
	-91, 187, -61, 153, -280, -226, -58, -259, 303, -159,
	-102, -189, -189, -119, 291, 187, 149, -189, 328, 330,
	-269, 7, 328, -197, -186, -185, 7, -158, -157, 115,
	175, 330, -65, 329, -186, 26, 26, -159, -170, 330,
	-159, -159, 330, -159, 328, -159, 5, -159, 330, 330,
	330, -264, -65, -159, 330, 330, 330, -165, 117, 91,
	183, 329, -159, 330, 330, 333, 330, 330, 330, -259,
	-149, -65, -223, -65, 107, 129, 179, 150, 329, -160,
	-73, -148, -277, 67, 260, -188, -51, -223, -51, 330,
	-102, 330, 330, 179, 179, -159, -198, -55, -55, 274,
	274, 274, 274, -162, -71, -65, -41, -40, 5, 92,
	-92, 64, -112, -46, 329, 198, 330, -91, 330, 330,
	-29, 330, -73, -280, -226, -59, -260, -261, -65, -119,
	329, -159, -189, -156, 330, 333, -186, 330, -185, 328,
	333, 336, 314, -186, 329, -92, -184, -159, -159, 330,
	330, -89, -258, 200, 330, -160, 117, 329, -170, 330,
	-159, -241, -66, 177, -159, -67, 329, -84, 329, -72,
	-89, 214, -54, 56, -65, -65, 329, 329, 329, 333,
	330, -43, 314, 287, 178, 330, -65, -65, -148, 330,
	-84, -148, 329, -226, -60, 333, 30, -92, -186, 7,
	-185, -17, -157, -223, 327, -185, -92, 330, 330, -89,
	44, -160, -170, 330, 330, 100, 330, -244, 166, -65,
	-92, -51, 330, -73, -49, 291, -223, -102, -102, -102,
	-40, 5, 243, -151, 329, -84, -148, -84, -91, -61,
	-261, -263, 330, -184, 328, 7, 330, -265, 209, 232,
	-102, 330, 107, -242, -245, -243, 187, 118, 199, 248,
	330, 330, -87, -159, 330, 330, -89, -105, -92, -84,
	330, -186, 328, 330, -266, -267, 36, 282, 71, -159,
	-266, -65, -243, 187, -245, 187, 287, 89, -244, 330,
	-151, 330, -148, -185, -267, 204, 113, 231, 204, 113,
	-246, 174, 225, 47, 243, -246, -242, -56, 47, 225,
	-84, 26, 20, 179, 86, -267,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 431, 0, 0, 0, 0, 0, 0,
	0, 403, -2, 0, 157, 0, 352, 0, 352, 352,
	356, 0, 0, 433, 318, 430, -2, 441, 0, 0,
	0, 439, 417, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 971, 900, 906, 907, 931, 932, 933,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 0, 0,
	902, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 0, 230, 945, 946, 947,
	948, 949, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 121, 128, 129,
	1024, 131, 0, 138, 139, 140, 142, 143, 144, 145,
	146, 147, 148, 0, 345, 1048, 358, 152, 1001, 1053,
	959, 1125, 1070, 160, 170, 0, 1131, -2, 174, 97,
	203, 204, 0, 208, 209, 0, 211, 232, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 226, 0, 0,
	363, 351, 363, 348, 349, 350, 353, 0, 344, 151,
	0, 432, 0, 0, 0, 0, 0, 317, -2, 413,
	414, -2, 0, 436, 436, 436, 0, 0, 414, 0,
	422, 1028, 425, 913, 423, 0, 0, 438, 437, 0,
	418, 520, 0, 467, 0, 2, 0, 1109, 520, 0,
	1109, 905, 0, 0, 1109, 0, 0, 136, 137, 910,
	908, 909, 0, 0, 0, 0, 903, 879, 877, 878,
	0, 0, 0, 0, 526, 87, 1109, 55, 1109, 898,
	55, 1109, 95, 55, 1109, 0, 116, 118, 941, 942,
	943, 944, 1137, 0, 0, 0, 0, 126, 0, 130,
	132, 0, 0, 0, 357, 153, 1098, 155, 0, 0,
	159, 161, 162, 0, 0, 0, 0, 0, 0, 173,
	198, 199, 98, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 222, 223, 0,
	0, 0, 0, 346, 359, 360, 347, 0, 355, 55,
	524, 290, 1109, 429, 290, 935, 429, 1109, -2, 0,
	409, 448, 449, 0, 0, 0, 0, 434, 435, 0,
	0, 0, 405, 406, 0, 424, 0, 0, 470, 890,
	894, 895, 624, 0, 0, 0, 0, 0, 0, 716,
	718, 1103, 1125, 0, 720, 721, 0, 723, 725, 726,
	0, 729, 730, 870, 902, 916, 917, 918, 919, 0,
	0, 922, 0, 924, 925, 926, 770, 739, -2, -2,
	914, 556, 557, 558, 559, -2, 1139, 743, 745, 747,
	748, 749, 750, 0, 1087, 1104, 1105, 1121, 1122, 1130,
	1134, 1135, 1109, 1118, 1110, 1099, 1107, 1116, 976, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	940, 586, 587, 592, 593, 595, 470, 468, 521, 522,
	0, 0, 887, 885, 886, 32, 341, 34, 0, 341,
	341, 0, 0, 0, 0, 239, 0, 0, 241, 0,
	0, 0, 0, 0, 0, 511, 64, 65, 201, 202,
	901, 0, 875, 876, 511, 66, 77, 0, 0, 896,
	880, 530, 0, 380, 0, 0, 527, 0, 0, 89,
	0, 53, 54, 0, 91, 0, 0, 93, 0, 431,
	0, 0, 1109, 0, 431, 0, 828, 538, 539, 540,
	541, 542, 621, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 563, 564, 565, 566, 567, 568,
	569, 583, 0, 562, 562, 562, 575, 576, 584, 585,
	590, 591, 602, 603, 605, 607, 601, 601, 601, 598,
	599, 0, 826, 0, 141, 0, 0, 156, 0, 0,
	0, 0, 0, 165, 185, 186, 187, 166, 168, 175,
	177, 178, 179, 188, 189, 190, 191, 307, 0, 309,
	927, 0, 167, 169, 171, 172, 192, 193, 194, 195,
	196, 197, 0, 0, 99, 207, 205, 206, 210, 212,
	0, 231, 213, 214, 215, 216, 217, 218, 221, 224,
	225, 0, 0, 0, 0, 0, 354, 310, 0, 248,
	0, 0, 313, 428, 0, 0, 0, 1109, 934, 368,
	0, 412, 446, 447, 450, 454, 455, 458, 461, 462,
	452, 624, 419, 420, 421, 442, 443, 328, 426, 0,
	0, 530, 0, 0, 0, 0, 0, 0, 805, 806,
	807, 808, 809, 810, 813, 814, 811, 812, 815, 816,
	817, 0, 0, 0, 818, 819, 820, 0, 0, 822,
	0, 824, 0, 0, 0, 0, 0, 0, 884, 0,
	0, 0, 893, 821, 629, 630, 631, 653, 654, 0,
	717, 881, 874, 719, 0, -2, 826, 0, 722, 727,
	728, 0, 0, 869, -2, 0, 921, 0, 621, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 849,
	855, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	589, 600, 597, 596, 573, 0, 572, 570, 0, 574,
	0, 0, 0, 530, 0, 0, 889, 0, 0, 0,
	0, 340, 36, 1109, 0, 57, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	237, 0, 0, 238, 0, 0, 0, 904, 0, 0,
	0, 69, 0, 911, 76, 0, 0, 0, 0, 392,
	0, 392, 382, 0, 0, 0, 392, 395, 396, 398,
	399, 0, 0, 528, 88, 899, 55, 96, 55, 55,
	102, 117, 0, 119, 122, 123, 124, 125, 120, 0,
	531, 533, 543, 0, 608, 609, 610, 611, 612, 613,
	622, 127, 0, 0, 0, 0, 158, 163, 164, 364,
	0, 182, 0, 184, 0, 308, 929, 928, 100, 233,
	149, 227, 228, 511, 361, 362, 525, 0, 0, 247,
	910, 249, 251, 252, 253, 254, 935, 0, 935, 0,
	0, 311, 0, 0, 0, 0, 370, 376, 0, 0,
	456, 0, 0, 453, 459, 460, 0, 445, 326, 327,
	431, 912, 464, 891, 511, 471, 0, 481, 520, 497,
	486, 0, 625, 534, 535, 577, 578, 579, 580, 581,
	626, 627, 0, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, -2, -2, -2, 645, 646, 647, -2,
	-2, -2, 651, 652, -2, 823, 825, 0, 884, 0,
	-2, 0, -2, -2, -2, -2, 665, 0, 667, 670,
	672, 674, 0, 0, 0, 0, 883, 684, 861, 0,
	0, 802, 803, 804, 892, 669, 0, 0, 882, 873,
	0, 0, -2, 724, 0, 0, 0, 832, 833, 868,
	864, 0, 731, 441, 0, 0, 0, 0, 0, 930,
	780, 0, 0, 0, 744, 746, 0, 0, 0, 0,
	836, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	826, 846, 0, 0, 687, 0, 0, 0, 0, 1125,
	0, 826, 854, 0, 0, 0, 0, 0, 826, 0,
	860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 464, 523, 888, 35, 330, 0, 0,
	0, 38, 1109, 46, 0, 262, 0, 0, 0, 0,
	0, 343, 47, 1109, 55, 1109, 55, 48, 33, 341,
	235, 0, 236, 0, 334, 0, 329, 332, 0, 76,
	0, 0, 63, 0, 67, 78, 0, 897, 86, 0,
	529, 377, 392, 0, 0, 384, 381, 379, 530, 0,
	0, 0, 0, 90, 92, 94, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 827, 133, 134, 154,
	180, 181, 183, 176, 0, 229, 256, 289, 0, 0,
	935, 0, 245, 290, 312, 314, 0, 0, 372, 376,
	0, 375, 429, 0, 0, 444, 0, 466, 0, 469,
	0, 0, 0, 0, 0, 517, 517, 517, 515, 491,
	431, 0, 497, 0, 0, 509, 0, -2, 486, 0,
	0, -2, -2, 0, 0, 0, 685, -2, 666, 668,
	671, 673, 675, 0, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 871, 874, -2, 827, 830, 831, 0,
	0, 865, 0, 0, 0, 0, 440, 441, 441, 441,
	737, 0, 738, 0, 0, 0, 0, 0, 0, 753,
	0, 754, 755, 0, 0, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 690,
	691, 692, 0, 0, 757, 852, 853, 0, 0, 0,
	0, 0, 0, 762, 0, 859, 0, 0, 0, 766,
	767, 768, 0, 560, 0, 582, 604, 606, 594, 466,
	0, 0, 0, 0, 56, 260, 279, 0, 0, 319,
	325, 325, 0, 740, 741, 0, 0, 0, 40, 0,
	0, 0, 0, 44, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 79, 390, 391,
	378, 389, 0, 392, 397, 394, 400, 0, 536, 0,
	0, 544, 614, 615, 616, 617, 618, 619, 620, 0,
	150, 243, 0, 250, 0, 0, 0, 248, 0, 0,
	0, 374, 376, 0, 367, 368, 451, 457, 427, 774,
	0, 0, 472, 0, 0, 0, 0, 0, 512, 516,
	513, 514, 0, 0, 0, 0, 497, 509, 478, 0,
	0, 0, 485, 508, 0, 507, 496, -2, 628, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 862, 0,
	797, 0, 0, 873, -2, 834, 863, 867, 0, 732,
	0, 0, 0, 0, 923, 778, 779, 783, 0, 0,
	742, 0, 0, 835, 845, 847, 688, 689, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, -2, -2,
	-2, 706, 707, 708, -2, -2, -2, 0, 0, 0,
	848, 0, 0, 800, 850, 851, 856, 857, 0, 759,
	760, 761, 858, 0, 0, 0, 588, 0, 774, 336,
	338, 37, 0, 261, 0, 264, 0, 0, 0, 0,
	270, 271, 0, 0, 0, 0, 281, 288, 0, 328,
	915, 0, 328, 0, 0, 0, 0, 0, 52, 0,
	0, 342, 0, 55, 55, 331, 0, 0, 0, 0,
	335, 333, 68, 0, 0, 0, 0, 0, 383, 393,
	0, 537, 532, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 376, 0, 369, 370, 415, 0, 465,
	463, 499, 0, 501, 0, 0, 0, 503, 481, 492,
	0, 494, 497, 0, 509, 483, 0, 0, 476, 0,
	475, 497, 505, 0, 0, 0, 0, -2, 0, 678,
	-2, -2, 796, 827, 872, 866, 920, 441, 733, 735,
	736, 785, 782, 0, 769, 751, 752, 844, 0, 0,
	0, 0, 827, 799, 758, 0, 764, 765, 561, 416,
	39, 0, 265, 266, 935, 0, 269, 272, 0, 274,
	937, 256, 0, 285, 286, 320, 321, 324, 322, 325,
	441, 283, 0, 41, 42, 51, 59, 43, 49, 0,
	0, 0, 0, 510, 0, 0, 0, 73, 71, 0,
	0, 0, 401, 402, 0, 0, 288, 0, 278, 256,
	246, 288, 0, 0, 371, 372, 773, 775, 0, 500,
	0, 519, 502, 497, 493, 0, 509, 431, 490, 479,
	0, 480, 0, 509, 0, 0, 487, -2, -2, 679,
	798, 0, 441, 0, 771, -2, 0, 0, 0, 801,
	0, 263, 267, 0, 0, 294, 0, 282, 0, 328,
	0, 0, 61, 0, 337, 339, 0, 0, 0, 0,
	75, 72, 0, 0, 386, 530, 388, 0, 256, 288,
	244, 256, 0, 373, 374, 0, 0, 0, 0, 495,
	488, 0, 477, 473, 0, 484, 0, 506, 734, 788,
	0, -2, 0, 714, 763, 0, 273, 299, 0, 0,
	0, 323, 732, 290, 45, 0, 58, 0, 0, 441,
	74, 70, 0, 387, 0, 276, 256, 315, 0, 366,
	776, 777, 518, 482, 497, 0, 504, 0, 0, 0,
	784, 715, 0, 275, 295, 296, 0, 291, 292, 293,
	936, 287, 294, 60, 240, 242, 0, 530, 0, 277,
	288, 509, 474, 781, 786, 789, -2, 1073, 968, 0,
	787, 268, 297, 0, 298, 0, 0, 0, 299, 0,
	385, 259, 256, 489, 0, 791, 792, 793, 794, 795,
	300, 0, 303, 304, 0, 301, 284, 255, 257, 258,
	316, 0, 302, 305, 306, 790,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 318, 3, 324, 319, 3,
	329, 330, 322, 320, 333, 321, 331, 323, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 337, 332,
	312, 314, 313, 3, 334, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 327, 3, 328, 325, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 335, 317, 336, 315,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 316,
	57655, 326, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:777
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:789
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:815
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:885
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:908
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:918
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:980
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return unimplemented(sqllex, "alter using")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1058
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			return unimplemented(sqllex, "set local")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			return unimplemented(sqllex, "set from current")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return unimplemented(sqllex, "set names")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			return unimplemented(sqllex, "opt_encoding")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1578
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1658
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1682
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1686
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1690
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1733
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1737
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1743
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1747
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1755
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = DropDefault
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1840
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return unimplemented(sqllex, "match full")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			return unimplemented(sqllex, "match partial")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			return unimplemented(sqllex, "match simple")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2061
		{
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			return unimplemented(sqllex, "no action")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			return unimplemented(sqllex, "action set null")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return unimplemented(sqllex, "action set default")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = true
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = false
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2181
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2185
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = Ascending
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = Descending
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2239
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2240
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = true
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = false
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2254
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2296
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2297
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.str = ""
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.str = ""
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.str = ""
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.str = ""
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2420
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2484
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 393:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2518
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2519
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2747
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2755
		{
			return unimplemented(sqllex, "cte")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2759
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2767
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = true
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = false
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = false
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = true
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2791
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2960
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &From{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2996
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3014
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3041
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3058
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = nil
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = true
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = false
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.str = astFullJoin
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.str = astLeftJoin
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = astRightJoin
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = astInnerJoin
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3342
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3357
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3366
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3438
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = nil
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3487
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3583
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3615
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = year
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = month
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = day
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = hour
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = minute
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = month
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = hour
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = minute
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = minute
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = nil
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = second
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3750
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3785
		{
			return unimplemented(sqllex, "at tz")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3953
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4019
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4192
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4245
		{
			return unimplemented(sqllex, "variadic")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4246
		{
			return unimplemented(sqllex, "variadic")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4269
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			return unimplemented(sqllex, "func_application")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4290
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			return unimplemented(sqllex, "current role")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4308
		{
			return unimplemented(sqllex, "current user")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			return unimplemented(sqllex, "session user")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			return unimplemented(sqllex, "user")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4339
		{
			return unimplemented(sqllex, "treat")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4383
		{
			return unimplemented(sqllex, "within group")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4384
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = Window(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4419
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.str = ""
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			return unimplemented(sqllex, "frame range")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4483
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4487
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4493
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4494
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = Any
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Some
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = All
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = Plus
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = Minus
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = Mult
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = Div
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = FloorDiv
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = Mod
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = Bitand
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = Bitor
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = Pow
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = Bitxor
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = LT
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = GT
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = EQ
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = LE
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = GE
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = NE
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = Like
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = NotLike
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = ILike
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = NotILike
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4861
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4862
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5024
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5060
		{
			return unimplemented(sqllex, "func const")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5069
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = DNull
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.str = ""
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
