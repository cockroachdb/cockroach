// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INET = 57482
const INTERLEAVE = 57483
const INDEX = 57484
const INDEXES = 57485
const INITIALLY = 57486
const INNER = 57487
const INSERT = 57488
const INT = 57489
const INT2VECTOR = 57490
const INT2 = 57491
const INT4 = 57492
const INT8 = 57493
const INT64 = 57494
const INTEGER = 57495
const INTERSECT = 57496
const INTERVAL = 57497
const INTO = 57498
const IS = 57499
const ISOLATION = 57500
const JOB = 57501
const JOBS = 57502
const JOIN = 57503
const KEY = 57504
const KEYS = 57505
const KV = 57506
const LATERAL = 57507
const LC_CTYPE = 57508
const LC_COLLATE = 57509
const LEADING = 57510
const LEAST = 57511
const LEFT = 57512
const LEVEL = 57513
const LIKE = 57514
const LIMIT = 57515
const LOCAL = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const LOW = 57519
const LSHIFT = 57520
const MATCH = 57521
const MINUTE = 57522
const MONTH = 57523
const NAN = 57524
const NAME = 57525
const NAMES = 57526
const NATURAL = 57527
const NEXT = 57528
const NO = 57529
const NO_INDEX_JOIN = 57530
const NORMAL = 57531
const NOT = 57532
const NOTHING = 57533
const NULL = 57534
const NULLIF = 57535
const NULLS = 57536
const NUMERIC = 57537
const OF = 57538
const OFF = 57539
const OFFSET = 57540
const OID = 57541
const ON = 57542
const ONLY = 57543
const OPTIONS = 57544
const OR = 57545
const ORDER = 57546
const ORDINALITY = 57547
const OUT = 57548
const OUTER = 57549
const OVER = 57550
const OVERLAPS = 57551
const OVERLAY = 57552
const PARENT = 57553
const PARTIAL = 57554
const PARTITION = 57555
const PASSWORD = 57556
const PAUSE = 57557
const PLACING = 57558
const PLANS = 57559
const POSITION = 57560
const PRECEDING = 57561
const PRECISION = 57562
const PREPARE = 57563
const PRIMARY = 57564
const PRIORITY = 57565
const QUERIES = 57566
const QUERY = 57567
const RANGE = 57568
const READ = 57569
const REAL = 57570
const RECURSIVE = 57571
const REF = 57572
const REFERENCES = 57573
const REGCLASS = 57574
const REGPROC = 57575
const REGPROCEDURE = 57576
const REGNAMESPACE = 57577
const REGTYPE = 57578
const RENAME = 57579
const REPEATABLE = 57580
const RELEASE = 57581
const RESET = 57582
const RESTORE = 57583
const RESTRICT = 57584
const RESUME = 57585
const RETURNING = 57586
const REVOKE = 57587
const RIGHT = 57588
const ROLLBACK = 57589
const ROLLUP = 57590
const ROW = 57591
const ROWS = 57592
const RSHIFT = 57593
const SAVEPOINT = 57594
const SCATTER = 57595
const SEARCH = 57596
const SECOND = 57597
const SELECT = 57598
const SEQUENCES = 57599
const SERIAL = 57600
const SERIALIZABLE = 57601
const SESSION = 57602
const SESSIONS = 57603
const SESSION_USER = 57604
const SET = 57605
const SETTING = 57606
const SETTINGS = 57607
const SHOW = 57608
const SIMILAR = 57609
const SIMPLE = 57610
const SMALLINT = 57611
const SMALLSERIAL = 57612
const SNAPSHOT = 57613
const SOME = 57614
const SPLIT = 57615
const SQL = 57616
const START = 57617
const STATUS = 57618
const STDIN = 57619
const STRICT = 57620
const STRING = 57621
const STORE = 57622
const STORING = 57623
const SUBSTRING = 57624
const SYMMETRIC = 57625
const SYSTEM = 57626
const TABLE = 57627
const TABLES = 57628
const TEMP = 57629
const TEMPLATE = 57630
const TEMPORARY = 57631
const TESTING_RANGES = 57632
const TESTING_RELOCATE = 57633
const TEXT = 57634
const THEN = 57635
const TIME = 57636
const TIMESTAMP = 57637
const TIMESTAMPTZ = 57638
const TO = 57639
const TRAILING = 57640
const TRACE = 57641
const TRANSACTION = 57642
const TREAT = 57643
const TRIM = 57644
const TRUE = 57645
const TRUNCATE = 57646
const TYPE = 57647
const UNBOUNDED = 57648
const UNCOMMITTED = 57649
const UNION = 57650
const UNIQUE = 57651
const UNKNOWN = 57652
const UPDATE = 57653
const UPSERT = 57654
const USE = 57655
const USER = 57656
const USERS = 57657
const USING = 57658
const UUID = 57659
const VALID = 57660
const VALIDATE = 57661
const VALUE = 57662
const VALUES = 57663
const VARCHAR = 57664
const VARIADIC = 57665
const VIEW = 57666
const VARYING = 57667
const WHEN = 57668
const WHERE = 57669
const WINDOW = 57670
const WITH = 57671
const WITHIN = 57672
const WITHOUT = 57673
const WRITE = 57674
const YEAR = 57675
const ZONE = 57676
const NOT_LA = 57677
const WITH_LA = 57678
const AS_LA = 57679
const POSTFIXOP = 57680
const UMINUS = 57681
const HELPTOKEN = 57682

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6535

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	359, 53,
	-2, 673,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	142, 525,
	-2, 0,
	-1, 61,
	92, 673,
	146, 673,
	311, 673,
	312, 673,
	-2, 0,
	-1, 71,
	103, 648,
	112, 648,
	154, 648,
	173, 648,
	198, 648,
	204, 648,
	308, 648,
	-2, 637,
	-1, 103,
	4, 675,
	20, 675,
	21, 675,
	23, 675,
	28, 675,
	33, 675,
	34, 675,
	35, 675,
	36, 675,
	37, 675,
	38, 675,
	39, 675,
	40, 675,
	41, 675,
	42, 675,
	44, 675,
	45, 675,
	46, 675,
	47, 675,
	48, 675,
	51, 675,
	52, 675,
	53, 675,
	55, 675,
	56, 675,
	60, 675,
	61, 675,
	62, 675,
	64, 675,
	66, 675,
	67, 675,
	68, 675,
	71, 675,
	72, 675,
	73, 675,
	81, 675,
	82, 675,
	83, 675,
	84, 675,
	85, 675,
	86, 675,
	87, 675,
	88, 675,
	90, 675,
	92, 675,
	94, 675,
	97, 675,
	98, 675,
	100, 675,
	104, 675,
	105, 675,
	106, 675,
	107, 675,
	108, 675,
	109, 675,
	113, 675,
	114, 675,
	115, 675,
	116, 675,
	117, 675,
	119, 675,
	121, 675,
	126, 675,
	127, 675,
	129, 675,
	132, 675,
	133, 675,
	134, 675,
	135, 675,
	136, 675,
	137, 675,
	140, 675,
	141, 675,
	143, 675,
	146, 675,
	147, 675,
	148, 675,
	149, 675,
	150, 675,
	151, 675,
	152, 675,
	153, 675,
	155, 675,
	158, 675,
	159, 675,
	160, 675,
	162, 675,
	163, 675,
	164, 675,
	166, 675,
	167, 675,
	169, 675,
	171, 675,
	174, 675,
	177, 675,
	179, 675,
	180, 675,
	181, 675,
	182, 675,
	183, 675,
	184, 675,
	186, 675,
	187, 675,
	188, 675,
	189, 675,
	193, 675,
	194, 675,
	195, 675,
	196, 675,
	197, 675,
	199, 675,
	201, 675,
	202, 675,
	205, 675,
	206, 675,
	208, 675,
	210, 675,
	211, 675,
	212, 675,
	213, 675,
	214, 675,
	215, 675,
	217, 675,
	218, 675,
	219, 675,
	220, 675,
	221, 675,
	223, 675,
	224, 675,
	225, 675,
	226, 675,
	227, 675,
	228, 675,
	229, 675,
	230, 675,
	232, 675,
	233, 675,
	234, 675,
	235, 675,
	236, 675,
	237, 675,
	238, 675,
	239, 675,
	240, 675,
	241, 675,
	242, 675,
	243, 675,
	245, 675,
	247, 675,
	248, 675,
	249, 675,
	250, 675,
	252, 675,
	253, 675,
	254, 675,
	255, 675,
	257, 675,
	258, 675,
	259, 675,
	260, 675,
	261, 675,
	263, 675,
	264, 675,
	265, 675,
	266, 675,
	268, 675,
	269, 675,
	270, 675,
	271, 675,
	273, 675,
	274, 675,
	275, 675,
	276, 675,
	277, 675,
	278, 675,
	279, 675,
	280, 675,
	281, 675,
	282, 675,
	284, 675,
	286, 675,
	287, 675,
	288, 675,
	289, 675,
	290, 675,
	291, 675,
	292, 675,
	294, 675,
	295, 675,
	296, 675,
	299, 675,
	300, 675,
	301, 675,
	302, 675,
	304, 675,
	305, 675,
	306, 675,
	307, 675,
	310, 675,
	311, 675,
	312, 675,
	313, 675,
	315, 675,
	317, 675,
	318, 675,
	319, 675,
	320, 675,
	321, 675,
	322, 675,
	325, 675,
	330, 675,
	331, 675,
	332, 675,
	333, 675,
	334, 675,
	-2, 0,
	-1, 116,
	103, 647,
	112, 647,
	154, 647,
	173, 647,
	198, 647,
	204, 647,
	308, 647,
	-2, 640,
	-1, 121,
	1, 574,
	158, 574,
	223, 574,
	227, 574,
	358, 574,
	359, 574,
	-2, 0,
	-1, 123,
	1, 574,
	358, 574,
	359, 574,
	-2, 0,
	-1, 124,
	1, 574,
	358, 574,
	359, 574,
	-2, 0,
	-1, 125,
	1, 578,
	358, 578,
	359, 578,
	-2, 0,
	-1, 132,
	4, 681,
	5, 681,
	6, 681,
	7, 681,
	8, 681,
	9, 681,
	20, 681,
	21, 681,
	23, 681,
	28, 681,
	29, 681,
	33, 681,
	34, 681,
	35, 681,
	36, 681,
	37, 681,
	38, 681,
	39, 681,
	40, 681,
	41, 681,
	42, 681,
	44, 681,
	45, 681,
	46, 681,
	47, 681,
	48, 681,
	49, 681,
	50, 681,
	51, 681,
	52, 681,
	53, 681,
	55, 681,
	56, 681,
	58, 681,
	60, 681,
	61, 681,
	62, 681,
	64, 681,
	66, 681,
	67, 681,
	68, 681,
	70, 681,
	71, 681,
	72, 681,
	73, 681,
	75, 681,
	76, 681,
	77, 681,
	79, 681,
	80, 681,
	81, 681,
	82, 681,
	83, 681,
	84, 681,
	85, 681,
	86, 681,
	87, 681,
	88, 681,
	90, 681,
	92, 681,
	94, 681,
	97, 681,
	98, 681,
	100, 681,
	104, 681,
	105, 681,
	106, 681,
	107, 681,
	108, 681,
	109, 681,
	110, 681,
	111, 681,
	113, 681,
	114, 681,
	115, 681,
	116, 681,
	117, 681,
	119, 681,
	121, 681,
	124, 681,
	126, 681,
	127, 681,
	129, 681,
	132, 681,
	133, 681,
	134, 681,
	135, 681,
	136, 681,
	137, 681,
	138, 681,
	140, 681,
	141, 681,
	143, 681,
	145, 681,
	146, 681,
	147, 681,
	148, 681,
	149, 681,
	150, 681,
	151, 681,
	152, 681,
	153, 681,
	155, 681,
	157, 681,
	158, 681,
	159, 681,
	160, 681,
	161, 681,
	162, 681,
	163, 681,
	164, 681,
	166, 681,
	167, 681,
	169, 681,
	170, 681,
	171, 681,
	172, 681,
	174, 681,
	177, 681,
	179, 681,
	180, 681,
	181, 681,
	182, 681,
	183, 681,
	184, 681,
	185, 681,
	186, 681,
	187, 681,
	188, 681,
	189, 681,
	190, 681,
	192, 681,
	193, 681,
	194, 681,
	195, 681,
	196, 681,
	197, 681,
	199, 681,
	202, 681,
	205, 681,
	206, 681,
	207, 681,
	208, 681,
	209, 681,
	210, 681,
	211, 681,
	212, 681,
	213, 681,
	214, 681,
	215, 681,
	217, 681,
	218, 681,
	219, 681,
	220, 681,
	221, 681,
	223, 681,
	224, 681,
	225, 681,
	226, 681,
	227, 681,
	228, 681,
	229, 681,
	230, 681,
	232, 681,
	233, 681,
	234, 681,
	235, 681,
	236, 681,
	237, 681,
	238, 681,
	239, 681,
	240, 681,
	241, 681,
	242, 681,
	243, 681,
	245, 681,
	246, 681,
	247, 681,
	248, 681,
	249, 681,
	250, 681,
	252, 681,
	253, 681,
	254, 681,
	255, 681,
	257, 681,
	258, 681,
	259, 681,
	260, 681,
	261, 681,
	262, 681,
	263, 681,
	264, 681,
	265, 681,
	266, 681,
	267, 681,
	268, 681,
	269, 681,
	270, 681,
	271, 681,
	273, 681,
	274, 681,
	275, 681,
	276, 681,
	277, 681,
	278, 681,
	279, 681,
	280, 681,
	281, 681,
	282, 681,
	284, 681,
	286, 681,
	287, 681,
	288, 681,
	289, 681,
	290, 681,
	291, 681,
	292, 681,
	294, 681,
	295, 681,
	296, 681,
	299, 681,
	300, 681,
	301, 681,
	302, 681,
	303, 681,
	304, 681,
	305, 681,
	306, 681,
	307, 681,
	310, 681,
	311, 681,
	312, 681,
	313, 681,
	314, 681,
	315, 681,
	317, 681,
	318, 681,
	319, 681,
	320, 681,
	321, 681,
	322, 681,
	325, 681,
	330, 681,
	331, 681,
	332, 681,
	333, 681,
	334, 681,
	335, 681,
	341, 681,
	346, 681,
	347, 681,
	348, 681,
	355, 681,
	361, 681,
	-2, 0,
	-1, 135,
	1, 53,
	359, 53,
	-2, 673,
	-1, 495,
	123, 1274,
	297, 1274,
	340, 1274,
	357, 1274,
	-2, 0,
	-1, 496,
	123, 1227,
	297, 1227,
	340, 1227,
	357, 1227,
	-2, 0,
	-1, 498,
	123, 1332,
	297, 1332,
	340, 1332,
	357, 1332,
	-2, 0,
	-1, 500,
	123, 1354,
	297, 1354,
	340, 1354,
	357, 1354,
	-2, 0,
	-1, 507,
	123, 1279,
	297, 1279,
	340, 1279,
	357, 1279,
	-2, 317,
	-1, 533,
	1, 394,
	354, 394,
	356, 394,
	358, 394,
	359, 394,
	-2, 0,
	-1, 534,
	1, 441,
	120, 441,
	354, 441,
	356, 441,
	358, 441,
	359, 441,
	-2, 0,
	-1, 540,
	1, 408,
	354, 408,
	356, 408,
	358, 408,
	359, 408,
	-2, 0,
	-1, 542,
	1, 412,
	354, 412,
	356, 412,
	358, 412,
	359, 412,
	-2, 0,
	-1, 545,
	1, 420,
	354, 420,
	356, 420,
	358, 420,
	359, 420,
	-2, 0,
	-1, 546,
	1, 425,
	354, 425,
	356, 425,
	358, 425,
	359, 425,
	-2, 0,
	-1, 549,
	1, 435,
	354, 435,
	356, 435,
	358, 435,
	359, 435,
	-2, 0,
	-1, 563,
	112, 683,
	173, 683,
	198, 683,
	-2, 643,
	-1, 566,
	112, 682,
	173, 682,
	198, 682,
	-2, 641,
	-1, 623,
	355, 1205,
	-2, 1198,
	-1, 624,
	355, 1206,
	-2, 1199,
	-1, 630,
	5, 860,
	355, 860,
	-2, 1406,
	-1, 655,
	5, 819,
	-2, 1375,
	-1, 656,
	5, 854,
	355, 854,
	-2, 1377,
	-1, 657,
	5, 829,
	-2, 1378,
	-1, 658,
	5, 828,
	-2, 1379,
	-1, 659,
	5, 854,
	355, 854,
	-2, 1382,
	-1, 660,
	5, 854,
	355, 854,
	-2, 1383,
	-1, 661,
	5, 855,
	-2, 1386,
	-1, 662,
	5, 811,
	-2, 1387,
	-1, 663,
	5, 811,
	-2, 1388,
	-1, 664,
	5, 836,
	-2, 1392,
	-1, 665,
	5, 821,
	-2, 1393,
	-1, 666,
	5, 822,
	-2, 1394,
	-1, 667,
	5, 812,
	-2, 1400,
	-1, 668,
	5, 813,
	-2, 1401,
	-1, 669,
	5, 814,
	-2, 1402,
	-1, 670,
	5, 815,
	-2, 1403,
	-1, 671,
	5, 816,
	-2, 1404,
	-1, 672,
	5, 817,
	-2, 1405,
	-1, 673,
	5, 811,
	-2, 1410,
	-1, 674,
	5, 820,
	-2, 1415,
	-1, 675,
	5, 818,
	-2, 1418,
	-1, 676,
	5, 852,
	355, 852,
	-2, 1420,
	-1, 677,
	5, 856,
	-2, 1423,
	-1, 678,
	5, 858,
	-2, 1424,
	-1, 679,
	5, 851,
	355, 851,
	-2, 1429,
	-1, 775,
	214, 671,
	-2, 518,
	-1, 779,
	200, 1202,
	-2, 0,
	-1, 814,
	1, 208,
	354, 208,
	356, 208,
	358, 208,
	359, 208,
	-2, 646,
	-1, 821,
	4, 1428,
	10, 1428,
	11, 1428,
	13, 1428,
	14, 1428,
	15, 1428,
	16, 1428,
	17, 1428,
	18, 1428,
	20, 1428,
	21, 1428,
	23, 1428,
	26, 1428,
	28, 1428,
	30, 1428,
	33, 1428,
	34, 1428,
	35, 1428,
	36, 1428,
	37, 1428,
	38, 1428,
	39, 1428,
	40, 1428,
	41, 1428,
	42, 1428,
	44, 1428,
	45, 1428,
	46, 1428,
	47, 1428,
	48, 1428,
	51, 1428,
	52, 1428,
	53, 1428,
	55, 1428,
	56, 1428,
	57, 1428,
	60, 1428,
	61, 1428,
	62, 1428,
	63, 1428,
	64, 1428,
	66, 1428,
	67, 1428,
	68, 1428,
	70, 1428,
	71, 1428,
	72, 1428,
	73, 1428,
	81, 1428,
	82, 1428,
	83, 1428,
	84, 1428,
	85, 1428,
	86, 1428,
	87, 1428,
	88, 1428,
	90, 1428,
	92, 1428,
	94, 1428,
	97, 1428,
	98, 1428,
	100, 1428,
	104, 1428,
	105, 1428,
	106, 1428,
	107, 1428,
	108, 1428,
	109, 1428,
	113, 1428,
	114, 1428,
	115, 1428,
	116, 1428,
	117, 1428,
	118, 1428,
	119, 1428,
	121, 1428,
	124, 1428,
	126, 1428,
	127, 1428,
	129, 1428,
	132, 1428,
	133, 1428,
	134, 1428,
	135, 1428,
	136, 1428,
	137, 1428,
	138, 1428,
	139, 1428,
	140, 1428,
	141, 1428,
	143, 1428,
	145, 1428,
	146, 1428,
	147, 1428,
	148, 1428,
	149, 1428,
	150, 1428,
	151, 1428,
	152, 1428,
	153, 1428,
	155, 1428,
	157, 1428,
	158, 1428,
	159, 1428,
	160, 1428,
	161, 1428,
	162, 1428,
	163, 1428,
	164, 1428,
	166, 1428,
	167, 1428,
	169, 1428,
	170, 1428,
	171, 1428,
	172, 1428,
	174, 1428,
	177, 1428,
	178, 1428,
	179, 1428,
	180, 1428,
	181, 1428,
	182, 1428,
	183, 1428,
	184, 1428,
	185, 1428,
	186, 1428,
	187, 1428,
	188, 1428,
	189, 1428,
	193, 1428,
	194, 1428,
	195, 1428,
	196, 1428,
	197, 1428,
	199, 1428,
	202, 1428,
	203, 1428,
	205, 1428,
	206, 1428,
	208, 1428,
	210, 1428,
	211, 1428,
	212, 1428,
	213, 1428,
	214, 1428,
	215, 1428,
	217, 1428,
	218, 1428,
	219, 1428,
	220, 1428,
	221, 1428,
	223, 1428,
	224, 1428,
	225, 1428,
	226, 1428,
	227, 1428,
	228, 1428,
	229, 1428,
	230, 1428,
	232, 1428,
	233, 1428,
	234, 1428,
	235, 1428,
	236, 1428,
	237, 1428,
	238, 1428,
	239, 1428,
	240, 1428,
	241, 1428,
	242, 1428,
	243, 1428,
	245, 1428,
	246, 1428,
	247, 1428,
	248, 1428,
	249, 1428,
	250, 1428,
	251, 1428,
	252, 1428,
	253, 1428,
	254, 1428,
	255, 1428,
	257, 1428,
	258, 1428,
	259, 1428,
	260, 1428,
	261, 1428,
	263, 1428,
	264, 1428,
	265, 1428,
	266, 1428,
	267, 1428,
	268, 1428,
	269, 1428,
	270, 1428,
	271, 1428,
	273, 1428,
	274, 1428,
	275, 1428,
	276, 1428,
	277, 1428,
	278, 1428,
	279, 1428,
	280, 1428,
	281, 1428,
	282, 1428,
	284, 1428,
	286, 1428,
	287, 1428,
	288, 1428,
	289, 1428,
	290, 1428,
	291, 1428,
	292, 1428,
	294, 1428,
	295, 1428,
	296, 1428,
	299, 1428,
	300, 1428,
	301, 1428,
	302, 1428,
	304, 1428,
	305, 1428,
	306, 1428,
	307, 1428,
	310, 1428,
	311, 1428,
	312, 1428,
	313, 1428,
	315, 1428,
	317, 1428,
	318, 1428,
	319, 1428,
	320, 1428,
	321, 1428,
	322, 1428,
	325, 1428,
	330, 1428,
	331, 1428,
	332, 1428,
	333, 1428,
	334, 1428,
	335, 1428,
	336, 1428,
	338, 1428,
	339, 1428,
	340, 1428,
	341, 1428,
	343, 1428,
	344, 1428,
	345, 1428,
	346, 1428,
	347, 1428,
	348, 1428,
	349, 1428,
	350, 1428,
	351, 1428,
	353, 1428,
	356, 1428,
	357, 1428,
	360, 1428,
	361, 1428,
	-2, 0,
	-1, 835,
	123, 1332,
	297, 1332,
	340, 1332,
	357, 1332,
	-2, 0,
	-1, 852,
	123, 1354,
	297, 1354,
	340, 1354,
	357, 1354,
	-2, 0,
	-1, 853,
	158, 586,
	223, 586,
	227, 586,
	-2, 305,
	-1, 922,
	112, 682,
	173, 682,
	198, 682,
	-2, 644,
	-1, 991,
	103, 648,
	112, 648,
	154, 648,
	173, 648,
	198, 648,
	204, 648,
	308, 648,
	-2, 979,
	-1, 1001,
	355, 1182,
	-2, 1170,
	-1, 1019,
	356, 1122,
	-2, 0,
	-1, 1043,
	158, 586,
	223, 586,
	227, 586,
	-2, 581,
	-1, 1075,
	103, 648,
	112, 648,
	154, 648,
	173, 648,
	198, 648,
	204, 648,
	308, 648,
	-2, 744,
	-1, 1298,
	158, 586,
	223, 586,
	227, 586,
	-2, 307,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 895,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 896,
	-1, 1398,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 897,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 901,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 902,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 903,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 908,
	-1, 1413,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 910,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 914,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 915,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 916,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 917,
	-1, 1444,
	209, 1064,
	-2, 1067,
	-1, 1488,
	123, 1104,
	355, 1205,
	-2, 1198,
	-1, 1489,
	123, 1105,
	-2, 1371,
	-1, 1490,
	123, 1106,
	-2, 1278,
	-1, 1491,
	123, 1107,
	-2, 1242,
	-1, 1492,
	123, 1108,
	-2, 1258,
	-1, 1493,
	123, 1109,
	-2, 1277,
	-1, 1494,
	123, 1110,
	-2, 1329,
	-1, 1570,
	1, 745,
	70, 745,
	103, 745,
	112, 745,
	124, 745,
	128, 745,
	130, 745,
	145, 745,
	154, 745,
	161, 745,
	170, 745,
	173, 745,
	185, 745,
	198, 745,
	200, 745,
	204, 745,
	244, 745,
	246, 745,
	308, 745,
	316, 745,
	327, 745,
	328, 745,
	337, 745,
	354, 745,
	356, 745,
	358, 745,
	359, 745,
	360, 745,
	-2, 744,
	-1, 1710,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 909,
	-1, 1711,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 911,
	-1, 1716,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 912,
	-1, 1734,
	209, 1063,
	-2, 1066,
	-1, 1959,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 913,
	-1, 1964,
	157, 0,
	-2, 929,
	-1, 1974,
	209, 1065,
	-2, 1068,
	-1, 2016,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 956,
	-1, 2017,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 957,
	-1, 2018,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 958,
	-1, 2022,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 962,
	-1, 2023,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 963,
	-1, 2024,
	13, 0,
	14, 0,
	15, 0,
	338, 0,
	339, 0,
	340, 0,
	-2, 964,
	-1, 2149,
	157, 0,
	-2, 930,
	-1, 2152,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 933,
	-1, 2153,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 935,
	-1, 2269,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 934,
	-1, 2270,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 936,
	-1, 2277,
	157, 0,
	-2, 965,
	-1, 2354,
	157, 0,
	-2, 966,
	-1, 2431,
	36, 0,
	138, 0,
	172, 0,
	267, 0,
	335, 0,
	341, 0,
	-2, 1374,
}

const sqlPrivate = 57344

const sqlLast = 41215

var sqlAct = [...]int{

	624, 2439, 2430, 2105, 2478, 1633, 2440, 2405, 2441, 1941,
	2303, 1198, 567, 1641, 1993, 2429, 2359, 2250, 1292, 1704,
	2203, 1613, 873, 583, 2115, 70, 2137, 1205, 614, 2217,
	727, 2139, 600, 1907, 622, 2077, 1104, 1565, 1240, 2283,
	173, 769, 1073, 1617, 173, 2131, 1909, 1915, 1827, 1293,
	1612, 1069, 173, 1630, 1848, 1052, 2076, 1800, 453, 25,
	1642, 173, 1566, 2183, 1616, 438, 173, 173, 1583, 1835,
	173, 1201, 1574, 173, 1606, 1745, 621, 2047, 1375, 1799,
	997, 173, 1442, 1370, 1700, 856, 1194, 1053, 575, 115,
	1688, 925, 1083, 1081, 506, 1323, 594, 1430, 1319, 1517,
	1427, 733, 1241, 1452, 855, 1468, 435, 1033, 1462, 1029,
	804, 1614, 875, 815, 801, 1635, 1620, 1552, 794, 736,
	1539, 1060, 715, 1484, 617, 486, 926, 173, 173, 986,
	924, 593, 1322, 164, 116, 173, 1043, 616, 464, 499,
	1218, 1212, 117, 169, 572, 713, 791, 1042, 2218, 930,
	115, 1078, 527, 2061, 1733, 1220, 2062, 571, 1220, 1220,
	1070, 173, 173, 173, 173, 1634, 2474, 2455, 173, 173,
	1103, 2216, 2451, 2450, 2447, 2427, 1656, 1656, 1103, 1671,
	2426, 2400, 2395, 2391, 1671, 1664, 2264, 1103, 2383, 571,
	757, 2356, 2216, 566, 25, 1664, 941, 942, 1924, 2334,
	478, 2331, 2329, 2216, 2314, 1103, 2216, 2313, 1103, 2291,
	2288, 2216, 1925, 1103, 1103, 1541, 581, 2271, 2238, 944,
	1957, 1664, 1656, 2236, 115, 2215, 2196, 1656, 2176, 2216,
	1103, 2154, 1656, 2151, 2130, 1656, 503, 1664, 1611, 1656,
	2125, 2057, 1968, 943, 1611, 2058, 1656, 1607, 1935, 1896,
	564, 1851, 1897, 1103, 2401, 1656, 1607, 1824, 563, 941,
	942, 1103, 741, 745, 1817, 971, 972, 973, 1818, 682,
	2050, 1815, 576, 717, 751, 1656, 1814, 1813, 1737, 1671,
	1656, 1656, 944, 1736, 1738, 975, 730, 1734, 1675, 1656,
	1663, 1656, 1656, 1655, 1664, 1610, 1465, 1656, 1546, 1611,
	132, 1233, 1545, 1671, 949, 1234, 943, 1638, 1100, 719,
	2264, 720, 958, 1656, 2050, 941, 942, 1540, 961, 962,
	963, 971, 972, 973, 1952, 1572, 2029, 1971, 1103, 134,
	1897, 964, 1703, 1686, 941, 942, 1301, 1047, 944, 1446,
	755, 975, 837, 1466, 834, 1744, 135, 2219, 833, 1221,
	832, 831, 1221, 1221, 830, 829, 828, 944, 827, 826,
	1770, 1771, 943, 825, 959, 133, 824, 949, 958, 823,
	721, 38, 718, 126, 559, 558, 557, 525, 524, 523,
	127, 943, 39, 522, 521, 132, 520, 968, 976, 519,
	1467, 1464, 518, 517, 516, 42, 1770, 1771, 515, 118,
	173, 514, 173, 173, 513, 173, 1320, 512, 511, 510,
	173, 509, 494, 1520, 134, 493, 173, 48, 492, 491,
	490, 966, 426, 949, 425, 574, 424, 959, 423, 173,
	173, 173, 173, 173, 422, 407, 406, 960, 818, 398,
	397, 396, 949, 968, 976, 681, 59, 2473, 395, 1924,
	133, 388, 1540, 60, 808, 61, 387, 158, 941, 942,
	173, 157, 974, 572, 156, 1469, 155, 1226, 1776, 38,
	1219, 1354, 154, 173, 132, 153, 152, 966, 941, 942,
	39, 944, 63, 959, 118, 151, 150, 1481, 149, 173,
	148, 147, 146, 42, 773, 145, 144, 777, 143, 173,
	960, 944, 959, 134, 1776, 943, 142, 141, 965, 140,
	139, 138, 137, 136, 761, 48, 969, 793, 1074, 1843,
	1479, 1477, 1475, 797, 797, 943, 1770, 1771, 1786, 1326,
	818, 953, 945, 946, 947, 948, 950, 951, 937, 133,
	868, 2446, 768, 1463, 59, 2428, 2410, 126, 798, 2351,
	816, 60, 2332, 61, 127, 2182, 960, 2181, 2177, 2257,
	2169, 173, 2168, 64, 2167, 1669, 949, 838, 2163, 2162,
	2161, 2160, 969, 1637, 1899, 960, 923, 2136, 2044, 871,
	63, 2039, 941, 942, 967, 2038, 949, 2037, 119, 66,
	970, 67, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 1787, 1979, 866, 132, 944, 1895, 1855, 1690, 1822,
	1819, 459, 1807, 1798, 99, 1769, 1766, 1765, 1763, 1750,
	1749, 1570, 937, 1438, 572, 1237, 728, 1005, 1072, 943,
	998, 936, 989, 134, 1776, 1071, 1204, 853, 850, 922,
	967, 1995, 2418, 955, 956, 957, 970, 761, 954, 952,
	953, 945, 946, 947, 948, 950, 951, 2386, 766, 2380,
	1939, 64, 921, 2379, 2378, 2178, 2370, 2368, 2346, 133,
	945, 946, 947, 948, 950, 951, 2345, 126, 2344, 132,
	2300, 869, 2279, 2265, 127, 2244, 119, 66, 2222, 67,
	949, 2174, 2113, 2111, 941, 942, 1772, 1773, 1774, 1775,
	1777, 1778, 132, 118, 2110, 2362, 1341, 2108, 134, 459,
	564, 2085, 99, 173, 2256, 173, 2084, 944, 563, 933,
	934, 2065, 2053, 1963, 1886, 1881, 1868, 1867, 1853, 1439,
	938, 134, 1772, 1773, 1774, 1775, 1777, 1778, 173, 173,
	1823, 943, 1797, 1759, 133, 1321, 1699, 958, 1758, 1755,
	959, 1051, 126, 1058, 1698, 818, 173, 1730, 1001, 127,
	1725, 1432, 1107, 572, 1034, 1037, 1557, 133, 173, 1031,
	1032, 1035, 1529, 1473, 1197, 126, 729, 1050, 118, 1056,
	173, 1038, 127, 941, 942, 1041, 173, 1868, 173, 1203,
	173, 1027, 1026, 1025, 173, 1024, 947, 948, 950, 951,
	1023, 118, 949, 2263, 1101, 1022, 944, 1021, 1020, 1019,
	1196, 1018, 1017, 1016, 945, 946, 947, 948, 950, 951,
	1015, 115, 1014, 960, 1013, 1012, 1011, 1010, 1009, 1002,
	943, 990, 989, 849, 841, 812, 173, 173, 1046, 1068,
	2156, 1480, 2135, 818, 2060, 173, 2056, 1558, 173, 1666,
	998, 1044, 1209, 1770, 1771, 1937, 987, 1076, 1072, 1674,
	1048, 1910, 959, 865, 1774, 1775, 1777, 1778, 1841, 1107,
	174, 2267, 1091, 2266, 1478, 1476, 1474, 2260, 173, 2063,
	1926, 1039, 1607, 173, 1074, 919, 1040, 793, 173, 173,
	767, 173, 1089, 173, 1821, 173, 2284, 173, 1820, 1102,
	1709, 862, 1673, 1007, 1942, 1327, 1202, 1307, 173, 1634,
	1090, 1238, 1996, 1453, 173, 173, 952, 953, 945, 946,
	947, 948, 950, 951, 1030, 400, 913, 1920, 2072, 609,
	2413, 1214, 1211, 1741, 1660, 960, 1084, 2470, 1085, 1223,
	173, 1949, 1225, 2471, 1107, 1465, 1228, 412, 1084, 1584,
	1085, 2230, 1676, 710, 2324, 1770, 1771, 708, 1788, 1789,
	1790, 706, 1770, 1771, 2323, 914, 1247, 1072, 2390, 170,
	1235, 2148, 1328, 393, 704, 850, 1236, 1004, 1294, 729,
	1384, 408, 701, 1084, 2322, 1085, 2321, 1316, 2100, 1298,
	433, 115, 1466, 2098, 427, 476, 170, 1324, 1576, 484,
	1312, 413, 489, 2241, 2096, 1576, 404, 1938, 1785, 1342,
	508, 1575, 993, 1086, 629, 572, 905, 1587, 1357, 2069,
	572, 1335, 2068, 680, 159, 1086, 1754, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 1753, 863, 1308, 1467,
	1464, 1752, 1751, 1196, 1376, 1383, 173, 1712, 173, 1659,
	1603, 173, 1356, 1599, 1355, 1597, 716, 716, 1414, 1045,
	1086, 1353, 173, 1776, 393, 564, 1247, 1247, 564, 564,
	1776, 1107, 1538, 1366, 173, 431, 1367, 1368, 173, 1450,
	864, 173, 754, 1533, 1295, 173, 1532, 1385, 2389, 173,
	393, 393, 749, 393, 173, 1631, 1352, 170, 758, 2103,
	173, 1107, 1791, 572, 173, 162, 1429, 1560, 561, 473,
	1351, 1280, 1559, 1429, 1469, 1440, 1437, 1586, 2104, 1332,
	2305, 570, 1892, 1786, 951, 1336, 1192, 1337, 1577, 1338,
	1786, 1339, 1331, 1340, 430, 2424, 1215, 1605, 899, 1469,
	1495, 2462, 941, 942, 940, 848, 2087, 1701, 1702, 1595,
	1346, 1348, 1879, 1311, 1310, 1601, 1320, 1317, 1588, 1590,
	1453, 2397, 2470, 1918, 163, 944, 415, 414, 1770, 1771,
	1536, 1535, 569, 1667, 1436, 900, 1374, 1544, 1722, 1434,
	1917, 2443, 1554, 1555, 1550, 2398, 1948, 1989, 2373, 943,
	1593, 1888, 1463, 1720, 1778, 1598, 1787, 1076, 173, 1082,
	1950, 1580, 1883, 1787, 1585, 173, 1094, 1917, 399, 859,
	1604, 1280, 1280, 1549, 1092, 389, 173, 918, 173, 2486,
	173, 1785, 571, 173, 2461, 173, 1231, 173, 173, 421,
	173, 173, 405, 2211, 1087, 818, 2094, 401, 1314, 173,
	870, 1220, 552, 1573, 1028, 1626, 1087, 402, 712, 416,
	949, 711, 1654, 1350, 2275, 702, 2328, 2481, 984, 702,
	580, 1757, 1469, 1296, 571, 1717, 1553, 1569, 2212, 2444,
	2143, 1636, 703, 1636, 860, 1718, 1776, 429, 861, 1723,
	702, 1087, 2442, 1782, 1783, 1784, 2469, 1279, 1781, 1779,
	1780, 1772, 1773, 1774, 1775, 1777, 1778, 1780, 1772, 1773,
	1774, 1775, 1777, 1778, 1286, 1662, 432, 160, 819, 2467,
	959, 2088, 2249, 904, 1648, 1628, 428, 797, 844, 797,
	836, 553, 115, 1315, 2460, 2445, 568, 1107, 115, 508,
	1640, 775, 508, 2306, 780, 173, 1786, 1651, 886, 783,
	1657, 1649, 1652, 1650, 878, 393, 161, 816, 1658, 929,
	1661, 173, 173, 173, 2316, 173, 1668, 1714, 508, 508,
	393, 805, 758, 1687, 1428, 2172, 928, 1670, 1891, 2207,
	1425, 2208, 390, 2315, 173, 2298, 552, 2365, 912, 587,
	2071, 1864, 1035, 960, 1038, 1423, 1719, 1279, 1279, 508,
	1860, 562, 472, 1721, 580, 1330, 2479, 465, 1032, 1031,
	819, 2210, 508, 483, 1443, 1677, 939, 847, 993, 1787,
	2213, 1629, 1447, 2487, 1210, 1411, 1455, 1985, 845, 684,
	470, 2492, 554, 462, 1435, 1199, 466, 927, 508, 1487,
	1487, 1500, 115, 1512, 2211, 1221, 2226, 2204, 391, 1524,
	1525, 1527, 1986, 2025, 417, 2202, 2406, 1345, 1362, 2206,
	1691, 2480, 929, 467, 1299, 553, 1695, 1419, 572, 1302,
	1697, 820, 1693, 1770, 1771, 1420, 2173, 1421, 1743, 2212,
	465, 1426, 2482, 1849, 469, 954, 952, 953, 945, 946,
	947, 948, 950, 951, 418, 1563, 166, 1679, 2209, 1987,
	393, 2205, 2116, 470, 1838, 1321, 1318, 928, 1681, 466,
	555, 1781, 1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778,
	1715, 771, 1713, 854, 419, 683, 420, 1409, 1412, 1682,
	1363, 770, 2229, 1098, 2491, 2251, 467, 2299, 1870, 2228,
	1729, 1680, 556, 572, 909, 1869, 887, 2225, 2026, 1097,
	1850, 481, 173, 1107, 2027, 1825, 1707, 469, 173, 173,
	1831, 1408, 173, 820, 1548, 1740, 554, 173, 927, 1095,
	173, 1547, 859, 1306, 1469, 475, 879, 569, 173, 1832,
	2207, 1776, 2208, 790, 173, 173, 173, 1096, 1422, 1830,
	173, 788, 2106, 173, 468, 1424, 779, 2242, 2184, 173,
	173, 173, 173, 173, 458, 33, 2296, 1845, 173, 910,
	173, 1844, 2210, 880, 173, 1890, 877, 2048, 1304, 1472,
	859, 2213, 173, 1854, 1804, 1805, 1806, 457, 32, 1840,
	1305, 2297, 173, 1861, 173, 819, 173, 700, 1826, 173,
	2227, 1786, 1108, 173, 555, 456, 29, 2278, 173, 471,
	173, 2171, 489, 2102, 716, 1801, 1410, 173, 1962, 1898,
	3, 1900, 911, 1880, 756, 1893, 1764, 468, 1724, 1885,
	173, 818, 1802, 572, 1672, 1856, 556, 393, 393, 859,
	1063, 1609, 818, 173, 908, 860, 1602, 455, 76, 861,
	1596, 626, 759, 1901, 1865, 170, 1904, 1878, 1922, 2209,
	917, 1066, 760, 1829, 454, 75, 916, 393, 480, 1833,
	1834, 842, 897, 1839, 1787, 1343, 1247, 1551, 173, 1208,
	1934, 903, 471, 819, 1334, 393, 1064, 393, 1865, 393,
	1902, 1943, 474, 1216, 1919, 1913, 1008, 789, 1471, 2438,
	33, 451, 21, 1927, 860, 787, 2403, 2200, 861, 1108,
	1247, 452, 22, 450, 27, 449, 19, 447, 18, 895,
	1933, 705, 707, 32, 448, 17, 2092, 893, 173, 1981,
	1982, 1983, 1947, 1944, 1965, 508, 170, 1936, 2090, 1945,
	1946, 29, 442, 14, 170, 443, 15, 508, 820, 441,
	13, 1953, 1951, 446, 11, 1109, 739, 1955, 2070, 1247,
	1928, 1929, 1065, 1930, 1931, 907, 1781, 1779, 1780, 1772,
	1773, 1774, 1775, 1777, 1778, 1906, 1632, 508, 440, 9,
	445, 7, 508, 76, 1108, 891, 1972, 170, 508, 1975,
	508, 889, 508, 896, 508, 1625, 508, 444, 6, 902,
	75, 1230, 439, 5, 1229, 1997, 1227, 1344, 883, 173,
	1999, 1770, 1771, 508, 508, 173, 1728, 2002, 1224, 2004,
	1247, 1280, 1222, 1731, 173, 173, 1246, 2032, 1988, 1990,
	1991, 786, 1099, 1093, 1376, 2000, 820, 21, 1088, 508,
	894, 1747, 1748, 1376, 2005, 2066, 1976, 22, 892, 27,
	2033, 19, 2059, 18, 1908, 1280, 1247, 1247, 2339, 2046,
	17, 2471, 1109, 724, 2064, 1247, 1247, 2083, 173, 2101,
	173, 1325, 2049, 2082, 2052, 931, 2036, 173, 14, 2051,
	818, 15, 115, 725, 2112, 13, 2262, 2067, 2132, 11,
	2261, 1796, 2341, 460, 2375, 173, 173, 2109, 1247, 2126,
	1059, 1705, 2118, 1809, 1280, 2074, 890, 1592, 2124, 2219,
	881, 1108, 888, 173, 9, 2081, 7, 1232, 1576, 1776,
	2129, 1600, 2095, 173, 1591, 2117, 1246, 1246, 1107, 882,
	2120, 2353, 2107, 6, 2121, 2185, 1576, 1109, 5, 599,
	935, 1108, 1589, 2122, 2128, 489, 2145, 716, 932, 1594,
	758, 2133, 785, 2119, 1063, 2127, 726, 941, 942, 1502,
	2055, 393, 482, 1706, 2146, 1280, 173, 941, 942, 2402,
	2247, 1639, 2150, 1568, 1627, 1066, 1624, 393, 1537, 1786,
	393, 1297, 1239, 392, 1581, 2091, 2477, 2093, 393, 2490,
	944, 1061, 2290, 393, 1770, 1771, 2190, 1279, 2134, 393,
	1064, 1280, 1280, 1608, 943, 941, 942, 1684, 1683, 2045,
	1280, 1280, 1992, 1684, 943, 1062, 1940, 1846, 1816, 1685,
	1534, 173, 1531, 1530, 173, 1461, 995, 2158, 1984, 1903,
	2170, 1279, 1005, 1003, 1107, 173, 173, 915, 585, 173,
	173, 173, 906, 1280, 901, 2188, 898, 1829, 884, 846,
	1300, 560, 1787, 2304, 463, 1333, 173, 2195, 1247, 885,
	1842, 173, 1556, 173, 1109, 173, 173, 173, 2396, 173,
	2192, 173, 2194, 818, 734, 819, 1065, 2224, 2189, 2220,
	1279, 173, 173, 2083, 2199, 2187, 2191, 2164, 818, 2082,
	1756, 2240, 2358, 2274, 1109, 1470, 1006, 1615, 52, 2079,
	743, 747, 2245, 753, 758, 603, 2201, 2083, 2073, 1619,
	2253, 2223, 2083, 2082, 1969, 393, 1618, 1647, 2082, 508,
	1110, 1309, 508, 625, 508, 1486, 393, 393, 1377, 1653,
	758, 2081, 2246, 2252, 699, 2243, 2268, 627, 1581, 1244,
	2248, 1279, 2273, 2254, 2259, 1779, 1780, 1772, 1773, 1774,
	1775, 1777, 1778, 628, 2258, 2081, 1245, 1036, 615, 1242,
	2081, 813, 1643, 1313, 1433, 1451, 1739, 1108, 999, 595,
	607, 173, 2186, 173, 606, 1107, 173, 1279, 1279, 1448,
	840, 2030, 1847, 2280, 173, 1916, 1279, 1279, 2255, 1361,
	1107, 1696, 2040, 1358, 1912, 2089, 403, 2287, 1767, 811,
	1509, 1501, 2289, 1280, 1497, 920, 1057, 2308, 985, 1644,
	2310, 2294, 867, 1923, 2292, 2083, 1665, 1049, 1369, 1279,
	173, 2082, 2307, 818, 723, 722, 2309, 173, 820, 1303,
	1196, 1282, 1678, 978, 1689, 173, 173, 818, 818, 977,
	2326, 709, 2367, 2083, 2325, 2337, 858, 857, 2340, 2082,
	393, 393, 393, 1200, 393, 173, 1863, 2352, 2338, 2485,
	173, 2342, 2348, 2081, 2374, 2097, 2347, 173, 2336, 1247,
	2099, 2330, 2086, 393, 2412, 131, 2333, 2369, 128, 1365,
	130, 129, 1889, 79, 2363, 31, 2349, 2350, 2355, 30,
	98, 2081, 173, 173, 2364, 2372, 97, 2361, 96, 173,
	95, 94, 93, 2318, 92, 91, 2384, 818, 762, 764,
	2382, 2371, 173, 90, 89, 2385, 818, 818, 88, 87,
	1109, 86, 85, 84, 83, 1247, 82, 1281, 81, 2387,
	504, 1282, 1282, 2388, 2393, 2394, 501, 78, 1058, 173,
	572, 173, 2319, 2320, 173, 77, 1107, 28, 24, 102,
	23, 74, 73, 26, 16, 747, 2419, 10, 20, 2421,
	57, 2409, 2408, 58, 2420, 56, 55, 2425, 1503, 54,
	753, 12, 173, 50, 1247, 49, 2423, 47, 46, 1279,
	45, 44, 2414, 1108, 2435, 2083, 8, 2437, 2436, 173,
	101, 2082, 839, 2448, 2454, 173, 41, 40, 843, 100,
	2452, 113, 39, 110, 2459, 112, 2457, 2458, 2456, 173,
	2453, 109, 111, 2422, 1280, 42, 114, 106, 2468, 2466,
	107, 108, 105, 104, 37, 585, 2472, 1281, 1281, 36,
	35, 34, 2476, 2081, 2, 1, 2475, 0, 0, 0,
	1059, 393, 0, 0, 2484, 0, 2483, 393, 393, 2488,
	2489, 393, 0, 0, 0, 0, 1568, 0, 0, 1568,
	0, 0, 604, 71, 0, 0, 0, 1852, 0, 0,
	1280, 0, 0, 393, 1858, 1859, 0, 0, 461, 1581,
	1770, 1771, 1866, 1788, 1789, 1790, 0, 0, 1871, 1872,
	1874, 1876, 1877, 1243, 1063, 0, 2147, 393, 462, 1884,
	747, 819, 63, 1887, 0, 0, 979, 980, 981, 982,
	983, 393, 819, 0, 0, 1066, 992, 0, 0, 1280,
	0, 1208, 0, 1208, 71, 508, 1000, 0, 393, 0,
	0, 1061, 1911, 1785, 0, 0, 1109, 393, 0, 1921,
	1064, 0, 578, 0, 552, 465, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 1689,
	0, 0, 580, 0, 0, 0, 1246, 0, 470, 2286,
	1837, 0, 1689, 0, 466, 0, 0, 0, 565, 0,
	0, 573, 0, 64, 0, 0, 0, 0, 1776, 0,
	1279, 0, 0, 1243, 1243, 579, 0, 735, 71, 0,
	1246, 467, 0, 0, 0, 0, 2312, 393, 119, 66,
	0, 67, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 469, 553, 132, 0, 0, 1791, 0, 0,
	0, 459, 0, 0, 99, 0, 0, 0, 0, 0,
	1054, 1054, 0, 0, 0, 0, 1279, 585, 1786, 1246,
	0, 0, 0, 134, 820, 0, 0, 1994, 0, 0,
	0, 0, 0, 0, 0, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 1079, 0,
	0, 0, 0, 0, 0, 0, 1836, 0, 0, 133,
	0, 0, 0, 0, 0, 1279, 0, 126, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 1195, 0, 0,
	1246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1787, 0, 118, 554, 747, 0, 1213, 0, 1213,
	0, 0, 468, 0, 0, 0, 0, 2399, 393, 0,
	0, 0, 0, 0, 1568, 0, 1246, 1246, 0, 0,
	819, 0, 0, 758, 1568, 1246, 1246, 0, 0, 0,
	0, 0, 2415, 2416, 2417, 0, 0, 0, 2078, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 1503, 0,
	0, 585, 585, 0, 0, 0, 0, 471, 1246, 0,
	0, 0, 0, 0, 0, 0, 0, 1581, 1108, 1208,
	577, 0, 555, 0, 0, 0, 2114, 0, 1782, 1783,
	1784, 0, 0, 1781, 1779, 1780, 1772, 1773, 1774, 1775,
	1777, 1778, 0, 0, 393, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 2140, 0, 0, 1359, 0, 1364, 0, 0,
	0, 0, 2142, 1371, 1503, 1503, 1503, 0, 0, 0,
	0, 0, 0, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 0, 1413, 0, 1415, 1416,
	1417, 1418, 0, 0, 0, 2165, 0, 0, 0, 0,
	573, 0, 0, 820, 1108, 1441, 0, 0, 0, 0,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 1483, 0, 0, 1499, 0, 1511, 1513, 1518,
	1521, 1522, 1523, 819, 0, 0, 0, 0, 1246, 0,
	393, 1109, 0, 758, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 0, 1568, 758, 0, 0, 2197, 2198,
	1581, 1282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2078, 758, 0, 0, 0, 0,
	2231, 0, 2232, 0, 393, 2234, 2235, 0, 393, 0,
	2239, 734, 0, 0, 0, 1282, 0, 0, 2078, 0,
	758, 1615, 0, 2078, 0, 0, 0, 734, 0, 0,
	1571, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 565, 753,
	0, 0, 0, 0, 0, 1108, 0, 0, 0, 0,
	0, 0, 0, 0, 1282, 0, 0, 1109, 0, 988,
	1108, 991, 0, 1503, 1503, 0, 0, 1281, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 820, 0, 0, 0,
	1581, 1281, 2293, 0, 0, 2295, 0, 819, 819, 0,
	0, 820, 0, 393, 0, 1282, 2078, 0, 0, 0,
	0, 0, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
	1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
	1503, 2327, 1503, 0, 2078, 0, 0, 0, 0, 393,
	1281, 1282, 1282, 0, 0, 1645, 758, 0, 0, 1246,
	1282, 1282, 0, 0, 2140, 2140, 753, 753, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 0, 0,
	0, 0, 0, 0, 2360, 0, 819, 819, 0, 1568,
	0, 0, 0, 1282, 0, 71, 1208, 0, 1109, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 1109, 0, 1246, 1108, 0, 0, 0,
	0, 2376, 2377, 0, 0, 0, 0, 0, 393, 0,
	0, 0, 0, 1243, 0, 0, 0, 0, 0, 0,
	0, 2392, 0, 0, 0, 0, 820, 1281, 1281, 0,
	0, 0, 0, 0, 0, 0, 1281, 1281, 0, 0,
	820, 820, 0, 0, 1246, 0, 0, 1243, 2407, 0,
	758, 0, 0, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2078, 0, 0, 1281,
	1692, 753, 1694, 0, 747, 0, 0, 0, 0, 0,
	0, 2360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1708, 0, 0, 1243, 0, 758, 0,
	0, 0, 0, 0, 393, 0, 1710, 1711, 0, 0,
	820, 0, 1716, 0, 0, 0, 0, 0, 2465, 820,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1735, 71, 0, 0, 0, 1109,
	0, 1742, 0, 0, 1746, 0, 1067, 1243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1726, 1727, 0,
	0, 1760, 38, 565, 0, 0, 565, 565, 0, 0,
	0, 0, 0, 39, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1243, 1243, 0, 42, 0, 0, 0,
	0, 0, 1243, 1243, 0, 992, 0, 0, 0, 0,
	0, 0, 1518, 1518, 1518, 0, 0, 0, 48, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	0, 0, 573, 0, 0, 1243, 0, 991, 1054, 0,
	0, 0, 0, 585, 1793, 1794, 1795, 59, 0, 0,
	0, 0, 0, 0, 60, 0, 61, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 734, 734, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1857, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1882, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1894, 1914, 71, 0, 0, 0, 0, 0, 71,
	0, 0, 1503, 0, 1282, 0, 0, 0, 1905, 0,
	0, 0, 0, 0, 1932, 0, 0, 1195, 0, 0,
	0, 0, 0, 0, 64, 0, 1195, 0, 0, 0,
	0, 585, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 119,
	66, 0, 67, 0, 0, 1243, 1954, 0, 0, 0,
	1282, 1371, 0, 0, 0, 132, 0, 1958, 1503, 0,
	1959, 0, 459, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 1964, 0, 0, 0, 0, 1956, 0, 0,
	0, 1973, 0, 0, 134, 0, 0, 0, 0, 1977,
	1281, 0, 1932, 0, 0, 0, 0, 0, 0, 1282,
	0, 0, 0, 1960, 1961, 71, 0, 71, 0, 0,
	0, 0, 2001, 0, 0, 0, 2003, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 71, 0, 126, 0,
	0, 0, 71, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 2034,
	2035, 0, 0, 0, 118, 0, 0, 0, 2041, 2042,
	2043, 0, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 0, 2028, 0, 436, 2054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 2075, 39, 0, 0, 941,
	942, 0, 961, 962, 963, 971, 972, 973, 0, 42,
	0, 0, 0, 0, 0, 964, 71, 0, 0, 0,
	0, 0, 944, 0, 0, 975, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 1243, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 943, 0, 0, 0,
	0, 0, 958, 0, 585, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 60, 0, 61,
	0, 0, 0, 0, 1645, 734, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	2149, 0, 1243, 0, 2152, 2153, 63, 0, 0, 2155,
	0, 0, 0, 0, 0, 991, 2157, 949, 2159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2166, 0, 0, 968, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1243, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 2175, 0, 0,
	0, 966, 0, 39, 121, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 42, 64, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 965, 0, 0, 0, 43, 0, 48, 0,
	734, 0, 119, 66, 0, 67, 0, 0, 2221, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 132, 51,
	735, 735, 0, 53, 735, 459, 0, 59, 99, 0,
	124, 0, 0, 0, 60, 0, 61, 0, 0, 0,
	960, 0, 0, 0, 2233, 0, 0, 134, 2237, 0,
	0, 0, 0, 0, 62, 0, 969, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 71, 0, 2269, 2270, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 71, 127, 0,
	71, 0, 0, 0, 0, 0, 2282, 0, 0, 0,
	573, 0, 2285, 0, 0, 0, 0, 437, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 955, 956, 957,
	970, 0, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 2277, 0, 0, 64, 0, 0, 0, 0, 1812,
	65, 0, 0, 0, 0, 0, 2317, 0, 0, 0,
	0, 0, 0, 2302, 0, 0, 0, 0, 72, 119,
	66, 0, 67, 0, 68, 0, 125, 0, 0, 0,
	0, 69, 2301, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 99, 0, 0, 0, 2335,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2366, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 0, 0, 2354, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 0, 2381, 0,
	0, 0, 0, 0, 118, 0, 0, 4, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2411, 0, 2434, 2434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 2434,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 1645, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 735, 339,
	340, 341, 0, 185, 342, 2434, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 735, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 0, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 0, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 71, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2343, 0, 175, 176, 1111, 177, 1112,
	1113, 1114, 1115, 330, 1116, 1117, 1118, 1119, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 1120, 182,
	337, 338, 183, 184, 1121, 1122, 339, 340, 341, 1123,
	185, 342, 1124, 822, 1125, 186, 187, 188, 0, 189,
	1126, 190, 191, 192, 1127, 685, 193, 194, 195, 1128,
	1129, 1131, 1130, 1132, 1133, 1134, 196, 197, 394, 198,
	343, 199, 344, 345, 1135, 200, 1136, 201, 1137, 202,
	1138, 1139, 203, 204, 1140, 205, 1141, 991, 1142, 346,
	206, 207, 208, 347, 348, 1143, 686, 1144, 209, 210,
	349, 350, 351, 0, 211, 1145, 212, 1146, 1147, 687,
	1148, 213, 352, 1149, 353, 1150, 0, 214, 215, 216,
	217, 354, 355, 689, 1151, 356, 221, 1152, 218, 1153,
	688, 219, 357, 220, 358, 359, 360, 361, 362, 1154,
	363, 1155, 690, 222, 223, 224, 691, 225, 226, 227,
	1156, 229, 228, 1157, 364, 692, 230, 693, 1158, 231,
	1159, 1160, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 1161, 1162, 1163, 366, 242,
	367, 243, 244, 1164, 245, 1165, 1166, 246, 1167, 1168,
	247, 368, 695, 248, 696, 369, 249, 250, 251, 252,
	253, 1169, 254, 370, 255, 371, 256, 1170, 257, 258,
	259, 260, 261, 372, 262, 263, 1171, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 1172,
	276, 697, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 1173, 288, 374, 287, 289, 290, 1174, 291, 280,
	281, 292, 698, 293, 375, 376, 294, 1175, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 1176, 302,
	1177, 303, 304, 305, 306, 307, 308, 309, 1178, 379,
	380, 381, 1179, 1180, 310, 311, 382, 383, 1181, 312,
	313, 314, 315, 1182, 1183, 316, 317, 318, 319, 1184,
	320, 1185, 384, 321, 322, 323, 385, 386, 1186, 1187,
	324, 1188, 1189, 1190, 1191, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 1561, 0,
	0, 0, 0, 0, 0, 0, 0, 1562, 175, 176,
	1111, 177, 1112, 1113, 1114, 1115, 330, 1116, 1117, 1118,
	1119, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 1120, 182, 337, 338, 183, 184, 1121, 1122, 339,
	340, 341, 1123, 185, 342, 1124, 822, 1125, 186, 187,
	188, 0, 189, 1126, 190, 191, 192, 1127, 685, 193,
	194, 195, 1128, 1129, 1131, 1130, 1132, 1133, 1134, 196,
	197, 394, 198, 343, 199, 344, 345, 1135, 200, 1136,
	201, 1137, 202, 1138, 1139, 203, 204, 1140, 205, 1141,
	0, 1142, 346, 206, 207, 208, 347, 348, 1143, 686,
	1144, 209, 210, 349, 350, 351, 0, 211, 1145, 212,
	1146, 1147, 687, 1148, 213, 352, 1149, 353, 1150, 0,
	214, 215, 216, 217, 354, 355, 689, 1151, 356, 221,
	1152, 218, 1153, 688, 219, 357, 220, 358, 359, 360,
	361, 362, 1154, 363, 1155, 690, 222, 223, 224, 691,
	225, 226, 227, 1156, 229, 228, 1157, 364, 692, 230,
	693, 1158, 231, 1159, 1160, 232, 0, 233, 234, 235,
	237, 365, 236, 694, 238, 239, 241, 240, 1161, 1162,
	1163, 366, 242, 367, 243, 244, 1164, 245, 1165, 1166,
	246, 1167, 1168, 247, 368, 695, 248, 696, 369, 249,
	250, 251, 252, 253, 1169, 254, 370, 255, 371, 256,
	1170, 257, 258, 259, 260, 261, 372, 262, 263, 1171,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 1172, 276, 697, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 1173, 288, 374, 287, 289, 290,
	1174, 291, 280, 281, 292, 698, 293, 375, 376, 294,
	1175, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 1176, 302, 1177, 303, 304, 305, 306, 307, 308,
	309, 1178, 379, 380, 381, 1179, 1180, 310, 311, 382,
	383, 1181, 312, 313, 314, 315, 1182, 1183, 316, 317,
	318, 319, 1184, 320, 1185, 384, 321, 322, 323, 385,
	386, 1186, 1187, 324, 1188, 1189, 1190, 1191, 325, 326,
	327, 328, 329, 0, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2193, 175, 176, 1111, 177, 1112, 1113, 1114, 1115,
	330, 1116, 1117, 1118, 1119, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 1120, 182, 337, 338, 183,
	184, 1121, 1122, 339, 340, 341, 1123, 185, 342, 1124,
	822, 1125, 186, 187, 188, 0, 189, 1126, 190, 191,
	192, 1127, 685, 193, 194, 195, 1128, 1129, 1131, 1130,
	1132, 1133, 1134, 196, 197, 394, 198, 343, 199, 344,
	345, 1135, 200, 1136, 201, 1137, 202, 1138, 1139, 203,
	204, 1140, 205, 1141, 0, 1142, 346, 206, 207, 208,
	347, 348, 1143, 686, 1144, 209, 210, 349, 350, 351,
	0, 211, 1145, 212, 1146, 1147, 687, 1148, 213, 352,
	1149, 353, 1150, 0, 214, 215, 216, 217, 354, 355,
	689, 1151, 356, 221, 1152, 218, 1153, 688, 219, 357,
	220, 358, 359, 360, 361, 362, 1154, 363, 1155, 690,
	222, 223, 224, 691, 225, 226, 227, 1156, 229, 228,
	1157, 364, 692, 230, 693, 1158, 231, 1159, 1160, 232,
	0, 233, 234, 235, 237, 365, 236, 694, 238, 239,
	241, 240, 1161, 1162, 1163, 366, 242, 367, 243, 244,
	1164, 245, 1165, 1166, 246, 1167, 1168, 247, 368, 695,
	248, 696, 369, 249, 250, 251, 252, 253, 1169, 254,
	370, 255, 371, 256, 1170, 257, 258, 259, 260, 261,
	372, 262, 263, 1171, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 1172, 276, 697, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 1173, 288,
	374, 287, 289, 290, 1174, 291, 280, 281, 292, 698,
	293, 375, 376, 294, 1175, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 1176, 302, 1177, 303, 304,
	305, 306, 307, 308, 309, 1178, 379, 380, 381, 1179,
	1180, 310, 311, 382, 383, 1181, 312, 313, 314, 315,
	1182, 1183, 316, 317, 318, 319, 1184, 320, 1185, 384,
	321, 322, 323, 385, 386, 1186, 1187, 324, 1188, 1189,
	1190, 1191, 325, 326, 327, 328, 329, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 175, 176, 1111, 177, 1112, 1113, 1114,
	1115, 330, 1116, 1117, 1118, 1119, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 1120, 182, 337, 338,
	183, 184, 1121, 1122, 339, 340, 341, 1123, 185, 342,
	1124, 822, 1125, 186, 187, 188, 0, 189, 1126, 190,
	191, 192, 1127, 685, 193, 194, 195, 1128, 1129, 1131,
	1130, 1132, 1133, 1134, 196, 197, 394, 198, 343, 199,
	344, 345, 1135, 200, 1136, 201, 1137, 202, 1138, 1139,
	203, 204, 1140, 205, 1141, 0, 1142, 346, 206, 207,
	208, 347, 348, 1143, 686, 1144, 209, 210, 349, 350,
	351, 0, 211, 1145, 212, 1146, 1147, 687, 1148, 213,
	352, 1149, 353, 1150, 0, 214, 215, 216, 217, 354,
	355, 689, 1151, 356, 221, 1152, 218, 1153, 688, 219,
	357, 220, 358, 359, 360, 361, 362, 1154, 363, 1155,
	690, 222, 223, 224, 691, 225, 226, 227, 1156, 229,
	228, 1157, 364, 692, 230, 693, 1158, 231, 1159, 1160,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 1161, 1162, 1163, 366, 242, 367, 243,
	244, 1164, 245, 1165, 1166, 246, 1167, 1168, 247, 368,
	695, 248, 696, 369, 249, 250, 251, 252, 253, 1169,
	254, 370, 255, 371, 256, 1170, 257, 258, 259, 260,
	261, 372, 262, 263, 1171, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 1172, 276, 697,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 1173,
	288, 374, 287, 289, 290, 1174, 291, 280, 281, 292,
	698, 293, 375, 376, 294, 1175, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 1176, 302, 1177, 303,
	304, 305, 306, 307, 308, 309, 1178, 379, 380, 381,
	1179, 1180, 310, 311, 382, 383, 1181, 312, 313, 314,
	315, 1182, 1183, 316, 317, 318, 319, 1184, 320, 1185,
	384, 321, 322, 323, 385, 386, 1186, 1187, 324, 1188,
	1189, 1190, 1191, 325, 326, 327, 328, 329, 1460, 0,
	623, 612, 613, 610, 611, 602, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 1457, 177,
	0, 0, 0, 0, 640, 605, 0, 0, 0, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 0, 200, 0, 201, 0,
	202, 1458, 0, 654, 204, 0, 205, 0, 0, 0,
	596, 206, 207, 208, 641, 642, 619, 686, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 652, 0, 353, 0, 0, 214, 215,
	216, 217, 648, 650, 689, 0, 356, 221, 0, 218,
	0, 688, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 653, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 694, 238, 239, 241, 240, 591, 0, 620, 649,
	242, 673, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 695, 248, 696, 643, 249, 250, 251,
	252, 253, 0, 254, 644, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 674, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 597, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 637, 291,
	280, 281, 292, 698, 293, 675, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 676, 298, 299, 645, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 677, 678, 0, 0, 310, 311, 646, 647, 618,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	638, 320, 0, 384, 321, 322, 323, 385, 679, 1456,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 592, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 588, 589, 1459, 623, 612, 613, 610, 611,
	602, 598, 1454, 0, 0, 0, 0, 601, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	586, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 132, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 698, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 134, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 821, 679, 0, 0, 324, 0, 0, 0,
	126, 325, 326, 327, 328, 329, 592, 127, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 0,
	0, 574, 601, 623, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 132, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 698, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 134, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	821, 679, 0, 0, 324, 0, 0, 0, 126, 325,
	326, 327, 328, 329, 592, 127, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 623, 612, 613,
	610, 611, 602, 0, 994, 0, 0, 0, 0, 0,
	601, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 686, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 132,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	698, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 134, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 821, 679, 0, 0, 324, 0,
	0, 0, 126, 325, 326, 327, 328, 329, 592, 127,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 623, 612, 613, 610, 611, 602, 0, 994, 0,
	0, 0, 0, 0, 601, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	1514, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	1519, 687, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 216, 217, 648, 650, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 1515, 653, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 597, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 698, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 1516, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 582, 601, 623,
	612, 613, 610, 611, 602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 586, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 686, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 216,
	217, 648, 650, 689, 0, 356, 221, 0, 218, 0,
	688, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 653, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 584, 0, 246, 0, 0,
	247, 368, 695, 248, 696, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 698, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 623, 612, 613, 610, 611, 602, 0,
	598, 0, 0, 0, 0, 0, 601, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	2123, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 698, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 1055, 623, 612,
	613, 610, 611, 602, 598, 0, 0, 0, 0, 0,
	601, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 640, 605, 0, 0, 0, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 608, 639, 659, 660, 341, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 632,
	633, 635, 0, 634, 636, 196, 197, 394, 198, 661,
	199, 662, 663, 0, 200, 0, 201, 0, 202, 0,
	0, 654, 204, 0, 205, 0, 0, 0, 596, 206,
	207, 208, 641, 642, 619, 686, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 652, 0, 353, 0, 0, 214, 215, 216, 217,
	648, 650, 689, 0, 356, 221, 1373, 218, 0, 688,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 653, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 694,
	238, 239, 241, 240, 591, 0, 620, 649, 242, 673,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 695, 248, 696, 643, 249, 250, 251, 252, 253,
	0, 254, 644, 255, 371, 256, 1372, 257, 258, 259,
	260, 261, 674, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 597, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 592,
	0, 0, 0, 0, 0, 590, 0, 0, 0, 0,
	588, 589, 623, 612, 613, 610, 611, 602, 0, 598,
	0, 0, 0, 0, 0, 601, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 640, 605, 0, 0,
	0, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 608, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 586, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 596, 206, 207, 208, 641, 642, 619, 686,
	0, 209, 210, 664, 665, 666, 0, 211, 0, 212,
	0, 0, 687, 0, 213, 652, 0, 353, 0, 0,
	214, 215, 216, 217, 648, 650, 689, 0, 356, 221,
	0, 218, 0, 688, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 653, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 694, 238, 239, 241, 240, 591, 0,
	620, 649, 242, 673, 243, 244, 0, 245, 584, 0,
	246, 0, 0, 247, 368, 695, 248, 696, 643, 249,
	250, 251, 252, 253, 0, 254, 644, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 674, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 698, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 592, 0, 0, 0, 0, 0, 590,
	0, 0, 0, 0, 588, 589, 623, 612, 613, 610,
	611, 602, 0, 598, 0, 0, 0, 0, 0, 601,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	640, 605, 0, 0, 0, 178, 179, 180, 331, 655,
	333, 656, 181, 657, 658, 0, 182, 337, 338, 183,
	184, 608, 639, 659, 660, 341, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 661, 199, 662,
	663, 0, 200, 0, 201, 0, 202, 0, 0, 654,
	204, 0, 205, 0, 0, 0, 596, 206, 207, 208,
	641, 642, 619, 686, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 652,
	0, 353, 0, 0, 214, 215, 216, 217, 648, 650,
	689, 0, 356, 221, 0, 218, 0, 688, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 690,
	222, 223, 224, 691, 225, 226, 227, 0, 229, 228,
	0, 653, 692, 230, 693, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 694, 238, 239,
	241, 240, 591, 0, 620, 649, 242, 673, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 695,
	248, 696, 643, 249, 250, 251, 252, 253, 0, 254,
	644, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	674, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 597, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 637, 291, 280, 281, 292, 698,
	293, 675, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 676, 298, 299, 645, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 677, 678, 0,
	0, 310, 311, 646, 647, 618, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 638, 320, 0, 384,
	321, 322, 323, 385, 679, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 592, 0, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 588, 589,
	0, 0, 0, 0, 0, 998, 1449, 598, 0, 0,
	0, 0, 0, 601, 623, 612, 613, 610, 611, 602,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 640, 605,
	0, 0, 0, 178, 179, 180, 331, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 608,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 586,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 596, 206, 207, 208, 641, 642,
	619, 686, 0, 209, 210, 664, 665, 666, 0, 211,
	0, 212, 0, 0, 687, 0, 213, 652, 0, 353,
	0, 0, 214, 215, 216, 217, 648, 650, 689, 0,
	356, 221, 0, 218, 0, 688, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 690, 222, 223,
	224, 691, 225, 226, 227, 0, 229, 228, 0, 653,
	692, 230, 693, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 694, 238, 239, 241, 240,
	591, 0, 620, 649, 242, 673, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 695, 248, 696,
	643, 249, 250, 251, 252, 253, 0, 254, 644, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 674, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 697, 277, 278, 597,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 698, 293, 675,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 676,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 677, 678, 0, 0, 310,
	311, 646, 647, 618, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 679, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 592, 0, 0, 0, 0,
	0, 590, 0, 0, 0, 0, 588, 589, 623, 612,
	613, 610, 611, 602, 0, 598, 0, 0, 0, 0,
	0, 601, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 640, 605, 0, 0, 0, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 608, 639, 659, 660, 341, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 632,
	633, 635, 0, 634, 636, 196, 197, 394, 198, 661,
	199, 662, 663, 0, 200, 0, 201, 0, 202, 0,
	0, 654, 204, 0, 205, 0, 0, 0, 596, 206,
	207, 208, 641, 642, 619, 686, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 652, 0, 353, 0, 0, 214, 215, 216, 217,
	648, 650, 689, 0, 356, 221, 0, 218, 0, 688,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 653, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 694,
	238, 239, 241, 240, 591, 0, 620, 649, 242, 673,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 695, 248, 696, 643, 249, 250, 251, 252, 253,
	0, 254, 644, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 674, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 597, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 592,
	0, 0, 0, 0, 0, 590, 0, 0, 0, 0,
	588, 589, 623, 612, 613, 610, 611, 602, 0, 598,
	2031, 0, 0, 0, 0, 601, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 640, 605, 0, 0,
	0, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 608, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 0, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 596, 206, 207, 208, 641, 642, 619, 686,
	0, 209, 210, 664, 665, 666, 0, 211, 0, 212,
	0, 0, 687, 0, 213, 652, 0, 353, 0, 0,
	214, 215, 216, 217, 648, 650, 689, 0, 356, 221,
	0, 218, 0, 688, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 653, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 694, 238, 239, 241, 240, 591, 0,
	620, 649, 242, 673, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 695, 248, 696, 643, 249,
	250, 251, 252, 253, 0, 254, 644, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 674, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 698, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 1980, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 592, 0, 0, 0, 0, 0, 590,
	0, 0, 0, 0, 588, 589, 623, 612, 613, 610,
	611, 602, 0, 598, 0, 0, 0, 0, 0, 601,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	640, 605, 0, 0, 0, 178, 179, 180, 331, 655,
	333, 656, 181, 657, 658, 0, 182, 337, 338, 183,
	184, 608, 639, 659, 660, 341, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 661, 199, 662,
	663, 0, 200, 0, 201, 0, 202, 0, 0, 654,
	204, 0, 205, 0, 0, 0, 596, 206, 207, 208,
	641, 642, 619, 686, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 652,
	0, 353, 0, 0, 214, 215, 216, 217, 648, 650,
	689, 0, 356, 221, 0, 218, 0, 688, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 690,
	222, 223, 224, 691, 225, 226, 227, 0, 229, 228,
	0, 653, 692, 230, 693, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 694, 238, 239,
	241, 240, 591, 0, 620, 649, 242, 673, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 695,
	248, 696, 643, 249, 250, 251, 252, 253, 0, 254,
	644, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	674, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 597, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 637, 291, 280, 281, 292, 698,
	293, 675, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 676, 298, 299, 645, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 677, 678, 0,
	0, 310, 311, 646, 647, 618, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 638, 320, 0, 384,
	321, 322, 323, 385, 679, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 592, 0, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 588, 589,
	623, 612, 613, 610, 611, 602, 0, 598, 1970, 0,
	0, 0, 0, 601, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 640, 605, 0, 0, 0, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 685, 193, 194, 195,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 0, 200, 0, 201, 0,
	202, 0, 0, 654, 204, 0, 205, 0, 0, 0,
	596, 206, 207, 208, 641, 642, 619, 686, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 652, 0, 353, 0, 0, 214, 215,
	216, 217, 648, 650, 689, 0, 356, 221, 0, 218,
	0, 688, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 653, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 694, 238, 239, 241, 240, 591, 0, 620, 649,
	242, 673, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 695, 248, 696, 643, 249, 250, 251,
	252, 253, 0, 254, 644, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 674, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 597, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 637, 291,
	280, 281, 292, 698, 293, 675, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 676, 298, 299, 645, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 677, 678, 0, 0, 310, 311, 646, 647, 618,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	638, 320, 0, 384, 321, 322, 323, 385, 679, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 592, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 588, 589, 1055, 623, 612, 613, 610, 611,
	602, 598, 0, 0, 0, 0, 0, 601, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 1519, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 698, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 1564, 601, 623, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 698, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 1528,
	601, 623, 612, 613, 610, 611, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 216, 217, 648, 650, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 653, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 597, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 698, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 1526, 601, 623,
	612, 613, 610, 611, 602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 686, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 216,
	217, 648, 650, 689, 0, 356, 221, 0, 218, 0,
	688, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 653, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 695, 248, 696, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 698, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 1510, 601, 623, 612, 613,
	610, 611, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 686, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	698, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 1498, 601, 623, 612, 613, 610, 611,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 698, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 1496, 601, 1488, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 1491, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 1492, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 1493,
	1490, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 597, 279,
	0, 283, 284, 285, 1494, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 698, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 1489, 329, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 1485,
	601, 1488, 612, 613, 610, 611, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 1491, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 652, 0, 353, 0, 0, 214,
	1492, 216, 217, 648, 650, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 653, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 1493, 1490, 237,
	365, 236, 694, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 597, 279, 0, 283,
	284, 285, 1494, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 698, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	1489, 329, 592, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 623, 612, 613, 610, 611,
	602, 0, 598, 0, 0, 0, 0, 0, 601, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 698, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 623,
	612, 613, 610, 611, 602, 0, 598, 1444, 0, 0,
	0, 0, 601, 0, 0, 175, 176, 1360, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 686, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 216,
	217, 648, 650, 689, 0, 356, 221, 0, 218, 0,
	688, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 653, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 695, 248, 696, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 698, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 765, 601, 623, 612, 613,
	610, 611, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 686, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	698, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 763, 601, 623, 612, 613, 610, 611,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 640,
	605, 0, 0, 0, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 698, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 592, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 623,
	612, 613, 610, 611, 602, 0, 598, 0, 0, 0,
	0, 0, 601, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 640, 605, 0, 0, 0, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 685, 193, 194, 2433, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 686, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 216,
	217, 648, 650, 689, 0, 356, 221, 0, 218, 0,
	688, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 653, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 695, 248, 696, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 698, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 2432, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 623, 612, 613, 610, 611, 602, 0,
	598, 0, 0, 0, 0, 0, 601, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 640, 605, 0,
	0, 0, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 698, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 592, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 623, 612, 613,
	610, 611, 602, 0, 598, 0, 0, 0, 0, 0,
	601, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 640, 605, 0, 0, 0, 178, 179, 180, 2431,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 685, 193, 194, 2433, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 686, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 216, 217, 648,
	650, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	698, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 2432,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 623, 612, 613, 610, 611, 602, 0, 598, 0,
	0, 0, 0, 0, 601, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 640, 605, 0, 0, 0,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 216, 217, 648, 650, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 653, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 0, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 1508, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 698, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 623, 612, 613, 610, 611, 602, 1506, 0,
	0, 0, 0, 1504, 1505, 0, 0, 0, 175, 176,
	0, 177, 1507, 0, 0, 0, 640, 605, 601, 0,
	0, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 0, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 0, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 641, 642, 619, 686,
	0, 209, 210, 664, 665, 666, 0, 211, 0, 212,
	0, 0, 687, 0, 213, 652, 0, 353, 0, 0,
	214, 215, 216, 217, 648, 650, 689, 0, 356, 221,
	0, 218, 0, 688, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 653, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 694, 238, 239, 241, 240, 0, 0,
	620, 649, 242, 673, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 695, 248, 696, 643, 249,
	250, 251, 252, 253, 0, 254, 644, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 674, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 1508, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 698, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 623, 612, 613, 610, 611, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 1507, 0, 0, 0, 640, 605, 601,
	0, 0, 178, 179, 180, 0, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 2433, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 216, 217, 648, 650, 0, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 0, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 0, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 2432, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	175, 176, 0, 177, 598, 0, 0, 0, 640, 0,
	601, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	639, 339, 340, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 641, 642,
	0, 686, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 687, 0, 213, 652, 0, 353,
	0, 0, 214, 215, 216, 217, 648, 650, 689, 0,
	356, 221, 0, 218, 0, 688, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 690, 222, 223,
	224, 691, 225, 226, 227, 0, 229, 228, 0, 653,
	692, 230, 693, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 694, 238, 239, 241, 240,
	0, 0, 0, 649, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 695, 248, 696,
	643, 249, 250, 251, 252, 253, 0, 254, 644, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 697, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 698, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 646, 647, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 0, 324, 814, 0, 817, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 2080, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 822, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 686, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 689, 0, 356, 221, 0, 218, 0, 688,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 364, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 694,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 695, 248, 696, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	132, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 698, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 134,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 821, 386, 0, 0, 324,
	574, 0, 172, 126, 325, 326, 327, 328, 329, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 118,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 738,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 132, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 134, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 821,
	386, 0, 0, 324, 0, 172, 0, 126, 325, 326,
	327, 328, 329, 0, 127, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 732, 0, 1077, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 738, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 132, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 134, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 821, 386, 0, 0, 324, 574, 0, 172,
	126, 325, 326, 327, 328, 329, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 732, 0, 1077, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 132, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	134, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 821, 386, 0, 0,
	324, 1828, 0, 172, 126, 325, 326, 327, 328, 329,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	118, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	738, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 0, 324, 731, 0, 172, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 732, 0, 737, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 738, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 0, 0, 324, 0,
	172, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 732, 0, 737, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 738, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	0, 324, 0, 172, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 732,
	0, 737, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 0, 324, 0, 0, 172, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 1193, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 623, 612,
	613, 610, 611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 1646, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 0, 0, 659, 660, 341, 0, 185,
	342, 0, 822, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 685, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 661,
	199, 662, 663, 0, 200, 0, 201, 0, 202, 0,
	0, 654, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 619, 686, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 689, 0, 356, 221, 0, 218, 0, 688,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 364, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 694,
	238, 239, 241, 240, 0, 0, 620, 366, 242, 673,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 695, 248, 696, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 674, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 382, 383, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 679, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 0, 0, 324, 0,
	172, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 1995, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 872, 0, 817, 876, 0, 0, 0, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 1080, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 822, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	686, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 364, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 698, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 817, 876, 324, 0, 0, 874, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 822, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 685, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 686,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 687, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 689, 0, 356, 221,
	0, 218, 0, 688, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 364, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 694, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 695, 248, 696, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 698, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 479, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 168, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 167, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 165, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 171, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 168, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 167, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 817, 876, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	171, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 822,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 685, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 686, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	364, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 698, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 168, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 167, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 817, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 171, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 822, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 685,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	686, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 364, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 698, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 171, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 1584, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 1582, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 1623, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 1587,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 356, 221, 1621,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 1586,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 1622, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	1584, 185, 342, 0, 0, 1579, 186, 187, 188, 0,
	189, 1582, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 1587, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 1578, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 1586, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 1585, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	792, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 738,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 744, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 746, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 738, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 740, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 742, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 738, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 411, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 410, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 409, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 1567, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 172, 2141, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 172, 2141, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 2138, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 738, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 1349, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 1347, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 1329, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 0, 505, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 851, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 507,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 502,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 1207,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 1206, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	0, 505, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 851, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 507, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 502, 380, 381, 0, 0, 310, 852,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 505, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 496, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 507, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 835, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 502, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 810, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 809,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 0, 807, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 806, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 803,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 802, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	0, 800, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 799, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 796, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 795, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 784, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 782, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 781, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 778, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 776, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	772, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 774, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 750, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 752, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 748, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 505, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 496,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 495, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 507, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 497, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 498, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 502, 380,
	381, 0, 0, 310, 500, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 487, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 488, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 0,
	485, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 0, 477, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 434, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 1875, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 1873, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 1862, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 488,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 1217, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 0,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 714, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	941, 942, 0, 961, 962, 963, 971, 972, 973, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 975, 0, 941, 942,
	0, 961, 962, 963, 971, 972, 973, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 943, 0, 0,
	0, 944, 0, 958, 975, 0, 941, 942, 0, 961,
	962, 963, 971, 972, 973, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 943, 0, 0, 0, 944,
	0, 958, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 942, 0, 961, 962, 963, 971, 972, 973,
	0, 0, 0, 943, 0, 0, 0, 964, 949, 958,
	0, 0, 0, 0, 944, 0, 0, 975, 0, 941,
	942, 0, 961, 962, 963, 971, 972, 973, 968, 976,
	0, 0, 0, 0, 0, 964, 949, 0, 943, 0,
	0, 0, 944, 0, 958, 975, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 976, 0, 0,
	0, 0, 966, 0, 949, 0, 943, 0, 959, 0,
	0, 0, 958, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 976, 0, 0, 0, 0,
	966, 0, 0, 965, 0, 0, 959, 0, 0, 949,
	0, 0, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 968,
	976, 965, 0, 0, 959, 0, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 960, 0, 0, 0, 0, 0, 968, 976, 965,
	0, 0, 0, 966, 0, 0, 0, 969, 0, 959,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 965, 969, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 955, 956,
	957, 970, 960, 954, 952, 953, 945, 946, 947, 948,
	950, 951, 0, 0, 0, 0, 0, 0, 969, 0,
	1811, 0, 0, 967, 0, 0, 955, 956, 957, 970,
	960, 954, 952, 953, 945, 946, 947, 948, 950, 951,
	0, 0, 0, 0, 0, 0, 969, 0, 1810, 0,
	0, 967, 0, 0, 955, 956, 957, 970, 0, 954,
	952, 953, 945, 946, 947, 948, 950, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 1762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 955,
	956, 957, 970, 0, 954, 952, 953, 945, 946, 947,
	948, 950, 951, 0, 0, 0, 0, 2404, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 955, 956, 957,
	970, 0, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 0, 0, 941, 942, 2357, 961, 962, 963, 971,
	972, 973, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 975,
	0, 941, 942, 0, 961, 962, 963, 971, 972, 973,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	943, 0, 0, 0, 944, 0, 958, 975, 0, 941,
	942, 0, 961, 962, 963, 971, 972, 973, 0, 0,
	0, 0, 0, 0, 0, 964, 0, 0, 943, 0,
	0, 0, 944, 0, 958, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 942, 0, 961, 962, 963,
	971, 972, 973, 0, 0, 0, 943, 0, 0, 0,
	964, 949, 958, 0, 0, 0, 0, 944, 0, 0,
	975, 0, 941, 942, 0, 961, 962, 963, 971, 972,
	973, 968, 976, 0, 0, 0, 0, 0, 964, 949,
	0, 943, 0, 0, 0, 944, 0, 958, 975, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	976, 0, 0, 0, 0, 966, 0, 949, 0, 943,
	0, 959, 0, 0, 0, 958, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 976, 0,
	0, 0, 0, 966, 0, 0, 965, 0, 0, 959,
	0, 0, 949, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 968, 976, 965, 0, 0, 959, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 960, 0, 0, 0, 0, 0,
	968, 976, 965, 0, 0, 0, 966, 0, 0, 0,
	969, 0, 959, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 965, 969, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 955, 956, 957, 970, 960, 954, 952, 953, 945,
	946, 947, 948, 950, 951, 0, 0, 0, 0, 2311,
	0, 969, 0, 0, 0, 0, 967, 0, 0, 955,
	956, 957, 970, 960, 954, 952, 953, 945, 946, 947,
	948, 950, 951, 0, 0, 0, 0, 2281, 0, 969,
	0, 0, 0, 0, 967, 0, 0, 955, 956, 957,
	970, 0, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 0, 0, 0, 0, 2276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 955, 956, 957, 970, 0, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 0, 0, 0, 0,
	2272, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	955, 956, 957, 970, 0, 954, 952, 953, 945, 946,
	947, 948, 950, 951, 0, 0, 941, 942, 2214, 961,
	962, 963, 971, 972, 973, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 975, 0, 941, 942, 0, 961, 962, 963,
	971, 972, 973, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 943, 0, 0, 0, 944, 0, 958,
	975, 0, 941, 942, 0, 961, 962, 963, 971, 972,
	973, 0, 0, 0, 0, 0, 0, 0, 964, 0,
	0, 943, 0, 0, 0, 944, 0, 958, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 942, 0,
	961, 962, 963, 971, 972, 973, 0, 0, 0, 943,
	0, 0, 0, 964, 949, 958, 0, 0, 0, 0,
	944, 0, 0, 975, 0, 941, 942, 0, 961, 962,
	963, 971, 972, 973, 968, 976, 0, 0, 0, 0,
	0, 964, 949, 0, 943, 0, 0, 0, 944, 0,
	958, 975, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 976, 0, 0, 0, 0, 966, 0,
	949, 0, 943, 0, 959, 0, 0, 0, 958, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 976, 0, 0, 0, 0, 966, 0, 0, 965,
	0, 0, 959, 0, 0, 949, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 968, 976, 965, 0, 0,
	959, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 960, 0, 0,
	0, 0, 0, 968, 976, 965, 0, 0, 0, 966,
	0, 0, 0, 969, 0, 959, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	965, 969, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 955, 956, 957, 970, 960, 954,
	952, 953, 945, 946, 947, 948, 950, 951, 0, 0,
	0, 0, 2180, 0, 969, 0, 0, 0, 0, 967,
	0, 0, 955, 956, 957, 970, 960, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 0, 0, 0, 0,
	2179, 0, 969, 0, 0, 0, 0, 967, 0, 0,
	955, 956, 957, 970, 0, 954, 952, 953, 945, 946,
	947, 948, 950, 951, 0, 0, 0, 0, 2144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 955, 956, 957, 970, 0,
	954, 952, 953, 945, 946, 947, 948, 950, 951, 0,
	0, 0, 0, 1998, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 955, 956, 957, 970, 0, 954, 952,
	953, 945, 946, 947, 948, 950, 951, 0, 0, 941,
	942, 1974, 961, 962, 963, 971, 972, 973, 0, 0,
	0, 0, 0, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 975, 0, 941, 942, 0,
	961, 962, 963, 971, 972, 973, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 943, 0, 0, 0,
	944, 0, 958, 975, 0, 941, 942, 0, 961, 962,
	963, 971, 972, 973, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 943, 0, 0, 0, 944, 0,
	958, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 942, 0, 961, 962, 963, 971, 972, 973, 0,
	0, 0, 943, 0, 0, 0, 964, 949, 958, 0,
	0, 0, 0, 944, 0, 0, 975, 0, 941, 942,
	0, 961, 962, 963, 971, 972, 973, 968, 976, 0,
	0, 0, 0, 0, 964, 949, 0, 943, 0, 1705,
	0, 944, 0, 958, 975, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 976, 0, 0, 0,
	0, 966, 0, 949, 2464, 943, 0, 959, 0, 0,
	0, 958, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 976, 0, 0, 0, 0, 966,
	0, 0, 965, 0, 0, 959, 0, 0, 949, 0,
	1802, 1706, 974, 1801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 968, 976,
	965, 0, 0, 959, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	960, 0, 0, 0, 0, 0, 968, 976, 965, 0,
	0, 0, 966, 0, 0, 0, 969, 0, 959, 0,
	0, 0, 0, 0, 2463, 974, 0, 0, 960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 965, 969, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 955, 956, 957,
	970, 960, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 0, 0, 0, 0, 1445, 0, 969, 0, 0,
	0, 0, 967, 0, 0, 955, 956, 957, 970, 960,
	954, 952, 953, 945, 946, 947, 948, 950, 951, 0,
	0, 1732, 0, 0, 0, 969, 0, 0, 0, 0,
	967, 0, 0, 955, 956, 957, 970, 0, 954, 952,
	953, 945, 946, 947, 948, 950, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 955, 956,
	957, 970, 0, 954, 952, 953, 945, 946, 947, 948,
	950, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 955, 956, 957, 970,
	0, 954, 952, 953, 945, 946, 947, 948, 950, 951,
	1543, 0, 0, 0, 0, 0, 941, 942, 0, 961,
	962, 963, 971, 972, 973, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 1542, 0, 0, 944,
	0, 0, 975, 0, 941, 942, 0, 961, 962, 963,
	971, 972, 973, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 943, 0, 0, 0, 944, 0, 958,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	942, 0, 961, 962, 963, 971, 972, 973, 0, 0,
	0, 943, 0, 0, 0, 964, 0, 958, 0, 0,
	0, 0, 944, 0, 0, 975, 0, 941, 942, 0,
	961, 962, 963, 971, 972, 973, 0, 0, 0, 0,
	0, 0, 0, 964, 949, 0, 943, 0, 0, 0,
	944, 0, 958, 975, 0, 941, 942, 0, 961, 962,
	963, 971, 972, 973, 968, 976, 0, 0, 0, 0,
	0, 964, 949, 0, 943, 1803, 0, 0, 944, 0,
	958, 975, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 976, 0, 0, 0, 0, 966, 0,
	0, 0, 943, 0, 959, 0, 0, 949, 958, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 968, 976, 965,
	0, 0, 959, 0, 0, 949, 0, 0, 0, 0,
	1808, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 976, 965, 571, 0,
	0, 966, 0, 949, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 960, 0, 0,
	0, 0, 0, 968, 976, 0, 0, 0, 0, 966,
	0, 0, 965, 969, 0, 959, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	965, 969, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 967, 0, 0, 955, 956, 957, 970, 960, 954,
	952, 953, 945, 946, 947, 948, 950, 951, 0, 0,
	0, 0, 1978, 0, 969, 0, 0, 0, 0, 967,
	0, 0, 955, 956, 957, 970, 960, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 955, 956, 957,
	970, 0, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 955, 956, 957, 970, 0,
	954, 952, 953, 945, 946, 947, 948, 950, 951, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 955, 956, 957, 970, 0, 954, 952,
	953, 945, 946, 947, 948, 950, 951, 941, 942, 0,
	961, 962, 963, 971, 972, 973, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 975, 0, 941, 942, 0, 961, 962,
	963, 971, 972, 973, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 943, 1761, 0, 0, 944, 0,
	958, 975, 0, 941, 942, 0, 961, 962, 963, 971,
	972, 973, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 943, 0, 0, 0, 944, 0, 958, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 942,
	0, 961, 962, 963, 971, 972, 973, 0, 0, 0,
	943, 0, 0, 0, 964, 949, 958, 0, 0, 0,
	0, 944, 0, 0, 975, 0, 941, 942, 0, 961,
	962, 963, 971, 972, 973, 968, 976, 0, 0, 0,
	0, 0, 0, 949, 0, 943, 0, 0, 0, 944,
	0, 958, 975, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 976, 0, 0, 0, 0, 966,
	0, 949, 0, 943, 0, 959, 0, 0, 0, 958,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 976, 0, 0, 0, 0, 966, 0, 0,
	965, 0, 0, 959, 0, 0, 949, 0, 0, 0,
	974, 0, 0, 1768, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 968, 976, 965, 0,
	0, 959, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 960, 0,
	0, 0, 0, 0, 968, 976, 965, 0, 0, 0,
	966, 0, 0, 0, 969, 0, 959, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 969, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 960, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 967, 0, 0, 955, 956, 957, 970, 960,
	954, 952, 953, 945, 946, 947, 948, 950, 951, 0,
	0, 48, 0, 0, 0, 969, 0, 0, 0, 0,
	967, 0, 0, 955, 956, 957, 970, 960, 954, 952,
	953, 945, 946, 947, 948, 950, 951, 0, 0, 0,
	59, 0, 0, 969, 0, 0, 0, 60, 967, 61,
	0, 955, 956, 957, 970, 0, 954, 952, 953, 945,
	946, 947, 948, 950, 951, 1770, 1771, 0, 1788, 1789,
	1790, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 1967, 0, 967, 0, 0, 955, 956, 957, 970,
	0, 954, 952, 953, 945, 946, 947, 948, 950, 951,
	0, 0, 1770, 1771, 0, 1788, 1789, 1790, 0, 0,
	0, 967, 0, 0, 955, 956, 957, 970, 1785, 954,
	952, 953, 945, 946, 947, 948, 950, 951, 941, 942,
	0, 961, 962, 963, 971, 972, 973, 0, 0, 0,
	0, 0, 1770, 1771, 0, 1788, 1789, 1790, 0, 0,
	0, 944, 0, 0, 975, 1785, 0, 64, 1966, 0,
	0, 0, 0, 0, 0, 0, 1770, 1771, 0, 1788,
	1789, 1790, 0, 1776, 0, 943, 0, 0, 0, 0,
	0, 958, 119, 66, 0, 67, 1770, 1771, 0, 1788,
	1789, 1790, 0, 0, 0, 1785, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 459, 0, 0, 99, 0,
	1776, 0, 1791, 0, 0, 0, 0, 0, 0, 1785,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 1792, 0, 1786, 0, 0, 949, 0, 0, 1785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1791,
	1776, 0, 0, 0, 0, 0, 968, 976, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	1786, 126, 0, 0, 1776, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1791,
	966, 0, 0, 0, 1776, 0, 959, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 1787, 0, 0, 0,
	1786, 0, 0, 1791, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1786, 0, 0, 0, 0, 0,
	0, 0, 0, 1787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1786, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1787, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 1782, 1783, 1784, 0, 0, 1781, 1779,
	1780, 1772, 1773, 1774, 1775, 1777, 1778, 1787, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1787, 0, 0,
	1782, 1783, 1784, 0, 0, 1781, 1779, 1780, 1772, 1773,
	1774, 1775, 1777, 1778, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 955, 956, 957, 970,
	0, 954, 952, 953, 945, 946, 947, 948, 950, 951,
	1782, 1783, 1784, 0, 0, 1781, 1779, 1780, 1772, 1773,
	1774, 1775, 1777, 1778, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1782, 1783, 1784, 1260, 0, 1781,
	1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778, 0, 0,
	0, 0, 0, 0, 1782, 1783, 1784, 0, 0, 1781,
	1779, 1780, 1772, 1773, 1774, 1775, 1777, 1778, 0, 0,
	1268, 1257, 1287, 1248, 1278, 1277, 0, 0, 1250, 1249,
	0, 0, 0, 0, 1289, 1288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1283, 0,
	1275, 1274, 0, 0, 0, 0, 0, 1260, 0, 0,
	1273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 1270,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1268, 1257, 1287, 1248, 1278, 1277, 0, 0, 1250, 1249,
	0, 0, 0, 1256, 1289, 1288, 0, 0, 0, 0,
	1261, 1259, 1262, 1263, 1264, 1265, 1266, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1283, 0,
	1275, 1274, 0, 0, 0, 0, 1252, 0, 0, 0,
	1273, 0, 0, 0, 0, 0, 0, 0, 1276, 0,
	0, 0, 1258, 0, 0, 0, 0, 0, 1272, 1270,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 0, 1256, 0, 1380, 1378, 1379, 1382, 1381,
	1261, 1259, 1262, 1263, 1264, 1265, 1266, 0, 1286, 0,
	0, 526, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 1267, 1254, 0, 0, 1252, 0, 0, 0,
	0, 0, 1291, 529, 0, 0, 0, 0, 1276, 0,
	0, 0, 1258, 0, 0, 1251, 0, 0, 1284, 1285,
	0, 0, 0, 0, 530, 0, 0, 0, 0, 532,
	0, 0, 0, 0, 538, 539, 0, 0, 548, 0,
	1255, 1269, 0, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 553, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 0, 0, 0, 551, 0, 0, 0, 0,
	0, 0, 1267, 1254, 0, 0, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1251, 0, 0, 1284, 1285,
	0, 535, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	1255, 0, 537, 544, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 528,
	545, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 0, 550,
	0, 0, 0, 556, 0, 0, 0, 0, 543, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 549,
}
var sqlPact = [...]int{

	3949, -1000, -13, -1000, -1000, -1000, 155, -1000, -1000, -1000,
	154, 153, 152, -1000, 151, 149, 148, 140, 138, 137,
	134, 133, 132, 130, 128, -1000, 127, -1000, -1000, -1000,
	-1000, 118, 117, 114, 108, 106, 103, 99, 1022, 22742,
	98, 93, 1213, 35261, 90, 83, 82, 81, 923, 78,
	77, 25944, 855, 1227, 76, 70, 68, 66, 64, 992,
	34942, 3782, 2506, 1107, 1563, 34620, 22420, 1539, 1401, 34298,
	-1000, -1000, 33976, 62, 61, 60, 57, 54, -1000, -1000,
	33654, 53, 51, 50, 49, 46, 43, 40, 36, 35,
	34, 31, 28, 26, 25, -1000, 21, 20, 19, 40899,
	18, 17, 16, 1106, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 129, -1000, 1018, 423, 2570,
	7825, 980, 972, 959, 955, 951, 37175, 35261, 14, -49,
	12, -1000, 1891, 624, 19503, 3949, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25622, 25300, 33332, 33010, 785, -1000, -20, 24018, 35261, -1000,
	157, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15191, 14833, 535, 157, -1000, -1000, -1000, -1000, -1000, 32688,
	-1000, 32366, 32044, 1444, 31722, -1000, -1000, -1000, -1000, 31400,
	-1000, -1000, 1859, 1579, 1571, 24978, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31081, 30759,
	30437, 30115, 29793, 480, -1000, -1000, -1000, 17884, -1000, -1000,
	-1000, -1000, 11, -1000, 8, -1000, 5, 1, 0, -2,
	-1000, -3, -4, -1000, -7, -8, -1000, -10, -14, 29471,
	1120, -1000, -1000, -18, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35261, -1000, 15879, -1000, 479, -1000, 1578, -1000,
	15879, -1000, 1118, -1000, -1000, -1000, -1000, -1000, 35261, -1000,
	-1000, -1000, -1000, -1000, -1000, 2077, 1143, 478, 29149, -1000,
	1511, -1000, 567, 740, -1000, -1000, -1000, 8858, 183, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1238, 21779,
	1342, 1885, 1836, 2076, 1336, 1819, 1813, 1755, 1747, 1700,
	2074, 914, 2072, 1709, 1014, 2070, 1672, 1376, 641, 2065,
	1573, 1567, -1000, -1000, -1000, -1000, 883, -1000, -1000, -1000,
	27220, -1000, -1000, 1018, -1000, -1000, -1000, 1254, 1883, 1883,
	1883, 1926, 275, 266, -1000, 129, -1000, 1372, -1000, 1142,
	-1000, -1000, -1000, -1000, -1000, 39873, -1000, -1000, 15879, 15879,
	15879, 15879, 15879, 1049, 503, -1000, 477, 476, 7123, -1000,
	-1000, 2049, -1000, -1000, -1000, 277, -1000, -1000, 15879, 157,
	-1000, -1000, -1000, -1000, 474, 2058, -1000, 622, -1000, -1000,
	-1000, 573, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1606, 473, 472, 471, -1000, 470, -1000, -1000, 469,
	467, 465, 458, 457, 456, 454, 453, 452, 450, 445,
	440, 438, 437, 436, 1024, -1000, 599, -1000, -1000, 599,
	599, -1000, 409, 409, 410, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 409, -1000, -1000, -1000, 550, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 430,
	1051, -1000, -1000, 1051, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 762, 36537, -23, 35261, -1000, 422, -23, -1000, -1000,
	421, -1000, 10936, 10936, -1000, -1000, -1000, -1000, -1000, 9560,
	1860, -1000, 3399, -201, 280, 548, -1000, 18531, 21446, -1000,
	-1000, 962, 1764, 619, -1000, 977, 1759, 510, -1000, 969,
	-1000, 1286, 1758, -53, 22098, 24018, -20, -32, -1000, -1000,
	-1000, 5412, 39873, -1000, 39873, -1000, 849, 20149, 157, -1000,
	-1000, -1000, -1000, 419, 1235, 577, -1000, 281, -1000, 28827,
	577, 1224, -1000, -1000, -1000, 27220, -1000, 35261, -1000, 35261,
	-1000, 873, -1000, 36856, 110, 1748, -1000, -1000, 110, 1744,
	-1000, 107, 1732, -1000, -1000, 1193, 1730, -1000, -32, 1727,
	-1000, -1000, 15879, -55, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 624, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 28505, 23380, 1328, 556, 39873,
	1982, 40743, 22098, 39873, 23380, -1000, -1000, 35261, -1000, 15879,
	-1000, 1981, 1452, -24, -1000, -1000, -1000, -1000, -1000, 1288,
	1431, 706, 1149, 8858, 8858, 1828, -1000, 172, 5743, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28183, -1000, -1000,
	-1000, 1130, 35261, -1000, -1000, 1594, -1000, 23380, 35261, -1000,
	35261, -1000, 35261, -1000, 35261, -1000, 35261, -1000, -1000, -1000,
	-1000, -1000, 446, -1000, 1585, -1000, -1000, 35261, -1000, 1276,
	-1000, -1000, -1000, 27864, 27542, -1000, 968, 811, -1000, -1000,
	111, -1000, -1000, 1254, -1000, 1151, 1385, 14475, 1334, 15879,
	129, -1000, -1000, 129, 129, 8514, -1000, -1000, -1000, 35261,
	-1000, 40653, 40743, 5743, 793, 15879, 15879, 15879, 15879, 15879,
	15879, 15879, 15879, 15879, 15879, 15879, 15879, 15879, 15879, 15879,
	15879, 15879, 15879, 15879, 15879, 15879, 15879, 1379, 15879, 761,
	15879, 15879, 15879, 15879, 1275, 1081, 406, 1152, -1000, 2025,
	2025, 2025, 39936, 39936, 374, 503, -1000, 15879, -1000, 44,
	14131, 266, 38889, -21, 6779, -1000, -1000, -1000, 9202, 587,
	39873, 157, 6076, -1000, 2048, 859, 1615, 1481, 418, 520,
	519, 518, 485, 15879, 15879, 13787, 13429, 13071, 16567, 12713,
	15879, 7467, 15879, 15879, 15879, 15879, 12355, 11997, -1000, 417,
	-1000, -1000, -1000, -1000, 2046, -1000, -1000, 2045, -1000, 792,
	789, 2043, -1000, -24, -1000, 36537, -1000, 35261, -23, 1978,
	35261, -1000, 92, -1000, 39356, -1000, 92, -58, -1000, 1400,
	1393, 19826, 1546, 1059, 1059, 1059, -1000, 411, 493, 548,
	4735, 11639, -1000, 26263, 1062, 182, 265, 18208, 1860, -1000,
	35261, -35, 946, -1000, 24656, 1907, 1889, 1872, 27220, 1946,
	44, 1557, 758, 27220, 756, 1918, 44, 1553, 753, 35261,
	5743, 545, -1000, 35261, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1548, -61, -1000, -1000, 24337, 1976, 1721,
	-1000, 1031, -1000, 1974, 35261, 1115, 1221, -1000, -1000, 807,
	1702, 582, 218, 1971, 218, 20473, -1000, 35261, -1000, 35261,
	-1000, -1000, 35261, -1000, 35261, -1000, 35261, 35261, -1000, 35261,
	35261, -63, 39873, 40102, 23699, 752, -1000, 618, 24337, 2398,
	-66, -1000, 820, -1000, -1000, -1000, -1000, 210, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 410, 1024, 409, 409, 409, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 550, -1000, -1000, 599, 599, 599,
	-1000, -1000, -81, -1000, 1541, 562, -68, 652, -24, -1000,
	1051, -1000, 1260, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2057, -1000, 2030, -1000,
	-1000, 2042, -27, -1000, -27, -1000, 5743, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35261, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 348, -1000, -1000, -1000, -1000, -1000, -1000,
	35261, 35261, 35261, -1000, 27220, -1000, -1000, -1000, -1000, 39873,
	-1000, 399, -1000, -1000, 39873, 898, 1413, -1000, 1413, -28,
	-1000, 39008, 1384, 35261, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 566, 448, 448, 773, 773,
	773, 773, 1987, 186, 324, 572, 249, 249, 249, 1132,
	468, 468, 249, 249, 249, 39936, 39908, 684, 15879, 15879,
	750, 1074, 406, 684, 15879, 684, 684, 684, 684, -1000,
	1083, -1000, -1000, -1000, -1000, 1535, 405, 16567, 16567, -1000,
	-1000, -1000, 7123, 16898, -1000, -1000, -1000, -1000, 402, 15879,
	-1000, 38917, -210, -69, -1000, -1000, 15879, -71, -76, -1000,
	-1000, 834, -1000, 15879, -1000, -15, 15879, 15879, 15879, 264,
	-1000, 263, -1000, 745, -1000, 744, 739, 729, -1000, 394,
	1053, 393, 388, 15879, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 39845, 37556, 262, -1000, 1533, -121, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 261, -1000, 260, -1000, 39817,
	-121, 259, 40252, -1000, 16567, 16567, 16567, 7123, 387, 257,
	-1000, 38980, -121, 39475, 11281, 11281, 11281, 256, 39447, 15879,
	-121, 37528, 37500, 3809, -79, -80, -1000, -85, -1000, 2041,
	-92, 254, 564, 560, 253, -1000, -1000, 385, -99, 582,
	10936, 19179, 5743, -1000, 582, 9560, -1000, 19826, 19826, 2400,
	1333, 19826, -1000, -1000, -1000, -1000, 26263, 512, 548, 26263,
	-1000, 2040, 1352, -105, -1000, -1000, -1000, 35261, 373, -1000,
	548, 251, 927, 35261, 35261, 35261, -1000, -1000, 1200, 36218,
	1191, 40743, 35261, -1000, 372, 371, 1373, 1366, 35261, 35261,
	35899, 35580, 35261, 915, 44, -1000, 370, 35261, 965, 35261,
	44, -1000, 369, 35261, 954, -1000, 1470, 1172, -1000, 845,
	1532, 35261, 250, -107, -30, 40743, -1000, -1000, -1000, -1000,
	-1000, 35261, 432, 35261, 44, 35261, 2054, 44, 35261, 1701,
	1784, 521, 35261, 1385, 15879, 963, -1000, 18855, 606, 35261,
	936, 89, -1000, -1000, -1000, 540, 35261, -1000, -1000, 110,
	110, -1000, 107, 1193, -32, -1000, 15879, -1000, -1000, 35261,
	22098, -108, -1000, -1000, 40743, -1000, 502, 653, -1000, 2039,
	575, 22098, 35261, 8858, 8858, -1000, 1404, -1000, -1000, 879,
	-1000, 973, -1000, -1000, -1000, -1000, 8858, -1000, -36, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 898, -1000, 15879, 2036,
	-1000, -1000, -1000, 8514, -1000, -1000, -1000, 35261, -141, 15879,
	684, 684, 15879, 16567, 16567, -1000, 684, -1000, -1000, -1000,
	-1000, -1000, 1525, 368, 15879, 40743, 40292, 40215, -114, -1000,
	10592, -33, -1000, 15879, -1000, 38545, -1000, -1000, 497, 1775,
	-1000, 15879, 39419, 246, 10248, -1000, 39384, -47, -47, -1000,
	2053, 1236, 1309, 1007, 884, 2035, -1000, 21123, 585, 1060,
	38517, 40653, 40743, -1000, 15879, -1000, -1000, 1522, 15879, -1000,
	40653, 40743, 16567, 16567, 16567, 16567, 16567, 16567, 16567, 16567,
	16567, 16567, 16567, 16567, 16567, 16567, 16567, 16567, 16567, 16567,
	16567, 1348, 16567, 2014, 2014, 2014, -34, 9904, -1000, 1542,
	1522, 15879, 15879, 40743, 231, 229, 225, -1000, 15879, -121,
	15879, 15879, 15879, -1000, -1000, -1000, 222, -1000, 2032, -1000,
	-1000, -1000, -1000, 2398, -1000, 1479, -1000, -90, -1000, 1860,
	-1000, 1479, -1000, -1000, 2400, -1000, 367, 15879, 19826, -1000,
	492, -1000, -115, -1000, 26263, -1000, 490, -207, -1000, 539,
	-1000, 548, 366, 35261, 26263, -1000, -1000, -1000, 725, 722,
	1684, -1000, 1190, -1000, 610, -1000, 895, 15879, 17560, 361,
	356, 1048, -1000, 1664, 1193, 1652, 1193, -1000, -35, 939,
	-1000, 15879, -1000, 696, -1000, -1000, 15879, -1000, 691, 575,
	1520, 815, -1000, 841, -1000, 1441, -1000, 24337, 352, 35261,
	349, -1000, 338, -1000, -1000, 337, 35261, 1325, 521, 23061,
	-1000, 577, 936, -1000, 39873, -1000, 936, 8169, 1874, -116,
	-1000, -1000, -1000, 582, 20473, 19826, 9560, -122, -1000, -1000,
	-1000, -1000, 39873, -36, 1847, 1847, -1000, 2021, -1000, 488,
	221, -1000, 26901, -1000, -36, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35261, 1069, 38482, -1000, 1900, 5743, 1977, 684,
	2500, 945, 15879, 40743, 40278, -123, 15879, 15879, -1000, -125,
	-1000, 15879, 486, 39873, -1000, -1000, -1000, 39873, 15879, 2052,
	15879, 215, 214, 213, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 212, -1000, -1000, 4368, 15879, 208, -1000, 206,
	204, 39873, 1542, 39873, -1000, -1000, 516, 516, 843, 843,
	843, 843, 2014, 952, 350, 1831, 1158, 1158, 1158, 1453,
	386, 386, 1158, 1158, 1158, 1518, 1270, 336, 40316, 15879,
	-128, -1000, -1000, -1000, 39873, 39873, 202, -1000, -1000, -1000,
	-121, 305, 38454, 38426, -1000, 201, 199, 1458, 1921, -1000,
	19826, 1458, -1000, 35261, 39873, -1000, -201, -1000, 2019, -1000,
	-1000, 1352, -1000, 5078, 26263, 35261, -130, -1000, 35261, 35261,
	35261, 1633, -1000, 1380, -1000, 38082, -131, -1000, 290, 1882,
	15879, -1000, -1000, 333, 17560, 35261, -1000, 1347, 1440, 646,
	35261, -1000, 35261, -1000, 35261, 35261, 35261, -133, 35261, -138,
	35261, -1000, 22098, 709, -1000, -1000, 1448, -1000, 17560, 330,
	35261, 24337, 1970, 17560, 1112, 1359, 521, 23061, -1000, 807,
	-1000, -1000, -43, -1000, 359, 44, 936, -1000, -46, -1000,
	537, 1838, -1000, 1834, 449, -1000, -1000, -50, 328, -1000,
	533, 531, -1000, -1000, -1000, -1000, 1900, 15879, 15879, 40278,
	-139, -1000, 684, 684, -1000, 38054, -1000, 39873, -1000, 39384,
	-1000, -1000, -1000, -1000, 1041, -1000, 38019, -1000, -1000, -1000,
	-1000, 16567, 1514, 327, 40743, 37991, -1000, -1000, 15879, -1000,
	-1000, -1000, -1000, 568, 15879, 15879, 1860, 568, -146, 548,
	-1000, -1000, -1000, 2015, -1000, -147, -1000, -1000, -1000, -1000,
	35261, -1000, 35261, -1000, 5743, 35261, 1485, 1183, -1000, -1000,
	1365, 325, 16567, 35261, -1000, 1052, 17560, 1900, 157, 5743,
	1900, 37963, 6076, -149, -152, 1181, -1000, 1162, 15879, -1000,
	40743, 1193, 1193, -1000, 689, 687, 667, -1000, 657, -1000,
	-57, 20804, 1045, -154, 17560, -155, 196, 44, -157, 35261,
	-1000, 521, 23061, -1000, 1784, 1792, 35261, 1857, -1000, -1000,
	323, 321, 313, -1000, 26582, 26582, 22098, 22098, -1000, 684,
	684, -1000, -1000, 193, 1060, 1917, -1000, 40336, 16567, 40743,
	-165, -1000, 37619, -1000, 35261, 39873, -121, -1000, -1000, 26263,
	351, -1000, -1000, 1179, -1000, -1000, 35261, 1187, -1000, -1000,
	15879, 40316, 312, 1441, 311, -1000, -1000, -1000, -1000, -1000,
	-1000, 1882, -15, -1000, 957, -1000, -1000, 39873, 1867, -1000,
	-1000, 35261, 35261, 309, 308, -1000, 304, 157, 35261, 1052,
	-168, -1000, 1441, -1000, 1052, 302, 23061, -1000, 1325, 777,
	-173, 35261, -1000, -1000, 6421, 22098, 22098, -1000, -174, -1000,
	-1000, -1000, 935, 15879, 40336, -175, -1000, -1000, -106, -1000,
	1969, -1000, -1000, -1000, -1000, 1632, 37591, 1267, 35261, -1000,
	35261, 1900, 190, 35261, 614, 5743, -1000, -1000, 15879, 15879,
	15879, 287, 1441, 1052, -1000, 1441, 17560, -1000, 1359, 872,
	-1000, 582, -1000, -176, -181, -1000, 189, 16223, 16223, -121,
	-1000, 35261, 286, 1618, -1000, 1082, 1057, 185, -182, -1000,
	-1000, 281, -1000, 15879, -1000, -183, -184, -47, 35261, -1000,
	1441, -1000, -189, -1000, 20473, -1000, 575, 575, -1000, -1000,
	-1000, 17229, 1105, 892, 38945, -1000, -1000, -1000, 35261, -1000,
	1109, 1086, 851, -1000, -1000, -1000, -1000, -1000, 1267, 39873,
	-1000, -1000, 91, -190, -1000, 1052, -162, -1000, -1000, 1990,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1799, -1000, 626,
	1209, 1209, 1082, 2052, 1171, 1441, -1000, 15535, -1000, 1999,
	-1000, -1000, 1332, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2465, 2464, 1650, 1832, 2461, 2460, 2459, 2454, 2453,
	2452, 2451, 2450, 2447, 2446, 2442, 2441, 2435, 2433, 2431,
	1827, 2429, 1810, 2427, 2426, 2420, 2416, 1808, 2411, 2410,
	2408, 2407, 2405, 2403, 1783, 2401, 1779, 2399, 2396, 2395,
	2393, 2390, 1775, 2388, 65, 106, 1772, 2387, 2384, 1754,
	1747, 1745, 2383, 1743, 2382, 2381, 1741, 1731, 2380, 58,
	2379, 2378, 2377, 1694, 1677, 2375, 2367, 2366, 139, 2360,
	1635, 2358, 2356, 2354, 2353, 2352, 2351, 2349, 2348, 2344,
	2343, 2335, 2334, 2332, 2331, 2330, 2328, 2326, 2320, 152,
	2319, 2315, 1617, 1594, 2313, 2312, 31, 26, 9, 45,
	25, 142, 2492, 134, 2311, 2310, 2308, 2305, 2304, 2302,
	19, 92, 93, 2294, 140, 2289, 2286, 53, 33, 24,
	17, 2283, 85, 2277, 2276, 929, 27, 2272, 2271, 125,
	2269, 28, 29, 1969, 143, 141, 110, 114, 2263, 2262,
	2259, 50, 111, 3, 2255, 2254, 11, 75, 12, 2248,
	56, 21, 2247, 2246, 120, 2243, 48, 86, 1486, 94,
	118, 413, 2242, 55, 13, 60, 2239, 2238, 148, 41,
	2236, 30, 77, 130, 2235, 47, 149, 117, 69, 121,
	123, 2234, 2231, 2230, 99, 2229, 108, 105, 2228, 2226,
	72, 2225, 91, 126, 2224, 2223, 2221, 84, 2219, 115,
	2218, 2215, 147, 136, 104, 10, 43, 64, 5, 1521,
	1511, 129, 82, 51, 54, 2212, 1947, 1989, 1379, 32,
	96, 79, 57, 97, 63, 80, 137, 38, 2210, 2209,
	131, 2204, 2200, 2199, 2198, 2196, 103, 2195, 2194, 23,
	2193, 62, 37, 42, 83, 35, 151, 119, 101, 146,
	87, 2192, 74, 113, 2191, 102, 2189, 2188, 1681, 107,
	2187, 2186, 2183, 1515, 1419, 1014, 124, 2169, 2167, 445,
	269, 2164, 2158, 78, 2155, 109, 98, 95, 132, 236,
	36, 2153, 112, 22, 2151, 49, 18, 0, 1023, 870,
	2150, 116, 68, 2146, 2139, 2138, 2136, 20, 1, 8,
	7, 6, 4, 76, 34, 2135, 2129, 122, 88, 71,
	2128, 145, 2126, 2125, 2123, 39, 2122, 16, 2120, 14,
	2117, 2098, 15, 2, 2092, 2090, 133, 2089, 90, 2085,
	1923, 2084, 138, 2083, 2081, 1627, 2080, 46, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 285, 285, 286, 286, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 160,
	160, 159, 159, 162, 162, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 254, 254, 253, 43, 43, 228, 228, 46,
	46, 185, 185, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 326, 326, 326, 330, 330, 331, 331, 332,
	332, 332, 332, 332, 332, 332, 328, 328, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 279, 277,
	277, 278, 278, 139, 139, 139, 139, 139, 140, 140,
	140, 284, 284, 284, 284, 284, 284, 283, 283, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	327, 327, 329, 329, 51, 51, 30, 30, 31, 31,
	141, 141, 142, 142, 207, 207, 207, 207, 143, 143,
	115, 115, 115, 206, 295, 295, 296, 296, 296, 296,
	296, 296, 297, 297, 297, 297, 297, 297, 297, 293,
	293, 294, 291, 291, 292, 292, 292, 292, 333, 333,
	205, 205, 146, 146, 300, 300, 300, 300, 298, 298,
	298, 298, 298, 301, 299, 302, 302, 302, 302, 302,
	240, 240, 240, 91, 91, 32, 32, 121, 121, 33,
	33, 29, 29, 29, 189, 189, 150, 150, 245, 245,
	245, 132, 132, 110, 110, 110, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 190, 190, 191,
	191, 52, 52, 56, 56, 61, 61, 90, 90, 90,
	90, 90, 90, 21, 21, 21, 21, 25, 25, 25,
	25, 60, 60, 335, 335, 128, 128, 128, 128, 129,
	129, 202, 202, 203, 203, 336, 336, 204, 204, 204,
	123, 122, 124, 124, 28, 28, 28, 117, 117, 118,
	118, 119, 119, 120, 120, 337, 337, 49, 49, 49,
	93, 93, 135, 135, 199, 199, 199, 201, 201, 200,
	200, 200, 175, 175, 175, 92, 92, 155, 155, 164,
	164, 165, 165, 251, 166, 166, 59, 59, 102, 102,
	100, 100, 100, 100, 100, 100, 101, 101, 101, 103,
	103, 103, 103, 103, 103, 103, 106, 106, 106, 107,
	107, 107, 105, 105, 308, 308, 308, 311, 311, 307,
	309, 309, 310, 310, 334, 334, 176, 176, 176, 145,
	144, 144, 148, 148, 147, 149, 149, 244, 244, 244,
	173, 173, 173, 173, 194, 194, 192, 192, 193, 193,
	195, 195, 196, 196, 196, 197, 197, 198, 198, 172,
	172, 224, 224, 104, 104, 104, 154, 154, 154, 156,
	156, 214, 214, 214, 215, 215, 213, 213, 213, 213,
	246, 246, 246, 246, 246, 246, 246, 246, 324, 324,
	324, 325, 325, 243, 243, 247, 247, 247, 247, 247,
	247, 241, 241, 241, 241, 242, 242, 252, 252, 179,
	179, 179, 179, 177, 177, 178, 178, 248, 248, 248,
	248, 174, 174, 249, 249, 249, 208, 208, 255, 255,
	255, 273, 273, 153, 153, 153, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 257, 257, 257, 257, 259,
	259, 259, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	272, 272, 272, 272, 272, 260, 260, 267, 267, 268,
	268, 269, 270, 261, 261, 262, 262, 263, 264, 271,
	271, 271, 271, 275, 275, 265, 265, 265, 265, 265,
	266, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 187, 187, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 218,
	218, 218, 218, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 303, 303, 303, 303, 303, 303,
	303, 303, 305, 305, 306, 306, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 312, 312, 313, 313,
	315, 315, 316, 316, 317, 318, 318, 318, 319, 320,
	320, 314, 314, 321, 321, 321, 322, 322, 323, 323,
	323, 323, 323, 230, 230, 230, 231, 231, 232, 238,
	238, 238, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 130, 130,
	130, 130, 130, 161, 161, 227, 227, 225, 225, 225,
	229, 229, 180, 180, 274, 274, 274, 274, 274, 274,
	274, 181, 181, 181, 188, 182, 182, 183, 183, 183,
	183, 183, 183, 221, 222, 184, 184, 184, 223, 223,
	233, 237, 237, 236, 235, 235, 234, 234, 211, 211,
	212, 212, 210, 209, 169, 169, 168, 168, 167, 167,
	338, 338, 239, 239, 170, 170, 171, 163, 163, 250,
	250, 250, 250, 157, 157, 137, 137, 158, 158, 133,
	133, 136, 136, 134, 134, 134, 134, 151, 151, 152,
	152, 131, 131, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 276, 276, 276, 226, 125, 125,
	125, 126, 126, 127, 127, 281, 281, 281, 282, 282,
	282, 282, 280, 280, 280, 280, 280, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 2, 3, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 1, 1, 3, 3,
	1, 1, 6, 6, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 358, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 134, 215, 221, 241, 243, 245, 252,
	-100, -102, 239, -54, -55, -63, -64, -65, -66, -94,
	263, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 266,
	-21, -25, -60, 304, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -103, -101, 355, 240,
	313, 35, 275, 61, 101, 247, 329, 336, -106, -104,
	-105, -107, 256, 321, 285, 359, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 2,
	285, 324, 83, 142, -326, 2, -158, 285, 83, -134,
	-125, 348, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 132, 133, 134, 135, 143, 146,
	148, 141, 158, 159, 160, 162, 163, 164, 167, 166,
	171, 174, 177, 179, 180, 181, 184, 182, 186, 187,
	189, 188, 194, 196, 197, 199, 202, 205, 208, 211,
	212, 213, 214, 215, 217, 219, 221, 223, 224, 225,
	226, 227, 229, 230, 232, 233, 234, 235, 236, 239,
	237, 238, 240, 241, 242, 243, 245, 247, 248, 250,
	264, 265, 276, 252, 253, 254, 255, 259, 257, 260,
	261, 263, 266, 268, 271, 274, 275, 277, 280, 281,
	278, 273, 284, 286, 287, 288, 289, 290, 291, 292,
	299, 300, 304, 305, 306, 307, 310, 311, 312, 313,
	315, 318, 319, 320, 325, 330, 331, 332, 333, 334,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 85, 87, 88, 104, 108, 109, 115,
	116, 117, 127, 129, 136, 137, 140, 147, 149, 150,
	151, 152, 153, 155, 169, 183, 193, 195, 206, 210,
	218, 220, 228, 249, 258, 269, 270, 279, 282, 294,
	295, 296, 301, 302, 317, 321, 322, 358, 358, 2,
	159, 225, -133, -125, 83, 358, 358, 358, 358, 285,
	2, 314, 324, -189, 83, 309, 358, 358, -125, 221,
	22, 2, 92, 146, 312, 311, 22, 217, 257, 287,
	289, 2, 358, 358, 358, 358, 358, 2, 324, 285,
	142, 83, 314, -125, 2, -45, 2, 355, -44, -4,
	-27, -36, -46, -42, -20, -22, -34, -50, -49, -51,
	-53, -57, -56, -59, -63, -64, -70, -92, -93, 263,
	-330, 2, 22, -331, -332, 69, 98, 125, 256, 146,
	92, 311, 285, 2, 159, 2, -125, 2, -326, 2,
	159, 2, -330, 2, -125, 2, -129, 2, 252, -125,
	358, 358, 358, 358, 358, 174, 55, 249, 260, -68,
	300, -67, 294, -279, -69, 2, -159, 184, -125, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 2, -89, 260, 34,
	55, 22, 60, 84, 126, 142, 143, 163, 65, 66,
	224, 174, 160, 299, 164, 261, 286, 300, 69, 315,
	290, 106, 4, 83, 184, 262, 294, 358, 358, 358,
	-334, 2, 285, -101, -103, -102, -147, -148, 308, 154,
	103, 204, -100, -102, 2, -308, -89, 260, 2, 55,
	22, -277, 2, -239, 200, -216, 89, -218, 346, 347,
	341, 190, 335, -230, -220, -233, 104, 249, 355, -133,
	-219, 361, 9, -305, -102, 29, -231, -232, 49, -125,
	7, 8, 5, 6, -131, -257, -226, -266, 303, 110,
	192, -303, -304, 4, -287, -281, -258, -268, -262, -265,
	155, 58, 75, 76, 79, 77, 80, 262, 314, 50,
	28, 108, 109, 210, 218, 282, 301, 302, 136, 193,
	137, 56, 127, 169, 97, 37, 39, 41, 42, 51,
	52, 85, 87, 88, 115, 116, 117, 147, 149, 150,
	151, 152, 153, 195, 228, 269, 279, 295, 296, 322,
	-288, -269, -270, -263, -264, 70, 111, 124, 145, 138,
	157, 161, 170, 172, 185, 207, 209, 246, 267, -271,
	-335, 2, 300, 300, 2, -335, 2, -335, 2, -128,
	2, 300, 297, -311, 229, -307, -125, -311, 358, 358,
	360, 358, -144, -145, 2, 22, 95, -171, 2, 355,
	-246, 2, 353, -248, -133, -102, -247, 355, 201, -3,
	2, -248, 136, -133, 2, -248, 136, -133, 2, -125,
	2, -136, 136, -133, 297, 360, -158, -151, -125, -210,
	-209, 357, -216, 2, -216, 2, 123, 355, -168, -169,
	-209, -210, 2, -159, 136, -125, 2, -159, 2, 142,
	-125, 136, 2, -125, 22, 123, 2, 156, 2, 156,
	2, -249, 2, -248, -160, 136, 2, -159, -160, 136,
	2, -137, 136, 2, -136, -125, 136, 2, -151, 136,
	2, -185, 355, -254, 2, -253, -282, 4, -287, -289,
	-288, 321, 58, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 260, 200, 360, -159, -216,
	-228, 355, 123, -216, 200, -125, 2, 264, 2, 355,
	-68, 53, 300, -203, 2, -204, -122, -123, -124, 158,
	223, 227, 334, 297, 340, 123, -277, -162, 357, -89,
	2, -285, 2, -283, 9, -282, 5, 264, 2, 224,
	261, 55, 123, 2, 2, -327, 2, 200, 123, 2,
	123, 2, 123, 2, 123, 2, 123, 2, 2, 224,
	261, 2, 120, 2, 299, 2, 2, 123, 2, 158,
	223, 276, 2, 285, 324, 2, 123, 123, 334, 2,
	-174, -248, -147, -148, -173, -192, -193, 173, 112, 198,
	-176, 22, 95, -176, -176, 44, 356, 356, -89, 264,
	2, 10, 11, 57, 33, 346, 347, 348, 349, 118,
	350, 351, 344, 345, 343, 338, 339, 340, 63, 178,
	251, 13, 14, 15, 26, 203, 172, 335, 138, 267,
	341, 16, 17, 18, 157, 36, 139, -130, -138, -216,
	-216, -216, -216, -216, 209, -167, -211, 353, -102, 355,
	355, -102, -216, -161, 355, 7, -102, -225, 353, -234,
	-216, -168, 355, 5, 355, 5, -312, 330, 120, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 220, -275,
	325, -275, -275, -259, 355, -259, -260, 355, -259, 331,
	336, 355, -202, -203, -202, 297, -129, 360, -311, -152,
	355, -171, -163, -250, -216, 348, -163, -170, -239, 70,
	-179, 161, 185, 124, 170, 246, 145, 7, -45, -213,
	361, 355, 348, -243, 336, -102, -247, 355, -246, -133,
	355, -112, 237, -111, 21, 23, 98, 319, 104, 273,
	291, 253, 237, 104, 237, 273, 291, 253, 237, 104,
	361, -285, -134, 360, -280, 348, 4, -287, -289, -288,
	-290, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 65, 69, 74, 75,
	77, 76, 78, 79, 80, 89, 91, 93, 95, 96,
	99, 101, 103, 110, 112, 120, 122, 123, 125, 128,
	130, 139, 142, 144, 154, 156, 165, 168, 173, 175,
	176, 190, 191, 192, 198, 200, 201, 203, 204, 216,
	222, 231, 244, 256, 262, 272, 283, 285, 293, 297,
	298, 303, 308, 309, 314, 316, 323, 324, 326, 327,
	328, 329, 277, 356, -157, -133, -169, 355, -146, 190,
	-121, -309, 329, -146, 355, -126, 136, 2, -125, -309,
	190, -249, -135, -133, -135, 263, -125, 30, -114, 360,
	48, 242, 104, -114, 104, -114, 360, 104, -114, 104,
	104, -161, -216, 356, 360, -326, -332, 69, 355, 30,
	-227, -255, -256, -258, -267, -261, -265, -266, 40, 46,
	45, 292, 183, 258, 270, 317, 140, 38, 199, 148,
	4, 147, 149, 150, 151, 152, 153, 269, 37, 228,
	116, 117, 115, 97, 88, 87, 195, 42, 41, -269,
	-270, -263, -264, 85, 295, 296, 155, 39, 52, 51,
	322, 279, -286, -285, -326, -279, -161, 30, -203, 2,
	-336, 360, 171, -140, 177, 189, 132, 201, 332, -284,
	5, 4, -226, -240, 89, 174, -266, 8, 347, -276,
	7, 346, -278, -277, -278, 73, 357, -280, -159, 22,
	265, 2, -279, -329, 120, -326, -279, -279, -279, -279,
	-279, 260, -45, 120, -125, 171, -279, 2, -279, 2,
	285, 142, 285, -114, 360, -173, -193, -192, -195, -216,
	22, -198, 114, 186, -216, -218, -101, -101, -101, -149,
	-244, -216, 222, 142, -279, -273, -255, -272, 233, 234,
	232, 236, 235, -255, -280, 294, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, 172, 138,
	267, 36, 139, -216, 297, -216, -216, -216, -216, 182,
	190, 192, 303, 110, 310, 95, 196, -338, 283, 32,
	-223, -102, 355, -238, 27, 272, 22, -230, 249, 355,
	-211, -216, -212, -161, 356, 356, 360, -161, -229, 354,
	-225, -237, -236, 326, 356, -161, 323, 22, 95, 348,
	2, 7, -186, 333, 181, 86, 133, 180, -187, 255,
	-313, 113, 128, 355, 356, 2, 356, 2, 356, 2,
	356, 2, -216, -216, -180, 2, -274, -161, 4, 333,
	181, 86, 133, 180, 255, -180, 2, -181, 2, -216,
	-161, -182, -217, -218, 346, 347, 341, 355, 249, -183,
	2, -216, -161, -216, 43, 168, 298, -184, -216, 123,
	-161, -216, -216, -216, -161, -161, 2, -161, 2, 355,
	7, 7, 294, 294, 7, -129, -307, 30, -151, -154,
	360, 123, 30, 4, -154, 360, 356, 161, 161, -246,
	-179, 161, -177, 207, -177, -177, -324, 355, 354, -243,
	-280, 353, 362, -161, 2, -242, -241, 30, -125, 205,
	356, -133, 360, 297, -190, 65, 59, -206, 136, 59,
	-291, -125, 65, -292, 54, 309, 222, 122, -190, 65,
	-190, 65, 65, -248, 33, -59, 123, 297, -248, 297,
	33, -59, 123, 297, -136, -280, -252, 337, -125, 123,
	356, 360, -141, -151, -142, -125, -207, -206, -293, -294,
	-291, 142, 309, 111, 30, 104, 214, 30, 200, 190,
	-117, 288, 104, -208, 327, -199, -59, 355, 89, 30,
	-199, -164, -165, -251, -166, -133, 355, -125, -159, -160,
	-160, -136, -137, -125, -151, 356, 360, -45, -253, 297,
	316, -142, -44, 356, 360, -153, 29, 353, -186, 355,
	-252, 360, 123, 340, 297, 356, 300, -204, -139, 227,
	271, 238, 259, 8, 7, 7, 360, -280, -328, -125,
	260, -45, -133, -136, -133, -248, -196, -276, 355, 347,
	-197, 249, 250, 360, -110, 31, 93, 162, -133, 334,
	-216, -216, 297, -338, 283, -223, -216, 182, 192, 303,
	110, 310, 95, 196, 123, 355, -217, -217, -161, -220,
	355, -161, 354, 364, 356, -216, 354, 354, 360, -235,
	-236, 99, -216, -148, 360, -147, -216, -161, -161, 356,
	356, 297, 297, 297, 297, 355, -318, 208, 355, 355,
	-216, 30, 360, 356, 123, 356, 356, -188, 216, 356,
	10, 11, 346, 347, 348, 349, 118, 350, 351, 344,
	345, 343, 338, 339, 340, 63, 178, 251, 13, 14,
	15, 157, 139, -217, -217, -217, -161, 355, 356, -221,
	-222, 123, 120, 30, -184, -184, -184, 356, 123, -161,
	360, 360, 360, 356, 356, 356, 7, 356, 360, 356,
	334, 334, 356, 355, 356, -208, -250, -156, 2, -246,
	-280, -208, -239, -246, -246, -178, 316, 200, 161, -246,
	-241, 356, -325, 7, -243, -242, 7, -215, -214, 121,
	188, 356, -125, 355, -243, 356, -111, -133, -125, -125,
	190, -206, 136, -116, 190, -255, -125, 355, 355, 162,
	162, -125, -125, 136, -125, 136, -125, -125, -112, 237,
	-59, 355, -133, 237, -125, -59, 355, -125, 237, -95,
	135, 196, 277, 123, -133, 356, 356, 360, -126, 142,
	-126, -59, -159, 5, -59, -133, 104, -118, 100, -337,
	340, -125, -194, -192, -216, -175, -201, 244, 200, -157,
	321, -125, -175, -155, 360, 123, 340, -157, -114, -114,
	-114, -114, -216, -328, -285, 356, -255, 353, 354, 7,
	7, -98, 329, -285, -328, -277, -277, -122, 307, 62,
	227, -277, 360, -197, -216, -244, -133, 361, -216, -216,
	-217, -217, 123, 355, -216, -227, 26, 26, 356, -161,
	356, 360, -212, -216, 356, -225, 101, -216, 293, 356,
	323, -148, -148, -148, 5, 181, 133, 180, -187, 180,
	-187, -187, 7, -319, -125, 355, 327, -147, 356, -273,
	-255, -216, -221, -216, -273, -255, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, 95, 190, 196, -217, 360,
	-161, 356, -222, -221, -216, -216, -255, 356, 356, 356,
	-161, -216, -216, -216, 356, 7, -44, -172, 128, -252,
	360, -172, -178, 355, -216, -246, 354, 356, 360, -242,
	354, 360, 363, 340, -243, 355, -151, -241, 297, 297,
	104, 190, 318, -295, -292, -216, -150, -245, -125, -306,
	355, -303, -304, -131, 355, 355, -109, 98, 263, -191,
	104, -114, 104, -114, 297, -190, 65, -161, 297, -161,
	297, -98, 123, 284, 277, -143, 141, -207, 355, -126,
	355, 355, -146, 355, -125, -119, 167, -337, -283, -309,
	-175, -175, -163, 191, 64, 356, -208, -165, -156, -239,
	356, -99, 71, -99, 7, 354, 356, -97, 202, -96,
	-125, 5, -125, 201, 356, -110, -280, 26, 26, -216,
	-227, 356, -216, -216, 356, -216, 354, -216, 5, -216,
	356, 356, 356, 356, -320, -125, -216, 356, 356, 356,
	-222, 123, 95, 196, 355, -216, 356, 356, 360, 356,
	356, 356, 356, -224, 130, 44, -246, -224, -151, -213,
	7, -214, -280, 353, -242, -151, 356, -125, -125, -206,
	104, -296, 65, -297, 57, 111, 69, 190, 192, 309,
	222, 54, 89, 231, 356, 356, 360, -132, -168, 57,
	-132, -216, 355, -150, -151, 190, 89, 190, 89, 82,
	305, -125, -125, -133, -125, -125, 356, -133, 356, -125,
	-286, 294, 139, -150, 355, -151, -141, 30, -150, 200,
	-120, 166, -337, -283, -117, -200, 355, 200, -59, -175,
	340, 82, 82, 354, 360, 355, 340, 340, -110, -216,
	-216, 356, 356, -148, -314, 213, 356, -217, 123, 355,
	-227, 356, -216, -315, 328, -216, -161, -315, 356, -243,
	7, 356, -206, -125, -280, -125, 111, 136, 192, 162,
	355, -217, -133, -205, -333, 68, 281, -245, -110, -280,
	-110, 356, -161, 356, 356, 192, 192, -216, -255, -114,
	-114, 297, 297, 297, 297, -219, -131, -125, 211, 356,
	-150, 356, 356, -59, 356, -133, -337, -283, -118, 96,
	-151, 65, -171, -102, 355, 355, 355, -96, -97, -285,
	-285, 356, -148, 44, -217, -227, 356, 356, -316, -317,
	-125, -242, 354, -297, -126, 190, -216, -127, 355, -143,
	355, -132, -148, 231, -113, 57, -125, -125, 355, 355,
	355, -133, -205, 356, -143, -205, 355, -283, -119, 311,
	191, 356, -125, -286, -286, 356, -321, 226, 250, -161,
	356, 360, 30, 104, 356, -300, 179, -125, -151, -110,
	356, -133, -108, 316, -280, -161, -161, -161, 355, -143,
	-205, -143, -150, -120, 263, -208, 356, 356, 356, -322,
	-323, 36, 306, 73, -216, -322, -317, -319, 111, -298,
	-301, -299, 200, 124, 212, 268, 356, 356, -146, -216,
	356, 356, -148, -151, -143, 356, -164, -98, -98, -323,
	219, 119, 249, 219, 119, -125, -299, 200, -301, 200,
	311, 92, -300, 356, 356, -205, -208, 26, -302, 187,
	242, 48, 263, -302, -298, -115, 48, 242, -143, -323,
	20, 192, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	636, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	557, 559, 561, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 672, -2, 683, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 649, 651,
	653, 655, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1240, 1167,
	1173, 1174, 1198, 1199, 1200, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 143, 145, 146,
	0, 0, 0, 1169, 1240, 152, 154, 156, 158, 0,
	164, 0, 0, 0, 0, 524, 161, 163, 253, 1299,
	255, 257, 0, 0, 0, 0, 167, 168, 169, 170,
	171, 172, 174, 176, 178, 180, 182, 183, 0, 0,
	0, 0, 0, 252, 250, 205, 206, 0, 235, 236,
	237, 238, 239, 241, 209, 211, 212, 214, 216, 218,
	220, 221, 223, 225, 226, 228, 230, 231, 233, 0,
	0, 259, 265, 266, 267, 269, 270, 271, 272, 273,
	274, 275, 0, 123, 0, 445, 248, 246, 0, 119,
	0, 554, 0, 261, 555, 556, 551, 552, 1326, 580,
	279, 281, 290, 292, 294, -2, -2, 1416, -2, 303,
	-2, 311, 1422, 0, 314, 315, 318, -2, 201, 340,
	342, 344, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 369, 371, 373, 374, 375, 0, 0,
	0, 379, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 378, 380, 381, 382, 0, 558, 560, 562,
	0, 514, 674, -2, 647, 648, -2, 0, 678, 678,
	678, 0, 0, 648, 646, 0, 282, 0, 284, 0,
	379, 287, 288, 319, 320, 1152, 1153, 877, 0, 0,
	0, 0, 0, 0, 969, 971, 1389, 1416, 0, 973,
	974, 0, 976, 978, 979, 0, 982, 983, 1137, 1169,
	1183, 1184, 1185, 1186, 0, 0, 1189, 0, 1191, 1192,
	1193, 1037, 993, -2, -2, 1181, 805, 806, 807, 808,
	-2, 1430, 997, 1000, 1003, 1006, 1007, 1010, 1011, 0,
	1373, 1390, 1391, 1412, 1413, 1421, 1425, 1426, 1397, 1409,
	1398, 1385, 1395, 1407, 1246, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1207, 839, 840, 845, 846, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 848,
	582, 564, 573, 582, 566, 567, 568, 569, 570, 571,
	572, 575, 0, 664, 1305, 667, 1180, 665, 650, 652,
	0, 654, 0, 0, 658, 680, 679, 713, 714, 0,
	662, 663, 673, 729, 767, 744, 735, 0, 0, 2,
	68, 0, 1397, 767, 70, 0, 1397, 767, 72, 0,
	77, 0, 1397, 1172, 0, 0, 263, 264, 1177, 1175,
	1176, 0, 147, 148, 149, 150, 0, 0, 1170, 1146,
	1144, 1145, 159, 493, 1397, -2, 516, 493, 520, -2,
	671, 1397, 596, 254, 256, 0, 166, 0, 609, 0,
	611, 0, 626, 773, 109, 1397, 186, 199, 109, 1397,
	189, 109, 1397, 192, 1165, 109, 1397, 195, 196, 1397,
	198, 249, 0, 0, -2, 242, 244, 1208, 1209, 1210,
	1211, -2, 1430, 240, 210, 213, 215, 217, 219, 222,
	224, 227, 229, 232, 234, -2, 0, 0, 0, 444,
	0, 0, 0, 553, 0, 579, 297, 0, 300, 0,
	302, 1384, -2, -2, 306, 583, 587, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 316, 202, 0, 376,
	377, 385, 386, 124, 125, 337, 338, 0, 389, 410,
	422, 0, 0, 393, 395, 443, 397, 0, 0, 399,
	0, 401, 0, 403, 0, 405, 0, 407, 409, 411,
	423, 413, 673, 415, 0, 417, 421, 0, 426, 0,
	428, 429, 430, 0, 0, 436, 0, 0, 383, 384,
	109, 771, -2, 0, 642, 692, 693, 0, 0, 0,
	0, 676, 677, 0, 0, 0, 638, 639, 283, 0,
	286, 0, 0, 0, 0, 1072, 1073, 1074, 1075, 1076,
	1077, 1080, 1081, 1078, 1079, 1082, 1083, 1084, 0, 0,
	0, 1085, 1086, 1087, 0, 0, 1089, 0, 1091, 0,
	0, 0, 0, 0, 0, 1151, 0, 0, 1088, 882,
	883, 884, 906, 907, 0, 970, 1148, 1141, 972, 0,
	0, -2, 1093, 0, 0, 975, 980, 981, 0, 0,
	1136, -2, 0, 1188, 0, 874, 1039, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 824, 842,
	853, 850, 849, 826, 0, 825, 823, 0, 827, 0,
	0, 0, 563, -2, 565, 0, 577, 0, 666, 0,
	0, 715, 718, 1157, 1161, 1162, 718, 0, 1154, 0,
	0, 0, 0, 764, 764, 764, 762, 738, 0, 744,
	0, 0, 768, 756, 0, -2, 735, 0, 0, 769,
	0, 78, 548, 88, 0, 548, 548, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 758, 1168, 0, 1142, 1143, 1212, 1213, 1214, 1215,
	1216, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 139, 0, 0, 1163, 1147, 451, 0, 0,
	515, 0, 670, 0, 0, 0, 1397, 523, 1201, 598,
	0, 777, 0, 612, 0, 0, 774, 0, 184, 0,
	107, 108, 0, 187, 0, 190, 0, 0, 193, 0,
	0, 0, 1093, 673, 0, 0, 268, 0, 0, 673,
	0, 1095, 785, 786, 787, 788, 789, 874, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 836, 0, 811, 811, 811, 828, 829, 837,
	838, 843, 844, 855, 856, 858, 860, 854, 854, 854,
	851, 852, 758, 126, 0, 0, 0, 0, -2, 308,
	0, 585, 0, 590, 328, 329, 330, 592, 593, 312,
	331, 332, 333, 334, 335, 336, 0, 510, 0, 512,
	1194, 0, 309, 321, 310, 313, 0, 203, 387, 388,
	390, 391, 392, 396, 0, 440, 398, 400, 402, 404,
	406, 414, 418, 673, 424, 427, 431, 432, 433, 434,
	0, 0, 0, 513, 0, 645, 690, 691, 696, 700,
	701, 704, 707, 708, 698, 877, 659, 660, 661, 684,
	685, 535, 0, 0, 285, 878, 781, 782, 830, 831,
	832, 833, 834, 879, 880, 0, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, -2, -2, -2, 898,
	899, 900, -2, -2, -2, 904, 905, -2, 1090, 1092,
	0, 1151, 0, -2, 0, -2, -2, -2, -2, 918,
	0, 920, 923, 925, 927, 0, 0, 0, 0, 1150,
	937, 1128, 0, 0, 1069, 1070, 1071, 922, 0, 0,
	1149, 1140, 0, 0, -2, 977, 0, 0, 0, 1099,
	1100, 1135, 1131, 0, 984, 683, 0, 0, 0, 0,
	991, 0, 1197, 861, 862, 863, 864, 865, 866, 875,
	1047, 0, 0, 0, 998, 999, 1001, 1002, 1004, 1005,
	1008, 1009, 0, 0, 0, 1015, 0, 1103, -2, -2,
	-2, -2, -2, -2, -2, 0, 1017, 0, 1019, 1093,
	1113, 0, 0, 940, 0, 0, 0, 0, 1416, 0,
	1022, 1093, 1121, 0, 0, 0, 0, 0, 1093, 0,
	1127, 0, 0, 0, 0, 0, 1033, 0, 1035, 0,
	0, 0, 0, 0, 0, 576, 668, 0, 0, 777,
	0, 0, 0, 1160, 777, 0, 1156, 0, 0, 0,
	0, 0, 759, 763, 760, 761, 0, 0, 744, 756,
	726, 0, 0, 0, 733, 734, 755, 0, 754, 743,
	-2, 0, 0, 0, 0, 0, 547, 90, 1397, 0,
	111, 0, 0, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 1171, 129, 0, 1178, 0,
	0, 0, 0, 0, 450, 1177, 452, 454, 455, 456,
	457, 1202, 0, 1202, 0, 0, 0, 0, 0, 0,
	600, 606, 0, 695, 0, 624, 614, 0, 0, 0,
	624, 628, 629, 631, 632, 0, 0, 775, 200, 109,
	109, 1166, 109, 109, 197, 251, 0, 207, 243, 0,
	0, 0, 245, 247, 0, 778, 780, 0, 790, 0,
	138, 0, 0, 0, 0, 301, 0, 584, 591, 0,
	325, 0, 327, 511, 1196, 1195, 0, 204, 442, 276,
	416, 419, 437, 438, 439, 772, 0, 702, 0, 0,
	699, 705, 706, 0, 687, 533, 534, 0, 0, 0,
	-2, -2, 0, 0, 0, 938, -2, 919, 921, 924,
	926, 928, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 1138, 1141, -2, 1094, 1097, 1098, 0, 0,
	1132, 0, 0, 0, 0, 682, 683, 683, 683, 990,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 1014, 0, 1016, 1018, 0, 0, 1020,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 943, 944, 945, 0, 0, 1021, 1119,
	1120, 0, 0, 0, 0, 0, 0, 1027, 0, 1126,
	0, 0, 0, 1031, 1032, 1034, 0, 809, 0, 835,
	857, 859, 847, 673, 1179, 710, 1158, 758, 717, 719,
	1159, 710, 1155, 746, 0, 748, 0, 0, 0, 750,
	0, 739, 0, 741, 756, 731, 0, 0, 724, 0,
	723, 744, 752, 0, 0, 770, 89, 537, 0, 0,
	0, 92, 1397, 100, 0, 465, 0, 0, 0, 0,
	0, 550, 101, 1397, 109, 1397, 109, 102, 79, 548,
	80, 0, 543, 0, 536, 81, 0, 545, 0, 138,
	0, 0, 140, 0, 1164, 459, 492, 0, 0, 1202,
	0, 448, 493, 517, 519, 0, 0, 602, 606, 0,
	605, 671, 624, 694, 776, 607, 624, 0, 0, 0,
	616, 613, 610, 777, 0, 0, 0, 0, 185, 188,
	191, 194, 1094, 258, 0, 0, 1096, 0, 783, 0,
	0, 118, 0, 127, 260, 298, 299, 304, 323, 324,
	326, 322, 0, 0, 0, 686, 535, 0, 881, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1129, 0,
	1064, 0, 0, 1140, -2, 1101, 1130, 1134, 0, 985,
	0, 0, 0, 0, 1190, 867, 868, 869, 870, 871,
	872, 873, 0, 1045, 1046, 1050, 0, 0, 996, 0,
	0, 1102, 1112, 1114, 941, 942, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, -2, -2, -2, 959,
	960, 961, -2, -2, -2, 0, 0, 0, 1115, 0,
	0, 1067, 1117, 1118, 1123, 1124, 0, 1024, 1025, 1026,
	1125, 0, 0, 0, 841, 0, 0, 712, 0, 716,
	0, 712, 747, 0, 766, 749, 729, 740, 0, 737,
	727, 0, 728, 0, 756, 0, 0, 736, 0, 0,
	0, 0, 110, 463, 482, 0, 0, 526, 532, 532,
	0, 994, 995, 0, 0, 0, 94, 0, 0, 0,
	0, 98, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 141, 446, 0, 453, 0, 0,
	0, 451, 0, 0, 0, 604, 606, 0, 597, 598,
	165, 608, 622, 623, 621, 0, 624, 630, 627, 633,
	0, 0, 120, 0, 0, 784, 791, 136, 1289, 134,
	131, 133, 277, 697, 703, 688, 535, 0, 0, -2,
	0, 931, -2, -2, 1063, 1094, 1139, 1133, 1187, 683,
	986, 988, 989, 876, 1052, 1049, 0, 1036, 1012, 1013,
	1111, 0, 0, 0, 0, 1094, 1066, 1023, 0, 1029,
	1030, 810, 669, 1041, 0, 0, 720, 1041, 0, 744,
	742, 725, 721, 0, 732, 0, 753, 539, 541, 91,
	0, 464, 0, 467, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 484, 491, 0, 535, 1182, 0,
	535, 0, 0, 0, 0, 0, 106, 0, 0, 549,
	0, 109, 109, 538, 0, 0, 0, 544, 0, 546,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	594, 606, 0, 599, 600, 0, 0, 0, 615, 625,
	0, 0, 0, 779, 0, 0, 0, 0, 689, -2,
	-2, 932, 1065, 0, 683, 0, 1038, -2, 0, 0,
	0, 1068, 0, 656, 0, 711, 709, 657, 765, 756,
	0, 751, 93, 0, 468, 469, 1202, 0, 472, 475,
	0, 477, 1204, 459, 0, 488, 489, 527, 528, 531,
	529, 532, 683, 486, 0, 95, 96, 105, 113, 97,
	103, 0, 0, 0, 0, 757, 0, 0, 0, 491,
	0, 481, 459, 449, 491, 0, 0, 601, 602, 0,
	0, 0, 634, 635, 0, 0, 0, 135, 0, 130,
	132, 987, 1055, 0, -2, 0, 967, 1028, 1040, 1042,
	0, 730, 722, 466, 470, 0, 0, 497, 0, 485,
	0, 535, 0, 0, 115, 0, 540, 542, 0, 0,
	0, 0, 459, 491, 447, 459, 0, 603, 604, 0,
	618, 777, 620, 0, 0, 137, 0, 0, 0, 1051,
	968, 0, 0, 0, 476, 502, 0, 0, 0, 530,
	985, 493, 99, 0, 112, 0, 0, 683, 0, 479,
	459, 521, 0, 595, 0, 619, 138, 138, 1048, 1053,
	1056, -2, 1357, 1237, 0, 1054, 1043, 1044, 0, 478,
	498, 499, 0, 494, 495, 496, 1203, 490, 497, 114,
	85, 87, 0, 0, 480, 491, 777, 121, 122, 0,
	1058, 1059, 1060, 1061, 1062, 471, 500, 0, 501, 0,
	0, 0, 502, 0, 462, 459, 617, 0, 503, 0,
	506, 507, 0, 504, 487, 458, 460, 461, 522, 1057,
	505, 508, 509,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 344, 3, 350, 345, 3,
	355, 356, 348, 346, 360, 347, 357, 349, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 364, 359,
	338, 340, 339, 3, 361, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 353, 3, 354, 351, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 362, 343, 363, 341,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 342, 57681, 352, 57682, 358, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1124
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex, "match full")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex, "match partial")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex, "match simple")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "no action")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "action set null")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "action set default")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = true
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = false
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = Ascending
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Descending
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2948
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2950
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.str = ""
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.str = ""
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3144
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = ReadOnly
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = ReadWrite
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.str = ""
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.str = ""
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "INSERT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			return helpWith(sqllex, "SELECT")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			return helpWith(sqllex, "VALUES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "TABLE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "SELECT")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			return helpWith(sqllex, "TABLE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3651
		{
			return unimplemented(sqllex, "cte")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = true
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = false
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = false
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = true
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			return helpWith(sqllex, "VALUES")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &From{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3912
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3957
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3994
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = nil
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.str = astFullJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.str = astLeftJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.str = astRightJoin
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.str = astInnerJoin
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4278
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4402
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4411
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = nil
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4572
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4604
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4644
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = year
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = month
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = day
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = hour
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = minute
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = month
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = hour
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = minute
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = minute
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = nil
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = second
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4739
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4774
		{
			return unimplemented(sqllex, "at tz")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5008
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5234
		{
			return unimplemented(sqllex, "variadic")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5235
		{
			return unimplemented(sqllex, "variadic")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5259
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			return unimplemented(sqllex, "func_application")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5276
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5280
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5308
		{
			return unimplemented(sqllex, "current role")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5348
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5358
		{
			return unimplemented(sqllex, "treat")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5395
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5404
		{
			return unimplemented(sqllex, "within group")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5405
		{
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5440
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.str = ""
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5502
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5504
		{
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5507
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5508
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5514
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5515
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5516
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5517
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5518
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = Any
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = Some
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = All
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = Plus
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = Minus
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = Mult
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = Div
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = Mod
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = Bitand
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = Bitor
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = Pow
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = Bitxor
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = LT
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = GT
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = EQ
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = LE
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = GE
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = NE
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = Like
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = NotLike
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = ILike
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = NotILike
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5882
		{
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5883
		{
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6045
		{
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6081
		{
			return unimplemented(sqllex, "func const")
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6090
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = DNull
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.str = ""
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
