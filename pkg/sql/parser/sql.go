// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PASSWORD = 57533
const PLACING = 57534
const POSITION = 57535
const PRECEDING = 57536
const PRECISION = 57537
const PREPARE = 57538
const PRIMARY = 57539
const PRIORITY = 57540
const RANGE = 57541
const READ = 57542
const REAL = 57543
const RECURSIVE = 57544
const REF = 57545
const REFERENCES = 57546
const RENAME = 57547
const REPEATABLE = 57548
const RELEASE = 57549
const RESTRICT = 57550
const RETURNING = 57551
const REVOKE = 57552
const RIGHT = 57553
const ROLLBACK = 57554
const ROLLUP = 57555
const ROW = 57556
const ROWS = 57557
const RSHIFT = 57558
const SAVEPOINT = 57559
const SEARCH = 57560
const SECOND = 57561
const SELECT = 57562
const SERIAL = 57563
const SERIALIZABLE = 57564
const SESSION = 57565
const SESSION_USER = 57566
const SET = 57567
const SHOW = 57568
const SIMILAR = 57569
const SIMPLE = 57570
const SMALLINT = 57571
const SMALLSERIAL = 57572
const SNAPSHOT = 57573
const SOME = 57574
const SPLIT = 57575
const SQL = 57576
const START = 57577
const STDIN = 57578
const STRICT = 57579
const STRING = 57580
const STORING = 57581
const SUBSTRING = 57582
const SYMMETRIC = 57583
const SYSTEM = 57584
const TABLE = 57585
const TABLES = 57586
const TEXT = 57587
const THEN = 57588
const TIME = 57589
const TIMESTAMP = 57590
const TIMESTAMPTZ = 57591
const TO = 57592
const TRAILING = 57593
const TRANSACTION = 57594
const TREAT = 57595
const TRIM = 57596
const TRUE = 57597
const TRUNCATE = 57598
const TYPE = 57599
const UNBOUNDED = 57600
const UNCOMMITTED = 57601
const UNION = 57602
const UNIQUE = 57603
const UNKNOWN = 57604
const UPDATE = 57605
const UPSERT = 57606
const USER = 57607
const USERS = 57608
const USING = 57609
const VALID = 57610
const VALIDATE = 57611
const VALUE = 57612
const VALUES = 57613
const VARCHAR = 57614
const VARIADIC = 57615
const VIEW = 57616
const VARYING = 57617
const WHEN = 57618
const WHERE = 57619
const WINDOW = 57620
const WITH = 57621
const WITHIN = 57622
const WITHOUT = 57623
const YEAR = 57624
const ZONE = 57625
const NOT_LA = 57626
const WITH_LA = 57627
const AS_LA = 57628
const POSTFIXOP = 57629
const UMINUS = 57630

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4933

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	307, 27,
	-2, 387,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 360,
	178, 360,
	209, 360,
	305, 360,
	307, 360,
	-2, 370,
	-1, 59,
	1, 363,
	178, 363,
	209, 363,
	305, 363,
	307, 363,
	-2, 369,
	-1, 68,
	1, 27,
	307, 27,
	-2, 387,
	-1, 394,
	1, 177,
	307, 177,
	-2, 894,
	-1, 430,
	153, 397,
	177, 397,
	-2, 366,
	-1, 433,
	153, 396,
	177, 396,
	-2, 364,
	-1, 557,
	153, 396,
	177, 396,
	-2, 367,
	-1, 613,
	304, 832,
	-2, 825,
	-1, 614,
	304, 833,
	-2, 826,
	-1, 620,
	5, 532,
	304, 532,
	-2, 987,
	-1, 644,
	5, 498,
	-2, 961,
	-1, 645,
	5, 526,
	304, 526,
	-2, 963,
	-1, 646,
	5, 506,
	-2, 964,
	-1, 647,
	5, 505,
	-2, 965,
	-1, 648,
	5, 526,
	304, 526,
	-2, 968,
	-1, 649,
	5, 526,
	304, 526,
	-2, 969,
	-1, 650,
	5, 527,
	-2, 972,
	-1, 651,
	5, 492,
	-2, 973,
	-1, 652,
	5, 492,
	-2, 974,
	-1, 653,
	5, 508,
	-2, 978,
	-1, 654,
	5, 493,
	-2, 983,
	-1, 655,
	5, 494,
	-2, 984,
	-1, 656,
	5, 495,
	-2, 985,
	-1, 657,
	5, 496,
	-2, 986,
	-1, 658,
	5, 492,
	-2, 990,
	-1, 659,
	5, 499,
	-2, 995,
	-1, 660,
	5, 497,
	-2, 998,
	-1, 661,
	5, 524,
	304, 524,
	-2, 1000,
	-1, 662,
	5, 528,
	-2, 1003,
	-1, 663,
	5, 530,
	-2, 1004,
	-1, 664,
	5, 523,
	304, 523,
	-2, 1008,
	-1, 917,
	97, 370,
	139, 370,
	153, 370,
	177, 370,
	181, 370,
	260, 370,
	-2, 644,
	-1, 925,
	304, 810,
	-2, 798,
	-1, 1129,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 567,
	-1, 1130,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 568,
	-1, 1131,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 569,
	-1, 1135,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 573,
	-1, 1136,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 574,
	-1, 1137,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 575,
	-1, 1140,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 580,
	-1, 1146,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 582,
	-1, 1149,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 587,
	-1, 1150,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 588,
	-1, 1151,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 589,
	-1, 1177,
	186, 716,
	-2, 719,
	-1, 1200,
	114, 732,
	304, 832,
	-2, 825,
	-1, 1201,
	114, 733,
	-2, 957,
	-1, 1202,
	114, 734,
	-2, 892,
	-1, 1203,
	114, 735,
	-2, 865,
	-1, 1204,
	114, 736,
	-2, 880,
	-1, 1205,
	114, 737,
	-2, 891,
	-1, 1206,
	114, 738,
	-2, 926,
	-1, 1356,
	97, 370,
	139, 370,
	153, 370,
	177, 370,
	181, 370,
	260, 370,
	-2, 445,
	-1, 1360,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 581,
	-1, 1361,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 583,
	-1, 1366,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 584,
	-1, 1385,
	186, 715,
	-2, 718,
	-1, 1550,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 585,
	-1, 1555,
	142, 0,
	-2, 599,
	-1, 1563,
	186, 717,
	-2, 720,
	-1, 1597,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 625,
	-1, 1598,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 626,
	-1, 1599,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 627,
	-1, 1603,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 631,
	-1, 1604,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 632,
	-1, 1605,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 633,
	-1, 1710,
	142, 0,
	-2, 600,
	-1, 1713,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 603,
	-1, 1714,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 605,
	-1, 1801,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 604,
	-1, 1802,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 606,
	-1, 1809,
	142, 0,
	-2, 634,
	-1, 1856,
	142, 0,
	-2, 635,
	-1, 1910,
	35, 0,
	127, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 960,
}

const sqlNprod = 1103
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25390

var sqlAct = [...]int{

	614, 1909, 1889, 1517, 1933, 1862, 1890, 1908, 1753, 1005,
	1891, 434, 1101, 1013, 920, 729, 839, 1776, 1675, 1702,
	604, 1789, 1676, 1574, 45, 588, 1689, 470, 845, 76,
	77, 265, 1634, 1696, 455, 612, 665, 1442, 1081, 267,
	76, 76, 76, 1529, 1077, 76, 576, 1353, 76, 1539,
	1076, 1281, 611, 1388, 1110, 922, 76, 848, 1352, 1343,
	1441, 1080, 395, 76, 76, 1045, 680, 76, 1109, 268,
	76, 76, 76, 76, 677, 269, 1337, 1014, 972, 981,
	1226, 1187, 916, 1162, 1113, 1159, 439, 441, 58, 469,
	1029, 26, 863, 19, 1038, 713, 793, 1071, 543, 777,
	698, 682, 702, 15, 1197, 7, 586, 471, 544, 577,
	472, 491, 774, 22, 433, 957, 1007, 1111, 804, 485,
	1084, 869, 21, 953, 10, 58, 484, 9, 8, 258,
	6, 253, 4, 251, 444, 482, 560, 773, 561, 382,
	59, 257, 795, 259, 559, 791, 373, 478, 442, 706,
	564, 262, 542, 27, 1004, 1796, 58, 385, 1797, 60,
	260, 438, 261, 438, 50, 263, 255, 1351, 254, 715,
	256, 715, 1006, 715, 1293, 872, 873, 1042, 871, 1924,
	1905, 730, 1105, 1775, 452, 692, 1897, 458, 52, 1105,
	465, 1341, 1048, 1844, 28, 421, 57, 461, 875, 431,
	392, 1887, 587, 1292, 1035, 1882, 1858, 1852, 1105, 1035,
	1105, 1840, 446, 1340, 1775, 41, 1010, 870, 430, 874,
	1043, 1830, 36, 1803, 1105, 53, 1035, 1340, 1610, 40,
	37, 73, 1800, 1786, 1783, 1105, 1775, 1105, 1562, 1774,
	1758, 64, 1775, 1105, 1778, 1319, 42, 76, 76, 76,
	76, 76, 38, 494, 970, 1757, 1044, 1041, 1105, 1735,
	1715, 1383, 1048, 1048, 66, 1712, 1384, 1661, 1035, 453,
	1048, 1322, 460, 463, 880, 453, 1660, 439, 1646, 1048,
	1382, 1105, 1229, 495, 1559, 1048, 1105, 1048, 1048, 496,
	1387, 1503, 67, 1497, 1002, 1459, 1002, 1050, 1460, 1457,
	62, 1456, 1048, 1171, 1048, 264, 63, 1100, 1455, 872,
	873, 1048, 487, 487, 1385, 1046, 1321, 1048, 1106, 1105,
	1065, 1105, 572, 890, 1057, 61, 39, 1048, 834, 474,
	833, 716, 875, 716, 785, 716, 1047, 55, 1034, 1048,
	43, 1035, 54, 1001, 784, 507, 1002, 44, 57, 451,
	64, 264, 64, 874, 969, 47, 49, 968, 723, 473,
	818, 724, 571, 474, 479, 51, 68, 527, 1292, 76,
	488, 492, 870, 66, 36, 66, 473, 1944, 1040, 467,
	474, 891, 37, 1907, 76, 1903, 56, 76, 76, 64,
	1896, 1853, 1784, 1740, 57, 1736, 1728, 1727, 1726, 1721,
	1039, 67, 1720, 67, 38, 1719, 1673, 1625, 880, 62,
	1620, 62, 66, 1667, 1619, 63, 1618, 63, 1565, 1548,
	36, 76, 1528, 76, 1507, 76, 76, 76, 37, 76,
	1324, 719, 1167, 714, 61, 837, 1009, 923, 1464, 1461,
	67, 1449, 558, 1440, 76, 1411, 1408, 1407, 1405, 453,
	38, 463, 1393, 1392, 1320, 76, 885, 882, 883, 884,
	876, 877, 878, 879, 881, 1243, 901, 1194, 1193, 76,
	928, 872, 873, 61, 844, 267, 76, 76, 76, 571,
	76, 570, 1881, 1576, 557, 1872, 672, 550, 515, 553,
	1843, 1822, 473, 1820, 875, 671, 474, 700, 516, 76,
	76, 1811, 64, 1793, 1781, 268, 703, 76, 49, 76,
	1772, 269, 1750, 1733, 1705, 874, 1683, 1554, 872, 873,
	494, 494, 1168, 1547, 1525, 66, 1523, 1522, 267, 76,
	1520, 76, 76, 76, 76, 76, 76, 76, 1476, 1666,
	549, 76, 76, 1475, 510, 512, 1439, 76, 64, 1401,
	495, 495, 1400, 67, 49, 76, 496, 496, 268, 819,
	547, 62, 874, 1378, 269, 1374, 1164, 63, 545, 468,
	843, 66, 1505, 76, 1308, 606, 76, 1270, 1412, 1413,
	1269, 718, 431, 1257, 721, 1256, 61, 567, 568, 1236,
	1192, 1104, 573, 479, 876, 877, 878, 879, 881, 67,
	901, 430, 958, 688, 1257, 961, 965, 62, 951, 950,
	949, 948, 947, 63, 925, 439, 725, 946, 1412, 1413,
	867, 945, 944, 705, 943, 453, 727, 708, 1427, 942,
	941, 940, 252, 939, 938, 937, 936, 935, 926, 924,
	61, 838, 456, 575, 836, 513, 781, 503, 501, 1672,
	1671, 1493, 1302, 1301, 780, 872, 873, 674, 673, 1463,
	1798, 1670, 1294, 1095, 1462, 815, 808, 673, 823, 963,
	1359, 699, 537, 964, 522, 933, 76, 1418, 453, 707,
	707, 1412, 1413, 842, 76, 1690, 835, 1006, 76, 1577,
	1188, 1396, 76, 76, 954, 521, 76, 1288, 853, 852,
	540, 460, 463, 851, 1470, 431, 1868, 865, 431, 431,
	76, 1920, 76, 76, 1829, 76, 1654, 1418, 76, 1921,
	76, 76, 975, 76, 859, 494, 1428, 860, 861, 820,
	1056, 541, 824, 825, 826, 827, 828, 420, 982, 419,
	974, 831, 832, 414, 974, 247, 1487, 243, 872, 873,
	973, 415, 1766, 1765, 1491, 495, 71, 1490, 1791, 1412,
	1413, 496, 901, 986, 988, 1315, 1428, 1467, 959, 929,
	580, 875, 955, 956, 962, 1466, 76, 76, 1362, 1307,
	1418, 1306, 1023, 487, 1429, 487, 771, 1305, 1304, 1147,
	1049, 998, 874, 966, 244, 997, 783, 248, 994, 985,
	1008, 546, 1008, 1240, 978, 991, 1239, 1828, 70, 901,
	1118, 58, 499, 999, 423, 258, 58, 253, 995, 267,
	1032, 1052, 1030, 76, 1429, 1012, 1693, 257, 428, 259,
	1755, 519, 1031, 1161, 1033, 1161, 1027, 262, 76, 76,
	1024, 1021, 1025, 492, 1212, 76, 260, 880, 261, 268,
	1070, 263, 255, 1022, 254, 269, 256, 1026, 1418, 1423,
	1420, 1421, 1422, 1414, 1415, 1416, 1417, 1419, 1504, 959,
	520, 962, 76, 919, 1188, 76, 1492, 1276, 967, 1107,
	696, 689, 1870, 984, 1059, 1478, 1053, 599, 1051, 1054,
	453, 956, 955, 1058, 463, 1920, 1046, 709, 453, 1423,
	1420, 1421, 1422, 1414, 1415, 1416, 1417, 1419, 690, 267,
	249, 683, 1017, 684, 1884, 1930, 74, 463, 1512, 1282,
	463, 69, 1941, 246, 245, 498, 1495, 365, 366, 367,
	1885, 1290, 384, 1074, 1485, 396, 689, 1117, 971, 268,
	1165, 250, 1073, 384, 1169, 269, 901, 983, 700, 1275,
	445, 445, 72, 700, 74, 1075, 1272, 74, 74, 464,
	74, 872, 873, 715, 694, 1314, 1414, 1415, 1416, 1417,
	1419, 693, 76, 76, 76, 1286, 1242, 1046, 76, 1175,
	1108, 76, 685, 1144, 875, 437, 1823, 76, 76, 76,
	76, 76, 683, 424, 684, 76, 1412, 1413, 76, 76,
	1098, 1099, 1316, 76, 1756, 874, 1282, 1157, 1936, 1893,
	76, 429, 76, 1509, 518, 425, 1250, 952, 1479, 76,
	1929, 1155, 1166, 1184, 426, 1091, 1807, 436, 1773, 76,
	915, 374, 1399, 1540, 439, 878, 879, 881, 438, 901,
	453, 1892, 1364, 1244, 1160, 1207, 1416, 1417, 1419, 1510,
	76, 76, 379, 1919, 1115, 1116, 76, 375, 1267, 1284,
	880, 1917, 667, 685, 1688, 1093, 494, 666, 563, 438,
	530, 508, 1245, 506, 453, 1142, 1145, 736, 683, 1731,
	684, 376, 1533, 1894, 1942, 619, 76, 1153, 76, 1152,
	76, 1412, 1413, 1158, 76, 1418, 495, 76, 814, 378,
	1141, 517, 496, 538, 1928, 562, 76, 1279, 1046, 890,
	1287, 1061, 1760, 76, 1323, 76, 1325, 1063, 1296, 1295,
	1297, 1298, 1895, 813, 812, 716, 806, 801, 1934, 563,
	1759, 1948, 1748, 1064, 74, 480, 74, 396, 396, 439,
	1650, 1817, 1062, 790, 1428, 1469, 1299, 1310, 435, 685,
	1311, 1253, 1327, 1312, 1249, 1313, 518, 1042, 539, 686,
	1094, 1254, 1317, 850, 1318, 1732, 840, 891, 1508, 1358,
	1935, 1606, 1653, 1154, 1246, 1143, 1268, 788, 669, 1652,
	1156, 1863, 1326, 1703, 562, 377, 1329, 1937, 789, 439,
	1418, 1386, 58, 1334, 830, 1335, 1032, 786, 1030, 1357,
	1043, 1274, 1429, 816, 1749, 1278, 1172, 1176, 1031, 1179,
	1033, 1259, 699, 1258, 1699, 477, 1535, 1300, 1947, 1534,
	517, 699, 1199, 1199, 1210, 1649, 1221, 476, 380, 1365,
	1363, 453, 1233, 1234, 1235, 436, 1044, 1041, 1704, 1428,
	686, 554, 439, 882, 883, 884, 876, 877, 878, 879,
	881, 1607, 901, 1380, 1518, 1674, 504, 1608, 76, 765,
	1530, 1254, 681, 1338, 1651, 1746, 1191, 1810, 1395, 1730,
	1443, 509, 1553, 817, 396, 396, 1406, 1373, 1420, 1421,
	1422, 1414, 1415, 1416, 1417, 1419, 1747, 1277, 1055, 1000,
	536, 535, 534, 76, 76, 1046, 1330, 1429, 533, 532,
	531, 1499, 1474, 528, 1446, 1447, 1448, 475, 384, 1444,
	74, 934, 396, 552, 396, 822, 555, 453, 1190, 1465,
	76, 1888, 1860, 76, 1371, 76, 686, 1412, 1413, 1494,
	1631, 445, 76, 849, 858, 1472, 1483, 1498, 1369, 1481,
	1468, 76, 74, 1331, 1524, 76, 1096, 1486, 1089, 1028,
	722, 76, 267, 1521, 720, 76, 74, 76, 1040, 1482,
	717, 1484, 1501, 74, 74, 74, 1267, 710, 371, 1502,
	1500, 1511, 1513, 1514, 712, 1422, 1414, 1415, 1416, 1417,
	1419, 695, 268, 1544, 1519, 691, 74, 74, 269, 687,
	1556, 1527, 1571, 1767, 778, 1532, 778, 1541, 1542, 1536,
	76, 1567, 1568, 1569, 565, 1537, 1367, 449, 1169, 1543,
	1372, 1921, 374, 1642, 807, 802, 396, 810, 778, 396,
	396, 396, 396, 396, 829, 668, 1418, 524, 396, 396,
	3, 974, 616, 379, 384, 974, 1102, 989, 375, 1769,
	1564, 987, 847, 990, 1496, 1643, 772, 1377, 736, 736,
	1778, 1379, 1825, 1855, 1346, 1578, 1531, 370, 569, 413,
	445, 993, 376, 868, 1390, 1391, 992, 76, 76, 76,
	1583, 566, 1349, 1845, 450, 1428, 76, 76, 1686, 1613,
	378, 1092, 76, 1538, 76, 1088, 76, 76, 76, 1347,
	1368, 76, 76, 1103, 1011, 1017, 453, 1370, 866, 457,
	1438, 381, 782, 1614, 728, 1037, 525, 1630, 1945, 1627,
	1946, 1451, 416, 417, 1412, 1413, 872, 873, 1067, 1066,
	1647, 1648, 1626, 76, 76, 1515, 1506, 1458, 1303, 1241,
	1638, 1238, 1639, 1429, 1237, 76, 76, 1185, 1068, 76,
	1717, 1682, 1664, 453, 1687, 1570, 1682, 453, 76, 76,
	1348, 1669, 1488, 1489, 1332, 736, 1681, 1328, 1641, 1069,
	927, 1681, 422, 74, 759, 1644, 377, 1684, 1754, 758,
	1711, 979, 372, 1680, 1685, 74, 1342, 76, 1680, 74,
	996, 821, 529, 74, 1883, 1580, 1581, 735, 1723, 1694,
	1695, 1668, 1706, 1700, 1585, 1586, 1707, 74, 1398, 1019,
	1020, 1788, 74, 1806, 1189, 74, 932, 396, 396, 380,
	396, 736, 1414, 1415, 1416, 1417, 1419, 35, 841, 1678,
	1342, 1729, 1640, 592, 1346, 1632, 1471, 1617, 1083, 1082,
	270, 811, 76, 800, 76, 615, 76, 76, 794, 803,
	1198, 670, 1349, 617, 733, 76, 618, 734, 960, 605,
	731, 490, 1339, 1344, 1741, 736, 1015, 1186, 1394, 1347,
	930, 1560, 591, 778, 868, 597, 596, 76, 1346, 1173,
	1742, 500, 1701, 1345, 1350, 48, 514, 390, 391, 1285,
	761, 1665, 1097, 854, 1480, 427, 1349, 1409, 1657, 76,
	502, 76, 1777, 1219, 1663, 1211, 1779, 1344, 1744, 1208,
	76, 548, 1782, 1347, 1682, 1770, 76, 676, 1016, 526,
	1072, 1768, 1291, 1213, 1036, 574, 862, 1345, 448, 1681,
	1348, 447, 1611, 1078, 523, 74, 1079, 787, 1060, 1792,
	1805, 1698, 868, 1621, 418, 1819, 1680, 453, 453, 1090,
	1252, 453, 1940, 1824, 1477, 1867, 65, 76, 25, 1812,
	1799, 1763, 1764, 23, 1795, 20, 18, 1821, 17, 74,
	16, 24, 396, 14, 1348, 13, 76, 76, 12, 11,
	76, 34, 33, 32, 76, 1816, 1815, 31, 30, 76,
	1785, 29, 5, 1833, 2, 1, 0, 0, 1841, 1835,
	0, 0, 1837, 0, 76, 1842, 1682, 439, 1834, 267,
	0, 0, 0, 0, 0, 700, 0, 0, 872, 873,
	0, 1681, 1847, 0, 1692, 0, 1850, 1846, 1854, 0,
	1697, 76, 0, 76, 76, 0, 76, 1857, 1680, 268,
	1851, 875, 0, 0, 0, 269, 1762, 1873, 1849, 0,
	1871, 1836, 0, 0, 0, 76, 1877, 1752, 0, 1876,
	0, 1875, 874, 0, 0, 0, 1874, 0, 889, 74,
	1247, 1248, 1878, 1777, 1682, 979, 1879, 1865, 1255, 1880,
	0, 76, 0, 76, 1260, 1261, 1263, 1265, 1266, 1681,
	1904, 0, 1271, 1898, 1900, 1273, 74, 1902, 1869, 76,
	74, 1787, 0, 1914, 578, 578, 1680, 74, 1918, 1289,
	0, 1916, 453, 678, 1922, 0, 74, 880, 0, 0,
	1923, 0, 1927, 0, 1925, 0, 74, 1901, 1926, 0,
	701, 0, 0, 0, 0, 1939, 1938, 760, 0, 1943,
	1213, 1213, 0, 0, 732, 759, 759, 1072, 778, 0,
	758, 758, 0, 1072, 0, 0, 0, 1949, 0, 0,
	736, 0, 0, 0, 0, 0, 890, 0, 735, 735,
	1642, 0, 1635, 0, 0, 0, 0, 0, 0, 0,
	1633, 0, 0, 847, 1637, 847, 0, 396, 0, 736,
	736, 74, 0, 0, 1333, 1213, 1213, 1213, 736, 736,
	0, 0, 1643, 1336, 0, 0, 0, 0, 0, 0,
	1355, 0, 74, 0, 1375, 1376, 0, 0, 0, 855,
	857, 0, 1636, 0, 891, 0, 864, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 1866, 0, 910, 911,
	912, 913, 914, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 759, 0, 0, 0, 0, 758, 0, 0,
	0, 761, 761, 0, 0, 0, 0, 931, 0, 1435,
	1436, 1437, 0, 0, 1839, 735, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 0, 1638, 0, 1639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	882, 883, 884, 876, 877, 878, 879, 881, 759, 901,
	0, 0, 0, 758, 0, 1641, 0, 0, 0, 0,
	0, 0, 1644, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 1213, 1213, 0, 0, 1886, 0,
	0, 0, 759, 0, 0, 868, 0, 758, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 0, 1906, 735, 0, 0, 0, 1640,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 46,
	74, 74, 0, 0, 0, 1213, 1213, 1213, 1213, 1213,
	1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
	1213, 1213, 1213, 1213, 0, 1213, 0, 1516, 1551, 1552,
	979, 0, 847, 0, 761, 0, 46, 0, 0, 1526,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	736, 0, 74, 0, 0, 0, 0, 432, 1355, 0,
	440, 0, 1546, 0, 1355, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 0, 1609,
	0, 0, 0, 0, 0, 0, 0, 1575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 760, 760,
	0, 0, 0, 0, 0, 732, 732, 0, 0, 736,
	0, 0, 0, 0, 0, 0, 0, 578, 0, 0,
	0, 0, 0, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 0, 1146, 0, 1148, 1149,
	1150, 1151, 0, 0, 1628, 1629, 979, 0, 872, 873,
	0, 0, 0, 868, 868, 0, 0, 0, 0, 1655,
	0, 1656, 0, 74, 1658, 1659, 0, 0, 1662, 74,
	0, 875, 0, 0, 1195, 1196, 0, 736, 1209, 0,
	1220, 1222, 1227, 1230, 1231, 1232, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 760, 0, 0, 1677, 0,
	868, 1079, 732, 1677, 1213, 678, 0, 0, 0, 0,
	0, 0, 74, 74, 0, 0, 74, 0, 0, 0,
	0, 440, 0, 0, 0, 868, 1355, 759, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 0, 0, 0,
	0, 1280, 0, 1283, 0, 0, 0, 880, 0, 0,
	735, 760, 0, 0, 1724, 0, 759, 759, 732, 0,
	0, 758, 758, 0, 0, 759, 759, 0, 0, 0,
	758, 758, 0, 0, 0, 0, 0, 0, 1751, 735,
	735, 0, 0, 0, 0, 1309, 0, 0, 735, 735,
	0, 1213, 0, 0, 0, 760, 890, 0, 759, 0,
	0, 0, 732, 758, 0, 0, 0, 0, 0, 979,
	0, 1743, 0, 396, 1745, 0, 0, 0, 0, 0,
	0, 735, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 761, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 1677, 0, 0, 0, 1809, 74, 0, 1790, 872,
	873, 1213, 761, 761, 0, 0, 0, 74, 1360, 1361,
	0, 761, 761, 868, 1366, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 759, 1381, 0,
	432, 0, 758, 874, 761, 0, 0, 1389, 0, 0,
	0, 0, 0, 0, 847, 1397, 0, 0, 0, 1402,
	735, 0, 884, 876, 877, 878, 879, 881, 0, 901,
	0, 0, 0, 1826, 1827, 1856, 0, 1831, 0, 0,
	0, 1832, 0, 1677, 918, 0, 396, 0, 0, 0,
	1227, 1227, 1227, 0, 0, 0, 872, 873, 880, 1848,
	0, 868, 902, 903, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 906, 0, 1473, 0, 0, 0, 0, 1864, 0,
	868, 74, 0, 396, 0, 0, 0, 759, 0, 0,
	874, 0, 758, 0, 0, 0, 889, 890, 0, 578,
	0, 1677, 1790, 761, 0, 0, 0, 578, 0, 0,
	735, 678, 0, 432, 0, 0, 432, 432, 1412, 1413,
	0, 1430, 1431, 1432, 0, 0, 0, 0, 74, 0,
	868, 0, 0, 0, 1709, 0, 0, 0, 0, 917,
	0, 0, 0, 921, 0, 880, 1915, 0, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 899, 907, 0, 759, 0, 1427, 0,
	760, 758, 0, 0, 0, 0, 1549, 732, 0, 1550,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 735,
	1555, 0, 0, 0, 890, 0, 0, 0, 0, 760,
	760, 0, 0, 761, 1309, 0, 732, 732, 760, 760,
	0, 0, 0, 1572, 0, 732, 732, 1418, 0, 0,
	0, 0, 0, 1582, 0, 0, 0, 1584, 0, 0,
	0, 0, 0, 0, 876, 877, 878, 879, 881, 0,
	901, 760, 0, 0, 759, 0, 0, 0, 732, 758,
	1433, 0, 891, 0, 0, 46, 0, 46, 0, 0,
	1615, 1616, 0, 900, 0, 0, 1428, 735, 0, 1622,
	1623, 1624, 46, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 873, 0, 892, 893, 894, 902, 903,
	904, 0, 0, 397, 0, 0, 0, 0, 895, 0,
	0, 0, 578, 0, 0, 875, 0, 906, 0, 0,
	898, 398, 0, 0, 1429, 0, 0, 885, 882, 883,
	884, 876, 877, 878, 879, 881, 874, 901, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 1691, 0, 0,
	760, 0, 0, 0, 0, 0, 400, 732, 0, 0,
	761, 405, 406, 0, 0, 411, 0, 0, 0, 0,
	1710, 0, 0, 0, 1713, 1714, 0, 399, 401, 1716,
	0, 0, 0, 1718, 0, 0, 0, 0, 0, 0,
	1722, 880, 0, 0, 1725, 1424, 1425, 1426, 0, 1423,
	1420, 1421, 1422, 1414, 1415, 1416, 1417, 1419, 0, 899,
	907, 0, 0, 0, 0, 0, 402, 0, 0, 0,
	1112, 0, 0, 0, 905, 0, 0, 1734, 0, 403,
	404, 0, 0, 0, 897, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	760, 0, 0, 0, 0, 0, 1163, 732, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 1761,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1780, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 900,
	0, 0, 0, 0, 0, 1794, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1801, 1802, 0, 0, 760,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 408, 0, 0, 409, 0, 0, 0,
	0, 410, 0, 0, 1814, 0, 0, 0, 440, 0,
	0, 0, 0, 0, 0, 412, 898, 1818, 0, 886,
	887, 888, 0, 885, 882, 883, 884, 876, 877, 878,
	879, 881, 0, 901, 0, 0, 0, 0, 0, 678,
	1737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1899, 0, 0, 0, 0,
	0, 0, 0, 0, 1163, 0, 0, 0, 0, 0,
	0, 1913, 1913, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 1913, 0, 0, 193, 917, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	0, 0, 1112, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 215, 216, 0, 0, 117, 0, 115, 0,
	0, 116, 217, 218, 219, 220, 0, 221, 0, 0,
	118, 0, 119, 120, 0, 0, 222, 0, 121, 1112,
	0, 122, 0, 1112, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 0, 454, 0, 0, 137,
	225, 0, 138, 0, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 230, 157, 0, 158, 159, 160, 64, 231, 161,
	162, 0, 163, 164, 0, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	66, 174, 175, 0, 236, 237, 238, 0, 0, 176,
	239, 240, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 497, 242,
	0, 0, 188, 0, 0, 0, 62, 189, 190, 191,
	192, 0, 63, 0, 749, 743, 766, 737, 757, 756,
	0, 0, 739, 738, 0, 0, 0, 768, 767, 0,
	0, 1114, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 762, 0,
	754, 753, 0, 0, 0, 0, 0, 0, 0, 752,
	0, 0, 0, 1112, 1112, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 745, 746, 747, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 748, 742, 1771,
	0, 0, 0, 0, 0, 0, 770, 0, 0, 0,
	0, 0, 0, 740, 0, 46, 763, 764, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	769, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 285, 80, 286, 287, 288, 289, 193,
	290, 291, 292, 293, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 294, 84, 200, 201, 85, 295, 296,
	202, 203, 204, 297, 205, 298, 271, 299, 86, 87,
	88, 917, 89, 300, 90, 91, 92, 301, 272, 93,
	94, 302, 303, 304, 305, 306, 307, 95, 96, 97,
	98, 206, 99, 207, 208, 308, 100, 309, 101, 310,
	311, 312, 102, 103, 313, 104, 314, 0, 315, 209,
	105, 106, 210, 211, 316, 317, 318, 107, 108, 212,
	0, 109, 319, 110, 320, 321, 273, 322, 111, 213,
	323, 214, 324, 112, 113, 114, 215, 216, 275, 325,
	117, 326, 115, 327, 274, 116, 217, 218, 219, 220,
	328, 221, 329, 276, 118, 277, 119, 120, 330, 331,
	222, 278, 121, 279, 332, 122, 333, 334, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	335, 132, 336, 223, 134, 224, 135, 136, 337, 338,
	339, 340, 341, 137, 225, 281, 138, 282, 226, 139,
	140, 141, 142, 342, 227, 143, 228, 144, 343, 145,
	146, 147, 229, 148, 149, 344, 151, 152, 150, 153,
	345, 154, 283, 155, 156, 230, 157, 0, 158, 159,
	160, 346, 231, 161, 162, 347, 163, 164, 284, 165,
	232, 233, 166, 348, 172, 167, 168, 169, 171, 234,
	170, 235, 349, 173, 350, 174, 175, 351, 236, 237,
	238, 352, 353, 176, 239, 240, 354, 177, 178, 179,
	180, 355, 356, 181, 182, 183, 357, 184, 358, 185,
	186, 187, 241, 242, 359, 360, 188, 361, 362, 363,
	364, 189, 190, 191, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1545, 78, 79, 285, 80, 286, 287, 288, 289,
	193, 290, 291, 292, 293, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 294, 84, 200, 201, 85, 295,
	296, 202, 203, 204, 297, 205, 298, 271, 299, 86,
	87, 88, 0, 89, 300, 90, 91, 92, 301, 272,
	93, 94, 302, 303, 304, 305, 306, 307, 95, 96,
	97, 98, 206, 99, 207, 208, 308, 100, 309, 101,
	310, 311, 312, 102, 103, 313, 104, 314, 0, 315,
	209, 105, 106, 210, 211, 316, 317, 318, 107, 108,
	212, 0, 109, 319, 110, 320, 321, 273, 322, 111,
	213, 323, 214, 324, 112, 113, 114, 215, 216, 275,
	325, 117, 326, 115, 327, 274, 116, 217, 218, 219,
	220, 328, 221, 329, 276, 118, 277, 119, 120, 330,
	331, 222, 278, 121, 279, 332, 122, 333, 334, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 335, 132, 336, 223, 134, 224, 135, 136, 337,
	338, 339, 340, 341, 137, 225, 281, 138, 282, 226,
	139, 140, 141, 142, 342, 227, 143, 228, 144, 343,
	145, 146, 147, 229, 148, 149, 344, 151, 152, 150,
	153, 345, 154, 283, 155, 156, 230, 157, 0, 158,
	159, 160, 346, 231, 161, 162, 347, 163, 164, 284,
	165, 232, 233, 166, 348, 172, 167, 168, 169, 171,
	234, 170, 235, 349, 173, 350, 174, 175, 351, 236,
	237, 238, 352, 353, 176, 239, 240, 354, 177, 178,
	179, 180, 355, 356, 181, 182, 183, 357, 184, 358,
	185, 186, 187, 241, 242, 359, 360, 188, 361, 362,
	363, 364, 189, 190, 191, 192, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 78, 79, 285, 80, 286, 287, 288, 289,
	193, 290, 291, 292, 293, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 294, 84, 200, 201, 85, 295,
	296, 202, 203, 204, 297, 205, 298, 271, 299, 86,
	87, 88, 0, 89, 300, 90, 91, 92, 301, 272,
	93, 94, 302, 303, 304, 305, 306, 307, 95, 96,
	97, 98, 206, 99, 207, 208, 308, 100, 309, 101,
	310, 311, 312, 102, 103, 313, 104, 314, 0, 315,
	209, 105, 106, 210, 211, 316, 317, 318, 107, 108,
	212, 0, 109, 319, 110, 320, 321, 273, 322, 111,
	213, 323, 214, 324, 112, 113, 114, 215, 216, 275,
	325, 117, 326, 115, 327, 274, 116, 217, 218, 219,
	220, 328, 221, 329, 276, 118, 277, 119, 120, 330,
	331, 222, 278, 121, 279, 332, 122, 333, 334, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 335, 132, 336, 223, 134, 224, 135, 136, 337,
	338, 339, 340, 341, 137, 225, 281, 138, 282, 226,
	139, 140, 141, 142, 342, 227, 143, 228, 144, 343,
	145, 146, 147, 229, 148, 149, 344, 151, 152, 150,
	153, 345, 154, 283, 155, 156, 230, 157, 0, 158,
	159, 160, 346, 231, 161, 162, 347, 163, 164, 284,
	165, 232, 233, 166, 348, 172, 167, 168, 169, 171,
	234, 170, 235, 349, 173, 350, 174, 175, 351, 236,
	237, 238, 352, 353, 176, 239, 240, 354, 177, 178,
	179, 180, 355, 356, 181, 182, 183, 357, 184, 358,
	185, 186, 187, 241, 242, 359, 360, 188, 361, 362,
	363, 364, 189, 190, 191, 192, 613, 602, 603, 600,
	601, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 1181, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 0, 100, 0, 101,
	0, 1182, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 584, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 598, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 1180, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 582, 1183,
	0, 0, 0, 583, 0, 0, 590, 1178, 613, 602,
	603, 600, 601, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 629, 595, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 610, 628, 648, 649, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 650, 99, 651, 652, 679, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 594, 105, 106, 630, 631, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 584, 132, 609, 638, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 598, 157,
	0, 158, 159, 160, 64, 231, 161, 162, 626, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 634, 0, 173, 66, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 635, 636, 607,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 497, 664, 0, 0, 188,
	0, 0, 0, 62, 189, 190, 191, 192, 585, 63,
	613, 602, 603, 600, 601, 589, 0, 0, 0, 581,
	582, 0, 0, 0, 0, 583, 78, 79, 590, 80,
	0, 0, 0, 0, 629, 595, 0, 0, 0, 81,
	82, 194, 644, 196, 645, 83, 646, 647, 0, 84,
	200, 201, 85, 610, 628, 648, 649, 204, 0, 640,
	0, 621, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 272, 93, 94, 0, 622, 624, 0,
	623, 625, 95, 96, 97, 98, 650, 99, 651, 652,
	0, 100, 0, 101, 0, 0, 0, 643, 103, 0,
	104, 0, 0, 0, 594, 105, 106, 630, 631, 608,
	0, 0, 107, 108, 653, 0, 109, 0, 110, 0,
	0, 273, 0, 111, 641, 0, 214, 0, 112, 113,
	114, 637, 639, 275, 0, 117, 0, 115, 0, 274,
	116, 654, 655, 656, 657, 0, 620, 0, 276, 118,
	277, 119, 120, 0, 0, 642, 278, 121, 279, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	280, 129, 130, 133, 131, 584, 132, 609, 638, 134,
	658, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	281, 138, 282, 632, 139, 140, 141, 142, 0, 633,
	143, 228, 144, 0, 145, 146, 147, 659, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 283, 155, 156,
	598, 157, 0, 158, 159, 160, 64, 231, 161, 162,
	626, 163, 164, 284, 165, 660, 233, 166, 0, 172,
	167, 168, 169, 171, 661, 170, 634, 0, 173, 66,
	174, 175, 0, 236, 662, 663, 0, 0, 176, 635,
	636, 607, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 627, 184, 0, 185, 186, 187, 497, 664, 0,
	0, 188, 0, 0, 0, 62, 189, 190, 191, 192,
	585, 63, 613, 602, 603, 600, 601, 589, 0, 0,
	0, 581, 582, 0, 0, 0, 0, 583, 78, 79,
	590, 80, 0, 0, 0, 0, 629, 595, 0, 0,
	0, 81, 82, 194, 644, 196, 645, 83, 646, 647,
	1223, 84, 200, 201, 85, 610, 628, 648, 649, 204,
	0, 640, 0, 621, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 272, 93, 94, 0, 622,
	624, 0, 623, 625, 95, 96, 97, 98, 650, 99,
	651, 652, 0, 100, 0, 101, 0, 0, 0, 643,
	103, 0, 104, 0, 0, 0, 594, 105, 106, 630,
	631, 608, 0, 0, 107, 108, 653, 0, 109, 0,
	110, 0, 1228, 273, 0, 111, 641, 0, 214, 0,
	112, 113, 114, 637, 639, 275, 0, 117, 0, 115,
	0, 274, 116, 654, 655, 656, 657, 0, 620, 0,
	276, 118, 277, 119, 120, 0, 1224, 642, 278, 121,
	279, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 280, 129, 130, 133, 131, 584, 132, 609,
	638, 134, 658, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 281, 138, 282, 632, 139, 140, 141, 142,
	0, 633, 143, 228, 144, 0, 145, 146, 147, 659,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 283,
	155, 156, 598, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 626, 163, 164, 284, 165, 660, 233, 166,
	0, 172, 167, 168, 169, 171, 661, 170, 634, 0,
	173, 0, 174, 175, 0, 236, 662, 663, 0, 1225,
	176, 635, 636, 607, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 627, 184, 0, 185, 186, 187, 241,
	664, 0, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 585, 0, 613, 602, 603, 600, 601, 589,
	0, 0, 0, 581, 582, 0, 0, 0, 0, 583,
	78, 79, 590, 80, 0, 0, 0, 0, 629, 595,
	0, 0, 0, 81, 82, 194, 644, 196, 645, 83,
	646, 647, 0, 84, 200, 201, 85, 610, 628, 648,
	649, 204, 0, 640, 0, 621, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 622, 624, 0, 623, 625, 95, 96, 97, 98,
	650, 99, 651, 652, 0, 100, 0, 101, 0, 0,
	0, 643, 103, 0, 104, 0, 0, 0, 594, 105,
	106, 630, 631, 608, 0, 0, 107, 108, 653, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 641, 0,
	214, 0, 112, 113, 114, 637, 639, 275, 0, 117,
	0, 115, 0, 274, 116, 654, 655, 656, 657, 0,
	620, 0, 276, 118, 277, 119, 120, 0, 0, 642,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 280, 129, 130, 133, 131, 584,
	132, 609, 638, 134, 658, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 281, 138, 282, 632, 139, 140,
	141, 142, 0, 633, 143, 228, 144, 0, 145, 146,
	147, 659, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 598, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 626, 163, 164, 284, 165, 660,
	233, 166, 0, 172, 167, 168, 169, 171, 661, 170,
	634, 0, 173, 0, 174, 175, 0, 236, 662, 663,
	0, 0, 176, 635, 636, 607, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 627, 184, 0, 185, 186,
	187, 241, 664, 0, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 582, 0, 0, 0,
	0, 583, 0, 0, 590, 1612, 613, 602, 603, 600,
	601, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 0, 100, 0, 101,
	0, 0, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 584, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 598, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 0, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 582, 0,
	0, 0, 0, 583, 0, 0, 590, 1561, 613, 602,
	603, 600, 601, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 629, 595, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 610, 628, 648, 649, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 650, 99, 651, 652, 0, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 594, 105, 106, 630, 631, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 584, 132, 609, 638, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 598, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 626, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 634, 0, 173, 0, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 635, 636, 607,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 241, 664, 0, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	582, 0, 0, 0, 0, 583, 0, 0, 590, 1177,
	613, 602, 603, 600, 601, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 629, 595, 0, 0, 0, 81,
	82, 194, 644, 196, 645, 83, 646, 647, 0, 84,
	200, 201, 85, 610, 628, 648, 649, 204, 0, 640,
	0, 621, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 272, 93, 94, 0, 622, 624, 0,
	623, 625, 95, 96, 97, 98, 650, 99, 651, 652,
	0, 100, 0, 101, 0, 0, 0, 643, 103, 0,
	104, 0, 0, 0, 594, 105, 106, 630, 631, 608,
	0, 0, 107, 108, 653, 0, 109, 0, 110, 0,
	0, 273, 0, 111, 641, 0, 214, 0, 112, 113,
	114, 637, 639, 275, 0, 117, 0, 115, 0, 274,
	116, 654, 655, 656, 657, 0, 620, 0, 276, 118,
	277, 119, 120, 0, 0, 642, 278, 121, 279, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	280, 129, 130, 133, 131, 584, 132, 609, 638, 134,
	658, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	281, 138, 282, 632, 139, 140, 141, 142, 0, 633,
	143, 228, 144, 0, 145, 146, 147, 659, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 283, 155, 156,
	598, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	626, 163, 164, 284, 165, 660, 233, 166, 0, 172,
	167, 168, 169, 171, 661, 170, 634, 0, 173, 0,
	174, 175, 0, 236, 662, 663, 0, 0, 176, 635,
	636, 607, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 627, 184, 0, 185, 186, 187, 241, 664, 0,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	585, 0, 0, 0, 0, 613, 602, 603, 600, 601,
	589, 581, 582, 0, 0, 0, 0, 583, 923, 1174,
	590, 78, 79, 0, 80, 0, 0, 0, 0, 629,
	595, 0, 0, 0, 81, 82, 194, 644, 196, 645,
	83, 646, 647, 0, 84, 200, 201, 85, 610, 628,
	648, 649, 204, 0, 640, 0, 621, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 272, 93,
	94, 0, 622, 624, 0, 623, 625, 95, 96, 97,
	98, 650, 99, 651, 652, 0, 100, 0, 101, 0,
	0, 0, 643, 103, 0, 104, 0, 0, 0, 594,
	105, 106, 630, 631, 608, 0, 0, 107, 108, 653,
	0, 109, 0, 110, 0, 0, 273, 0, 111, 641,
	0, 214, 0, 112, 113, 114, 637, 639, 275, 0,
	117, 0, 115, 0, 274, 116, 654, 655, 656, 657,
	0, 620, 0, 276, 118, 277, 119, 120, 0, 0,
	642, 278, 121, 279, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	584, 132, 609, 638, 134, 658, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 281, 138, 282, 632, 139,
	140, 141, 142, 0, 633, 143, 228, 144, 0, 145,
	146, 147, 659, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 283, 155, 156, 598, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 626, 163, 164, 284, 165,
	660, 233, 166, 0, 172, 167, 168, 169, 171, 661,
	170, 634, 0, 173, 0, 174, 175, 0, 236, 662,
	663, 0, 0, 176, 635, 636, 607, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 627, 184, 0, 185,
	186, 187, 241, 664, 0, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 585, 0, 613, 602, 603,
	600, 601, 589, 0, 0, 0, 581, 582, 579, 0,
	0, 0, 583, 78, 79, 590, 80, 0, 0, 0,
	0, 629, 595, 0, 0, 0, 81, 82, 194, 644,
	196, 645, 83, 646, 647, 0, 84, 200, 201, 85,
	610, 628, 648, 649, 204, 0, 640, 0, 621, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	272, 93, 94, 0, 622, 624, 0, 623, 625, 95,
	96, 97, 98, 650, 99, 651, 652, 0, 100, 0,
	101, 0, 0, 0, 643, 103, 0, 104, 0, 0,
	0, 594, 105, 106, 630, 631, 608, 0, 0, 107,
	108, 653, 0, 109, 0, 110, 0, 0, 273, 0,
	111, 641, 0, 214, 0, 112, 113, 114, 637, 639,
	275, 0, 117, 0, 115, 0, 274, 116, 654, 655,
	656, 657, 0, 620, 0, 276, 118, 277, 119, 120,
	0, 0, 642, 278, 121, 279, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 280, 129, 130,
	133, 131, 584, 132, 609, 638, 134, 658, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 281, 138, 282,
	632, 139, 140, 141, 142, 0, 633, 143, 228, 144,
	0, 145, 146, 147, 659, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 283, 155, 156, 598, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 626, 163, 164,
	284, 165, 660, 233, 166, 0, 172, 167, 168, 169,
	171, 661, 170, 634, 0, 173, 0, 174, 175, 0,
	236, 662, 663, 0, 0, 176, 635, 636, 607, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 627, 184,
	0, 185, 186, 187, 241, 664, 1566, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 585, 0, 613,
	602, 603, 600, 601, 589, 0, 0, 0, 581, 582,
	0, 0, 0, 0, 583, 78, 79, 590, 80, 0,
	0, 0, 0, 629, 595, 0, 0, 0, 81, 82,
	194, 644, 196, 645, 83, 646, 647, 0, 84, 200,
	201, 85, 610, 628, 648, 649, 204, 0, 640, 0,
	621, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 272, 93, 94, 0, 622, 624, 0, 623,
	625, 95, 96, 97, 98, 650, 99, 651, 652, 679,
	100, 0, 101, 0, 0, 0, 643, 103, 0, 104,
	0, 0, 0, 594, 105, 106, 630, 631, 608, 0,
	0, 107, 108, 653, 0, 109, 0, 110, 0, 0,
	273, 0, 111, 641, 0, 214, 0, 112, 113, 114,
	637, 639, 275, 0, 117, 0, 115, 0, 274, 116,
	654, 655, 656, 657, 0, 620, 0, 276, 118, 277,
	119, 120, 0, 0, 642, 278, 121, 279, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 280,
	129, 130, 133, 131, 584, 132, 609, 638, 134, 658,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 281,
	138, 282, 632, 139, 140, 141, 142, 0, 633, 143,
	228, 144, 0, 145, 146, 147, 659, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 283, 155, 156, 598,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 626,
	163, 164, 284, 165, 660, 233, 166, 0, 172, 167,
	168, 169, 171, 661, 170, 634, 0, 173, 0, 174,
	175, 0, 236, 662, 663, 0, 0, 176, 635, 636,
	607, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	627, 184, 0, 185, 186, 187, 241, 664, 0, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 585,
	0, 613, 602, 603, 600, 601, 589, 0, 0, 0,
	581, 582, 0, 0, 0, 0, 583, 78, 79, 590,
	80, 0, 0, 0, 0, 629, 595, 0, 0, 0,
	81, 82, 194, 644, 196, 645, 83, 646, 647, 0,
	84, 200, 201, 85, 610, 628, 648, 649, 204, 0,
	640, 0, 621, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 272, 93, 94, 0, 622, 624,
	0, 623, 625, 95, 96, 97, 98, 650, 99, 651,
	652, 0, 100, 0, 101, 0, 0, 0, 643, 103,
	0, 104, 0, 0, 0, 594, 105, 106, 630, 631,
	608, 0, 0, 107, 108, 653, 0, 109, 0, 110,
	0, 1228, 273, 0, 111, 641, 0, 214, 0, 112,
	113, 114, 637, 639, 275, 0, 117, 0, 115, 0,
	274, 116, 654, 655, 656, 657, 0, 620, 0, 276,
	118, 277, 119, 120, 0, 0, 642, 278, 121, 279,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 280, 129, 130, 133, 131, 584, 132, 609, 638,
	134, 658, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 281, 138, 282, 632, 139, 140, 141, 142, 0,
	633, 143, 228, 144, 0, 145, 146, 147, 659, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 283, 155,
	156, 598, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 626, 163, 164, 284, 165, 660, 233, 166, 0,
	172, 167, 168, 169, 171, 661, 170, 634, 0, 173,
	0, 174, 175, 0, 236, 662, 663, 0, 0, 176,
	635, 636, 607, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 627, 184, 0, 185, 186, 187, 241, 664,
	0, 0, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 585, 0, 0, 0, 0, 613, 602, 603, 600,
	601, 589, 581, 582, 0, 0, 0, 0, 583, 0,
	0, 590, 78, 79, 856, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 0, 100, 0, 101,
	0, 0, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 584, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 598, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 0, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 585, 0, 613, 602,
	603, 600, 601, 589, 0, 0, 0, 581, 582, 0,
	0, 0, 0, 583, 78, 79, 590, 80, 0, 0,
	0, 0, 629, 595, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 610, 628, 648, 649, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 1912, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 650, 99, 651, 652, 0, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 594, 105, 106, 630, 631, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 584, 132, 609, 638, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 598, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 626, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 634, 0, 173, 0, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 635, 636, 607,
	177, 178, 1911, 180, 0, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 241, 664, 0, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 585, 0,
	613, 602, 603, 600, 601, 589, 0, 0, 0, 581,
	582, 0, 0, 0, 0, 583, 78, 79, 590, 80,
	0, 0, 0, 0, 629, 595, 0, 0, 0, 81,
	82, 1910, 644, 196, 645, 83, 646, 647, 0, 84,
	200, 201, 85, 610, 628, 648, 649, 204, 0, 640,
	0, 621, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 272, 93, 1912, 0, 622, 624, 0,
	623, 625, 95, 96, 97, 98, 650, 99, 651, 652,
	0, 100, 0, 101, 0, 0, 0, 643, 103, 0,
	104, 0, 0, 0, 594, 105, 106, 630, 631, 608,
	0, 0, 107, 108, 653, 0, 109, 0, 110, 0,
	0, 273, 0, 111, 641, 0, 214, 0, 112, 113,
	114, 637, 639, 275, 0, 117, 0, 115, 0, 274,
	116, 654, 655, 656, 657, 0, 620, 0, 276, 118,
	277, 119, 120, 0, 0, 642, 278, 121, 279, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	280, 129, 130, 133, 131, 584, 132, 609, 638, 134,
	658, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	281, 138, 282, 632, 139, 140, 141, 142, 0, 633,
	143, 228, 144, 0, 145, 146, 147, 659, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 283, 155, 156,
	598, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	626, 163, 164, 284, 165, 660, 233, 166, 0, 172,
	167, 168, 169, 171, 661, 170, 634, 0, 173, 0,
	174, 175, 0, 236, 662, 663, 0, 0, 176, 635,
	636, 607, 177, 178, 1911, 180, 0, 0, 181, 182,
	183, 627, 184, 0, 185, 186, 187, 241, 664, 0,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	585, 0, 613, 602, 603, 600, 601, 589, 0, 0,
	0, 581, 582, 0, 0, 0, 0, 583, 78, 79,
	590, 80, 0, 0, 0, 0, 629, 595, 0, 0,
	0, 81, 82, 194, 644, 196, 645, 83, 646, 647,
	0, 84, 200, 201, 85, 610, 628, 648, 649, 204,
	0, 640, 0, 621, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 272, 93, 94, 0, 622,
	624, 0, 623, 625, 95, 96, 97, 98, 650, 99,
	651, 652, 0, 100, 0, 101, 0, 0, 0, 643,
	103, 0, 104, 0, 0, 0, 594, 105, 106, 630,
	631, 608, 0, 0, 107, 108, 653, 0, 109, 0,
	110, 0, 0, 273, 0, 111, 641, 0, 214, 0,
	112, 113, 114, 637, 639, 275, 0, 117, 0, 115,
	0, 274, 116, 654, 655, 656, 657, 0, 620, 0,
	276, 118, 277, 119, 120, 0, 0, 642, 278, 121,
	279, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 280, 129, 130, 133, 131, 584, 132, 609,
	638, 134, 658, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 281, 138, 282, 632, 139, 140, 141, 142,
	0, 633, 143, 228, 144, 0, 145, 146, 147, 659,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 283,
	155, 156, 598, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 626, 163, 164, 284, 165, 660, 233, 166,
	0, 172, 167, 168, 169, 171, 661, 170, 634, 0,
	173, 0, 174, 175, 0, 236, 662, 663, 0, 0,
	176, 635, 636, 607, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 627, 184, 0, 185, 186, 187, 241,
	664, 0, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 585, 0, 1200, 602, 603, 600, 601, 589,
	0, 0, 0, 581, 582, 0, 0, 0, 0, 583,
	78, 79, 590, 80, 0, 0, 0, 0, 629, 595,
	0, 0, 0, 81, 82, 194, 644, 196, 645, 83,
	646, 647, 0, 84, 200, 201, 85, 610, 628, 648,
	649, 204, 0, 640, 0, 621, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 622, 624, 0, 623, 625, 95, 96, 97, 98,
	650, 1203, 651, 652, 0, 100, 0, 101, 0, 0,
	0, 643, 103, 0, 104, 0, 0, 0, 594, 105,
	106, 630, 631, 608, 0, 0, 107, 108, 653, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 641, 0,
	214, 0, 112, 113, 1204, 637, 639, 275, 0, 117,
	0, 115, 0, 274, 116, 654, 655, 656, 657, 0,
	620, 0, 276, 118, 277, 119, 120, 0, 0, 642,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	1205, 1202, 127, 128, 280, 129, 130, 133, 131, 584,
	132, 609, 638, 134, 658, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 281, 138, 282, 632, 139, 140,
	141, 142, 0, 633, 143, 228, 144, 0, 145, 146,
	147, 659, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 598, 157, 0, 158, 159, 1206,
	0, 231, 161, 162, 626, 163, 164, 284, 165, 660,
	233, 166, 0, 172, 167, 168, 169, 171, 661, 170,
	634, 0, 173, 0, 174, 175, 0, 236, 662, 663,
	0, 0, 176, 635, 636, 607, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 627, 184, 0, 185, 186,
	187, 241, 664, 0, 0, 188, 0, 0, 0, 0,
	189, 190, 1201, 192, 585, 0, 613, 602, 603, 600,
	601, 589, 0, 0, 0, 581, 582, 0, 0, 0,
	0, 583, 78, 79, 590, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 0, 100, 0, 101,
	0, 0, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 0, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 1218, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 0, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 613, 602,
	603, 600, 601, 589, 0, 0, 0, 1214, 1215, 0,
	0, 0, 0, 1216, 78, 79, 1217, 80, 0, 0,
	0, 0, 629, 595, 0, 0, 0, 81, 82, 0,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 610, 628, 648, 649, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 1912, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 650, 99, 651, 652, 0, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 594, 105, 106, 630, 631, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 0, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 0, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 584, 132, 609, 638, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 598, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 626, 163,
	164, 0, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 634, 0, 173, 0, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 635, 636, 607,
	177, 178, 1911, 180, 0, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 241, 664, 0, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	613, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	582, 0, 0, 0, 0, 583, 78, 79, 590, 80,
	0, 0, 0, 0, 629, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 628, 202, 203, 204, 0, 640,
	0, 621, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 272, 93, 94, 0, 622, 624, 0,
	623, 625, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 630, 631, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 273, 0, 111, 641, 0, 214, 0, 112, 113,
	114, 637, 639, 275, 0, 117, 0, 115, 0, 274,
	116, 217, 218, 219, 220, 0, 221, 0, 276, 118,
	277, 119, 120, 0, 0, 642, 278, 121, 279, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	280, 129, 130, 133, 131, 0, 132, 0, 638, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	281, 138, 282, 632, 139, 140, 141, 142, 0, 633,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 283, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	626, 163, 164, 284, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 634, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 635,
	636, 0, 177, 178, 179, 180, 493, 0, 181, 182,
	183, 627, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	1679, 202, 203, 204, 0, 205, 0, 271, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 215, 216, 275,
	0, 117, 0, 115, 0, 274, 116, 217, 218, 219,
	220, 0, 221, 0, 276, 118, 277, 119, 120, 0,
	0, 222, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 230, 157, 0, 158,
	159, 160, 64, 231, 161, 162, 0, 163, 164, 284,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 66, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 497, 242, 0, 0, 188, 0, 0,
	0, 62, 189, 190, 191, 192, 0, 63, 493, 805,
	0, 806, 801, 796, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 61, 80, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 271,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 809, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 798, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 275, 0, 117, 0, 115, 0, 274, 116, 217,
	218, 219, 220, 0, 221, 0, 276, 118, 277, 119,
	120, 0, 0, 222, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 799, 0, 0, 0, 137, 225, 281, 138,
	282, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 284, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 797,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 493, 805, 188,
	806, 801, 796, 0, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 807,
	802, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 271, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	272, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 792, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 798, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 273, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	275, 0, 117, 0, 115, 0, 274, 116, 217, 218,
	219, 220, 0, 221, 0, 276, 118, 277, 119, 120,
	0, 0, 222, 278, 121, 279, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 280, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 799, 0, 0, 0, 137, 225, 281, 138, 282,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 283, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	284, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 797, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 493, 805, 188, 806,
	801, 796, 0, 189, 190, 191, 192, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 807, 802,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 271, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 798, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 215, 216, 275,
	0, 117, 0, 115, 0, 274, 116, 217, 218, 219,
	220, 0, 221, 0, 276, 118, 277, 119, 120, 0,
	0, 222, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	799, 0, 0, 0, 137, 225, 281, 138, 282, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 284,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 797, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 75, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 807, 802, 193,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 215, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 157, 0, 158, 159,
	160, 64, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 66, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 497, 242, 0, 0, 188, 75, 0, 0,
	62, 189, 190, 191, 192, 0, 63, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 193, 0, 1354, 0, 61, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 0,
	75, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 193, 0, 0, 0, 571, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 454, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	1114, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 215, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 0, 75,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 0, 193, 0, 0, 0, 697, 81, 82,
	194, 195, 196, 197, 83, 198, 199, 0, 84, 200,
	201, 85, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 206, 99, 207, 208, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 209, 105, 106, 210, 211, 0, 0,
	0, 107, 108, 212, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 213, 0, 214, 0, 112, 113, 114,
	215, 216, 0, 0, 117, 0, 115, 0, 0, 116,
	217, 218, 219, 220, 0, 221, 0, 0, 118, 0,
	119, 120, 0, 0, 222, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 223, 134, 224,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 0,
	138, 0, 226, 139, 140, 141, 142, 0, 227, 143,
	228, 144, 0, 145, 146, 147, 229, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 230,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 0,
	163, 164, 0, 165, 232, 233, 166, 0, 172, 167,
	168, 169, 171, 234, 170, 235, 0, 173, 0, 174,
	175, 0, 236, 237, 238, 0, 0, 176, 239, 240,
	0, 177, 178, 179, 180, 75, 0, 181, 182, 183,
	0, 184, 0, 185, 186, 187, 241, 242, 0, 0,
	188, 78, 79, 0, 80, 189, 190, 191, 192, 193,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 1018,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 215, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 75, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 241, 242, 0, 0, 188, 78, 79, 0,
	80, 189, 190, 191, 192, 193, 0, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 1576, 202, 203, 204, 0,
	205, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	0, 0, 0, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 215, 216, 0, 0, 117, 0, 115, 0,
	0, 116, 217, 218, 219, 220, 0, 221, 0, 0,
	118, 0, 119, 120, 0, 0, 222, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 0, 138, 0, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 230, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 0, 163, 164, 0, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	0, 174, 175, 0, 236, 237, 238, 0, 0, 176,
	239, 240, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 241, 242,
	0, 0, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 613, 602, 603, 600, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 675, 0, 0, 0, 193, 0, 0, 0, 0,
	81, 82, 194, 644, 196, 645, 83, 646, 647, 0,
	84, 200, 201, 85, 0, 0, 648, 649, 204, 0,
	205, 0, 271, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 272, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 650, 99, 651,
	652, 0, 100, 0, 101, 0, 0, 0, 643, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	608, 0, 0, 107, 108, 653, 0, 109, 0, 110,
	0, 0, 273, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 215, 216, 275, 0, 117, 0, 115, 0,
	274, 116, 654, 655, 656, 657, 0, 620, 0, 276,
	118, 277, 119, 120, 0, 0, 222, 278, 121, 279,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 280, 129, 130, 133, 131, 0, 132, 609, 223,
	134, 658, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 281, 138, 282, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 659, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 283, 155,
	156, 230, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 0, 163, 164, 284, 165, 660, 233, 166, 0,
	172, 167, 168, 169, 171, 661, 170, 235, 0, 173,
	0, 174, 175, 0, 236, 662, 663, 0, 0, 176,
	239, 240, 607, 177, 178, 179, 180, 75, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 241, 664,
	0, 0, 188, 78, 79, 0, 80, 189, 190, 191,
	192, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 776, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 775, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 75, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	779, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 493, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	779, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 271, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	272, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 273, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	275, 0, 117, 0, 115, 0, 274, 116, 217, 218,
	219, 220, 0, 221, 0, 276, 118, 277, 119, 120,
	0, 0, 222, 278, 121, 279, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 280, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 281, 138, 282,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 283, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	284, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 75, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 78,
	79, 0, 80, 189, 190, 191, 192, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 0, 202, 203,
	204, 982, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 980, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 1087, 0, 107, 108, 212, 0, 109,
	0, 110, 985, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 215, 216, 0, 0, 117, 1085,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 984, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 163, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 75,
	1086, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 0, 0, 188, 78, 79, 0, 80, 189,
	190, 191, 192, 193, 0, 0, 0, 0, 81, 82,
	194, 195, 196, 197, 83, 198, 199, 0, 84, 200,
	201, 85, 0, 0, 202, 203, 204, 982, 205, 0,
	0, 977, 86, 87, 88, 0, 89, 980, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 206, 99, 207, 208, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 209, 105, 106, 210, 211, 0, 0,
	0, 107, 108, 212, 0, 109, 0, 110, 985, 0,
	0, 0, 111, 213, 0, 214, 0, 112, 113, 114,
	976, 216, 0, 0, 117, 0, 115, 0, 0, 116,
	217, 218, 219, 220, 0, 221, 0, 0, 118, 0,
	119, 120, 0, 0, 222, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 223, 134, 224,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 0,
	138, 0, 226, 139, 140, 141, 142, 0, 227, 143,
	228, 144, 984, 145, 146, 147, 229, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 230,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 0,
	163, 164, 0, 165, 232, 233, 166, 0, 172, 167,
	168, 169, 171, 234, 170, 235, 0, 173, 0, 174,
	175, 0, 236, 237, 238, 0, 0, 176, 239, 240,
	0, 177, 178, 179, 180, 75, 983, 181, 182, 183,
	0, 184, 0, 185, 186, 187, 241, 242, 0, 0,
	188, 78, 79, 0, 80, 189, 190, 191, 192, 193,
	0, 1354, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 215, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 75, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 241, 242, 0, 0, 188, 78, 79, 0,
	80, 189, 190, 191, 192, 193, 0, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	0, 0, 0, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 215, 216, 0, 0, 117, 0, 115, 0,
	0, 116, 217, 218, 219, 220, 0, 221, 0, 0,
	118, 0, 119, 120, 0, 0, 222, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 0, 454, 0, 0, 137,
	225, 0, 138, 0, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 230, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 0, 163, 164, 0, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	0, 174, 175, 0, 236, 237, 238, 0, 0, 176,
	239, 240, 0, 177, 178, 179, 180, 75, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 241, 242,
	0, 0, 188, 78, 79, 0, 80, 189, 190, 191,
	192, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 726, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 454, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 75, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 78,
	79, 505, 80, 189, 190, 191, 192, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 215, 216, 0, 0, 117, 0,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 163, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 75,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 0, 0, 188, 78, 79, 0, 80, 189,
	190, 191, 192, 193, 0, 0, 0, 0, 81, 82,
	194, 195, 196, 197, 83, 198, 199, 0, 84, 200,
	201, 85, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 206, 99, 207, 208, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 209, 105, 106, 210, 211, 0, 0,
	0, 107, 108, 212, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 213, 0, 214, 0, 112, 113, 114,
	466, 216, 0, 0, 117, 0, 115, 0, 0, 116,
	217, 218, 219, 220, 0, 221, 0, 0, 118, 0,
	119, 120, 0, 0, 222, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 223, 134, 224,
	135, 136, 0, 0, 454, 0, 0, 137, 225, 0,
	138, 0, 226, 139, 140, 141, 142, 0, 227, 143,
	228, 144, 0, 145, 146, 147, 229, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 230,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 0,
	163, 164, 0, 165, 232, 233, 166, 0, 172, 167,
	168, 169, 171, 234, 170, 235, 0, 173, 0, 174,
	175, 0, 236, 237, 238, 0, 0, 176, 239, 240,
	0, 177, 178, 179, 180, 75, 0, 181, 182, 183,
	0, 184, 0, 185, 186, 187, 241, 242, 0, 0,
	188, 78, 79, 0, 80, 189, 190, 191, 192, 193,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 459, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	454, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 75, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 241, 242, 0, 0, 188, 78, 79, 369,
	80, 189, 190, 191, 192, 193, 0, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	0, 0, 0, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 215, 216, 0, 0, 117, 0, 115, 0,
	0, 116, 217, 218, 219, 220, 0, 221, 0, 0,
	118, 0, 119, 120, 0, 0, 222, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 0, 138, 0, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 368, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 230, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 0, 163, 164, 0, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	0, 174, 175, 0, 236, 237, 238, 0, 0, 176,
	239, 240, 0, 177, 178, 179, 180, 75, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 241, 242,
	0, 0, 188, 78, 79, 0, 80, 189, 190, 191,
	192, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 75, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 78,
	79, 0, 80, 189, 190, 191, 192, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 1264, 216, 0, 0, 117, 0,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 163, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 75,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 0, 0, 188, 78, 79, 0, 80, 189,
	190, 191, 192, 193, 0, 0, 0, 0, 81, 82,
	194, 195, 196, 197, 83, 198, 199, 0, 84, 200,
	201, 85, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 206, 99, 207, 208, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 209, 105, 106, 210, 211, 0, 0,
	0, 107, 108, 212, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 213, 0, 214, 0, 112, 113, 114,
	1262, 216, 0, 0, 117, 0, 115, 0, 0, 116,
	217, 218, 219, 220, 0, 221, 0, 0, 118, 0,
	119, 120, 0, 0, 222, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 223, 134, 224,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 0,
	138, 0, 226, 139, 140, 141, 142, 0, 227, 143,
	228, 144, 0, 145, 146, 147, 229, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 230,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 0,
	163, 164, 0, 165, 232, 233, 166, 0, 172, 167,
	168, 169, 171, 234, 170, 235, 0, 173, 0, 174,
	175, 0, 236, 237, 238, 0, 0, 176, 239, 240,
	0, 177, 178, 179, 180, 75, 0, 181, 182, 183,
	0, 184, 0, 185, 186, 187, 241, 242, 0, 0,
	188, 78, 79, 0, 80, 189, 190, 191, 192, 193,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 1251, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 75, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 241, 242, 0, 0, 188, 78, 79, 0,
	80, 189, 190, 191, 192, 193, 0, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	0, 0, 0, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 846, 216, 0, 0, 117, 0, 115, 0,
	0, 116, 217, 218, 219, 220, 0, 221, 0, 0,
	118, 0, 119, 120, 0, 0, 222, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 0, 138, 0, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 230, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 0, 163, 164, 0, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	0, 174, 175, 0, 236, 237, 238, 0, 0, 176,
	239, 240, 0, 177, 178, 179, 180, 75, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 241, 242,
	0, 0, 188, 78, 79, 0, 80, 189, 190, 191,
	192, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	383, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 75, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 78,
	79, 0, 80, 189, 190, 191, 192, 193, 0, 711,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 215, 216, 0, 0, 117, 0,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 0, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 75,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 0, 0, 188, 78, 79, 0, 80, 189,
	190, 191, 192, 193, 0, 0, 0, 0, 81, 82,
	194, 195, 196, 197, 83, 198, 199, 0, 84, 200,
	201, 85, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 206, 99, 207, 208, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 209, 105, 106, 210, 211, 0, 0,
	0, 107, 108, 212, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 213, 0, 214, 0, 112, 113, 114,
	556, 216, 0, 0, 117, 0, 115, 0, 0, 116,
	217, 218, 219, 220, 0, 221, 0, 0, 118, 0,
	119, 120, 0, 0, 222, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 223, 134, 224,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 0,
	138, 0, 226, 139, 140, 141, 142, 0, 227, 143,
	228, 144, 0, 145, 146, 147, 229, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 230,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 0,
	163, 164, 0, 165, 232, 233, 166, 0, 172, 167,
	168, 169, 171, 234, 170, 235, 0, 173, 0, 174,
	175, 0, 236, 237, 238, 0, 0, 176, 239, 240,
	0, 177, 178, 179, 180, 75, 0, 181, 182, 183,
	0, 184, 0, 185, 186, 187, 241, 242, 0, 0,
	188, 78, 79, 0, 80, 189, 190, 191, 192, 193,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 551, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 75, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 241, 242, 0, 0, 188, 78, 79, 0,
	80, 189, 190, 191, 192, 193, 0, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 0, 202, 203, 511, 0,
	205, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	0, 0, 0, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 215, 216, 0, 0, 117, 0, 115, 0,
	0, 116, 217, 218, 219, 220, 0, 221, 0, 0,
	118, 0, 119, 120, 0, 0, 222, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	394, 0, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 0, 138, 0, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 230, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 0, 163, 164, 0, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	0, 174, 175, 0, 393, 237, 238, 0, 0, 389,
	239, 240, 0, 177, 178, 179, 180, 75, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 241, 242,
	0, 0, 188, 78, 79, 0, 80, 189, 190, 191,
	192, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 394, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	393, 237, 238, 0, 0, 389, 239, 240, 0, 177,
	178, 179, 180, 75, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 78,
	79, 0, 80, 189, 190, 191, 192, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 489, 216, 0, 0, 117, 0,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 163, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 75,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 0, 0, 188, 78, 79, 0, 80, 189,
	190, 191, 192, 193, 0, 0, 0, 0, 81, 82,
	194, 195, 196, 197, 83, 198, 199, 0, 84, 200,
	201, 85, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 206, 99, 207, 208, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 209, 105, 106, 210, 211, 0, 0,
	0, 107, 108, 212, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 213, 0, 214, 0, 112, 113, 114,
	486, 216, 0, 0, 117, 0, 115, 0, 0, 116,
	217, 218, 219, 220, 0, 221, 0, 0, 118, 0,
	119, 120, 0, 0, 222, 0, 121, 0, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 0,
	129, 130, 133, 131, 0, 132, 0, 223, 134, 224,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 0,
	138, 0, 226, 139, 140, 141, 142, 0, 227, 143,
	228, 144, 0, 145, 146, 147, 229, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 230,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 0,
	163, 164, 0, 165, 232, 233, 166, 0, 172, 167,
	168, 169, 171, 234, 170, 235, 0, 173, 0, 174,
	175, 0, 236, 237, 238, 0, 0, 176, 239, 240,
	0, 177, 178, 179, 180, 75, 0, 181, 182, 183,
	0, 184, 0, 185, 186, 187, 241, 242, 0, 0,
	188, 78, 79, 0, 80, 189, 190, 191, 192, 193,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 483, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 141, 142, 0, 227, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 75, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 241, 242, 0, 0, 188, 78, 79, 0,
	80, 189, 190, 191, 192, 193, 0, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	0, 0, 0, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 481, 216, 0, 0, 117, 0, 115, 0,
	0, 116, 217, 218, 219, 220, 0, 221, 0, 0,
	118, 0, 119, 120, 0, 0, 222, 0, 121, 0,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 0, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 0, 138, 0, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 0, 155,
	156, 230, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 0, 163, 164, 0, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	0, 174, 175, 0, 236, 237, 238, 0, 0, 176,
	239, 240, 0, 177, 178, 179, 180, 75, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 241, 242,
	0, 0, 188, 78, 79, 0, 80, 189, 190, 191,
	192, 193, 0, 0, 0, 0, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 462, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 75, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 78,
	79, 0, 80, 189, 190, 191, 192, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 215, 216, 0, 0, 117, 0,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 443, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 163, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 75,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 0, 0, 188, 78, 79, 0, 80, 189,
	190, 191, 192, 193, 0, 0, 0, 0, 81, 82,
	194, 195, 196, 197, 83, 198, 199, 0, 84, 200,
	201, 85, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 206, 99, 207, 208, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 209, 105, 106, 210, 211, 0, 0,
	0, 107, 108, 212, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 213, 0, 214, 0, 112, 113, 114,
	215, 216, 0, 0, 117, 0, 115, 0, 0, 116,
	217, 218, 219, 220, 0, 221, 0, 0, 118, 0,
	119, 120, 0, 0, 222, 0, 121, 0, 0, 386,
	0, 0, 123, 0, 124, 125, 126, 127, 394, 0,
	129, 130, 133, 131, 0, 132, 0, 223, 134, 224,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 0,
	138, 0, 226, 139, 140, 141, 142, 0, 227, 143,
	228, 144, 0, 145, 146, 147, 229, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 0, 155, 156, 388,
	157, 0, 158, 159, 160, 0, 231, 161, 387, 0,
	163, 164, 0, 165, 232, 233, 166, 0, 172, 167,
	168, 169, 171, 234, 170, 235, 0, 173, 0, 174,
	175, 0, 393, 237, 238, 0, 0, 389, 239, 240,
	0, 177, 178, 179, 180, 75, 0, 181, 182, 183,
	0, 184, 0, 185, 186, 187, 241, 242, 0, 0,
	188, 78, 79, 0, 80, 189, 190, 191, 192, 193,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 210, 211, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 213,
	0, 214, 0, 112, 113, 114, 215, 216, 0, 0,
	117, 0, 115, 0, 0, 116, 217, 218, 219, 220,
	0, 221, 0, 0, 118, 0, 119, 120, 0, 0,
	222, 0, 121, 0, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 0, 129, 130, 133, 131,
	0, 132, 0, 223, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 0, 138, 0, 226, 139,
	140, 0, 142, 0, 227, 143, 228, 144, 0, 145,
	0, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 0, 155, 156, 230, 0, 0, 158, 159,
	160, 0, 231, 161, 162, 0, 163, 164, 0, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 235, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 239, 240, 0, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 0, 184, 0, 185,
	186, 187, 241, 242, 0, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 872, 873, 0, 892, 893,
	894, 902, 903, 904, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 875, 0,
	906, 872, 873, 0, 892, 893, 894, 902, 903, 904,
	0, 0, 0, 0, 0, 0, 0, 895, 0, 874,
	0, 0, 0, 0, 875, 889, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 907, 0, 0, 0, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 899, 907,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 896, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 896, 0, 1412, 1413, 0, 1430, 1431, 1432, 0,
	0, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 872, 873, 0, 892, 893, 894,
	902, 903, 904, 0, 0, 0, 0, 891, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 875, 900, 906,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 0, 898,
	0, 0, 886, 887, 888, 0, 885, 882, 883, 884,
	876, 877, 878, 879, 881, 0, 901, 0, 0, 0,
	0, 0, 1418, 1454, 0, 898, 0, 0, 886, 887,
	888, 0, 885, 882, 883, 884, 876, 877, 878, 879,
	881, 0, 901, 880, 0, 0, 0, 872, 873, 1453,
	892, 893, 894, 902, 903, 904, 0, 0, 0, 0,
	0, 899, 907, 895, 0, 0, 0, 0, 0, 0,
	875, 1428, 906, 0, 0, 0, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 874, 890, 0, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 0, 872, 873, 0,
	892, 893, 894, 902, 903, 904, 880, 0, 0, 0,
	891, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	875, 900, 906, 0, 899, 907, 0, 0, 0, 872,
	873, 0, 892, 893, 894, 902, 903, 904, 0, 905,
	0, 874, 0, 0, 0, 895, 0, 889, 0, 897,
	0, 0, 875, 0, 906, 890, 0, 0, 0, 0,
	1424, 1425, 1426, 0, 1423, 1420, 1421, 1422, 1414, 1415,
	1416, 1417, 1419, 874, 0, 0, 0, 896, 898, 889,
	0, 886, 887, 888, 0, 885, 882, 883, 884, 876,
	877, 878, 879, 881, 0, 901, 880, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 899, 907, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 880, 905,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 0, 890, 899, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 0, 0, 0, 0, 0, 896, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 898, 0, 0, 886, 887, 888, 0, 885, 882,
	883, 884, 876, 877, 878, 879, 881, 0, 901, 896,
	0, 0, 0, 891, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	872, 873, 0, 892, 893, 894, 902, 903, 904, 0,
	0, 0, 0, 0, 0, 891, 895, 0, 0, 0,
	0, 0, 0, 875, 0, 906, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 0, 0, 0,
	889, 898, 0, 0, 886, 887, 888, 0, 885, 882,
	883, 884, 876, 877, 878, 879, 881, 0, 901, 0,
	1412, 1413, 1861, 1430, 1431, 1432, 0, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 886, 887, 888, 0,
	885, 882, 883, 884, 876, 877, 878, 879, 881, 880,
	901, 0, 0, 0, 1859, 872, 873, 0, 892, 893,
	894, 902, 903, 904, 0, 0, 0, 899, 907, 0,
	1427, 895, 0, 0, 0, 0, 0, 0, 875, 0,
	906, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 0, 890, 874,
	0, 0, 0, 0, 0, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1418,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 872, 873, 0, 892, 893, 894, 902, 903, 904,
	0, 0, 1433, 0, 880, 0, 891, 895, 0, 0,
	0, 0, 0, 0, 875, 0, 906, 900, 1428, 0,
	0, 0, 899, 907, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 905, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 896, 1429, 886, 887, 888,
	0, 885, 882, 883, 884, 876, 877, 878, 879, 881,
	880, 901, 0, 0, 0, 1838, 872, 873, 0, 892,
	893, 894, 902, 903, 904, 0, 0, 0, 899, 907,
	0, 891, 895, 0, 0, 0, 0, 0, 0, 875,
	0, 906, 900, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 0, 0, 890,
	874, 0, 0, 0, 0, 0, 889, 1424, 1425, 1426,
	0, 1423, 1420, 1421, 1422, 1414, 1415, 1416, 1417, 1419,
	0, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 886, 887, 888, 0, 885, 882, 883, 884,
	876, 877, 878, 879, 881, 880, 901, 891, 0, 0,
	1813, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 899, 907, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 896, 0, 886, 887,
	888, 0, 885, 882, 883, 884, 876, 877, 878, 879,
	881, 0, 901, 0, 0, 0, 1808, 872, 873, 0,
	892, 893, 894, 902, 903, 904, 0, 0, 0, 0,
	0, 0, 891, 895, 0, 0, 0, 0, 0, 0,
	875, 0, 906, 900, 0, 0, 872, 873, 0, 892,
	893, 894, 902, 903, 904, 0, 0, 0, 0, 0,
	0, 874, 895, 0, 0, 0, 0, 889, 0, 875,
	0, 906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	898, 0, 0, 886, 887, 888, 0, 885, 882, 883,
	884, 876, 877, 878, 879, 881, 880, 901, 0, 0,
	0, 1804, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 907, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 0, 899, 907, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 897, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 872, 873, 0,
	892, 893, 894, 902, 903, 904, 0, 0, 0, 0,
	0, 0, 891, 895, 0, 0, 0, 0, 0, 0,
	875, 0, 906, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 0, 889, 0, 0,
	0, 898, 0, 0, 886, 887, 888, 0, 885, 882,
	883, 884, 876, 877, 878, 879, 881, 0, 901, 0,
	0, 0, 1739, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 886, 887, 888, 0, 885, 882, 883,
	884, 876, 877, 878, 879, 881, 880, 901, 0, 0,
	0, 1738, 872, 873, 0, 892, 893, 894, 902, 903,
	904, 0, 0, 0, 899, 907, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 875, 0, 906, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 0, 0, 0, 890, 874, 0, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 873,
	0, 892, 893, 894, 902, 903, 904, 0, 0, 0,
	0, 880, 0, 891, 895, 0, 0, 0, 0, 0,
	0, 875, 0, 906, 900, 0, 0, 0, 0, 899,
	907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 905, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 897, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 896, 0, 886, 887, 888, 0, 885, 882,
	883, 884, 876, 877, 878, 879, 881, 880, 901, 0,
	0, 0, 1645, 872, 873, 0, 892, 893, 894, 902,
	903, 904, 0, 0, 0, 899, 907, 0, 891, 895,
	0, 0, 0, 0, 0, 0, 875, 0, 906, 900,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 0, 0, 890, 874, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 0, 0, 886,
	887, 888, 0, 885, 882, 883, 884, 876, 877, 878,
	879, 881, 880, 901, 891, 0, 0, 1579, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	899, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 896, 0, 886, 887, 888, 0, 885,
	882, 883, 884, 876, 877, 878, 879, 881, 0, 901,
	0, 0, 0, 1563, 872, 873, 0, 892, 893, 894,
	902, 903, 904, 0, 0, 0, 0, 0, 0, 891,
	895, 0, 0, 0, 0, 0, 0, 875, 0, 906,
	900, 0, 0, 872, 873, 0, 892, 893, 894, 902,
	903, 904, 0, 0, 0, 0, 0, 0, 874, 895,
	0, 0, 0, 0, 889, 0, 875, 0, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 898, 0, 0,
	886, 887, 888, 0, 885, 882, 883, 884, 876, 877,
	878, 879, 881, 880, 901, 0, 0, 0, 1170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 880, 1932, 0, 0, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	899, 907, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 897, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 0, 0, 1931, 0, 0,
	0, 900, 0, 0, 872, 873, 0, 892, 893, 894,
	902, 903, 904, 0, 0, 0, 0, 0, 0, 891,
	895, 0, 0, 0, 0, 0, 0, 875, 0, 906,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 898, 0,
	0, 886, 887, 888, 0, 885, 882, 883, 884, 876,
	877, 878, 879, 881, 0, 901, 0, 1003, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 0,
	886, 887, 888, 0, 885, 882, 883, 884, 876, 877,
	878, 879, 881, 880, 901, 1444, 0, 0, 1443, 872,
	873, 0, 892, 893, 894, 902, 903, 904, 0, 0,
	0, 899, 907, 0, 0, 895, 0, 0, 0, 0,
	1102, 0, 875, 0, 906, 0, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 890, 874, 0, 0, 0, 0, 0, 889,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 909,
	0, 0, 0, 0, 0, 872, 873, 0, 892, 893,
	894, 902, 903, 904, 0, 0, 0, 0, 880, 0,
	891, 895, 0, 0, 0, 908, 0, 0, 875, 0,
	906, 900, 0, 0, 0, 0, 899, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 905, 0, 0, 0, 889, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 896,
	0, 886, 887, 888, 0, 885, 882, 883, 884, 876,
	877, 878, 879, 881, 880, 901, 0, 0, 0, 0,
	872, 873, 0, 892, 893, 894, 902, 903, 904, 0,
	0, 0, 899, 907, 0, 891, 895, 0, 0, 0,
	0, 0, 0, 875, 0, 906, 900, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 890, 874, 0, 0, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 886, 887, 888, 0,
	885, 882, 883, 884, 876, 877, 878, 879, 881, 880,
	901, 891, 0, 872, 873, 0, 892, 893, 894, 902,
	903, 904, 900, 0, 0, 0, 0, 899, 907, 895,
	0, 0, 0, 0, 0, 0, 875, 0, 906, 0,
	0, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 0, 874, 890, 0,
	0, 0, 0, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	896, 438, 886, 887, 888, 0, 885, 882, 883, 884,
	876, 877, 878, 879, 881, 0, 901, 0, 0, 0,
	0, 0, 0, 872, 873, 0, 892, 893, 894, 902,
	903, 904, 880, 0, 0, 0, 891, 0, 0, 895,
	0, 0, 0, 0, 0, 0, 875, 900, 906, 0,
	899, 907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 0, 874, 0, 0,
	0, 0, 0, 889, 0, 897, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 898, 0, 0, 886, 887, 888,
	0, 885, 882, 883, 884, 876, 877, 878, 879, 881,
	0, 901, 880, 0, 0, 0, 0, 1450, 872, 873,
	0, 892, 893, 894, 902, 903, 904, 0, 0, 891,
	899, 907, 0, 0, 895, 0, 0, 0, 1445, 0,
	900, 875, 0, 906, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 0, 1573,
	0, 890, 874, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 0,
	886, 887, 888, 0, 885, 882, 883, 884, 876, 877,
	878, 879, 881, 0, 901, 0, 0, 880, 0, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 899, 907, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 896, 0,
	886, 887, 888, 0, 885, 882, 883, 884, 876, 877,
	878, 879, 881, 0, 901, 0, 0, 0, 0, 872,
	873, 0, 892, 893, 894, 902, 903, 904, 0, 0,
	0, 0, 0, 0, 891, 895, 0, 0, 0, 0,
	0, 0, 875, 0, 906, 900, 0, 0, 872, 873,
	0, 892, 893, 894, 902, 903, 904, 0, 0, 0,
	0, 0, 0, 874, 895, 0, 0, 0, 1403, 889,
	0, 875, 0, 906, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 898, 0, 0, 886, 887, 888, 0, 885,
	882, 883, 884, 876, 877, 878, 879, 881, 880, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 907, 1412, 1413,
	0, 1430, 1431, 1432, 0, 0, 0, 880, 0, 0,
	0, 905, 0, 0, 1708, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 899, 907, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 1427, 896,
	897, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 1410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 1418, 0, 872,
	873, 0, 892, 893, 894, 902, 903, 904, 0, 0,
	0, 0, 0, 0, 891, 895, 0, 0, 0, 0,
	0, 0, 875, 0, 906, 900, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 1428, 0, 0, 889,
	0, 0, 0, 898, 0, 0, 886, 887, 888, 0,
	885, 882, 883, 884, 876, 877, 878, 879, 881, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 886, 887, 888, 0, 885,
	882, 883, 884, 876, 877, 878, 879, 881, 880, 901,
	0, 0, 872, 873, 1429, 892, 893, 894, 902, 903,
	904, 0, 0, 0, 0, 0, 899, 907, 895, 0,
	0, 0, 0, 0, 0, 875, 0, 906, 0, 0,
	0, 905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 0, 874, 890, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 1424, 1425, 1426, 0, 1423,
	1420, 1421, 1422, 1414, 1415, 1416, 1417, 1419, 0, 0,
	0, 0, 872, 873, 0, 892, 893, 894, 902, 903,
	904, 880, 0, 0, 0, 891, 0, 1412, 1413, 0,
	1430, 1431, 1432, 0, 0, 875, 900, 906, 0, 899,
	907, 0, 0, 1558, 872, 873, 0, 892, 893, 894,
	902, 903, 904, 0, 905, 0, 874, 0, 0, 0,
	0, 0, 889, 0, 897, 0, 0, 875, 0, 906,
	890, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	0, 0, 0, 898, 889, 0, 886, 887, 888, 0,
	885, 882, 883, 884, 876, 877, 878, 879, 881, 0,
	901, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 891, 899,
	907, 1412, 1413, 0, 1430, 1431, 1432, 0, 0, 900,
	0, 0, 0, 880, 905, 0, 0, 1557, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 0, 0, 1433,
	890, 899, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 898, 0, 0, 886,
	887, 888, 0, 885, 882, 883, 884, 876, 877, 878,
	879, 881, 0, 901, 0, 0, 0, 0, 891, 0,
	1412, 1413, 0, 1430, 1431, 1432, 0, 0, 0, 900,
	1418, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 1433, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	0, 0, 0, 0, 0, 0, 898, 0, 0, 886,
	887, 888, 0, 885, 882, 883, 884, 876, 877, 878,
	879, 881, 0, 901, 1424, 1425, 1426, 0, 1423, 1420,
	1421, 1422, 1414, 1415, 1416, 1417, 1419, 0, 898, 1418,
	0, 886, 887, 888, 0, 885, 882, 883, 884, 876,
	877, 878, 879, 881, 0, 901, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 1425,
	1426, 0, 1423, 1420, 1421, 1422, 1414, 1415, 1416, 1417,
	1419, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 1425, 1426,
	0, 1423, 1420, 1421, 1422, 1414, 1415, 1416, 1417, 1419,
}
var sqlPact = [...]int{

	130, -1000, 59, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 678, 16753, -1000,
	-1000, -1000, -1000, -1000, -1000, 660, 667, 328, 4462, 16753,
	16753, 16497, 1346, 1346, 18033, -1000, -1000, 21105, -1000, 2929,
	491, 499, 491, 491, 487, 18033, 571, 750, 169, -1000,
	888, 21, 20849, 16753, 1385, 41, 15217, 338, 130, 16241,
	20593, 16753, 15985, 265, 74, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1193, 1086, 1074, 15217, 20337, 20081, 19825,
	19569, -1000, 10442, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 682, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 344, 343, -1000, 15729, -1000,
	895, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 893, -1000, 16753, -1000, -1000, 19313, 19057, 341, 958,
	-1000, -1000, 581, 391, 1422, -1000, 61, -1000, -1000, -1000,
	1189, -1000, 892, 1186, 1185, 1184, 1178, 1177, 1176, 389,
	960, 457, -1000, 958, -1000, 958, -1000, -1000, -1000, 551,
	18033, -1000, 15217, -1000, 18801, 16753, 16753, 1111, 18545, -1000,
	888, -1000, -1000, -1000, 952, 1382, 1382, 1382, 1415, 176,
	174, 169, 14, 16753, -1000, 339, 14, 7081, 7081, -1000,
	-1000, 338, -1000, 361, 13117, -1000, 7645, -1000, 1057, 1291,
	370, 703, 1287, -124, 766, 759, 1283, 644, 12332, 74,
	-1000, -1000, -1000, 9058, 4182, 15217, 16753, 16753, 672, 18289,
	-1000, 1276, 125, 1262, -1000, 123, 1256, -1000, 123, 1252,
	53, -1000, -1000, -1000, -1000, -1000, -1000, 338, 15473, 16753,
	1474, 3618, -1000, 9058, -1000, -1000, 13653, 965, 13653, -1000,
	-1000, 1472, -1000, 9058, -1000, 36, 26, 1046, 1020, 10993,
	10724, 1348, 1119, -1000, -1000, -1000, 54, 4462, 16753, 1204,
	13653, 16753, 16753, 16753, 16753, 16753, 16753, -1000, 1043, -1000,
	16753, 16753, -1000, 22, 20, -1000, 18033, -1000, 127, -1000,
	337, 997, 404, 170, 17777, 1239, 994, -1000, 952, -1000,
	891, 1031, 8212, 9058, 169, -1000, -1000, 169, 169, 9058,
	-1000, -1000, 16753, 14, 1468, 16753, 64, -1000, 23875, -1000,
	-1000, 9058, 9058, 9058, 9058, 9058, 844, -1000, -1000, -1000,
	5326, -1000, -1000, 74, 336, 135, -1000, -1000, 335, 74,
	-1000, -1000, -1000, -1000, 334, 1555, 465, -1000, -1000, -1000,
	9058, 395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1200, 333, 332, -1000, -1000, -1000, -1000, 331, 330,
	329, 327, 326, 325, 320, 318, 317, 313, 308, 307,
	306, 305, 304, 822, -1000, 419, -1000, -1000, 419, 419,
	-1000, 298, 298, 301, -1000, -1000, -1000, -1000, 298, -1000,
	-1000, -1000, 388, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	302, 64, -1000, -1000, -1000, 16753, 49, -1000, 24689, -1000,
	-54, 688, -1000, 14705, 1379, 1375, 1381, 15217, 1433, 1428,
	548, 16753, 16753, 545, 541, 15217, -1000, 1175, 38, -1000,
	-1000, 23464, -158, -1000, -1000, 410, 132, 1464, 132, 12605,
	-1000, 16753, 16753, -1000, 16753, -1000, -1000, 16753, -1000, 16753,
	16753, -1000, 16753, 282, 14193, 890, 1251, 648, 21, 33,
	-1000, 1476, -1000, -1000, -1000, -1000, 96, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 301, 822, 298, 298, 298, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 388, -1000, -1000, 419, 419, 419, -1000,
	-1000, 31, 24689, 540, -11, 13923, 16753, -1000, 23, -1000,
	-1000, 1174, 478, 19, 816, 1077, 911, -1000, -1000, -1000,
	-1000, 12, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1511, -1000, -1000, -1000, -1000, 1531, 12, -1000,
	-1000, -1000, -1000, -1000, 1554, -1000, -1000, -1000, 4462, -1000,
	-1000, -1000, 16753, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 816, 1077, -1000, -1000, 15217, 14449, 1455,
	1250, 834, -1000, 1451, 16753, 887, 991, -1000, -1000, 374,
	1248, -1000, -1000, -1000, -1000, 24689, -1000, 24689, 786, 1096,
	-1000, 1096, -1, -1000, 23789, -1000, 287, 13, -1000, 410,
	7081, 12076, 3618, 3618, 16753, 563, 9058, 9058, 9058, 9058,
	9058, 9058, 9058, 9058, 9058, 9058, 9058, 9058, 9058, 9058,
	9058, 9058, 9058, 9058, 9058, 9058, 9058, 9058, 948, 9058,
	539, 9058, 9058, 9058, 9058, 918, 803, 262, 4462, -1000,
	645, 645, 645, 24882, 24882, 218, 74, 57, 23273, -5,
	74, -1000, -1000, 6796, 6494, 74, 4742, -1000, 1076, 1530,
	414, 24689, 1212, 1147, 286, 163, 162, 9058, 9058, 9340,
	9340, 9058, 9622, 9058, 9058, 5608, 9058, 9058, 9058, 9058,
	9058, 9058, -1000, 285, -1000, -1000, -1000, -1000, 1527, -1000,
	-1000, 1524, -1000, 559, 556, 1522, 410, 160, 7645, -1000,
	890, 16753, 16753, 16753, -1000, -1000, 985, 17521, 982, 3618,
	16753, -1000, 281, 279, 1068, 1066, 16753, 16753, 17265, 17009,
	16753, 971, 276, 273, 16753, 751, -1000, 16753, 16753, 744,
	641, 1173, 16753, -1000, 9058, 710, 9058, 797, -1000, 11531,
	426, 16753, 722, 60, -1000, -1000, -1000, 373, 16753, -1000,
	-1000, -1000, 125, -1000, 123, 123, -1000, -1000, 15217, -1000,
	-1000, -1000, -1000, -1000, -1000, 3618, 351, 350, -1000, 1521,
	538, -1000, 537, 531, 529, -1000, 270, -1000, 9058, 16753,
	13923, -11, -22, -1000, -1000, 16753, 1077, -1000, -1000, -1000,
	-1000, 706, -1000, 802, -1000, 11262, -1000, -1000, -1000, 1076,
	-1000, -63, -1000, -1000, -1000, -1000, 149, 11, -37, 3618,
	-1000, -1000, -1000, -1000, -1000, 16753, 300, 16753, 21, 16753,
	-1000, 1552, 21, 16753, 1245, 1549, 16753, -1000, -1000, -1000,
	9058, -1000, -1000, -1000, 21, 16753, -1000, 1144, -1000, -95,
	1509, -142, 14961, -1000, 3367, -1000, -1000, -1000, 387, 738,
	738, 461, 461, 461, 461, 2348, 2348, 2569, 951, 2666,
	2666, 2666, 165, 299, 299, 2666, 2666, 2666, 24882, 24792,
	1798, 9058, 9058, 528, 801, 262, 1798, 9058, 1506, 1798,
	1798, 1798, -1000, 1235, -1000, -1000, -1000, 1163, 261, 9622,
	9622, -1000, -1000, -1000, 5326, -1000, -1000, 259, 9058, -1000,
	-1000, 9058, -23, -42, -1000, -1000, 9, -1000, -1000, -18,
	9058, 9058, 9058, 148, -1000, 147, 598, -1000, 9058, 847,
	248, 245, 9058, -1000, -1000, 24498, 21957, 143, 1162, -116,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 142, 141, 24469,
	-116, 140, 22340, -1000, 9622, 9622, 9622, 5326, 242, 138,
	23684, -116, 24278, 7927, 7927, 7927, 136, 24173, 9058, -116,
	21854, 21661, 21635, 3, -4, -6, 1520, -10, 134, 381,
	376, 133, 1144, -1000, -1000, -1000, -1000, 525, 517, 1242,
	-1000, 976, -1000, 436, -1000, 686, 9058, 16753, 239, 234,
	793, -1000, 1241, 917, 1238, 917, -1000, -54, 684, 9058,
	9058, -1000, 507, -1000, -1000, 504, -1000, 640, -1000, 348,
	24689, -1000, 7081, 24689, -1000, 717, 1383, -12, -1000, -1000,
	7081, 410, 12605, 12076, 7645, -14, -1000, -1000, -1000, 890,
	-1000, 565, 1519, 119, 1007, 889, 758, 677, 1518, 24689,
	-63, -1000, -63, -1000, -1000, -1000, -1000, -1000, -1000, 16753,
	1125, -1000, 14449, 226, 16753, 223, -1000, 222, -1000, -1000,
	220, 16753, -1000, 1239, -1000, 117, -1000, 1139, 1413, -1000,
	12076, 907, 1075, 1072, 12076, 1339, 849, 849, 849, -1000,
	14961, 3891, -1000, -1000, 16753, 219, 11803, 114, 1509, 9058,
	1798, 1798, 9058, 9622, 9622, -1000, 1798, -1000, -1000, -1000,
	-1000, 1158, 213, 9058, 3618, 25001, 24897, -21, 6192, -70,
	74, 23168, -1000, -1000, 135, -1000, 113, 7363, -1000, 23980,
	-20, -20, -1000, 1540, 1297, -1000, 9058, 24083, -1000, 12861,
	412, 857, 23082, 3618, 3618, -1000, 9058, -1000, -1000, 1156,
	9058, -1000, 3618, 3618, 9622, 9622, 9622, 9622, 9622, 9622,
	9622, 9622, 9622, 9622, 9622, 9622, 9622, 9622, 9622, 9622,
	9622, 9622, 9622, 1082, 9622, 1504, 1504, 1504, -80, 5890,
	-1000, 1198, 1156, 9058, 9058, 3618, 111, 109, 105, -1000,
	9058, -116, 9058, 9058, 9058, -1000, -1000, -1000, 102, -1000,
	1515, -1000, -1000, -1000, -1000, 1139, 16753, 16753, 16753, 1232,
	-1000, 1908, -1000, 22977, -27, 16753, 16753, -1000, 1056, 1095,
	459, 16753, -1000, 16753, -1000, 16753, 16753, 16753, -29, -38,
	16753, 16753, -1000, -1000, -91, 7081, 235, 21, -91, 710,
	-1000, -81, -1000, 372, -1000, 347, 346, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 101, -1000, -1000, 1127, -1000,
	10186, 212, 16753, 14449, 1448, 10186, 886, -1000, -1000, 407,
	9058, 9058, 1509, 584, 12076, 12076, 1553, 1070, 12076, -1000,
	-1000, -1000, -1000, -1000, -1000, 1071, 210, 16753, 14961, 508,
	1798, 24588, 2738, 9058, 3618, 24914, -40, 9058, 9058, -1000,
	-45, -1000, 9058, -1000, -1000, 1535, 9058, 100, 97, 94,
	-1000, -1000, 24689, 9058, -1000, -1000, 21361, 9058, 93, -1000,
	92, 91, 24689, 1198, 24689, -1000, -1000, 749, 749, 1504,
	1504, 1504, 1504, 1081, 1081, 1317, 986, 568, 568, 568,
	608, 671, 671, 568, 568, 568, 1155, 990, 209, 25090,
	9058, -46, -1000, -1000, -1000, 24689, 24689, 90, -1000, -1000,
	-1000, -116, 2912, 22786, 22757, -1000, 88, 407, -1000, -1000,
	-1000, 16753, -1000, 16753, -1000, 16753, 16753, 1161, 961, -1000,
	-1000, 1059, 208, 9622, 16753, -1000, 765, -50, -65, 959,
	-1000, 941, 9058, -1000, 3618, 917, 917, -1000, 503, 502,
	-1000, -1000, -1000, -1000, -91, 1303, 16753, 1377, -1000, -1000,
	206, -1000, -1000, -1000, 840, -66, -1000, 190, 1396, 9058,
	-1000, -1000, 200, 10186, -71, 87, 21, -72, 16753, -1000,
	16753, 24689, -116, 511, -1000, 1553, -1000, 199, 9058, 12076,
	-1000, -153, -1000, 371, -1000, 16753, -73, -1000, 9058, 9058,
	24914, -82, -1000, 1798, 1798, -1000, 22566, -1000, 23980, -1000,
	-1000, -1000, 24689, 836, -1000, 22461, -1000, -1000, -1000, -1000,
	9622, 1153, 197, 3618, 22375, -1000, -1000, 9058, -1000, -1000,
	-1000, -1000, -1000, 1361, -1000, -1000, 16753, 972, -1000, -1000,
	9058, 25090, 189, 1125, 187, -1000, -1000, -1000, 782, -1000,
	-1000, 24689, 1398, -1000, -1000, 16753, 16753, 544, -84, 16753,
	-1000, -1000, 5044, 16753, 765, 10186, 1405, 74, 16753, 1405,
	22270, 4742, -94, -1000, 1125, -1000, 765, 186, -115, -1000,
	1443, 13397, -1000, 16753, 24689, -1000, 1071, -1000, 4462, -98,
	-1000, 1798, 1798, -1000, -1000, 86, 857, 1410, -1000, 21833,
	9622, 3618, -99, -1000, 22079, -1000, -1000, 1224, 22047, 1022,
	16753, -1000, 16753, 16753, 439, 16753, -1000, -1000, 657, -1000,
	410, -1000, 181, 1125, -1000, -1000, -1000, -1000, 1396, -18,
	765, -1000, 1125, 10186, 16753, 179, -1000, 178, 74, -100,
	-1000, -1000, -1000, -1000, 715, 9058, 21833, -104, -1000, -1000,
	1217, -1000, 863, 894, 85, -119, 170, -1000, 9058, -1000,
	12605, -1000, 16753, -1000, 1405, 80, 1125, -1000, -125, -1000,
	-1000, 9058, -1000, 78, 8776, 8776, -116, -1000, 16753, -1000,
	883, 875, 632, -1000, -1000, -1000, -1000, -1000, 1022, 24689,
	-105, -126, -1000, -1000, -1000, 765, -20, -1000, -1000, -1000,
	9904, 910, 701, 23493, -1000, -1000, -1000, 1324, -1000, 448,
	962, 962, 863, -1000, 876, 1125, 72, 1482, -1000, -1000,
	-1000, -1000, -1000, -1000, 1490, -1000, -1000, 1047, -1000, -1000,
	-1000, -1000, -1000, -1000, 1535, 8494, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1785, 1784, 1430, 132, 1782, 130, 1781, 1778, 1777,
	1773, 1772, 1771, 105, 128, 127, 133, 124, 1769, 90,
	1768, 1765, 1763, 103, 1761, 1760, 1758, 93, 1756, 1755,
	122, 113, 1753, 1748, 91, 24, 159, 2178, 140, 1746,
	1745, 1744, 12, 101, 66, 1743, 95, 1742, 1740, 57,
	1739, 98, 108, 887, 28, 1735, 1734, 139, 20, 17,
	202, 99, 149, 126, 135, 1728, 1727, 1724, 50, 1723,
	3, 1721, 1718, 16, 53, 11, 1716, 18, 44, 1715,
	1714, 121, 1712, 68, 100, 112, 62, 119, 282, 1709,
	46, 13, 77, 1708, 14, 82, 1707, 34, 76, 144,
	1701, 51, 150, 49, 33, 59, 104, 1699, 1695, 1693,
	80, 1690, 94, 65, 1687, 1685, 78, 1684, 136, 138,
	1683, 1682, 116, 1681, 1679, 1678, 157, 1677, 1676, 152,
	1675, 8, 38, 61, 9, 110, 107, 27, 102, 1674,
	19, 1672, 1446, 844, 770, 25, 60, 37, 83, 43,
	55, 15, 1671, 1669, 106, 1666, 1665, 1662, 1660, 1658,
	81, 1657, 74, 142, 47, 58, 92, 22, 54, 84,
	117, 147, 109, 1656, 1652, 111, 1651, 181, 1650, 1649,
	1432, 115, 1648, 1647, 1646, 1425, 1178, 1085, 575, 1644,
	1643, 1067, 1062, 1641, 1640, 123, 1639, 1638, 145, 200,
	31, 1635, 118, 1633, 96, 1631, 0, 36, 30, 1630,
	120, 79, 1629, 1628, 1626, 1625, 32, 2, 10, 5,
	6, 4, 52, 35, 1623, 1619, 134, 87, 1618, 1617,
	148, 1606, 1604, 1603, 26, 1601, 21, 1598, 23, 1588,
	1584, 7, 1, 137, 1582, 97, 1581, 1457, 1572, 146,
	1568, 1562, 1459, 85,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 87, 87, 86, 86,
	89, 89, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 176, 176, 175, 18, 152,
	152, 19, 19, 19, 19, 20, 111, 111, 21, 21,
	21, 21, 22, 26, 243, 243, 243, 247, 247, 248,
	248, 249, 249, 249, 249, 249, 249, 249, 245, 245,
	29, 29, 29, 29, 29, 130, 126, 126, 128, 128,
	128, 128, 52, 125, 125, 125, 125, 127, 127, 127,
	127, 199, 198, 198, 204, 204, 204, 65, 65, 65,
	65, 65, 66, 66, 66, 197, 197, 197, 197, 205,
	205, 205, 205, 205, 205, 67, 67, 67, 203, 203,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 17,
	244, 244, 246, 246, 31, 31, 9, 9, 10, 10,
	68, 68, 69, 69, 133, 133, 133, 133, 70, 70,
	47, 47, 47, 132, 214, 214, 215, 215, 215, 215,
	215, 215, 216, 216, 216, 216, 216, 216, 216, 212,
	212, 213, 210, 210, 211, 211, 211, 211, 250, 250,
	131, 131, 73, 73, 219, 219, 219, 219, 217, 217,
	217, 217, 217, 220, 218, 221, 221, 221, 221, 221,
	163, 163, 163, 33, 11, 50, 50, 12, 8, 8,
	115, 115, 77, 77, 167, 167, 167, 59, 59, 42,
	42, 42, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 116, 116, 117, 117, 24, 28, 32,
	32, 32, 32, 32, 252, 252, 56, 56, 56, 56,
	57, 57, 129, 129, 129, 129, 129, 51, 7, 7,
	49, 49, 23, 23, 23, 23, 23, 62, 62, 122,
	122, 122, 124, 124, 123, 123, 123, 101, 101, 34,
	82, 82, 91, 91, 92, 92, 173, 93, 93, 27,
	27, 37, 37, 35, 35, 35, 35, 35, 35, 36,
	36, 38, 38, 38, 38, 38, 38, 38, 227, 227,
	227, 230, 230, 226, 228, 228, 229, 229, 251, 251,
	102, 102, 102, 72, 71, 71, 75, 75, 74, 76,
	76, 166, 99, 99, 99, 99, 118, 119, 119, 120,
	120, 121, 121, 98, 98, 149, 149, 39, 39, 81,
	81, 83, 83, 140, 140, 141, 141, 139, 139, 139,
	168, 168, 168, 168, 169, 169, 169, 169, 169, 169,
	164, 164, 164, 164, 165, 165, 174, 174, 105, 105,
	105, 105, 103, 103, 104, 104, 170, 170, 170, 170,
	100, 100, 171, 171, 171, 134, 134, 177, 177, 177,
	80, 80, 80, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 179, 179, 179, 179,
	181, 181, 181, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 182, 182, 189,
	189, 190, 190, 191, 192, 183, 183, 184, 184, 185,
	186, 193, 193, 193, 193, 195, 195, 187, 187, 187,
	187, 187, 188, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 113, 113, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	222, 222, 222, 222, 222, 222, 222, 224, 224, 225,
	225, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 231, 231,
	232, 232, 234, 234, 235, 235, 236, 237, 237, 237,
	238, 239, 239, 233, 233, 240, 240, 240, 241, 241,
	242, 242, 242, 242, 242, 154, 154, 154, 155, 155,
	156, 88, 88, 151, 151, 150, 150, 150, 153, 153,
	106, 106, 194, 194, 194, 194, 194, 194, 194, 107,
	107, 107, 114, 108, 108, 109, 109, 109, 109, 109,
	109, 146, 147, 110, 110, 110, 148, 148, 157, 161,
	161, 160, 159, 159, 158, 158, 137, 137, 137, 137,
	138, 138, 136, 135, 94, 94, 95, 95, 253, 253,
	162, 162, 96, 96, 97, 90, 90, 172, 172, 172,
	172, 84, 84, 64, 64, 85, 85, 60, 60, 63,
	63, 61, 61, 61, 61, 78, 78, 79, 79, 58,
	58, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 196, 196, 196, 53, 53, 53, 54, 54,
	55, 55, 201, 201, 201, 202, 202, 202, 202, 200,
	200, 200, 200, 200, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 4, 4, 2, 2,
	2, 0, 2, 0, 8, 8, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 1, 1, 3, 2, 4, 0,
	3, 2, 1, 4, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	2, 4, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	1, 0, 2, 2, 1, 2, 0, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -229, 92, 100, 122, 196,
	99, 85, 116, 210, 217, -35, -37, 225, -130, 226,
	34, 235, 58, 95, 212, 207, 256, 66, -227, -38,
	-36, 304, 279, 285, 220, -39, 243, 271, 307, 243,
	130, 78, 274, -60, -53, 4, -206, -208, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 151, 154, 157, 159, 160, 161, 162, 163, 165,
	166, 168, 170, 167, 173, 175, 176, 182, 185, 188,
	189, 190, 191, 194, 196, 198, 199, 200, 202, 203,
	207, 205, 206, 208, 210, 212, 213, 215, 217, 218,
	219, 222, 223, 225, 226, 228, 231, 234, 235, 236,
	239, 237, 233, 242, 244, 245, 252, 256, 257, 258,
	259, 262, 263, 264, 266, 268, 269, 270, 275, 280,
	281, 282, 283, 28, 35, 36, 37, 38, 40, 41,
	44, 45, 49, 50, 51, 53, 80, 82, 83, 98,
	101, 102, 108, 118, 120, 125, 126, 135, 136, 137,
	138, 140, 149, 172, 174, 183, 187, 193, 195, 201,
	214, 221, 229, 230, 238, 240, 247, 248, 249, 253,
	254, 271, 272, 87, 134, 264, 263, 78, 130, 243,
	274, -16, 304, -27, -6, -14, -4, -23, -34, -13,
	-30, -17, -31, -15, 23, -200, 4, -206, -208, -207,
	-209, 55, 67, 115, 133, 127, 142, 144, 150, 152,
	164, 184, 186, 211, 227, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 42, 47, 48, 52, 54, 56,
	62, 66, 70, 71, 72, 73, 74, 75, 84, 86,
	88, 89, 90, 93, 95, 97, 103, 104, 105, 111,
	113, 114, 116, 119, 121, 128, 130, 132, 139, 141,
	147, 148, 153, 155, 156, 169, 171, 177, 178, 179,
	180, 181, 192, 197, 204, 209, 220, 224, 232, 241,
	243, 246, 250, 251, 255, 260, 261, 265, 267, 273,
	274, 276, 277, 278, 279, -53, -53, -53, 196, 22,
	-247, 22, -248, -249, 66, 92, 116, 220, 134, 87,
	263, -247, -57, 217, -53, -126, 154, 223, 214, 252,
	-127, -125, -199, 247, 163, -86, -53, 4, 22, 78,
	57, 79, 117, 130, 131, 62, 63, 146, 244, 247,
	252, 66, 266, -252, 252, 252, -252, -252, -56, 252,
	250, -57, -251, 243, 243, 265, 274, -115, 78, 261,
	-36, -38, -37, -74, -75, 260, 139, 97, 181, -35,
	-37, -227, -230, 202, -226, -53, -230, -71, -72, 22,
	89, 308, -170, -60, 179, -97, 304, -3, -170, 125,
	-60, -63, 125, -60, -53, -170, 125, 114, 304, -94,
	-137, -136, -135, 302, 306, 114, 141, 141, -171, -170,
	-53, 125, -64, 125, -63, -87, 125, -86, -87, 125,
	-176, -175, -202, 4, -206, -208, -207, 271, 243, 130,
	-152, 304, -111, 304, -53, 22, 178, 308, 178, -53,
	-126, 51, -126, 304, -128, -51, -52, 143, 198, 250,
	289, 114, 283, -67, 5, 84, -89, 306, 114, -244,
	178, 114, 114, 114, 114, 114, 114, 283, 143, 198,
	243, 274, -129, -51, -52, -129, 250, -57, -100, -170,
	-86, 125, -53, -86, 130, -53, 125, -74, -75, -99,
	-118, -119, 153, 177, -102, 22, 89, -102, -102, 43,
	305, 305, 308, -230, -79, 304, -90, -172, -142, 297,
	-144, 295, 296, 301, 169, 284, -154, -60, -145, 9,
	304, -157, -224, -37, 98, 29, -155, -156, 214, -53,
	7, 8, 5, 6, -58, -179, -188, 255, 103, 171,
	47, -222, -223, 4, -206, -201, -180, -190, -184, -187,
	140, 55, 71, 74, 72, 75, 224, 265, 48, 28,
	101, 102, 187, 193, 240, 253, 254, 125, 172, 126,
	53, 118, 149, 91, 36, 38, 40, 41, 49, 50,
	80, 82, 83, 108, 135, 136, 137, 138, 174, 201,
	229, 238, 248, 249, 272, -207, -191, -192, -185, -186,
	-193, -90, -97, 297, -60, 304, -96, -162, -142, 84,
	-44, 205, -43, 21, 23, 92, 269, 98, 233, 233,
	205, 98, 309, 205, 205, 98, 236, 305, -84, -60,
	-137, -142, -138, -200, 297, -171, -62, -60, -62, 225,
	-53, 30, 98, -46, 308, 46, 208, 98, -46, 308,
	98, -46, 98, 305, 308, -170, 125, -63, 30, -151,
	-177, -178, -180, -189, -183, -187, -188, 39, 45, 44,
	245, 221, 230, 37, 135, 136, 137, 138, 229, 36,
	201, 108, 91, 83, 82, 174, 41, 40, -191, -192,
	-185, -186, 80, 248, 249, 140, 38, 50, 49, 272,
	238, -88, -142, -243, -85, 243, 78, -61, -53, 297,
	-249, -243, 30, -88, 308, 308, 151, -66, 157, 168,
	123, -198, 84, -204, -197, -163, 9, 255, 103, 178,
	-203, 8, 296, -196, -202, 5, 7, 295, -198, 84,
	69, -205, 5, 4, -188, -163, 84, 154, 306, -200,
	-199, -246, 111, -243, -199, -199, -199, -199, -199, -53,
	151, -199, -199, 308, 308, -57, -46, 308, 304, -73,
	169, -228, 279, -73, 304, -54, 125, -53, -49, 94,
	169, -99, -119, -118, -120, -142, 22, -142, -144, -36,
	-36, -36, -76, -166, -142, -226, 30, -78, -53, -81,
	308, 114, 10, 11, 54, 33, 295, 296, 297, 298,
	109, 299, 292, 293, 294, 291, 287, 288, 289, 60,
	158, 216, 13, 14, 15, 26, 180, 152, 284, 127,
	227, 301, 16, 17, 18, 142, 35, 128, 30, 4,
	-142, -142, -142, -142, -142, 186, -95, -37, -142, -88,
	-94, -37, -150, 302, 304, -94, 304, 5, 5, 304,
	-158, -142, -231, 280, 111, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 195, -195, 275, -195, -195, -181, 304, -181,
	-182, 304, -181, 281, 285, 304, -81, -60, 308, 305,
	308, 250, -116, 62, 56, -132, 125, 56, -210, -53,
	62, -211, 52, 261, 197, 113, -116, 62, -116, 62,
	62, -170, 33, 33, 250, -63, -53, 250, 250, -170,
	114, 305, 308, 303, 312, -134, 277, -122, -27, 304,
	84, 30, -122, -91, -92, -173, -93, -60, 304, -53,
	-53, -63, -64, -86, -87, -87, -16, -175, 98, -19,
	-27, -23, -34, -13, 305, 308, -80, 29, -112, 304,
	282, 161, 81, 124, 160, -113, 219, 305, 308, 250,
	308, -85, -78, -136, -135, 114, 252, 305, -52, -51,
	-65, 200, 231, 206, 222, 308, 8, 7, 7, 5,
	-200, -245, -53, -52, -51, -170, -68, -78, -69, -53,
	-133, -132, -212, -213, -210, 130, 261, 104, 30, 98,
	-50, 191, 30, 178, 169, 289, 98, -121, 214, 215,
	308, -42, 31, 88, 304, 308, 305, -134, -172, -83,
	-168, -170, -37, -169, 304, -177, -177, -86, 247, -142,
	-142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
	-142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
	-142, 152, 127, 227, 35, 128, -142, 250, -142, -142,
	-142, -142, 171, 169, 255, 103, 262, 89, 175, -253,
	241, 32, -148, -37, 304, -200, -154, 214, 304, -137,
	305, 308, -88, -153, 303, -150, -88, 305, 305, -88,
	273, 22, 89, 297, -112, 7, -161, -160, 276, -232,
	106, 119, 304, 305, 305, -142, -142, -106, -194, -88,
	4, 282, 161, 81, 124, 160, 219, -106, -107, -142,
	-88, -108, -143, -144, 295, 296, 301, 304, 214, -109,
	-142, -88, -142, 42, 148, 251, -110, -142, 114, -88,
	-142, -142, -142, -88, -88, -88, 304, 7, 7, 247,
	247, 7, -134, 305, -162, -43, -60, -53, -53, 169,
	-132, 125, -48, 169, -177, -53, 304, 304, 145, 145,
	-53, -53, 125, -53, 125, -53, -53, -44, 205, 304,
	304, -53, 205, -53, -60, 205, 236, 114, -60, -138,
	-142, -101, 209, -142, -101, -124, 178, -84, 271, -53,
	209, -82, 308, 114, 289, -84, -46, -46, -46, -170,
	-177, 302, 302, 7, 250, 250, 250, 250, 304, -142,
	-245, -61, -245, -51, 259, 59, 200, -204, -112, 308,
	305, 305, 308, -54, 130, -54, -27, -86, 5, -27,
	-60, 98, 5, -53, -166, -19, -53, -98, 119, -174,
	308, 286, 67, -105, 144, 164, 115, 150, 211, 133,
	-139, 309, -165, -164, 30, -53, -37, -169, -168, 283,
	-142, -142, 250, -253, 241, -148, -142, 171, 255, 103,
	262, 89, 175, 114, 304, -143, -143, -88, 304, -88,
	-95, -142, 303, 303, 308, 305, -75, 308, -74, -142,
	-88, -88, 305, 305, -159, -160, 93, -142, -237, 185,
	304, 304, -142, 30, 308, 305, 114, 305, 305, -114,
	192, 305, 10, 11, 295, 296, 297, 298, 109, 299,
	292, 293, 294, 291, 287, 288, 289, 60, 158, 216,
	13, 14, 15, 142, 128, -143, -143, -143, -88, 304,
	305, -146, -147, 114, 111, 30, -110, -110, -110, 305,
	114, -88, 308, 308, 308, 305, 305, 305, 7, 305,
	308, 305, 283, 283, 305, -98, 250, 250, 98, 169,
	268, -214, -211, -142, -78, 304, 304, -41, 92, 225,
	-117, 98, -46, 98, -46, 250, -116, 62, -88, -88,
	250, 250, 236, 303, -90, 209, 61, 305, -90, -134,
	-92, -83, -162, 305, 303, 7, 7, 305, 161, 124,
	160, -113, 160, -113, -113, 7, -53, -70, 129, -133,
	304, -54, 304, 304, -73, 304, -53, -49, 305, -149,
	121, 43, -168, 175, 144, 144, -168, -105, 144, -103,
	184, -103, -103, -165, -200, 310, -53, 304, 305, -142,
	-142, -143, -143, 114, 304, -142, -151, 26, 26, 305,
	-88, 305, 308, 305, -150, 305, 273, -75, -75, -75,
	5, 95, -142, 246, -238, -53, 304, 277, -74, 305,
	-177, -177, -142, -146, -142, -177, -177, -143, -143, -143,
	-143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
	-143, -143, -143, -143, -143, -143, 89, 169, 175, -143,
	308, -88, 305, -147, -146, -142, -142, -177, 305, 305,
	305, -88, -142, -142, -142, 305, 7, -149, -53, -53,
	-132, 98, -215, 62, -216, 54, 104, 66, 169, 171,
	261, 197, 52, 84, 204, 305, 305, -78, -78, 169,
	84, 169, 84, 77, 257, -53, -53, -60, -53, -53,
	305, 305, -53, -60, -90, -123, 304, 178, -27, -101,
	289, 303, 303, 305, 128, -77, -167, -53, -225, 304,
	-222, -223, -58, 304, -78, -68, 30, -77, 178, -234,
	278, -142, -88, 242, -168, -168, -104, 267, 178, 144,
	-168, -141, -140, 112, 167, 304, -78, -164, 26, 26,
	-142, -151, 305, -142, -142, 305, -142, 5, -142, 305,
	305, 305, -142, -239, -53, -142, 305, 305, 305, -147,
	114, 89, 175, 304, -142, 305, 305, 308, 305, 305,
	305, -234, -132, -53, -86, -53, 104, 125, 171, 145,
	304, -143, -60, -131, -250, 65, 239, 305, 305, 171,
	171, -142, -177, -46, -46, 250, 250, 90, -78, 62,
	-97, -37, 304, 188, 305, 308, -59, -94, 54, -59,
	-142, 304, -77, 305, 305, -27, 305, -60, -235, -236,
	-53, 247, -104, 304, -142, -168, 308, 311, 289, -78,
	305, -142, -142, 305, 305, -75, -233, 190, 305, -143,
	114, 304, -151, 305, -142, -216, -54, 169, -142, -55,
	304, -70, 304, 204, -45, 54, -53, -53, 263, 170,
	305, -53, -53, -131, -167, -42, -86, -42, 305, -88,
	305, -70, -131, 304, 308, 30, -145, -58, -53, -78,
	-140, -200, 305, 305, -75, 43, -143, -151, 305, 305,
	98, 305, -219, 159, -53, -78, -60, -40, 267, -86,
	225, -134, 304, -70, -59, -75, -131, -70, -77, -236,
	-238, 304, 305, -240, 199, 215, -88, 305, 104, -217,
	-220, -218, 178, 115, 189, 228, 305, 305, -73, -142,
	-91, -78, -42, 305, -70, 305, -88, 305, -241, -242,
	35, 258, 69, -142, -241, -53, -218, 178, -220, 178,
	263, 87, -219, -134, 305, -131, -75, -242, 194, 110,
	214, 194, 110, -221, 166, 208, 46, 225, -221, -217,
	-47, 46, 208, -70, 305, 26, 20, 171, 84, -242,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 387, 0, 0,
	0, 0, 0, 0, 0, 359, -2, 0, 134, 0,
	315, 0, 315, 315, 319, 0, 389, 281, 386, -2,
	397, 0, 0, 0, 395, 373, 0, 0, -2, 0,
	0, 0, 0, 0, 797, 825, 826, 827, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 0, 199, 839, 840, 841, 842,
	843, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 100, 107, 108, 910, 110,
	0, 117, 118, 119, 121, 122, 123, 124, 125, 126,
	127, 0, 308, 924, 321, 130, 888, 928, 996, 942,
	137, 147, 0, 1002, -2, 151, 78, 180, 181, 182,
	0, 184, 201, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 198, 326, 314, 326, 311, 312, 313, 316,
	0, 307, 0, 388, 0, 0, 0, 0, 0, 280,
	-2, 369, 370, -2, 0, 392, 392, 392, 0, 0,
	370, 0, 378, 914, 381, 808, 379, 0, 0, 394,
	393, 0, 374, 456, 0, 417, 0, 2, 0, 981,
	456, 0, 981, 800, 0, 0, 981, 0, 0, 798,
	774, 766, 767, 771, 0, 0, 0, 0, 0, 462,
	68, 981, 51, 981, 793, 51, 981, 76, 51, 981,
	0, 95, 97, 835, 836, 837, 838, 1007, 0, 0,
	0, 0, 105, 0, 109, 111, 0, 0, 0, 320,
	131, 970, 133, 0, 136, 138, 139, 0, 0, 0,
	0, 0, 0, 150, 175, 176, 79, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 195,
	0, 0, 309, 322, 323, 310, 0, 318, 51, 460,
	253, 981, 385, 253, 829, 331, 981, -2, 0, 365,
	404, 405, 0, 0, 0, 390, 391, 0, 0, 0,
	361, 362, 0, 380, 0, 0, 420, 785, 789, 790,
	549, 0, 0, 0, 0, 0, 0, 638, 639, 776,
	0, 642, 643, 644, 975, 0, 648, 649, 996, 797,
	811, 812, 813, 814, 0, 0, 0, 819, 820, 821,
	765, 689, 658, -2, -2, 809, 486, 487, 488, 489,
	-2, 1009, 662, 664, 666, 667, 668, 669, 0, 959,
	976, 977, 992, 993, 1001, 1005, 1006, 981, 989, 982,
	971, 979, 988, 868, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 834, 511, 512, 517, 518,
	520, 420, 418, 457, 458, 0, 0, 782, 780, 781,
	28, 304, 30, 0, 304, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 791,
	775, 770, 0, 772, 773, 466, 0, 337, 0, 0,
	463, 0, 0, 70, 0, 49, 50, 0, 72, 0,
	0, 74, 0, 387, 0, 0, 981, 0, 387, 0,
	723, 472, 473, 474, 475, 476, 546, 479, 480, 481,
	482, 483, 484, 485, 493, 494, 495, 496, 497, 498,
	499, 508, 0, 492, 492, 492, 505, 506, 509, 510,
	515, 516, 527, 528, 530, 532, 526, 526, 526, 523,
	524, 0, 721, 0, 114, 0, 863, 795, 801, 802,
	120, 0, 0, 0, 0, 0, 0, 142, 162, 163,
	164, 143, 145, 152, 154, 155, 156, 165, 166, 167,
	168, 270, 0, 272, 178, 179, 822, 0, 144, 146,
	148, 149, 169, 170, 0, 172, 173, 174, 0, 80,
	183, 185, 0, 200, 186, 187, 188, 189, 190, 191,
	194, 196, 197, 0, 0, 317, 273, 0, 211, 0,
	0, 276, 384, 0, 0, 0, 981, 828, 328, 0,
	0, 368, 402, 403, 406, 409, 410, 407, 549, 375,
	376, 377, 398, 399, 291, 382, 0, 0, 805, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 779, 0, 0, 788,
	554, 555, 556, 578, 579, 0, 640, -2, 721, 0,
	645, 646, 647, 0, 0, -2, 0, 816, 546, 0,
	0, 764, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 501, 514, 525, 522, 521, 503, 0, 502,
	500, 0, 504, 0, 0, 0, 466, 0, 0, 784,
	0, 0, 0, 0, 303, 32, 981, 0, 53, 0,
	0, 243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 799, 0, 0, 0,
	0, 0, 0, 768, 771, 348, 0, 348, 339, 0,
	0, 0, 335, 351, 352, 354, 355, 0, 0, 464,
	69, 794, 51, 77, 51, 51, 83, 96, 0, 98,
	101, 102, 103, 104, 99, 0, 467, 469, 477, 0,
	533, 534, 535, 536, 537, 538, 547, 106, 0, 0,
	0, 115, 116, 803, 804, 0, 0, 135, 140, 141,
	327, 0, 159, 0, 161, 0, 271, 824, 823, 546,
	81, 202, 128, 324, 325, 461, 0, 0, 210, 805,
	212, 214, 215, 216, 217, 829, 0, 829, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 408, 411, 412,
	0, 401, 289, 290, 387, 0, 807, 414, 786, 447,
	421, 429, 445, 432, 0, 550, 551, 552, 0, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, -2,
	-2, -2, 570, 571, 572, -2, -2, -2, 576, 577,
	-2, 0, 0, 0, 779, 0, -2, 0, 586, -2,
	-2, -2, 590, 0, 593, 595, 597, 0, 0, 0,
	0, 778, 607, 756, 0, 787, 592, 0, 0, 777,
	776, 0, 0, 0, 727, 728, 0, -2, 650, 397,
	0, 0, 0, 0, 817, 0, 763, 759, 0, 699,
	0, 0, 0, 663, 665, 0, 0, 0, 0, 731,
	-2, -2, -2, -2, -2, -2, -2, 0, 0, 721,
	741, 0, 0, 609, 0, 0, 0, 0, 996, 0,
	721, 749, 0, 0, 0, 0, 0, 721, 0, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 459, 783, 31, 293, 0, 0, 0,
	34, 981, 42, 0, 225, 0, 0, 0, 0, 0,
	306, 43, 981, 51, 981, 51, 44, 29, 304, 0,
	0, 297, 0, 292, 295, 0, 59, 0, 792, 0,
	770, 67, 0, 465, 332, 333, 0, 0, 341, 338,
	0, 466, 0, 0, 0, 0, 71, 73, 75, 0,
	724, 0, 0, 0, 0, 0, 0, 0, 0, 722,
	112, 796, 113, 132, 157, 158, 160, 153, 171, 0,
	219, 252, 0, 0, 829, 0, 208, 253, 275, 277,
	0, 0, 330, 331, 400, 0, 806, 416, 0, 419,
	0, 0, 0, 0, 0, 0, 453, 453, 453, 451,
	445, 0, 431, 444, 0, 443, -2, 432, 0, 0,
	-2, -2, 0, 0, 0, 608, -2, 591, 594, 596,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	641, 722, 725, 726, 0, -2, 0, 0, 396, 397,
	397, 397, 656, 0, 0, 760, 0, 0, 657, 0,
	0, 0, 0, 0, 0, 672, 0, 673, 674, 0,
	0, 675, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 613, 614, 0, 0,
	676, 747, 748, 0, 0, 0, 0, 0, 0, 681,
	0, 754, 0, 0, 0, 685, 686, 687, 0, 490,
	0, 507, 529, 531, 519, 416, 0, 0, 0, 0,
	52, 223, 242, 0, 0, 0, 0, 36, 0, 0,
	0, 0, 40, 0, 46, 0, 0, 0, 0, 0,
	0, 0, 60, 769, 347, 0, 346, 0, 336, 348,
	353, 350, 356, 0, 470, 0, 0, 478, 539, 540,
	541, 542, 543, 544, 545, 0, 129, 206, 0, 213,
	0, 0, 0, 211, 0, 0, 0, 329, 383, 693,
	0, 0, 422, 0, 0, 0, 0, 0, 0, 448,
	452, 449, 450, 430, 427, 0, 441, 0, 434, 553,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 757,
	0, 716, 0, -2, 729, 651, 0, 0, 0, 0,
	818, 758, 762, 0, 697, 698, 702, 0, 0, 661,
	0, 0, 730, 740, 742, 610, 611, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, -2, -2, -2,
	628, 629, 630, -2, -2, -2, 0, 0, 0, 743,
	0, 0, 719, 745, 746, 751, 752, 0, 678, 679,
	680, 753, 0, 0, 0, 513, 0, 693, 299, 301,
	33, 0, 224, 0, 227, 0, 0, 0, 0, 233,
	234, 0, 0, 0, 0, 244, 251, 0, 0, 0,
	48, 0, 0, 305, 0, 51, 51, 294, 0, 0,
	204, 205, 298, 296, 334, 0, 0, 0, 340, 349,
	0, 471, 468, 548, 0, 0, 282, 288, 288, 0,
	659, 660, 0, 0, 0, 0, 0, 0, 0, 371,
	0, 415, 413, 0, 435, 0, 437, 0, 0, 0,
	439, 0, 425, 0, 424, 0, 0, 433, 0, 0,
	-2, 0, 601, -2, -2, 715, 722, 815, 397, 652,
	654, 655, 761, 704, 701, 0, 688, 670, 671, 739,
	0, 0, 0, 0, 722, 718, 677, 0, 683, 684,
	491, 372, 35, 0, 228, 229, 829, 0, 232, 235,
	0, 237, 831, 219, 0, 248, 249, 246, 0, 37,
	38, 47, 55, 39, 45, 0, 0, 0, 0, 0,
	357, 358, 0, 0, 251, 0, 291, 810, 0, 291,
	0, 0, 0, 241, 219, 209, 251, 0, 692, 694,
	0, 0, 436, 0, 455, 438, 0, 428, 0, 0,
	442, -2, -2, 602, 717, 0, 397, 0, 690, -2,
	0, 0, 0, 720, 0, 226, 230, 0, 0, 257,
	0, 245, 0, 0, 57, 0, 300, 302, 0, 343,
	466, 345, 0, 219, 283, 284, 287, 285, 288, 397,
	251, 207, 219, 0, 0, 0, 446, 0, 0, 0,
	426, 423, 440, 653, 707, 0, -2, 0, 636, 682,
	0, 236, 262, 0, 0, 0, 253, 41, 0, 54,
	0, 344, 0, 239, 291, 0, 219, 278, 0, 695,
	696, 0, 454, 0, 0, 0, 703, 637, 0, 238,
	258, 259, 0, 254, 255, 256, 830, 250, 257, 56,
	466, 0, 286, 651, 240, 251, 397, 700, 705, 708,
	-2, 945, 860, 0, 706, 231, 260, 0, 261, 0,
	0, 0, 262, 342, 222, 219, 0, 0, 710, 711,
	712, 713, 714, 263, 0, 266, 267, 0, 264, 247,
	218, 220, 221, 279, 0, 0, 265, 268, 269, 709,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 293, 3, 299, 294, 3,
	304, 305, 297, 295, 308, 296, 306, 298, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 312, 307,
	287, 289, 288, 3, 309, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 302, 3, 303, 292, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 310, 291, 311, 301,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 290,
	57630, 300, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:718
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:724
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:730
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:822
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:845
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1317
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1430
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = DropDefault
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return unimplemented(sqllex)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1843
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1851
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1854
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = true
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = false
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1974
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1978
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = Ascending
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = Descending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2032
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2033
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = true
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = false
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2047
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2090
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.str = ""
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.str = ""
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2184
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2191
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2233
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			return unimplemented(sqllex)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2262
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2263
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			return unimplemented(sqllex)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2491
		{
			return unimplemented(sqllex)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			return unimplemented(sqllex)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2495
		{
			return unimplemented(sqllex)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			return unimplemented(sqllex)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2499
		{
			return unimplemented(sqllex)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2503
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			return unimplemented(sqllex)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2511
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = true
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = false
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = false
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = true
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2535
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2634
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2635
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &From{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.str = astFullJoin
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.str = astLeftJoin
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.str = astRightJoin
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.str = astInnerJoin
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2880
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2970
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2976
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2984
		{
			return unimplemented(sqllex)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3040
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = nil
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3161
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3193
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3233
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			return unimplemented(sqllex)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			return unimplemented(sqllex)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
			return unimplemented(sqllex)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			return unimplemented(sqllex)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			return unimplemented(sqllex)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			return unimplemented(sqllex)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			return unimplemented(sqllex)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			return unimplemented(sqllex)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3277
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3281
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3316
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			return unimplemented(sqllex)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3680
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3692
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3746
		{
			return unimplemented(sqllex)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3747
		{
			return unimplemented(sqllex)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3770
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			return unimplemented(sqllex)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			return unimplemented(sqllex)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3790
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			return unimplemented(sqllex)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			return unimplemented(sqllex)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			return unimplemented(sqllex)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			return unimplemented(sqllex)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3839
		{
			return unimplemented(sqllex)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3883
		{
			return unimplemented(sqllex)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3884
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3887
		{
			return unimplemented(sqllex)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3888
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = Window(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.str = ""
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3975
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3977
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3981
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3988
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3990
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4344
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4345
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4505
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4541
		{
			return unimplemented(sqllex)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = DNull
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.str = ""
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
