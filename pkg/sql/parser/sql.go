// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRANSACTION = 57620
const TREAT = 57621
const TRIM = 57622
const TRUE = 57623
const TRUNCATE = 57624
const TYPE = 57625
const UNBOUNDED = 57626
const UNCOMMITTED = 57627
const UNION = 57628
const UNIQUE = 57629
const UNKNOWN = 57630
const UPDATE = 57631
const UPSERT = 57632
const USE = 57633
const USER = 57634
const USERS = 57635
const USING = 57636
const UUID = 57637
const VALID = 57638
const VALIDATE = 57639
const VALUE = 57640
const VALUES = 57641
const VARCHAR = 57642
const VARIADIC = 57643
const VIEW = 57644
const VARYING = 57645
const WHEN = 57646
const WHERE = 57647
const WINDOW = 57648
const WITH = 57649
const WITHIN = 57650
const WITHOUT = 57651
const WRITE = 57652
const YEAR = 57653
const ZONE = 57654
const NOT_LA = 57655
const WITH_LA = 57656
const AS_LA = 57657
const POSTFIXOP = 57658
const UMINUS = 57659

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5605

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	336, 32,
	-2, 449,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 422,
	187, 422,
	227, 422,
	332, 422,
	334, 422,
	336, 422,
	-2, 432,
	-1, 68,
	1, 425,
	187, 425,
	227, 425,
	332, 425,
	334, 425,
	336, 425,
	-2, 431,
	-1, 77,
	1, 32,
	336, 32,
	-2, 449,
	-1, 446,
	1, 181,
	336, 181,
	-2, 1024,
	-1, 513,
	108, 459,
	160, 459,
	185, 459,
	-2, 428,
	-1, 516,
	108, 458,
	160, 458,
	185, 458,
	-2, 426,
	-1, 664,
	108, 458,
	160, 458,
	185, 458,
	-2, 429,
	-1, 724,
	333, 956,
	-2, 949,
	-1, 725,
	333, 957,
	-2, 950,
	-1, 731,
	5, 625,
	333, 625,
	-2, 1137,
	-1, 755,
	5, 586,
	-2, 1111,
	-1, 756,
	5, 619,
	333, 619,
	-2, 1113,
	-1, 757,
	5, 594,
	-2, 1114,
	-1, 758,
	5, 593,
	-2, 1115,
	-1, 759,
	5, 619,
	333, 619,
	-2, 1118,
	-1, 760,
	5, 619,
	333, 619,
	-2, 1119,
	-1, 761,
	5, 620,
	-2, 1122,
	-1, 762,
	5, 580,
	-2, 1123,
	-1, 763,
	5, 580,
	-2, 1124,
	-1, 764,
	5, 601,
	-2, 1128,
	-1, 765,
	5, 581,
	-2, 1133,
	-1, 766,
	5, 582,
	-2, 1134,
	-1, 767,
	5, 583,
	-2, 1135,
	-1, 768,
	5, 584,
	-2, 1136,
	-1, 769,
	5, 580,
	-2, 1141,
	-1, 770,
	5, 587,
	-2, 1146,
	-1, 771,
	5, 585,
	-2, 1149,
	-1, 772,
	5, 617,
	333, 617,
	-2, 1151,
	-1, 773,
	5, 621,
	-2, 1154,
	-1, 774,
	5, 623,
	-2, 1155,
	-1, 775,
	5, 616,
	333, 616,
	-2, 1160,
	-1, 1036,
	99, 432,
	108, 432,
	144, 432,
	160, 432,
	185, 432,
	191, 432,
	286, 432,
	-2, 744,
	-1, 1045,
	333, 933,
	-2, 921,
	-1, 1260,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 660,
	-1, 1261,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 661,
	-1, 1262,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 662,
	-1, 1266,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 666,
	-1, 1267,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 667,
	-1, 1268,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 668,
	-1, 1271,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 673,
	-1, 1277,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 675,
	-1, 1279,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 679,
	-1, 1280,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 680,
	-1, 1281,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 681,
	-1, 1282,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 682,
	-1, 1309,
	196, 815,
	-2, 818,
	-1, 1338,
	117, 855,
	333, 956,
	-2, 949,
	-1, 1339,
	117, 856,
	-2, 1107,
	-1, 1340,
	117, 857,
	-2, 1023,
	-1, 1341,
	117, 858,
	-2, 991,
	-1, 1342,
	117, 859,
	-2, 1007,
	-1, 1343,
	117, 860,
	-2, 1022,
	-1, 1344,
	117, 861,
	-2, 1070,
	-1, 1504,
	99, 432,
	108, 432,
	144, 432,
	160, 432,
	185, 432,
	191, 432,
	286, 432,
	-2, 515,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 674,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 676,
	-1, 1514,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 677,
	-1, 1532,
	196, 814,
	-2, 817,
	-1, 1724,
	1, 516,
	69, 516,
	99, 516,
	108, 516,
	118, 516,
	122, 516,
	124, 516,
	137, 516,
	144, 516,
	149, 516,
	157, 516,
	160, 516,
	172, 516,
	185, 516,
	187, 516,
	191, 516,
	227, 516,
	229, 516,
	286, 516,
	294, 516,
	305, 516,
	306, 516,
	315, 516,
	332, 516,
	334, 516,
	336, 516,
	337, 516,
	-2, 515,
	-1, 1726,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 678,
	-1, 1731,
	147, 0,
	-2, 694,
	-1, 1741,
	196, 816,
	-2, 819,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 721,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 722,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 723,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 727,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 728,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 729,
	-1, 1904,
	147, 0,
	-2, 695,
	-1, 1907,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 698,
	-1, 1908,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 700,
	-1, 2014,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 699,
	-1, 2015,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 701,
	-1, 2022,
	147, 0,
	-2, 730,
	-1, 2078,
	147, 0,
	-2, 731,
	-1, 2143,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 1110,
}

const sqlPrivate = 57344

const sqlLast = 30984

var sqlAct = [...]int{

	725, 2142, 1678, 2120, 2084, 2167, 2121, 1502, 2122, 1130,
	2141, 1719, 517, 1138, 951, 1720, 1948, 1869, 1752, 1195,
	1994, 1895, 1974, 1224, 1812, 723, 1499, 313, 297, 1826,
	1688, 1880, 957, 562, 90, 90, 90, 1477, 524, 67,
	538, 1625, 849, 701, 52, 1626, 315, 90, 90, 90,
	1475, 1874, 90, 1213, 1593, 90, 1199, 499, 583, 1232,
	1239, 1696, 1307, 90, 1194, 953, 504, 718, 816, 299,
	20, 1041, 90, 90, 791, 1592, 90, 1705, 1489, 90,
	90, 90, 90, 67, 788, 90, 90, 1198, 1543, 1231,
	1425, 1419, 1139, 1099, 1364, 684, 715, 722, 1484, 1317,
	695, 1294, 1090, 1291, 1172, 553, 1237, 1156, 306, 22,
	977, 831, 1122, 1220, 1188, 522, 67, 914, 1165, 820,
	495, 304, 30, 606, 793, 700, 817, 1335, 303, 16,
	305, 8, 1032, 498, 685, 694, 574, 605, 1234, 1075,
	1071, 584, 572, 575, 580, 1202, 1132, 20, 982, 668,
	667, 1827, 441, 527, 666, 82, 442, 445, 516, 431,
	490, 285, 717, 912, 422, 824, 568, 86, 672, 648,
	525, 68, 1531, 69, 647, 1367, 521, 2007, 521, 434,
	2008, 32, 312, 488, 833, 1500, 22, 985, 986, 1131,
	284, 1123, 33, 57, 833, 2158, 833, 2137, 813, 30,
	1825, 536, 985, 986, 543, 546, 16, 536, 8, 2132,
	988, 807, 1175, 1487, 535, 1437, 544, 541, 59, 1175,
	548, 1436, 481, 984, 35, 988, 66, 66, 985, 986,
	2062, 2131, 1126, 987, 1175, 1169, 1123, 2128, 1487, 514,
	813, 513, 983, 529, 2118, 48, 312, 1162, 987, 1788,
	1738, 988, 43, 43, 1002, 60, 1461, 2113, 1126, 47,
	813, 44, 44, 2109, 2080, 2074, 813, 1162, 813, 2056,
	2052, 1535, 1825, 813, 987, 2047, 1536, 49, 2046, 1170,
	1088, 1465, 2016, 45, 45, 1162, 73, 2004, 841, 993,
	844, 66, 90, 90, 90, 90, 90, 90, 2001, 504,
	1988, 2002, 1985, 1825, 993, 813, 1983, 1959, 1958, 1825,
	813, 1825, 1930, 75, 1311, 1175, 1223, 43, 1909, 1171,
	1168, 1175, 1175, 1186, 1542, 1906, 44, 680, 1162, 1898,
	993, 1846, 1175, 1845, 1175, 1824, 1175, 1735, 1825, 904,
	1175, 1664, 1003, 522, 1129, 813, 76, 1659, 45, 1610,
	1129, 551, 1611, 596, 71, 1608, 585, 1003, 1175, 534,
	77, 72, 91, 834, 46, 1607, 1606, 1534, 1175, 1175,
	2156, 1532, 1175, 834, 1175, 834, 778, 1828, 557, 1888,
	70, 62, 63, 34, 1464, 2140, 50, 813, 61, 1228,
	1173, 1179, 813, 51, 1175, 926, 1174, 73, 73, 1175,
	73, 1161, 1128, 54, 1162, 1129, 56, 56, 316, 1087,
	2127, 1004, 1086, 776, 1503, 58, 620, 536, 90, 546,
	2089, 2075, 985, 986, 75, 75, 1004, 75, 505, 1986,
	569, 1563, 1564, 90, 679, 1436, 90, 90, 561, 578,
	64, 843, 1935, 983, 844, 988, 1931, 504, 1923, 65,
	1922, 1921, 577, 577, 504, 1563, 1564, 76, 76, 317,
	76, 1917, 73, 1167, 1916, 71, 71, 1915, 987, 1860,
	1803, 56, 72, 72, 837, 1798, 501, 1854, 1797, 506,
	1796, 90, 1746, 1467, 832, 1166, 949, 90, 1724, 75,
	1695, 70, 70, 1303, 70, 1049, 1135, 1668, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 1615, 90, 90,
	90, 559, 90, 998, 996, 997, 989, 990, 991, 992,
	994, 995, 76, 1612, 993, 1600, 665, 90, 1591, 1562,
	71, 1559, 1558, 1569, 1556, 1548, 1547, 72, 90, 1463,
	1381, 784, 989, 990, 991, 992, 994, 995, 1501, 1666,
	1332, 504, 90, 1331, 679, 678, 1712, 1569, 315, 504,
	956, 90, 1563, 1564, 616, 1754, 90, 90, 90, 1042,
	90, 70, 2101, 2059, 623, 783, 2045, 1003, 2044, 2043,
	622, 2035, 850, 2033, 2024, 814, 1579, 2011, 90, 90,
	1997, 1981, 1945, 1928, 1304, 822, 90, 1900, 90, 1863,
	1851, 1831, 664, 90, 1730, 1710, 1686, 1684, 1683, 604,
	1681, 1634, 536, 504, 504, 599, 601, 1633, 1590, 1552,
	1551, 315, 1528, 1853, 1523, 653, 90, 782, 1296, 90,
	1452, 90, 90, 90, 90, 90, 90, 1410, 1408, 90,
	651, 1395, 1394, 1374, 90, 90, 1004, 1330, 927, 73,
	649, 90, 1227, 1076, 2139, 1580, 557, 1079, 856, 1083,
	1069, 505, 90, 785, 1569, 657, 1068, 660, 1067, 1066,
	1065, 623, 985, 986, 1064, 955, 75, 811, 1063, 623,
	1062, 90, 1395, 925, 90, 1061, 821, 836, 675, 676,
	839, 536, 825, 825, 1060, 988, 514, 681, 513, 1059,
	1058, 1057, 1056, 981, 569, 2111, 1886, 1055, 1054, 76,
	1053, 1046, 506, 543, 546, 1035, 70, 71, 987, 812,
	950, 539, 683, 603, 72, 847, 845, 560, 960, 592,
	590, 2006, 823, 826, 996, 997, 989, 990, 991, 992,
	994, 995, 1042, 1134, 522, 1565, 1566, 1567, 1568, 1570,
	1571, 897, 1911, 899, 1889, 901, 1885, 1859, 1858, 902,
	1713, 898, 1563, 1564, 948, 1446, 777, 1445, 895, 1565,
	1566, 1567, 1568, 1570, 1571, 1033, 922, 915, 921, 903,
	784, 2049, 612, 929, 2009, 931, 934, 90, 935, 936,
	937, 938, 939, 502, 1219, 90, 614, 1478, 1857, 90,
	942, 943, 1218, 1438, 1123, 1503, 1614, 90, 90, 505,
	947, 90, 1613, 312, 90, 1507, 505, 963, 730, 964,
	962, 780, 1081, 1048, 613, 954, 639, 1082, 90, 615,
	90, 90, 1051, 90, 979, 801, 90, 910, 90, 90,
	1420, 90, 90, 90, 514, 504, 973, 514, 514, 974,
	975, 1093, 1875, 1131, 799, 1755, 1539, 1318, 66, 1072,
	506, 643, 1045, 1432, 1621, 80, 2092, 506, 2154, 800,
	1111, 2153, 1153, 1114, 1665, 1038, 1839, 1458, 1567, 1568,
	1570, 1571, 67, 794, 43, 795, 1178, 67, 2051, 480,
	423, 479, 474, 44, 1133, 475, 1133, 644, 1104, 1106,
	1073, 1074, 585, 1077, 1092, 1969, 1968, 1967, 1966, 1080,
	1645, 428, 1085, 505, 292, 45, 424, 511, 1157, 79,
	316, 505, 1169, 1649, 536, 784, 1648, 315, 1618, 1125,
	1617, 1084, 546, 1510, 90, 1451, 536, 1109, 1850, 1450,
	1096, 425, 1092, 1117, 520, 90, 90, 90, 1091, 1121,
	90, 90, 1449, 1142, 1187, 612, 796, 90, 546, 911,
	427, 546, 1448, 1278, 506, 1100, 1170, 883, 293, 1146,
	1159, 317, 506, 1137, 1176, 505, 505, 1158, 1147, 1160,
	1120, 288, 1149, 316, 1150, 90, 1154, 1152, 315, 519,
	1119, 995, 1229, 985, 986, 1148, 577, 613, 577, 2050,
	1116, 920, 919, 650, 501, 496, 1171, 1168, 1820, 550,
	1378, 688, 1377, 1249, 1214, 1248, 988, 1077, 804, 1080,
	946, 945, 588, 315, 487, 805, 506, 506, 1103, 73,
	289, 1652, 1074, 1073, 317, 1654, 521, 802, 56, 987,
	804, 1821, 1180, 1293, 928, 1293, 1950, 1422, 818, 602,
	1301, 78, 803, 856, 856, 1300, 75, 1350, 2099, 802,
	1298, 426, 2124, 1636, 827, 1318, 1173, 794, 2153, 795,
	1190, 546, 1192, 1496, 803, 536, 2164, 1173, 794, 822,
	795, 1571, 1191, 923, 1426, 640, 1415, 81, 1193, 76,
	90, 90, 90, 1412, 1380, 993, 90, 71, 1430, 90,
	294, 1457, 1217, 507, 72, 90, 90, 90, 90, 90,
	1235, 429, 809, 636, 1315, 1563, 1564, 90, 1230, 1102,
	90, 90, 1643, 298, 512, 1275, 296, 504, 808, 508,
	90, 518, 1816, 482, 1817, 90, 295, 90, 1426, 509,
	796, 2175, 889, 2125, 90, 641, 779, 637, 1673, 2038,
	1167, 796, 1388, 944, 587, 626, 90, 2170, 924, 797,
	1089, 1182, 1819, 1459, 1305, 856, 1302, 1578, 1326, 1497,
	1822, 1382, 1184, 2115, 1221, 1222, 1070, 90, 90, 522,
	1407, 291, 290, 1409, 1405, 420, 1345, 504, 1209, 627,
	833, 1185, 625, 2020, 2126, 642, 2116, 1982, 1030, 1101,
	1550, 1706, 1723, 1183, 90, 521, 90, 505, 90, 483,
	1653, 1308, 90, 1383, 1637, 1384, 90, 1569, 1312, 1173,
	1273, 1276, 1320, 1428, 2163, 1520, 1693, 2123, 1434, 2152,
	856, 423, 2150, 1337, 1337, 1348, 1466, 1359, 1468, 90,
	1518, 1951, 1818, 1371, 1372, 1373, 1414, 623, 1272, 1868,
	1670, 1211, 428, 1421, 1431, 1424, 630, 424, 506, 1440,
	821, 1441, 1442, 1439, 597, 856, 67, 1406, 595, 821,
	1579, 671, 1961, 1418, 670, 1512, 1469, 1292, 792, 1488,
	1472, 536, 425, 522, 2168, 1926, 1960, 1299, 1492, 316,
	1671, 1454, 1455, 2181, 1443, 1784, 727, 1157, 1506, 1943,
	485, 427, 1456, 1515, 1460, 1462, 1896, 1495, 609, 991,
	992, 994, 995, 1516, 56, 2162, 1838, 1521, 2030, 1704,
	2176, 502, 497, 1837, 1620, 1391, 669, 1493, 1492, 1835,
	1480, 1387, 1212, 1541, 1482, 1483, 2169, 1473, 1274, 1580,
	317, 522, 1498, 797, 1486, 1505, 909, 1495, 961, 1159,
	316, 671, 952, 1669, 797, 2171, 1158, 882, 1160, 1490,
	969, 1173, 883, 883, 1235, 1470, 1897, 1493, 610, 834,
	941, 611, 2085, 484, 905, 1689, 1870, 1927, 1513, 1511,
	1944, 1785, 1491, 670, 907, 316, 2180, 1786, 1397, 1396,
	1883, 1701, 519, 1700, 609, 567, 908, 1882, 1527, 1494,
	522, 317, 426, 566, 661, 1679, 1861, 1417, 1697, 855,
	1485, 1329, 885, 2023, 1836, 1517, 1538, 1925, 1941, 1594,
	1834, 1631, 1519, 970, 1729, 1651, 1574, 1572, 1573, 1565,
	1566, 1567, 1568, 1570, 1571, 669, 317, 90, 90, 1494,
	1942, 1557, 1522, 1423, 1177, 1660, 1127, 1115, 1112, 646,
	645, 638, 429, 635, 634, 633, 1597, 1598, 1599, 632,
	631, 628, 90, 565, 558, 1595, 90, 1052, 90, 933,
	1328, 2119, 1526, 2082, 883, 90, 1809, 1641, 504, 1616,
	1529, 1639, 1619, 1474, 1215, 1685, 1207, 1623, 90, 505,
	1155, 90, 1632, 1630, 842, 840, 838, 1289, 1545, 1546,
	1682, 315, 835, 90, 1881, 830, 1743, 1714, 1650, 1644,
	810, 806, 1287, 1640, 1690, 1642, 798, 1476, 1405, 1976,
	1657, 673, 1655, 1663, 532, 2154, 1711, 1662, 1715, 1661,
	917, 1589, 83, 564, 310, 25, 67, 1225, 563, 883,
	506, 1978, 1602, 1108, 1658, 1692, 473, 1699, 2040, 505,
	1702, 90, 3, 1680, 1672, 1674, 1675, 1748, 1749, 1750,
	309, 24, 1142, 1235, 985, 986, 1732, 1092, 1240, 1247,
	1703, 1707, 1708, 1107, 883, 1283, 1092, 308, 23, 307,
	11, 1828, 1105, 1284, 1646, 1285, 1647, 988, 621, 1290,
	674, 856, 419, 533, 1739, 2077, 1226, 1698, 1691, 677,
	506, 311, 10, 301, 9, 1113, 476, 477, 1742, 1110,
	987, 2063, 25, 1235, 1866, 1758, 1235, 552, 90, 90,
	90, 555, 856, 856, 1763, 1210, 556, 1206, 300, 7,
	540, 856, 856, 1136, 980, 90, 1761, 900, 24, 848,
	90, 1756, 90, 430, 90, 90, 90, 1791, 1164, 90,
	90, 2178, 504, 2179, 1833, 23, 2112, 11, 1829, 1631,
	1563, 1564, 710, 2066, 856, 1893, 993, 985, 986, 1792,
	985, 986, 302, 4, 1804, 1832, 1808, 1718, 1805, 10,
	1392, 9, 1676, 972, 90, 90, 1667, 1286, 655, 654,
	1609, 504, 655, 988, 1288, 1447, 87, 87, 286, 1379,
	1376, 90, 90, 1864, 1736, 90, 7, 1631, 1375, 414,
	415, 416, 1631, 504, 433, 90, 987, 447, 1325, 1003,
	1849, 1891, 90, 1862, 1039, 433, 1892, 1871, 1867, 1855,
	1632, 1630, 1901, 1488, 528, 528, 1913, 884, 286, 985,
	986, 286, 286, 547, 286, 1444, 1873, 87, 554, 1865,
	4, 1856, 882, 882, 656, 90, 2098, 522, 1975, 1751,
	1878, 1879, 1471, 1049, 1884, 1047, 1789, 486, 1949, 1842,
	585, 1890, 623, 1905, 421, 1848, 932, 1799, 1632, 1630,
	1392, 629, 1492, 1632, 1630, 987, 1887, 1709, 1004, 2114,
	1918, 1549, 1993, 2019, 1327, 1050, 42, 1628, 856, 704,
	1810, 1495, 1622, 1201, 855, 855, 1200, 885, 885, 318,
	90, 1872, 90, 1490, 315, 90, 1924, 918, 726, 489,
	1336, 1493, 1241, 90, 781, 728, 1235, 1235, 853, 315,
	1235, 729, 854, 1078, 716, 851, 1491, 1140, 1297, 1316,
	505, 1939, 1537, 1043, 696, 708, 707, 1313, 589, 1894,
	1953, 1631, 444, 1955, 90, 55, 1954, 1936, 440, 1429,
	1852, 822, 968, 316, 882, 1216, 1937, 965, 1638, 90,
	510, 1952, 504, 1977, 1877, 1560, 90, 997, 989, 990,
	991, 992, 994, 995, 90, 591, 1357, 852, 1349, 1631,
	1346, 506, 90, 1494, 1970, 652, 787, 2003, 1979, 1031,
	883, 90, 90, 2005, 1141, 1984, 2010, 856, 1990, 619,
	1435, 1996, 2000, 1163, 317, 682, 855, 2013, 976, 885,
	2012, 531, 1632, 1630, 1992, 530, 1196, 2018, 617, 882,
	906, 883, 883, 1181, 1024, 1021, 1987, 478, 2032, 608,
	883, 883, 90, 1999, 607, 1208, 1390, 1971, 1947, 2174,
	2039, 2034, 1964, 1965, 286, 570, 286, 447, 447, 582,
	1632, 1630, 1635, 2028, 882, 2091, 74, 90, 90, 2048,
	2037, 2025, 1973, 883, 2029, 1416, 31, 29, 26, 90,
	21, 855, 19, 90, 885, 18, 2036, 28, 17, 2057,
	27, 504, 1991, 15, 1989, 14, 856, 896, 90, 13,
	2055, 12, 41, 40, 90, 2058, 39, 1957, 2065, 1235,
	315, 90, 90, 38, 505, 2067, 855, 2064, 37, 885,
	36, 6, 2072, 2061, 5, 2, 522, 1, 0, 2069,
	0, 2073, 2076, 2068, 90, 0, 90, 2070, 0, 90,
	0, 315, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 505, 0, 2087, 0, 0, 2102, 0,
	2088, 2104, 2100, 90, 0, 506, 90, 2079, 2093, 2097,
	0, 0, 1351, 2103, 0, 505, 0, 0, 0, 2106,
	593, 2110, 2108, 2107, 0, 1631, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 598, 0, 0, 447, 447,
	90, 2105, 90, 0, 506, 2129, 2136, 883, 0, 2133,
	0, 2060, 0, 2134, 0, 1563, 1564, 0, 0, 2138,
	90, 2135, 0, 0, 1563, 1564, 506, 2147, 0, 2151,
	2149, 0, 884, 884, 2155, 0, 0, 1240, 1759, 90,
	0, 0, 0, 433, 2157, 2161, 1240, 1764, 0, 286,
	2160, 0, 0, 0, 2159, 0, 1632, 1630, 0, 2173,
	2172, 0, 2177, 0, 2090, 985, 986, 0, 0, 0,
	447, 659, 447, 0, 662, 0, 316, 0, 0, 1795,
	2182, 0, 0, 0, 0, 0, 0, 0, 988, 528,
	0, 316, 0, 0, 0, 0, 0, 1563, 1564, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 987, 0, 0, 87, 0, 883, 1569, 0, 2094,
	2095, 2096, 0, 286, 0, 1142, 1569, 317, 286, 286,
	286, 0, 828, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 884, 0, 0, 0, 0, 0,
	286, 286, 0, 2117, 0, 0, 0, 0, 87, 0,
	87, 0, 0, 0, 0, 447, 0, 993, 0, 0,
	1579, 0, 0, 0, 0, 0, 0, 0, 0, 1579,
	0, 0, 852, 852, 0, 506, 0, 0, 447, 0,
	882, 447, 0, 87, 447, 447, 447, 447, 447, 1569,
	0, 940, 0, 1351, 1351, 883, 447, 447, 0, 884,
	0, 0, 0, 433, 0, 0, 0, 0, 0, 0,
	1003, 882, 882, 0, 959, 0, 0, 0, 0, 0,
	882, 882, 0, 0, 0, 0, 0, 0, 0, 1580,
	0, 0, 855, 528, 884, 885, 554, 0, 1580, 1524,
	1525, 0, 1579, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 1351, 1351, 1351, 0, 0, 0,
	0, 0, 316, 855, 855, 0, 885, 885, 0, 0,
	0, 0, 855, 855, 0, 885, 885, 0, 0, 1004,
	0, 0, 0, 0, 852, 0, 0, 0, 0, 0,
	0, 883, 0, 316, 506, 0, 0, 0, 0, 0,
	1586, 1587, 1588, 0, 0, 855, 0, 0, 885, 0,
	0, 1580, 1963, 317, 0, 0, 1574, 1572, 1573, 1565,
	1566, 1567, 1568, 1570, 1571, 0, 1572, 1573, 1565, 1566,
	1567, 1568, 1570, 1571, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 317, 0, 0, 1097, 0, 852,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 286,
	1118, 0, 0, 286, 0, 0, 1124, 0, 0, 989,
	990, 991, 992, 994, 995, 0, 0, 0, 0, 0,
	286, 0, 1144, 1145, 852, 286, 0, 882, 286, 0,
	447, 447, 0, 447, 1151, 582, 0, 0, 0, 0,
	1573, 1565, 1566, 1567, 1568, 1570, 1571, 0, 0, 0,
	0, 0, 0, 1351, 1351, 0, 0, 0, 686, 686,
	0, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 855,
	0, 0, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1727,
	1728, 0, 0, 0, 0, 0, 0, 1351, 1351, 1351,
	1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
	1351, 1351, 1351, 1351, 1351, 1351, 1189, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 286, 286, 286,
	0, 0, 286, 1197, 0, 0, 0, 0, 0, 554,
	0, 0, 0, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 0, 1787, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 0,
	0, 885, 0, 0, 0, 0, 0, 966, 0, 971,
	884, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1025, 1026, 1027,
	1028, 1029, 0, 0, 0, 882, 0, 1037, 0, 0,
	0, 884, 884, 0, 0, 1820, 0, 1044, 1813, 0,
	884, 884, 0, 0, 0, 0, 1811, 0, 705, 53,
	1815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1821, 0,
	0, 0, 0, 884, 0, 0, 0, 855, 0, 0,
	885, 0, 286, 1385, 1386, 0, 0, 0, 1097, 1814,
	0, 1393, 0, 53, 0, 0, 0, 1398, 1399, 1401,
	1403, 1404, 0, 0, 0, 0, 0, 0, 0, 1411,
	0, 0, 1413, 286, 0, 0, 515, 0, 0, 523,
	0, 882, 286, 0, 0, 0, 53, 286, 0, 1433,
	0, 0, 0, 0, 985, 986, 286, 1005, 1006, 1007,
	1015, 1016, 1017, 0, 0, 0, 0, 0, 286, 0,
	852, 0, 0, 0, 0, 0, 0, 988, 0, 1816,
	1019, 1817, 0, 1351, 0, 0, 0, 0, 0, 1189,
	1189, 0, 0, 855, 0, 0, 885, 0, 0, 0,
	987, 852, 852, 0, 0, 0, 1002, 0, 0, 1819,
	852, 852, 0, 0, 0, 0, 959, 1822, 959, 0,
	447, 0, 0, 0, 286, 0, 0, 884, 1479, 1946,
	0, 0, 1563, 1564, 0, 1581, 1582, 1583, 0, 0,
	0, 0, 0, 852, 0, 0, 0, 0, 1903, 0,
	0, 286, 0, 0, 0, 0, 993, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 986, 1012, 1020, 0, 0, 1015,
	1016, 1017, 0, 0, 1578, 0, 0, 1351, 0, 1818,
	0, 1018, 0, 0, 0, 0, 988, 0, 0, 1019,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 1003,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	0, 686, 0, 2022, 1569, 0, 884, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 0,
	1277, 0, 1279, 1280, 1281, 1282, 0, 523, 0, 1584,
	0, 0, 0, 0, 0, 993, 0, 852, 1004, 0,
	0, 1306, 0, 0, 0, 1351, 0, 1579, 0, 0,
	0, 0, 0, 1013, 1012, 1020, 0, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 1347, 1627, 1358,
	1360, 1365, 1368, 1369, 1370, 0, 0, 0, 0, 0,
	0, 0, 1010, 0, 0, 884, 0, 0, 1003, 0,
	0, 2078, 0, 0, 789, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	286, 0, 0, 0, 0, 0, 1580, 1011, 0, 0,
	999, 1000, 1001, 1014, 0, 998, 996, 997, 989, 990,
	991, 992, 994, 995, 1677, 0, 0, 0, 1097, 1427,
	959, 0, 0, 0, 0, 0, 852, 1687, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1004, 0, 0,
	286, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 1722, 0, 0, 0, 0,
	0, 884, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1575, 1576,
	1577, 0, 0, 1574, 1572, 1573, 1565, 1566, 1567, 1568,
	1570, 1571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1753, 0, 0, 1481, 0, 0, 0,
	0, 978, 0, 0, 0, 852, 1011, 0, 0, 0,
	0, 0, 1014, 0, 998, 996, 997, 989, 990, 991,
	992, 994, 995, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 1509, 0, 0, 0, 0, 1514, 0, 0, 0,
	1806, 1807, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1627, 554, 0, 0,
	0, 0, 1840, 0, 1841, 0, 286, 1843, 1844, 1533,
	0, 1847, 286, 0, 0, 0, 1540, 0, 0, 1544,
	0, 852, 0, 0, 0, 0, 0, 0, 1553, 0,
	0, 0, 0, 0, 0, 0, 1563, 1564, 0, 1581,
	1582, 1583, 0, 0, 1627, 0, 554, 1197, 0, 1627,
	0, 0, 1902, 1037, 0, 0, 0, 0, 0, 1365,
	1365, 1365, 0, 286, 286, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1722, 0, 0,
	0, 0, 0, 0, 1899, 0, 0, 0, 1578, 0,
	0, 515, 1624, 0, 515, 515, 0, 0, 1563, 1564,
	0, 1581, 1582, 1583, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1734, 0, 1034, 1919, 1036, 0,
	0, 0, 0, 0, 686, 1040, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 789, 0, 1569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1097, 1584, 1938, 0, 0, 1940, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 1627, 0,
	0, 1579, 0, 0, 0, 0, 0, 0, 0, 0,
	1569, 0, 0, 0, 0, 1725, 0, 0, 1726, 0,
	0, 0, 0, 1972, 0, 0, 554, 0, 0, 53,
	1731, 0, 53, 0, 0, 0, 1627, 0, 0, 1740,
	0, 286, 0, 0, 0, 1584, 0, 1744, 1995, 0,
	1453, 0, 0, 53, 0, 53, 286, 0, 0, 0,
	0, 0, 0, 1579, 1722, 1760, 0, 0, 0, 1762,
	1580, 0, 53, 554, 1722, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1793, 1794, 0, 0, 0, 0, 0, 0,
	0, 1800, 1801, 1802, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1580, 0, 0, 0, 0, 1830, 0, 2041,
	2042, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2053, 1575, 1576, 1577, 2054, 0, 1574, 1572, 1573,
	1565, 1566, 1567, 1568, 1570, 1571, 0, 0, 0, 0,
	554, 0, 0, 0, 0, 0, 1722, 0, 0, 0,
	0, 0, 0, 1722, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1876, 2086, 0, 554, 0,
	0, 286, 0, 1236, 1575, 1576, 1577, 0, 0, 1574,
	1572, 1573, 1565, 1566, 1567, 1568, 1570, 1571, 0, 0,
	0, 0, 1627, 0, 0, 1995, 0, 1904, 1722, 0,
	0, 1907, 1908, 0, 0, 0, 1910, 0, 0, 1295,
	0, 0, 0, 1912, 0, 1914, 0, 0, 0, 0,
	0, 0, 0, 1920, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 554, 0, 0, 0, 0, 985,
	986, 0, 1005, 1006, 1007, 1015, 1016, 1017, 0, 0,
	0, 0, 2148, 0, 0, 1008, 1929, 0, 0, 0,
	0, 0, 988, 0, 0, 1019, 0, 0, 0, 0,
	0, 1722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 1002, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 53, 0, 0, 1962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1563, 1564, 0, 1581,
	1582, 1583, 0, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 0, 0, 0, 0, 0, 0,
	1998, 985, 986, 0, 1005, 1006, 1007, 1015, 1016, 1017,
	1012, 1020, 0, 0, 0, 0, 0, 1008, 1578, 0,
	2014, 2015, 0, 0, 988, 0, 1018, 1019, 0, 0,
	0, 0, 1563, 1564, 0, 1581, 1582, 1583, 1010, 0,
	0, 0, 0, 0, 1003, 53, 0, 987, 1733, 53,
	2027, 0, 0, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2031, 0, 0, 53, 0, 1569, 1009,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 1578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 0, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1004, 0, 1295, 0, 0, 0, 0,
	0, 1579, 1012, 1020, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 1569, 1036, 0, 0, 1018, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 1003, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1009, 0, 0, 0, 0, 0, 1579, 0, 0,
	1580, 0, 1011, 0, 1036, 999, 1000, 1001, 1014, 0,
	998, 996, 997, 989, 990, 991, 992, 994, 995, 0,
	2130, 0, 0, 0, 0, 0, 1932, 0, 0, 0,
	0, 0, 0, 0, 0, 1004, 0, 0, 0, 0,
	0, 0, 0, 2146, 2146, 0, 0, 0, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1580, 0, 0, 0,
	0, 2146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1575, 1576, 1577, 0, 1236, 1574, 1572, 1573,
	1565, 1566, 1567, 1568, 1570, 1571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2146, 0, 0, 0,
	0, 0, 0, 0, 1011, 0, 0, 999, 1000, 1001,
	1014, 0, 998, 996, 997, 989, 990, 991, 992, 994,
	995, 0, 0, 0, 0, 0, 1236, 0, 1605, 1236,
	0, 0, 0, 0, 0, 0, 53, 0, 1575, 1576,
	1577, 0, 0, 1574, 1572, 1573, 1565, 1566, 1567, 1568,
	1570, 1571, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 53, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 537, 157, 1236,
	1236, 158, 265, 1236, 159, 0, 266, 160, 161, 162,
	163, 523, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 73, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 586, 283,
	0, 0, 226, 0, 0, 0, 71, 227, 228, 229,
	230, 231, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1233, 0, 1238, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1980, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1036, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 92, 93, 333, 94, 334, 335,
	336, 337, 232, 338, 339, 340, 341, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 342, 99, 239,
	240, 100, 343, 344, 241, 242, 243, 345, 101, 244,
	346, 319, 347, 102, 103, 104, 0, 105, 348, 106,
	107, 108, 349, 320, 109, 110, 350, 351, 352, 353,
	354, 355, 111, 112, 287, 113, 245, 114, 246, 247,
	356, 115, 357, 116, 358, 359, 360, 117, 118, 361,
	119, 362, 0, 363, 248, 120, 121, 122, 249, 250,
	364, 365, 366, 123, 124, 251, 0, 125, 367, 126,
	368, 369, 321, 370, 127, 252, 371, 253, 372, 128,
	129, 130, 131, 254, 255, 323, 373, 135, 374, 132,
	375, 322, 133, 256, 134, 257, 258, 259, 376, 260,
	377, 324, 136, 325, 137, 138, 378, 140, 139, 379,
	261, 326, 141, 327, 380, 142, 381, 382, 143, 0,
	144, 145, 146, 148, 262, 147, 328, 149, 150, 152,
	151, 383, 384, 385, 263, 153, 264, 154, 155, 386,
	156, 387, 388, 157, 389, 390, 158, 265, 329, 159,
	330, 266, 160, 161, 162, 163, 391, 267, 164, 268,
	165, 392, 166, 167, 168, 169, 269, 170, 171, 393,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 394, 183, 331, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 395, 271, 194, 195, 196, 396, 197,
	187, 188, 198, 332, 199, 272, 273, 200, 397, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 398, 207,
	399, 208, 209, 210, 211, 212, 400, 276, 277, 278,
	401, 402, 213, 279, 280, 403, 214, 215, 216, 217,
	404, 405, 218, 219, 220, 221, 406, 222, 407, 281,
	223, 224, 225, 282, 283, 408, 409, 226, 410, 411,
	412, 413, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	0, 0, 0, 0, 0, 1716, 0, 0, 0, 0,
	0, 0, 0, 1717, 92, 93, 333, 94, 334, 335,
	336, 337, 232, 338, 339, 340, 341, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 342, 99, 239,
	240, 100, 343, 344, 241, 242, 243, 345, 101, 244,
	346, 319, 347, 102, 103, 104, 0, 105, 348, 106,
	107, 108, 349, 320, 109, 110, 350, 351, 352, 353,
	354, 355, 111, 112, 287, 113, 245, 114, 246, 247,
	356, 115, 357, 116, 358, 359, 360, 117, 118, 361,
	119, 362, 0, 363, 248, 120, 121, 122, 249, 250,
	364, 365, 366, 123, 124, 251, 0, 125, 367, 126,
	368, 369, 321, 370, 127, 252, 371, 253, 372, 128,
	129, 130, 131, 254, 255, 323, 373, 135, 374, 132,
	375, 322, 133, 256, 134, 257, 258, 259, 376, 260,
	377, 324, 136, 325, 137, 138, 378, 140, 139, 379,
	261, 326, 141, 327, 380, 142, 381, 382, 143, 0,
	144, 145, 146, 148, 262, 147, 328, 149, 150, 152,
	151, 383, 384, 385, 263, 153, 264, 154, 155, 386,
	156, 387, 388, 157, 389, 390, 158, 265, 329, 159,
	330, 266, 160, 161, 162, 163, 391, 267, 164, 268,
	165, 392, 166, 167, 168, 169, 269, 170, 171, 393,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 394, 183, 331, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 395, 271, 194, 195, 196, 396, 197,
	187, 188, 198, 332, 199, 272, 273, 200, 397, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 398, 207,
	399, 208, 209, 210, 211, 212, 400, 276, 277, 278,
	401, 402, 213, 279, 280, 403, 214, 215, 216, 217,
	404, 405, 218, 219, 220, 221, 406, 222, 407, 281,
	223, 224, 225, 282, 283, 408, 409, 226, 410, 411,
	412, 413, 227, 228, 229, 230, 231, 0, 0, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2071, 92, 93, 333, 94,
	334, 335, 336, 337, 232, 338, 339, 340, 341, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 342,
	99, 239, 240, 100, 343, 344, 241, 242, 243, 345,
	101, 244, 346, 319, 347, 102, 103, 104, 0, 105,
	348, 106, 107, 108, 349, 320, 109, 110, 350, 351,
	352, 353, 354, 355, 111, 112, 287, 113, 245, 114,
	246, 247, 356, 115, 357, 116, 358, 359, 360, 117,
	118, 361, 119, 362, 0, 363, 248, 120, 121, 122,
	249, 250, 364, 365, 366, 123, 124, 251, 0, 125,
	367, 126, 368, 369, 321, 370, 127, 252, 371, 253,
	372, 128, 129, 130, 131, 254, 255, 323, 373, 135,
	374, 132, 375, 322, 133, 256, 134, 257, 258, 259,
	376, 260, 377, 324, 136, 325, 137, 138, 378, 140,
	139, 379, 261, 326, 141, 327, 380, 142, 381, 382,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 383, 384, 385, 263, 153, 264, 154,
	155, 386, 156, 387, 388, 157, 389, 390, 158, 265,
	329, 159, 330, 266, 160, 161, 162, 163, 391, 267,
	164, 268, 165, 392, 166, 167, 168, 169, 269, 170,
	171, 393, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 394, 183, 331, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 395, 271, 194, 195, 196,
	396, 197, 187, 188, 198, 332, 199, 272, 273, 200,
	397, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	398, 207, 399, 208, 209, 210, 211, 212, 400, 276,
	277, 278, 401, 402, 213, 279, 280, 403, 214, 215,
	216, 217, 404, 405, 218, 219, 220, 221, 406, 222,
	407, 281, 223, 224, 225, 282, 283, 408, 409, 226,
	410, 411, 412, 413, 227, 228, 229, 230, 231, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 0, 92, 93, 333, 94, 334,
	335, 336, 337, 232, 338, 339, 340, 341, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 342, 99,
	239, 240, 100, 343, 344, 241, 242, 243, 345, 101,
	244, 346, 319, 347, 102, 103, 104, 0, 105, 348,
	106, 107, 108, 349, 320, 109, 110, 350, 351, 352,
	353, 354, 355, 111, 112, 287, 113, 245, 114, 246,
	247, 356, 115, 357, 116, 358, 359, 360, 117, 118,
	361, 119, 362, 0, 363, 248, 120, 121, 122, 249,
	250, 364, 365, 366, 123, 124, 251, 0, 125, 367,
	126, 368, 369, 321, 370, 127, 252, 371, 253, 372,
	128, 129, 130, 131, 254, 255, 323, 373, 135, 374,
	132, 375, 322, 133, 256, 134, 257, 258, 259, 376,
	260, 377, 324, 136, 325, 137, 138, 378, 140, 139,
	379, 261, 326, 141, 327, 380, 142, 381, 382, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 383, 384, 385, 263, 153, 264, 154, 155,
	386, 156, 387, 388, 157, 389, 390, 158, 265, 329,
	159, 330, 266, 160, 161, 162, 163, 391, 267, 164,
	268, 165, 392, 166, 167, 168, 169, 269, 170, 171,
	393, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 394, 183, 331, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 395, 271, 194, 195, 196, 396,
	197, 187, 188, 198, 332, 199, 272, 273, 200, 397,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 398,
	207, 399, 208, 209, 210, 211, 212, 400, 276, 277,
	278, 401, 402, 213, 279, 280, 403, 214, 215, 216,
	217, 404, 405, 218, 219, 220, 221, 406, 222, 407,
	281, 223, 224, 225, 282, 283, 408, 409, 226, 410,
	411, 412, 413, 227, 228, 229, 230, 231, 724, 713,
	714, 711, 712, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 740, 706, 0, 0, 0, 95, 96, 97,
	233, 755, 235, 756, 98, 757, 758, 0, 99, 239,
	240, 100, 709, 739, 759, 760, 243, 0, 101, 751,
	0, 732, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 320, 109, 110, 0, 733, 735, 0,
	734, 736, 111, 112, 287, 113, 761, 114, 762, 763,
	790, 115, 0, 116, 0, 0, 0, 754, 118, 0,
	119, 0, 0, 0, 697, 120, 121, 122, 741, 742,
	720, 0, 0, 123, 124, 764, 0, 125, 0, 126,
	0, 0, 321, 0, 127, 752, 0, 253, 0, 128,
	129, 130, 131, 748, 750, 323, 0, 135, 0, 132,
	0, 322, 133, 765, 134, 766, 767, 768, 0, 731,
	0, 324, 136, 325, 137, 138, 0, 140, 139, 0,
	753, 326, 141, 327, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 328, 149, 150, 152,
	151, 692, 0, 721, 749, 153, 769, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 329, 159,
	330, 743, 160, 161, 162, 163, 0, 744, 164, 268,
	165, 0, 166, 167, 168, 169, 770, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 331, 184, 185, 698, 186, 0, 190,
	191, 192, 193, 73, 271, 194, 195, 196, 737, 197,
	187, 188, 198, 332, 199, 771, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 772, 204, 745, 0, 207,
	75, 208, 209, 210, 211, 212, 0, 276, 773, 774,
	0, 0, 213, 746, 747, 719, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 738, 222, 0, 281,
	223, 224, 225, 586, 775, 0, 0, 226, 0, 0,
	0, 71, 227, 228, 229, 230, 231, 693, 72, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 689, 690,
	724, 713, 714, 711, 712, 703, 0, 699, 0, 0,
	0, 0, 702, 0, 0, 0, 92, 93, 1322, 94,
	0, 0, 0, 0, 740, 706, 0, 0, 0, 95,
	96, 97, 233, 755, 235, 756, 98, 757, 758, 0,
	99, 239, 240, 100, 709, 739, 759, 760, 243, 0,
	101, 751, 0, 732, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 733,
	735, 0, 734, 736, 111, 112, 287, 113, 761, 114,
	762, 763, 0, 115, 0, 116, 0, 1323, 0, 754,
	118, 0, 119, 0, 0, 0, 697, 120, 121, 122,
	741, 742, 720, 0, 0, 123, 124, 764, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 752, 0, 253,
	0, 128, 129, 130, 131, 748, 750, 323, 0, 135,
	0, 132, 0, 322, 133, 765, 134, 766, 767, 768,
	0, 731, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 753, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 692, 0, 721, 749, 153, 769, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 743, 160, 161, 162, 163, 0, 744,
	164, 268, 165, 0, 166, 167, 168, 169, 770, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 698, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	737, 197, 187, 188, 198, 332, 199, 771, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 772, 204, 745,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	773, 774, 0, 0, 213, 746, 747, 719, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 738, 222,
	0, 281, 223, 224, 225, 282, 775, 1321, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 693,
	0, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	689, 690, 1324, 724, 713, 714, 711, 712, 703, 699,
	1319, 0, 0, 0, 702, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 740, 706, 0,
	0, 0, 95, 96, 97, 233, 755, 235, 756, 98,
	757, 758, 0, 99, 239, 240, 100, 709, 739, 759,
	760, 243, 0, 101, 751, 0, 732, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 733, 735, 0, 734, 736, 111, 112, 287,
	113, 761, 114, 762, 763, 0, 115, 0, 116, 0,
	0, 0, 754, 118, 0, 119, 0, 0, 0, 697,
	120, 121, 122, 741, 742, 720, 0, 0, 123, 124,
	764, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	752, 0, 253, 0, 128, 129, 130, 131, 748, 750,
	323, 0, 135, 0, 132, 0, 322, 133, 765, 134,
	766, 767, 768, 0, 731, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 753, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 692, 0, 721, 749,
	153, 769, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 743, 160, 161, 162,
	163, 0, 744, 164, 268, 165, 0, 166, 167, 168,
	169, 770, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 698, 186, 0, 190, 191, 192, 193, 73, 271,
	194, 195, 196, 737, 197, 187, 188, 198, 332, 199,
	771, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	772, 204, 745, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 276, 773, 774, 0, 0, 213, 746, 747,
	719, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 738, 222, 0, 281, 223, 224, 225, 586, 775,
	0, 0, 226, 0, 0, 0, 71, 227, 228, 229,
	230, 231, 693, 72, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 689, 690, 724, 713, 714, 711, 712,
	703, 0, 699, 0, 0, 0, 0, 702, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 740,
	706, 0, 0, 0, 95, 96, 97, 233, 755, 235,
	756, 98, 757, 758, 1361, 99, 239, 240, 100, 709,
	739, 759, 760, 243, 0, 101, 751, 0, 732, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 733, 735, 0, 734, 736, 111,
	112, 287, 113, 761, 114, 762, 763, 0, 115, 0,
	116, 0, 0, 0, 754, 118, 0, 119, 0, 0,
	0, 697, 120, 121, 122, 741, 742, 720, 0, 0,
	123, 124, 764, 0, 125, 0, 126, 0, 1366, 321,
	0, 127, 752, 0, 253, 0, 128, 129, 130, 131,
	748, 750, 323, 0, 135, 0, 132, 0, 322, 133,
	765, 134, 766, 767, 768, 0, 731, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 1362, 753, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 692, 0,
	721, 749, 153, 769, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 743, 160,
	161, 162, 163, 0, 744, 164, 268, 165, 0, 166,
	167, 168, 169, 770, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 698, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 737, 197, 187, 188, 198,
	332, 199, 771, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 772, 204, 745, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 773, 774, 0, 1363, 213,
	746, 747, 719, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 738, 222, 0, 281, 223, 224, 225,
	282, 775, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 693, 0, 0, 0, 0, 0,
	691, 0, 0, 0, 0, 689, 690, 724, 713, 714,
	711, 712, 703, 0, 699, 0, 0, 0, 0, 702,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 740, 706, 0, 0, 0, 95, 96, 97, 233,
	755, 235, 756, 98, 757, 758, 0, 99, 239, 240,
	100, 709, 739, 759, 760, 243, 0, 101, 751, 0,
	732, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 320, 109, 110, 0, 733, 735, 0, 734,
	736, 111, 112, 287, 113, 761, 114, 762, 763, 0,
	115, 0, 116, 0, 0, 0, 754, 118, 0, 119,
	0, 0, 0, 697, 120, 121, 122, 741, 742, 720,
	0, 0, 123, 124, 764, 0, 125, 0, 126, 0,
	0, 321, 0, 127, 752, 0, 253, 0, 128, 129,
	130, 131, 748, 750, 323, 0, 135, 0, 132, 0,
	322, 133, 765, 134, 766, 767, 768, 0, 731, 0,
	324, 136, 325, 137, 138, 0, 140, 139, 0, 753,
	326, 141, 327, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	692, 1656, 721, 749, 153, 769, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 329, 159, 330,
	743, 160, 161, 162, 163, 0, 744, 164, 268, 165,
	0, 166, 167, 168, 169, 770, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 331, 184, 185, 698, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 737, 197, 187,
	188, 198, 332, 199, 771, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 772, 204, 745, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 773, 774, 0,
	0, 213, 746, 747, 719, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 738, 222, 0, 281, 223,
	224, 225, 282, 775, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 693, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 689, 690, 687,
	724, 713, 714, 711, 712, 703, 699, 0, 0, 0,
	0, 702, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 740, 706, 0, 0, 0, 95,
	96, 97, 233, 755, 235, 756, 98, 757, 758, 0,
	99, 239, 240, 100, 709, 739, 759, 760, 243, 0,
	101, 751, 0, 732, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 733,
	735, 0, 734, 736, 111, 112, 287, 113, 761, 114,
	762, 763, 0, 115, 0, 116, 0, 0, 0, 754,
	118, 0, 119, 0, 0, 0, 697, 120, 121, 122,
	741, 742, 720, 0, 0, 123, 124, 764, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 752, 0, 253,
	0, 128, 129, 130, 131, 748, 750, 323, 0, 135,
	0, 132, 0, 322, 133, 765, 134, 766, 767, 768,
	0, 731, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 753, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 692, 0, 721, 749, 153, 769, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 743, 160, 161, 162, 163, 0, 744,
	164, 268, 165, 0, 166, 167, 168, 169, 770, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 698, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	737, 197, 187, 188, 198, 332, 199, 771, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 772, 204, 745,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	773, 774, 0, 0, 213, 746, 747, 719, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 738, 222,
	0, 281, 223, 224, 225, 282, 775, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 693,
	0, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	689, 690, 0, 0, 0, 0, 0, 1042, 1314, 699,
	0, 0, 0, 0, 702, 724, 713, 714, 711, 712,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 740,
	706, 0, 0, 0, 95, 96, 97, 233, 755, 235,
	756, 98, 757, 758, 0, 99, 239, 240, 100, 709,
	739, 759, 760, 243, 0, 101, 751, 0, 732, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 733, 735, 0, 734, 736, 111,
	112, 287, 113, 761, 114, 762, 763, 0, 115, 0,
	116, 0, 0, 0, 754, 118, 0, 119, 0, 0,
	0, 697, 120, 121, 122, 741, 742, 720, 0, 0,
	123, 124, 764, 0, 125, 0, 126, 0, 0, 321,
	0, 127, 752, 0, 253, 0, 128, 129, 130, 131,
	748, 750, 323, 0, 135, 0, 132, 0, 322, 133,
	765, 134, 766, 767, 768, 0, 731, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 0, 753, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 692, 0,
	721, 749, 153, 769, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 743, 160,
	161, 162, 163, 0, 744, 164, 268, 165, 0, 166,
	167, 168, 169, 770, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 698, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 737, 197, 187, 188, 198,
	332, 199, 771, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 772, 204, 745, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 773, 774, 0, 0, 213,
	746, 747, 719, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 738, 222, 0, 281, 223, 224, 225,
	282, 775, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 693, 0, 0, 0, 0, 0,
	691, 0, 0, 0, 0, 689, 690, 724, 713, 714,
	711, 712, 703, 0, 699, 1790, 0, 0, 0, 702,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 740, 706, 0, 0, 0, 95, 96, 97, 233,
	755, 235, 756, 98, 757, 758, 0, 99, 239, 240,
	100, 709, 739, 759, 760, 243, 0, 101, 751, 0,
	732, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 320, 109, 110, 0, 733, 735, 0, 734,
	736, 111, 112, 287, 113, 761, 114, 762, 763, 0,
	115, 0, 116, 0, 0, 0, 754, 118, 0, 119,
	0, 0, 0, 697, 120, 121, 122, 741, 742, 720,
	0, 0, 123, 124, 764, 0, 125, 0, 126, 0,
	0, 321, 0, 127, 752, 0, 253, 0, 128, 129,
	130, 131, 748, 750, 323, 0, 135, 0, 132, 0,
	322, 133, 765, 134, 766, 767, 768, 0, 731, 0,
	324, 136, 325, 137, 138, 0, 140, 139, 0, 753,
	326, 141, 327, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	692, 0, 721, 749, 153, 769, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 329, 159, 330,
	743, 160, 161, 162, 163, 0, 744, 164, 268, 165,
	0, 166, 167, 168, 169, 770, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 331, 184, 185, 698, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 737, 197, 187,
	188, 198, 332, 199, 771, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 772, 204, 745, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 773, 774, 0,
	0, 213, 746, 747, 719, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 738, 222, 0, 281, 223,
	224, 225, 282, 775, 1747, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 693, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 689, 690, 724,
	713, 714, 711, 712, 703, 0, 699, 0, 0, 0,
	0, 702, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 740, 706, 0, 0, 0, 95, 96,
	97, 233, 755, 235, 756, 98, 757, 758, 0, 99,
	239, 240, 100, 709, 739, 759, 760, 243, 0, 101,
	751, 0, 732, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 320, 109, 110, 0, 733, 735,
	0, 734, 736, 111, 112, 287, 113, 761, 114, 762,
	763, 0, 115, 0, 116, 0, 0, 0, 754, 118,
	0, 119, 0, 0, 0, 697, 120, 121, 122, 741,
	742, 720, 0, 0, 123, 124, 764, 0, 125, 0,
	126, 0, 0, 321, 0, 127, 752, 0, 253, 0,
	128, 129, 130, 131, 748, 750, 323, 0, 135, 0,
	132, 0, 322, 133, 765, 134, 766, 767, 768, 0,
	731, 0, 324, 136, 325, 137, 138, 0, 140, 139,
	0, 753, 326, 141, 327, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 692, 0, 721, 749, 153, 769, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 329,
	159, 330, 743, 160, 161, 162, 163, 0, 744, 164,
	268, 165, 0, 166, 167, 168, 169, 770, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 331, 184, 185, 698, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 737,
	197, 187, 188, 198, 332, 199, 771, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 772, 204, 745, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 773,
	774, 0, 0, 213, 746, 747, 719, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 738, 222, 0,
	281, 223, 224, 225, 282, 775, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 693, 0,
	0, 0, 0, 0, 691, 0, 0, 0, 0, 689,
	690, 724, 713, 714, 711, 712, 703, 0, 699, 1737,
	0, 0, 0, 702, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 740, 706, 0, 0, 0,
	95, 96, 97, 233, 755, 235, 756, 98, 757, 758,
	0, 99, 239, 240, 100, 709, 739, 759, 760, 243,
	0, 101, 751, 0, 732, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	733, 735, 0, 734, 736, 111, 112, 287, 113, 761,
	114, 762, 763, 790, 115, 0, 116, 0, 0, 0,
	754, 118, 0, 119, 0, 0, 0, 697, 120, 121,
	122, 741, 742, 720, 0, 0, 123, 124, 764, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 752, 0,
	253, 0, 128, 129, 130, 131, 748, 750, 323, 0,
	135, 0, 132, 0, 322, 133, 765, 134, 766, 767,
	768, 0, 731, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 753, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 692, 0, 721, 749, 153, 769,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 743, 160, 161, 162, 163, 0,
	744, 164, 268, 165, 0, 166, 167, 168, 169, 770,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 698,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 737, 197, 187, 188, 198, 332, 199, 771, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 772, 204,
	745, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 773, 774, 0, 0, 213, 746, 747, 719, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 738,
	222, 0, 281, 223, 224, 225, 282, 775, 0, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	693, 0, 0, 0, 0, 0, 691, 0, 0, 0,
	0, 689, 690, 724, 713, 714, 711, 712, 703, 0,
	699, 0, 0, 0, 0, 702, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 740, 706, 0,
	0, 0, 95, 96, 97, 233, 755, 235, 756, 98,
	757, 758, 0, 99, 239, 240, 100, 709, 739, 759,
	760, 243, 0, 101, 751, 0, 732, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 733, 735, 0, 734, 736, 111, 112, 287,
	113, 761, 114, 762, 763, 0, 115, 0, 116, 0,
	0, 0, 754, 118, 0, 119, 0, 0, 0, 697,
	120, 121, 122, 741, 742, 720, 0, 0, 123, 124,
	764, 0, 125, 0, 126, 0, 1366, 321, 0, 127,
	752, 0, 253, 0, 128, 129, 130, 131, 748, 750,
	323, 0, 135, 0, 132, 0, 322, 133, 765, 134,
	766, 767, 768, 0, 731, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 753, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 692, 0, 721, 749,
	153, 769, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 743, 160, 161, 162,
	163, 0, 744, 164, 268, 165, 0, 166, 167, 168,
	169, 770, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 698, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 737, 197, 187, 188, 198, 332, 199,
	771, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	772, 204, 745, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 773, 774, 0, 0, 213, 746, 747,
	719, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 738, 222, 0, 281, 223, 224, 225, 282, 775,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 693, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 689, 690, 724, 713, 714, 711, 712,
	703, 0, 699, 0, 0, 0, 0, 702, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 740,
	706, 0, 0, 0, 95, 96, 97, 233, 755, 235,
	756, 98, 757, 758, 0, 99, 239, 240, 100, 709,
	739, 759, 760, 243, 0, 101, 751, 0, 732, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 733, 735, 0, 734, 736, 111,
	112, 287, 113, 761, 114, 762, 763, 0, 115, 0,
	116, 0, 0, 0, 754, 118, 0, 119, 0, 0,
	0, 697, 120, 121, 122, 741, 742, 720, 0, 0,
	123, 124, 764, 0, 125, 0, 126, 0, 0, 321,
	0, 127, 752, 0, 253, 0, 128, 129, 130, 131,
	748, 750, 323, 0, 135, 0, 132, 0, 322, 133,
	765, 134, 766, 767, 768, 0, 731, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 0, 753, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 692, 0,
	721, 749, 153, 769, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 743, 160,
	161, 162, 163, 0, 744, 164, 268, 165, 0, 166,
	167, 168, 169, 770, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 698, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 737, 197, 187, 188, 198,
	332, 199, 771, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 772, 204, 745, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 773, 774, 0, 0, 213,
	746, 747, 719, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 738, 222, 0, 281, 223, 224, 225,
	282, 775, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 693, 0, 0, 0, 0, 0,
	691, 0, 0, 0, 0, 689, 690, 724, 713, 714,
	711, 712, 703, 0, 699, 1309, 0, 0, 0, 702,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 740, 706, 0, 0, 0, 95, 96, 97, 233,
	755, 235, 756, 98, 757, 758, 0, 99, 239, 240,
	100, 709, 739, 759, 760, 243, 0, 101, 751, 0,
	732, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 320, 109, 110, 0, 733, 735, 0, 734,
	736, 111, 112, 287, 113, 761, 114, 762, 763, 0,
	115, 0, 116, 0, 0, 0, 754, 118, 0, 119,
	0, 0, 0, 697, 120, 121, 122, 741, 742, 720,
	0, 0, 123, 124, 764, 0, 125, 0, 126, 0,
	0, 321, 0, 127, 752, 0, 253, 0, 128, 129,
	130, 131, 748, 750, 323, 0, 135, 0, 132, 0,
	322, 133, 765, 134, 766, 767, 768, 0, 731, 0,
	324, 136, 325, 137, 138, 0, 140, 139, 0, 753,
	326, 141, 327, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	692, 0, 721, 749, 153, 769, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 329, 159, 330,
	743, 160, 161, 162, 163, 0, 744, 164, 268, 165,
	0, 166, 167, 168, 169, 770, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 331, 184, 185, 698, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 737, 197, 187,
	188, 198, 332, 199, 771, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 772, 204, 745, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 773, 774, 0,
	0, 213, 746, 747, 719, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 738, 222, 0, 281, 223,
	224, 225, 282, 775, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 693, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 689, 690, 687,
	724, 713, 714, 711, 712, 703, 699, 0, 0, 0,
	0, 702, 0, 0, 0, 0, 92, 93, 967, 94,
	0, 0, 0, 0, 740, 706, 0, 0, 0, 95,
	96, 97, 233, 755, 235, 756, 98, 757, 758, 0,
	99, 239, 240, 100, 709, 739, 759, 760, 243, 0,
	101, 751, 0, 732, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 733,
	735, 0, 734, 736, 111, 112, 287, 113, 761, 114,
	762, 763, 0, 115, 0, 116, 0, 0, 0, 754,
	118, 0, 119, 0, 0, 0, 697, 120, 121, 122,
	741, 742, 720, 0, 0, 123, 124, 764, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 752, 0, 253,
	0, 128, 129, 130, 131, 748, 750, 323, 0, 135,
	0, 132, 0, 322, 133, 765, 134, 766, 767, 768,
	0, 731, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 753, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 692, 0, 721, 749, 153, 769, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 743, 160, 161, 162, 163, 0, 744,
	164, 268, 165, 0, 166, 167, 168, 169, 770, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 698, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	737, 197, 187, 188, 198, 332, 199, 771, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 772, 204, 745,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	773, 774, 0, 0, 213, 746, 747, 719, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 738, 222,
	0, 281, 223, 224, 225, 282, 775, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 693,
	0, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	689, 690, 724, 713, 714, 711, 712, 703, 0, 699,
	0, 0, 0, 0, 702, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 740, 706, 0, 0,
	0, 95, 96, 97, 233, 755, 235, 756, 98, 757,
	758, 0, 99, 239, 240, 100, 709, 739, 759, 760,
	243, 0, 101, 751, 0, 732, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 2145,
	0, 733, 735, 0, 734, 736, 111, 112, 287, 113,
	761, 114, 762, 763, 0, 115, 0, 116, 0, 0,
	0, 754, 118, 0, 119, 0, 0, 0, 697, 120,
	121, 122, 741, 742, 720, 0, 0, 123, 124, 764,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 752,
	0, 253, 0, 128, 129, 130, 131, 748, 750, 323,
	0, 135, 0, 132, 0, 322, 133, 765, 134, 766,
	767, 768, 0, 731, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 753, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 692, 0, 721, 749, 153,
	769, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 743, 160, 161, 162, 163,
	0, 744, 164, 268, 165, 0, 166, 167, 168, 169,
	770, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	698, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 737, 197, 187, 188, 198, 332, 199, 771,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 772,
	204, 745, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 773, 774, 0, 0, 213, 746, 747, 719,
	214, 215, 2144, 217, 0, 0, 218, 219, 220, 221,
	738, 222, 0, 281, 223, 224, 225, 282, 775, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 693, 0, 0, 0, 0, 0, 691, 0, 0,
	0, 0, 689, 690, 724, 713, 714, 711, 712, 703,
	0, 699, 0, 0, 0, 0, 702, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 740, 706,
	0, 0, 0, 95, 96, 97, 2143, 755, 235, 756,
	98, 757, 758, 0, 99, 239, 240, 100, 709, 739,
	759, 760, 243, 0, 101, 751, 0, 732, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 2145, 0, 733, 735, 0, 734, 736, 111, 112,
	287, 113, 761, 114, 762, 763, 0, 115, 0, 116,
	0, 0, 0, 754, 118, 0, 119, 0, 0, 0,
	697, 120, 121, 122, 741, 742, 720, 0, 0, 123,
	124, 764, 0, 125, 0, 126, 0, 0, 321, 0,
	127, 752, 0, 253, 0, 128, 129, 130, 131, 748,
	750, 323, 0, 135, 0, 132, 0, 322, 133, 765,
	134, 766, 767, 768, 0, 731, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 0, 753, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 692, 0, 721,
	749, 153, 769, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 743, 160, 161,
	162, 163, 0, 744, 164, 268, 165, 0, 166, 167,
	168, 169, 770, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 698, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 737, 197, 187, 188, 198, 332,
	199, 771, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 772, 204, 745, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 773, 774, 0, 0, 213, 746,
	747, 719, 214, 215, 2144, 217, 0, 0, 218, 219,
	220, 221, 738, 222, 0, 281, 223, 224, 225, 282,
	775, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 693, 0, 0, 0, 0, 0, 691,
	0, 0, 0, 0, 689, 690, 724, 713, 714, 711,
	712, 703, 0, 699, 0, 0, 0, 0, 702, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	740, 706, 0, 0, 0, 95, 96, 97, 233, 755,
	235, 756, 98, 757, 758, 0, 99, 239, 240, 100,
	709, 739, 759, 760, 243, 0, 101, 751, 0, 732,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 320, 109, 110, 0, 733, 735, 0, 734, 736,
	111, 112, 287, 113, 761, 114, 762, 763, 0, 115,
	0, 116, 0, 0, 0, 754, 118, 0, 119, 0,
	0, 0, 697, 120, 121, 122, 741, 742, 720, 0,
	0, 123, 124, 764, 0, 125, 0, 126, 0, 0,
	321, 0, 127, 752, 0, 253, 0, 128, 129, 130,
	131, 748, 750, 323, 0, 135, 0, 132, 0, 322,
	133, 765, 134, 766, 767, 768, 0, 731, 0, 324,
	136, 325, 137, 138, 0, 140, 139, 0, 753, 326,
	141, 327, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 328, 149, 150, 152, 151, 692,
	0, 721, 749, 153, 769, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 329, 159, 330, 743,
	160, 161, 162, 163, 0, 744, 164, 268, 165, 0,
	166, 167, 168, 169, 770, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 331, 184, 185, 698, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 737, 197, 187, 188,
	198, 332, 199, 771, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 772, 204, 745, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 773, 774, 0, 0,
	213, 746, 747, 719, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 738, 222, 0, 281, 223, 224,
	225, 282, 775, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 693, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 689, 690, 1338, 713,
	714, 711, 712, 703, 0, 699, 0, 0, 0, 0,
	702, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 740, 706, 0, 0, 0, 95, 96, 97,
	233, 755, 235, 756, 98, 757, 758, 0, 99, 239,
	240, 100, 709, 739, 759, 760, 243, 0, 101, 751,
	0, 732, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 320, 109, 110, 0, 733, 735, 0,
	734, 736, 111, 112, 287, 113, 761, 1341, 762, 763,
	0, 115, 0, 116, 0, 0, 0, 754, 118, 0,
	119, 0, 0, 0, 697, 120, 121, 122, 741, 742,
	720, 0, 0, 123, 124, 764, 0, 125, 0, 126,
	0, 0, 321, 0, 127, 752, 0, 253, 0, 128,
	129, 1342, 131, 748, 750, 323, 0, 135, 0, 132,
	0, 322, 133, 765, 134, 766, 767, 768, 0, 731,
	0, 324, 136, 325, 137, 138, 0, 140, 139, 0,
	753, 326, 141, 327, 0, 142, 0, 0, 143, 0,
	144, 1343, 1340, 148, 262, 147, 328, 149, 150, 152,
	151, 692, 0, 721, 749, 153, 769, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 329, 159,
	330, 743, 160, 161, 162, 163, 0, 744, 164, 268,
	165, 0, 166, 167, 168, 169, 770, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 331, 184, 185, 698, 186, 0, 190,
	191, 192, 1344, 0, 271, 194, 195, 196, 737, 197,
	187, 188, 198, 332, 199, 771, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 772, 204, 745, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 773, 774,
	0, 0, 213, 746, 747, 719, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 738, 222, 0, 281,
	223, 224, 225, 282, 775, 0, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 1339, 231, 693, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 689, 690,
	724, 713, 714, 711, 712, 703, 0, 699, 0, 0,
	0, 0, 702, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 740, 706, 0, 0, 0, 95,
	96, 97, 233, 755, 235, 756, 98, 757, 758, 0,
	99, 239, 240, 100, 709, 739, 759, 760, 243, 0,
	101, 751, 0, 732, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 733,
	735, 0, 734, 736, 111, 112, 287, 113, 761, 114,
	762, 763, 0, 115, 0, 116, 0, 0, 0, 754,
	118, 0, 119, 0, 0, 0, 697, 120, 121, 122,
	741, 742, 720, 0, 0, 123, 124, 764, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 752, 0, 253,
	0, 128, 129, 130, 131, 748, 750, 323, 0, 135,
	0, 132, 0, 322, 133, 765, 134, 766, 767, 768,
	0, 731, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 753, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 0, 0, 721, 749, 153, 769, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 743, 160, 161, 162, 163, 0, 744,
	164, 268, 165, 0, 166, 167, 168, 169, 770, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 1356, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	737, 197, 187, 188, 198, 332, 199, 771, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 772, 204, 745,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	773, 774, 0, 0, 213, 746, 747, 719, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 738, 222,
	0, 281, 223, 224, 225, 282, 775, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 1354, 0, 0, 0, 0,
	1352, 1353, 724, 713, 714, 711, 712, 703, 0, 1355,
	0, 0, 0, 0, 702, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 740, 706, 0, 0,
	0, 95, 96, 97, 233, 755, 235, 756, 98, 757,
	758, 0, 99, 239, 240, 100, 0, 739, 759, 760,
	243, 0, 101, 751, 0, 732, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 733, 735, 0, 734, 736, 111, 112, 287, 113,
	761, 114, 762, 763, 0, 115, 0, 116, 0, 0,
	0, 754, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 741, 742, 720, 0, 0, 123, 124, 764,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 752,
	0, 253, 0, 128, 129, 130, 131, 748, 750, 323,
	0, 135, 0, 132, 0, 322, 133, 765, 134, 766,
	767, 768, 0, 731, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 753, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 721, 749, 153,
	769, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 743, 160, 161, 162, 163,
	0, 744, 164, 268, 165, 0, 166, 167, 168, 169,
	770, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	1356, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 737, 197, 187, 188, 198, 332, 199, 771,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 772,
	204, 745, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 773, 774, 0, 0, 213, 746, 747, 719,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	738, 222, 0, 281, 223, 224, 225, 282, 775, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 724, 713, 714, 711, 712, 703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 1355, 94, 0, 0, 0, 702, 740, 706, 0,
	0, 0, 95, 96, 97, 0, 755, 235, 756, 98,
	757, 758, 0, 99, 239, 240, 100, 709, 739, 759,
	760, 243, 0, 101, 751, 0, 732, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	2145, 0, 733, 735, 0, 734, 736, 111, 112, 287,
	113, 761, 114, 762, 763, 0, 115, 0, 116, 0,
	0, 0, 754, 118, 0, 119, 0, 0, 0, 697,
	120, 121, 122, 741, 742, 720, 0, 0, 123, 124,
	764, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	752, 0, 253, 0, 128, 129, 130, 131, 748, 750,
	0, 0, 135, 0, 132, 0, 322, 133, 765, 134,
	766, 767, 768, 0, 731, 0, 0, 136, 325, 137,
	138, 0, 140, 139, 0, 753, 326, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 692, 0, 721, 749,
	153, 769, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 743, 160, 161, 162,
	163, 0, 744, 164, 268, 165, 0, 166, 167, 168,
	169, 770, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 698, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 737, 197, 187, 188, 198, 0, 199,
	771, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	772, 204, 745, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 773, 774, 0, 0, 213, 746, 747,
	719, 214, 215, 2144, 217, 0, 0, 218, 219, 220,
	221, 738, 222, 0, 281, 223, 224, 225, 282, 775,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 724, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 690, 0, 0, 0, 92, 93,
	0, 94, 699, 0, 0, 0, 740, 702, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 739, 241, 242,
	243, 0, 101, 751, 0, 732, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 733, 735, 0, 734, 736, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 741, 742, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 752,
	0, 253, 0, 128, 129, 130, 131, 748, 750, 323,
	0, 135, 0, 132, 0, 322, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 753, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 0, 749, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 743, 160, 161, 162, 163,
	0, 744, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 737, 197, 187, 188, 198, 332, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 745, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 746, 747, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	738, 222, 0, 281, 223, 224, 225, 282, 283, 0,
	0, 226, 0, 503, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 1629, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 319, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	323, 0, 135, 0, 132, 0, 322, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 261, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 73, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 332, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 75, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 586, 283,
	0, 0, 226, 0, 0, 0, 71, 227, 228, 229,
	230, 231, 0, 72, 503, 500, 0, 501, 496, 491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 70, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 319, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 916, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 493, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 321, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 323, 0, 135, 0, 132, 0, 322, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 0, 261, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 494, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 332,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 492, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 503, 500, 0, 501, 496, 491, 0,
	0, 0, 0, 0, 502, 497, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 319, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 913, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 493, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	323, 0, 135, 0, 132, 0, 322, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 261, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 494, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 332, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	492, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 503, 500, 0, 501, 496, 491, 0, 0,
	0, 0, 0, 502, 497, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 319, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 618, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 493, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 323,
	0, 135, 0, 132, 0, 322, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 261, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 494, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 332, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 492,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 503, 500, 0, 501, 496, 491, 0, 0, 0,
	0, 0, 502, 497, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 319, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 493, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 323, 0,
	135, 0, 132, 0, 322, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 261, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 494, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 332, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 492, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 0, 89,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 502, 497, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 73, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 75, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 586, 283, 0, 0, 226, 0,
	89, 0, 71, 227, 228, 229, 230, 231, 0, 72,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 70, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 537, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 0, 0, 226,
	0, 89, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 1233, 0, 1238,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 0, 0,
	226, 0, 0, 89, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 819, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	0, 0, 226, 0, 89, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 1143, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 0, 0, 226, 0, 89, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 1754, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 724, 713, 714, 711, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 786, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 755, 235, 756,
	98, 757, 758, 0, 99, 239, 240, 100, 0, 0,
	759, 760, 243, 0, 101, 244, 0, 319, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 761, 114, 762, 763, 0, 115, 0, 116,
	0, 0, 0, 754, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 720, 0, 0, 123,
	124, 764, 0, 125, 0, 126, 0, 0, 321, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 323, 0, 135, 0, 132, 0, 322, 133, 765,
	134, 766, 767, 768, 0, 731, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 0, 261, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 0, 0, 721,
	263, 153, 769, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 770, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 332,
	199, 771, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 772, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 773, 774, 0, 0, 213, 279,
	280, 719, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	775, 503, 500, 226, 0, 0, 624, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 319, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 323, 0,
	135, 0, 132, 0, 322, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 261, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 332, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 85, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	84, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 503, 500, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	88, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 319, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 321,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 323, 0, 135, 0, 132, 0, 322, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 0, 261, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	332, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 503,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 88, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 319, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 320, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 321, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 323, 0, 135, 0,
	132, 0, 322, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 324, 136, 325, 137, 138, 0, 140, 139,
	0, 261, 326, 141, 327, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 329,
	159, 330, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 331, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 332, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 1100, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 1098, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 1205,
	0, 123, 124, 251, 0, 125, 0, 126, 1103, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 1203, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 1102,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 1204,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 1100, 101, 244, 0, 0, 1095, 102, 103,
	104, 0, 105, 1098, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 1103, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 1094, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 1102, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 1101, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 1721, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 537, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 930, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 846, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 537, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 594, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	549, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 537,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 542, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 537, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 418, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 417, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 1402, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 1400, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 1389, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 958,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 432, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 829, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 0,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	663, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 658, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 600, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 446, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 443, 277,
	278, 0, 0, 439, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 446, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 443, 277, 278, 0, 0,
	439, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 581, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 579, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 576, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 573,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 571, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 545, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 526, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 437, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 435,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 446,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	438, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	436, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 443, 277, 278, 0, 0, 439, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 0, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 0, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 0, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 985, 986,
	0, 1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	0, 988, 0, 0, 1019, 0, 0, 0, 0, 0,
	985, 986, 0, 1005, 1006, 1007, 1015, 1016, 1017, 0,
	0, 0, 0, 0, 987, 0, 1008, 0, 0, 0,
	1002, 0, 0, 988, 0, 0, 1019, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	993, 0, 0, 0, 0, 0, 0, 1563, 1564, 0,
	1581, 1582, 1583, 0, 0, 0, 0, 0, 0, 1012,
	1020, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 993, 0, 0, 1018, 0, 0, 985, 986,
	0, 1005, 1006, 1007, 1015, 1016, 1017, 1010, 0, 0,
	0, 1012, 1020, 1003, 1008, 0, 0, 0, 0, 1578,
	0, 988, 0, 0, 1019, 0, 0, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1009, 1010,
	0, 0, 0, 0, 987, 1003, 0, 0, 0, 0,
	1002, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1569,
	1009, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1004, 0, 0, 0, 0, 0, 0, 1585,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	993, 0, 0, 0, 1584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1004, 0, 0, 0, 0, 1012,
	1020, 0, 1579, 0, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 0,
	0, 0, 0, 1003, 0, 0, 0, 0, 0, 0,
	0, 1011, 0, 0, 999, 1000, 1001, 1014, 0, 998,
	996, 997, 989, 990, 991, 992, 994, 995, 1009, 0,
	0, 0, 0, 0, 0, 1604, 0, 0, 0, 0,
	0, 1580, 0, 1011, 0, 0, 999, 1000, 1001, 1014,
	0, 998, 996, 997, 989, 990, 991, 992, 994, 995,
	0, 0, 0, 0, 0, 0, 0, 1603, 0, 0,
	985, 986, 1004, 1005, 1006, 1007, 1015, 1016, 1017, 0,
	0, 0, 0, 0, 0, 0, 1008, 1013, 0, 0,
	0, 0, 0, 988, 985, 986, 1019, 1005, 1006, 1007,
	1015, 1016, 1017, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 987, 988, 0, 0,
	1019, 0, 1002, 1575, 1576, 1577, 0, 0, 1574, 1572,
	1573, 1565, 1566, 1567, 1568, 1570, 1571, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 1002, 0, 0, 0,
	0, 1011, 0, 0, 999, 1000, 1001, 1014, 0, 998,
	996, 997, 989, 990, 991, 992, 994, 995, 0, 0,
	0, 0, 993, 0, 0, 1555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1012, 1020, 0, 0, 0, 993, 0, 0, 0,
	0, 1563, 1564, 0, 1581, 1582, 1583, 1018, 0, 0,
	0, 0, 0, 0, 0, 1012, 1020, 0, 0, 1010,
	0, 0, 0, 0, 0, 1003, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 1003,
	1009, 0, 0, 1578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1009, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1004, 0, 0, 0, 0, 0,
	0, 0, 0, 1569, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 1004, 985,
	986, 0, 1005, 1006, 1007, 1015, 1016, 1017, 0, 0,
	0, 0, 0, 1013, 0, 1008, 0, 0, 1584, 0,
	0, 0, 988, 0, 0, 1019, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1579, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 1002, 0, 1011, 0, 0, 999, 1000, 1001, 1014,
	0, 998, 996, 997, 989, 990, 991, 992, 994, 995,
	0, 0, 0, 0, 2083, 0, 0, 1011, 0, 0,
	999, 1000, 1001, 1014, 0, 998, 996, 997, 989, 990,
	991, 992, 994, 995, 0, 0, 0, 0, 2081, 0,
	0, 993, 0, 985, 986, 1580, 1005, 1006, 1007, 1015,
	1016, 1017, 0, 0, 0, 0, 0, 0, 0, 1008,
	1012, 1020, 0, 0, 0, 0, 988, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1010, 987,
	0, 0, 0, 0, 1003, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1009,
	0, 0, 0, 0, 0, 0, 0, 1575, 1576, 1577,
	0, 0, 1574, 1572, 1573, 1565, 1566, 1567, 1568, 1570,
	1571, 0, 0, 0, 0, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1004, 1012, 1020, 0, 985, 986, 0,
	1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 1013, 0,
	1018, 0, 0, 1008, 0, 0, 0, 0, 0, 0,
	988, 0, 1010, 1019, 0, 0, 0, 0, 1003, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 1002,
	0, 0, 0, 1009, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1011, 0, 0, 999, 1000, 1001, 1014, 0,
	998, 996, 997, 989, 990, 991, 992, 994, 995, 0,
	0, 0, 0, 2026, 0, 0, 0, 1004, 0, 993,
	0, 985, 986, 0, 1005, 1006, 1007, 1015, 1016, 1017,
	0, 0, 1013, 0, 0, 0, 0, 1008, 1012, 1020,
	0, 0, 0, 0, 988, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 987, 0, 0,
	0, 0, 1003, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1011, 1009, 0, 999,
	1000, 1001, 1014, 0, 998, 996, 997, 989, 990, 991,
	992, 994, 995, 0, 0, 0, 0, 2021, 0, 0,
	0, 0, 0, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1004, 1012, 1020, 0, 985, 986, 0, 1005, 1006,
	1007, 1015, 1016, 1017, 0, 0, 1013, 0, 1018, 0,
	0, 1008, 0, 0, 0, 0, 0, 0, 988, 0,
	1010, 1019, 0, 0, 0, 0, 1003, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 987, 0, 0, 0, 0, 0, 1002, 0, 0,
	0, 1009, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1011, 0, 0, 999, 1000, 1001, 1014, 0, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 0, 0, 0,
	0, 2017, 0, 0, 0, 1004, 0, 993, 0, 985,
	986, 0, 1005, 1006, 1007, 1015, 1016, 1017, 0, 0,
	1013, 0, 0, 0, 0, 1008, 1012, 1020, 0, 0,
	0, 0, 988, 0, 0, 1019, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1010, 987, 0, 0, 0, 0,
	1003, 1002, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1011, 1009, 0, 999, 1000, 1001,
	1014, 0, 998, 996, 997, 989, 990, 991, 992, 994,
	995, 0, 0, 0, 0, 1956, 0, 0, 0, 0,
	0, 993, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1004,
	1012, 1020, 0, 985, 986, 0, 1005, 1006, 1007, 1015,
	1016, 1017, 0, 0, 1013, 0, 1018, 0, 0, 1008,
	0, 0, 0, 0, 0, 0, 988, 0, 1010, 1019,
	0, 0, 0, 0, 1003, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 1009,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1011, 0,
	0, 999, 1000, 1001, 1014, 0, 998, 996, 997, 989,
	990, 991, 992, 994, 995, 0, 0, 0, 0, 1934,
	0, 0, 0, 1004, 0, 993, 0, 985, 986, 0,
	1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 1013, 0,
	0, 0, 0, 1008, 1012, 1020, 0, 0, 0, 0,
	988, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1010, 987, 0, 0, 0, 0, 1003, 1002,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1011, 1009, 0, 999, 1000, 1001, 1014, 0,
	998, 996, 997, 989, 990, 991, 992, 994, 995, 0,
	0, 0, 0, 1933, 0, 0, 0, 0, 0, 993,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1004, 1012, 1020,
	0, 985, 986, 0, 1005, 1006, 1007, 1015, 1016, 1017,
	0, 0, 1013, 0, 1018, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 988, 0, 1010, 1019, 0, 0,
	0, 0, 1003, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 1002, 0, 0, 0, 1009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1011, 0, 0, 999,
	1000, 1001, 1014, 0, 998, 996, 997, 989, 990, 991,
	992, 994, 995, 0, 0, 0, 0, 1823, 0, 0,
	0, 1004, 0, 993, 0, 985, 986, 0, 1005, 1006,
	1007, 1015, 1016, 1017, 0, 0, 1013, 0, 0, 0,
	0, 1008, 1012, 1020, 0, 0, 0, 0, 988, 0,
	0, 1019, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 987, 0, 0, 0, 0, 1003, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1011, 1009, 0, 999, 1000, 1001, 1014, 0, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 0, 0, 0,
	0, 1757, 0, 0, 0, 0, 0, 993, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1004, 1012, 1020, 0, 985,
	986, 0, 1005, 1006, 1007, 1015, 1016, 1017, 0, 0,
	1013, 0, 1018, 0, 0, 1008, 0, 0, 0, 0,
	0, 0, 988, 0, 1010, 1019, 0, 0, 0, 0,
	1003, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 1002, 0, 0, 0, 1009, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1011, 0, 0, 999, 1000, 1001,
	1014, 0, 998, 996, 997, 989, 990, 991, 992, 994,
	995, 0, 0, 0, 0, 1741, 0, 0, 0, 1004,
	0, 993, 0, 985, 986, 0, 1005, 1006, 1007, 1015,
	1016, 1017, 0, 0, 1013, 0, 0, 0, 0, 1008,
	1012, 1020, 0, 0, 0, 0, 988, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1010, 987,
	0, 0, 0, 0, 1003, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1011, 1009,
	0, 999, 1000, 1001, 1014, 0, 998, 996, 997, 989,
	990, 991, 992, 994, 995, 0, 0, 0, 0, 1694,
	0, 0, 0, 0, 0, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1004, 1012, 1020, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1013, 0,
	1018, 0, 0, 985, 986, 0, 1005, 1006, 1007, 1015,
	1016, 1017, 1010, 0, 0, 0, 0, 0, 1003, 1008,
	0, 0, 0, 0, 0, 0, 988, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1009, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	0, 0, 1011, 0, 0, 999, 1000, 1001, 1014, 0,
	998, 996, 997, 989, 990, 991, 992, 994, 995, 0,
	0, 0, 0, 1310, 0, 0, 0, 1004, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 993, 2166, 985, 986, 0,
	1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 0, 0,
	0, 0, 0, 1008, 1012, 1020, 0, 0, 0, 0,
	988, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1010, 987, 0, 0, 0, 0, 1003, 1002,
	0, 0, 0, 0, 0, 0, 1011, 0, 0, 999,
	1000, 1001, 1014, 0, 998, 996, 997, 989, 990, 991,
	992, 994, 995, 1009, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 993,
	0, 1595, 0, 0, 1594, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1004, 1012, 1020,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 0, 1018, 0, 0, 985, 986, 0,
	1005, 1006, 1007, 1015, 1016, 1017, 1010, 0, 0, 0,
	0, 0, 1003, 1008, 0, 0, 0, 0, 1225, 0,
	988, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1009, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 1002,
	0, 0, 0, 0, 0, 0, 1011, 0, 0, 999,
	1000, 1001, 1014, 0, 998, 996, 997, 989, 990, 991,
	992, 994, 995, 0, 0, 0, 0, 1226, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 0, 0, 1013, 985, 986, 993,
	1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 1022, 1012, 1020,
	988, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 1010, 0, 0, 1002,
	0, 0, 1003, 0, 0, 0, 0, 0, 0, 0,
	1011, 0, 0, 999, 1000, 1001, 1014, 0, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 1009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 986, 993,
	1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 1012, 1020,
	988, 1004, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 1013, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 1010, 0, 0, 1002,
	0, 0, 1003, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 993,
	1011, 0, 0, 999, 1000, 1001, 1014, 0, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 0, 1012, 1020,
	0, 1004, 985, 986, 0, 1005, 1006, 1007, 1015, 1016,
	1017, 0, 0, 0, 1018, 0, 1013, 0, 1008, 0,
	0, 0, 0, 0, 0, 988, 1010, 0, 1019, 0,
	0, 0, 1003, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 1002, 0, 0, 1009, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1011, 0, 0, 999, 1000, 1001, 1014, 0, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 0, 0, 0,
	0, 1004, 985, 986, 993, 1005, 1006, 1007, 1015, 1016,
	1017, 0, 0, 0, 0, 0, 1013, 0, 1008, 0,
	0, 0, 0, 1012, 1020, 988, 985, 986, 1019, 1005,
	1006, 1007, 1015, 1016, 1017, 0, 0, 0, 0, 1018,
	0, 0, 1008, 0, 0, 0, 1596, 0, 987, 988,
	0, 1010, 1019, 0, 1002, 0, 0, 1003, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 987, 0, 0, 0, 0, 0, 1002, 0,
	1011, 0, 1009, 999, 1000, 1001, 1014, 0, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 0, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 0, 1601,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1012, 1020, 0, 1004, 0, 993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 1013, 0, 0, 0, 0, 0, 1012, 1020, 0,
	0, 1010, 0, 0, 0, 0, 0, 1003, 0, 0,
	0, 0, 0, 1018, 1745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1010, 0, 0, 0, 0,
	0, 1003, 1009, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1011, 1009, 0, 999, 1000,
	1001, 1014, 0, 998, 996, 997, 989, 990, 991, 992,
	994, 995, 0, 0, 0, 0, 1004, 0, 985, 986,
	0, 1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 0,
	0, 1013, 0, 0, 1008, 0, 0, 0, 0, 0,
	1004, 988, 985, 986, 1019, 1005, 1006, 1007, 1015, 1016,
	1017, 0, 0, 0, 0, 1013, 0, 0, 1008, 0,
	0, 0, 1554, 0, 987, 988, 0, 0, 1019, 0,
	1002, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 1002, 1011, 0, 0, 999, 1000,
	1001, 1014, 0, 998, 996, 997, 989, 990, 991, 992,
	994, 995, 0, 0, 0, 0, 0, 0, 0, 1011,
	993, 0, 999, 1000, 1001, 1014, 0, 998, 996, 997,
	989, 990, 991, 992, 994, 995, 0, 0, 0, 1012,
	1020, 0, 985, 986, 993, 1005, 1006, 1007, 1015, 1016,
	1017, 0, 0, 0, 0, 1018, 0, 0, 1008, 0,
	0, 0, 0, 1012, 1020, 988, 0, 1010, 1019, 0,
	0, 0, 0, 1003, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 1010, 0, 0, 1002, 0, 0, 1003, 1009, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1009, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1004, 0, 993, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 1012, 1020, 0, 1004, 985, 986, 0,
	1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 0, 1018,
	0, 1013, 0, 1008, 0, 0, 0, 0, 0, 0,
	988, 1010, 0, 1019, 0, 0, 0, 1003, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 1002,
	0, 1011, 1009, 0, 999, 1000, 1001, 1014, 0, 998,
	996, 997, 989, 990, 991, 992, 994, 995, 0, 0,
	0, 0, 0, 0, 0, 1011, 0, 0, 999, 1000,
	1001, 1014, 0, 998, 996, 997, 989, 990, 991, 992,
	994, 995, 0, 0, 0, 0, 1004, 985, 986, 993,
	1005, 1006, 1007, 1015, 1016, 1017, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 0, 1012, 1020,
	988, 0, 0, 1019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 1010, 0, 0, 1002,
	0, 0, 1003, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1011, 0, 0, 999, 1000,
	1001, 1014, 0, 998, 996, 997, 989, 990, 991, 992,
	994, 995, 0, 0, 0, 0, 0, 0, 0, 993,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1012, 1020,
	0, 1004, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 0,
	0, 0, 1003, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 865, 890, 857, 881, 880,
	0, 0, 859, 858, 0, 0, 0, 892, 891, 0,
	1011, 0, 0, 999, 1000, 1001, 1014, 0, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 0, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 0, 0, 886,
	0, 878, 877, 0, 0, 0, 1013, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 867, 869, 870,
	871, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	1011, 0, 0, 999, 1000, 1001, 1014, 0, 998, 996,
	997, 989, 990, 991, 992, 994, 995, 861, 0, 0,
	0, 0, 0, 873, 865, 890, 857, 881, 880, 879,
	0, 859, 858, 866, 0, 0, 892, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 1244, 1242, 1243, 1246, 1245, 886, 0,
	878, 877, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 448, 0, 0, 862, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 872, 863,
	0, 0, 452, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 453, 0, 0, 0, 860, 0,
	0, 887, 888, 0, 0, 868, 867, 869, 870, 871,
	0, 889, 0, 0, 454, 0, 0, 0, 0, 455,
	0, 0, 864, 0, 460, 461, 0, 893, 469, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 0, 0,
	451, 456, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 0,
	0, 462, 0, 0, 0, 0, 0, 872, 863, 0,
	0, 464, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 449, 0, 0, 0, 0, 0, 860, 0, 0,
	887, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 893, 0, 0, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 465, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 471,
	0, 0, 0, 467, 0, 0, 0, 0, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 470,
}
var sqlPact = [...]int{

	158, -1000, 24, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 785, 16954, 16954, 21112, -1000, -1000, -1000, -1000,
	-1000, -1000, 892, 834, 790, 5645, 21112, 21112, 20815, 1163,
	1163, 22597, -1000, -1000, 26458, -1000, 30690, 614, 617, 614,
	614, 613, 22597, 1129, 758, 14247, 837, 161, -1000, 845,
	47, 26161, 21112, 1502, 22, 19033, 388, 158, 20518, 25864,
	21112, 20221, 733, 14, 17548, 21112, -1000, 43, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1347, 394, 43, -1000, 1346, 1257,
	1249, 19033, 25567, 25270, 24973, 24676, 24379, -1000, 13009, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 888, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 397, 396, -1000, 19924, -1000, 1081,
	-1000, 16, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1077, -1000, 21112, -1000, -1000, 24082, 23785, 803, 390, 1160,
	-1000, -1000, 679, 517, -1000, -1000, 13938, 81, -1000, -1000,
	-1000, -1000, 1534, 16657, 946, 1344, -1000, 1069, 1343, 1342,
	1338, 1337, 1336, -1000, 904, -1000, 1334, 514, 937, 595,
	-1000, 1333, 1332, 1160, -1000, 1160, -1000, -1000, -1000, 727,
	22597, -1000, -1000, -1000, -1000, -1000, 19033, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1681, -1000, -1000,
	-1000, -1000, 1747, -1000, -1000, -1000, -1000, 23488, 21112, 21112,
	1270, 23191, -1000, 845, -1000, -1000, -1000, 1166, 1499, 1499,
	1499, 1555, 221, 220, 161, -10, 21112, -1000, 389, -10,
	9833, 9833, -1000, -1000, 388, -1000, 454, 16051, -1000, 8867,
	-1000, 1057, 1416, 599, 804, 1411, -127, 907, 891, 1410,
	16657, 17548, 14, 8, -1000, -1000, -1000, 5336, 16657, 789,
	15147, 43, -1000, -1000, -1000, 19033, 21112, 21112, 819, 22894,
	-1000, 1405, 147, 1402, -1000, 137, 1396, -1000, 137, 1395,
	-49, 1394, -1000, 107, -1000, -1000, 388, 19627, 21112, 1609,
	30596, -1000, 11122, -1000, -1000, 16954, 822, 16954, -1000, -1000,
	1607, -1000, 21112, 11122, 2, -1000, -1000, -1000, -1000, 1216,
	1220, 649, 13629, 13320, 1459, 997, -1000, -1000, -1000, 60,
	5645, 797, -1000, -1000, -1000, 19330, -1000, -1000, 21112, 1355,
	16954, 21112, 21112, 21112, 21112, 21112, -1000, -1000, 21112, -1000,
	1212, -1000, -1000, 21112, 21112, 887, 754, -1000, 2, -1000,
	22597, -1000, 149, -1000, -1000, -1000, -1000, 387, 1175, 518,
	227, 22300, 518, 1171, -1000, 1166, -1000, 1086, 1275, 10156,
	1250, 11122, 161, -1000, -1000, 161, 161, 11122, -1000, -1000,
	21112, -10, 1604, 21112, 106, -1000, 29397, -1000, -1000, 11122,
	11122, 11122, 11122, 11122, 1002, 444, -1000, 383, 382, 6599,
	-1000, -1000, 1717, -1000, -1000, -1000, 238, -1000, -1000, 11122,
	43, -1000, -1000, -1000, -1000, 378, 1760, -1000, 490, -1000,
	-1000, -1000, 524, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1353, 377, 375, -1000, -1000, -1000, -1000, 374,
	369, 368, 367, 366, 361, 352, 347, 345, 341, 337,
	336, 335, 333, 327, 971, -1000, 556, -1000, -1000, 556,
	556, -1000, 320, 320, 324, -1000, -1000, -1000, -1000, 320,
	-1000, -1000, -1000, 513, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 326, 106, -1000, -1000, -1000, 21112, 75, -1000, 30072,
	-1000, -57, 884, -1000, 18439, 1518, 1509, 1479, 19033, 1576,
	47, 1331, 1572, 47, 1330, 724, 21112, 21112, 714, 704,
	19033, 489, -1000, 21112, -1000, -1000, -79, -1000, -1000, 1329,
	68, -1000, -1000, 548, 410, 1603, 410, 15449, -1000, 21112,
	21112, -1000, 21112, -1000, -1000, 21112, -1000, 21112, 21112, -1000,
	21112, 21112, 21112, 159, 17845, 862, 1390, 782, 47, 67,
	-1000, 1619, -1000, -1000, -1000, -1000, 152, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 324, 971, 320, 320, 320,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 513, -1000, -1000,
	556, 556, 556, -1000, -1000, 62, 30072, 698, -1000, 1327,
	608, -1000, 506, 57, 1160, 950, -1000, -1000, -1000, -1000,
	-1000, -1000, -14, -1000, -1000, -14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1758, 5645, -1000, -1000, -1000,
	-1000, -1000, -1000, 21112, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 21112, 21112, 21112, -1000, -1000, 19033,
	18142, 1597, 1386, 987, -1000, 1595, 21112, 1064, 1155, -1000,
	746, 1384, -1000, -1000, -1000, -1000, 30072, -1000, 469, -1000,
	-1000, 30072, 942, 1248, -1000, 1248, -21, -1000, 29297, -1000,
	319, 55, 548, 9833, 14846, 30457, 30596, 5645, 740, 11122,
	11122, 11122, 11122, 11122, 11122, 11122, 11122, 11122, 11122, 11122,
	11122, 11122, 11122, 11122, 11122, 11122, 11122, 11122, 11122, 11122,
	11122, 1089, 11122, 687, 11122, 11122, 11122, 11122, 1406, 1013,
	295, 1033, 5645, -1000, -1000, 1657, 1657, 1657, 2794, 2794,
	261, 444, -1000, 11122, -1000, 9511, 220, 28809, -23, -1000,
	-1000, -1000, 7566, 553, 30072, 43, 6276, -1000, 1711, 839,
	1361, 1289, 314, 219, 216, 11122, 11122, 11444, 11444, 11122,
	11766, 11122, 11122, 6921, 11122, 11122, 11122, 11122, 11122, 11122,
	-1000, 310, -1000, -1000, -1000, -1000, 1701, -1000, -1000, 1693,
	-1000, 739, 737, 1692, 548, 206, 8867, -1000, 862, 21112,
	21112, 21112, -1000, -1000, 1154, 22003, 1148, 30596, 21112, -1000,
	309, 308, 1239, 1238, 21112, 21112, 21706, 21409, 21112, 1046,
	47, -1000, 305, 47, -1000, 304, 21112, 872, -1000, 21112,
	21112, 865, 1279, 1090, -1000, 533, 16657, 788, 1326, 21112,
	857, 11122, 911, -1000, 14545, 564, 21112, 857, 98, -1000,
	-1000, -1000, 485, 21112, -1000, -1000, -1000, 147, -1000, 137,
	137, -1000, -49, -1000, -1000, 19033, -1000, -1000, -1000, -1000,
	-1000, -1000, 30596, 436, 434, -1000, 1688, 686, -1000, 676,
	663, 659, -1000, 297, -1000, 11122, 21112, 21112, 1246, -1000,
	-1000, -1000, 816, -1000, 952, -1000, 14247, -1000, -81, -1000,
	-1000, -1000, 489, -1000, 205, 50, -56, 30596, -1000, -1000,
	-1000, -1000, -1000, 21112, 349, 21112, 47, 21112, -1000, 1757,
	47, 21112, 1383, 1421, 479, 21112, 942, -1000, 11122, 1685,
	-1000, -1000, -1000, 11122, -1000, -1000, -1000, 47, -1000, 1288,
	-1000, -124, 1664, 1066, -153, 215, 491, -1000, 4229, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 503,
	983, 983, 662, 662, 662, 662, 1660, 1554, 2155, 412,
	2913, 2913, 2913, 177, 218, 218, 2913, 2913, 2913, 2794,
	30197, 192, 11122, 11122, 657, 1011, 295, 192, 11122, 192,
	192, 192, 192, -1000, 1134, -1000, -1000, -1000, -1000, 1325,
	291, 11766, 11766, -1000, -1000, -1000, 6599, 12088, -1000, -1000,
	-1000, -1000, -1000, 289, 11122, -1000, 28913, -169, 37, -1000,
	-1000, 11122, 35, -61, -1000, -1000, 761, -1000, 11122, -1000,
	-13, 11122, 11122, 11122, 202, 201, -1000, 1005, 287, 286,
	11122, -1000, -1000, 29972, 27198, 200, 1324, -118, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 198, 197, 29948, -118, 195,
	27167, -1000, 11766, 11766, 11766, 6599, 285, 194, 29157, -118,
	29746, 9189, 9189, 9189, 191, 29722, 11122, -118, 27090, 27058,
	3871, 32, 31, 21, 1683, 15, 189, 500, 494, 173,
	1288, -1000, -1000, -1000, -1000, 654, 652, 1382, -1000, 1147,
	-1000, 568, -1000, 912, 11122, 12708, 284, 278, 969, -1000,
	1381, 1143, 1377, 1143, -1000, -57, 846, -1000, 11122, -1000,
	11122, -1000, 650, -1000, -1000, 647, 533, 1308, 766, -1000,
	1021, -1000, -1000, 776, -1000, -1000, 7243, 30072, -1000, 857,
	1481, 13, -1000, -1000, -1000, 548, 15449, 14846, 8867, 7,
	-1000, -1000, -1000, 862, -1000, 542, 1679, 163, 1185, 1123,
	981, 828, 1675, 30072, -81, -81, -1000, -1000, -1000, -1000,
	-1000, 21112, -1000, 1272, -1000, 18142, 277, 21112, 275, -1000,
	274, -1000, -1000, 273, 21112, 1221, 479, 17251, -1000, 518,
	1038, 28685, -1000, 156, 1284, 1553, -1000, 14846, 1244, 1242,
	14846, 1170, 1007, 1007, 1007, -1000, 272, 223, 428, 491,
	4704, 11122, 18736, 1010, 100, 154, 1664, 11122, 192, 192,
	11122, 11766, 11766, -1000, 192, -1000, -1000, -1000, -1000, -1000,
	1307, 271, 11122, 30596, 3902, 3388, 3, -1000, 8545, -87,
	-1000, 11122, -1000, 28581, -1000, -1000, 411, 1409, -1000, 11122,
	29622, 148, 8223, -1000, 29497, -15, -15, -1000, 1754, -1000,
	15750, 550, 1014, 28457, 30457, 30596, -1000, 11122, -1000, -1000,
	1302, 11122, -1000, 30457, 30596, 11766, 11766, 11766, 11766, 11766,
	11766, 11766, 11766, 11766, 11766, 11766, 11766, 11766, 11766, 11766,
	11766, 11766, 11766, 11766, 1204, 11766, 1650, 1650, 1650, -88,
	7901, -1000, 1351, 1302, 11122, 11122, 30596, 146, 144, 141,
	-1000, 11122, -118, 11122, 11122, 11122, -1000, -1000, -1000, 136,
	-1000, 1667, -1000, -1000, -1000, -1000, 1284, 21112, 21112, 21112,
	1376, -1000, 2652, -1000, 28353, 1, -1000, 321, 1525, 11122,
	-1000, -1000, 268, 12708, 21112, -1000, 1243, 1237, 593, 21112,
	-1000, 21112, -1000, 21112, 21112, 21112, -1, -3, 21112, 21112,
	-1000, 16657, 665, 267, -1000, -95, -1000, -1000, 290, 47,
	857, -1000, -99, -1000, 480, -1000, 426, 425, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 135, -1000, -1000, 1274,
	-1000, 12708, 266, 21112, 18142, 1584, 12708, 1062, 1223, 479,
	17251, -1000, 746, -1000, -1000, -1000, 546, 11122, 11122, 1664,
	14846, 14846, 1210, 1241, 14846, -1000, -1000, -1000, -1000, 424,
	372, 422, 13009, 491, 18736, -1000, 1658, 1191, -5, -1000,
	-1000, 21112, 264, -1000, 491, 1729, 192, 3326, 2872, 11122,
	30596, 30297, -9, 11122, 11122, -1000, -16, -1000, 11122, 420,
	30072, -1000, -1000, -1000, 30072, 11122, 1731, 11122, 133, 130,
	127, -1000, -1000, -1000, 26755, 11122, 117, -1000, 116, 114,
	30072, 1351, 30072, -1000, -1000, 552, 552, 752, 752, 752,
	752, 1650, 2187, 421, 2114, 1105, 1105, 1105, 2105, 445,
	445, 1105, 1105, 1105, 1300, 1194, 260, 27551, 11122, -22,
	-1000, -1000, -1000, 30072, 30072, 112, -1000, -1000, -1000, -118,
	3759, 28229, 28125, -1000, 108, 546, -1000, -1000, -1000, 21112,
	-1000, 21112, -1000, 5645, 21112, 1311, 1120, -1000, -1000, 1230,
	259, 11766, 21112, -1000, 979, 12708, 1506, 43, 5645, 1506,
	28001, 6276, -26, -27, 1107, -1000, 1093, 11122, -1000, 30596,
	1143, 1143, -1000, 632, 631, 630, 629, -1000, -1000, -105,
	16360, 1753, 1427, 21112, 1477, -1000, -1000, 258, -1000, -1000,
	-1000, 999, -28, 12708, -32, 95, 47, -34, 21112, -1000,
	479, 17251, -1000, 1421, -1000, 21112, 30072, -118, -1000, 1210,
	-1000, 257, 11122, 14846, -1000, -153, -1000, -36, -1000, 491,
	-47, 18736, -1000, 399, -160, -1000, 466, -1000, 491, 254,
	21112, 18736, 11122, 11122, 30297, -52, -1000, 192, 192, -1000,
	27897, -1000, 30072, -1000, 29497, -1000, -1000, -1000, 993, -1000,
	27773, -1000, -1000, -1000, -1000, 11766, 1296, 251, 30596, 27669,
	-1000, -1000, 11122, -1000, -1000, -1000, -1000, -1000, 955, -1000,
	-1000, 21112, 1141, -1000, -1000, 11122, 27551, 250, 1272, 248,
	-1000, -1000, -1000, -1000, -1000, -1000, 1525, -13, -1000, 934,
	-1000, -1000, 30072, 1492, -1000, -1000, 21112, 21112, 246, 245,
	-1000, 243, 43, -59, -1000, 463, 710, -64, 21112, -1000,
	-1000, 5954, 21112, 979, -65, -1000, 1272, -1000, 979, 240,
	17251, -1000, 1221, -107, -1000, 1581, -1000, 21112, 30072, -1000,
	491, -1000, 1656, 18736, 159, -1000, -1000, 1191, -1000, 5024,
	18736, 21112, -69, -1000, 192, 192, -1000, -1000, 87, 1014,
	1551, -1000, 3836, 11766, 30596, -70, -1000, 27444, -1000, -1000,
	1373, 27420, 1206, 21112, -1000, 21112, 1506, 86, 21112, 572,
	5645, -1000, -1000, 11122, 11122, 11122, 1753, -1000, -1000, 1751,
	813, -1000, 548, -1000, 239, 1272, 979, -1000, 1272, 12708,
	-1000, 1223, 21112, 232, -71, 18736, -1000, -1000, 373, -1000,
	-1000, 1649, -1000, -77, -1000, -1000, 963, 11122, 3836, -90,
	-1000, -1000, 1364, -1000, 1040, 944, 76, -97, -1000, -1000,
	227, -1000, 11122, -1000, -103, -125, -15, -1000, -1000, 15449,
	-1000, 21112, -1000, 1272, -1000, -137, -1000, -1000, -1000, -1000,
	-1000, 491, 322, -1000, 51, 10800, 10800, -118, -1000, 21112,
	-1000, 1045, 1042, 779, -1000, -1000, -1000, -1000, -1000, 1206,
	30072, -1000, -1000, 36, -116, -139, -1000, 979, 18736, -1000,
	-1000, -1000, -1000, 12399, 1111, 844, 29053, -1000, -1000, -1000,
	1436, -1000, 582, 1110, 1110, 1040, 1731, -1000, 1094, 1272,
	-1000, 1625, -1000, -1000, -1000, -1000, -1000, -1000, 1633, -1000,
	-1000, 1207, -1000, -1000, -1000, -1000, -1000, -1000, 10478, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2027, 2025, 1552, 1672, 2024, 2021, 1628, 2020, 2018,
	2013, 2006, 2003, 2002, 130, 1603, 1601, 28, 1579, 2001,
	107, 1999, 1995, 1993, 128, 1990, 1988, 1987, 1985, 69,
	1982, 1980, 108, 1577, 1560, 1534, 1978, 1977, 121, 1976,
	1975, 22, 1972, 91, 1969, 44, 173, 2718, 171, 1966,
	1965, 1962, 23, 124, 74, 1950, 111, 1949, 1946, 53,
	50, 30, 17, 1945, 123, 1944, 1939, 1662, 32, 1938,
	1937, 159, 1935, 96, 29, 125, 167, 165, 136, 142,
	1934, 1933, 1930, 1928, 64, 1926, 2, 1925, 1921, 14,
	88, 12, 1918, 41, 19, 1915, 1913, 148, 1910, 89,
	119, 1532, 157, 143, 175, 1909, 95, 13, 92, 1904,
	1899, 151, 33, 1896, 40, 98, 154, 1895, 90, 168,
	77, 31, 78, 127, 1890, 1888, 1886, 94, 1885, 118,
	104, 1875, 1870, 102, 1868, 150, 149, 1867, 1865, 113,
	1862, 146, 1860, 1859, 152, 179, 1858, 174, 1855, 1852,
	169, 137, 16, 56, 87, 9, 1538, 1533, 132, 62,
	26, 21, 1849, 1997, 1057, 1011, 43, 100, 75, 54,
	101, 61, 71, 162, 42, 1848, 1847, 135, 1846, 1845,
	1844, 1843, 1842, 99, 1839, 1838, 84, 160, 15, 11,
	7, 110, 45, 59, 106, 138, 166, 134, 1837, 112,
	141, 58, 582, 1835, 1834, 1296, 139, 1833, 1832, 1831,
	1146, 821, 818, 67, 1828, 1825, 766, 376, 1824, 1822,
	60, 1820, 140, 133, 1819, 163, 156, 27, 1818, 57,
	120, 117, 1817, 126, 68, 0, 413, 362, 1809, 145,
	93, 1806, 1803, 1802, 1800, 24, 3, 8, 4, 6,
	5, 97, 25, 1799, 1797, 153, 38, 65, 1796, 170,
	1795, 1794, 1793, 51, 1792, 20, 1791, 18, 1790, 1789,
	10, 1, 1787, 1786, 155, 1781, 114, 1776, 1592, 1774,
	164, 144, 1768, 1767, 1546, 37, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 54, 54, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 51, 51, 56, 56, 56, 58, 58, 55,
	55, 50, 50, 5, 5, 233, 233, 234, 234, 40,
	40, 44, 44, 41, 42, 42, 43, 43, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 103, 103,
	102, 102, 281, 281, 105, 105, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 201, 201, 200, 19, 175, 175, 20, 20, 20,
	20, 21, 128, 128, 22, 22, 22, 22, 23, 28,
	274, 274, 274, 278, 278, 279, 279, 280, 280, 280,
	280, 280, 280, 280, 276, 276, 27, 27, 27, 27,
	39, 31, 31, 31, 31, 31, 31, 148, 145, 145,
	144, 144, 144, 144, 146, 146, 146, 146, 149, 149,
	83, 83, 226, 225, 225, 231, 231, 231, 81, 81,
	81, 81, 81, 82, 82, 82, 224, 224, 224, 224,
	232, 232, 232, 232, 232, 232, 230, 230, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 18, 275, 275, 277, 277, 33, 33,
	34, 34, 35, 35, 35, 35, 10, 10, 11, 11,
	84, 84, 85, 85, 154, 154, 154, 154, 86, 86,
	57, 57, 57, 153, 243, 243, 244, 244, 244, 244,
	244, 244, 245, 245, 245, 245, 245, 245, 245, 241,
	241, 242, 239, 239, 240, 240, 240, 240, 282, 282,
	152, 152, 89, 89, 248, 248, 248, 248, 246, 246,
	246, 246, 246, 249, 247, 250, 250, 250, 250, 250,
	187, 187, 187, 37, 12, 63, 63, 13, 9, 9,
	132, 132, 93, 93, 192, 192, 192, 74, 74, 52,
	52, 52, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 133, 133, 134, 134, 25, 30, 36,
	36, 36, 36, 36, 284, 284, 70, 70, 70, 70,
	71, 71, 147, 147, 150, 150, 151, 151, 151, 65,
	64, 66, 66, 8, 8, 59, 59, 60, 60, 61,
	61, 62, 62, 285, 285, 24, 24, 24, 77, 77,
	141, 141, 141, 143, 143, 142, 142, 142, 118, 118,
	118, 38, 98, 98, 107, 107, 108, 108, 198, 109,
	109, 29, 29, 47, 47, 45, 45, 45, 45, 45,
	45, 46, 46, 48, 48, 48, 48, 48, 48, 48,
	256, 256, 256, 259, 259, 255, 257, 257, 258, 258,
	283, 283, 119, 119, 119, 88, 87, 87, 91, 91,
	90, 92, 92, 191, 116, 116, 116, 116, 135, 135,
	136, 136, 137, 137, 138, 138, 138, 139, 139, 140,
	140, 115, 115, 171, 171, 49, 49, 97, 97, 99,
	99, 161, 161, 161, 162, 162, 160, 160, 160, 160,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 272,
	272, 272, 273, 273, 190, 190, 194, 194, 194, 194,
	194, 194, 188, 188, 188, 188, 189, 189, 199, 199,
	122, 122, 122, 122, 120, 120, 121, 121, 195, 195,
	195, 195, 117, 117, 196, 196, 196, 155, 155, 202,
	202, 202, 220, 220, 96, 96, 96, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 204, 204, 204, 204, 206, 206,
	206, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 219, 219, 219, 219, 219,
	207, 207, 214, 214, 215, 215, 216, 217, 208, 208,
	209, 209, 210, 211, 218, 218, 218, 218, 222, 222,
	212, 212, 212, 212, 212, 213, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	130, 130, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 165, 165, 165, 165, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 251,
	251, 251, 251, 251, 251, 251, 253, 253, 254, 254,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 260, 260, 261,
	261, 263, 263, 264, 264, 265, 266, 266, 266, 267,
	268, 268, 262, 262, 269, 269, 269, 270, 270, 271,
	271, 271, 271, 271, 177, 177, 177, 178, 178, 179,
	185, 185, 185, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 72,
	72, 72, 72, 72, 104, 104, 174, 174, 172, 172,
	172, 176, 176, 123, 123, 221, 221, 221, 221, 221,
	221, 221, 124, 124, 124, 131, 125, 125, 126, 126,
	126, 126, 126, 126, 168, 169, 127, 127, 127, 170,
	170, 180, 184, 184, 183, 182, 182, 181, 181, 158,
	158, 159, 159, 157, 156, 112, 112, 111, 111, 110,
	110, 286, 286, 186, 186, 113, 113, 114, 106, 106,
	197, 197, 197, 197, 100, 100, 79, 79, 101, 101,
	75, 75, 78, 78, 76, 76, 76, 76, 94, 94,
	95, 95, 73, 73, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 223, 223, 223, 173, 67,
	67, 67, 68, 68, 69, 69, 228, 228, 228, 229,
	229, 229, 229, 227, 227, 227, 227, 227, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 3, 5, 1, 3,
	1, 2, 1, 3, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 2, 2, 2,
	2, 2, 3, 6, 3, 4, 1, 5, 2, 1,
	3, 3, 3, 3, 1, 3, 3, 1, 2, 2,
	1, 0, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 3, 4, 4, 4, 4, 2, 4,
	4, 4, 4, 4, 4, 2, 3, 3, 2, 3,
	3, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	5, 5, 6, 2, 2, 0, 2, 0, 6, 6,
	5, 5, 4, 12, 4, 12, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	7, 4, 6, 3, 1, 5, 6, 9, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, -39, 23, 34, 225, 66, -8, -9, -10, -11,
	-12, -13, -258, 94, 103, 125, 206, 101, 87, 119,
	228, 235, -45, -47, 245, -148, 248, 35, 257, 60,
	97, 230, 223, 224, 282, 291, 68, -256, -48, -46,
	333, 307, 314, 239, -49, 266, 299, 336, 266, 134,
	80, 302, -274, -101, 266, 80, -76, -67, 326, 4,
	-235, -237, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 211,
	213, 214, 216, 217, 218, 219, 220, 223, 221, 222,
	224, 225, 226, 228, 230, 231, 233, 246, 247, 258,
	235, 236, 237, 238, 241, 242, 243, 245, 248, 250,
	253, 256, 257, 259, 262, 260, 255, 265, 267, 268,
	269, 270, 271, 278, 282, 283, 284, 285, 288, 289,
	290, 291, 293, 296, 297, 298, 303, 308, 309, 310,
	311, 312, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 50, 51, 52, 55, 82, 84, 85, 100, 104,
	105, 111, 121, 123, 129, 130, 139, 141, 142, 143,
	145, 156, 170, 180, 182, 193, 197, 203, 205, 212,
	232, 240, 251, 252, 261, 263, 273, 274, 275, 279,
	280, 295, 299, 300, -274, -75, -67, 80, 89, 138,
	290, 289, 80, 134, 266, 302, 292, -17, 333, -29,
	-7, -15, -4, -24, -38, -14, -32, -18, -33, -34,
	-35, -16, 23, -227, 4, -235, -237, -236, -238, 57,
	69, 118, 137, 131, 147, 149, 157, 159, 172, 194,
	196, 229, 249, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 56, 58, 64, 68,
	72, 73, 74, 75, 76, 77, 86, 88, 90, 91,
	92, 95, 97, 99, 106, 107, 108, 114, 116, 117,
	119, 122, 124, 132, 134, 136, 144, 146, 152, 155,
	160, 162, 163, 177, 178, 179, 185, 187, 188, 190,
	191, 202, 207, 215, 227, 239, 244, 254, 264, 266,
	272, 276, 277, 281, 286, 287, 292, 294, 301, 302,
	304, 305, 306, 307, -67, -67, -67, 206, 22, -278,
	22, -279, -280, 68, 94, 119, 239, 138, 89, 289,
	-278, -71, 235, -67, -145, 161, 242, 54, 232, 278,
	-146, -144, -226, 273, -149, -102, 171, -67, 4, 171,
	244, 80, 22, 34, 54, 59, 81, 120, 134, 135,
	64, 65, 151, 209, 161, 243, 267, 273, 278, 68,
	293, 269, 102, -284, 278, 278, -284, -284, -70, 278,
	276, -71, 4, 80, 244, 171, -283, 266, -231, -224,
	-187, 9, 281, 106, 187, -230, 8, 325, -223, -229,
	5, 7, 324, 4, -235, -237, -236, 266, 292, 302,
	-132, 80, 287, -46, -48, -47, -90, -91, 286, 144,
	99, 191, -45, -47, -256, -259, 213, -255, -67, -259,
	-87, -88, 22, 91, 337, -195, -75, 188, -114, 333,
	-3, -195, 129, -75, -78, 129, -75, -67, -195, 129,
	276, 337, -101, -94, -67, -157, -156, 335, 117, 117,
	333, -111, -112, -156, -157, 117, 146, 146, -196, -195,
	-67, 129, -79, 129, -78, -103, 129, -102, -103, 129,
	-281, 129, -67, -201, -200, -229, 299, 266, 134, -175,
	333, -128, 333, -67, 22, 187, 337, 187, -67, -145,
	52, -145, 246, 333, -150, -151, -64, -65, -66, 148,
	208, 211, 276, 318, 117, 312, -231, -83, 86, -105,
	335, 54, -233, -230, 9, 246, 209, 243, 117, -275,
	187, 117, 117, 117, 117, 117, 209, 243, 117, 312,
	148, 208, 258, 266, 302, 117, 117, -147, -150, -147,
	276, -71, -117, -195, 8, 7, 7, -102, 129, -67,
	-102, 134, -67, 129, -90, -91, -116, -135, -136, 160,
	108, 185, -119, 22, 91, -119, -119, 44, 334, 334,
	337, -259, -95, 333, -106, -197, -163, 326, -165, 324,
	325, 319, 177, 313, -177, -167, -180, 100, 232, 333,
	-75, -166, 338, 9, -253, -47, 29, -178, -179, 48,
	-67, 7, 8, 5, 6, -73, -204, -173, -213, 281,
	106, 179, -251, -252, 4, -235, -228, -205, -215, -209,
	-212, 145, 57, 73, 76, 74, 77, 244, 292, 49,
	28, 104, 105, 197, 203, 263, 279, 280, 129, 180,
	130, 55, 121, 156, 93, 37, 39, 41, 42, 50,
	51, 82, 84, 85, 111, 139, 141, 142, 143, 182,
	212, 251, 261, 274, 275, 300, -236, -216, -217, -210,
	-211, -218, -106, -114, 326, -75, 333, -113, -186, -163,
	86, -54, 221, -53, 21, 23, 94, 297, 100, 255,
	270, 236, 255, 270, 236, 221, 100, 338, 221, 221,
	100, -233, -76, 337, -227, 326, -234, -233, 259, 334,
	-100, -75, -112, -196, -77, -75, -77, 245, -67, 30,
	100, -56, 337, 47, 226, 100, -56, 337, 100, -56,
	100, 337, 100, 334, 337, -195, 129, -78, 30, -174,
	-202, -203, -205, -214, -208, -212, -213, 40, 46, 45,
	271, 170, 240, 252, 295, 38, 186, 140, 139, 141,
	142, 143, 251, 37, 212, 111, 93, 85, 84, 182,
	42, 41, -216, -217, -210, -211, 82, 274, 275, 145,
	39, 51, 50, 300, 261, -104, -163, -274, -280, -274,
	30, -144, -226, -104, 337, 158, -82, 164, 176, 126,
	188, 310, -225, 86, -231, -225, 86, 71, -232, 5,
	4, -173, -187, 86, 161, -213, 335, -227, 247, -102,
	22, -226, -277, 114, -274, -226, -226, -226, -226, -226,
	-67, 158, -226, -226, 266, 134, 266, -71, -56, 337,
	333, -89, 177, -257, 307, -89, 333, -68, 129, -67,
	-257, 177, -116, -136, -135, -137, -163, 22, -140, 110,
	173, -163, -165, -46, -46, -46, -92, -191, -163, -255,
	30, -94, -97, 337, 117, 10, 11, 56, 33, 324,
	325, 326, 327, 112, 328, 329, 322, 323, 321, 316,
	317, 318, 62, 165, 234, 13, 14, 15, 26, 190,
	159, 313, 131, 249, 319, 16, 17, 18, 147, 36,
	132, -72, 30, 4, -80, -163, -163, -163, -163, -163,
	196, -110, -158, 331, -47, 333, -47, -163, -104, 7,
	-47, -172, 331, -181, -163, -111, 333, 5, 333, 5,
	-260, 308, 114, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	205, -222, 303, -222, -222, -206, 333, -206, -207, 333,
	-206, 309, 314, 333, -97, -75, 337, 334, 337, 276,
	-133, 64, 58, -153, 129, 58, -239, -67, 64, -240,
	53, 287, 207, 116, -133, 64, -133, 64, 64, -195,
	33, -29, 117, 33, -29, 117, 276, -78, -67, 276,
	276, -195, -199, 315, -67, -199, 337, 117, 334, 337,
	-155, 305, -141, -29, 333, 86, 30, -141, -107, -108,
	-198, -109, -75, 333, -67, -67, -78, -79, -102, -103,
	-103, -67, -281, -17, -200, 100, -20, -29, -24, -38,
	-14, 334, 337, -96, 29, -129, 333, 311, 168, 83,
	127, 167, -130, 238, 334, 337, 276, 117, 278, 334,
	-151, -81, 211, 253, 222, 241, 337, -227, -276, -67,
	-75, -78, -75, -195, -84, -94, -85, -67, -154, -153,
	-241, -242, -239, 134, 287, 107, 30, 100, -63, 201,
	30, 187, 177, -59, 268, 100, -138, -223, 333, 325,
	-139, 232, 233, 337, -52, 31, 90, 333, 334, -155,
	-197, -99, -193, 331, -195, -75, -47, -194, 333, -220,
	-202, -219, 217, 218, 216, 220, 219, -202, -227, 273,
	-163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
	-163, -163, 159, 131, 249, 36, 132, -163, 276, -163,
	-163, -163, -163, 169, 177, 179, 281, 106, 288, 91,
	183, -286, 264, 32, -170, -47, 333, -185, 27, 254,
	22, -227, -177, 232, 333, -158, -163, -159, -104, 334,
	334, 337, -104, -176, 332, -172, -184, -183, 304, 334,
	-104, 301, 22, 91, 326, 7, -129, -261, 109, 122,
	333, 334, 334, -163, -163, -123, -221, -104, 4, 311,
	168, 83, 127, 167, 238, -123, -124, -163, -104, -125,
	-164, -165, 324, 325, 319, 333, 232, -126, -163, -104,
	-163, 43, 155, 277, -127, -163, 117, -104, -163, -163,
	-163, -104, -104, -104, 333, 7, 7, 273, 273, 7,
	-155, 334, -186, -53, -75, -67, -67, 177, -153, 129,
	-58, 177, -202, -67, 333, 333, 150, 150, -67, -67,
	129, -67, 129, -67, -67, -54, 221, -29, 333, -29,
	333, -67, 221, -67, -75, 221, -40, 128, 183, -43,
	307, -233, 259, 117, -75, -118, 227, -163, -118, -143,
	187, -100, 299, -67, -118, -98, 337, 117, 318, -100,
	-56, -56, -56, -195, -202, 331, 331, 7, 276, 276,
	276, 276, 333, -163, -276, -276, -64, 285, 61, 211,
	-231, 337, -199, 334, 334, 337, -68, 134, -68, -29,
	-102, 5, -29, -75, 100, -60, 96, -285, 318, -67,
	-139, -163, -191, -20, -115, 122, -199, 337, 69, -122,
	149, 172, 118, 157, 229, 137, 7, 103, -32, -160,
	338, 333, -190, 314, -47, -194, -193, 312, -163, -163,
	276, -286, 264, -170, -163, 169, 179, 281, 106, 288,
	91, 183, 117, 333, -164, -164, -104, -167, 333, -104,
	332, 341, 334, -163, 332, 332, 337, -182, -183, 95,
	-163, -91, 337, -90, -163, -104, -104, 334, 334, -266,
	195, 333, 333, -163, 30, 337, 334, 117, 334, 334,
	-131, 202, 334, 10, 11, 324, 325, 326, 327, 112,
	328, 329, 322, 323, 321, 316, 317, 318, 62, 165,
	234, 13, 14, 15, 147, 132, -164, -164, -164, -104,
	333, 334, -168, -169, 117, 114, 30, -127, -127, -127,
	334, 117, -104, 337, 337, 337, 334, 334, 334, 7,
	334, 337, 334, 312, 312, 334, -115, 276, 276, 100,
	177, 296, -243, -240, -163, -93, -192, -67, -254, 333,
	-251, -252, -73, 333, 333, -51, 94, 245, -134, 100,
	-56, 100, -56, 276, -133, 64, -104, -104, 276, 276,
	-43, 117, 265, 189, 259, -106, 178, -118, 63, 334,
	-155, -108, -99, -186, 334, 332, 7, 7, 334, 168,
	127, 167, -130, 167, -130, -130, 7, -67, -86, 133,
	-154, 333, -68, 333, 333, -89, 333, -67, -61, 154,
	-285, -230, -257, 188, 334, 334, -171, 124, 44, -193,
	149, 149, -193, -122, 149, -120, 194, -120, -120, -272,
	333, -17, 333, 332, -190, -227, 331, 339, -104, -189,
	-188, 30, -67, 192, 334, -163, -163, -164, -164, 117,
	333, -163, -174, 26, 26, 334, -104, 334, 337, -159,
	-163, 334, -172, 97, -163, 272, 334, 301, -91, -91,
	-91, 5, -267, -67, 333, 305, -90, 334, -220, -202,
	-163, -168, -163, -220, -202, -164, -164, -164, -164, -164,
	-164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
	-164, -164, -164, -164, 91, 177, 183, -164, 337, -104,
	334, -169, -168, -163, -163, -202, 334, 334, 334, -104,
	-163, -163, -163, 334, 7, -171, -67, -67, -153, 100,
	-244, 64, -245, 56, 107, 68, 177, 179, 287, 207,
	53, 86, 215, 334, 334, 337, -74, -111, 56, -74,
	-163, 333, -93, -94, 177, 86, 177, 86, 79, 283,
	-67, -67, -75, -67, -67, 334, 334, -67, -75, -234,
	273, 333, -142, 333, 187, -29, -118, 318, 332, 332,
	334, 132, -93, 333, -94, -84, 30, -93, 187, -62,
	153, -285, -230, -59, -263, 306, -163, -104, -193, -193,
	-121, 294, 187, 149, -193, 332, 334, -273, 7, 332,
	-201, -190, -189, 7, -162, -161, 115, 175, 334, -67,
	333, -190, 26, 26, -163, -174, 334, -163, -163, 334,
	-163, 332, -163, 5, -163, 334, 334, 334, -268, -67,
	-163, 334, 334, 334, -169, 117, 91, 183, 333, -163,
	334, 334, 337, 334, 334, 334, -263, -153, -67, -227,
	-67, 107, 129, 179, 150, 333, -164, -75, -152, -282,
	67, 262, -192, -52, -227, -52, 334, -104, 334, 334,
	179, 179, -163, -202, -56, -56, 276, 276, 276, 276,
	-166, -73, -67, -42, -41, 5, 92, -94, 64, -114,
	-47, 333, 198, 334, -93, 334, 334, -29, 334, -75,
	-285, -230, -60, -264, -265, -67, -121, 333, -163, -193,
	-160, 334, 337, -190, 334, -189, 332, 337, 340, 318,
	-190, 333, -94, -188, -163, -163, 334, 334, -91, -262,
	200, 334, -164, 117, 333, -174, 334, -163, -245, -68,
	177, -163, -69, 333, -86, 333, -74, -91, 215, -55,
	56, -67, -67, 333, 333, 333, 337, 334, -44, 318,
	289, 178, 334, -67, -67, -152, 334, -86, -152, 333,
	-230, -61, 337, 30, -94, -190, 7, -189, -17, -161,
	-227, 331, -189, -94, 334, 334, -91, 44, -164, -174,
	334, 334, 100, 334, -248, 166, -67, -94, -52, 334,
	-75, -50, 294, -227, -104, -104, -104, -41, 5, 245,
	-155, 333, -86, -152, -86, -93, -62, -265, -267, 334,
	-188, 332, 7, 334, -269, 210, 233, -104, 334, 107,
	-246, -249, -247, 187, 118, 199, 250, 334, 334, -89,
	-163, 334, 334, -91, -107, -94, -86, 334, -190, 332,
	334, -270, -271, 36, 284, 71, -163, -270, -67, -247,
	187, -249, 187, 289, 89, -248, 334, -155, 334, -152,
	-189, -271, 204, 113, 232, 204, 113, -250, 174, 226,
	47, 245, -250, -246, -57, 47, 226, -86, 26, 20,
	179, 86, -271,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 449, 0, 0, 0, 0, 0,
	0, 0, 421, -2, 0, 166, 0, 365, 0, 365,
	365, 369, 0, 0, 451, 0, 331, 448, -2, 459,
	0, 0, 0, 457, 435, 0, 0, -2, 0, 0,
	0, 0, 0, 140, 0, 989, 918, 924, 925, 949,
	950, 951, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 0, 0, 920, 989, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 0, 243, 963, 964, 965, 966, 967, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 126, 133, 134, 1042, 136, 0,
	143, 144, 145, 147, 148, 149, 150, 151, 152, 153,
	0, 358, 1067, 371, 161, 1019, 1072, 977, 1147, 1090,
	169, 174, 0, 1153, 177, 182, -2, 100, 208, 209,
	210, 211, 212, 0, 0, 0, 218, 245, 0, 0,
	0, 0, 0, 225, 0, 228, 232, 0, 0, 0,
	239, 0, 0, 373, 364, 373, 361, 362, 363, 366,
	0, 357, 156, 157, 158, 159, 0, 450, 160, 185,
	186, 187, 196, 197, 198, 199, 320, 0, 322, 206,
	207, 945, 0, 959, 960, 961, 962, 0, 0, 0,
	0, 0, 330, -2, 431, 432, -2, 0, 454, 454,
	454, 0, 0, 432, 0, 440, 1047, 443, 931, 441,
	0, 0, 456, 455, 0, 436, 538, 0, 485, 0,
	2, 0, 1131, 538, 0, 1131, 923, 0, 0, 1131,
	0, 0, 141, 142, 928, 926, 927, 0, 0, 0,
	0, 921, 897, 895, 896, 0, 0, 0, 0, 544,
	88, 1131, 56, 1131, 916, 56, 1131, 98, 56, 1131,
	96, 1131, 102, 0, 121, 123, 1159, 0, 0, 0,
	0, 131, 0, 135, 137, 0, 0, 0, 370, 162,
	1120, 164, 0, 0, 168, 374, 376, 377, 378, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 180, 101,
	0, 0, 213, 65, 66, 0, 226, 229, 0, 247,
	0, 0, 0, 0, 0, 0, 227, 230, 0, 233,
	0, 235, 236, 0, 0, 0, 0, 359, 372, 360,
	0, 368, 56, 542, 321, 947, 946, 303, 1131, 447,
	303, 953, 447, 1131, -2, 0, 427, 466, 467, 0,
	0, 0, 0, 452, 453, 0, 0, 0, 423, 424,
	0, 442, 0, 0, 488, 908, 912, 913, 642, 0,
	0, 0, 0, 0, 0, 734, 736, 1125, 1147, 0,
	738, 739, 0, 741, 743, 744, 0, 747, 748, 888,
	920, 934, 935, 936, 937, 0, 0, 940, 0, 942,
	943, 944, 788, 757, -2, -2, 932, 574, 575, 576,
	577, -2, 1161, 761, 763, 765, 766, 767, 768, 0,
	1109, 1126, 1127, 1143, 1144, 1152, 1156, 1157, 1131, 1140,
	1132, 1121, 1129, 1138, 994, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 958, 604, 605, 610,
	611, 613, 488, 486, 539, 540, 0, 0, 905, 903,
	904, 33, 354, 35, 0, 354, 354, 0, 0, 0,
	0, 252, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 529, 919, 0, 893, 894, 529, 67, 78, 0,
	0, 914, 898, 548, 0, 398, 0, 0, 545, 0,
	0, 90, 0, 54, 55, 0, 92, 0, 0, 94,
	0, 0, 0, 449, 0, 0, 1131, 0, 449, 0,
	846, 556, 557, 558, 559, 560, 639, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 581, 582,
	583, 584, 585, 586, 587, 601, 0, 580, 580, 580,
	593, 594, 602, 603, 608, 609, 620, 621, 623, 625,
	619, 619, 619, 616, 617, 0, 844, 0, 146, 0,
	0, 165, 0, 0, 0, 0, 379, 193, 194, 195,
	381, 382, 170, 172, 183, 171, 173, 175, 176, 200,
	201, 202, 203, 204, 205, 0, 0, 104, 216, 214,
	215, 217, 219, 0, 244, 220, 221, 222, 223, 224,
	231, 234, 237, 238, 0, 0, 0, 367, 323, 0,
	261, 0, 0, 326, 446, 0, 0, 0, 1131, 952,
	386, 0, 430, 464, 465, 468, 472, 473, 476, 479,
	480, 470, 642, 437, 438, 439, 460, 461, 341, 444,
	0, 0, 548, 0, 0, 0, 0, 0, 0, 823,
	824, 825, 826, 827, 828, 831, 832, 829, 830, 833,
	834, 835, 0, 0, 0, 836, 837, 838, 0, 0,
	840, 0, 842, 0, 0, 0, 0, 0, 0, 902,
	0, 0, 0, 911, 839, 647, 648, 649, 671, 672,
	0, 735, 899, 892, 737, 0, -2, 844, 0, 740,
	745, 746, 0, 0, 887, -2, 0, 939, 0, 639,
	790, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 607, 618, 615, 614, 591, 0, 590, 588, 0,
	592, 0, 0, 0, 548, 0, 0, 907, 0, 0,
	0, 0, 353, 37, 1131, 0, 58, 0, 0, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 251, 0, 0, 0, 922, 0,
	0, 0, 70, 0, 929, 77, 0, 0, 0, 0,
	410, 0, 410, 400, 0, 0, 0, 410, 413, 414,
	416, 417, 0, 0, 546, 89, 917, 56, 99, 56,
	56, 103, 97, 107, 122, 0, 124, 127, 128, 129,
	130, 125, 0, 549, 551, 561, 0, 626, 627, 628,
	629, 630, 631, 640, 132, 0, 0, 0, 0, 167,
	375, 380, 0, 190, 0, 192, 0, 105, 246, 154,
	240, 241, 529, 543, 0, 0, 260, 928, 262, 264,
	265, 266, 267, 953, 0, 953, 0, 0, 324, 0,
	0, 0, 0, 388, 394, 0, 0, 474, 0, 0,
	471, 477, 478, 0, 463, 339, 340, 449, 930, 482,
	909, 529, 489, 0, 499, 538, 515, 504, 0, 643,
	552, 553, 595, 596, 597, 598, 599, 644, 645, 0,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	-2, -2, -2, 663, 664, 665, -2, -2, -2, 669,
	670, -2, 841, 843, 0, 902, 0, -2, 0, -2,
	-2, -2, -2, 683, 0, 685, 688, 690, 692, 0,
	0, 0, 0, 901, 702, 879, 0, 0, 820, 821,
	822, 910, 687, 0, 0, 900, 891, 0, 0, -2,
	742, 0, 0, 0, 850, 851, 886, 882, 0, 749,
	459, 0, 0, 0, 0, 0, 948, 798, 0, 0,
	0, 762, 764, 0, 0, 0, 0, 854, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 844, 864, 0,
	0, 705, 0, 0, 0, 0, 1147, 0, 844, 872,
	0, 0, 0, 0, 0, 844, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	482, 541, 906, 36, 343, 0, 0, 0, 39, 1131,
	47, 0, 275, 0, 0, 0, 0, 0, 356, 48,
	1131, 56, 1131, 56, 49, 34, 354, 248, 0, 249,
	0, 347, 0, 342, 345, 0, 77, 0, 0, 64,
	0, 68, 79, 0, 915, 87, 0, 547, 395, 410,
	0, 0, 402, 399, 397, 548, 0, 0, 0, 0,
	91, 93, 95, 0, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 845, 138, 139, 163, 188, 189, 191,
	184, 0, 242, 269, 302, 0, 0, 953, 0, 258,
	303, 325, 327, 0, 0, 390, 394, 0, 393, 447,
	0, 0, 462, 0, 484, 0, 487, 0, 0, 0,
	0, 0, 535, 535, 535, 533, 509, 449, 0, 515,
	0, 0, 527, 0, -2, 504, 0, 0, -2, -2,
	0, 0, 0, 703, -2, 684, 686, 689, 691, 693,
	0, 0, 0, 0, 0, 0, 0, 704, 0, 0,
	889, 892, -2, 845, 848, 849, 0, 0, 883, 0,
	0, 0, 0, 458, 459, 459, 459, 755, 0, 756,
	0, 0, 0, 0, 0, 0, 771, 0, 772, 773,
	0, 0, 774, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 709, 710, 0,
	0, 775, 870, 871, 0, 0, 0, 0, 0, 0,
	780, 0, 877, 0, 0, 0, 784, 785, 786, 0,
	578, 0, 600, 622, 624, 612, 484, 0, 0, 0,
	0, 57, 273, 292, 0, 0, 332, 338, 338, 0,
	758, 759, 0, 0, 0, 41, 0, 0, 0, 0,
	45, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 80, 408, 409, 396, 407, 0,
	410, 415, 412, 418, 0, 554, 0, 0, 562, 632,
	633, 634, 635, 636, 637, 638, 0, 155, 256, 0,
	263, 0, 0, 0, 261, 0, 0, 0, 392, 394,
	0, 385, 386, 469, 475, 445, 792, 0, 0, 490,
	0, 0, 0, 0, 0, 530, 534, 531, 532, 0,
	0, 0, 0, 515, 527, 496, 0, 0, 0, 503,
	526, 0, 525, 514, -2, 646, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 880, 0, 815, 0, 0,
	891, -2, 852, 881, 885, 0, 750, 0, 0, 0,
	0, 941, 796, 797, 801, 0, 0, 760, 0, 0,
	853, 863, 865, 706, 707, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, -2, -2, -2, 724, 725,
	726, -2, -2, -2, 0, 0, 0, 866, 0, 0,
	818, 868, 869, 874, 875, 0, 777, 778, 779, 876,
	0, 0, 0, 606, 0, 792, 349, 351, 38, 0,
	274, 0, 277, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 294, 301, 0, 341, 933, 0, 341,
	0, 0, 0, 0, 0, 53, 0, 0, 355, 0,
	56, 56, 344, 0, 0, 0, 0, 348, 346, 69,
	0, 0, 0, 0, 0, 401, 411, 0, 555, 550,
	641, 0, 0, 0, 0, 0, 0, 0, 0, 383,
	394, 0, 387, 388, 433, 0, 483, 481, 517, 0,
	519, 0, 0, 0, 521, 499, 510, 0, 512, 515,
	0, 527, 501, 0, 0, 494, 0, 493, 515, 523,
	0, 0, 0, 0, -2, 0, 696, -2, -2, 814,
	845, 890, 884, 938, 459, 751, 753, 754, 803, 800,
	0, 787, 769, 770, 862, 0, 0, 0, 0, 845,
	817, 776, 0, 782, 783, 579, 434, 40, 0, 278,
	279, 953, 0, 282, 285, 0, 287, 955, 269, 0,
	298, 299, 333, 334, 337, 335, 338, 459, 296, 0,
	42, 43, 52, 60, 44, 50, 0, 0, 0, 0,
	528, 0, 0, 0, 74, 72, 0, 0, 0, 419,
	420, 0, 0, 301, 0, 291, 269, 259, 301, 0,
	0, 389, 390, 791, 793, 0, 518, 0, 537, 520,
	515, 511, 0, 527, 449, 508, 497, 0, 498, 0,
	527, 0, 0, 505, -2, -2, 697, 816, 0, 459,
	0, 789, -2, 0, 0, 0, 819, 0, 276, 280,
	0, 0, 307, 0, 295, 0, 341, 0, 0, 62,
	0, 350, 352, 0, 0, 0, 0, 76, 73, 0,
	0, 404, 548, 406, 0, 269, 301, 257, 269, 0,
	391, 392, 0, 0, 0, 0, 513, 506, 0, 495,
	491, 0, 502, 0, 524, 752, 806, 0, -2, 0,
	732, 781, 0, 286, 312, 0, 0, 0, 336, 750,
	303, 46, 0, 59, 0, 0, 459, 75, 71, 0,
	405, 0, 289, 269, 328, 0, 384, 794, 795, 536,
	500, 515, 0, 522, 0, 0, 0, 802, 733, 0,
	288, 308, 309, 0, 304, 305, 306, 954, 300, 307,
	61, 253, 255, 0, 548, 0, 290, 301, 527, 492,
	799, 804, 807, -2, 1093, 986, 0, 805, 281, 310,
	0, 311, 0, 0, 0, 312, 0, 403, 272, 269,
	507, 0, 809, 810, 811, 812, 813, 313, 0, 316,
	317, 0, 314, 297, 268, 270, 271, 329, 0, 315,
	318, 319, 808,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 322, 3, 328, 323, 3,
	333, 334, 326, 324, 337, 325, 335, 327, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 341, 336,
	316, 318, 317, 3, 338, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 331, 3, 332, 329, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 339, 321, 340, 319,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 320, 57659, 330,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:806
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:926
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:998
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:999
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1002
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1003
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1076
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1226
		{ /* SKIP DOC */
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			return unimplemented(sqllex, "set local")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1456
		{ /* SKIP DOC */
		}
	case 167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return unimplemented(sqllex, "set from current")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1514
		{
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = Low
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = Normal
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = High
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1734
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1742
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1758
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1762
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1766
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1809
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1813
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1819
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1823
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1827
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1831
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = DropDefault
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1916
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return unimplemented(sqllex, "match full")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return unimplemented(sqllex, "match partial")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return unimplemented(sqllex, "match simple")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2124
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2134
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2140
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			return unimplemented(sqllex, "no action")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return unimplemented(sqllex, "action set null")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			return unimplemented(sqllex, "action set default")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = true
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = false
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2257
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2261
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = Ascending
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = Descending
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2315
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2316
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = true
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = false
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2363
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2372
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2373
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.str = ""
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.str = ""
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = ReadOnly
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = ReadWrite
		}
	case 383:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.str = ""
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.str = ""
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.str = ""
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.str = ""
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2528
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2592
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2596
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 411:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2627
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2854
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2855
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2856
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2859
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2860
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2863
		{
			return unimplemented(sqllex, "cte")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2867
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2871
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2875
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = true
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = false
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = false
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = true
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2899
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2937
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2957
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3010
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3013
		{
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &From{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3104
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3122
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3149
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3166
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = nil
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = true
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = false
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.str = astFullJoin
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.str = astLeftJoin
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.str = astRightJoin
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.str = astInnerJoin
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3351
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3437
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3450
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3451
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3474
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3546
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = nil
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3595
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3723
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3763
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = year
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = month
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = day
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = hour
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = minute
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = month
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = hour
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = minute
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = minute
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = nil
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = second
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3858
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3893
		{
			return unimplemented(sqllex, "at tz")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4127
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4300
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4353
		{
			return unimplemented(sqllex, "variadic")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4354
		{
			return unimplemented(sqllex, "variadic")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4377
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4393
		{
			return unimplemented(sqllex, "func_application")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4394
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4398
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			return unimplemented(sqllex, "current role")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4416
		{
			return unimplemented(sqllex, "current user")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			return unimplemented(sqllex, "session user")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			return unimplemented(sqllex, "user")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4447
		{
			return unimplemented(sqllex, "treat")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4491
		{
			return unimplemented(sqllex, "within group")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4492
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = Window(nil)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4527
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4589
		{
			return unimplemented(sqllex, "frame range")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4590
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4591
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4595
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4602
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4605
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = Any
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = Some
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = All
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = Plus
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = Minus
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = Mult
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = Div
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = FloorDiv
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = Mod
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = Bitand
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = Bitor
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = Pow
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = Bitxor
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = LT
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = GT
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = EQ
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = LE
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = GE
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = NE
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = Like
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = NotLike
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = ILike
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = NotILike
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4970
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5088
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5132
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5168
		{
			return unimplemented(sqllex, "func const")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5177
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = DNull
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.str = ""
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
