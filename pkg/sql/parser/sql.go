// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISCARD = 57434
const DISTINCT = 57435
const DO = 57436
const DOUBLE = 57437
const DROP = 57438
const ELSE = 57439
const ENCODING = 57440
const END = 57441
const ESCAPE = 57442
const EXCEPT = 57443
const EXISTS = 57444
const EXECUTE = 57445
const EXPERIMENTAL_FINGERPRINTS = 57446
const EXPLAIN = 57447
const EXTRACT = 57448
const EXTRACT_DURATION = 57449
const FALSE = 57450
const FAMILY = 57451
const FETCH = 57452
const FILTER = 57453
const FIRST = 57454
const FLOAT = 57455
const FLOAT4 = 57456
const FLOAT8 = 57457
const FLOORDIV = 57458
const FOLLOWING = 57459
const FOR = 57460
const FORCE_INDEX = 57461
const FOREIGN = 57462
const FROM = 57463
const FULL = 57464
const GRANT = 57465
const GRANTS = 57466
const GREATEST = 57467
const GROUP = 57468
const GROUPING = 57469
const HAVING = 57470
const HELP = 57471
const HIGH = 57472
const HOUR = 57473
const INCREMENTAL = 57474
const IF = 57475
const IFNULL = 57476
const ILIKE = 57477
const IN = 57478
const INTERLEAVE = 57479
const INDEX = 57480
const INDEXES = 57481
const INITIALLY = 57482
const INNER = 57483
const INSERT = 57484
const INT = 57485
const INT2VECTOR = 57486
const INT2 = 57487
const INT4 = 57488
const INT8 = 57489
const INT64 = 57490
const INTEGER = 57491
const INTERSECT = 57492
const INTERVAL = 57493
const INTO = 57494
const IS = 57495
const ISOLATION = 57496
const JOB = 57497
const JOBS = 57498
const JOIN = 57499
const KEY = 57500
const KEYS = 57501
const KV = 57502
const LATERAL = 57503
const LC_CTYPE = 57504
const LC_COLLATE = 57505
const LEADING = 57506
const LEAST = 57507
const LEFT = 57508
const LEVEL = 57509
const LIKE = 57510
const LIMIT = 57511
const LOCAL = 57512
const LOCALTIME = 57513
const LOCALTIMESTAMP = 57514
const LOW = 57515
const LSHIFT = 57516
const MATCH = 57517
const MINUTE = 57518
const MONTH = 57519
const NAN = 57520
const NAME = 57521
const NAMES = 57522
const NATURAL = 57523
const NEXT = 57524
const NO = 57525
const NO_INDEX_JOIN = 57526
const NORMAL = 57527
const NOT = 57528
const NOTHING = 57529
const NULL = 57530
const NULLIF = 57531
const NULLS = 57532
const NUMERIC = 57533
const OF = 57534
const OFF = 57535
const OFFSET = 57536
const OID = 57537
const ON = 57538
const ONLY = 57539
const OPTIONS = 57540
const OR = 57541
const ORDER = 57542
const ORDINALITY = 57543
const OUT = 57544
const OUTER = 57545
const OVER = 57546
const OVERLAPS = 57547
const OVERLAY = 57548
const PARENT = 57549
const PARTIAL = 57550
const PARTITION = 57551
const PASSWORD = 57552
const PAUSE = 57553
const PLACING = 57554
const PLANS = 57555
const POSITION = 57556
const PRECEDING = 57557
const PRECISION = 57558
const PREPARE = 57559
const PRIMARY = 57560
const PRIORITY = 57561
const QUERIES = 57562
const QUERY = 57563
const RANGE = 57564
const READ = 57565
const REAL = 57566
const RECURSIVE = 57567
const REF = 57568
const REFERENCES = 57569
const REGCLASS = 57570
const REGPROC = 57571
const REGPROCEDURE = 57572
const REGNAMESPACE = 57573
const REGTYPE = 57574
const RENAME = 57575
const REPEATABLE = 57576
const RELEASE = 57577
const RESET = 57578
const RESTORE = 57579
const RESTRICT = 57580
const RESUME = 57581
const RETURNING = 57582
const REVOKE = 57583
const RIGHT = 57584
const ROLLBACK = 57585
const ROLLUP = 57586
const ROW = 57587
const ROWS = 57588
const RSHIFT = 57589
const SAVEPOINT = 57590
const SCATTER = 57591
const SEARCH = 57592
const SECOND = 57593
const SELECT = 57594
const SEQUENCES = 57595
const SERIAL = 57596
const SERIALIZABLE = 57597
const SESSION = 57598
const SESSIONS = 57599
const SESSION_USER = 57600
const SET = 57601
const SETTING = 57602
const SETTINGS = 57603
const SHOW = 57604
const SIMILAR = 57605
const SIMPLE = 57606
const SMALLINT = 57607
const SMALLSERIAL = 57608
const SNAPSHOT = 57609
const SOME = 57610
const SPLIT = 57611
const SQL = 57612
const START = 57613
const STATUS = 57614
const STDIN = 57615
const STRICT = 57616
const STRING = 57617
const STORING = 57618
const SUBSTRING = 57619
const SYMMETRIC = 57620
const SYSTEM = 57621
const TABLE = 57622
const TABLES = 57623
const TEMP = 57624
const TEMPLATE = 57625
const TEMPORARY = 57626
const TESTING_RANGES = 57627
const TESTING_RELOCATE = 57628
const TEXT = 57629
const THEN = 57630
const TIME = 57631
const TIMESTAMP = 57632
const TIMESTAMPTZ = 57633
const TO = 57634
const TRAILING = 57635
const TRACE = 57636
const TRANSACTION = 57637
const TREAT = 57638
const TRIM = 57639
const TRUE = 57640
const TRUNCATE = 57641
const TYPE = 57642
const UNBOUNDED = 57643
const UNCOMMITTED = 57644
const UNION = 57645
const UNIQUE = 57646
const UNKNOWN = 57647
const UPDATE = 57648
const UPSERT = 57649
const USE = 57650
const USER = 57651
const USERS = 57652
const USING = 57653
const UUID = 57654
const VALID = 57655
const VALIDATE = 57656
const VALUE = 57657
const VALUES = 57658
const VARCHAR = 57659
const VARIADIC = 57660
const VIEW = 57661
const VARYING = 57662
const WHEN = 57663
const WHERE = 57664
const WINDOW = 57665
const WITH = 57666
const WITHIN = 57667
const WITHOUT = 57668
const WRITE = 57669
const YEAR = 57670
const ZONE = 57671
const NOT_LA = 57672
const WITH_LA = 57673
const AS_LA = 57674
const POSTFIXOP = 57675
const UMINUS = 57676

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5674

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 36,
	353, 36,
	-2, 463,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 436,
	196, 436,
	240, 436,
	349, 436,
	351, 436,
	353, 436,
	-2, 446,
	-1, 76,
	1, 439,
	196, 439,
	240, 439,
	349, 439,
	351, 439,
	353, 439,
	-2, 445,
	-1, 85,
	1, 36,
	353, 36,
	-2, 463,
	-1, 481,
	1, 187,
	353, 187,
	-2, 1045,
	-1, 552,
	110, 473,
	169, 473,
	194, 473,
	-2, 442,
	-1, 555,
	110, 472,
	169, 472,
	194, 472,
	-2, 440,
	-1, 635,
	350, 972,
	-2, 965,
	-1, 636,
	350, 973,
	-2, 966,
	-1, 642,
	5, 641,
	350, 641,
	-2, 1170,
	-1, 666,
	5, 600,
	-2, 1140,
	-1, 667,
	5, 635,
	350, 635,
	-2, 1142,
	-1, 668,
	5, 610,
	-2, 1143,
	-1, 669,
	5, 609,
	-2, 1144,
	-1, 670,
	5, 635,
	350, 635,
	-2, 1147,
	-1, 671,
	5, 635,
	350, 635,
	-2, 1148,
	-1, 672,
	5, 636,
	-2, 1151,
	-1, 673,
	5, 592,
	-2, 1152,
	-1, 674,
	5, 592,
	-2, 1153,
	-1, 675,
	5, 617,
	-2, 1157,
	-1, 676,
	5, 602,
	-2, 1158,
	-1, 677,
	5, 603,
	-2, 1159,
	-1, 678,
	5, 593,
	-2, 1164,
	-1, 679,
	5, 594,
	-2, 1165,
	-1, 680,
	5, 595,
	-2, 1166,
	-1, 681,
	5, 596,
	-2, 1167,
	-1, 682,
	5, 597,
	-2, 1168,
	-1, 683,
	5, 598,
	-2, 1169,
	-1, 684,
	5, 592,
	-2, 1174,
	-1, 685,
	5, 601,
	-2, 1179,
	-1, 686,
	5, 599,
	-2, 1182,
	-1, 687,
	5, 633,
	350, 633,
	-2, 1184,
	-1, 688,
	5, 637,
	-2, 1187,
	-1, 689,
	5, 639,
	-2, 1188,
	-1, 690,
	5, 632,
	350, 632,
	-2, 1193,
	-1, 808,
	110, 472,
	169, 472,
	194, 472,
	-2, 443,
	-1, 917,
	101, 446,
	110, 446,
	150, 446,
	169, 446,
	194, 446,
	200, 446,
	303, 446,
	-2, 760,
	-1, 926,
	350, 949,
	-2, 937,
	-1, 1204,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 676,
	-1, 1205,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 677,
	-1, 1206,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 678,
	-1, 1210,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 682,
	-1, 1211,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 683,
	-1, 1212,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 684,
	-1, 1215,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 689,
	-1, 1221,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 691,
	-1, 1223,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 695,
	-1, 1224,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 696,
	-1, 1225,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 697,
	-1, 1226,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 698,
	-1, 1252,
	205, 831,
	-2, 834,
	-1, 1288,
	121, 871,
	350, 972,
	-2, 965,
	-1, 1289,
	121, 872,
	-2, 1136,
	-1, 1290,
	121, 873,
	-2, 1044,
	-1, 1291,
	121, 874,
	-2, 1008,
	-1, 1292,
	121, 875,
	-2, 1025,
	-1, 1293,
	121, 876,
	-2, 1043,
	-1, 1294,
	121, 877,
	-2, 1095,
	-1, 1475,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 690,
	-1, 1476,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 692,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 693,
	-1, 1499,
	205, 830,
	-2, 833,
	-1, 1664,
	101, 446,
	110, 446,
	150, 446,
	169, 446,
	194, 446,
	200, 446,
	303, 446,
	-2, 527,
	-1, 1706,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 694,
	-1, 1711,
	153, 0,
	-2, 710,
	-1, 1721,
	205, 832,
	-2, 835,
	-1, 1763,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 737,
	-1, 1764,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 738,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 739,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 743,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 744,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	333, 0,
	334, 0,
	335, 0,
	-2, 745,
	-1, 1853,
	1, 528,
	70, 528,
	101, 528,
	110, 528,
	122, 528,
	126, 528,
	128, 528,
	141, 528,
	150, 528,
	157, 528,
	166, 528,
	169, 528,
	181, 528,
	194, 528,
	196, 528,
	200, 528,
	240, 528,
	242, 528,
	303, 528,
	311, 528,
	322, 528,
	323, 528,
	332, 528,
	349, 528,
	351, 528,
	353, 528,
	354, 528,
	-2, 527,
	-1, 1903,
	153, 0,
	-2, 711,
	-1, 1906,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 714,
	-1, 1907,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 716,
	-1, 2023,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 715,
	-1, 2024,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	135, 0,
	136, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 717,
	-1, 2031,
	153, 0,
	-2, 746,
	-1, 2098,
	153, 0,
	-2, 747,
	-1, 2179,
	36, 0,
	135, 0,
	168, 0,
	263, 0,
	330, 0,
	336, 0,
	-2, 1139,
}

const sqlPrivate = 57344

const sqlLast = 31605

var sqlAct = [...]int{

	636, 2178, 1809, 2207, 2162, 1341, 1387, 2163, 2127, 1333,
	2164, 1104, 556, 2177, 1740, 1952, 1995, 1849, 1976, 2021,
	1819, 626, 634, 2055, 1416, 60, 1848, 1110, 995, 1875,
	1676, 612, 1861, 1963, 1659, 1636, 577, 1638, 98, 98,
	1677, 98, 1565, 1957, 1386, 701, 1391, 866, 1827, 1405,
	1662, 1390, 348, 98, 98, 98, 1836, 841, 1106, 1342,
	98, 633, 1423, 98, 828, 534, 1564, 838, 1510, 341,
	24, 98, 922, 629, 543, 1250, 1424, 1591, 1650, 1183,
	98, 98, 1471, 1645, 98, 978, 1146, 98, 98, 98,
	98, 1155, 329, 98, 98, 331, 1429, 1130, 1064, 1412,
	592, 1275, 1314, 746, 561, 967, 1426, 1178, 606, 1238,
	1260, 1379, 1235, 867, 843, 829, 346, 745, 563, 75,
	537, 1269, 1285, 538, 722, 713, 952, 1335, 711, 913,
	1135, 1394, 480, 714, 605, 566, 811, 810, 812, 466,
	1062, 476, 477, 99, 529, 628, 555, 791, 455, 971,
	707, 956, 90, 564, 94, 24, 1876, 816, 469, 792,
	2066, 1498, 1334, 2067, 2205, 1272, 560, 863, 691, 75,
	980, 980, 527, 2187, 2174, 2173, 1874, 1366, 1366, 2170,
	76, 1660, 863, 868, 869, 77, 560, 980, 1603, 1338,
	574, 309, 857, 580, 1602, 349, 587, 2160, 1502, 1179,
	863, 868, 869, 1503, 75, 2157, 871, 1137, 863, 1366,
	520, 2146, 1273, 583, 1360, 2124, 2108, 544, 863, 1874,
	350, 1648, 2104, 2100, 871, 863, 1360, 996, 2092, 2062,
	870, 2091, 2063, 2114, 568, 2049, 885, 2046, 1874, 1182,
	863, 2044, 545, 2025, 1874, 81, 1360, 2006, 870, 2005,
	863, 1979, 1874, 1648, 1366, 1501, 553, 1274, 1271, 1930,
	1366, 552, 1366, 1317, 1908, 1905, 1895, 1366, 1360, 1366,
	1136, 1894, 1873, 83, 1366, 1874, 1803, 1798, 1715, 1332,
	1332, 1366, 1625, 1582, 1580, 863, 1583, 1366, 1579, 876,
	1578, 1366, 1499, 1366, 1420, 1366, 1370, 863, 1365, 1366,
	1359, 1366, 1331, 1360, 1622, 1332, 1776, 876, 1718, 84,
	1143, 868, 869, 1142, 1657, 1179, 1144, 79, 989, 98,
	1366, 990, 1626, 863, 80, 98, 98, 98, 98, 98,
	345, 543, 1276, 1415, 871, 719, 1377, 1182, 1254, 824,
	1509, 1535, 1536, 78, 1553, 1554, 1555, 886, 1054, 590,
	734, 573, 85, 596, 81, 81, 561, 1902, 870, 1877,
	981, 981, 1076, 868, 869, 886, 888, 889, 890, 898,
	899, 900, 1663, 760, 1971, 2197, 74, 981, 2176, 891,
	540, 2169, 83, 83, 2132, 2095, 871, 2047, 1935, 902,
	1938, 1931, 823, 1923, 1550, 1922, 1921, 1917, 1916, 1915,
	1914, 1853, 1826, 49, 1807, 1791, 1786, 1785, 1784, 1270,
	870, 1726, 50, 1624, 1628, 834, 885, 876, 84, 84,
	887, 1602, 1661, 1246, 1587, 708, 79, 1584, 1572, 1563,
	1534, 1364, 698, 80, 1531, 1530, 51, 930, 887, 1528,
	1136, 1515, 1514, 1433, 1282, 1281, 823, 1541, 923, 822,
	78, 98, 1337, 78, 723, 1109, 1742, 2149, 2111, 716,
	716, 717, 2090, 2089, 2088, 2080, 2078, 2070, 98, 876,
	700, 98, 98, 2188, 544, 2058, 984, 979, 2042, 1535,
	1536, 2033, 543, 1992, 1556, 1981, 1535, 1536, 895, 903,
	543, 1946, 1928, 1102, 1900, 1880, 1841, 1817, 1815, 545,
	345, 1814, 1812, 1710, 1805, 1551, 901, 1685, 1684, 1562,
	1524, 881, 879, 880, 872, 873, 874, 875, 877, 878,
	98, 893, 1523, 834, 1520, 1495, 98, 886, 1247, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 1490, 1240,
	1462, 2065, 345, 1460, 1937, 1447, 74, 98, 98, 98,
	1446, 98, 892, 1419, 957, 764, 960, 1324, 1280, 81,
	1103, 578, 964, 950, 949, 809, 98, 948, 947, 64,
	868, 869, 946, 49, 945, 944, 943, 98, 1552, 942,
	756, 941, 50, 940, 939, 1541, 938, 83, 74, 937,
	543, 98, 1541, 871, 936, 935, 934, 348, 543, 927,
	887, 916, 78, 763, 827, 743, 51, 730, 728, 1968,
	833, 1943, 1942, 1910, 1842, 49, 896, 870, 1535, 1536,
	923, 808, 1612, 84, 50, 544, 1447, 1611, 914, 739,
	741, 79, 797, 544, 744, 832, 561, 752, 80, 754,
	2094, 2068, 872, 873, 874, 875, 877, 878, 51, 1639,
	545, 1941, 1604, 1179, 596, 764, 1663, 78, 545, 795,
	1060, 699, 793, 764, 1547, 1548, 1549, 1586, 1585, 1546,
	1544, 1545, 1537, 1538, 1539, 1540, 1542, 1543, 1474, 801,
	753, 804, 932, 894, 783, 962, 882, 883, 884, 897,
	963, 881, 879, 880, 872, 873, 874, 875, 877, 878,
	98, 755, 1107, 861, 2126, 98, 98, 98, 1472, 98,
	851, 1958, 1334, 864, 541, 1411, 819, 820, 1969, 825,
	1743, 1261, 953, 1410, 1535, 1536, 98, 98, 550, 81,
	849, 1598, 1672, 544, 98, 2135, 2195, 2194, 98, 64,
	349, 544, 1888, 98, 553, 862, 969, 850, 787, 552,
	1369, 2103, 513, 543, 543, 1506, 1091, 83, 545, 1619,
	514, 348, 2016, 2015, 780, 350, 545, 98, 781, 1899,
	98, 81, 98, 98, 98, 98, 98, 98, 926, 1148,
	2014, 64, 929, 98, 2013, 1696, 1272, 788, 98, 98,
	1061, 324, 1700, 84, 88, 98, 1699, 954, 955, 83,
	983, 79, 1002, 986, 834, 1669, 98, 1668, 80, 1519,
	752, 708, 1539, 1540, 1542, 1543, 1108, 1537, 1538, 1539,
	1540, 1542, 1543, 1518, 1517, 98, 958, 78, 98, 1075,
	1541, 1516, 991, 1273, 1134, 84, 961, 98, 844, 844,
	845, 845, 1477, 79, 1156, 98, 1804, 1367, 325, 98,
	80, 87, 993, 753, 1078, 970, 973, 98, 98, 315,
	844, 98, 845, 519, 98, 1113, 518, 1222, 1176, 330,
	2102, 348, 1175, 1172, 919, 794, 589, 1077, 1274, 1271,
	75, 1328, 1101, 1048, 1051, 1052, 1047, 1327, 1551, 1193,
	1049, 1149, 1406, 1099, 1065, 1098, 544, 544, 779, 1080,
	1072, 1071, 1148, 726, 349, 526, 878, 1703, 1147, 1793,
	1159, 316, 1082, 846, 846, 1086, 1087, 1088, 1089, 1090,
	1167, 545, 545, 1170, 1085, 1237, 1588, 546, 855, 350,
	1095, 1096, 1160, 1162, 1100, 846, 1997, 965, 1535, 1536,
	1079, 742, 1002, 1002, 854, 868, 869, 1115, 2147, 1117,
	1116, 551, 2194, 1276, 1543, 1165, 547, 974, 1535, 1536,
	1132, 1552, 1237, 1140, 852, 1592, 548, 1177, 871, 599,
	1687, 2201, 969, 784, 1181, 98, 1152, 98, 98, 1261,
	98, 853, 1173, 98, 559, 98, 98, 1192, 98, 98,
	326, 543, 870, 86, 1045, 1354, 1258, 553, 854, 1618,
	553, 553, 1126, 319, 1373, 1127, 1128, 1053, 1158, 2166,
	1276, 1550, 1694, 456, 349, 1375, 1244, 1736, 852, 328,
	1467, 1242, 1464, 1070, 1069, 2143, 540, 535, 767, 327,
	1270, 859, 89, 558, 461, 853, 1376, 1097, 785, 350,
	457, 1336, 1248, 1336, 1541, 725, 1245, 777, 1374, 2144,
	1458, 876, 1546, 1544, 1545, 1537, 1538, 1539, 1540, 1542,
	1543, 2216, 1295, 1596, 1541, 768, 2210, 458, 766, 1413,
	1414, 1649, 842, 858, 980, 318, 317, 348, 2083, 1620,
	1733, 951, 1355, 560, 778, 98, 460, 1401, 310, 2029,
	1358, 786, 1276, 2043, 1157, 2167, 1184, 1191, 98, 98,
	98, 1340, 1551, 98, 98, 1349, 1073, 1592, 75, 749,
	98, 1350, 911, 75, 723, 1356, 1522, 1351, 716, 1352,
	716, 1353, 1551, 1653, 1363, 1734, 1219, 1837, 521, 1704,
	1852, 847, 847, 1688, 544, 1145, 560, 2200, 98, 348,
	1824, 2165, 1656, 2193, 1998, 1421, 98, 98, 98, 2191,
	1432, 2168, 98, 847, 311, 98, 1951, 1403, 1651, 545,
	1300, 98, 98, 98, 98, 98, 771, 1654, 955, 954,
	1039, 1479, 1371, 98, 750, 1552, 98, 98, 751, 958,
	1251, 961, 1652, 543, 737, 1381, 557, 1255, 733, 1074,
	815, 1263, 1470, 1378, 320, 1552, 459, 1965, 1440, 1926,
	1276, 2208, 1287, 1287, 1298, 522, 1309, 1884, 1236, 1385,
	1434, 75, 1321, 1322, 1323, 1233, 1487, 2008, 2221, 2007,
	349, 1535, 1536, 1457, 1383, 1217, 1220, 1002, 1990, 2075,
	1231, 1485, 1671, 1443, 321, 2199, 1459, 1439, 1404, 1461,
	814, 1114, 1409, 1655, 1105, 350, 1887, 1122, 764, 1772,
	462, 2217, 1422, 1886, 1732, 1431, 2209, 2128, 1216, 1435,
	1977, 1094, 1243, 322, 981, 323, 561, 1544, 1545, 1537,
	1538, 1539, 1540, 1542, 1543, 453, 1508, 2211, 874, 875,
	877, 878, 349, 1055, 1820, 814, 1546, 1544, 1545, 1537,
	1538, 1539, 1540, 1542, 1543, 1953, 1473, 1991, 1927, 813,
	1227, 1482, 1059, 1449, 524, 1448, 1883, 350, 1228, 1966,
	1229, 1483, 1964, 464, 1234, 1488, 1832, 1123, 1831, 2220,
	1653, 1869, 456, 463, 815, 1978, 544, 1541, 749, 706,
	1480, 561, 1478, 98, 705, 558, 1944, 805, 98, 1656,
	98, 1810, 1773, 461, 813, 1057, 1469, 98, 1774, 457,
	1494, 545, 1885, 1218, 1870, 1835, 1988, 1058, 98, 1828,
	541, 536, 1646, 561, 1654, 1279, 2032, 1925, 98, 98,
	1505, 1566, 1709, 1702, 1723, 1589, 458, 1529, 543, 1489,
	1989, 1444, 523, 1368, 1330, 1551, 1171, 1168, 1278, 790,
	1649, 789, 782, 776, 621, 460, 98, 775, 98, 774,
	98, 773, 772, 769, 98, 704, 597, 1567, 98, 1092,
	1084, 693, 933, 1594, 1569, 1570, 1571, 761, 1600, 2161,
	1230, 1484, 2195, 1627, 2125, 1629, 1858, 1232, 1486, 1692,
	1690, 98, 95, 95, 1002, 313, 1606, 1670, 1607, 1608,
	1655, 1635, 1653, 1597, 1407, 1399, 1357, 447, 448, 449,
	988, 987, 1605, 1865, 468, 1866, 561, 482, 1552, 985,
	982, 1656, 977, 1002, 1609, 468, 860, 856, 1630, 1683,
	1682, 848, 1633, 1617, 567, 567, 1621, 1651, 313, 1615,
	1616, 313, 313, 586, 313, 1868, 1654, 95, 593, 1637,
	703, 702, 1623, 2037, 1871, 817, 571, 91, 1417, 343,
	34, 1652, 1067, 3, 1493, 459, 1148, 1666, 1641, 1681,
	2039, 1496, 1163, 1643, 512, 1644, 1667, 1164, 1658, 1712,
	1797, 544, 1148, 98, 1728, 1729, 1730, 1665, 1161, 1512,
	1513, 1647, 1631, 452, 868, 869, 2085, 1674, 75, 1691,
	1877, 1693, 339, 29, 75, 1695, 545, 338, 28, 762,
	2097, 1701, 1537, 1538, 1539, 1540, 1542, 1543, 1418, 462,
	1829, 821, 1655, 1169, 1002, 1166, 818, 572, 2115, 1561,
	1949, 1867, 337, 27, 1719, 1402, 1722, 1398, 335, 26,
	1574, 870, 515, 516, 1339, 34, 594, 595, 1610, 579,
	591, 692, 465, 1744, 342, 18, 336, 13, 1133, 1749,
	1002, 1002, 1050, 98, 98, 994, 1746, 1779, 1362, 1002,
	1002, 1799, 340, 12, 2214, 1751, 641, 1444, 2219, 1735,
	1737, 1738, 2159, 98, 1535, 1536, 2118, 98, 29, 98,
	868, 869, 1780, 28, 1974, 1869, 98, 1912, 1862, 543,
	868, 869, 1002, 1816, 333, 11, 1860, 344, 9, 98,
	1864, 1806, 98, 871, 332, 8, 1813, 1794, 27, 334,
	4, 348, 1800, 98, 26, 1792, 1801, 1457, 1870, 98,
	98, 98, 1802, 1796, 1739, 1821, 799, 870, 1811, 1613,
	18, 1581, 13, 799, 798, 1329, 98, 1326, 1325, 1268,
	1863, 98, 1882, 98, 920, 98, 98, 98, 12, 1823,
	98, 98, 800, 543, 1822, 2141, 1683, 1682, 2022, 1878,
	1843, 1838, 1839, 313, 1046, 1881, 1854, 1857, 1731, 709,
	313, 482, 482, 593, 1697, 1830, 1698, 1632, 1833, 930,
	11, 1834, 928, 9, 525, 1996, 454, 1083, 770, 1904,
	8, 1970, 1840, 98, 2142, 4, 1681, 1918, 1521, 2054,
	1898, 2028, 695, 1277, 1184, 1747, 931, 47, 1679, 1716,
	615, 1859, 1673, 1184, 1752, 1393, 1392, 1865, 764, 1866,
	351, 1068, 637, 528, 1286, 1185, 696, 1844, 639, 999,
	640, 1000, 544, 959, 1002, 1125, 627, 997, 721, 1343,
	1241, 1259, 1924, 1504, 924, 607, 1783, 619, 618, 1868,
	1256, 727, 1975, 479, 349, 63, 475, 545, 1871, 1595,
	1936, 1121, 1408, 1118, 1689, 98, 98, 549, 1532, 729,
	1307, 1947, 543, 1299, 1296, 796, 1777, 837, 912, 350,
	1344, 759, 98, 98, 1683, 1682, 98, 1787, 1601, 1683,
	1682, 1361, 826, 1945, 98, 731, 544, 1129, 1950, 570,
	569, 98, 1388, 757, 1056, 1372, 905, 904, 1954, 98,
	1948, 98, 738, 348, 98, 482, 482, 517, 1939, 2077,
	1973, 545, 98, 1956, 1681, 748, 747, 1940, 348, 1681,
	1400, 1442, 2215, 2084, 1686, 1867, 2134, 1955, 82, 2093,
	2020, 1468, 35, 1972, 33, 30, 1683, 1682, 1983, 25,
	2000, 23, 22, 2002, 1982, 1984, 21, 32, 1961, 1962,
	20, 1301, 1967, 31, 468, 1999, 19, 17, 16, 15,
	313, 2018, 969, 14, 10, 1847, 2027, 46, 45, 44,
	43, 2017, 42, 41, 694, 7, 1681, 6, 98, 5,
	2, 482, 803, 482, 2038, 806, 1, 0, 0, 0,
	0, 0, 98, 0, 0, 543, 0, 2034, 0, 98,
	567, 0, 1002, 0, 0, 544, 0, 98, 1683, 1682,
	611, 313, 0, 98, 0, 2011, 2012, 2045, 2040, 1986,
	0, 0, 98, 98, 0, 95, 0, 0, 2071, 98,
	545, 2051, 2053, 0, 2001, 0, 2057, 638, 2079, 2064,
	2072, 0, 1002, 2061, 0, 0, 349, 0, 1681, 0,
	0, 312, 0, 0, 98, 98, 2074, 2082, 2073, 2048,
	2052, 349, 0, 0, 0, 598, 697, 0, 0, 0,
	2069, 350, 0, 2081, 0, 0, 0, 0, 0, 0,
	98, 2096, 0, 2060, 98, 0, 350, 0, 0, 0,
	2109, 0, 543, 0, 575, 0, 0, 582, 585, 98,
	575, 2107, 2099, 0, 0, 2116, 2110, 0, 561, 348,
	98, 98, 0, 0, 2113, 0, 0, 2123, 0, 98,
	0, 98, 0, 0, 98, 2119, 348, 2130, 0, 0,
	0, 0, 0, 1960, 313, 0, 2122, 0, 544, 313,
	313, 313, 0, 975, 0, 0, 2131, 1002, 0, 0,
	2150, 2140, 2117, 2152, 2148, 98, 2010, 2112, 98, 0,
	313, 313, 0, 545, 0, 2151, 0, 0, 95, 2154,
	2156, 0, 95, 1683, 1682, 2158, 0, 482, 2155, 0,
	1033, 0, 2153, 0, 2004, 2171, 0, 0, 98, 0,
	98, 0, 2175, 2184, 2186, 0, 2185, 0, 2183, 0,
	0, 482, 98, 0, 482, 0, 95, 482, 482, 482,
	482, 482, 2192, 1681, 2190, 0, 0, 1093, 735, 736,
	2196, 2198, 482, 482, 0, 2120, 0, 0, 0, 468,
	0, 0, 0, 0, 2204, 544, 0, 0, 0, 2212,
	1112, 2213, 2136, 0, 2206, 1301, 1301, 0, 0, 2218,
	0, 0, 349, 0, 0, 0, 2222, 0, 0, 567,
	545, 0, 593, 0, 0, 0, 0, 0, 0, 349,
	0, 313, 0, 0, 0, 0, 0, 350, 0, 1153,
	0, 0, 0, 313, 0, 868, 869, 0, 0, 0,
	0, 313, 1174, 0, 350, 313, 0, 0, 1180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 0,
	0, 0, 1301, 1301, 1301, 0, 0, 0, 0, 0,
	1033, 1033, 0, 0, 830, 830, 0, 0, 0, 575,
	0, 0, 870, 839, 0, 0, 585, 0, 0, 0,
	0, 0, 1535, 1536, 0, 1553, 1554, 1555, 0, 0,
	0, 868, 869, 0, 0, 906, 907, 908, 909, 910,
	1032, 0, 0, 0, 0, 918, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 0, 616, 61,
	0, 876, 2137, 2138, 2139, 1550, 0, 0, 870, 0,
	0, 2145, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 1347, 1348, 0, 313, 0, 0, 313, 0, 482,
	482, 0, 482, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 1492, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 1541, 886,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 554, 0, 0, 562, 1557, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1556, 0, 0, 1301, 1301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1032, 1032, 0, 1558, 1559, 1560, 1551, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 1380,
	0, 1035, 887, 0, 0, 1001, 1001, 0, 0, 0,
	0, 0, 313, 313, 313, 0, 575, 313, 1389, 0,
	0, 0, 0, 0, 593, 0, 0, 1301, 1301, 1301,
	1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
	1301, 1301, 1301, 1301, 1301, 1301, 0, 1301, 1119, 0,
	1124, 0, 313, 0, 0, 0, 1131, 0, 0, 1552,
	313, 1437, 1438, 0, 0, 0, 1153, 835, 887, 1445,
	0, 0, 0, 0, 0, 1450, 1451, 1453, 1455, 1456,
	0, 0, 0, 0, 0, 1033, 0, 1463, 0, 0,
	1465, 313, 0, 0, 879, 880, 872, 873, 874, 875,
	877, 878, 0, 0, 0, 0, 0, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 0,
	1221, 0, 1223, 1224, 1225, 1226, 0, 0, 0, 0,
	0, 1035, 1035, 0, 0, 1547, 1548, 1549, 0, 1249,
	1546, 1544, 1545, 1537, 1538, 1539, 1540, 1542, 1543, 1707,
	1708, 880, 872, 873, 874, 875, 877, 878, 0, 0,
	0, 1283, 1284, 1535, 1536, 1297, 0, 1308, 1310, 1315,
	1318, 1319, 1320, 1034, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 575, 972, 972, 0, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 585, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 0, 1775, 0,
	0, 0, 0, 0, 0, 0, 998, 313, 0, 0,
	0, 0, 313, 0, 1599, 0, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 1032, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 1541,
	0, 0, 1380, 1380, 0, 0, 868, 869, 0, 0,
	1001, 0, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	1112, 0, 1112, 0, 482, 0, 0, 0, 313, 0,
	0, 1033, 1640, 1034, 1034, 0, 0, 1141, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 1551, 0, 575,
	0, 0, 0, 0, 0, 313, 0, 585, 0, 0,
	0, 575, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 0, 1678, 0, 0, 0, 0, 0, 0, 0,
	0, 830, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 998, 998, 0, 0,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 0, 0, 0, 1301, 0, 0, 0, 0,
	0, 0, 1033, 0, 0, 0, 1035, 0, 0, 0,
	0, 0, 554, 0, 0, 0, 0, 1741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 1475, 1476, 0, 0, 0, 0, 1481, 1033, 1033,
	0, 0, 0, 0, 0, 1345, 0, 1033, 1033, 0,
	585, 0, 1032, 585, 0, 0, 0, 915, 0, 917,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 1507, 1001, 0, 1511,
	1033, 1032, 0, 1545, 1537, 1538, 1539, 1540, 1542, 1543,
	0, 0, 0, 0, 0, 1525, 0, 313, 313, 0,
	0, 0, 1301, 887, 0, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1808, 0, 0,
	918, 1153, 0, 1112, 0, 0, 1315, 1315, 1315, 0,
	1818, 1993, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 313, 0, 0, 1593,
	0, 0, 0, 0, 0, 0, 0, 1851, 0, 0,
	0, 0, 0, 1855, 1856, 1153, 0, 0, 1382, 585,
	1384, 0, 0, 575, 0, 0, 0, 0, 0, 1678,
	593, 1614, 1032, 0, 0, 1889, 2031, 1890, 1034, 313,
	1892, 1893, 0, 0, 1896, 313, 0, 872, 873, 874,
	875, 877, 878, 0, 0, 0, 0, 1001, 1427, 0,
	61, 0, 0, 1035, 0, 0, 1436, 0, 1032, 1032,
	0, 0, 1033, 0, 0, 1642, 0, 1032, 1032, 0,
	1131, 0, 0, 0, 0, 0, 0, 1919, 0, 0,
	0, 0, 1035, 1001, 1001, 0, 0, 1466, 0, 0,
	0, 998, 1001, 1001, 0, 0, 0, 0, 0, 0,
	1032, 1675, 0, 0, 0, 554, 0, 0, 554, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 0, 0, 1705,
	0, 0, 1706, 2098, 0, 0, 0, 0, 0, 61,
	0, 0, 61, 0, 1711, 0, 0, 1678, 0, 593,
	1389, 0, 1678, 1720, 0, 0, 0, 0, 0, 0,
	0, 1724, 0, 0, 1614, 0, 313, 313, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 1851, 0,
	0, 0, 0, 1035, 1748, 1980, 0, 0, 1750, 0,
	0, 0, 1239, 1153, 0, 1985, 0, 0, 1987, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 1678,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1035,
	1035, 1781, 1782, 0, 0, 0, 0, 0, 1035, 1035,
	1788, 1789, 1790, 0, 2019, 1034, 0, 0, 0, 0,
	1033, 0, 1032, 1590, 0, 0, 0, 830, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 839,
	61, 1035, 61, 0, 1034, 0, 0, 1001, 575, 0,
	0, 0, 593, 0, 0, 0, 0, 0, 61, 0,
	1033, 1678, 0, 61, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 2056, 0, 0, 0, 0, 998, 0,
	0, 313, 0, 0, 0, 0, 0, 1851, 0, 0,
	0, 0, 0, 0, 1634, 0, 593, 1851, 0, 0,
	0, 0, 0, 1112, 0, 0, 0, 998, 0, 0,
	0, 0, 0, 0, 0, 1879, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 2086, 2087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1903, 1034, 0, 0, 1906, 1907,
	0, 0, 0, 1909, 2105, 0, 0, 0, 2106, 0,
	1911, 61, 1913, 0, 0, 1033, 0, 0, 0, 0,
	0, 0, 0, 593, 0, 0, 0, 0, 1920, 0,
	0, 1034, 1034, 1035, 1851, 593, 0, 0, 0, 0,
	1034, 1034, 0, 2129, 0, 593, 0, 0, 313, 0,
	1032, 0, 0, 0, 0, 0, 1428, 0, 998, 0,
	0, 1929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1034, 0, 1001, 1678, 0, 0, 2056,
	0, 0, 1851, 0, 0, 61, 0, 0, 61, 0,
	1032, 0, 0, 0, 998, 998, 0, 0, 0, 0,
	0, 0, 0, 998, 998, 0, 0, 0, 0, 0,
	0, 0, 313, 1959, 593, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 998, 0, 0, 1239,
	0, 0, 0, 1345, 1427, 0, 868, 869, 0, 888,
	889, 890, 898, 899, 900, 0, 0, 0, 0, 917,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 871,
	0, 2009, 902, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2023, 2024, 0, 1427,
	0, 0, 1427, 870, 0, 1032, 0, 0, 0, 885,
	868, 869, 0, 888, 889, 890, 898, 899, 900, 0,
	0, 1035, 0, 0, 0, 1034, 891, 2036, 0, 0,
	1001, 0, 0, 871, 917, 0, 902, 0, 1535, 1536,
	0, 1553, 1554, 1555, 0, 1891, 0, 0, 0, 0,
	0, 1897, 0, 0, 1901, 0, 0, 870, 0, 0,
	2059, 1035, 876, 885, 0, 0, 562, 0, 0, 0,
	868, 869, 0, 888, 889, 890, 898, 899, 900, 0,
	0, 895, 903, 0, 0, 0, 891, 2076, 998, 0,
	0, 1550, 0, 871, 0, 0, 902, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 0, 876, 870, 0, 0,
	886, 0, 0, 885, 0, 0, 0, 61, 0, 0,
	0, 61, 0, 0, 0, 895, 903, 839, 0, 0,
	0, 0, 0, 0, 1541, 892, 0, 0, 61, 0,
	0, 0, 0, 901, 61, 0, 0, 0, 0, 1664,
	0, 0, 0, 0, 0, 0, 1035, 0, 893, 0,
	0, 0, 0, 0, 886, 0, 876, 0, 0, 0,
	0, 1556, 1427, 1427, 0, 0, 1427, 1535, 1536, 0,
	1553, 1554, 1555, 887, 0, 895, 903, 0, 0, 892,
	0, 0, 1551, 1034, 0, 0, 0, 0, 0, 896,
	0, 0, 0, 901, 0, 1535, 1536, 0, 1553, 1554,
	1555, 0, 1994, 0, 0, 0, 0, 0, 893, 0,
	2172, 1714, 0, 0, 886, 0, 0, 0, 2182, 2182,
	1550, 0, 0, 1034, 0, 0, 0, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 892,
	0, 0, 0, 896, 0, 0, 998, 0, 1550, 0,
	0, 0, 0, 0, 2182, 1552, 894, 0, 0, 882,
	883, 884, 897, 0, 881, 879, 880, 872, 873, 874,
	875, 877, 878, 1541, 0, 0, 0, 0, 0, 0,
	1932, 0, 2050, 0, 0, 0, 998, 887, 0, 2182,
	0, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 1541, 0, 896, 0, 0, 0, 0, 0, 0,
	894, 0, 1428, 882, 883, 884, 897, 0, 881, 879,
	880, 872, 873, 874, 875, 877, 878, 0, 1034, 0,
	0, 1551, 0, 0, 1577, 0, 0, 0, 1556, 0,
	0, 1547, 1548, 1549, 0, 0, 1546, 1544, 1545, 1537,
	1538, 1539, 1540, 1542, 1543, 0, 0, 1428, 0, 1551,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 882, 883, 884, 897, 36, 881, 879,
	880, 872, 873, 874, 875, 877, 878, 0, 37, 65,
	0, 998, 0, 0, 1576, 0, 0, 0, 0, 0,
	0, 39, 0, 0, 1552, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2133, 67, 0, 0, 0, 0,
	0, 40, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 1552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 48, 0, 0, 0,
	49, 0, 0, 68, 0, 0, 0, 53, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 1345, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	1547, 1548, 1549, 0, 0, 1546, 1544, 1545, 1537, 1538,
	1539, 1540, 1542, 1543, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1547, 1548,
	1549, 0, 0, 1546, 1544, 1545, 1537, 1538, 1539, 1540,
	1542, 1543, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 1428, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	71, 38, 0, 57, 0, 58, 0, 69, 0, 0,
	0, 0, 59, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2041, 0, 0, 72, 0, 0, 0, 0, 61, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 1428, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 100, 101,
	366, 102, 367, 368, 369, 370, 253, 371, 372, 373,
	374, 103, 104, 105, 254, 255, 256, 257, 106, 258,
	259, 375, 107, 260, 261, 108, 109, 376, 377, 262,
	263, 264, 378, 110, 265, 379, 352, 380, 111, 112,
	113, 917, 114, 381, 115, 116, 117, 382, 353, 118,
	119, 383, 384, 385, 386, 387, 388, 120, 121, 314,
	122, 266, 123, 267, 268, 389, 124, 390, 125, 391,
	126, 392, 393, 127, 128, 394, 129, 395, 0, 396,
	269, 130, 131, 132, 270, 271, 397, 398, 399, 133,
	134, 272, 273, 274, 0, 135, 400, 136, 401, 402,
	354, 403, 137, 275, 404, 276, 405, 138, 139, 140,
	141, 277, 278, 356, 406, 145, 407, 142, 408, 355,
	143, 279, 144, 280, 281, 282, 283, 284, 409, 285,
	410, 357, 146, 147, 148, 358, 149, 150, 151, 411,
	153, 152, 412, 286, 359, 154, 360, 413, 155, 414,
	415, 156, 0, 157, 158, 159, 161, 287, 160, 361,
	162, 163, 165, 164, 416, 417, 418, 288, 166, 289,
	167, 168, 419, 169, 420, 421, 170, 422, 423, 171,
	290, 362, 172, 363, 291, 173, 174, 175, 176, 177,
	424, 178, 292, 179, 293, 180, 425, 181, 182, 183,
	184, 185, 294, 186, 187, 426, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 427, 200,
	364, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	428, 212, 296, 211, 213, 214, 429, 215, 204, 205,
	216, 365, 217, 297, 298, 218, 430, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 431, 225, 432, 226,
	227, 228, 229, 230, 231, 232, 433, 301, 302, 303,
	434, 435, 233, 234, 304, 305, 436, 235, 236, 237,
	238, 437, 438, 239, 240, 241, 242, 439, 243, 440,
	306, 244, 245, 246, 307, 308, 441, 442, 247, 443,
	444, 445, 446, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 0, 0, 1845, 0, 0, 0,
	0, 0, 0, 0, 1846, 100, 101, 366, 102, 367,
	368, 369, 370, 253, 371, 372, 373, 374, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 375, 107,
	260, 261, 108, 109, 376, 377, 262, 263, 264, 378,
	110, 265, 379, 352, 380, 111, 112, 113, 0, 114,
	381, 115, 116, 117, 382, 353, 118, 119, 383, 384,
	385, 386, 387, 388, 120, 121, 314, 122, 266, 123,
	267, 268, 389, 124, 390, 125, 391, 126, 392, 393,
	127, 128, 394, 129, 395, 0, 396, 269, 130, 131,
	132, 270, 271, 397, 398, 399, 133, 134, 272, 273,
	274, 0, 135, 400, 136, 401, 402, 354, 403, 137,
	275, 404, 276, 405, 138, 139, 140, 141, 277, 278,
	356, 406, 145, 407, 142, 408, 355, 143, 279, 144,
	280, 281, 282, 283, 284, 409, 285, 410, 357, 146,
	147, 148, 358, 149, 150, 151, 411, 153, 152, 412,
	286, 359, 154, 360, 413, 155, 414, 415, 156, 0,
	157, 158, 159, 161, 287, 160, 361, 162, 163, 165,
	164, 416, 417, 418, 288, 166, 289, 167, 168, 419,
	169, 420, 421, 170, 422, 423, 171, 290, 362, 172,
	363, 291, 173, 174, 175, 176, 177, 424, 178, 292,
	179, 293, 180, 425, 181, 182, 183, 184, 185, 294,
	186, 187, 426, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 427, 200, 364, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 428, 212, 296,
	211, 213, 214, 429, 215, 204, 205, 216, 365, 217,
	297, 298, 218, 430, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 431, 225, 432, 226, 227, 228, 229,
	230, 231, 232, 433, 301, 302, 303, 434, 435, 233,
	234, 304, 305, 436, 235, 236, 237, 238, 437, 438,
	239, 240, 241, 242, 439, 243, 440, 306, 244, 245,
	246, 307, 308, 441, 442, 247, 443, 444, 445, 446,
	248, 249, 250, 251, 252, 0, 0, 0, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2121, 100, 101, 366, 102, 367, 368,
	369, 370, 253, 371, 372, 373, 374, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 375, 107, 260,
	261, 108, 109, 376, 377, 262, 263, 264, 378, 110,
	265, 379, 352, 380, 111, 112, 113, 0, 114, 381,
	115, 116, 117, 382, 353, 118, 119, 383, 384, 385,
	386, 387, 388, 120, 121, 314, 122, 266, 123, 267,
	268, 389, 124, 390, 125, 391, 126, 392, 393, 127,
	128, 394, 129, 395, 0, 396, 269, 130, 131, 132,
	270, 271, 397, 398, 399, 133, 134, 272, 273, 274,
	0, 135, 400, 136, 401, 402, 354, 403, 137, 275,
	404, 276, 405, 138, 139, 140, 141, 277, 278, 356,
	406, 145, 407, 142, 408, 355, 143, 279, 144, 280,
	281, 282, 283, 284, 409, 285, 410, 357, 146, 147,
	148, 358, 149, 150, 151, 411, 153, 152, 412, 286,
	359, 154, 360, 413, 155, 414, 415, 156, 0, 157,
	158, 159, 161, 287, 160, 361, 162, 163, 165, 164,
	416, 417, 418, 288, 166, 289, 167, 168, 419, 169,
	420, 421, 170, 422, 423, 171, 290, 362, 172, 363,
	291, 173, 174, 175, 176, 177, 424, 178, 292, 179,
	293, 180, 425, 181, 182, 183, 184, 185, 294, 186,
	187, 426, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 427, 200, 364, 201, 202, 295,
	203, 0, 207, 208, 209, 210, 428, 212, 296, 211,
	213, 214, 429, 215, 204, 205, 216, 365, 217, 297,
	298, 218, 430, 224, 219, 220, 206, 221, 223, 299,
	222, 300, 431, 225, 432, 226, 227, 228, 229, 230,
	231, 232, 433, 301, 302, 303, 434, 435, 233, 234,
	304, 305, 436, 235, 236, 237, 238, 437, 438, 239,
	240, 241, 242, 439, 243, 440, 306, 244, 245, 246,
	307, 308, 441, 442, 247, 443, 444, 445, 446, 248,
	249, 250, 251, 252, 347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	100, 101, 366, 102, 367, 368, 369, 370, 253, 371,
	372, 373, 374, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 375, 107, 260, 261, 108, 109, 376,
	377, 262, 263, 264, 378, 110, 265, 379, 352, 380,
	111, 112, 113, 0, 114, 381, 115, 116, 117, 382,
	353, 118, 119, 383, 384, 385, 386, 387, 388, 120,
	121, 314, 122, 266, 123, 267, 268, 389, 124, 390,
	125, 391, 126, 392, 393, 127, 128, 394, 129, 395,
	0, 396, 269, 130, 131, 132, 270, 271, 397, 398,
	399, 133, 134, 272, 273, 274, 0, 135, 400, 136,
	401, 402, 354, 403, 137, 275, 404, 276, 405, 138,
	139, 140, 141, 277, 278, 356, 406, 145, 407, 142,
	408, 355, 143, 279, 144, 280, 281, 282, 283, 284,
	409, 285, 410, 357, 146, 147, 148, 358, 149, 150,
	151, 411, 153, 152, 412, 286, 359, 154, 360, 413,
	155, 414, 415, 156, 0, 157, 158, 159, 161, 287,
	160, 361, 162, 163, 165, 164, 416, 417, 418, 288,
	166, 289, 167, 168, 419, 169, 420, 421, 170, 422,
	423, 171, 290, 362, 172, 363, 291, 173, 174, 175,
	176, 177, 424, 178, 292, 179, 293, 180, 425, 181,
	182, 183, 184, 185, 294, 186, 187, 426, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	427, 200, 364, 201, 202, 295, 203, 0, 207, 208,
	209, 210, 428, 212, 296, 211, 213, 214, 429, 215,
	204, 205, 216, 365, 217, 297, 298, 218, 430, 224,
	219, 220, 206, 221, 223, 299, 222, 300, 431, 225,
	432, 226, 227, 228, 229, 230, 231, 232, 433, 301,
	302, 303, 434, 435, 233, 234, 304, 305, 436, 235,
	236, 237, 238, 437, 438, 239, 240, 241, 242, 439,
	243, 440, 306, 244, 245, 246, 307, 308, 441, 442,
	247, 443, 444, 445, 446, 248, 249, 250, 251, 252,
	635, 624, 625, 622, 623, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 651, 617, 0, 0, 0, 103,
	104, 105, 254, 666, 256, 667, 106, 668, 669, 0,
	107, 260, 261, 108, 109, 620, 650, 670, 671, 264,
	0, 110, 662, 0, 643, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 353, 118, 119, 0,
	644, 646, 0, 645, 647, 120, 121, 314, 122, 672,
	123, 673, 674, 840, 124, 0, 125, 0, 126, 0,
	0, 665, 128, 0, 129, 0, 0, 0, 608, 130,
	131, 132, 652, 653, 631, 0, 0, 133, 134, 675,
	676, 677, 0, 135, 0, 136, 0, 0, 354, 0,
	137, 663, 0, 276, 0, 138, 139, 140, 141, 659,
	661, 356, 0, 145, 0, 142, 0, 355, 143, 678,
	144, 679, 680, 681, 682, 683, 0, 642, 0, 357,
	146, 147, 148, 358, 149, 150, 151, 0, 153, 152,
	0, 664, 359, 154, 360, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 361, 162, 163,
	165, 164, 603, 0, 632, 660, 166, 684, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 290, 362,
	172, 363, 654, 173, 174, 175, 176, 177, 0, 178,
	655, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	685, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 364, 201,
	202, 609, 203, 0, 207, 208, 209, 210, 81, 212,
	296, 211, 213, 214, 648, 215, 204, 205, 216, 365,
	217, 686, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 687, 222, 656, 0, 225, 83, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 688, 689, 0, 0,
	233, 234, 657, 658, 630, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 649, 243, 0, 306, 244,
	245, 246, 724, 690, 0, 0, 247, 0, 0, 0,
	79, 248, 249, 250, 251, 252, 604, 80, 0, 0,
	0, 0, 602, 0, 0, 0, 0, 600, 601, 635,
	624, 625, 622, 623, 614, 0, 610, 0, 0, 0,
	0, 613, 0, 0, 0, 100, 101, 1265, 102, 0,
	0, 0, 0, 651, 617, 0, 0, 0, 103, 104,
	105, 254, 666, 256, 667, 106, 668, 669, 0, 107,
	260, 261, 108, 109, 620, 650, 670, 671, 264, 0,
	110, 662, 0, 643, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 353, 118, 119, 0, 644,
	646, 0, 645, 647, 120, 121, 314, 122, 672, 123,
	673, 674, 0, 124, 0, 125, 0, 126, 1266, 0,
	665, 128, 0, 129, 0, 0, 0, 608, 130, 131,
	132, 652, 653, 631, 0, 0, 133, 134, 675, 676,
	677, 0, 135, 0, 136, 0, 0, 354, 0, 137,
	663, 0, 276, 0, 138, 139, 140, 141, 659, 661,
	356, 0, 145, 0, 142, 0, 355, 143, 678, 144,
	679, 680, 681, 682, 683, 0, 642, 0, 357, 146,
	147, 148, 358, 149, 150, 151, 0, 153, 152, 0,
	664, 359, 154, 360, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 361, 162, 163, 165,
	164, 603, 0, 632, 660, 166, 684, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 362, 172,
	363, 654, 173, 174, 175, 176, 177, 0, 178, 655,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 685,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 364, 201, 202,
	609, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 648, 215, 204, 205, 216, 365, 217,
	686, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	687, 222, 656, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 688, 689, 0, 0, 233,
	234, 657, 658, 630, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 649, 243, 0, 306, 244, 245,
	246, 307, 690, 1264, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 604, 0, 0, 0, 0,
	0, 602, 0, 0, 0, 0, 600, 601, 1267, 635,
	624, 625, 622, 623, 614, 610, 1262, 0, 0, 0,
	613, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 651, 617, 0, 0, 0, 103, 104,
	105, 254, 666, 256, 667, 106, 668, 669, 0, 107,
	260, 261, 108, 109, 620, 650, 670, 671, 264, 0,
	110, 662, 0, 643, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 353, 118, 119, 0, 644,
	646, 0, 645, 647, 120, 121, 314, 122, 672, 123,
	673, 674, 0, 124, 0, 125, 0, 126, 0, 0,
	665, 128, 0, 129, 0, 0, 0, 608, 130, 131,
	132, 652, 653, 631, 0, 0, 133, 134, 675, 676,
	677, 0, 135, 0, 136, 0, 0, 354, 0, 137,
	663, 0, 276, 0, 138, 139, 140, 141, 659, 661,
	356, 0, 145, 0, 142, 0, 355, 143, 678, 144,
	679, 680, 681, 682, 683, 0, 642, 0, 357, 146,
	147, 148, 358, 149, 150, 151, 0, 153, 152, 0,
	664, 359, 154, 360, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 361, 162, 163, 165,
	164, 603, 0, 632, 660, 166, 684, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 362, 172,
	363, 654, 173, 174, 175, 176, 177, 0, 178, 655,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 685,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 364, 201, 202,
	609, 203, 0, 207, 208, 209, 210, 81, 212, 296,
	211, 213, 214, 648, 215, 204, 205, 216, 365, 217,
	686, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	687, 222, 656, 0, 225, 83, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 688, 689, 0, 0, 233,
	234, 657, 658, 630, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 649, 243, 0, 306, 244, 245,
	246, 724, 690, 0, 0, 247, 0, 0, 0, 79,
	248, 249, 250, 251, 252, 604, 80, 0, 0, 0,
	0, 602, 0, 0, 0, 0, 600, 601, 635, 624,
	625, 622, 623, 614, 0, 610, 0, 0, 0, 0,
	613, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 651, 617, 0, 0, 0, 103, 104, 105,
	254, 666, 256, 667, 106, 668, 669, 1311, 107, 260,
	261, 108, 109, 620, 650, 670, 671, 264, 0, 110,
	662, 0, 643, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 353, 118, 119, 0, 644, 646,
	0, 645, 647, 120, 121, 314, 122, 672, 123, 673,
	674, 0, 124, 0, 125, 0, 126, 0, 0, 665,
	128, 0, 129, 0, 0, 0, 608, 130, 131, 132,
	652, 653, 631, 0, 0, 133, 134, 675, 676, 677,
	0, 135, 0, 136, 0, 1316, 354, 0, 137, 663,
	0, 276, 0, 138, 139, 140, 141, 659, 661, 356,
	0, 145, 0, 142, 0, 355, 143, 678, 144, 679,
	680, 681, 682, 683, 0, 642, 0, 357, 146, 147,
	148, 358, 149, 150, 151, 0, 153, 152, 1312, 664,
	359, 154, 360, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 361, 162, 163, 165, 164,
	603, 0, 632, 660, 166, 684, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 362, 172, 363,
	654, 173, 174, 175, 176, 177, 0, 178, 655, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 685, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 364, 201, 202, 609,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 648, 215, 204, 205, 216, 365, 217, 686,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 687,
	222, 656, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 688, 689, 0, 1313, 233, 234,
	657, 658, 630, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 649, 243, 0, 306, 244, 245, 246,
	307, 690, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 604, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 0, 600, 601, 635, 624, 625,
	622, 623, 614, 0, 610, 0, 0, 0, 0, 613,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 651, 617, 0, 0, 0, 103, 104, 105, 254,
	666, 256, 667, 106, 668, 669, 0, 107, 260, 261,
	108, 109, 620, 650, 670, 671, 264, 0, 110, 662,
	0, 643, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 353, 118, 119, 0, 644, 646, 0,
	645, 647, 120, 121, 314, 122, 672, 123, 673, 674,
	0, 124, 0, 125, 0, 126, 0, 0, 665, 128,
	0, 129, 0, 0, 0, 608, 130, 131, 132, 652,
	653, 631, 0, 0, 133, 134, 675, 676, 677, 0,
	135, 0, 136, 0, 0, 354, 0, 137, 663, 0,
	276, 0, 138, 139, 140, 141, 659, 661, 356, 0,
	145, 0, 142, 0, 355, 143, 678, 144, 679, 680,
	681, 682, 683, 0, 642, 0, 357, 146, 147, 148,
	358, 149, 150, 151, 0, 153, 152, 0, 664, 359,
	154, 360, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 361, 162, 163, 165, 164, 603,
	1795, 632, 660, 166, 684, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 362, 172, 363, 654,
	173, 174, 175, 176, 177, 0, 178, 655, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 685, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 364, 201, 202, 609, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 648, 215, 204, 205, 216, 365, 217, 686, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 687, 222,
	656, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 688, 689, 0, 0, 233, 234, 657,
	658, 630, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 649, 243, 0, 306, 244, 245, 246, 307,
	690, 0, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 604, 0, 0, 0, 0, 0, 602,
	0, 0, 0, 0, 600, 601, 831, 635, 624, 625,
	622, 623, 614, 610, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 651, 617, 0, 0, 0, 103, 104, 105, 254,
	666, 256, 667, 106, 668, 669, 0, 107, 260, 261,
	108, 109, 620, 650, 670, 671, 264, 0, 110, 662,
	0, 643, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 353, 118, 119, 0, 644, 646, 0,
	645, 647, 120, 121, 314, 122, 672, 123, 673, 674,
	0, 124, 0, 125, 0, 126, 0, 0, 665, 128,
	0, 129, 0, 0, 0, 608, 130, 131, 132, 652,
	653, 631, 0, 0, 133, 134, 675, 676, 677, 0,
	135, 0, 136, 0, 0, 354, 0, 137, 663, 0,
	276, 0, 138, 139, 140, 141, 659, 661, 356, 0,
	145, 0, 142, 0, 355, 143, 678, 144, 679, 680,
	681, 682, 683, 0, 642, 0, 357, 146, 147, 148,
	358, 149, 150, 151, 0, 153, 152, 0, 664, 359,
	154, 360, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 361, 162, 163, 165, 164, 603,
	0, 632, 660, 166, 684, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 362, 172, 363, 654,
	173, 174, 175, 176, 177, 0, 178, 655, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 685, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 364, 201, 202, 609, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 648, 215, 204, 205, 216, 365, 217, 686, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 687, 222,
	656, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 688, 689, 0, 0, 233, 234, 657,
	658, 630, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 649, 243, 0, 306, 244, 245, 246, 307,
	690, 0, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 604, 0, 0, 0, 0, 0, 602,
	0, 0, 0, 0, 600, 601, 0, 0, 0, 0,
	0, 923, 1257, 610, 0, 0, 0, 0, 613, 635,
	624, 625, 622, 623, 614, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 651, 617, 0, 0, 0, 103, 104,
	105, 254, 666, 256, 667, 106, 668, 669, 0, 107,
	260, 261, 108, 109, 620, 650, 670, 671, 264, 0,
	110, 662, 0, 643, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 353, 118, 119, 0, 644,
	646, 0, 645, 647, 120, 121, 314, 122, 672, 123,
	673, 674, 840, 124, 0, 125, 0, 126, 0, 0,
	665, 128, 0, 129, 0, 0, 0, 608, 130, 131,
	132, 652, 653, 631, 0, 0, 133, 134, 675, 676,
	677, 0, 135, 0, 136, 0, 0, 354, 0, 137,
	663, 0, 276, 0, 138, 139, 140, 141, 659, 661,
	356, 0, 145, 0, 142, 0, 355, 143, 678, 144,
	679, 680, 681, 682, 683, 0, 642, 0, 357, 146,
	147, 148, 358, 149, 150, 151, 0, 153, 152, 0,
	664, 359, 154, 360, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 361, 162, 163, 165,
	164, 603, 0, 632, 660, 166, 684, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 362, 172,
	363, 654, 173, 174, 175, 176, 177, 0, 178, 655,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 685,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 364, 201, 202,
	609, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 648, 215, 204, 205, 216, 365, 217,
	686, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	687, 222, 656, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 688, 689, 0, 0, 233,
	234, 657, 658, 630, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 649, 243, 0, 306, 244, 245,
	246, 307, 690, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 604, 0, 0, 0, 0,
	0, 602, 0, 0, 0, 0, 600, 601, 635, 624,
	625, 622, 623, 614, 0, 610, 0, 0, 0, 0,
	613, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 651, 617, 0, 0, 0, 103, 104, 105,
	254, 666, 256, 667, 106, 668, 669, 0, 107, 260,
	261, 108, 109, 620, 650, 670, 671, 264, 0, 110,
	662, 0, 643, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 353, 118, 119, 0, 644, 646,
	0, 645, 647, 120, 121, 314, 122, 672, 123, 673,
	674, 0, 124, 0, 125, 0, 126, 0, 0, 665,
	128, 0, 129, 0, 0, 0, 608, 130, 131, 132,
	652, 653, 631, 0, 0, 133, 134, 675, 676, 677,
	0, 135, 0, 136, 0, 0, 354, 0, 137, 663,
	0, 276, 0, 138, 139, 140, 141, 659, 661, 356,
	0, 145, 0, 142, 0, 355, 143, 678, 144, 679,
	680, 681, 682, 683, 0, 642, 0, 357, 146, 147,
	148, 358, 149, 150, 151, 0, 153, 152, 0, 664,
	359, 154, 360, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 361, 162, 163, 165, 164,
	603, 0, 632, 660, 166, 684, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 362, 172, 363,
	654, 173, 174, 175, 176, 177, 0, 178, 655, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 685, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 364, 201, 202, 609,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 648, 215, 204, 205, 216, 365, 217, 686,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 687,
	222, 656, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 688, 689, 0, 0, 233, 234,
	657, 658, 630, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 649, 243, 0, 306, 244, 245, 246,
	307, 690, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 604, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 0, 600, 601, 635, 624, 625,
	622, 623, 614, 0, 610, 1778, 0, 0, 0, 613,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 651, 617, 0, 0, 0, 103, 104, 105, 254,
	666, 256, 667, 106, 668, 669, 0, 107, 260, 261,
	108, 109, 620, 650, 670, 671, 264, 0, 110, 662,
	0, 643, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 353, 118, 119, 0, 644, 646, 0,
	645, 647, 120, 121, 314, 122, 672, 123, 673, 674,
	0, 124, 0, 125, 0, 126, 0, 0, 665, 128,
	0, 129, 0, 0, 0, 608, 130, 131, 132, 652,
	653, 631, 0, 0, 133, 134, 675, 676, 677, 0,
	135, 0, 136, 0, 0, 354, 0, 137, 663, 0,
	276, 0, 138, 139, 140, 141, 659, 661, 356, 0,
	145, 0, 142, 0, 355, 143, 678, 144, 679, 680,
	681, 682, 683, 0, 642, 0, 357, 146, 147, 148,
	358, 149, 150, 151, 0, 153, 152, 0, 664, 359,
	154, 360, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 361, 162, 163, 165, 164, 603,
	0, 632, 660, 166, 684, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 362, 172, 363, 654,
	173, 174, 175, 176, 177, 0, 178, 655, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 685, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 364, 201, 202, 609, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 648, 215, 204, 205, 216, 365, 217, 686, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 687, 222,
	656, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 688, 689, 0, 0, 233, 234, 657,
	658, 630, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 649, 243, 0, 306, 244, 245, 246, 307,
	690, 1727, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 604, 0, 0, 0, 0, 0, 602,
	0, 0, 0, 0, 600, 601, 635, 624, 625, 622,
	623, 614, 0, 610, 0, 0, 0, 0, 613, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	651, 617, 0, 0, 0, 103, 104, 105, 254, 666,
	256, 667, 106, 668, 669, 0, 107, 260, 261, 108,
	109, 620, 650, 670, 671, 264, 0, 110, 662, 0,
	643, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 353, 118, 119, 0, 644, 646, 0, 645,
	647, 120, 121, 314, 122, 672, 123, 673, 674, 0,
	124, 0, 125, 0, 126, 0, 0, 665, 128, 0,
	129, 0, 0, 0, 608, 130, 131, 132, 652, 653,
	631, 0, 0, 133, 134, 675, 676, 677, 0, 135,
	0, 136, 0, 0, 354, 0, 137, 663, 0, 276,
	0, 138, 139, 140, 141, 659, 661, 356, 0, 145,
	0, 142, 0, 355, 143, 678, 144, 679, 680, 681,
	682, 683, 0, 642, 0, 357, 146, 147, 148, 358,
	149, 150, 151, 0, 153, 152, 0, 664, 359, 154,
	360, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 361, 162, 163, 165, 164, 603, 0,
	632, 660, 166, 684, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 362, 172, 363, 654, 173,
	174, 175, 176, 177, 0, 178, 655, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 685, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 364, 201, 202, 609, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	648, 215, 204, 205, 216, 365, 217, 686, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 687, 222, 656,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 688, 689, 0, 0, 233, 234, 657, 658,
	630, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 649, 243, 0, 306, 244, 245, 246, 307, 690,
	0, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 604, 0, 0, 0, 0, 0, 602, 0,
	0, 0, 0, 600, 601, 635, 624, 625, 622, 623,
	614, 0, 610, 1717, 0, 0, 0, 613, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 651,
	617, 0, 0, 0, 103, 104, 105, 254, 666, 256,
	667, 106, 668, 669, 0, 107, 260, 261, 108, 109,
	620, 650, 670, 671, 264, 0, 110, 662, 0, 643,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 353, 118, 119, 0, 644, 646, 0, 645, 647,
	120, 121, 314, 122, 672, 123, 673, 674, 0, 124,
	0, 125, 0, 126, 0, 0, 665, 128, 0, 129,
	0, 0, 0, 608, 130, 131, 132, 652, 653, 631,
	0, 0, 133, 134, 675, 676, 677, 0, 135, 0,
	136, 0, 1316, 354, 0, 137, 663, 0, 276, 0,
	138, 139, 140, 141, 659, 661, 356, 0, 145, 0,
	142, 0, 355, 143, 678, 144, 679, 680, 681, 682,
	683, 0, 642, 0, 357, 146, 147, 148, 358, 149,
	150, 151, 0, 153, 152, 0, 664, 359, 154, 360,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 361, 162, 163, 165, 164, 603, 0, 632,
	660, 166, 684, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 362, 172, 363, 654, 173, 174,
	175, 176, 177, 0, 178, 655, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 685, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 364, 201, 202, 609, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 648,
	215, 204, 205, 216, 365, 217, 686, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 687, 222, 656, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 688, 689, 0, 0, 233, 234, 657, 658, 630,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	649, 243, 0, 306, 244, 245, 246, 307, 690, 0,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 604, 0, 0, 0, 0, 0, 602, 0, 0,
	0, 0, 600, 601, 635, 624, 625, 622, 623, 614,
	0, 610, 0, 0, 0, 0, 613, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 651, 617,
	0, 0, 0, 103, 104, 105, 254, 666, 256, 667,
	106, 668, 669, 0, 107, 260, 261, 108, 109, 620,
	650, 670, 671, 264, 0, 110, 662, 0, 643, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	353, 118, 119, 0, 644, 646, 0, 645, 647, 120,
	121, 314, 122, 672, 123, 673, 674, 0, 124, 0,
	125, 0, 126, 0, 0, 665, 128, 0, 129, 0,
	0, 0, 608, 130, 131, 132, 652, 653, 631, 0,
	0, 133, 134, 675, 676, 677, 0, 135, 0, 136,
	0, 0, 354, 0, 137, 663, 0, 276, 0, 138,
	139, 140, 141, 659, 661, 356, 0, 145, 0, 142,
	0, 355, 143, 678, 144, 679, 680, 681, 682, 683,
	0, 642, 0, 357, 146, 147, 148, 358, 149, 150,
	151, 0, 153, 152, 0, 664, 359, 154, 360, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 361, 162, 163, 165, 164, 603, 0, 632, 660,
	166, 684, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 362, 172, 363, 654, 173, 174, 175,
	176, 177, 0, 178, 655, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 685, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 364, 201, 202, 609, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 648, 215,
	204, 205, 216, 365, 217, 686, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 687, 222, 656, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	688, 689, 0, 0, 233, 234, 657, 658, 630, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 649,
	243, 0, 306, 244, 245, 246, 307, 690, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	604, 0, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 600, 601, 831, 635, 624, 625, 622, 623, 614,
	610, 0, 0, 0, 0, 613, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 651, 617,
	0, 0, 0, 103, 104, 105, 254, 666, 256, 667,
	106, 668, 669, 0, 107, 260, 261, 108, 109, 620,
	650, 670, 671, 264, 0, 110, 662, 0, 643, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	353, 118, 119, 0, 644, 646, 0, 645, 647, 120,
	121, 314, 122, 672, 123, 673, 674, 0, 124, 0,
	125, 0, 126, 0, 0, 665, 128, 0, 129, 0,
	0, 0, 608, 130, 131, 132, 652, 653, 631, 0,
	0, 133, 134, 675, 676, 677, 0, 135, 0, 136,
	0, 0, 354, 0, 137, 663, 0, 276, 0, 138,
	139, 140, 141, 659, 661, 356, 0, 145, 0, 142,
	0, 355, 143, 678, 144, 679, 680, 681, 682, 683,
	0, 642, 0, 357, 146, 147, 148, 358, 149, 150,
	151, 0, 153, 152, 0, 664, 359, 154, 360, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 361, 162, 163, 165, 164, 603, 0, 632, 660,
	166, 684, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 362, 172, 363, 654, 173, 174, 175,
	176, 177, 0, 178, 655, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 685, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 364, 201, 202, 609, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 648, 215,
	204, 205, 216, 365, 217, 686, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 687, 222, 656, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	688, 689, 0, 0, 233, 234, 657, 658, 630, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 649,
	243, 0, 306, 244, 245, 246, 307, 690, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	604, 0, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 600, 601, 635, 624, 625, 622, 623, 614, 0,
	610, 1252, 0, 0, 0, 613, 0, 0, 0, 100,
	101, 1120, 102, 0, 0, 0, 0, 651, 617, 0,
	0, 0, 103, 104, 105, 254, 666, 256, 667, 106,
	668, 669, 0, 107, 260, 261, 108, 109, 620, 650,
	670, 671, 264, 0, 110, 662, 0, 643, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 353,
	118, 119, 0, 644, 646, 0, 645, 647, 120, 121,
	314, 122, 672, 123, 673, 674, 0, 124, 0, 125,
	0, 126, 0, 0, 665, 128, 0, 129, 0, 0,
	0, 608, 130, 131, 132, 652, 653, 631, 0, 0,
	133, 134, 675, 676, 677, 0, 135, 0, 136, 0,
	0, 354, 0, 137, 663, 0, 276, 0, 138, 139,
	140, 141, 659, 661, 356, 0, 145, 0, 142, 0,
	355, 143, 678, 144, 679, 680, 681, 682, 683, 0,
	642, 0, 357, 146, 147, 148, 358, 149, 150, 151,
	0, 153, 152, 0, 664, 359, 154, 360, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	361, 162, 163, 165, 164, 603, 0, 632, 660, 166,
	684, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 362, 172, 363, 654, 173, 174, 175, 176,
	177, 0, 178, 655, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 685, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 364, 201, 202, 609, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 648, 215, 204,
	205, 216, 365, 217, 686, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 687, 222, 656, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 688,
	689, 0, 0, 233, 234, 657, 658, 630, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 649, 243,
	0, 306, 244, 245, 246, 307, 690, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 604,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	600, 601, 635, 624, 625, 622, 623, 614, 0, 610,
	0, 0, 0, 0, 613, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 651, 617, 0, 0,
	0, 103, 104, 105, 254, 666, 256, 667, 106, 668,
	669, 0, 107, 260, 261, 108, 109, 620, 650, 670,
	671, 264, 0, 110, 662, 0, 643, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 353, 118,
	2181, 0, 644, 646, 0, 645, 647, 120, 121, 314,
	122, 672, 123, 673, 674, 0, 124, 0, 125, 0,
	126, 0, 0, 665, 128, 0, 129, 0, 0, 0,
	608, 130, 131, 132, 652, 653, 631, 0, 0, 133,
	134, 675, 676, 677, 0, 135, 0, 136, 0, 0,
	354, 0, 137, 663, 0, 276, 0, 138, 139, 140,
	141, 659, 661, 356, 0, 145, 0, 142, 0, 355,
	143, 678, 144, 679, 680, 681, 682, 683, 0, 642,
	0, 357, 146, 147, 148, 358, 149, 150, 151, 0,
	153, 152, 0, 664, 359, 154, 360, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 361,
	162, 163, 165, 164, 603, 0, 632, 660, 166, 684,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 362, 172, 363, 654, 173, 174, 175, 176, 177,
	0, 178, 655, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 685, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	364, 201, 202, 609, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 648, 215, 204, 205,
	216, 365, 217, 686, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 687, 222, 656, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 688, 689,
	0, 0, 233, 234, 657, 658, 630, 235, 236, 2180,
	238, 0, 0, 239, 240, 241, 242, 649, 243, 0,
	306, 244, 245, 246, 307, 690, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 604, 0,
	0, 0, 0, 0, 602, 0, 0, 0, 0, 600,
	601, 635, 624, 625, 622, 623, 614, 0, 610, 0,
	0, 0, 0, 613, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 651, 617, 0, 0, 0,
	103, 104, 105, 2179, 666, 256, 667, 106, 668, 669,
	0, 107, 260, 261, 108, 109, 620, 650, 670, 671,
	264, 0, 110, 662, 0, 643, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 353, 118, 2181,
	0, 644, 646, 0, 645, 647, 120, 121, 314, 122,
	672, 123, 673, 674, 0, 124, 0, 125, 0, 126,
	0, 0, 665, 128, 0, 129, 0, 0, 0, 608,
	130, 131, 132, 652, 653, 631, 0, 0, 133, 134,
	675, 676, 677, 0, 135, 0, 136, 0, 0, 354,
	0, 137, 663, 0, 276, 0, 138, 139, 140, 141,
	659, 661, 356, 0, 145, 0, 142, 0, 355, 143,
	678, 144, 679, 680, 681, 682, 683, 0, 642, 0,
	357, 146, 147, 148, 358, 149, 150, 151, 0, 153,
	152, 0, 664, 359, 154, 360, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 361, 162,
	163, 165, 164, 603, 0, 632, 660, 166, 684, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	362, 172, 363, 654, 173, 174, 175, 176, 177, 0,
	178, 655, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 685, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 364,
	201, 202, 609, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 648, 215, 204, 205, 216,
	365, 217, 686, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 687, 222, 656, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 688, 689, 0,
	0, 233, 234, 657, 658, 630, 235, 236, 2180, 238,
	0, 0, 239, 240, 241, 242, 649, 243, 0, 306,
	244, 245, 246, 307, 690, 0, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 604, 0, 0,
	0, 0, 0, 602, 0, 0, 0, 0, 600, 601,
	635, 624, 625, 622, 623, 614, 0, 610, 0, 0,
	0, 0, 613, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 651, 617, 0, 0, 0, 103,
	104, 105, 254, 666, 256, 667, 106, 668, 669, 0,
	107, 260, 261, 108, 109, 620, 650, 670, 671, 264,
	0, 110, 662, 0, 643, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 353, 118, 119, 0,
	644, 646, 0, 645, 647, 120, 121, 314, 122, 672,
	123, 673, 674, 0, 124, 0, 125, 0, 126, 0,
	0, 665, 128, 0, 129, 0, 0, 0, 608, 130,
	131, 132, 652, 653, 631, 0, 0, 133, 134, 675,
	676, 677, 0, 135, 0, 136, 0, 0, 354, 0,
	137, 663, 0, 276, 0, 138, 139, 140, 141, 659,
	661, 356, 0, 145, 0, 142, 0, 355, 143, 678,
	144, 679, 680, 681, 682, 683, 0, 642, 0, 357,
	146, 147, 148, 358, 149, 150, 151, 0, 153, 152,
	0, 664, 359, 154, 360, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 361, 162, 163,
	165, 164, 603, 0, 632, 660, 166, 684, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 290, 362,
	172, 363, 654, 173, 174, 175, 176, 177, 0, 178,
	655, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	685, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 364, 201,
	202, 609, 203, 0, 207, 208, 209, 210, 0, 212,
	296, 211, 213, 214, 648, 215, 204, 205, 216, 365,
	217, 686, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 687, 222, 656, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 688, 689, 0, 0,
	233, 234, 657, 658, 630, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 649, 243, 0, 306, 244,
	245, 246, 307, 690, 0, 0, 247, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 604, 0, 0, 0,
	0, 0, 602, 0, 0, 0, 0, 600, 601, 1288,
	624, 625, 622, 623, 614, 0, 610, 0, 0, 0,
	0, 613, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 651, 617, 0, 0, 0, 103, 104,
	105, 254, 666, 256, 667, 106, 668, 669, 0, 107,
	260, 261, 108, 109, 620, 650, 670, 671, 264, 0,
	110, 662, 0, 643, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 353, 118, 119, 0, 644,
	646, 0, 645, 647, 120, 121, 314, 122, 672, 1291,
	673, 674, 0, 124, 0, 125, 0, 126, 0, 0,
	665, 128, 0, 129, 0, 0, 0, 608, 130, 131,
	132, 652, 653, 631, 0, 0, 133, 134, 675, 676,
	677, 0, 135, 0, 136, 0, 0, 354, 0, 137,
	663, 0, 276, 0, 138, 139, 1292, 141, 659, 661,
	356, 0, 145, 0, 142, 0, 355, 143, 678, 144,
	679, 680, 681, 682, 683, 0, 642, 0, 357, 146,
	147, 148, 358, 149, 150, 151, 0, 153, 152, 0,
	664, 359, 154, 360, 0, 155, 0, 0, 156, 0,
	157, 1293, 1290, 161, 287, 160, 361, 162, 163, 165,
	164, 603, 0, 632, 660, 166, 684, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 362, 172,
	363, 654, 173, 174, 175, 176, 177, 0, 178, 655,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 685,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 364, 201, 202,
	609, 203, 0, 207, 208, 209, 1294, 0, 212, 296,
	211, 213, 214, 648, 215, 204, 205, 216, 365, 217,
	686, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	687, 222, 656, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 688, 689, 0, 0, 233,
	234, 657, 658, 630, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 649, 243, 0, 306, 244, 245,
	246, 307, 690, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 1289, 252, 604, 0, 0, 0, 0,
	0, 602, 0, 0, 0, 0, 600, 601, 635, 624,
	625, 622, 623, 614, 0, 610, 0, 0, 0, 0,
	613, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 651, 617, 0, 0, 0, 103, 104, 105,
	254, 666, 256, 667, 106, 668, 669, 0, 107, 260,
	261, 108, 109, 620, 650, 670, 671, 264, 0, 110,
	662, 0, 643, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 353, 118, 119, 0, 644, 646,
	0, 645, 647, 120, 121, 314, 122, 672, 123, 673,
	674, 0, 124, 0, 125, 0, 126, 0, 0, 665,
	128, 0, 129, 0, 0, 0, 608, 130, 131, 132,
	652, 653, 631, 0, 0, 133, 134, 675, 676, 677,
	0, 135, 0, 136, 0, 0, 354, 0, 137, 663,
	0, 276, 0, 138, 139, 140, 141, 659, 661, 356,
	0, 145, 0, 142, 0, 355, 143, 678, 144, 679,
	680, 681, 682, 683, 0, 642, 0, 357, 146, 147,
	148, 358, 149, 150, 151, 0, 153, 152, 0, 664,
	359, 154, 360, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 361, 162, 163, 165, 164,
	0, 0, 632, 660, 166, 684, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 362, 172, 363,
	654, 173, 174, 175, 176, 177, 0, 178, 655, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 685, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 364, 201, 202, 1306,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 648, 215, 204, 205, 216, 365, 217, 686,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 687,
	222, 656, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 688, 689, 0, 0, 233, 234,
	657, 658, 630, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 649, 243, 0, 306, 244, 245, 246,
	307, 690, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 1302, 1303, 635, 624, 625,
	622, 623, 614, 0, 1305, 0, 0, 0, 0, 613,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 651, 617, 0, 0, 0, 103, 104, 105, 254,
	666, 256, 667, 106, 668, 669, 0, 107, 260, 261,
	108, 109, 0, 650, 670, 671, 264, 0, 110, 662,
	0, 643, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 353, 118, 119, 0, 644, 646, 0,
	645, 647, 120, 121, 314, 122, 672, 123, 673, 674,
	0, 124, 0, 125, 0, 126, 0, 0, 665, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 652,
	653, 631, 0, 0, 133, 134, 675, 676, 677, 0,
	135, 0, 136, 0, 0, 354, 0, 137, 663, 0,
	276, 0, 138, 139, 140, 141, 659, 661, 356, 0,
	145, 0, 142, 0, 355, 143, 678, 144, 679, 680,
	681, 682, 683, 0, 642, 0, 357, 146, 147, 148,
	358, 149, 150, 151, 0, 153, 152, 0, 664, 359,
	154, 360, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 361, 162, 163, 165, 164, 0,
	0, 632, 660, 166, 684, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 362, 172, 363, 654,
	173, 174, 175, 176, 177, 0, 178, 655, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 685, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 364, 201, 202, 1306, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 648, 215, 204, 205, 216, 365, 217, 686, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 687, 222,
	656, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 688, 689, 0, 0, 233, 234, 657,
	658, 630, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 649, 243, 0, 306, 244, 245, 246, 307,
	690, 0, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 635, 624, 625, 622, 623,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 1305, 102, 0, 0, 0, 613, 651,
	617, 0, 0, 0, 103, 104, 105, 0, 666, 256,
	667, 106, 668, 669, 0, 107, 260, 261, 108, 109,
	620, 650, 670, 671, 264, 0, 110, 662, 0, 643,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 353, 118, 2181, 0, 644, 646, 0, 645, 647,
	120, 121, 314, 122, 672, 123, 673, 674, 0, 124,
	0, 125, 0, 126, 0, 0, 665, 128, 0, 129,
	0, 0, 0, 608, 130, 131, 132, 652, 653, 631,
	0, 0, 133, 134, 675, 676, 677, 0, 135, 0,
	136, 0, 0, 354, 0, 137, 663, 0, 276, 0,
	138, 139, 140, 141, 659, 661, 0, 0, 145, 0,
	142, 0, 355, 143, 678, 144, 679, 680, 681, 682,
	683, 0, 642, 0, 0, 146, 147, 148, 358, 149,
	150, 151, 0, 153, 152, 0, 664, 359, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 361, 162, 163, 165, 164, 603, 0, 632,
	660, 166, 684, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 362, 172, 363, 654, 173, 174,
	175, 176, 177, 0, 178, 655, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 685, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 364, 201, 202, 609, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 648,
	215, 204, 205, 216, 0, 217, 686, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 687, 222, 656, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 688, 689, 0, 0, 233, 234, 657, 658, 630,
	235, 236, 2180, 238, 0, 0, 239, 240, 241, 242,
	649, 243, 0, 306, 244, 245, 246, 307, 690, 0,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 601, 0, 0, 0, 100, 101, 0,
	102, 610, 0, 0, 0, 651, 613, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 650, 262, 263,
	264, 0, 110, 662, 0, 643, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 353, 118, 119,
	0, 644, 646, 0, 645, 647, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 652, 653, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 354,
	0, 137, 663, 0, 276, 0, 138, 139, 140, 141,
	659, 661, 356, 0, 145, 0, 142, 0, 355, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	357, 146, 147, 148, 358, 149, 150, 151, 0, 153,
	152, 0, 664, 359, 154, 360, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 361, 162,
	163, 165, 164, 0, 0, 0, 660, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	362, 172, 363, 654, 173, 174, 175, 176, 177, 0,
	178, 655, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 364,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 648, 215, 204, 205, 216,
	365, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 656, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 657, 658, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 649, 243, 0, 306,
	244, 245, 246, 307, 308, 0, 0, 247, 0, 542,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 1680, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 352, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 353, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 354, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	356, 0, 145, 0, 142, 0, 355, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 357, 146,
	147, 148, 358, 149, 150, 151, 0, 153, 152, 0,
	286, 359, 154, 360, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 361, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 362, 172,
	363, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 364, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 81, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 365, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 83, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 724, 308, 0, 0, 247, 0, 0, 0, 79,
	248, 249, 250, 251, 252, 0, 80, 542, 539, 0,
	540, 535, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 78, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 352, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 353, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	1066, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 532, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 354, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 356, 0,
	145, 0, 142, 0, 355, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 357, 146, 147, 148,
	358, 149, 150, 151, 0, 153, 152, 0, 286, 359,
	154, 360, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 361, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 533,
	0, 170, 0, 0, 171, 290, 362, 172, 363, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 364, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 365, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 531, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 0, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 542, 539, 0, 540, 535, 530, 0,
	0, 0, 0, 0, 541, 536, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 352, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 353,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 1063, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 532, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 354, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 356, 0, 145, 0, 142, 0,
	355, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 357, 146, 147, 148, 358, 149, 150, 151,
	0, 153, 152, 0, 286, 359, 154, 360, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	361, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 533, 0, 170, 0, 0,
	171, 290, 362, 172, 363, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 364, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 365, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 531, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 542,
	539, 0, 540, 535, 530, 0, 0, 0, 0, 0,
	541, 536, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 352, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 353, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 758, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 532, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 354, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	356, 0, 145, 0, 142, 0, 355, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 357, 146,
	147, 148, 358, 149, 150, 151, 0, 153, 152, 0,
	286, 359, 154, 360, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 361, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 533, 0, 170, 0, 0, 171, 290, 362, 172,
	363, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 364, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 365, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 531, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 542, 539, 0, 540, 535,
	530, 0, 0, 0, 0, 0, 541, 536, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 352,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 353, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 532,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 354, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 356, 0, 145, 0,
	142, 0, 355, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 357, 146, 147, 148, 358, 149,
	150, 151, 0, 153, 152, 0, 286, 359, 154, 360,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 361, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 533, 0, 170,
	0, 0, 171, 290, 362, 172, 363, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 364, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 365, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 531,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 0,
	97, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 541, 536, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 120, 121, 314, 122, 266,
	123, 267, 268, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 269, 130,
	131, 132, 270, 271, 0, 0, 0, 133, 134, 272,
	273, 274, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 275, 0, 276, 0, 138, 139, 140, 141, 277,
	278, 0, 0, 145, 0, 142, 0, 0, 143, 279,
	144, 280, 281, 282, 283, 284, 0, 285, 0, 0,
	146, 147, 148, 0, 149, 150, 151, 0, 153, 152,
	0, 286, 0, 154, 0, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 0, 162, 163,
	165, 164, 0, 0, 0, 288, 166, 289, 167, 168,
	0, 169, 0, 576, 170, 0, 0, 171, 290, 0,
	172, 0, 291, 173, 174, 175, 176, 177, 0, 178,
	292, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	294, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 0, 201,
	202, 295, 203, 0, 207, 208, 209, 210, 81, 212,
	296, 211, 213, 214, 0, 215, 204, 205, 216, 0,
	217, 297, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 299, 222, 300, 0, 225, 83, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 302, 303, 0, 0,
	233, 234, 304, 305, 0, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 0, 243, 0, 306, 244,
	245, 246, 724, 308, 0, 0, 247, 0, 97, 0,
	79, 248, 249, 250, 251, 252, 0, 80, 0, 0,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 253, 0, 1425, 0, 1430, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 0, 107, 260,
	261, 108, 109, 0, 0, 262, 263, 264, 0, 110,
	265, 0, 0, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 0, 118, 119, 0, 0, 0,
	0, 0, 0, 120, 121, 314, 122, 266, 123, 267,
	268, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 269, 130, 131, 132,
	270, 271, 0, 0, 0, 133, 134, 272, 273, 274,
	0, 135, 0, 136, 0, 0, 0, 0, 137, 275,
	0, 276, 0, 138, 139, 140, 141, 277, 278, 0,
	0, 145, 0, 142, 0, 0, 143, 279, 144, 280,
	281, 282, 283, 284, 0, 285, 0, 0, 146, 147,
	148, 0, 149, 150, 151, 0, 153, 152, 0, 286,
	0, 154, 0, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 0, 162, 163, 165, 164,
	0, 0, 0, 288, 166, 289, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 0, 172, 0,
	291, 173, 174, 175, 176, 177, 0, 178, 292, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 294, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 0, 201, 202, 295,
	203, 0, 207, 208, 209, 210, 81, 212, 296, 211,
	213, 214, 0, 215, 204, 205, 216, 0, 217, 297,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 299,
	222, 300, 0, 225, 83, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 302, 303, 0, 0, 233, 234,
	304, 305, 0, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 0, 243, 0, 306, 244, 245, 246,
	724, 308, 0, 0, 247, 0, 97, 0, 79, 248,
	249, 250, 251, 252, 0, 80, 0, 0, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 78, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	0, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 576,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	0, 0, 247, 0, 97, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 0, 253, 0,
	1425, 0, 1430, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 0, 107, 260, 261, 108, 109, 0,
	0, 262, 263, 264, 0, 110, 265, 0, 0, 0,
	111, 112, 113, 0, 114, 0, 115, 116, 117, 0,
	0, 118, 119, 0, 0, 0, 0, 0, 0, 120,
	121, 314, 122, 266, 123, 267, 268, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 270, 271, 0, 0,
	0, 133, 134, 272, 273, 274, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 275, 0, 276, 0, 138,
	139, 140, 141, 277, 278, 0, 0, 145, 0, 142,
	0, 0, 143, 279, 144, 280, 281, 282, 283, 284,
	0, 285, 0, 0, 146, 147, 148, 0, 149, 150,
	151, 0, 153, 152, 0, 286, 0, 154, 0, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 0, 162, 163, 165, 164, 0, 0, 0, 288,
	166, 289, 167, 168, 0, 169, 0, 0, 170, 0,
	0, 171, 290, 0, 172, 0, 291, 173, 174, 175,
	176, 177, 0, 178, 292, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 294, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 0, 201, 202, 295, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 0, 215,
	204, 205, 216, 0, 217, 297, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 299, 222, 300, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	302, 303, 0, 0, 233, 234, 304, 305, 0, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 0,
	243, 0, 306, 244, 245, 246, 307, 308, 0, 0,
	247, 0, 0, 97, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 966, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 0, 0, 247,
	0, 97, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 1346,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 0, 0, 247, 0, 97,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 1742, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 635, 624, 625, 622, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 0, 102, 836, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 666, 256,
	667, 106, 668, 669, 0, 107, 260, 261, 108, 109,
	0, 0, 670, 671, 264, 0, 110, 265, 0, 352,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 353, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 672, 123, 673, 674, 0, 124,
	0, 125, 0, 126, 0, 0, 665, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 631,
	0, 0, 133, 134, 675, 676, 677, 0, 135, 0,
	136, 0, 0, 354, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 356, 0, 145, 0,
	142, 0, 355, 143, 678, 144, 679, 680, 681, 682,
	683, 0, 642, 0, 357, 146, 147, 148, 358, 149,
	150, 151, 0, 153, 152, 0, 286, 359, 154, 360,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 361, 162, 163, 165, 164, 0, 0, 632,
	288, 166, 684, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 362, 172, 363, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 685, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 364, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 365, 217, 686, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 687, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 688, 689, 0, 0, 233, 234, 304, 305, 630,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 690, 542,
	539, 247, 0, 0, 765, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 352, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 353, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 354, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	356, 0, 145, 0, 142, 0, 355, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 357, 146,
	147, 148, 358, 149, 150, 151, 0, 153, 152, 0,
	286, 359, 154, 360, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 361, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 362, 172,
	363, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 364, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 365, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	93, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 92,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 542, 539, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 96, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 352, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 353, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 354, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 356, 0,
	145, 0, 142, 0, 355, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 357, 146, 147, 148,
	358, 149, 150, 151, 0, 153, 152, 0, 286, 359,
	154, 360, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 361, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 362, 172, 363, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 364, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 365, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 542, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	96, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 352,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 353, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 354, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 356, 0, 145, 0,
	142, 0, 355, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 357, 146, 147, 148, 358, 149,
	150, 151, 0, 153, 152, 0, 286, 359, 154, 360,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 361, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 362, 172, 363, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 364, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 365, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 1156,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	1154, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 1397, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 1159, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 1395, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 1158, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 1396,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 1156, 110, 265, 0, 0, 1151, 111,
	112, 113, 0, 114, 1154, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 1159,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 1150, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 1158, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 1157, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 1850, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 576, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 1081, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 992, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 576, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 732, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 588, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	576, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	581, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 576, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 451, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 450, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 1454, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 1452, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	1441, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 1111, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 467, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 976,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 0, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 807, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	802, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 740, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 481, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	478, 302, 303, 0, 0, 233, 474, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 481, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 478, 302, 303, 0, 0, 233,
	474, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 720, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 718, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	715, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 712, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	175, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 184, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 97,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 710, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 97, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 584, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 307, 308, 97, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 0, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 0, 118, 119, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	0, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 0, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 0, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 0, 0,
	145, 0, 142, 0, 0, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 0, 146, 147, 148,
	0, 149, 150, 151, 0, 153, 152, 0, 286, 0,
	154, 0, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 0, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 0, 172, 0, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 565, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 0, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 0, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 0, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 97, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 472, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 470, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 481, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 473, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 471, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 478, 302, 303, 0,
	0, 233, 474, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	120, 121, 314, 122, 266, 123, 267, 268, 0, 124,
	0, 125, 0, 126, 0, 0, 127, 128, 0, 129,
	0, 0, 0, 269, 130, 131, 132, 270, 271, 0,
	0, 0, 133, 134, 272, 273, 274, 0, 135, 0,
	136, 0, 0, 0, 0, 137, 275, 0, 276, 0,
	138, 139, 140, 141, 277, 278, 0, 0, 145, 0,
	142, 0, 0, 143, 279, 144, 280, 281, 282, 283,
	284, 0, 285, 0, 0, 146, 147, 148, 0, 149,
	150, 151, 0, 153, 152, 0, 286, 0, 154, 0,
	0, 155, 0, 0, 156, 0, 157, 158, 159, 161,
	287, 160, 0, 162, 163, 165, 164, 0, 0, 0,
	288, 166, 289, 167, 168, 0, 169, 0, 0, 170,
	0, 0, 171, 290, 0, 172, 0, 291, 173, 174,
	0, 176, 177, 0, 178, 292, 179, 293, 180, 0,
	181, 182, 183, 0, 185, 294, 186, 187, 0, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 0, 200, 0, 201, 202, 295, 0, 0, 207,
	208, 209, 210, 0, 212, 296, 211, 213, 214, 0,
	215, 204, 205, 216, 0, 217, 297, 298, 218, 0,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 0,
	225, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	301, 302, 303, 0, 0, 233, 234, 304, 305, 0,
	235, 236, 237, 238, 0, 0, 239, 240, 241, 242,
	0, 243, 0, 306, 244, 245, 246, 307, 308, 0,
	0, 247, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 868, 869, 0, 888, 889, 890, 898, 899, 900,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 902, 0, 868,
	869, 0, 888, 889, 890, 898, 899, 900, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 870, 0,
	0, 0, 871, 0, 885, 902, 0, 868, 869, 0,
	888, 889, 890, 898, 899, 900, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 870, 0, 0, 0,
	871, 0, 885, 902, 0, 868, 869, 0, 888, 889,
	890, 898, 899, 900, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 870, 0, 0, 876, 871, 0,
	885, 902, 0, 0, 868, 869, 0, 888, 889, 890,
	898, 899, 900, 0, 0, 0, 895, 903, 0, 0,
	891, 0, 870, 0, 0, 876, 0, 871, 885, 0,
	902, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 903, 0, 0, 0, 893,
	0, 870, 0, 876, 0, 886, 0, 885, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 903, 0, 0, 0, 893, 0, 0,
	892, 876, 0, 886, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 903, 0, 0, 0, 893, 0, 0, 892, 0,
	876, 886, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 895,
	903, 0, 0, 893, 0, 0, 892, 0, 0, 886,
	0, 0, 0, 0, 896, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 887, 0, 0, 0,
	0, 0, 893, 0, 892, 0, 0, 0, 886, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 894, 887, 0, 882, 883, 884, 897, 0, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 896, 0,
	0, 0, 0, 0, 0, 1575, 0, 0, 0, 894,
	0, 887, 882, 883, 884, 897, 0, 881, 879, 880,
	872, 873, 874, 875, 877, 878, 0, 896, 0, 0,
	0, 0, 0, 1527, 0, 0, 0, 894, 0, 0,
	882, 883, 884, 897, 0, 881, 879, 880, 872, 873,
	874, 875, 877, 878, 0, 0, 0, 0, 2101, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 882, 883,
	884, 897, 0, 881, 879, 880, 872, 873, 874, 875,
	877, 878, 0, 0, 0, 0, 2035, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 882, 883, 884,
	897, 0, 881, 879, 880, 872, 873, 874, 875, 877,
	878, 0, 0, 868, 869, 2030, 888, 889, 890, 898,
	899, 900, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 902,
	0, 868, 869, 0, 888, 889, 890, 898, 899, 900,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	870, 0, 0, 0, 871, 0, 885, 902, 0, 868,
	869, 0, 888, 889, 890, 898, 899, 900, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 870, 0,
	0, 0, 871, 0, 885, 902, 0, 868, 869, 0,
	888, 889, 890, 898, 899, 900, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 870, 0, 0, 876,
	871, 0, 885, 902, 0, 0, 868, 869, 0, 888,
	889, 890, 898, 899, 900, 0, 0, 0, 895, 903,
	0, 0, 891, 0, 870, 0, 0, 876, 0, 871,
	885, 0, 902, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 903, 0, 0,
	0, 893, 0, 870, 0, 876, 0, 886, 0, 885,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 903, 0, 0, 0, 893,
	0, 0, 892, 876, 0, 886, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 903, 0, 0, 0, 893, 0, 0,
	892, 0, 876, 886, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 895, 903, 0, 0, 893, 0, 0, 892, 0,
	0, 886, 0, 0, 0, 0, 896, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 0, 0, 893, 0, 892, 0, 0, 0,
	886, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 894, 887, 0, 882, 883, 884, 897,
	0, 881, 879, 880, 872, 873, 874, 875, 877, 878,
	896, 0, 0, 0, 2026, 0, 0, 0, 0, 0,
	0, 894, 0, 887, 882, 883, 884, 897, 0, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 0, 896,
	0, 0, 2003, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 882, 883, 884, 897, 0, 881, 879, 880,
	872, 873, 874, 875, 877, 878, 0, 0, 0, 0,
	1934, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	882, 883, 884, 897, 0, 881, 879, 880, 872, 873,
	874, 875, 877, 878, 0, 0, 0, 0, 1933, 0,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 882,
	883, 884, 897, 0, 881, 879, 880, 872, 873, 874,
	875, 877, 878, 0, 0, 868, 869, 1872, 888, 889,
	890, 898, 899, 900, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 0, 0, 871, 0,
	0, 902, 0, 868, 869, 0, 888, 889, 890, 898,
	899, 900, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 0, 870, 0, 0, 0, 871, 0, 885, 902,
	0, 868, 869, 0, 888, 889, 890, 898, 899, 900,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	870, 0, 0, 0, 871, 0, 885, 902, 0, 868,
	869, 0, 888, 889, 890, 898, 899, 900, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 870, 0,
	0, 876, 871, 0, 885, 902, 0, 0, 868, 869,
	0, 888, 889, 890, 898, 899, 900, 0, 0, 0,
	895, 903, 0, 0, 891, 0, 870, 0, 0, 876,
	0, 871, 885, 0, 902, 0, 0, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 903,
	0, 0, 0, 893, 0, 870, 0, 876, 0, 886,
	0, 885, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 903, 0, 0,
	0, 893, 0, 0, 892, 876, 0, 886, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 903, 0, 0, 0, 893,
	0, 0, 892, 0, 876, 886, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 895, 903, 0, 0, 893, 0, 0,
	892, 0, 0, 886, 0, 0, 0, 0, 896, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 893, 0, 892, 0,
	0, 0, 886, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 887, 0, 882, 883,
	884, 897, 0, 881, 879, 880, 872, 873, 874, 875,
	877, 878, 896, 0, 0, 0, 1825, 0, 0, 0,
	0, 0, 0, 894, 0, 887, 882, 883, 884, 897,
	0, 881, 879, 880, 872, 873, 874, 875, 877, 878,
	0, 896, 0, 0, 1745, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 882, 883, 884, 897, 0, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 0, 0,
	0, 0, 1721, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 882, 883, 884, 897, 0, 881, 879, 880,
	872, 873, 874, 875, 877, 878, 0, 0, 0, 0,
	1253, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 882, 883, 884, 897, 0, 881, 879, 880, 872,
	873, 874, 875, 877, 878, 868, 869, 1497, 888, 889,
	890, 898, 899, 900, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 0, 0, 871, 0,
	0, 902, 0, 868, 869, 0, 888, 889, 890, 898,
	899, 900, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 0, 870, 0, 0, 0, 871, 0, 885, 902,
	0, 868, 869, 0, 888, 889, 890, 898, 899, 900,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	870, 0, 1417, 0, 871, 0, 885, 902, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 876, 2203, 0, 885, 0, 0, 0, 1535, 1536,
	0, 1553, 1554, 1555, 0, 0, 0, 0, 0, 0,
	895, 903, 0, 0, 1713, 0, 0, 0, 0, 876,
	0, 1567, 1418, 0, 1566, 0, 0, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 903,
	0, 0, 0, 893, 0, 0, 0, 876, 0, 886,
	0, 1550, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 903, 0, 0,
	0, 893, 0, 0, 892, 0, 0, 886, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	2202, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 892, 0, 1541, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 1556, 0, 0, 0, 0, 0, 1139, 0, 0,
	887, 0, 0, 868, 869, 0, 888, 889, 890, 898,
	899, 900, 1551, 0, 0, 0, 896, 0, 0, 891,
	0, 0, 0, 1138, 0, 0, 871, 0, 887, 902,
	0, 868, 869, 0, 888, 889, 890, 898, 899, 900,
	0, 0, 0, 0, 896, 0, 0, 891, 0, 0,
	870, 0, 0, 0, 871, 894, 885, 902, 882, 883,
	884, 897, 0, 881, 879, 880, 872, 873, 874, 875,
	877, 878, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 0, 894, 885, 1552, 882, 883, 884, 897,
	0, 881, 879, 880, 872, 873, 874, 875, 877, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 894, 0, 0, 882, 883, 884, 897, 0, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 895, 903,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 903, 0, 0,
	0, 893, 0, 0, 0, 0, 0, 886, 0, 0,
	0, 1547, 1548, 1549, 901, 0, 1546, 1544, 1545, 1537,
	1538, 1539, 1540, 1542, 1543, 0, 0, 0, 0, 893,
	0, 0, 892, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	892, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 868, 869, 0, 888, 889, 890, 898,
	899, 900, 0, 0, 0, 0, 896, 0, 0, 891,
	0, 0, 0, 0, 0, 0, 871, 0, 887, 902,
	0, 868, 869, 0, 888, 889, 890, 898, 899, 900,
	0, 0, 0, 0, 896, 0, 0, 891, 0, 0,
	870, 0, 0, 0, 871, 0, 885, 902, 0, 868,
	869, 0, 888, 889, 890, 898, 899, 900, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 870, 1568,
	0, 0, 871, 894, 885, 902, 882, 883, 884, 897,
	0, 881, 879, 880, 872, 873, 874, 875, 877, 878,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 876,
	0, 894, 885, 0, 882, 883, 884, 897, 0, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 895, 903,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	0, 0, 1573, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 903, 0, 0,
	0, 893, 0, 0, 0, 876, 0, 886, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 903, 0, 0, 0, 893,
	0, 0, 892, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 893, 0, 0,
	892, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	0, 868, 869, 0, 888, 889, 890, 898, 899, 900,
	0, 1725, 0, 0, 896, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 871, 0, 887, 902, 0, 868,
	869, 0, 888, 889, 890, 898, 899, 900, 0, 0,
	0, 0, 896, 0, 0, 891, 0, 0, 870, 1526,
	0, 0, 871, 894, 885, 902, 882, 883, 884, 897,
	0, 881, 879, 880, 872, 873, 874, 875, 877, 878,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 894, 885, 0, 882, 883, 884, 897, 0, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 894,
	0, 0, 882, 883, 884, 897, 0, 881, 879, 880,
	872, 873, 874, 875, 877, 878, 895, 903, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 903, 0, 0, 0, 893,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 893, 0, 0,
	892, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	0, 868, 869, 0, 888, 889, 890, 898, 899, 900,
	0, 0, 0, 0, 896, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 871, 0, 887, 902, 0, 868,
	869, 0, 888, 889, 890, 898, 899, 900, 0, 0,
	0, 0, 896, 0, 0, 891, 0, 0, 870, 0,
	0, 0, 871, 0, 885, 902, 0, 868, 869, 0,
	888, 889, 890, 898, 899, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	871, 894, 885, 902, 882, 883, 884, 897, 0, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 876, 0, 894,
	885, 0, 882, 883, 884, 897, 0, 881, 879, 880,
	872, 873, 874, 875, 877, 878, 895, 903, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 1535, 1536,
	0, 1553, 1554, 1555, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 903, 0, 0, 0, 893,
	0, 0, 0, 876, 0, 886, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 903, 0, 0, 0, 893, 0, 0,
	892, 1550, 0, 886, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 0, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 868, 869, 1541, 888, 889, 890, 898, 899,
	900, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 871, 887, 0, 902, 0,
	868, 869, 0, 0, 0, 0, 898, 899, 900, 0,
	0, 1556, 896, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 871, 887, 885, 902, 0, 0, 0,
	0, 0, 1551, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 894, 0, 885, 882, 883, 884, 897, 0, 881,
	879, 880, 872, 873, 874, 875, 877, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 894,
	0, 0, 882, 883, 884, 897, 0, 881, 879, 880,
	872, 873, 874, 875, 877, 878, 0, 895, 903, 0,
	0, 0, 0, 0, 0, 1552, 876, 894, 0, 0,
	882, 883, 884, 897, 0, 881, 879, 880, 872, 873,
	874, 875, 877, 878, 0, 895, 903, 0, 0, 0,
	893, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 1021,
	1011, 1040, 1003, 1031, 1030, 0, 0, 1005, 1004, 0,
	0, 0, 0, 1042, 1041, 0, 0, 0, 0, 0,
	0, 1547, 1548, 1549, 0, 0, 1546, 1544, 1545, 1537,
	1538, 1539, 1540, 1542, 1543, 0, 0, 0, 0, 887,
	0, 0, 0, 0, 0, 1036, 0, 1028, 1027, 0,
	0, 0, 0, 0, 0, 896, 0, 1026, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 887, 0, 0,
	0, 0, 0, 0, 0, 1025, 1023, 1024, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 1013, 1015, 1016, 1017,
	1018, 1019, 0, 1039, 0, 0, 0, 0, 0, 0,
	0, 0, 894, 0, 0, 882, 883, 884, 897, 0,
	881, 879, 880, 872, 873, 874, 875, 877, 878, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 1029, 0, 0, 897, 1012, 881, 879,
	880, 872, 873, 874, 875, 877, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 0,
	1188, 1186, 1187, 1190, 1189, 0, 0, 0, 0, 1021,
	1011, 1040, 1003, 1031, 1030, 0, 0, 1005, 1004, 0,
	0, 0, 0, 1042, 1041, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1020, 1009, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 483, 0,
	0, 0, 0, 0, 0, 1036, 0, 1028, 1027, 1006,
	0, 0, 1037, 1038, 0, 0, 488, 1026, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 489, 0,
	0, 0, 0, 0, 1010, 1025, 1023, 1024, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 490,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 496,
	497, 0, 0, 508, 0, 1014, 1013, 1015, 1016, 1017,
	1018, 1019, 0, 1039, 0, 486, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 0, 0, 0, 1012, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 494, 495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 0,
	501, 0, 0, 498, 503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1020, 1009, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1006,
	0, 0, 1037, 1038, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1010, 0, 0, 0, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	502, 504, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 505, 0, 0, 0, 510,
	0, 0, 0, 506, 0, 0, 0, 0, 487, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 509,
}
var sqlPact = [...]int{

	3994, -1000, -1, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 713, 17559, 17559, 933,
	21955, -1000, -1000, -1000, -1000, -1000, -1000, 769, 981, 710,
	519, 5320, 21955, 21955, 21641, 1253, 1168, 1158, 1253, 23525,
	-1000, -1000, 27607, -1000, 31294, 457, 465, 457, 457, 571,
	23525, 1124, 625, 14381, 647, 103, -1000, 883, -7, 27293,
	21955, 1474, -3, 19757, 211, 3994, 21327, 26979, 21955, 21013,
	584, -5, 18187, 21955, -1000, 1, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1285,
	11086, 11086, 311, 1, -1000, 1284, 1182, 1177, 19757, -1000,
	-1000, -1000, -1000, -1000, 26665, 26351, 26037, 25723, 25409, -1000,
	13075, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 765, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 258, 257, -1000,
	20699, -1000, 992, -1000, -4, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11086, 11086, 988, -1000, 21955, -1000, -1000,
	25095, 24781, 681, 255, 955, -1000, -1000, 518, 372, -1000,
	-1000, 14055, 21, -1000, -1000, -1000, -1000, 1299, 1494, 17245,
	808, 1282, -1000, 970, 1281, 1280, 1278, 1276, 1272, -1000,
	827, -1000, 604, 474, -1000, 1271, 355, 819, 468, -1000,
	1270, 1268, 955, -1000, 955, -1000, -1000, -1000, 583, 23525,
	-1000, -1000, -1000, -1000, -1000, 19757, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1676, -1000, -1000, -1000,
	-1000, 1695, -1000, -1000, -1000, -1000, 24467, 21955, 21955, 1199,
	24153, -1000, 883, -1000, -1000, -1000, 1130, 1473, 1473, 1473,
	1517, 98, 95, 103, -15, 21955, -1000, 254, -15, 9390,
	9390, -1000, -1000, 211, -1000, 180, 16605, -1000, 7695, -1000,
	839, 1369, 461, 695, 1365, -163, 840, 798, 1364, 17245,
	18187, -5, -31, -1000, -1000, -1000, 4994, 17245, 30611, -1000,
	11086, 11086, 11086, 11086, 11086, 907, 280, -1000, 252, 251,
	6325, -1000, -1000, 1687, -1000, -1000, -1000, 100, -1000, -1000,
	11086, 1, -1000, -1000, -1000, -1000, 249, 1727, -1000, 432,
	-1000, -1000, -1000, 357, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1294, 246, 245, -1000, -1000, -1000, -1000,
	244, 239, 236, 234, 233, 231, 229, 226, 225, 224,
	222, 218, 217, 214, 213, 865, -1000, 402, -1000, -1000,
	402, 402, -1000, 204, 204, 206, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 204, -1000, -1000, -1000, 359, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 212, 30611, 664, 15650,
	1, -1000, -1000, -1000, 19757, 21955, 21955, 698, 23839, -1000,
	1360, 123, 1358, -1000, 122, 1357, -1000, 122, 1349, -31,
	1348, -33, -1000, -1000, 211, 20385, 21955, 1575, 31222, -1000,
	11086, -1000, -1000, 17559, 944, 30611, 30611, 17559, -1000, -1000,
	1572, -1000, 21955, 11086, -6, -1000, -1000, -1000, -1000, 1116,
	1172, 463, 13729, 13403, 1430, 1019, -1000, -1000, -1000, 10,
	5320, 477, 679, -1000, -1000, -1000, 20071, -1000, -1000, 21955,
	1292, 17559, 21955, 21955, 21955, 21955, 21955, -1000, -1000, -1000,
	462, 1291, 21955, -1000, 1094, -1000, -1000, 21955, 21955, 757,
	613, -1000, -6, -1000, 23525, -1000, 139, -1000, -1000, -1000,
	-1000, 210, 1058, 378, 105, 23211, 378, 1055, -1000, 1130,
	-1000, 996, 1175, 10069, 1135, 11086, 103, -1000, -1000, 103,
	103, 11086, -1000, -1000, 21955, -15, 1568, 21955, 86, -1000,
	29863, -1000, 86, -1000, -1000, -1000, 21955, -41, -1000, 30611,
	-1000, -38, 843, -1000, 19129, 1463, 1447, 1452, 19757, 1532,
	-7, 1266, 1530, -7, 1265, 581, 21955, 21955, 580, 576,
	19757, 321, -1000, 21955, -1000, -1000, -17, -1000, 31022, 31222,
	5320, 600, 11086, 11086, 11086, 11086, 11086, 11086, 11086, 11086,
	11086, 11086, 11086, 11086, 11086, 11086, 11086, 11086, 11086, 11086,
	11086, 11086, 11086, 11086, 1090, 11086, 575, 11086, 11086, 11086,
	11086, 1122, 930, 189, 994, -1000, 1630, 1630, 1630, 30667,
	30667, 178, 280, -1000, 11086, -1000, 9730, 95, 29229, -16,
	-1000, -1000, -1000, 7343, 400, 30611, 1, 5985, -1000, 1682,
	702, 1277, 1239, 208, 94, 93, 11086, 11086, 11425, 11425,
	11086, 11764, 11086, 11086, 6664, 11086, 11086, 11086, 11086, 11086,
	11086, -1000, 207, -1000, -1000, -1000, -1000, 1681, -1000, -1000,
	1680, -1000, 598, 592, 1678, -1000, 1263, -49, -1000, -1000,
	390, 102, 1554, 102, 15969, -1000, 21955, 21955, -1000, 21955,
	-1000, -1000, 21955, -1000, 21955, 21955, -1000, 21955, 21955, 477,
	18501, 818, 1344, 749, -7, -51, -1000, 1579, -1000, -1000,
	-1000, -1000, 81, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 206, 865, 204, 204, 204,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 359, -1000, -1000,
	402, 402, 402, -1000, -1000, -53, 30611, 555, -1000, 1262,
	455, -1000, 345, -55, 955, 781, -1000, -1000, -1000, -1000,
	-1000, -1000, -18, -1000, -1000, -18, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1724, 5320, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 21955, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 477, -1000, -1000, -1000, -1000, 21955, 21955, 21955,
	-1000, -1000, 19757, 18815, 1547, 1343, 877, -1000, 1545, 21955,
	961, 1052, -1000, 609, 1342, -1000, -1000, -1000, -1000, 30611,
	-1000, 373, -1000, -1000, 30611, 824, 1185, -1000, 1185, -21,
	-1000, 29651, -1000, 203, -57, 390, 9390, 15332, 5320, -1000,
	390, 92, 7695, -1000, 818, 21955, 21955, 21955, -1000, -1000,
	1051, 22897, 1047, 31222, 21955, -1000, 200, 195, 1147, 1145,
	21955, 21955, 22583, 22269, 21955, 817, -7, -1000, 193, -7,
	-1000, 190, 21955, 789, -1000, 21955, 21955, 787, 1214, 1000,
	-1000, 384, 17245, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 349, 935, 935, 560, 560, 560, 560,
	1620, 2301, 2756, 2235, 30880, 30880, 30880, 191, 301, 301,
	30880, 30880, 30880, 30667, 30639, 173, 11086, 11086, 550, 893,
	189, 173, 11086, 173, 173, 173, 173, -1000, 1123, -1000,
	-1000, -1000, -1000, 1258, 188, 11764, 11764, -1000, -1000, -1000,
	6325, 12103, -1000, -1000, -1000, -1000, 175, 11086, -1000, 29258,
	-197, -59, -1000, -1000, 11086, -94, -151, -1000, -1000, 658,
	-1000, 11086, -1000, -14, 11086, 11086, 11086, 91, 90, -1000,
	539, -1000, 532, 531, 517, -1000, 174, 912, 172, 160,
	11086, -1000, -1000, 30399, 28269, 88, 1256, -145, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 84, 83, 30371, -145, 79,
	2292, -1000, 11764, 11764, 11764, 6325, 159, 78, 29623, -145,
	30159, 9051, 9051, 9051, 77, 30131, 11086, -145, 28241, 3680,
	3620, -61, -63, -67, 1674, -68, 76, 339, 338, 73,
	653, 1254, 21955, 725, 11086, 867, -1000, 15014, 415, 21955,
	725, 67, -1000, -1000, -1000, 317, 21955, -1000, -1000, -1000,
	123, -1000, 122, 122, -31, -1000, -1000, 19757, -1000, -1000,
	31222, 279, 274, -1000, 1672, -1000, 11086, 21955, 21955, 1174,
	-1000, -1000, -1000, 697, -1000, 856, -1000, 14381, -1000, -50,
	-1000, -1000, -1000, -1000, 321, -1000, 62, -69, -32, 31222,
	-1000, -1000, -1000, -1000, -1000, 21955, 276, 21955, -7, 21955,
	-1000, 1722, -7, 21955, 1339, 1391, 314, 21955, 824, -1000,
	11086, 1669, -1000, -1000, -1000, 11086, -1000, -1000, -1000, -7,
	-1000, 1236, -1000, -133, 1320, 307, -174, 72, 325, -1000,
	14696, -1000, 1236, -1000, -1000, -1000, -1000, 515, 513, 1335,
	-1000, 1046, -1000, 419, -1000, 790, 11086, 12757, 158, 157,
	874, -1000, 1328, 1026, 1327, 1026, -1000, -38, 720, -1000,
	11086, -1000, 11086, -1000, 504, -1000, -1000, 500, 384, 1252,
	628, -1000, 931, -1000, 11086, 173, 173, 11086, 11764, 11764,
	-1000, 173, -1000, -1000, -1000, -1000, -1000, 1251, 153, 11086,
	31222, 29708, 3825, -73, -1000, 8712, -46, -1000, 11086, -1000,
	29201, -1000, -1000, 272, 1275, -1000, 11086, 30103, 60, 8373,
	-1000, 29891, -34, -34, -1000, 1713, 1077, 949, 841, 759,
	1667, -1000, 16287, 398, 936, 29173, 31022, 31222, -1000, 11086,
	-1000, -1000, 1250, 11086, -1000, 31022, 31222, 11764, 11764, 11764,
	11764, 11764, 11764, 11764, 11764, 11764, 11764, 11764, 11764, 11764,
	11764, 11764, 11764, 11764, 11764, 11764, 1156, 11764, 1614, 1614,
	1614, -48, 8034, -1000, 1289, 1250, 11086, 11086, 31222, 57,
	56, 55, -1000, 11086, -145, 11086, 11086, 11086, -1000, -1000,
	-1000, 54, -1000, 1658, -1000, -1000, -1000, -1000, -1000, 636,
	-1000, -1000, 7003, 30611, -1000, 725, 1456, -74, -1000, -1000,
	-1000, 390, 15969, 15332, 7695, -75, -1000, -1000, -1000, 818,
	-1000, 497, 1644, 53, 30611, -50, -50, -1000, -1000, -1000,
	-1000, -1000, 21955, -1000, 1204, -1000, 18815, 152, 21955, 151,
	-1000, 148, -1000, -1000, 147, 21955, 1121, 314, 17873, -1000,
	378, 943, 29145, -1000, 51, 1231, 1516, -1000, 15332, 1161,
	1159, 15332, 1198, 924, 924, 924, -1000, 146, 265, 325,
	4328, 11086, 19443, 929, 41, 50, 1320, 1231, 21955, 21955,
	21955, 1324, -1000, 1581, -1000, 28806, -79, -1000, 302, 1483,
	11086, -1000, -1000, 145, 12757, 21955, -1000, 1120, 1166, 442,
	21955, -1000, 21955, -1000, 21955, 21955, 21955, -80, -85, 21955,
	21955, -1000, 17245, 480, 144, 1524, 173, 3648, 331, 11086,
	31222, 30852, -86, 11086, 11086, -1000, -87, -1000, 11086, 264,
	30611, -1000, -1000, -1000, 30611, 11086, 1632, 11086, 49, 48,
	47, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 46,
	-1000, -1000, 27921, 11086, 45, -1000, 44, 42, 30611, 1289,
	30611, -1000, -1000, 469, 469, 608, 608, 608, 608, 1614,
	2643, 1211, 928, 948, 948, 948, 714, 476, 476, 948,
	948, 948, 1246, 1106, 142, 30748, 11086, -92, -1000, -1000,
	-1000, 30611, 30611, 40, -1000, -1000, -1000, -145, 3566, 28777,
	28749, -1000, 37, -1000, -84, -1000, -1000, 194, -7, 725,
	-1000, -101, -1000, 316, -1000, 263, 262, -1000, -1000, -1000,
	1200, -1000, 12757, 141, 21955, 18815, 1540, 12757, 960, 1133,
	314, 17873, -1000, 609, -1000, -1000, -1000, 388, 11086, 11086,
	1320, 15332, 15332, 1001, 1152, 15332, -1000, -1000, -1000, -1000,
	260, 367, 325, 19443, -1000, 1627, 1141, -100, -1000, -1000,
	21955, 135, -1000, 325, 388, -1000, -1000, -1000, 21955, -1000,
	21955, -1000, 5320, 21955, 1247, 1040, -1000, -1000, 1139, 133,
	11764, 21955, -1000, 868, 12757, 1467, 1, 5320, 1467, 28721,
	5985, -102, -104, 1031, -1000, 1029, 11086, -1000, 31222, 1026,
	1026, -1000, 492, 488, 471, 470, -1000, -1000, -115, 16931,
	1703, 11086, 11086, 30852, -108, -1000, 173, 173, -1000, 28693,
	-1000, 30611, -1000, 29891, -1000, -1000, -1000, -1000, 880, -1000,
	28354, -1000, -1000, -1000, -1000, 11764, 1245, 131, 31222, 28325,
	-1000, -1000, 11086, -1000, -1000, -1000, 1399, 21955, 1445, -1000,
	-1000, 128, -1000, -1000, 886, -110, 12757, -114, 36, -7,
	-116, 21955, -1000, 314, 17873, -1000, 1391, -1000, 21955, 30611,
	-145, -1000, 1001, -1000, 125, 11086, 15332, -1000, -174, -1000,
	-122, -1000, 19443, -1000, 192, -194, -1000, 306, -1000, 325,
	117, 21955, 19443, -1000, -1000, 1267, -1000, -1000, 21955, 1043,
	-1000, -1000, 11086, 30748, 116, 1204, 115, -1000, -1000, -1000,
	-1000, -1000, -1000, 1483, -14, -1000, 851, -1000, -1000, 30611,
	1479, -1000, -1000, 21955, 21955, 114, 113, -1000, 112, 1,
	-123, -1000, 305, 173, 173, -1000, -1000, 34, 936, 1506,
	-1000, 3797, 11764, 31222, -128, -1000, 28297, 564, -129, 21955,
	-1000, -1000, 5646, 21955, 868, -135, -1000, 1204, -1000, 868,
	108, 17873, -1000, 1121, -121, -1000, 1538, -1000, 21955, 30611,
	-1000, 325, -1000, 1619, -1000, -1000, 1141, -1000, 4665, 19443,
	21955, -136, -1000, -1000, -1000, 1322, 353, 1082, 21955, -1000,
	21955, 1467, 33, 21955, 424, 5320, -1000, -1000, 11086, 11086,
	11086, 1703, -1000, -1000, 1700, -1000, 803, 11086, 3797, -140,
	-1000, -1000, 689, -1000, 390, -1000, 107, 1204, 868, -1000,
	1204, 12757, -1000, 1133, 21955, 106, -146, 19443, -1000, -1000,
	-1000, 1615, -1000, -154, -1000, 1310, -1000, 945, 887, 30,
	-172, -1000, -1000, 105, -1000, 11086, -1000, -176, -177, -34,
	-1000, -1000, 27, 10747, 10747, -145, -1000, 15969, -1000, 21955,
	-1000, 1204, -1000, -178, -1000, -1000, -1000, -1000, -1000, 124,
	-1000, 21955, -1000, 953, 947, 646, -1000, -1000, -1000, -1000,
	-1000, 1082, 30611, -1000, -1000, 24, -1000, -1000, -1000, 12431,
	1020, 726, 29595, -1000, -160, -187, -1000, 868, -1000, -1000,
	-1000, 1332, -1000, 431, 1018, 1018, 945, 1632, 1588, -1000,
	-1000, -1000, -1000, -1000, -1000, 1013, 1204, -1000, 1598, -1000,
	-1000, 1131, -1000, -1000, 10408, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1946, 1940, 1503, 1659, 1939, 1937, 1935, 1654, 1933,
	1932, 1930, 1929, 1928, 1927, 1647, 1924, 1644, 1612, 1596,
	1923, 95, 92, 1919, 1918, 1917, 1594, 1916, 1913, 1910,
	1907, 1906, 1902, 69, 1901, 1899, 1578, 1572, 1547, 1542,
	1895, 1894, 1499, 1892, 1891, 19, 1890, 82, 1889, 25,
	185, 2348, 180, 1888, 1886, 1884, 24, 114, 57, 1883,
	85, 1882, 1881, 49, 35, 20, 15, 1880, 103, 1876,
	1875, 1394, 27, 1869, 1867, 139, 1857, 21, 29, 1970,
	154, 149, 125, 128, 1856, 1855, 1854, 1853, 44, 1852,
	2, 1850, 1849, 11, 68, 12, 1847, 30, 6, 1842,
	1841, 130, 1838, 62, 105, 1497, 132, 133, 263, 1831,
	64, 5, 59, 1830, 1828, 156, 45, 1827, 36, 83,
	137, 1825, 77, 157, 56, 33, 78, 122, 1824, 1823,
	1820, 102, 1819, 121, 101, 1818, 1817, 86, 1814, 136,
	138, 1813, 1812, 99, 1811, 127, 1810, 1809, 141, 158,
	1806, 147, 1805, 1803, 159, 117, 16, 46, 51, 9,
	1491, 1490, 129, 75, 34, 18, 1802, 1714, 1160, 969,
	31, 108, 66, 42, 109, 48, 72, 145, 28, 1801,
	1800, 134, 1798, 1797, 1795, 1794, 1793, 110, 1791, 1790,
	67, 144, 17, 26, 50, 97, 40, 76, 96, 106,
	150, 115, 1789, 107, 124, 1788, 227, 1787, 1786, 1997,
	151, 1783, 1781, 1780, 1934, 1752, 1616, 73, 1779, 1778,
	1591, 1411, 1776, 1775, 79, 1774, 126, 120, 1773, 140,
	142, 116, 1772, 123, 65, 98, 1771, 113, 47, 0,
	168, 143, 1770, 131, 91, 1766, 1765, 1762, 1761, 32,
	4, 10, 8, 7, 3, 61, 22, 1760, 1758, 135,
	118, 58, 1757, 153, 1756, 1753, 1751, 43, 1749, 23,
	1748, 14, 1747, 1744, 13, 1, 1742, 1741, 152, 1738,
	111, 1737, 1533, 1736, 148, 1735, 1734, 1514, 37, 112,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 58,
	58, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 55, 55, 60, 60,
	60, 62, 62, 59, 59, 54, 54, 5, 5, 237,
	237, 238, 238, 44, 44, 48, 48, 45, 46, 46,
	47, 47, 7, 7, 7, 6, 6, 8, 8, 8,
	8, 8, 8, 15, 16, 16, 16, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 107,
	107, 106, 106, 109, 109, 18, 18, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 205, 205, 204, 20, 179, 179, 23, 132, 132,
	24, 24, 24, 24, 25, 32, 278, 278, 278, 282,
	282, 283, 283, 284, 284, 284, 284, 284, 284, 284,
	280, 280, 30, 30, 30, 30, 43, 35, 35, 35,
	35, 35, 35, 152, 149, 149, 148, 148, 148, 148,
	150, 150, 150, 150, 153, 153, 87, 87, 230, 229,
	229, 235, 235, 235, 85, 85, 85, 85, 85, 86,
	86, 86, 228, 228, 228, 228, 236, 236, 236, 236,
	236, 236, 234, 234, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 19, 279, 279, 281, 281,
	27, 37, 37, 38, 38, 39, 39, 39, 39, 11,
	11, 12, 12, 88, 88, 89, 89, 158, 158, 158,
	158, 90, 90, 61, 61, 61, 157, 247, 247, 248,
	248, 248, 248, 248, 248, 249, 249, 249, 249, 249,
	249, 249, 245, 245, 246, 243, 243, 244, 244, 244,
	244, 285, 285, 156, 156, 93, 93, 252, 252, 252,
	252, 250, 250, 250, 250, 250, 253, 251, 254, 254,
	254, 254, 254, 191, 191, 191, 41, 13, 67, 67,
	14, 10, 10, 136, 136, 97, 97, 196, 196, 196,
	78, 78, 56, 56, 56, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 137, 137, 138, 138,
	28, 31, 34, 40, 40, 40, 40, 40, 287, 287,
	74, 74, 74, 74, 75, 75, 151, 151, 154, 154,
	155, 155, 155, 69, 68, 70, 70, 9, 9, 63,
	63, 64, 64, 65, 65, 66, 66, 288, 288, 26,
	26, 26, 81, 81, 145, 145, 145, 147, 147, 146,
	146, 146, 122, 122, 122, 42, 102, 102, 111, 111,
	112, 112, 202, 113, 113, 33, 33, 51, 51, 49,
	49, 49, 49, 49, 49, 50, 50, 52, 52, 52,
	52, 52, 52, 52, 260, 260, 260, 263, 263, 259,
	261, 261, 262, 262, 286, 286, 123, 123, 123, 92,
	91, 91, 95, 95, 94, 96, 96, 195, 120, 120,
	120, 120, 139, 139, 140, 140, 141, 141, 142, 142,
	142, 143, 143, 144, 144, 119, 119, 175, 175, 53,
	53, 101, 101, 103, 103, 165, 165, 165, 166, 166,
	164, 164, 164, 164, 197, 197, 197, 197, 197, 197,
	197, 276, 276, 276, 277, 277, 194, 194, 198, 198,
	198, 198, 198, 198, 192, 192, 192, 192, 193, 193,
	203, 203, 126, 126, 126, 126, 124, 124, 125, 125,
	199, 199, 199, 199, 121, 121, 200, 200, 200, 159,
	159, 206, 206, 206, 224, 224, 100, 100, 100, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 208, 208, 208, 208,
	210, 210, 210, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 223, 223, 223, 223, 223, 211, 211, 218, 218,
	219, 219, 220, 221, 212, 212, 213, 213, 214, 215,
	222, 222, 222, 222, 226, 226, 216, 216, 216, 216,
	216, 217, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 134, 134, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	169, 169, 169, 169, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 255, 255, 255, 255, 255,
	255, 255, 257, 257, 258, 258, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 264, 264, 265, 265, 267, 267, 268,
	268, 269, 270, 270, 270, 271, 272, 272, 266, 266,
	273, 273, 273, 274, 274, 275, 275, 275, 275, 275,
	181, 181, 181, 182, 182, 183, 189, 189, 189, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 76, 76, 76, 76, 76,
	108, 108, 178, 178, 176, 176, 176, 180, 180, 127,
	127, 225, 225, 225, 225, 225, 225, 225, 128, 128,
	128, 135, 129, 129, 130, 130, 130, 130, 130, 130,
	172, 173, 131, 131, 131, 174, 174, 184, 188, 188,
	187, 186, 186, 185, 185, 162, 162, 163, 163, 161,
	160, 116, 116, 115, 115, 114, 114, 289, 289, 190,
	190, 117, 117, 118, 110, 110, 201, 201, 201, 201,
	104, 104, 83, 83, 105, 105, 79, 79, 82, 82,
	80, 80, 80, 80, 98, 98, 99, 99, 77, 77,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 227, 227, 227, 177, 71, 71, 71, 72, 72,
	73, 73, 232, 232, 232, 233, 233, 233, 233, 231,
	231, 231, 231, 231, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 3, 3, 1, 1, 1,
	1, 1, 1, 6, 2, 2, 2, 2, 2, 3,
	5, 4, 6, 4, 6, 4, 6, 3, 5, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 3, 6,
	3, 4, 1, 5, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 1, 2, 2, 1, 0, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	3, 4, 4, 4, 4, 2, 4, 4, 4, 4,
	4, 4, 2, 3, 3, 2, 3, 4, 4, 5,
	2, 3, 3, 4, 2, 3, 4, 3, 3, 4,
	4, 2, 5, 5, 6, 2, 2, 0, 2, 0,
	3, 6, 6, 5, 5, 4, 12, 4, 12, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 5, 2, 0,
	6, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 3, 2, 3, 3, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 6, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 3, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 7, 4, 6, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -20, -23, -24, -25, -26, -27,
	-29, -31, -32, -34, -33, -35, -36, -37, -38, -39,
	-40, -28, -30, -41, -42, -43, 23, 34, 237, 47,
	67, -9, -10, -11, -12, -13, -14, -262, 92, 96,
	105, 129, 217, 103, 88, 123, 211, 239, 241, 248,
	-49, -51, 259, -152, 262, 35, 271, 61, 99, 243,
	235, 236, 299, 308, 69, -260, -52, -50, 350, 324,
	331, 252, -53, 280, 316, 353, 280, 138, 81, 319,
	-278, -105, 280, 81, -80, -71, 343, 4, -239, -241,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 48,
	55, 60, 61, 62, 64, 66, 67, 68, 71, 72,
	79, 80, 82, 84, 88, 90, 92, 95, 96, 98,
	103, 104, 105, 111, 112, 117, 119, 124, 129, 130,
	131, 132, 139, 142, 144, 137, 154, 155, 156, 158,
	159, 160, 163, 162, 167, 170, 173, 175, 176, 177,
	180, 178, 182, 183, 185, 184, 190, 192, 193, 195,
	198, 201, 204, 207, 208, 209, 210, 211, 213, 215,
	217, 219, 220, 221, 222, 223, 225, 226, 228, 229,
	230, 231, 232, 235, 233, 234, 236, 237, 238, 239,
	241, 243, 244, 246, 260, 261, 272, 248, 249, 250,
	251, 255, 253, 256, 257, 259, 262, 264, 267, 270,
	271, 273, 276, 274, 269, 279, 281, 282, 283, 284,
	285, 286, 287, 294, 295, 299, 300, 301, 302, 305,
	306, 307, 308, 310, 313, 314, 315, 320, 325, 326,
	327, 328, 329, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 83, 85, 86, 102,
	106, 107, 113, 114, 115, 125, 127, 133, 134, 143,
	145, 146, 147, 148, 149, 151, 165, 179, 189, 191,
	202, 206, 214, 216, 224, 245, 254, 265, 266, 275,
	277, 289, 290, 291, 296, 297, 312, 316, 317, -278,
	155, 221, -79, -71, 81, 90, 142, 307, 306, 22,
	213, 253, 282, 284, 81, 138, 280, 319, 309, -22,
	350, -21, -8, -17, -4, -36, -19, -37, -38, -39,
	-18, -33, -26, -42, -15, 23, -231, 4, -239, -241,
	-240, -242, 58, 70, 122, 141, 135, 153, 157, 166,
	168, 181, 203, 205, 242, 263, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 65, 69, 73, 74, 75, 76, 77, 78, 87,
	89, 91, 93, 94, 97, 99, 101, 108, 109, 110,
	118, 120, 121, 123, 126, 128, 136, 138, 140, 150,
	152, 161, 164, 169, 171, 172, 186, 187, 188, 194,
	196, 197, 199, 200, 212, 218, 227, 240, 252, 258,
	268, 278, 280, 288, 292, 293, 298, 303, 304, 309,
	311, 318, 319, 321, 322, 323, 324, -71, -71, -71,
	217, 22, -282, 22, -283, -284, 69, 96, 123, 252,
	142, 90, 306, 155, 155, -282, -75, 248, -71, -149,
	170, 256, 55, 245, 295, -150, -148, -230, 289, -153,
	-106, 180, -71, 4, 180, 258, 81, 294, 22, 34,
	55, 60, 82, 124, 138, 139, 65, 66, 159, 220,
	170, 156, 256, 160, 257, 281, 289, 295, 69, 310,
	285, 104, -287, 295, 295, -287, -287, -74, 295, 292,
	-75, 4, 81, 258, 180, -286, 280, -235, -228, -191,
	9, 298, 108, 196, -234, 8, 342, -227, -233, 5,
	7, 341, 4, -239, -241, -240, 280, 309, 319, -136,
	81, 304, -50, -52, -51, -94, -95, 303, 150, 101,
	200, -49, -51, -260, -263, 225, -259, -71, -263, -91,
	-92, 22, 93, 354, -199, -79, 197, -118, 350, -3,
	-199, 133, -79, -82, 133, -79, -71, -199, 133, 292,
	354, -105, -98, -71, -161, -160, 352, 121, -167, -169,
	341, 342, 336, 186, 330, -181, -171, -184, 102, 245,
	350, -79, -170, 355, 9, -257, -51, 29, -182, -183,
	49, -71, 7, 8, 5, 6, -77, -208, -177, -217,
	298, 108, 188, -255, -256, 4, -239, -232, -209, -219,
	-213, -216, 151, 58, 74, 77, 75, 78, 258, 309,
	50, 28, 106, 107, 206, 214, 277, 296, 297, 133,
	189, 134, 56, 125, 165, 95, 37, 39, 41, 42,
	51, 52, 83, 85, 86, 113, 114, 115, 143, 145,
	146, 147, 148, 149, 191, 224, 265, 275, 290, 291,
	317, -240, -220, -221, -214, -215, -222, -167, 121, 350,
	-115, -116, -160, -161, 121, 152, 152, -200, -199, -71,
	133, -83, 133, -82, -107, 133, -106, -107, 133, -98,
	133, -205, -204, -233, 316, 280, 138, -179, 350, -132,
	350, -71, 22, 196, 354, -167, -167, 196, -71, -149,
	53, -149, 260, 350, -154, -155, -68, -69, -70, 154,
	219, 223, 292, 335, 121, 329, -235, -87, 87, -109,
	352, 118, 55, -237, -234, 9, 260, 220, 257, 121,
	-279, 196, 121, 121, 121, 121, 121, 220, 257, 294,
	160, 294, 121, 329, 154, 219, 272, 280, 319, 121,
	121, -151, -154, -151, 292, -75, -121, -199, 8, 7,
	7, -106, 133, -71, -106, 138, -71, 133, -94, -95,
	-120, -139, -140, 169, 110, 194, -123, 22, 93, -123,
	-123, 44, 351, 351, 354, -263, -99, 350, -110, -201,
	-167, 343, -110, -118, 343, -79, 350, -117, -190, -167,
	87, -58, 233, -57, 21, 23, 96, 314, 102, 269,
	286, 249, 269, 286, 249, 233, 102, 355, 233, 233,
	102, -237, -80, 354, -231, 343, -238, -237, 10, 11,
	57, 33, 341, 342, 343, 344, 116, 345, 346, 339,
	340, 338, 333, 334, 335, 63, 174, 247, 13, 14,
	15, 26, 199, 168, 330, 135, 263, 336, 16, 17,
	18, 153, 36, 136, -76, -84, -167, -167, -167, -167,
	-167, 205, -114, -162, 348, -51, 350, -51, -167, -108,
	7, -51, -176, 348, -185, -167, -115, 350, 5, 350,
	5, -264, 325, 118, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 216, -226, 320, -226, -226, -210, 350, -210, -211,
	350, -210, 326, 331, 350, 273, 351, -104, -79, -116,
	-200, -81, -79, -81, 259, -71, 30, 102, -60, 354,
	48, 238, 102, -60, 354, 102, -60, 102, 102, 351,
	354, -199, 133, -82, 30, -178, -206, -207, -209, -218,
	-212, -216, -217, 40, 46, 45, 287, 179, 254, 266,
	312, 38, 195, 144, 143, 145, 146, 147, 148, 149,
	265, 37, 224, 114, 115, 113, 95, 86, 85, 191,
	42, 41, -220, -221, -214, -215, 83, 290, 291, 151,
	39, 52, 51, 317, 275, -108, -167, -278, -284, -278,
	30, -148, -230, -108, 354, 167, -86, 173, 185, 130,
	197, 327, -229, 87, -235, -229, 87, 72, -236, 5,
	4, -177, -191, 87, 170, -217, 352, -231, -22, 261,
	-106, 22, -230, -281, 118, -278, -230, -230, -230, -230,
	-230, 294, 118, -71, 167, -230, -230, 280, 138, 280,
	-75, -60, 354, 350, -93, 186, -261, 324, -93, 350,
	-72, 133, -71, -261, 186, -120, -140, -139, -141, -167,
	22, -144, 112, 182, -167, -169, -50, -50, -50, -96,
	-195, -167, -259, 30, -98, -101, 354, 121, 30, 4,
	-101, -79, 354, 351, 354, 292, -137, 65, 59, -157,
	133, 59, -243, -71, 65, -244, 54, 304, 218, 120,
	-137, 65, -137, 65, 65, -199, 33, -33, 121, 33,
	-33, 121, 292, -82, -71, 292, 292, -199, -203, 332,
	-71, -203, 354, -224, -206, -223, 229, 230, 228, 232,
	231, -206, -231, 289, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, -167, 168, 135, 263, 36,
	136, -167, 292, -167, -167, -167, -167, 178, 186, 188,
	298, 108, 305, 93, 192, -289, 278, 32, -174, -51,
	350, -189, 27, 268, 22, -181, 245, 350, -162, -167,
	-163, -108, 351, 351, 354, -108, -180, 349, -176, -188,
	-187, 321, 351, -108, 318, 22, 93, 343, 7, -133,
	328, 177, 84, 131, 176, -134, 251, -265, 111, 126,
	350, 351, 351, -167, -167, -127, -225, -108, 4, 328,
	177, 84, 131, 176, 251, -127, -128, -167, -108, -129,
	-168, -169, 341, 342, 336, 350, 245, -130, -167, -108,
	-167, 43, 164, 293, -131, -167, 121, -108, -167, -167,
	-167, -108, -108, -108, 350, 7, 7, 289, 289, 7,
	121, 351, 354, -159, 322, -145, -33, 350, 87, 30,
	-145, -111, -112, -202, -113, -79, 350, -71, -71, -82,
	-83, -106, -107, -107, -98, -22, -204, 102, -21, 351,
	354, -100, 29, -133, 350, 351, 354, 292, 121, 295,
	351, -155, -85, 223, 267, 234, 255, 354, -231, -280,
	-71, -22, -79, -82, -79, -199, -88, -98, -89, -71,
	-158, -157, -245, -246, -243, 138, 304, 109, 30, 102,
	-67, 210, 30, 196, 186, -63, 283, 102, -142, -227,
	350, 342, -143, 245, 246, 354, -56, 31, 91, 350,
	351, -159, -201, -103, -197, 348, -199, -79, -51, -198,
	350, -231, -159, 351, -190, -57, -79, -71, -71, 186,
	-157, 133, -62, 186, -206, -71, 350, 350, 158, 158,
	-71, -71, 133, -71, 133, -71, -71, -58, 233, -33,
	350, -33, 350, -71, 233, -71, -79, 233, -44, 132,
	192, -47, 324, -237, 329, -167, -167, 292, -289, 278,
	-174, -167, 178, 188, 298, 108, 305, 93, 192, 121,
	350, -168, -168, -108, -171, 350, -108, 349, 358, 351,
	-167, 349, 349, 354, -186, -187, 97, -167, -95, 354,
	-94, -167, -108, -108, 351, 351, 292, 292, 292, 292,
	350, -270, 204, 350, 350, -167, 30, 354, 351, 121,
	351, 351, -135, 212, 351, 10, 11, 341, 342, 343,
	344, 116, 345, 346, 339, 340, 338, 333, 334, 335,
	63, 174, 247, 13, 14, 15, 153, 136, -168, -168,
	-168, -108, 350, 351, -172, -173, 121, 118, 30, -131,
	-131, -131, 351, 121, -108, 354, 354, 354, 351, 351,
	351, 7, 351, 354, 351, 329, 329, 351, 273, 121,
	-79, -122, 240, -167, -122, -147, 196, -104, 316, -71,
	-122, -102, 354, 121, 335, -104, -60, -60, -60, -199,
	-206, 348, 348, 7, -167, -280, -280, -68, 302, 62,
	223, -235, 354, -203, 351, 351, 354, -72, 138, -72,
	-33, -106, 5, -33, -79, 102, -64, 98, -288, 335,
	-71, -143, -167, -195, -21, -119, 126, -203, 354, 70,
	-126, 157, 181, 122, 166, 242, 141, 7, -22, -164,
	355, 350, -194, 331, -51, -198, -197, -119, 292, 292,
	102, 186, 313, -247, -244, -167, -97, -196, -71, -258,
	350, -255, -256, -77, 350, 350, -55, 96, 259, -138,
	102, -60, 102, -60, 292, -137, 65, -108, -108, 292,
	292, -47, 121, 279, 198, -167, -167, -168, -168, 121,
	350, -167, -178, 26, 26, 351, -108, 351, 354, -163,
	-167, 351, -176, 99, -167, 288, 351, 318, -95, -95,
	-95, 5, 177, 131, 176, -134, 176, -134, -134, 7,
	-271, -71, 350, 322, -94, 351, -224, -206, -167, -172,
	-167, -224, -206, -168, -168, -168, -168, -168, -168, -168,
	-168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
	-168, -168, 93, 186, 192, -168, 354, -108, 351, -173,
	-172, -167, -167, -206, 351, 351, 351, -108, -167, -167,
	-167, 351, 7, 273, -110, 187, -122, 64, 351, -159,
	-112, -103, -190, 351, 349, 7, 7, 351, -71, -90,
	137, -158, 350, -72, 350, 350, -93, 350, -71, -65,
	163, -288, -234, -261, 197, 351, 351, -175, 128, 44,
	-197, 157, 157, -197, -126, 157, -124, 203, -124, -124,
	-276, 350, 349, -194, -231, 348, 356, -108, -193, -192,
	30, -71, 201, 351, -175, -71, -71, -157, 102, -248,
	65, -249, 57, 109, 69, 186, 188, 304, 218, 54,
	87, 227, 351, 351, 354, -78, -115, 57, -78, -167,
	350, -97, -98, 186, 87, 186, 87, 80, 300, -71,
	-71, -79, -71, -71, 351, 351, -71, -79, -238, 289,
	350, 26, 26, -167, -178, 351, -167, -167, 351, -167,
	349, -167, 5, -167, 351, 351, 351, 351, -272, -71,
	-167, 351, 351, 351, -173, 121, 93, 192, 350, -167,
	351, 351, 354, 351, 351, 351, -146, 350, 196, -33,
	-122, 335, 349, 349, 136, -97, 350, -98, -88, 30,
	-97, 196, -66, 162, -288, -234, -63, -267, 323, -167,
	-108, -197, -197, -125, 311, 196, 157, -197, 349, 351,
	-277, 7, -194, -193, 7, -166, -165, 119, 184, 351,
	-71, 350, -194, -267, -157, -71, -231, -71, 109, 133,
	188, 158, 350, -168, -79, -156, -285, 68, 276, -196,
	-56, -231, -56, 351, -108, 351, 351, 188, 188, -167,
	-206, -60, -60, 292, 292, 292, 292, -170, -77, -71,
	-46, -45, 5, -167, -167, 351, 351, -95, -266, 209,
	351, -168, 121, 350, -178, 351, -167, 94, -98, 65,
	-118, -51, 350, 207, 351, -97, 351, 351, -33, 351,
	-79, -288, -234, -64, -268, -269, -71, -125, 350, -167,
	-197, -164, 351, 354, -193, 349, 354, 357, 335, -194,
	350, -98, -192, -249, -72, 186, -167, -73, 350, -90,
	350, -78, -95, 227, -59, 57, -71, -71, 350, 350,
	350, 354, 351, -48, 335, 351, -95, 44, -168, -178,
	351, 351, 306, 187, 351, -71, -71, -156, 351, -90,
	-156, 350, -234, -65, 354, 30, -98, -194, 7, -165,
	-231, 348, -193, -98, 351, 102, 351, -252, 175, -71,
	-98, -56, 351, -79, -54, 311, -231, -108, -108, -108,
	-45, 5, -273, 222, 246, -108, 351, 259, -159, 350,
	-90, -156, -90, -97, -66, -269, -271, 351, -192, 7,
	351, 109, -250, -253, -251, 196, 122, 208, 264, 351,
	351, -93, -167, 351, 351, -95, 351, -274, -275, 36,
	301, 72, -167, -274, -111, -98, -90, 351, 349, -71,
	-251, 196, -253, 196, 306, 90, -252, 351, -275, 215,
	117, 245, 215, 117, -159, 351, -156, -254, 183, 238,
	48, 259, -254, -250, 26, -61, 48, 238, -90, 20,
	188, 87, -275,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 0, 0, 0, 0,
	0, 87, 88, 89, 90, 91, 92, 0, 0, 0,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	435, -2, 0, 172, 0, 379, 0, 379, 379, 383,
	0, 0, 465, 0, 344, 462, -2, 473, 0, 0,
	0, 471, 449, 0, 0, -2, 0, 0, 0, 0,
	0, 146, 0, 1006, 934, 940, 941, 965, 966, 967,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 0,
	0, 0, 0, 936, 1006, 0, 0, 0, 0, 94,
	95, 96, 97, 98, 0, 0, 0, 0, 0, 115,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 117, 118, 119, 120, 0, 255, 979, 980, 981,
	982, 983, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 136, 139, 140,
	1065, 142, 0, 149, 150, 151, 153, 154, 155, 156,
	157, 158, 159, 0, 0, 0, 372, 1092, 385, 167,
	1040, 1098, 994, 1180, 1119, 175, 180, 0, 1186, 183,
	188, -2, 111, 214, 215, 216, 217, 218, 219, 0,
	0, 0, 225, 257, 0, 0, 0, 0, 0, 232,
	0, 235, 0, 0, 240, 244, 0, 0, 0, 251,
	0, 0, 387, 378, 387, 375, 376, 377, 380, 0,
	370, 162, 163, 164, 165, 0, 464, 166, 191, 192,
	193, 202, 203, 204, 205, 333, 0, 335, 212, 213,
	961, 0, 975, 976, 977, 978, 0, 0, 0, 0,
	0, 343, -2, 445, 446, -2, 0, 468, 468, 468,
	0, 0, 446, 0, 454, 1071, 457, 947, 455, 0,
	0, 470, 469, 0, 450, 550, 0, 499, 0, 2,
	0, 1162, 550, 0, 1162, 939, 0, 0, 1162, 0,
	0, 147, 148, 944, 942, 943, 0, 0, 85, 658,
	0, 0, 0, 0, 0, 0, 750, 752, 1154, 1180,
	0, 754, 755, 0, 757, 759, 760, 0, 763, 764,
	904, 936, 950, 951, 952, 953, 0, 0, 956, 0,
	958, 959, 960, 804, 773, -2, -2, 948, 586, 587,
	588, 589, -2, 1194, 777, 779, 781, 782, 783, 784,
	0, 1138, 1155, 1156, 1176, 1177, 1185, 1189, 1190, 1162,
	1173, 1163, 1150, 1160, 1171, 1012, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 974, 620, 621, 626, 627, 629, 86, 0, 0,
	937, 913, 911, 912, 0, 0, 0, 0, 556, 99,
	1162, 60, 1162, 932, 60, 1162, 109, 60, 1162, 107,
	1162, 0, 131, 133, 1192, 0, 0, 0, 0, 137,
	0, 141, 143, 0, 0, 260, 371, 0, 384, 168,
	1149, 170, 0, 0, 174, 388, 390, 391, 392, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 186, 112,
	0, 463, 0, 220, 69, 70, 0, 233, 241, 0,
	259, 0, 0, 0, 0, 0, 0, 234, 242, 236,
	0, 0, 0, 245, 0, 247, 248, 0, 0, 0,
	0, 373, 386, 374, 0, 382, 60, 554, 334, 963,
	962, 316, 1162, 461, 316, 969, 461, 1162, -2, 0,
	441, 480, 481, 0, 0, 0, 0, 466, 467, 0,
	0, 0, 437, 438, 0, 456, 0, 0, 502, 924,
	928, 929, 502, 500, 551, 552, 0, 0, 921, 919,
	920, 37, 367, 39, 0, 367, 367, 0, 0, 0,
	0, 265, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 541, 935, 0, 909, 910, 541, 71, 0, 0,
	0, 0, 839, 840, 841, 842, 843, 844, 847, 848,
	845, 846, 849, 850, 851, 0, 0, 0, 852, 853,
	854, 0, 0, 856, 0, 858, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 855, 663, 664, 665, 687,
	688, 0, 751, 915, 908, 753, 0, -2, 860, 0,
	756, 761, 762, 0, 0, 903, -2, 0, 955, 0,
	655, 806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 623, 634, 631, 630, 607, 0, 606, 604,
	0, 608, 0, 0, 0, 82, 0, 0, 930, 914,
	560, 0, 412, 0, 0, 557, 0, 0, 101, 0,
	58, 59, 0, 103, 0, 0, 105, 0, 0, 463,
	0, 0, 1162, 0, 463, 0, 862, 568, 569, 570,
	571, 572, 655, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 593, 594, 595, 596, 597, 598,
	599, 600, 601, 602, 603, 617, 0, 592, 592, 592,
	609, 610, 618, 619, 624, 625, 636, 637, 639, 641,
	635, 635, 635, 632, 633, 0, 860, 0, 152, 0,
	0, 171, 0, 0, 0, 0, 393, 199, 200, 201,
	395, 396, 176, 178, 189, 177, 179, 181, 182, 206,
	207, 208, 209, 210, 211, 0, 0, 113, 238, 223,
	221, 222, 224, 226, 0, 256, 227, 228, 229, 230,
	231, 237, 463, 243, 246, 249, 250, 0, 0, 0,
	381, 336, 0, 274, 0, 0, 339, 460, 0, 0,
	0, 1162, 968, 400, 0, 444, 478, 479, 482, 486,
	487, 490, 493, 494, 484, 658, 451, 452, 453, 474,
	475, 354, 458, 0, 0, 560, 0, 0, 0, 927,
	560, 0, 0, 923, 0, 0, 0, 0, 366, 41,
	1162, 0, 62, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	264, 0, 0, 0, 938, 0, 0, 0, 74, 0,
	945, 81, 0, 659, 564, 565, 611, 612, 613, 614,
	615, 660, 661, 0, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, -2, -2, -2, 679, 680, 681,
	-2, -2, -2, 685, 686, -2, 857, 859, 0, 918,
	0, -2, 0, -2, -2, -2, -2, 699, 0, 701,
	704, 706, 708, 0, 0, 0, 0, 917, 718, 895,
	0, 0, 836, 837, 838, 703, 0, 0, 916, 907,
	0, 0, -2, 758, 0, 0, 0, 866, 867, 902,
	898, 0, 765, 473, 0, 0, 0, 0, 0, 964,
	642, 643, 644, 645, 646, 647, 656, 814, 0, 0,
	0, 778, 780, 0, 0, 0, 0, 870, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 860, 880, 0,
	0, 721, 0, 0, 0, 0, 1180, 0, 860, 888,
	0, 0, 0, 0, 0, 860, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 424, 0, 424, 414, 0, 0, 0,
	424, 427, 428, 430, 431, 0, 0, 558, 100, 933,
	60, 110, 60, 60, 108, 116, 132, 0, 134, 135,
	0, 561, 563, 573, 0, 138, 0, 0, 0, 0,
	173, 389, 394, 0, 196, 0, 198, 0, 114, 258,
	160, 239, 252, 253, 541, 555, 0, 0, 273, 944,
	275, 277, 278, 279, 280, 969, 0, 969, 0, 0,
	337, 0, 0, 0, 0, 402, 408, 0, 0, 488,
	0, 0, 485, 491, 492, 0, 477, 352, 353, 463,
	946, 496, 925, 541, 503, 463, 513, 550, 527, 518,
	0, 926, 496, 553, 922, 40, 356, 0, 0, 0,
	43, 1162, 51, 0, 288, 0, 0, 0, 0, 0,
	369, 52, 1162, 60, 1162, 60, 53, 38, 367, 261,
	0, 262, 0, 360, 0, 355, 358, 0, 81, 0,
	0, 68, 0, 72, 0, -2, -2, 0, 0, 0,
	719, -2, 700, 702, 705, 707, 709, 0, 0, 0,
	0, 0, 0, 0, 720, 0, 0, 905, 908, -2,
	861, 864, 865, 0, 0, 899, 0, 0, 0, 0,
	472, 473, 473, 473, 771, 0, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 0, 0, 0, 787, 0,
	788, 789, 0, 0, 790, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 725,
	726, 0, 0, 791, 886, 887, 0, 0, 0, 0,
	0, 0, 796, 0, 893, 0, 0, 0, 800, 801,
	802, 0, 590, 0, 616, 638, 640, 628, 83, 0,
	931, 93, 0, 559, 409, 424, 0, 0, 416, 413,
	411, 560, 0, 0, 0, 0, 102, 104, 106, 0,
	863, 0, 0, 0, 861, 144, 145, 169, 194, 195,
	197, 190, 0, 254, 282, 315, 0, 0, 969, 0,
	271, 316, 338, 340, 0, 0, 404, 408, 0, 407,
	461, 0, 0, 476, 0, 498, 0, 501, 0, 0,
	0, 0, 0, 547, 547, 547, 545, 521, 0, 527,
	0, 0, 539, 0, -2, 518, 0, 498, 0, 0,
	0, 0, 61, 286, 305, 0, 0, 345, 351, 351,
	0, 774, 775, 0, 0, 0, 45, 0, 0, 0,
	0, 49, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 662, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 896, 0, 831, 0, 0,
	907, -2, 868, 897, 901, 0, 766, 0, 0, 0,
	0, 957, 648, 649, 650, 651, 652, 653, 654, 0,
	812, 813, 817, 0, 0, 776, 0, 0, 869, 879,
	881, 722, 723, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, -2, -2, -2, 740, 741, 742, -2,
	-2, -2, 0, 0, 0, 882, 0, 0, 834, 884,
	885, 890, 891, 0, 793, 794, 795, 892, 0, 0,
	0, 622, 0, 84, 422, 423, 410, 421, 0, 424,
	429, 426, 432, 0, 566, 0, 0, 574, 161, 269,
	0, 276, 0, 0, 0, 274, 0, 0, 0, 406,
	408, 0, 399, 400, 483, 489, 459, 808, 0, 0,
	504, 0, 0, 0, 0, 0, 542, 546, 543, 544,
	0, 0, 527, 539, 510, 0, 0, 0, 517, 538,
	0, 537, 526, -2, 808, 362, 364, 42, 0, 287,
	0, 290, 0, 0, 0, 0, 296, 297, 0, 0,
	0, 0, 307, 314, 0, 354, 949, 0, 354, 0,
	0, 0, 0, 0, 57, 0, 0, 368, 0, 60,
	60, 357, 0, 0, 0, 0, 361, 359, 73, 0,
	0, 0, 0, -2, 0, 712, -2, -2, 830, 861,
	906, 900, 954, 473, 767, 769, 770, 657, 819, 816,
	0, 803, 785, 786, 878, 0, 0, 0, 0, 861,
	833, 792, 0, 798, 799, 591, 0, 0, 0, 415,
	425, 0, 567, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 397, 408, 0, 401, 402, 447, 0, 497,
	495, 529, 0, 531, 0, 0, 0, 533, 513, 522,
	0, 524, 539, 515, 0, 0, 508, 0, 507, 527,
	535, 0, 0, 448, 44, 0, 291, 292, 969, 0,
	295, 298, 0, 300, 971, 282, 0, 311, 312, 346,
	347, 350, 348, 351, 473, 309, 0, 46, 47, 56,
	64, 48, 54, 0, 0, 0, 0, 540, 0, 0,
	0, 78, 76, -2, -2, 713, 832, 0, 473, 0,
	805, -2, 0, 0, 0, 835, 0, 0, 0, 0,
	433, 434, 0, 0, 314, 0, 304, 282, 272, 314,
	0, 0, 403, 404, 807, 809, 0, 530, 0, 549,
	532, 527, 523, 0, 520, 511, 0, 512, 0, 539,
	0, 0, 519, 289, 293, 0, 0, 320, 0, 308,
	0, 354, 0, 0, 66, 0, 363, 365, 0, 0,
	0, 0, 80, 77, 0, 768, 822, 0, -2, 0,
	748, 797, 0, 418, 560, 420, 0, 282, 314, 270,
	282, 0, 405, 406, 0, 0, 0, 0, 525, 509,
	505, 0, 516, 0, 536, 0, 299, 325, 0, 0,
	0, 349, 766, 316, 50, 0, 63, 0, 0, 473,
	79, 75, 0, 0, 0, 818, 749, 0, 419, 0,
	302, 282, 341, 0, 398, 810, 811, 548, 514, 0,
	534, 0, 301, 321, 322, 0, 317, 318, 319, 970,
	313, 320, 65, 266, 268, 0, 815, 820, 823, -2,
	1122, 1003, 0, 821, 560, 0, 303, 314, 506, 294,
	323, 0, 324, 0, 0, 0, 325, 0, 0, 825,
	826, 827, 828, 829, 417, 285, 282, 326, 0, 329,
	330, 0, 327, 310, 0, 281, 283, 284, 342, 328,
	331, 332, 824,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 339, 3, 345, 340, 3,
	350, 351, 343, 341, 354, 342, 352, 344, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 358, 353,
	333, 335, 334, 3, 355, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 348, 3, 349, 346, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 356, 338, 357, 336,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 337, 57676, 347, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:801
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:807
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:908
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:931
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:941
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = nil
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = DropCascade
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = DropRestrict
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = DropDefault
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1004
		{
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1007
		{
			return unimplemented(sqllex, "alter using")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1008
		{
		}
	case 67:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.str = ""
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 80:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1081
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1130
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1132
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{ /* SKIP DOC */
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			return unimplemented(sqllex, "set local")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{ /* SKIP DOC */
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			return unimplemented(sqllex, "set from current")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1508
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1525
		{
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = Low
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = Normal
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = High
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1657
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1765
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1769
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1777
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1793
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1797
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1801
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1835
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1851
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1855
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1865
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1869
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1873
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1948
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = DropDefault
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2163
		{
			return unimplemented(sqllex, "match full")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			return unimplemented(sqllex, "match partial")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			return unimplemented(sqllex, "match simple")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2166
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2176
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2182
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return unimplemented(sqllex, "no action")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return unimplemented(sqllex, "action set null")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return unimplemented(sqllex, "action set default")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = true
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = false
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2299
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2303
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = Ascending
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = Descending
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2357
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2358
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = true
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = false
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2372
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.str = ""
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.str = ""
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = ReadOnly
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = ReadWrite
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.str = ""
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.str = ""
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.str = ""
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.str = ""
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2576
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2641
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2653
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 425:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2676
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2912
		{
			return unimplemented(sqllex, "cte")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = true
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = false
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = false
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = true
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2948
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &From{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3153
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3198
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3215
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = nil
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = true
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = false
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.str = astFullJoin
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.str = astLeftJoin
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.str = astRightJoin
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.str = astInnerJoin
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3391
		{
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3490
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3514
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3577
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3586
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = nil
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3747
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3779
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3819
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = year
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = month
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = day
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = hour
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = minute
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = month
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = hour
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = minute
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = minute
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = nil
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = second
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3914
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3949
		{
			return unimplemented(sqllex, "at tz")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4183
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4356
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4409
		{
			return unimplemented(sqllex, "variadic")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4410
		{
			return unimplemented(sqllex, "variadic")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4433
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			return unimplemented(sqllex, "func_application")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4454
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			return unimplemented(sqllex, "current role")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			return unimplemented(sqllex, "current user")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			return unimplemented(sqllex, "session user")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			return unimplemented(sqllex, "user")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4503
		{
			return unimplemented(sqllex, "treat")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4547
		{
			return unimplemented(sqllex, "within group")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4548
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Window(nil)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4583
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			return unimplemented(sqllex, "frame range")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4646
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4647
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4651
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4657
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4658
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4659
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4660
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4661
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = Any
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = Some
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = All
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = Plus
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = Minus
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = Mult
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = Div
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = FloorDiv
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Mod
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = Bitand
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = Bitor
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = Pow
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Bitxor
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = LT
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = GT
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = EQ
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = LE
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = GE
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = NE
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = Like
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = NotLike
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = ILike
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = NotILike
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 900:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5026
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5144
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5188
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5224
		{
			return unimplemented(sqllex, "func const")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5233
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = DNull
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.str = ""
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
