// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESTORE = 57563
const RESTRICT = 57564
const RETURNING = 57565
const REVOKE = 57566
const RIGHT = 57567
const ROLLBACK = 57568
const ROLLUP = 57569
const ROW = 57570
const ROWS = 57571
const RSHIFT = 57572
const STATUS = 57573
const SAVEPOINT = 57574
const SEARCH = 57575
const SECOND = 57576
const SELECT = 57577
const SERIAL = 57578
const SERIALIZABLE = 57579
const SESSION = 57580
const SESSION_USER = 57581
const SET = 57582
const SHOW = 57583
const SIMILAR = 57584
const SIMPLE = 57585
const SMALLINT = 57586
const SMALLSERIAL = 57587
const SNAPSHOT = 57588
const SOME = 57589
const SPLIT = 57590
const SQL = 57591
const START = 57592
const STDIN = 57593
const STRICT = 57594
const STRING = 57595
const STORING = 57596
const SUBSTRING = 57597
const SYMMETRIC = 57598
const SYSTEM = 57599
const TABLE = 57600
const TABLES = 57601
const TEMPLATE = 57602
const TESTING_RANGES = 57603
const TEXT = 57604
const THEN = 57605
const TIME = 57606
const TIMESTAMP = 57607
const TIMESTAMPTZ = 57608
const TO = 57609
const TRAILING = 57610
const TRANSACTION = 57611
const TREAT = 57612
const TRIM = 57613
const TRUE = 57614
const TRUNCATE = 57615
const TYPE = 57616
const UNBOUNDED = 57617
const UNCOMMITTED = 57618
const UNION = 57619
const UNIQUE = 57620
const UNKNOWN = 57621
const UPDATE = 57622
const UPSERT = 57623
const USER = 57624
const USERS = 57625
const USING = 57626
const VALID = 57627
const VALIDATE = 57628
const VALUE = 57629
const VALUES = 57630
const VARCHAR = 57631
const VARIADIC = 57632
const VIEW = 57633
const VARYING = 57634
const WHEN = 57635
const WHERE = 57636
const WINDOW = 57637
const WITH = 57638
const WITHIN = 57639
const WITHOUT = 57640
const YEAR = 57641
const ZONE = 57642
const NOT_LA = 57643
const WITH_LA = 57644
const AS_LA = 57645
const POSTFIXOP = 57646
const UMINUS = 57647

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5405

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	324, 28,
	-2, 413,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 396,
	142, 396,
	158, 396,
	183, 396,
	189, 396,
	277, 396,
	-2, 386,
	-1, 62,
	98, 395,
	142, 395,
	158, 395,
	183, 395,
	189, 395,
	277, 395,
	-2, 389,
	-1, 71,
	1, 28,
	324, 28,
	-2, 413,
	-1, 422,
	1, 193,
	324, 193,
	-2, 978,
	-1, 459,
	158, 423,
	183, 423,
	-2, 392,
	-1, 462,
	158, 422,
	183, 422,
	-2, 390,
	-1, 595,
	158, 422,
	183, 422,
	-2, 393,
	-1, 654,
	321, 912,
	-2, 905,
	-1, 655,
	321, 913,
	-2, 906,
	-1, 661,
	5, 581,
	321, 581,
	-2, 1082,
	-1, 685,
	5, 542,
	-2, 1056,
	-1, 686,
	5, 575,
	321, 575,
	-2, 1058,
	-1, 687,
	5, 550,
	-2, 1059,
	-1, 688,
	5, 549,
	-2, 1060,
	-1, 689,
	5, 575,
	321, 575,
	-2, 1063,
	-1, 690,
	5, 575,
	321, 575,
	-2, 1064,
	-1, 691,
	5, 576,
	-2, 1067,
	-1, 692,
	5, 536,
	-2, 1068,
	-1, 693,
	5, 536,
	-2, 1069,
	-1, 694,
	5, 557,
	-2, 1073,
	-1, 695,
	5, 537,
	-2, 1078,
	-1, 696,
	5, 538,
	-2, 1079,
	-1, 697,
	5, 539,
	-2, 1080,
	-1, 698,
	5, 540,
	-2, 1081,
	-1, 699,
	5, 536,
	-2, 1086,
	-1, 700,
	5, 543,
	-2, 1091,
	-1, 701,
	5, 541,
	-2, 1094,
	-1, 702,
	5, 573,
	321, 573,
	-2, 1096,
	-1, 703,
	5, 577,
	-2, 1099,
	-1, 704,
	5, 579,
	-2, 1100,
	-1, 705,
	5, 572,
	321, 572,
	-2, 1104,
	-1, 967,
	98, 396,
	142, 396,
	158, 396,
	183, 396,
	189, 396,
	277, 396,
	-2, 700,
	-1, 976,
	321, 889,
	-2, 877,
	-1, 1186,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 616,
	-1, 1187,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 617,
	-1, 1188,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 618,
	-1, 1192,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 622,
	-1, 1193,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 623,
	-1, 1194,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 624,
	-1, 1197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 629,
	-1, 1203,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 631,
	-1, 1206,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 636,
	-1, 1207,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 637,
	-1, 1208,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 638,
	-1, 1235,
	194, 771,
	-2, 774,
	-1, 1264,
	115, 811,
	321, 912,
	-2, 905,
	-1, 1265,
	115, 812,
	-2, 1052,
	-1, 1266,
	115, 813,
	-2, 977,
	-1, 1267,
	115, 814,
	-2, 946,
	-1, 1268,
	115, 815,
	-2, 961,
	-1, 1269,
	115, 816,
	-2, 976,
	-1, 1270,
	115, 817,
	-2, 1019,
	-1, 1424,
	98, 396,
	142, 396,
	158, 396,
	183, 396,
	189, 396,
	277, 396,
	-2, 472,
	-1, 1428,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 630,
	-1, 1429,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 632,
	-1, 1434,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 633,
	-1, 1452,
	194, 770,
	-2, 773,
	-1, 1639,
	1, 473,
	68, 473,
	98, 473,
	116, 473,
	120, 473,
	122, 473,
	135, 473,
	142, 473,
	147, 473,
	155, 473,
	158, 473,
	170, 473,
	183, 473,
	185, 473,
	189, 473,
	223, 473,
	225, 473,
	277, 473,
	284, 473,
	294, 473,
	295, 473,
	303, 473,
	320, 473,
	322, 473,
	324, 473,
	325, 473,
	-2, 472,
	-1, 1641,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 634,
	-1, 1646,
	145, 0,
	-2, 650,
	-1, 1656,
	194, 772,
	-2, 775,
	-1, 1690,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 677,
	-1, 1691,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 678,
	-1, 1692,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 679,
	-1, 1696,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 683,
	-1, 1697,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 684,
	-1, 1698,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 685,
	-1, 1816,
	145, 0,
	-2, 651,
	-1, 1819,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 654,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 656,
	-1, 1923,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 655,
	-1, 1924,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 657,
	-1, 1931,
	145, 0,
	-2, 686,
	-1, 1985,
	145, 0,
	-2, 687,
	-1, 2046,
	36, 0,
	129, 0,
	157, 0,
	242, 0,
	301, 0,
	-2, 1055,
}

const sqlPrivate = 57344

const sqlLast = 27789

var sqlAct = [...]int{

	84, 2045, 1596, 2025, 1634, 2026, 2044, 2027, 2070, 1860,
	1991, 1065, 885, 777, 1635, 1422, 292, 278, 1150, 1667,
	1884, 653, 1904, 1727, 1782, 1606, 423, 1793, 1807, 1057,
	1125, 1741, 1419, 1546, 1129, 645, 1545, 470, 61, 891,
	1400, 526, 294, 1398, 508, 631, 484, 280, 20, 740,
	1787, 761, 463, 1513, 1124, 1158, 1612, 1143, 1349, 1165,
	746, 1233, 1463, 972, 778, 887, 1410, 1157, 48, 652,
	1512, 1097, 1128, 721, 1343, 614, 738, 1066, 61, 718,
	1021, 1405, 1030, 1290, 625, 1243, 1163, 1081, 1049, 1220,
	285, 27, 1621, 648, 1217, 838, 723, 908, 284, 16,
	286, 8, 1261, 750, 1117, 1090, 963, 615, 624, 61,
	499, 1006, 747, 527, 521, 518, 1059, 1132, 913, 20,
	1742, 581, 1160, 582, 473, 520, 462, 62, 598, 597,
	599, 410, 420, 468, 63, 840, 647, 401, 1002, 836,
	76, 754, 514, 80, 471, 602, 580, 413, 1916, 1451,
	1058, 1917, 916, 917, 467, 936, 937, 938, 946, 947,
	948, 763, 27, 763, 2061, 1094, 467, 743, 939, 1293,
	16, 266, 8, 2040, 1062, 919, 1740, 2033, 950, 2023,
	743, 1360, 1087, 71, 1420, 763, 916, 917, 2018, 460,
	450, 743, 481, 1361, 733, 487, 459, 918, 494, 490,
	291, 2014, 1987, 933, 743, 1087, 67, 1981, 1095, 919,
	743, 475, 1963, 1959, 1954, 1740, 743, 1953, 1925, 1914,
	1911, 1087, 772, 1912, 1898, 1895, 915, 1740, 743, 69,
	1893, 918, 1871, 1740, 1870, 743, 1100, 1740, 1842, 708,
	1821, 1100, 1818, 1100, 60, 1087, 1050, 1810, 1096, 1093,
	1100, 1739, 924, 1650, 1740, 1582, 1100, 1577, 1056, 70,
	1056, 1530, 1528, 1527, 1531, 1100, 1100, 65, 1408, 1969,
	39, 943, 951, 66, 1526, 1050, 1053, 1100, 40, 1455,
	530, 291, 1452, 1454, 1456, 1100, 924, 949, 1100, 1408,
	1100, 1387, 64, 914, 743, 1154, 2059, 1053, 743, 941,
	41, 1703, 1462, 523, 523, 934, 1104, 1099, 1086, 1100,
	1100, 1087, 1055, 1018, 1653, 1056, 1017, 1098, 1385, 1019,
	28, 916, 917, 771, 67, 60, 772, 1388, 1237, 528,
	940, 29, 53, 1149, 1112, 610, 764, 880, 764, 934,
	879, 830, 829, 743, 919, 497, 543, 69, 468, 480,
	503, 39, 67, 1801, 1423, 862, 55, 563, 2043, 40,
	764, 2032, 31, 1996, 60, 1982, 918, 1896, 1743, 1847,
	1843, 1835, 935, 1834, 609, 69, 1833, 70, 1829, 1828,
	1827, 41, 1092, 44, 944, 65, 1773, 1718, 1767, 507,
	39, 66, 524, 56, 1713, 1712, 515, 43, 40, 1711,
	1390, 1661, 1639, 1360, 1091, 70, 935, 1611, 1586, 1535,
	1061, 980, 67, 1532, 45, 1520, 1511, 1482, 52, 1479,
	41, 924, 1478, 1476, 1468, 1467, 714, 1386, 1307, 1258,
	1257, 609, 1229, 1421, 890, 69, 914, 608, 64, 767,
	973, 762, 64, 942, 1483, 1484, 930, 931, 932, 1669,
	929, 926, 927, 928, 920, 921, 922, 923, 925, 505,
	945, 916, 917, 883, 2006, 70, 1966, 1844, 1952, 1944,
	1942, 1933, 1920, 65, 1907, 1891, 1857, 655, 655, 66,
	588, 1840, 591, 1812, 919, 1776, 655, 928, 920, 921,
	922, 923, 925, 67, 945, 1498, 1764, 530, 64, 52,
	1746, 42, 1645, 1626, 294, 530, 918, 1604, 1602, 1601,
	1599, 1554, 596, 1483, 1484, 1553, 69, 58, 30, 1584,
	744, 46, 595, 57, 1766, 1230, 1510, 713, 1472, 47,
	1471, 1448, 67, 1443, 1222, 1483, 1484, 50, 52, 551,
	655, 552, 916, 917, 1489, 1376, 70, 54, 1483, 1484,
	655, 1321, 752, 712, 65, 69, 530, 530, 916, 917,
	66, 924, 546, 548, 294, 919, 1320, 1300, 1256, 1153,
	59, 1007, 1010, 766, 587, 1014, 769, 1000, 999, 1628,
	863, 585, 998, 997, 996, 70, 995, 918, 994, 1321,
	993, 583, 992, 65, 991, 990, 630, 1499, 460, 66,
	989, 655, 655, 918, 889, 459, 988, 987, 655, 737,
	986, 605, 606, 1489, 985, 984, 977, 611, 64, 966,
	655, 655, 655, 655, 655, 922, 923, 925, 267, 945,
	655, 784, 845, 845, 515, 1489, 503, 64, 882, 884,
	655, 742, 485, 613, 912, 549, 539, 537, 1489, 2042,
	2016, 1915, 861, 1823, 753, 756, 1802, 773, 1798, 894,
	1772, 775, 1771, 714, 1500, 506, 482, 973, 1799, 489,
	492, 1370, 482, 1369, 964, 916, 917, 1956, 557, 1918,
	1401, 825, 1770, 824, 1362, 826, 729, 1050, 1499, 1012,
	1423, 1276, 1534, 1013, 858, 857, 851, 864, 468, 1533,
	868, 869, 870, 871, 872, 1427, 982, 867, 573, 822,
	875, 876, 558, 888, 1344, 1788, 881, 1058, 1670, 828,
	1459, 1244, 1003, 577, 1356, 1541, 896, 979, 898, 897,
	460, 1999, 2056, 460, 460, 910, 1754, 904, 274, 1031,
	905, 906, 1494, 1491, 1492, 1493, 1485, 1486, 1487, 1488,
	1490, 1958, 714, 1103, 443, 1500, 578, 444, 1879, 1024,
	1094, 976, 1878, 920, 921, 922, 923, 925, 2057, 945,
	1382, 1567, 457, 530, 449, 1566, 448, 810, 1538, 1144,
	1537, 1430, 1375, 1374, 724, 1373, 725, 1440, 724, 1078,
	725, 275, 707, 74, 1075, 523, 1372, 523, 1204, 969,
	1034, 1438, 1060, 1095, 1060, 1008, 1035, 1037, 660, 61,
	1101, 1011, 1047, 1046, 61, 1485, 1486, 1487, 1488, 1490,
	1043, 584, 528, 724, 1082, 725, 496, 710, 1004, 1005,
	555, 1015, 1583, 1763, 270, 1052, 1493, 1485, 1486, 1487,
	1488, 1490, 1027, 1096, 1093, 1304, 73, 1303, 1175, 452,
	945, 1040, 1487, 1488, 1490, 1957, 726, 1570, 1044, 1048,
	726, 1572, 1862, 294, 1435, 1023, 945, 1084, 618, 556,
	482, 1565, 492, 1064, 1436, 1083, 1219, 1085, 1441, 1116,
	1219, 1074, 271, 1076, 1023, 1077, 1079, 878, 1073, 535,
	1022, 1033, 1346, 748, 730, 726, 1226, 1556, 2073, 1591,
	2004, 1224, 757, 1098, 1147, 1148, 2078, 1483, 1484, 2067,
	1350, 1947, 1098, 1339, 1336, 655, 1008, 276, 1011, 1244,
	763, 655, 655, 655, 655, 655, 655, 655, 655, 655,
	655, 655, 655, 655, 655, 655, 655, 655, 655, 655,
	655, 655, 655, 1155, 655, 1174, 655, 655, 655, 655,
	277, 453, 1106, 1105, 294, 2029, 735, 1005, 1004, 734,
	2056, 1383, 554, 1001, 1032, 655, 1929, 655, 1098, 1437,
	1227, 458, 72, 2066, 655, 454, 1439, 1092, 655, 731,
	1139, 1166, 1173, 945, 455, 1332, 1381, 655, 655, 655,
	655, 655, 655, 655, 655, 655, 655, 655, 655, 655,
	655, 655, 1122, 1121, 1120, 75, 1123, 1489, 466, 730,
	784, 784, 2020, 877, 553, 534, 1588, 1108, 655, 1892,
	722, 752, 1156, 2071, 961, 1354, 273, 272, 1110, 1470,
	1622, 1638, 467, 1571, 2021, 2028, 2030, 1241, 2055, 856,
	855, 291, 849, 846, 1557, 1306, 1111, 600, 482, 727,
	1863, 2053, 465, 727, 530, 1109, 1589, 574, 601, 655,
	1499, 1314, 1781, 1350, 2065, 1141, 566, 544, 542, 1231,
	1228, 1342, 601, 2072, 554, 1563, 1873, 1872, 1855, 2084,
	715, 2079, 2031, 1939, 1540, 60, 1252, 1317, 727, 1333,
	1334, 2074, 1271, 1318, 1020, 764, 1750, 1308, 1313, 467,
	1432, 655, 1142, 751, 1218, 1699, 895, 1838, 482, 755,
	755, 39, 886, 530, 1331, 1587, 1309, 575, 1352, 40,
	859, 1225, 784, 1358, 1992, 1098, 1364, 1500, 1365, 1366,
	468, 489, 492, 1753, 1201, 1808, 1234, 600, 874, 831,
	1752, 41, 576, 1238, 1607, 1735, 1783, 1246, 1856, 1215,
	655, 1323, 1368, 1322, 1796, 1617, 810, 810, 1263, 1263,
	1274, 1616, 1285, 1213, 1393, 1355, 1345, 709, 1297, 1298,
	1299, 2083, 553, 1389, 1363, 1391, 513, 1736, 816, 465,
	512, 784, 592, 1735, 1392, 1728, 1749, 464, 1395, 845,
	1700, 61, 1318, 1726, 860, 1809, 1701, 1730, 1839, 655,
	655, 1082, 657, 1367, 1597, 655, 1378, 1379, 1384, 1485,
	1486, 1487, 1488, 1490, 1774, 1736, 1341, 1853, 655, 655,
	1426, 784, 1613, 655, 655, 1380, 1209, 1199, 1202, 1406,
	1751, 655, 1932, 468, 1210, 1729, 1211, 835, 655, 1854,
	1216, 1404, 1255, 1837, 1084, 655, 1407, 1403, 655, 655,
	655, 1425, 1083, 67, 1085, 1198, 1514, 655, 1644, 52,
	1569, 1477, 1442, 1347, 1102, 1054, 579, 1731, 810, 1732,
	572, 571, 570, 569, 568, 833, 69, 567, 564, 655,
	655, 655, 655, 1254, 1413, 511, 504, 834, 655, 655,
	655, 468, 1433, 655, 1515, 983, 1431, 1734, 866, 1461,
	2024, 1417, 1989, 1416, 1737, 1731, 70, 1732, 1447, 1724,
	1561, 1559, 1539, 1016, 65, 1620, 1397, 1145, 1137, 1080,
	66, 655, 655, 1414, 770, 482, 768, 810, 1458, 492,
	809, 1212, 765, 482, 760, 1734, 736, 732, 1214, 279,
	1200, 728, 1737, 1551, 1658, 1399, 783, 850, 847, 1886,
	468, 655, 603, 1151, 1069, 478, 2057, 1552, 853, 492,
	77, 1888, 492, 655, 560, 812, 510, 810, 509, 1023,
	1733, 1517, 1518, 1519, 1039, 1038, 1576, 398, 1949, 1560,
	1743, 1562, 289, 23, 402, 85, 287, 22, 1536, 1578,
	1042, 1550, 1446, 1415, 3, 1418, 1984, 288, 11, 1614,
	1449, 530, 1543, 1023, 607, 407, 1603, 1041, 1733, 1036,
	403, 1152, 1575, 1564, 1970, 1568, 1779, 1140, 1465, 1466,
	604, 294, 655, 479, 409, 1136, 1573, 295, 655, 1580,
	1600, 655, 655, 655, 404, 1629, 1627, 1630, 1579, 498,
	1608, 1331, 1581, 655, 561, 1590, 1592, 1593, 501, 655,
	502, 1509, 655, 406, 23, 1063, 61, 1647, 22, 911,
	655, 1598, 1522, 655, 1615, 827, 486, 1618, 1610, 11,
	903, 776, 290, 10, 1119, 492, 442, 1609, 655, 1619,
	482, 1089, 655, 282, 9, 2081, 655, 655, 655, 655,
	655, 655, 655, 655, 655, 655, 655, 655, 655, 655,
	655, 655, 655, 655, 655, 2082, 655, 1623, 1624, 1483,
	1484, 655, 1161, 1654, 2017, 655, 655, 1663, 1664, 1665,
	1657, 1973, 655, 1805, 655, 655, 655, 1719, 640, 916,
	917, 1594, 445, 446, 1673, 1671, 1585, 784, 1529, 1166,
	1674, 281, 7, 1678, 10, 1114, 1113, 1371, 1166, 1679,
	655, 1676, 405, 1305, 655, 9, 283, 4, 81, 81,
	268, 1302, 1301, 1251, 1409, 1115, 1706, 970, 784, 784,
	530, 393, 394, 395, 1723, 1551, 412, 784, 784, 424,
	1744, 1710, 1825, 2003, 1707, 1748, 1885, 412, 1666, 1552,
	1747, 1633, 1394, 1720, 474, 474, 980, 408, 268, 978,
	655, 268, 268, 493, 268, 655, 451, 81, 500, 530,
	784, 1861, 1413, 7, 655, 655, 400, 1310, 1651, 865,
	565, 1551, 1800, 1550, 1625, 1768, 1551, 2019, 4, 530,
	1762, 1416, 1777, 1830, 1804, 1552, 1775, 1769, 1469, 1903,
	1552, 1780, 1928, 1411, 1338, 655, 1253, 981, 1784, 655,
	655, 1414, 38, 1348, 655, 1813, 1548, 1778, 751, 1817,
	634, 655, 1725, 655, 1542, 531, 1412, 751, 1786, 1550,
	1803, 655, 1791, 1792, 1550, 1131, 1797, 482, 528, 1130,
	1704, 1795, 297, 810, 854, 1785, 656, 839, 848, 1262,
	1167, 1714, 711, 658, 781, 659, 782, 468, 1009, 646,
	779, 1067, 1223, 1242, 655, 811, 1457, 974, 626, 809,
	809, 638, 637, 1239, 810, 810, 536, 1806, 51, 550,
	418, 1415, 419, 810, 810, 783, 783, 1353, 1765, 1146,
	1836, 899, 1558, 456, 1480, 538, 1283, 655, 1396, 784,
	780, 655, 1275, 1272, 812, 812, 586, 655, 717, 962,
	1068, 562, 1359, 655, 1088, 1851, 810, 612, 907, 1849,
	1865, 1161, 1551, 1867, 655, 477, 476, 1126, 559, 832,
	1866, 1848, 1107, 955, 1864, 952, 1552, 655, 447, 1941,
	1794, 1138, 1316, 2077, 1790, 530, 1948, 752, 1555, 1998,
	68, 399, 1955, 1883, 1340, 26, 655, 1887, 1551, 1881,
	24, 21, 268, 516, 268, 424, 424, 1876, 1877, 1880,
	1550, 19, 1552, 1894, 18, 655, 655, 1889, 1913, 1875,
	1906, 809, 17, 25, 1900, 15, 1919, 1897, 1922, 14,
	1902, 1910, 13, 12, 37, 36, 402, 783, 655, 35,
	34, 33, 32, 1921, 6, 655, 1550, 5, 784, 2,
	1, 0, 1909, 0, 1934, 0, 812, 407, 655, 0,
	1277, 1901, 403, 1943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1937, 0, 0, 0, 0, 1927,
	809, 0, 531, 0, 0, 810, 404, 0, 0, 295,
	531, 0, 655, 1938, 0, 0, 783, 0, 0, 1964,
	1945, 530, 0, 1962, 0, 406, 0, 0, 1965, 1444,
	1445, 0, 0, 0, 0, 812, 1869, 0, 1974, 294,
	809, 0, 1946, 0, 1979, 540, 1972, 706, 1968, 0,
	0, 0, 1975, 655, 784, 1977, 783, 0, 1971, 0,
	545, 531, 531, 424, 424, 1976, 0, 1986, 0, 295,
	0, 1980, 61, 655, 0, 812, 0, 1069, 1161, 0,
	468, 0, 0, 0, 1995, 2007, 0, 655, 2009, 296,
	1506, 1507, 1508, 2008, 2002, 1994, 2000, 1967, 412, 0,
	268, 1983, 424, 590, 424, 655, 593, 2015, 1551, 2005,
	2013, 0, 2012, 2011, 810, 0, 0, 0, 0, 0,
	655, 474, 1552, 2010, 405, 1161, 0, 0, 1161, 0,
	2034, 2039, 268, 0, 0, 0, 2037, 0, 0, 0,
	0, 655, 655, 0, 0, 0, 81, 784, 2050, 0,
	0, 0, 2041, 2054, 2052, 268, 1550, 2038, 0, 0,
	268, 268, 268, 0, 758, 2058, 2063, 655, 2064, 408,
	2062, 0, 0, 0, 2036, 0, 0, 0, 0, 0,
	0, 0, 2076, 268, 268, 2080, 2075, 2060, 0, 0,
	0, 81, 0, 81, 0, 0, 0, 0, 0, 0,
	810, 0, 655, 2085, 811, 811, 1277, 1277, 0, 0,
	0, 0, 0, 424, 0, 81, 424, 424, 424, 424,
	424, 873, 0, 0, 0, 0, 424, 424, 0, 0,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 780,
	780, 893, 2001, 1642, 1643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	0, 0, 500, 0, 0, 0, 0, 1277, 1277, 1277,
	0, 0, 0, 0, 2022, 0, 0, 0, 531, 0,
	1757, 0, 0, 0, 1761, 0, 1483, 1484, 0, 0,
	635, 49, 1409, 810, 0, 0, 0, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 811, 1702, 916, 917,
	0, 0, 0, 0, 0, 0, 0, 532, 0, 0,
	0, 49, 0, 1161, 1161, 0, 0, 1161, 0, 0,
	1413, 919, 1483, 1484, 0, 1501, 1502, 1503, 0, 0,
	0, 780, 461, 0, 0, 469, 809, 0, 0, 1416,
	0, 0, 49, 918, 0, 268, 0, 0, 295, 0,
	0, 1411, 783, 1028, 0, 811, 0, 268, 0, 1414,
	0, 268, 1045, 0, 0, 268, 1489, 809, 809, 0,
	0, 812, 1051, 1498, 1412, 0, 809, 809, 0, 0,
	0, 0, 0, 783, 783, 0, 268, 0, 1071, 1072,
	780, 268, 783, 783, 268, 811, 424, 424, 924, 424,
	1277, 1277, 812, 812, 0, 0, 0, 0, 0, 809,
	0, 812, 812, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 1489, 0, 0, 783, 0, 0, 0, 1415,
	780, 0, 0, 0, 1859, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 934, 0, 0, 1277, 1277, 1277, 1277, 1277, 1277,
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
	1277, 1277, 1277, 0, 1277, 1499, 0, 0, 1899, 0,
	0, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 1161, 0, 1118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 268, 0, 0,
	0, 0, 268, 1127, 0, 0, 0, 0, 935, 500,
	0, 0, 0, 0, 532, 0, 0, 0, 1858, 0,
	0, 296, 532, 0, 0, 0, 0, 0, 809, 531,
	0, 0, 1500, 0, 268, 0, 0, 424, 0, 0,
	469, 0, 0, 0, 783, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 1491, 1492, 1493, 1485, 1486,
	1487, 1488, 1490, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 532, 532, 0, 0, 0, 0, 0,
	0, 296, 0, 0, 0, 0, 0, 0, 531, 0,
	920, 921, 922, 923, 925, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 1496, 1497, 0,
	1494, 1491, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 1931,
	0, 0, 1483, 1484, 0, 1501, 1502, 1503, 0, 0,
	0, 0, 0, 0, 1997, 0, 0, 809, 1815, 268,
	1311, 1312, 0, 0, 0, 1028, 0, 0, 1319, 0,
	0, 916, 917, 783, 1324, 1325, 1327, 1329, 1330, 0,
	0, 0, 1335, 0, 0, 1337, 268, 0, 0, 0,
	0, 0, 812, 1498, 919, 268, 0, 0, 0, 0,
	268, 0, 1357, 0, 0, 0, 0, 0, 0, 268,
	0, 1069, 0, 0, 0, 1277, 918, 0, 0, 268,
	0, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1985, 0, 0, 0, 0, 0,
	1118, 1118, 1489, 809, 0, 0, 0, 0, 0, 0,
	0, 461, 811, 811, 0, 0, 780, 0, 0, 783,
	0, 811, 811, 0, 0, 0, 0, 0, 0, 1483,
	1484, 924, 893, 0, 893, 0, 424, 1504, 812, 0,
	268, 0, 916, 917, 1402, 0, 823, 780, 780, 0,
	0, 0, 0, 0, 811, 1499, 780, 780, 0, 0,
	0, 0, 0, 268, 0, 919, 0, 0, 0, 0,
	532, 0, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 918, 0, 780,
	0, 0, 0, 933, 916, 917, 809, 936, 937, 938,
	946, 947, 948, 0, 0, 0, 0, 0, 0, 0,
	939, 0, 783, 0, 0, 0, 0, 919, 0, 0,
	950, 0, 1500, 0, 0, 0, 0, 0, 0, 1489,
	0, 812, 0, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 924, 461, 0, 933, 461, 461, 0, 0,
	0, 935, 0, 0, 0, 0, 531, 0, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	967, 1277, 0, 0, 0, 0, 295, 971, 0, 0,
	0, 0, 1499, 811, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 924, 934, 1495, 1496, 1497, 0,
	1494, 1491, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 0,
	0, 0, 0, 943, 951, 0, 0, 0, 780, 0,
	1547, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	926, 927, 928, 920, 921, 922, 923, 925, 0, 945,
	0, 941, 0, 0, 0, 0, 0, 934, 0, 1500,
	0, 296, 1483, 1484, 0, 1501, 1502, 1503, 0, 268,
	268, 0, 935, 0, 0, 0, 0, 0, 1814, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1595, 0, 0, 1028, 0, 893,
	0, 0, 811, 0, 0, 49, 1605, 49, 0, 0,
	0, 0, 0, 1498, 0, 0, 0, 268, 0, 0,
	268, 0, 49, 0, 935, 0, 0, 49, 0, 0,
	0, 1637, 0, 0, 0, 531, 944, 780, 1491, 1492,
	1493, 1485, 1486, 1487, 1488, 1490, 0, 0, 0, 0,
	929, 926, 927, 928, 920, 921, 922, 923, 925, 0,
	945, 532, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 0, 0, 0, 0, 1668,
	0, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 0, 531, 942, 0, 1504, 930, 931,
	932, 0, 929, 926, 927, 928, 920, 921, 922, 923,
	925, 0, 945, 0, 0, 1499, 0, 0, 0, 1525,
	532, 0, 0, 780, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 916, 917, 0, 936, 937,
	938, 946, 947, 948, 0, 0, 1721, 1722, 1028, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 950, 1547, 500, 0, 0, 1162, 0, 1755, 0,
	1756, 0, 268, 1758, 1759, 1760, 268, 0, 0, 0,
	918, 811, 1500, 0, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1221, 0, 0, 0, 0, 0, 1547, 0,
	500, 1127, 0, 1547, 0, 0, 780, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 268, 0, 0, 268,
	0, 0, 0, 616, 616, 924, 916, 917, 1637, 0,
	0, 0, 719, 0, 0, 1811, 0, 0, 0, 0,
	531, 0, 0, 0, 943, 951, 1495, 1496, 1497, 919,
	1494, 1491, 1492, 1493, 1485, 1486, 1487, 1488, 1490, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 1831, 0,
	0, 918, 941, 0, 0, 0, 0, 0, 934, 0,
	0, 0, 49, 49, 0, 0, 0, 0, 0, 916,
	917, 0, 936, 937, 938, 946, 947, 948, 0, 0,
	0, 0, 469, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 1483, 1484, 950, 1501, 1502, 1503, 0,
	0, 0, 0, 1028, 0, 1850, 924, 424, 1852, 1649,
	0, 0, 0, 0, 918, 0, 268, 0, 0, 1547,
	933, 0, 424, 0, 0, 935, 0, 900, 902, 0,
	0, 0, 0, 0, 909, 0, 531, 944, 0, 0,
	0, 0, 1882, 0, 1498, 500, 956, 957, 958, 959,
	960, 0, 0, 0, 295, 1547, 968, 49, 0, 934,
	268, 49, 0, 0, 0, 0, 975, 1905, 0, 924,
	0, 0, 0, 0, 49, 268, 0, 0, 532, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 943, 951,
	0, 500, 1637, 1489, 0, 0, 942, 0, 296, 930,
	931, 932, 0, 929, 926, 927, 928, 920, 921, 922,
	923, 925, 0, 945, 0, 0, 941, 0, 0, 0,
	1524, 425, 934, 1221, 0, 0, 935, 0, 1504, 0,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 967, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1950, 1951, 0,
	0, 0, 0, 0, 0, 0, 0, 1960, 0, 0,
	0, 1961, 0, 0, 0, 428, 0, 0, 0, 0,
	433, 434, 0, 0, 439, 0, 500, 0, 0, 935,
	0, 0, 1637, 0, 0, 0, 427, 429, 1637, 500,
	0, 944, 967, 0, 929, 926, 927, 928, 920, 921,
	922, 923, 925, 1500, 945, 0, 0, 0, 0, 0,
	0, 1993, 0, 500, 0, 0, 268, 0, 424, 0,
	0, 0, 0, 0, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1547, 0, 532, 1905, 431,
	432, 1637, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 930, 931, 932, 435, 929, 926, 927,
	928, 920, 921, 922, 923, 925, 0, 945, 0, 0,
	0, 0, 1162, 268, 0, 500, 532, 1495, 1496, 1497,
	0, 1494, 1491, 1492, 1493, 1485, 1486, 1487, 1488, 1490,
	0, 0, 0, 2051, 0, 0, 532, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1637, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	0, 0, 1162, 0, 0, 0, 0, 0, 0, 49,
	0, 616, 0, 0, 0, 0, 0, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 0,
	1203, 0, 1205, 1206, 1207, 1208, 436, 0, 441, 0,
	0, 437, 0, 0, 0, 0, 438, 0, 0, 0,
	0, 1232, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1259, 1260, 0, 0, 1273, 0, 1284,
	1286, 1291, 1294, 1295, 1296, 0, 0, 0, 0, 0,
	0, 0, 0, 916, 917, 0, 936, 937, 938, 946,
	947, 948, 0, 0, 719, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 950,
	0, 0, 532, 0, 0, 916, 917, 0, 936, 937,
	938, 946, 947, 948, 0, 0, 0, 0, 918, 0,
	0, 939, 0, 0, 933, 1351, 0, 0, 919, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 0, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1377, 0, 0,
	0, 0, 0, 924, 0, 0, 0, 1162, 1162, 0,
	0, 1162, 0, 0, 0, 0, 0, 0, 0, 469,
	0, 0, 943, 951, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 909, 0, 532, 0,
	941, 0, 0, 0, 943, 951, 934, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 941, 0, 0, 0, 0, 0, 934, 0,
	0, 0, 0, 0, 0, 1428, 1429, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 944, 0, 0, 0, 0,
	0, 1460, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 935, 0, 0, 0, 0,
	0, 1890, 0, 0, 0, 916, 917, 944, 0, 0,
	49, 946, 947, 948, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 1291, 1291, 1291, 1162, 919, 0,
	0, 950, 0, 0, 942, 0, 0, 930, 931, 932,
	0, 929, 926, 927, 928, 920, 921, 922, 923, 925,
	918, 945, 0, 0, 0, 0, 933, 1544, 1523, 0,
	0, 0, 0, 0, 0, 0, 942, 0, 0, 930,
	931, 932, 0, 929, 926, 927, 928, 920, 921, 922,
	923, 925, 0, 945, 0, 0, 0, 616, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 0, 924, 0, 0, 0, 0,
	916, 917, 0, 936, 937, 938, 946, 947, 948, 0,
	0, 0, 967, 0, 943, 951, 939, 0, 0, 0,
	0, 0, 0, 919, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 918, 0, 0, 934, 0,
	0, 933, 0, 0, 1640, 0, 0, 1641, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1646,
	0, 0, 0, 0, 0, 0, 0, 0, 1655, 0,
	0, 0, 0, 0, 0, 0, 1659, 0, 0, 1377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 1675, 0, 0, 0, 1677, 0,
	0, 0, 0, 0, 0, 935, 0, 0, 0, 943,
	951, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 1708, 1709, 0, 0, 0, 0, 941, 0, 0,
	1715, 1716, 1717, 934, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1745, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 929, 926, 927, 928, 920, 921, 922,
	923, 925, 0, 945, 0, 0, 0, 916, 917, 0,
	936, 937, 938, 946, 947, 948, 0, 0, 0, 0,
	935, 0, 0, 939, 0, 0, 0, 0, 0, 0,
	919, 0, 944, 950, 0, 0, 0, 0, 0, 0,
	1789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1816, 0, 0, 0, 1819, 1820, 0, 0, 0,
	1822, 0, 0, 0, 0, 0, 0, 1824, 0, 1826,
	0, 942, 0, 0, 930, 931, 932, 1832, 929, 926,
	927, 928, 920, 921, 922, 923, 925, 924, 945, 0,
	0, 0, 1990, 916, 917, 0, 936, 937, 938, 946,
	947, 948, 0, 0, 0, 0, 943, 951, 0, 939,
	1841, 0, 0, 0, 0, 0, 919, 0, 0, 950,
	1483, 1484, 949, 1501, 1502, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 1648, 0, 918, 0,
	934, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1874,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 1498, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 1484, 0, 1501, 1502, 1503, 0, 0, 0, 0,
	0, 0, 0, 924, 0, 0, 0, 0, 0, 0,
	0, 0, 1908, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 943, 951, 0, 0, 0, 0, 0, 944,
	1489, 1923, 1924, 0, 0, 0, 0, 0, 949, 0,
	0, 1498, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 934, 0, 0, 0,
	0, 1936, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 0, 1940, 0, 0, 0, 0, 0,
	0, 940, 0, 1499, 0, 0, 0, 0, 942, 0,
	1489, 930, 931, 932, 0, 929, 926, 927, 928, 920,
	921, 922, 923, 925, 0, 945, 0, 0, 719, 1988,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 930, 931, 932,
	0, 929, 926, 927, 928, 920, 921, 922, 923, 925,
	1500, 945, 0, 0, 0, 1935, 2035, 0, 0, 0,
	0, 0, 0, 0, 1495, 1496, 1497, 0, 1494, 1491,
	1492, 1493, 1485, 1486, 1487, 1488, 1490, 2049, 2049, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2049, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 1495, 1496, 1497, 0, 1494, 1491,
	1492, 1493, 1485, 1486, 1487, 1488, 1490, 0, 2049, 86,
	87, 312, 88, 313, 314, 315, 316, 215, 317, 318,
	319, 320, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 321, 93, 222, 223, 94, 322, 323, 224,
	225, 226, 324, 227, 325, 298, 326, 95, 96, 97,
	0, 98, 327, 99, 100, 101, 328, 299, 102, 103,
	329, 330, 331, 332, 333, 334, 104, 105, 269, 106,
	228, 107, 229, 230, 335, 108, 336, 109, 337, 338,
	339, 110, 111, 340, 112, 341, 0, 342, 231, 113,
	114, 232, 233, 343, 344, 345, 115, 116, 234, 0,
	117, 346, 118, 347, 348, 300, 349, 119, 235, 350,
	236, 351, 120, 121, 122, 123, 237, 238, 302, 352,
	127, 353, 124, 354, 301, 125, 239, 126, 240, 241,
	242, 355, 243, 356, 303, 128, 304, 129, 130, 357,
	132, 131, 358, 244, 305, 133, 306, 359, 134, 360,
	361, 135, 0, 136, 137, 138, 140, 245, 139, 307,
	141, 142, 144, 143, 362, 363, 364, 246, 145, 247,
	146, 147, 365, 148, 366, 367, 149, 368, 369, 150,
	248, 308, 151, 309, 249, 152, 153, 154, 155, 370,
	250, 156, 251, 157, 371, 158, 159, 160, 252, 161,
	162, 372, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 373, 173, 310, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 374, 254, 181, 182, 375, 183,
	184, 311, 185, 255, 256, 186, 376, 192, 187, 188,
	189, 191, 257, 190, 258, 377, 193, 378, 194, 195,
	196, 197, 379, 259, 260, 261, 380, 381, 198, 262,
	263, 382, 199, 200, 201, 202, 383, 384, 203, 204,
	205, 385, 206, 386, 207, 208, 209, 264, 265, 387,
	388, 210, 389, 390, 391, 392, 211, 212, 213, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 1631, 0,
	0, 0, 0, 0, 0, 0, 1632, 86, 87, 312,
	88, 313, 314, 315, 316, 215, 317, 318, 319, 320,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	321, 93, 222, 223, 94, 322, 323, 224, 225, 226,
	324, 227, 325, 298, 326, 95, 96, 97, 0, 98,
	327, 99, 100, 101, 328, 299, 102, 103, 329, 330,
	331, 332, 333, 334, 104, 105, 269, 106, 228, 107,
	229, 230, 335, 108, 336, 109, 337, 338, 339, 110,
	111, 340, 112, 341, 0, 342, 231, 113, 114, 232,
	233, 343, 344, 345, 115, 116, 234, 0, 117, 346,
	118, 347, 348, 300, 349, 119, 235, 350, 236, 351,
	120, 121, 122, 123, 237, 238, 302, 352, 127, 353,
	124, 354, 301, 125, 239, 126, 240, 241, 242, 355,
	243, 356, 303, 128, 304, 129, 130, 357, 132, 131,
	358, 244, 305, 133, 306, 359, 134, 360, 361, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 362, 363, 364, 246, 145, 247, 146, 147,
	365, 148, 366, 367, 149, 368, 369, 150, 248, 308,
	151, 309, 249, 152, 153, 154, 155, 370, 250, 156,
	251, 157, 371, 158, 159, 160, 252, 161, 162, 372,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	373, 173, 310, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 374, 254, 181, 182, 375, 183, 184, 311,
	185, 255, 256, 186, 376, 192, 187, 188, 189, 191,
	257, 190, 258, 377, 193, 378, 194, 195, 196, 197,
	379, 259, 260, 261, 380, 381, 198, 262, 263, 382,
	199, 200, 201, 202, 383, 384, 203, 204, 205, 385,
	206, 386, 207, 208, 209, 264, 265, 387, 388, 210,
	389, 390, 391, 392, 211, 212, 213, 214, 0, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1978, 86, 87, 312,
	88, 313, 314, 315, 316, 215, 317, 318, 319, 320,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	321, 93, 222, 223, 94, 322, 323, 224, 225, 226,
	324, 227, 325, 298, 326, 95, 96, 97, 0, 98,
	327, 99, 100, 101, 328, 299, 102, 103, 329, 330,
	331, 332, 333, 334, 104, 105, 269, 106, 228, 107,
	229, 230, 335, 108, 336, 109, 337, 338, 339, 110,
	111, 340, 112, 341, 0, 342, 231, 113, 114, 232,
	233, 343, 344, 345, 115, 116, 234, 0, 117, 346,
	118, 347, 348, 300, 349, 119, 235, 350, 236, 351,
	120, 121, 122, 123, 237, 238, 302, 352, 127, 353,
	124, 354, 301, 125, 239, 126, 240, 241, 242, 355,
	243, 356, 303, 128, 304, 129, 130, 357, 132, 131,
	358, 244, 305, 133, 306, 359, 134, 360, 361, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 362, 363, 364, 246, 145, 247, 146, 147,
	365, 148, 366, 367, 149, 368, 369, 150, 248, 308,
	151, 309, 249, 152, 153, 154, 155, 370, 250, 156,
	251, 157, 371, 158, 159, 160, 252, 161, 162, 372,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	373, 173, 310, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 374, 254, 181, 182, 375, 183, 184, 311,
	185, 255, 256, 186, 376, 192, 187, 188, 189, 191,
	257, 190, 258, 377, 193, 378, 194, 195, 196, 197,
	379, 259, 260, 261, 380, 381, 198, 262, 263, 382,
	199, 200, 201, 202, 383, 384, 203, 204, 205, 385,
	206, 386, 207, 208, 209, 264, 265, 387, 388, 210,
	389, 390, 391, 392, 211, 212, 213, 214, 293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 86, 87, 312, 88, 313, 314,
	315, 316, 215, 317, 318, 319, 320, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 321, 93, 222,
	223, 94, 322, 323, 224, 225, 226, 324, 227, 325,
	298, 326, 95, 96, 97, 0, 98, 327, 99, 100,
	101, 328, 299, 102, 103, 329, 330, 331, 332, 333,
	334, 104, 105, 269, 106, 228, 107, 229, 230, 335,
	108, 336, 109, 337, 338, 339, 110, 111, 340, 112,
	341, 0, 342, 231, 113, 114, 232, 233, 343, 344,
	345, 115, 116, 234, 0, 117, 346, 118, 347, 348,
	300, 349, 119, 235, 350, 236, 351, 120, 121, 122,
	123, 237, 238, 302, 352, 127, 353, 124, 354, 301,
	125, 239, 126, 240, 241, 242, 355, 243, 356, 303,
	128, 304, 129, 130, 357, 132, 131, 358, 244, 305,
	133, 306, 359, 134, 360, 361, 135, 0, 136, 137,
	138, 140, 245, 139, 307, 141, 142, 144, 143, 362,
	363, 364, 246, 145, 247, 146, 147, 365, 148, 366,
	367, 149, 368, 369, 150, 248, 308, 151, 309, 249,
	152, 153, 154, 155, 370, 250, 156, 251, 157, 371,
	158, 159, 160, 252, 161, 162, 372, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 373, 173, 310,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 374,
	254, 181, 182, 375, 183, 184, 311, 185, 255, 256,
	186, 376, 192, 187, 188, 189, 191, 257, 190, 258,
	377, 193, 378, 194, 195, 196, 197, 379, 259, 260,
	261, 380, 381, 198, 262, 263, 382, 199, 200, 201,
	202, 383, 384, 203, 204, 205, 385, 206, 386, 207,
	208, 209, 264, 265, 387, 388, 210, 389, 390, 391,
	392, 211, 212, 213, 214, 654, 643, 644, 641, 642,
	633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 670,
	636, 0, 0, 0, 89, 90, 91, 216, 685, 218,
	686, 92, 687, 688, 0, 93, 222, 223, 94, 639,
	669, 689, 690, 226, 0, 681, 0, 662, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 299,
	102, 103, 0, 663, 665, 0, 664, 666, 104, 105,
	269, 106, 691, 107, 692, 693, 720, 108, 0, 109,
	0, 0, 0, 684, 111, 0, 112, 0, 0, 0,
	627, 113, 114, 671, 672, 650, 0, 0, 115, 116,
	694, 0, 117, 0, 118, 0, 0, 300, 0, 119,
	682, 0, 236, 0, 120, 121, 122, 123, 678, 680,
	302, 0, 127, 0, 124, 0, 301, 125, 695, 126,
	696, 697, 698, 0, 661, 0, 303, 128, 304, 129,
	130, 0, 132, 131, 0, 683, 305, 133, 306, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 307, 141, 142, 144, 143, 622, 0, 651, 679,
	145, 699, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 308, 151, 309, 673, 152, 153, 154,
	155, 0, 674, 156, 251, 157, 0, 158, 159, 160,
	700, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 310, 174, 175, 628,
	176, 0, 177, 178, 179, 180, 67, 254, 181, 182,
	667, 183, 184, 311, 185, 701, 256, 186, 0, 192,
	187, 188, 189, 191, 702, 190, 675, 0, 193, 69,
	194, 195, 196, 197, 0, 259, 703, 704, 0, 0,
	198, 676, 677, 649, 199, 200, 201, 202, 0, 0,
	203, 204, 205, 668, 206, 0, 207, 208, 209, 533,
	705, 0, 0, 210, 0, 0, 0, 65, 211, 212,
	213, 214, 623, 66, 0, 0, 0, 654, 643, 644,
	641, 642, 633, 619, 620, 0, 0, 0, 0, 621,
	0, 0, 629, 86, 87, 1248, 88, 632, 0, 0,
	0, 670, 636, 0, 0, 0, 89, 90, 91, 216,
	685, 218, 686, 92, 687, 688, 0, 93, 222, 223,
	94, 639, 669, 689, 690, 226, 0, 681, 0, 662,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 299, 102, 103, 0, 663, 665, 0, 664, 666,
	104, 105, 269, 106, 691, 107, 692, 693, 0, 108,
	0, 109, 0, 1249, 0, 684, 111, 0, 112, 0,
	0, 0, 627, 113, 114, 671, 672, 650, 0, 0,
	115, 116, 694, 0, 117, 0, 118, 0, 0, 300,
	0, 119, 682, 0, 236, 0, 120, 121, 122, 123,
	678, 680, 302, 0, 127, 0, 124, 0, 301, 125,
	695, 126, 696, 697, 698, 0, 661, 0, 303, 128,
	304, 129, 130, 0, 132, 131, 0, 683, 305, 133,
	306, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 307, 141, 142, 144, 143, 622, 0,
	651, 679, 145, 699, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 308, 151, 309, 673, 152,
	153, 154, 155, 0, 674, 156, 251, 157, 0, 158,
	159, 160, 700, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 310, 174,
	175, 628, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 667, 183, 184, 311, 185, 701, 256, 186,
	0, 192, 187, 188, 189, 191, 702, 190, 675, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 703, 704,
	0, 0, 198, 676, 677, 649, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 668, 206, 0, 207, 208,
	209, 264, 705, 1247, 0, 210, 0, 0, 0, 0,
	211, 212, 213, 214, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 620, 1250, 0, 0,
	0, 621, 0, 0, 629, 1245, 0, 0, 0, 632,
	654, 643, 644, 641, 642, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 670, 636, 0, 0, 0, 89,
	90, 91, 216, 685, 218, 686, 92, 687, 688, 0,
	93, 222, 223, 94, 639, 669, 689, 690, 226, 0,
	681, 0, 662, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 299, 102, 103, 0, 663, 665,
	0, 664, 666, 104, 105, 269, 106, 691, 107, 692,
	693, 0, 108, 0, 109, 0, 0, 0, 684, 111,
	0, 112, 0, 0, 0, 627, 113, 114, 671, 672,
	650, 0, 0, 115, 116, 694, 0, 117, 0, 118,
	0, 0, 300, 0, 119, 682, 0, 236, 0, 120,
	121, 122, 123, 678, 680, 302, 0, 127, 0, 124,
	0, 301, 125, 695, 126, 696, 697, 698, 0, 661,
	0, 303, 128, 304, 129, 130, 0, 132, 131, 0,
	683, 305, 133, 306, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 307, 141, 142, 144,
	143, 622, 0, 651, 679, 145, 699, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 308, 151,
	309, 673, 152, 153, 154, 155, 0, 674, 156, 251,
	157, 0, 158, 159, 160, 700, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 310, 174, 175, 628, 176, 0, 177, 178, 179,
	180, 67, 254, 181, 182, 667, 183, 184, 311, 185,
	701, 256, 186, 0, 192, 187, 188, 189, 191, 702,
	190, 675, 0, 193, 69, 194, 195, 196, 197, 0,
	259, 703, 704, 0, 0, 198, 676, 677, 649, 199,
	200, 201, 202, 0, 0, 203, 204, 205, 668, 206,
	0, 207, 208, 209, 533, 705, 0, 0, 210, 0,
	0, 0, 65, 211, 212, 213, 214, 623, 66, 654,
	643, 644, 641, 642, 633, 0, 0, 0, 619, 620,
	0, 0, 0, 0, 621, 86, 87, 629, 88, 0,
	0, 0, 632, 670, 636, 0, 0, 0, 89, 90,
	91, 216, 685, 218, 686, 92, 687, 688, 1287, 93,
	222, 223, 94, 639, 669, 689, 690, 226, 0, 681,
	0, 662, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 299, 102, 103, 0, 663, 665, 0,
	664, 666, 104, 105, 269, 106, 691, 107, 692, 693,
	0, 108, 0, 109, 0, 0, 0, 684, 111, 0,
	112, 0, 0, 0, 627, 113, 114, 671, 672, 650,
	0, 0, 115, 116, 694, 0, 117, 0, 118, 0,
	1292, 300, 0, 119, 682, 0, 236, 0, 120, 121,
	122, 123, 678, 680, 302, 0, 127, 0, 124, 0,
	301, 125, 695, 126, 696, 697, 698, 0, 661, 0,
	303, 128, 304, 129, 130, 0, 132, 131, 1288, 683,
	305, 133, 306, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 307, 141, 142, 144, 143,
	622, 0, 651, 679, 145, 699, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 308, 151, 309,
	673, 152, 153, 154, 155, 0, 674, 156, 251, 157,
	0, 158, 159, 160, 700, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	310, 174, 175, 628, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 667, 183, 184, 311, 185, 701,
	256, 186, 0, 192, 187, 188, 189, 191, 702, 190,
	675, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	703, 704, 0, 1289, 198, 676, 677, 649, 199, 200,
	201, 202, 0, 0, 203, 204, 205, 668, 206, 0,
	207, 208, 209, 264, 705, 0, 0, 210, 0, 0,
	0, 0, 211, 212, 213, 214, 623, 0, 654, 643,
	644, 641, 642, 633, 0, 0, 0, 619, 620, 0,
	0, 0, 0, 621, 86, 87, 629, 88, 0, 0,
	0, 632, 670, 636, 0, 0, 0, 89, 90, 91,
	216, 685, 218, 686, 92, 687, 688, 0, 93, 222,
	223, 94, 639, 669, 689, 690, 226, 0, 681, 0,
	662, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 299, 102, 103, 0, 663, 665, 0, 664,
	666, 104, 105, 269, 106, 691, 107, 692, 693, 0,
	108, 0, 109, 0, 0, 0, 684, 111, 0, 112,
	0, 0, 0, 627, 113, 114, 671, 672, 650, 0,
	0, 115, 116, 694, 0, 117, 0, 118, 0, 0,
	300, 0, 119, 682, 0, 236, 0, 120, 121, 122,
	123, 678, 680, 302, 0, 127, 0, 124, 0, 301,
	125, 695, 126, 696, 697, 698, 0, 661, 0, 303,
	128, 304, 129, 130, 0, 132, 131, 0, 683, 305,
	133, 306, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 307, 141, 142, 144, 143, 622,
	1574, 651, 679, 145, 699, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 308, 151, 309, 673,
	152, 153, 154, 155, 0, 674, 156, 251, 157, 0,
	158, 159, 160, 700, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 310,
	174, 175, 628, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 667, 183, 184, 311, 185, 701, 256,
	186, 0, 192, 187, 188, 189, 191, 702, 190, 675,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 703,
	704, 0, 0, 198, 676, 677, 649, 199, 200, 201,
	202, 0, 0, 203, 204, 205, 668, 206, 0, 207,
	208, 209, 264, 705, 0, 0, 210, 0, 0, 0,
	0, 211, 212, 213, 214, 623, 0, 654, 643, 644,
	641, 642, 633, 0, 0, 0, 619, 620, 617, 0,
	0, 0, 621, 86, 87, 629, 88, 0, 0, 0,
	632, 670, 636, 0, 0, 0, 89, 90, 91, 216,
	685, 218, 686, 92, 687, 688, 0, 93, 222, 223,
	94, 639, 669, 689, 690, 226, 0, 681, 0, 662,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 299, 102, 103, 0, 663, 665, 0, 664, 666,
	104, 105, 269, 106, 691, 107, 692, 693, 0, 108,
	0, 109, 0, 0, 0, 684, 111, 0, 112, 0,
	0, 0, 627, 113, 114, 671, 672, 650, 0, 0,
	115, 116, 694, 0, 117, 0, 118, 0, 0, 300,
	0, 119, 682, 0, 236, 0, 120, 121, 122, 123,
	678, 680, 302, 0, 127, 0, 124, 0, 301, 125,
	695, 126, 696, 697, 698, 0, 661, 0, 303, 128,
	304, 129, 130, 0, 132, 131, 0, 683, 305, 133,
	306, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 307, 141, 142, 144, 143, 622, 0,
	651, 679, 145, 699, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 308, 151, 309, 673, 152,
	153, 154, 155, 0, 674, 156, 251, 157, 0, 158,
	159, 160, 700, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 310, 174,
	175, 628, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 667, 183, 184, 311, 185, 701, 256, 186,
	0, 192, 187, 188, 189, 191, 702, 190, 675, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 703, 704,
	0, 0, 198, 676, 677, 649, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 668, 206, 0, 207, 208,
	209, 264, 705, 0, 0, 210, 0, 0, 0, 0,
	211, 212, 213, 214, 623, 0, 0, 0, 0, 654,
	643, 644, 641, 642, 633, 619, 620, 0, 0, 0,
	0, 621, 973, 1240, 629, 86, 87, 0, 88, 632,
	0, 0, 0, 670, 636, 0, 0, 0, 89, 90,
	91, 216, 685, 218, 686, 92, 687, 688, 0, 93,
	222, 223, 94, 639, 669, 689, 690, 226, 0, 681,
	0, 662, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 299, 102, 103, 0, 663, 665, 0,
	664, 666, 104, 105, 269, 106, 691, 107, 692, 693,
	0, 108, 0, 109, 0, 0, 0, 684, 111, 0,
	112, 0, 0, 0, 627, 113, 114, 671, 672, 650,
	0, 0, 115, 116, 694, 0, 117, 0, 118, 0,
	0, 300, 0, 119, 682, 0, 236, 0, 120, 121,
	122, 123, 678, 680, 302, 0, 127, 0, 124, 0,
	301, 125, 695, 126, 696, 697, 698, 0, 661, 0,
	303, 128, 304, 129, 130, 0, 132, 131, 0, 683,
	305, 133, 306, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 307, 141, 142, 144, 143,
	622, 0, 651, 679, 145, 699, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 308, 151, 309,
	673, 152, 153, 154, 155, 0, 674, 156, 251, 157,
	0, 158, 159, 160, 700, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	310, 174, 175, 628, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 667, 183, 184, 311, 185, 701,
	256, 186, 0, 192, 187, 188, 189, 191, 702, 190,
	675, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	703, 704, 0, 0, 198, 676, 677, 649, 199, 200,
	201, 202, 0, 0, 203, 204, 205, 668, 206, 0,
	207, 208, 209, 264, 705, 0, 0, 210, 0, 0,
	0, 0, 211, 212, 213, 214, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 619, 620, 0,
	0, 0, 0, 621, 0, 0, 629, 1705, 0, 0,
	0, 632, 654, 643, 644, 641, 642, 633, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 670, 636, 0, 0,
	0, 89, 90, 91, 216, 685, 218, 686, 92, 687,
	688, 0, 93, 222, 223, 94, 639, 669, 689, 690,
	226, 0, 681, 0, 662, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 299, 102, 103, 0,
	663, 665, 0, 664, 666, 104, 105, 269, 106, 691,
	107, 692, 693, 0, 108, 0, 109, 0, 0, 0,
	684, 111, 0, 112, 0, 0, 0, 627, 113, 114,
	671, 672, 650, 0, 0, 115, 116, 694, 0, 117,
	0, 118, 0, 0, 300, 0, 119, 682, 0, 236,
	0, 120, 121, 122, 123, 678, 680, 302, 0, 127,
	0, 124, 0, 301, 125, 695, 126, 696, 697, 698,
	0, 661, 0, 303, 128, 304, 129, 130, 0, 132,
	131, 0, 683, 305, 133, 306, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 307, 141,
	142, 144, 143, 622, 0, 651, 679, 145, 699, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	308, 151, 309, 673, 152, 153, 154, 155, 0, 674,
	156, 251, 157, 0, 158, 159, 160, 700, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 310, 174, 175, 628, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 667, 183, 184,
	311, 185, 701, 256, 186, 0, 192, 187, 188, 189,
	191, 702, 190, 675, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 703, 704, 0, 0, 198, 676, 677,
	649, 199, 200, 201, 202, 0, 0, 203, 204, 205,
	668, 206, 0, 207, 208, 209, 264, 705, 1662, 0,
	210, 0, 0, 0, 0, 211, 212, 213, 214, 623,
	0, 654, 643, 644, 641, 642, 633, 0, 0, 0,
	619, 620, 0, 0, 0, 0, 621, 86, 87, 629,
	88, 0, 0, 0, 632, 670, 636, 0, 0, 0,
	89, 90, 91, 216, 685, 218, 686, 92, 687, 688,
	0, 93, 222, 223, 94, 639, 669, 689, 690, 226,
	0, 681, 0, 662, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 103, 0, 663,
	665, 0, 664, 666, 104, 105, 269, 106, 691, 107,
	692, 693, 0, 108, 0, 109, 0, 0, 0, 684,
	111, 0, 112, 0, 0, 0, 627, 113, 114, 671,
	672, 650, 0, 0, 115, 116, 694, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 682, 0, 236, 0,
	120, 121, 122, 123, 678, 680, 302, 0, 127, 0,
	124, 0, 301, 125, 695, 126, 696, 697, 698, 0,
	661, 0, 303, 128, 304, 129, 130, 0, 132, 131,
	0, 683, 305, 133, 306, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 622, 0, 651, 679, 145, 699, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 673, 152, 153, 154, 155, 0, 674, 156,
	251, 157, 0, 158, 159, 160, 700, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 628, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 667, 183, 184, 311,
	185, 701, 256, 186, 0, 192, 187, 188, 189, 191,
	702, 190, 675, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 703, 704, 0, 0, 198, 676, 677, 649,
	199, 200, 201, 202, 0, 0, 203, 204, 205, 668,
	206, 0, 207, 208, 209, 264, 705, 0, 0, 210,
	0, 0, 0, 0, 211, 212, 213, 214, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 619,
	620, 0, 0, 0, 0, 621, 0, 0, 629, 1652,
	0, 0, 0, 632, 654, 643, 644, 641, 642, 633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 670, 636,
	0, 0, 0, 89, 90, 91, 216, 685, 218, 686,
	92, 687, 688, 0, 93, 222, 223, 94, 639, 669,
	689, 690, 226, 0, 681, 0, 662, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 299, 102,
	103, 0, 663, 665, 0, 664, 666, 104, 105, 269,
	106, 691, 107, 692, 693, 720, 108, 0, 109, 0,
	0, 0, 684, 111, 0, 112, 0, 0, 0, 627,
	113, 114, 671, 672, 650, 0, 0, 115, 116, 694,
	0, 117, 0, 118, 0, 0, 300, 0, 119, 682,
	0, 236, 0, 120, 121, 122, 123, 678, 680, 302,
	0, 127, 0, 124, 0, 301, 125, 695, 126, 696,
	697, 698, 0, 661, 0, 303, 128, 304, 129, 130,
	0, 132, 131, 0, 683, 305, 133, 306, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	307, 141, 142, 144, 143, 622, 0, 651, 679, 145,
	699, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 308, 151, 309, 673, 152, 153, 154, 155,
	0, 674, 156, 251, 157, 0, 158, 159, 160, 700,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 310, 174, 175, 628, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 667,
	183, 184, 311, 185, 701, 256, 186, 0, 192, 187,
	188, 189, 191, 702, 190, 675, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 703, 704, 0, 0, 198,
	676, 677, 649, 199, 200, 201, 202, 0, 0, 203,
	204, 205, 668, 206, 0, 207, 208, 209, 264, 705,
	0, 0, 210, 0, 0, 0, 0, 211, 212, 213,
	214, 623, 0, 654, 643, 644, 641, 642, 633, 0,
	0, 0, 619, 620, 0, 0, 0, 0, 621, 86,
	87, 629, 88, 0, 0, 0, 632, 670, 636, 0,
	0, 0, 89, 90, 91, 216, 685, 218, 686, 92,
	687, 688, 0, 93, 222, 223, 94, 639, 669, 689,
	690, 226, 0, 681, 0, 662, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 299, 102, 103,
	0, 663, 665, 0, 664, 666, 104, 105, 269, 106,
	691, 107, 692, 693, 0, 108, 0, 109, 0, 0,
	0, 684, 111, 0, 112, 0, 0, 0, 627, 113,
	114, 671, 672, 650, 0, 0, 115, 116, 694, 0,
	117, 0, 118, 0, 1292, 300, 0, 119, 682, 0,
	236, 0, 120, 121, 122, 123, 678, 680, 302, 0,
	127, 0, 124, 0, 301, 125, 695, 126, 696, 697,
	698, 0, 661, 0, 303, 128, 304, 129, 130, 0,
	132, 131, 0, 683, 305, 133, 306, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 307,
	141, 142, 144, 143, 622, 0, 651, 679, 145, 699,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 308, 151, 309, 673, 152, 153, 154, 155, 0,
	674, 156, 251, 157, 0, 158, 159, 160, 700, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 310, 174, 175, 628, 176, 0,
	177, 178, 179, 180, 0, 254, 181, 182, 667, 183,
	184, 311, 185, 701, 256, 186, 0, 192, 187, 188,
	189, 191, 702, 190, 675, 0, 193, 0, 194, 195,
	196, 197, 0, 259, 703, 704, 0, 0, 198, 676,
	677, 649, 199, 200, 201, 202, 0, 0, 203, 204,
	205, 668, 206, 0, 207, 208, 209, 264, 705, 0,
	0, 210, 0, 0, 0, 0, 211, 212, 213, 214,
	623, 0, 654, 643, 644, 641, 642, 633, 0, 0,
	0, 619, 620, 0, 0, 0, 0, 621, 86, 87,
	629, 88, 0, 0, 0, 632, 670, 636, 0, 0,
	0, 89, 90, 91, 216, 685, 218, 686, 92, 687,
	688, 0, 93, 222, 223, 94, 639, 669, 689, 690,
	226, 0, 681, 0, 662, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 299, 102, 103, 0,
	663, 665, 0, 664, 666, 104, 105, 269, 106, 691,
	107, 692, 693, 0, 108, 0, 109, 0, 0, 0,
	684, 111, 0, 112, 0, 0, 0, 627, 113, 114,
	671, 672, 650, 0, 0, 115, 116, 694, 0, 117,
	0, 118, 0, 0, 300, 0, 119, 682, 0, 236,
	0, 120, 121, 122, 123, 678, 680, 302, 0, 127,
	0, 124, 0, 301, 125, 695, 126, 696, 697, 698,
	0, 661, 0, 303, 128, 304, 129, 130, 0, 132,
	131, 0, 683, 305, 133, 306, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 307, 141,
	142, 144, 143, 622, 0, 651, 679, 145, 699, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	308, 151, 309, 673, 152, 153, 154, 155, 0, 674,
	156, 251, 157, 0, 158, 159, 160, 700, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 310, 174, 175, 628, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 667, 183, 184,
	311, 185, 701, 256, 186, 0, 192, 187, 188, 189,
	191, 702, 190, 675, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 703, 704, 0, 0, 198, 676, 677,
	649, 199, 200, 201, 202, 0, 0, 203, 204, 205,
	668, 206, 0, 207, 208, 209, 264, 705, 0, 0,
	210, 0, 0, 0, 0, 211, 212, 213, 214, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	619, 620, 0, 0, 0, 0, 621, 0, 0, 629,
	1235, 0, 0, 0, 632, 654, 643, 644, 641, 642,
	633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 670,
	636, 0, 0, 0, 89, 90, 91, 216, 685, 218,
	686, 92, 687, 688, 0, 93, 222, 223, 94, 639,
	669, 689, 690, 226, 0, 681, 0, 662, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 299,
	102, 103, 0, 663, 665, 0, 664, 666, 104, 105,
	269, 106, 691, 107, 692, 693, 0, 108, 0, 109,
	0, 0, 0, 684, 111, 0, 112, 0, 0, 0,
	627, 113, 114, 671, 672, 650, 0, 0, 115, 116,
	694, 0, 117, 0, 118, 0, 0, 300, 0, 119,
	682, 0, 236, 0, 120, 121, 122, 123, 678, 680,
	302, 0, 127, 0, 124, 0, 301, 125, 695, 126,
	696, 697, 698, 0, 661, 0, 303, 128, 304, 129,
	130, 0, 132, 131, 0, 683, 305, 133, 306, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 307, 141, 142, 144, 143, 622, 0, 651, 679,
	145, 699, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 308, 151, 309, 673, 152, 153, 154,
	155, 0, 674, 156, 251, 157, 0, 158, 159, 160,
	700, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 310, 174, 175, 628,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	667, 183, 184, 311, 185, 701, 256, 186, 0, 192,
	187, 188, 189, 191, 702, 190, 675, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 703, 704, 0, 0,
	198, 676, 677, 649, 199, 200, 201, 202, 0, 0,
	203, 204, 205, 668, 206, 0, 207, 208, 209, 264,
	705, 0, 0, 210, 0, 0, 0, 0, 211, 212,
	213, 214, 623, 0, 0, 0, 0, 654, 643, 644,
	641, 642, 633, 619, 620, 617, 0, 0, 0, 621,
	0, 0, 629, 86, 87, 901, 88, 632, 0, 0,
	0, 670, 636, 0, 0, 0, 89, 90, 91, 216,
	685, 218, 686, 92, 687, 688, 0, 93, 222, 223,
	94, 639, 669, 689, 690, 226, 0, 681, 0, 662,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 299, 102, 103, 0, 663, 665, 0, 664, 666,
	104, 105, 269, 106, 691, 107, 692, 693, 0, 108,
	0, 109, 0, 0, 0, 684, 111, 0, 112, 0,
	0, 0, 627, 113, 114, 671, 672, 650, 0, 0,
	115, 116, 694, 0, 117, 0, 118, 0, 0, 300,
	0, 119, 682, 0, 236, 0, 120, 121, 122, 123,
	678, 680, 302, 0, 127, 0, 124, 0, 301, 125,
	695, 126, 696, 697, 698, 0, 661, 0, 303, 128,
	304, 129, 130, 0, 132, 131, 0, 683, 305, 133,
	306, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 307, 141, 142, 144, 143, 622, 0,
	651, 679, 145, 699, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 308, 151, 309, 673, 152,
	153, 154, 155, 0, 674, 156, 251, 157, 0, 158,
	159, 160, 700, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 310, 174,
	175, 628, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 667, 183, 184, 311, 185, 701, 256, 186,
	0, 192, 187, 188, 189, 191, 702, 190, 675, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 703, 704,
	0, 0, 198, 676, 677, 649, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 668, 206, 0, 207, 208,
	209, 264, 705, 0, 0, 210, 0, 0, 0, 0,
	211, 212, 213, 214, 623, 0, 654, 643, 644, 641,
	642, 633, 0, 0, 0, 619, 620, 0, 0, 0,
	0, 621, 86, 87, 629, 88, 0, 0, 0, 632,
	670, 636, 0, 0, 0, 89, 90, 91, 216, 685,
	218, 686, 92, 687, 688, 0, 93, 222, 223, 94,
	639, 669, 689, 690, 226, 0, 681, 0, 662, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 2048, 0, 663, 665, 0, 664, 666, 104,
	105, 269, 106, 691, 107, 692, 693, 0, 108, 0,
	109, 0, 0, 0, 684, 111, 0, 112, 0, 0,
	0, 627, 113, 114, 671, 672, 650, 0, 0, 115,
	116, 694, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 682, 0, 236, 0, 120, 121, 122, 123, 678,
	680, 302, 0, 127, 0, 124, 0, 301, 125, 695,
	126, 696, 697, 698, 0, 661, 0, 303, 128, 304,
	129, 130, 0, 132, 131, 0, 683, 305, 133, 306,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 622, 0, 651,
	679, 145, 699, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 673, 152, 153,
	154, 155, 0, 674, 156, 251, 157, 0, 158, 159,
	160, 700, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	628, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 667, 183, 184, 311, 185, 701, 256, 186, 0,
	192, 187, 188, 189, 191, 702, 190, 675, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 703, 704, 0,
	0, 198, 676, 677, 649, 199, 200, 2047, 202, 0,
	0, 203, 204, 205, 668, 206, 0, 207, 208, 209,
	264, 705, 0, 0, 210, 0, 0, 0, 0, 211,
	212, 213, 214, 623, 0, 654, 643, 644, 641, 642,
	633, 0, 0, 0, 619, 620, 0, 0, 0, 0,
	621, 86, 87, 629, 88, 0, 0, 0, 632, 670,
	636, 0, 0, 0, 89, 90, 91, 2046, 685, 218,
	686, 92, 687, 688, 0, 93, 222, 223, 94, 639,
	669, 689, 690, 226, 0, 681, 0, 662, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 299,
	102, 2048, 0, 663, 665, 0, 664, 666, 104, 105,
	269, 106, 691, 107, 692, 693, 0, 108, 0, 109,
	0, 0, 0, 684, 111, 0, 112, 0, 0, 0,
	627, 113, 114, 671, 672, 650, 0, 0, 115, 116,
	694, 0, 117, 0, 118, 0, 0, 300, 0, 119,
	682, 0, 236, 0, 120, 121, 122, 123, 678, 680,
	302, 0, 127, 0, 124, 0, 301, 125, 695, 126,
	696, 697, 698, 0, 661, 0, 303, 128, 304, 129,
	130, 0, 132, 131, 0, 683, 305, 133, 306, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 307, 141, 142, 144, 143, 622, 0, 651, 679,
	145, 699, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 308, 151, 309, 673, 152, 153, 154,
	155, 0, 674, 156, 251, 157, 0, 158, 159, 160,
	700, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 310, 174, 175, 628,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	667, 183, 184, 311, 185, 701, 256, 186, 0, 192,
	187, 188, 189, 191, 702, 190, 675, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 703, 704, 0, 0,
	198, 676, 677, 649, 199, 200, 2047, 202, 0, 0,
	203, 204, 205, 668, 206, 0, 207, 208, 209, 264,
	705, 0, 0, 210, 0, 0, 0, 0, 211, 212,
	213, 214, 623, 0, 654, 643, 644, 641, 642, 633,
	0, 0, 0, 619, 620, 0, 0, 0, 0, 621,
	86, 87, 629, 88, 0, 0, 0, 632, 670, 636,
	0, 0, 0, 89, 90, 91, 216, 685, 218, 686,
	92, 687, 688, 0, 93, 222, 223, 94, 639, 669,
	689, 690, 226, 0, 681, 0, 662, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 299, 102,
	103, 0, 663, 665, 0, 664, 666, 104, 105, 269,
	106, 691, 107, 692, 693, 0, 108, 0, 109, 0,
	0, 0, 684, 111, 0, 112, 0, 0, 0, 627,
	113, 114, 671, 672, 650, 0, 0, 115, 116, 694,
	0, 117, 0, 118, 0, 0, 300, 0, 119, 682,
	0, 236, 0, 120, 121, 122, 123, 678, 680, 302,
	0, 127, 0, 124, 0, 301, 125, 695, 126, 696,
	697, 698, 0, 661, 0, 303, 128, 304, 129, 130,
	0, 132, 131, 0, 683, 305, 133, 306, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	307, 141, 142, 144, 143, 622, 0, 651, 679, 145,
	699, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 308, 151, 309, 673, 152, 153, 154, 155,
	0, 674, 156, 251, 157, 0, 158, 159, 160, 700,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 310, 174, 175, 628, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 667,
	183, 184, 311, 185, 701, 256, 186, 0, 192, 187,
	188, 189, 191, 702, 190, 675, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 703, 704, 0, 0, 198,
	676, 677, 649, 199, 200, 201, 202, 0, 0, 203,
	204, 205, 668, 206, 0, 207, 208, 209, 264, 705,
	0, 0, 210, 0, 0, 0, 0, 211, 212, 213,
	214, 623, 0, 1264, 643, 644, 641, 642, 633, 0,
	0, 0, 619, 620, 0, 0, 0, 0, 621, 86,
	87, 629, 88, 0, 0, 0, 632, 670, 636, 0,
	0, 0, 89, 90, 91, 216, 685, 218, 686, 92,
	687, 688, 0, 93, 222, 223, 94, 639, 669, 689,
	690, 226, 0, 681, 0, 662, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 299, 102, 103,
	0, 663, 665, 0, 664, 666, 104, 105, 269, 106,
	691, 1267, 692, 693, 0, 108, 0, 109, 0, 0,
	0, 684, 111, 0, 112, 0, 0, 0, 627, 113,
	114, 671, 672, 650, 0, 0, 115, 116, 694, 0,
	117, 0, 118, 0, 0, 300, 0, 119, 682, 0,
	236, 0, 120, 121, 1268, 123, 678, 680, 302, 0,
	127, 0, 124, 0, 301, 125, 695, 126, 696, 697,
	698, 0, 661, 0, 303, 128, 304, 129, 130, 0,
	132, 131, 0, 683, 305, 133, 306, 0, 134, 0,
	0, 135, 0, 136, 1269, 1266, 140, 245, 139, 307,
	141, 142, 144, 143, 622, 0, 651, 679, 145, 699,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 308, 151, 309, 673, 152, 153, 154, 155, 0,
	674, 156, 251, 157, 0, 158, 159, 160, 700, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 310, 174, 175, 628, 176, 0,
	177, 178, 179, 1270, 0, 254, 181, 182, 667, 183,
	184, 311, 185, 701, 256, 186, 0, 192, 187, 188,
	189, 191, 702, 190, 675, 0, 193, 0, 194, 195,
	196, 197, 0, 259, 703, 704, 0, 0, 198, 676,
	677, 649, 199, 200, 201, 202, 0, 0, 203, 204,
	205, 668, 206, 0, 207, 208, 209, 264, 705, 0,
	0, 210, 0, 0, 0, 0, 211, 212, 1265, 214,
	623, 0, 654, 643, 644, 641, 642, 633, 0, 0,
	0, 619, 620, 0, 0, 0, 0, 621, 86, 87,
	629, 88, 0, 0, 0, 632, 670, 636, 0, 0,
	0, 89, 90, 91, 216, 685, 218, 686, 92, 687,
	688, 0, 93, 222, 223, 94, 639, 669, 689, 690,
	226, 0, 681, 0, 662, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 299, 102, 103, 0,
	663, 665, 0, 664, 666, 104, 105, 269, 106, 691,
	107, 692, 693, 0, 108, 0, 109, 0, 0, 0,
	684, 111, 0, 112, 0, 0, 0, 627, 113, 114,
	671, 672, 650, 0, 0, 115, 116, 694, 0, 117,
	0, 118, 0, 0, 300, 0, 119, 682, 0, 236,
	0, 120, 121, 122, 123, 678, 680, 302, 0, 127,
	0, 124, 0, 301, 125, 695, 126, 696, 697, 698,
	0, 661, 0, 303, 128, 304, 129, 130, 0, 132,
	131, 0, 683, 305, 133, 306, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 307, 141,
	142, 144, 143, 0, 0, 651, 679, 145, 699, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	308, 151, 309, 673, 152, 153, 154, 155, 0, 674,
	156, 251, 157, 0, 158, 159, 160, 700, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 310, 174, 175, 1282, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 667, 183, 184,
	311, 185, 701, 256, 186, 0, 192, 187, 188, 189,
	191, 702, 190, 675, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 703, 704, 0, 0, 198, 676, 677,
	649, 199, 200, 201, 202, 0, 0, 203, 204, 205,
	668, 206, 0, 207, 208, 209, 264, 705, 0, 0,
	210, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 654, 643, 644, 641, 642, 633, 0, 0, 0,
	1278, 1279, 0, 0, 0, 0, 1280, 86, 87, 1281,
	88, 0, 0, 0, 632, 670, 636, 0, 0, 0,
	89, 90, 91, 0, 685, 218, 686, 92, 687, 688,
	0, 93, 222, 223, 94, 639, 669, 689, 690, 226,
	0, 681, 0, 662, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 2048, 0, 663,
	665, 0, 664, 666, 104, 105, 269, 106, 691, 107,
	692, 693, 0, 108, 0, 109, 0, 0, 0, 684,
	111, 0, 112, 0, 0, 0, 627, 113, 114, 671,
	672, 650, 0, 0, 115, 116, 694, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 682, 0, 236, 0,
	120, 121, 122, 123, 678, 680, 0, 0, 127, 0,
	124, 0, 301, 125, 695, 126, 696, 697, 698, 0,
	661, 0, 0, 128, 304, 129, 130, 0, 132, 131,
	0, 683, 305, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 622, 0, 651, 679, 145, 699, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 673, 152, 153, 154, 155, 0, 674, 156,
	251, 157, 0, 158, 159, 160, 700, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 628, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 667, 183, 184, 0,
	185, 701, 256, 186, 0, 192, 187, 188, 189, 191,
	702, 190, 675, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 703, 704, 0, 0, 198, 676, 677, 649,
	199, 200, 2047, 202, 0, 0, 203, 204, 205, 668,
	206, 0, 207, 208, 209, 264, 705, 0, 0, 210,
	0, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	654, 643, 644, 641, 642, 633, 0, 0, 0, 619,
	620, 0, 0, 0, 0, 621, 86, 87, 629, 88,
	0, 0, 0, 632, 670, 636, 0, 0, 0, 89,
	90, 91, 216, 685, 218, 686, 92, 687, 688, 0,
	93, 222, 223, 94, 0, 669, 689, 690, 226, 0,
	681, 0, 662, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 299, 102, 103, 0, 663, 665,
	0, 664, 666, 104, 105, 269, 106, 691, 107, 692,
	693, 0, 108, 0, 109, 0, 0, 0, 684, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 671, 672,
	650, 0, 0, 115, 116, 694, 0, 117, 0, 118,
	0, 0, 300, 0, 119, 682, 0, 236, 0, 120,
	121, 122, 123, 678, 680, 302, 0, 127, 0, 124,
	0, 301, 125, 695, 126, 696, 697, 698, 0, 661,
	0, 303, 128, 304, 129, 130, 0, 132, 131, 0,
	683, 305, 133, 306, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 307, 141, 142, 144,
	143, 0, 0, 651, 679, 145, 699, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 308, 151,
	309, 673, 152, 153, 154, 155, 0, 674, 156, 251,
	157, 0, 158, 159, 160, 700, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 310, 174, 175, 1282, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 667, 183, 184, 311, 185,
	701, 256, 186, 0, 192, 187, 188, 189, 191, 702,
	190, 675, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 703, 704, 0, 0, 198, 676, 677, 649, 199,
	200, 201, 202, 654, 0, 203, 204, 205, 668, 206,
	0, 207, 208, 209, 264, 705, 0, 0, 210, 86,
	87, 0, 88, 211, 212, 213, 214, 670, 0, 0,
	0, 0, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 0, 93, 222, 223, 94, 1281, 669, 224,
	225, 226, 632, 681, 0, 662, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 299, 102, 103,
	0, 663, 665, 0, 664, 666, 104, 105, 269, 106,
	228, 107, 229, 230, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 231, 113,
	114, 671, 672, 0, 0, 0, 115, 116, 234, 0,
	117, 0, 118, 0, 0, 300, 0, 119, 682, 0,
	236, 0, 120, 121, 122, 123, 678, 680, 302, 0,
	127, 0, 124, 0, 301, 125, 239, 126, 240, 241,
	242, 0, 243, 0, 303, 128, 304, 129, 130, 0,
	132, 131, 0, 683, 305, 133, 306, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 307,
	141, 142, 144, 143, 0, 0, 0, 679, 145, 247,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 308, 151, 309, 673, 152, 153, 154, 155, 0,
	674, 156, 251, 157, 0, 158, 159, 160, 252, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 310, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 0, 254, 181, 182, 667, 183,
	184, 311, 185, 255, 256, 186, 0, 192, 187, 188,
	189, 191, 257, 190, 675, 0, 193, 0, 194, 195,
	196, 197, 0, 259, 260, 261, 0, 0, 198, 676,
	677, 0, 199, 200, 201, 202, 529, 0, 203, 204,
	205, 668, 206, 0, 207, 208, 209, 264, 265, 0,
	0, 210, 86, 87, 0, 88, 211, 212, 213, 214,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	1549, 0, 224, 225, 226, 0, 227, 0, 298, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 302, 0, 127, 0, 124, 0, 301, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 303, 128, 304,
	129, 130, 0, 132, 131, 0, 244, 305, 133, 306,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 67, 254, 181,
	182, 0, 183, 184, 311, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	69, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 0,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	533, 265, 0, 0, 210, 0, 0, 0, 65, 211,
	212, 213, 214, 0, 66, 529, 741, 0, 849, 846,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 64, 88, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 89, 90, 91, 216, 217, 218,
	219, 92, 220, 221, 0, 93, 222, 223, 94, 0,
	0, 224, 225, 226, 0, 227, 0, 298, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 299,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	269, 106, 228, 107, 229, 230, 852, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 232, 233, 843, 0, 0, 115, 116,
	234, 0, 117, 0, 118, 0, 0, 300, 0, 119,
	235, 0, 236, 0, 120, 121, 122, 123, 237, 238,
	302, 0, 127, 0, 124, 0, 301, 125, 239, 126,
	240, 241, 242, 0, 243, 0, 303, 128, 304, 129,
	130, 0, 132, 131, 0, 244, 305, 133, 306, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 307, 141, 142, 144, 143, 0, 0, 0, 246,
	145, 247, 146, 147, 0, 148, 844, 0, 149, 0,
	0, 150, 248, 308, 151, 309, 249, 152, 153, 154,
	155, 0, 250, 156, 251, 157, 0, 158, 159, 160,
	252, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 310, 174, 175, 253,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	0, 183, 184, 311, 185, 255, 256, 186, 0, 192,
	187, 188, 189, 191, 257, 190, 258, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 260, 261, 0, 0,
	198, 262, 263, 842, 199, 200, 201, 202, 0, 0,
	203, 204, 205, 0, 206, 0, 207, 208, 209, 264,
	265, 529, 741, 210, 849, 846, 841, 0, 211, 212,
	213, 214, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 850, 847, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 298, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 837, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 843, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 302, 0, 127, 0,
	124, 0, 301, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 303, 128, 304, 129, 130, 0, 132, 131,
	0, 244, 305, 133, 306, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 844, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 311,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 842,
	199, 200, 201, 202, 0, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 529, 741, 210,
	849, 846, 841, 0, 211, 212, 213, 214, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 850,
	847, 215, 0, 0, 0, 0, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 0, 227, 0, 298,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 299, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 269, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 843, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 0, 0, 300,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	237, 238, 302, 0, 127, 0, 124, 0, 301, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 303, 128,
	304, 129, 130, 0, 132, 131, 0, 244, 305, 133,
	306, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 307, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 844, 0,
	149, 0, 0, 150, 248, 308, 151, 309, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 0, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 310, 174,
	175, 253, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 0, 183, 184, 311, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 260, 261,
	0, 0, 198, 262, 263, 842, 199, 200, 201, 202,
	0, 0, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 264, 265, 83, 0, 210, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 850, 847, 215, 0, 0,
	0, 0, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 0, 93, 222, 223, 94, 0, 0, 224,
	225, 226, 0, 227, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 269, 106,
	228, 107, 229, 230, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 231, 113,
	114, 232, 233, 0, 0, 0, 115, 116, 234, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 235, 0,
	236, 0, 120, 121, 122, 123, 237, 238, 0, 0,
	127, 0, 124, 0, 0, 125, 239, 126, 240, 241,
	242, 0, 243, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 244, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 246, 145, 247,
	146, 147, 0, 148, 0, 483, 149, 0, 0, 150,
	248, 0, 151, 0, 249, 152, 153, 154, 155, 0,
	250, 156, 251, 157, 0, 158, 159, 160, 252, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 67, 254, 181, 182, 0, 183,
	184, 0, 185, 255, 256, 186, 0, 192, 187, 188,
	189, 191, 257, 190, 258, 0, 193, 69, 194, 195,
	196, 197, 0, 259, 260, 261, 0, 0, 198, 262,
	263, 0, 199, 200, 201, 202, 0, 0, 203, 204,
	205, 0, 206, 0, 207, 208, 209, 533, 265, 0,
	0, 210, 83, 0, 0, 65, 211, 212, 213, 214,
	0, 66, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 215, 0, 1159, 0,
	1164, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 0, 227, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 269, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 0, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 237, 238, 0, 0, 127,
	0, 124, 0, 0, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 244, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 0, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	0, 151, 0, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 0, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 253, 176, 0, 177,
	178, 179, 180, 67, 254, 181, 182, 0, 183, 184,
	0, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 69, 194, 195, 196,
	197, 0, 259, 260, 261, 0, 0, 198, 262, 263,
	0, 199, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 533, 265, 0, 0,
	210, 83, 0, 0, 65, 211, 212, 213, 214, 0,
	66, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 215, 0, 0, 0, 64,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 0, 0, 127, 0,
	124, 0, 0, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 244, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 483, 149, 0, 0, 150, 248, 0,
	151, 0, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 0,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 0, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	83, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 215, 0, 1159, 0, 1164, 89,
	90, 91, 216, 217, 218, 219, 92, 220, 221, 0,
	93, 222, 223, 94, 0, 0, 224, 225, 226, 0,
	227, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 269, 106, 228, 107, 229,
	230, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 232, 233,
	0, 0, 0, 115, 116, 234, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 235, 0, 236, 0, 120,
	121, 122, 123, 237, 238, 0, 0, 127, 0, 124,
	0, 0, 125, 239, 126, 240, 241, 242, 0, 243,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	244, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 0, 141, 142, 144,
	143, 0, 0, 0, 246, 145, 247, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 0, 151,
	0, 249, 152, 153, 154, 155, 0, 250, 156, 251,
	157, 0, 158, 159, 160, 252, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 253, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 0, 183, 184, 0, 185,
	255, 256, 186, 0, 192, 187, 188, 189, 191, 257,
	190, 258, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 260, 261, 0, 0, 198, 262, 263, 0, 199,
	200, 201, 202, 83, 0, 203, 204, 205, 0, 206,
	0, 207, 208, 209, 264, 265, 0, 0, 210, 86,
	87, 0, 88, 211, 212, 213, 214, 215, 0, 0,
	0, 0, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 0, 93, 222, 223, 94, 0, 749, 224,
	225, 226, 0, 227, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 269, 106,
	228, 107, 229, 230, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 231, 113,
	114, 232, 233, 0, 0, 0, 115, 116, 234, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 235, 0,
	236, 0, 120, 121, 122, 123, 237, 238, 0, 0,
	127, 0, 124, 0, 0, 125, 239, 126, 240, 241,
	242, 0, 243, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 244, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 246, 145, 247,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 0, 151, 0, 249, 152, 153, 154, 155, 0,
	250, 156, 251, 157, 0, 158, 159, 160, 252, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 0, 254, 181, 182, 0, 183,
	184, 0, 185, 255, 256, 186, 0, 192, 187, 188,
	189, 191, 257, 190, 258, 0, 193, 0, 194, 195,
	196, 197, 0, 259, 260, 261, 0, 0, 198, 262,
	263, 0, 199, 200, 201, 202, 83, 0, 203, 204,
	205, 0, 206, 0, 207, 208, 209, 264, 265, 0,
	0, 210, 86, 87, 0, 88, 211, 212, 213, 214,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	1070, 0, 224, 225, 226, 0, 227, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 0, 0, 127, 0, 124, 0, 0, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 244, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 0, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 0, 151, 0, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 0, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 83,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 86, 87, 0, 88, 211,
	212, 213, 214, 215, 0, 0, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 1669, 0, 224, 225, 226, 0, 227,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	0, 0, 115, 116, 234, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 237, 238, 0, 0, 127, 0, 124, 0,
	0, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 244,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 0, 151, 0,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	0, 158, 159, 160, 252, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 183, 184, 0, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 0, 0, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 0, 210, 0, 0,
	0, 0, 211, 212, 213, 214, 654, 643, 644, 641,
	642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 716, 0, 0, 0,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 685,
	218, 686, 92, 687, 688, 0, 93, 222, 223, 94,
	0, 0, 689, 690, 226, 0, 227, 0, 298, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	299, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 691, 107, 692, 693, 0, 108, 0,
	109, 0, 0, 0, 684, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 650, 0, 0, 115,
	116, 694, 0, 117, 0, 118, 0, 0, 300, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 302, 0, 127, 0, 124, 0, 301, 125, 695,
	126, 696, 697, 698, 0, 661, 0, 303, 128, 304,
	129, 130, 0, 132, 131, 0, 244, 305, 133, 306,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 307, 141, 142, 144, 143, 0, 0, 651,
	246, 145, 699, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 308, 151, 309, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 700, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 310, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 311, 185, 701, 256, 186, 0,
	192, 187, 188, 189, 191, 702, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 703, 704, 0,
	0, 198, 262, 263, 649, 199, 200, 201, 202, 529,
	741, 203, 204, 205, 739, 206, 0, 207, 208, 209,
	264, 705, 0, 0, 210, 86, 87, 0, 88, 211,
	212, 213, 214, 215, 0, 0, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 0, 0, 224, 225, 226, 0, 227,
	0, 298, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 299, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	0, 0, 115, 116, 234, 0, 117, 0, 118, 0,
	0, 300, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 237, 238, 302, 0, 127, 0, 124, 0,
	301, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	303, 128, 304, 129, 130, 0, 132, 131, 0, 244,
	305, 133, 306, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 307, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 308, 151, 309,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	0, 158, 159, 160, 252, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	310, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 183, 184, 311, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 83, 0, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 0, 210, 86, 87,
	0, 88, 211, 212, 213, 214, 215, 0, 0, 0,
	0, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 0, 227, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 79, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 0, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 237, 238, 0, 0, 127,
	0, 124, 0, 0, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 244, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 0, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	0, 151, 0, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 0, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 253, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 0, 183, 184,
	0, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 78, 194, 195, 196,
	197, 0, 259, 260, 261, 0, 0, 198, 262, 263,
	0, 199, 200, 201, 202, 0, 0, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 264, 265, 0, 0,
	210, 529, 741, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 82, 0, 0, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 298, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 302, 0, 127, 0,
	124, 0, 301, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 303, 128, 304, 129, 130, 0, 132, 131,
	0, 244, 305, 133, 306, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 311,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 83, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	86, 87, 0, 88, 211, 212, 213, 214, 215, 0,
	0, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 0, 0,
	224, 225, 226, 0, 227, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 0, 0, 115, 116, 234,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 237, 238, 0,
	0, 127, 0, 124, 0, 0, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 244, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	0, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 0, 151, 0, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 0, 158, 159, 160, 252,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	183, 184, 0, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 0, 0, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 529, 210, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 82, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 298, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 299, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 300, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 302, 0, 127, 0,
	124, 0, 301, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 303, 128, 304, 129, 130, 0, 132, 131,
	0, 244, 305, 133, 306, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 307, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 308,
	151, 309, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 310, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 311,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 83, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	86, 87, 0, 88, 211, 212, 213, 214, 215, 0,
	0, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 0, 0,
	224, 225, 226, 1031, 227, 0, 0, 0, 95, 96,
	97, 0, 98, 1029, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 1135, 0, 115, 116, 234,
	0, 117, 0, 118, 1034, 0, 0, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 237, 238, 0,
	0, 127, 1133, 124, 0, 0, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 244, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	0, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 0, 151, 0, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 1033, 158, 159, 160, 252,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	183, 184, 0, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 83, 1134, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 0, 210, 86, 87, 0, 88, 211, 212, 213,
	214, 215, 0, 0, 0, 0, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 1031, 227, 0, 0,
	1026, 95, 96, 97, 0, 98, 1029, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 269, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 0, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 1034, 0, 0,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	1025, 238, 0, 0, 127, 0, 124, 0, 0, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 244, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 0, 151, 0, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 1033, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 253, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 0, 183, 184, 0, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 260, 261,
	0, 0, 198, 262, 263, 0, 199, 200, 201, 202,
	83, 1032, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 264, 265, 0, 0, 210, 86, 87, 0, 88,
	211, 212, 213, 214, 215, 0, 1636, 0, 0, 89,
	90, 91, 216, 217, 218, 219, 92, 220, 221, 0,
	93, 222, 223, 94, 0, 0, 224, 225, 226, 0,
	227, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 269, 106, 228, 107, 229,
	230, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 232, 233,
	0, 0, 0, 115, 116, 234, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 235, 0, 236, 0, 120,
	121, 122, 123, 237, 238, 0, 0, 127, 0, 124,
	0, 0, 125, 239, 126, 240, 241, 242, 0, 243,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	244, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 0, 141, 142, 144,
	143, 0, 0, 0, 246, 145, 247, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 0, 151,
	0, 249, 152, 153, 154, 155, 0, 250, 156, 251,
	157, 0, 158, 159, 160, 252, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 253, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 0, 183, 184, 0, 185,
	255, 256, 186, 0, 192, 187, 188, 189, 191, 257,
	190, 258, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 260, 261, 0, 0, 198, 262, 263, 0, 199,
	200, 201, 202, 83, 0, 203, 204, 205, 0, 206,
	0, 207, 208, 209, 264, 265, 0, 0, 210, 86,
	87, 0, 88, 211, 212, 213, 214, 215, 0, 0,
	0, 0, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 0, 93, 222, 223, 94, 0, 0, 224,
	225, 226, 0, 227, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 269, 106,
	228, 107, 229, 230, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 231, 113,
	114, 232, 233, 0, 0, 0, 115, 116, 234, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 235, 0,
	236, 0, 120, 121, 122, 123, 237, 238, 0, 0,
	127, 0, 124, 0, 0, 125, 239, 126, 240, 241,
	242, 0, 243, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 244, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 246, 145, 247,
	146, 147, 0, 148, 0, 483, 149, 0, 0, 150,
	248, 0, 151, 0, 249, 152, 153, 154, 155, 0,
	250, 156, 251, 157, 0, 158, 159, 160, 252, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 0, 254, 181, 182, 0, 183,
	184, 0, 185, 255, 256, 186, 0, 192, 187, 188,
	189, 191, 257, 190, 258, 0, 193, 0, 194, 195,
	196, 197, 0, 259, 260, 261, 0, 0, 198, 262,
	263, 0, 199, 200, 201, 202, 83, 0, 203, 204,
	205, 0, 206, 0, 207, 208, 209, 264, 265, 0,
	0, 210, 86, 87, 0, 88, 211, 212, 213, 214,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 774,
	238, 0, 0, 127, 0, 124, 0, 0, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 244, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 0, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 483, 149,
	0, 0, 150, 248, 0, 151, 0, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 0, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 83,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 86, 87, 541, 88, 211,
	212, 213, 214, 215, 0, 0, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 0, 0, 224, 225, 226, 0, 227,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	0, 0, 115, 116, 234, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 237, 238, 0, 0, 127, 0, 124, 0,
	0, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 244,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 0, 151, 0,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	0, 158, 159, 160, 252, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 183, 184, 0, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 83, 0, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 0, 210, 86, 87,
	0, 88, 211, 212, 213, 214, 215, 0, 0, 0,
	0, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 0, 227, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 269, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 0, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 495, 238, 0, 0, 127,
	0, 124, 0, 0, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 244, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 0, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 0, 483, 149, 0, 0, 150, 248,
	0, 151, 0, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 0, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 253, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 0, 183, 184,
	0, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 260, 261, 0, 0, 198, 262, 263,
	0, 199, 200, 201, 202, 83, 0, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 264, 265, 0, 0,
	210, 86, 87, 0, 88, 211, 212, 213, 214, 215,
	0, 0, 0, 0, 89, 90, 91, 216, 217, 218,
	219, 92, 220, 221, 0, 93, 222, 223, 94, 0,
	0, 224, 225, 226, 0, 227, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	269, 106, 228, 107, 229, 230, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 232, 233, 0, 0, 0, 115, 116,
	234, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	235, 0, 236, 0, 120, 121, 122, 123, 488, 238,
	0, 0, 127, 0, 124, 0, 0, 125, 239, 126,
	240, 241, 242, 0, 243, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 244, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 246,
	145, 247, 146, 147, 0, 148, 0, 483, 149, 0,
	0, 150, 248, 0, 151, 0, 249, 152, 153, 154,
	155, 0, 250, 156, 251, 157, 0, 158, 159, 160,
	252, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 253,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	0, 183, 184, 0, 185, 255, 256, 186, 0, 192,
	187, 188, 189, 191, 257, 190, 258, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 260, 261, 0, 0,
	198, 262, 263, 0, 199, 200, 201, 202, 83, 0,
	203, 204, 205, 0, 206, 0, 207, 208, 209, 264,
	265, 0, 0, 210, 86, 87, 397, 88, 211, 212,
	213, 214, 215, 0, 0, 0, 0, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 0, 93, 222,
	223, 94, 0, 0, 224, 225, 226, 0, 227, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 269, 106, 228, 107, 229, 230, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 231, 113, 114, 232, 233, 0, 0,
	0, 115, 116, 234, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 235, 0, 236, 0, 120, 121, 122,
	123, 237, 238, 0, 0, 127, 0, 124, 0, 0,
	125, 239, 126, 240, 241, 242, 0, 243, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 244, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 139, 0, 141, 142, 144, 143, 0,
	0, 0, 246, 145, 247, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 0, 151, 0, 249,
	152, 153, 154, 155, 0, 250, 156, 251, 396, 0,
	158, 159, 160, 252, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 0, 183, 184, 0, 185, 255, 256,
	186, 0, 192, 187, 188, 189, 191, 257, 190, 258,
	0, 193, 0, 194, 195, 196, 197, 0, 259, 260,
	261, 0, 0, 198, 262, 263, 0, 199, 200, 201,
	202, 83, 0, 203, 204, 205, 0, 206, 0, 207,
	208, 209, 264, 265, 0, 0, 210, 86, 87, 0,
	88, 211, 212, 213, 214, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 0, 0, 127, 0,
	124, 0, 0, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 244, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 0,
	151, 0, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 0,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 259, 260, 261, 0, 0, 198, 262, 263, 0,
	199, 200, 201, 202, 83, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	86, 87, 0, 88, 211, 212, 213, 214, 215, 0,
	0, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 0, 0,
	224, 225, 226, 0, 227, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 0, 0, 115, 116, 234,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 1328, 238, 0,
	0, 127, 0, 124, 0, 0, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 244, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	0, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 0, 151, 0, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 0, 158, 159, 160, 252,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	183, 184, 0, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 83, 0, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 0, 210, 86, 87, 0, 88, 211, 212, 213,
	214, 215, 0, 0, 0, 0, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 0, 227, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 269, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 0, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	1326, 238, 0, 0, 127, 0, 124, 0, 0, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 244, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 0, 151, 0, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 0, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 253, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 0, 183, 184, 0, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 260, 261,
	0, 0, 198, 262, 263, 0, 199, 200, 201, 202,
	83, 0, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 264, 265, 0, 0, 210, 86, 87, 0, 88,
	211, 212, 213, 214, 215, 0, 0, 0, 0, 89,
	90, 91, 216, 217, 218, 219, 92, 220, 221, 0,
	93, 222, 223, 94, 0, 0, 224, 225, 226, 0,
	227, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 269, 106, 228, 107, 229,
	230, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 232, 233,
	0, 0, 0, 115, 116, 234, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 235, 0, 236, 0, 120,
	121, 122, 123, 1315, 238, 0, 0, 127, 0, 124,
	0, 0, 125, 239, 126, 240, 241, 242, 0, 243,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	244, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 0, 141, 142, 144,
	143, 0, 0, 0, 246, 145, 247, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 0, 151,
	0, 249, 152, 153, 154, 155, 0, 250, 156, 251,
	157, 0, 158, 159, 160, 252, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 253, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 0, 183, 184, 0, 185,
	255, 256, 186, 0, 192, 187, 188, 189, 191, 257,
	190, 258, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 260, 261, 0, 0, 198, 262, 263, 0, 199,
	200, 201, 202, 83, 0, 203, 204, 205, 0, 206,
	0, 207, 208, 209, 264, 265, 0, 0, 210, 86,
	87, 0, 88, 211, 212, 213, 214, 215, 0, 0,
	0, 0, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 0, 93, 222, 223, 94, 0, 0, 224,
	225, 226, 0, 227, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 269, 106,
	228, 107, 229, 230, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 231, 113,
	114, 232, 233, 0, 0, 0, 115, 116, 234, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 235, 0,
	236, 0, 120, 121, 122, 123, 892, 238, 0, 0,
	127, 0, 124, 0, 0, 125, 239, 126, 240, 241,
	242, 0, 243, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 244, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 246, 145, 247,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 0, 151, 0, 249, 152, 153, 154, 155, 0,
	250, 156, 251, 157, 0, 158, 159, 160, 252, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 0, 254, 181, 182, 0, 183,
	184, 0, 185, 255, 256, 186, 0, 192, 187, 188,
	189, 191, 257, 190, 258, 0, 193, 0, 194, 195,
	196, 197, 0, 259, 260, 261, 0, 0, 198, 262,
	263, 0, 199, 200, 201, 202, 83, 0, 203, 204,
	205, 0, 206, 0, 207, 208, 209, 264, 265, 0,
	0, 210, 86, 87, 0, 88, 211, 212, 213, 214,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 237,
	238, 0, 0, 127, 0, 124, 0, 0, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 244, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 0, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 0, 151, 0, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	253, 176, 0, 177, 411, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 0, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 83,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 86, 87, 0, 88, 211,
	212, 213, 214, 215, 0, 759, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 0, 0, 224, 225, 226, 0, 227,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	0, 0, 115, 116, 234, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 237, 238, 0, 0, 127, 0, 124, 0,
	0, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 244,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 0, 151, 0,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	0, 158, 159, 160, 252, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 0, 184, 0, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 83, 0, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 0, 210, 86, 87,
	0, 88, 211, 212, 213, 214, 215, 0, 0, 0,
	0, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 0, 227, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 269, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 0, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 594, 238, 0, 0, 127,
	0, 124, 0, 0, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 244, 0, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 139, 0, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	0, 151, 0, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 0, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 253, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 182, 0, 183, 184,
	0, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 0, 194, 195, 196,
	197, 0, 259, 260, 261, 0, 0, 198, 262, 263,
	0, 199, 200, 201, 202, 83, 0, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 264, 265, 0, 0,
	210, 86, 87, 0, 88, 211, 212, 213, 214, 215,
	0, 0, 0, 0, 89, 90, 91, 216, 217, 218,
	219, 92, 220, 221, 0, 93, 222, 223, 94, 0,
	0, 224, 225, 226, 0, 227, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	269, 106, 228, 107, 229, 230, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 232, 233, 0, 0, 0, 115, 116,
	234, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	235, 0, 236, 0, 120, 121, 122, 123, 589, 238,
	0, 0, 127, 0, 124, 0, 0, 125, 239, 126,
	240, 241, 242, 0, 243, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 244, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 246,
	145, 247, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 0, 151, 0, 249, 152, 153, 154,
	155, 0, 250, 156, 251, 157, 0, 158, 159, 160,
	252, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 253,
	176, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	0, 183, 184, 0, 185, 255, 256, 186, 0, 192,
	187, 188, 189, 191, 257, 190, 258, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 260, 261, 0, 0,
	198, 262, 263, 0, 199, 200, 201, 202, 83, 0,
	203, 204, 205, 0, 206, 0, 207, 208, 209, 264,
	265, 0, 0, 210, 86, 87, 0, 88, 211, 212,
	213, 214, 215, 0, 0, 0, 0, 89, 90, 91,
	216, 217, 218, 219, 92, 220, 221, 0, 93, 222,
	223, 94, 0, 0, 224, 225, 547, 0, 227, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 269, 106, 228, 107, 229, 230, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 231, 113, 114, 232, 233, 0, 0,
	0, 115, 116, 234, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 235, 0, 236, 0, 120, 121, 122,
	123, 237, 238, 0, 0, 127, 0, 124, 0, 0,
	125, 239, 126, 240, 241, 242, 0, 243, 0, 0,
	128, 0, 129, 130, 0, 132, 131, 0, 244, 0,
	133, 0, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 245, 422, 0, 141, 142, 144, 143, 0,
	0, 0, 246, 145, 247, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 248, 0, 151, 0, 249,
	152, 153, 154, 155, 0, 250, 156, 251, 157, 0,
	158, 159, 160, 252, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 0,
	174, 175, 253, 176, 0, 177, 178, 179, 180, 0,
	254, 181, 182, 0, 183, 184, 0, 185, 255, 256,
	186, 0, 192, 187, 188, 189, 191, 257, 190, 258,
	0, 193, 0, 194, 195, 196, 197, 0, 421, 260,
	261, 0, 0, 417, 262, 263, 0, 199, 200, 201,
	202, 83, 0, 203, 204, 205, 0, 206, 0, 207,
	208, 209, 264, 265, 0, 0, 210, 86, 87, 0,
	88, 211, 212, 213, 214, 215, 0, 0, 0, 0,
	89, 90, 91, 216, 217, 218, 219, 92, 220, 221,
	0, 93, 222, 223, 94, 0, 0, 224, 225, 226,
	0, 227, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 269, 106, 228, 107,
	229, 230, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 231, 113, 114, 232,
	233, 0, 0, 0, 115, 116, 234, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 235, 0, 236, 0,
	120, 121, 122, 123, 237, 238, 0, 0, 127, 0,
	124, 0, 0, 125, 239, 126, 240, 241, 242, 0,
	243, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 244, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 245, 422, 0, 141, 142,
	144, 143, 0, 0, 0, 246, 145, 247, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 248, 0,
	151, 0, 249, 152, 153, 154, 155, 0, 250, 156,
	251, 157, 0, 158, 159, 160, 252, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 253, 176, 0, 177, 178,
	179, 180, 0, 254, 181, 182, 0, 183, 184, 0,
	185, 255, 256, 186, 0, 192, 187, 188, 189, 191,
	257, 190, 258, 0, 193, 0, 194, 195, 196, 197,
	0, 421, 260, 261, 0, 0, 417, 262, 263, 0,
	199, 200, 201, 202, 83, 0, 203, 204, 205, 0,
	206, 0, 207, 208, 209, 264, 265, 0, 0, 210,
	86, 87, 0, 88, 211, 212, 213, 214, 215, 0,
	0, 0, 0, 89, 90, 91, 216, 217, 218, 219,
	92, 220, 221, 0, 93, 222, 223, 94, 0, 0,
	224, 225, 226, 0, 227, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 269,
	106, 228, 107, 229, 230, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 231,
	113, 114, 232, 233, 0, 0, 0, 115, 116, 234,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 235,
	0, 236, 0, 120, 121, 122, 123, 525, 238, 0,
	0, 127, 0, 124, 0, 0, 125, 239, 126, 240,
	241, 242, 0, 243, 0, 0, 128, 0, 129, 130,
	0, 132, 131, 0, 244, 0, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 245, 139,
	0, 141, 142, 144, 143, 0, 0, 0, 246, 145,
	247, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 248, 0, 151, 0, 249, 152, 153, 154, 155,
	0, 250, 156, 251, 157, 0, 158, 159, 160, 252,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 0, 174, 175, 253, 176,
	0, 177, 178, 179, 180, 0, 254, 181, 182, 0,
	183, 184, 0, 185, 255, 256, 186, 0, 192, 187,
	188, 189, 191, 257, 190, 258, 0, 193, 0, 194,
	195, 196, 197, 0, 259, 260, 261, 0, 0, 198,
	262, 263, 0, 199, 200, 201, 202, 83, 0, 203,
	204, 205, 0, 206, 0, 207, 208, 209, 264, 265,
	0, 0, 210, 86, 87, 0, 88, 211, 212, 213,
	214, 215, 0, 0, 0, 0, 89, 90, 91, 216,
	217, 218, 219, 92, 220, 221, 0, 93, 222, 223,
	94, 0, 0, 224, 225, 226, 0, 227, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 269, 106, 228, 107, 229, 230, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 231, 113, 114, 232, 233, 0, 0, 0,
	115, 116, 234, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 235, 0, 236, 0, 120, 121, 122, 123,
	522, 238, 0, 0, 127, 0, 124, 0, 0, 125,
	239, 126, 240, 241, 242, 0, 243, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 244, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 245, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 246, 145, 247, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 248, 0, 151, 0, 249, 152,
	153, 154, 155, 0, 250, 156, 251, 157, 0, 158,
	159, 160, 252, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 253, 176, 0, 177, 178, 179, 180, 0, 254,
	181, 182, 0, 183, 184, 0, 185, 255, 256, 186,
	0, 192, 187, 188, 189, 191, 257, 190, 258, 0,
	193, 0, 194, 195, 196, 197, 0, 259, 260, 261,
	0, 0, 198, 262, 263, 0, 199, 200, 201, 202,
	83, 0, 203, 204, 205, 0, 206, 0, 207, 208,
	209, 264, 265, 0, 0, 210, 86, 87, 0, 88,
	211, 212, 213, 214, 215, 0, 0, 0, 0, 89,
	90, 91, 216, 217, 218, 219, 92, 220, 221, 0,
	93, 222, 223, 94, 0, 0, 224, 225, 226, 0,
	227, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 269, 106, 228, 107, 229,
	230, 0, 108, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 231, 113, 114, 232, 233,
	0, 0, 0, 115, 116, 234, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 235, 0, 236, 0, 120,
	121, 122, 123, 519, 238, 0, 0, 127, 0, 124,
	0, 0, 125, 239, 126, 240, 241, 242, 0, 243,
	0, 0, 128, 0, 129, 130, 0, 132, 131, 0,
	244, 0, 133, 0, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 245, 139, 0, 141, 142, 144,
	143, 0, 0, 0, 246, 145, 247, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 248, 0, 151,
	0, 249, 152, 153, 154, 155, 0, 250, 156, 251,
	157, 0, 158, 159, 160, 252, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 0, 174, 175, 253, 176, 0, 177, 178, 179,
	180, 0, 254, 181, 182, 0, 183, 184, 0, 185,
	255, 256, 186, 0, 192, 187, 188, 189, 191, 257,
	190, 258, 0, 193, 0, 194, 195, 196, 197, 0,
	259, 260, 261, 0, 0, 198, 262, 263, 0, 199,
	200, 201, 202, 83, 0, 203, 204, 205, 0, 206,
	0, 207, 208, 209, 264, 265, 0, 0, 210, 86,
	87, 0, 88, 211, 212, 213, 214, 215, 0, 0,
	0, 0, 89, 90, 91, 216, 217, 218, 219, 92,
	220, 221, 0, 93, 222, 223, 94, 0, 0, 224,
	225, 226, 0, 227, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 269, 106,
	228, 107, 229, 230, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 231, 113,
	114, 232, 233, 0, 0, 0, 115, 116, 234, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 235, 0,
	236, 0, 120, 121, 122, 123, 517, 238, 0, 0,
	127, 0, 124, 0, 0, 125, 239, 126, 240, 241,
	242, 0, 243, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 244, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 245, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 246, 145, 247,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	248, 0, 151, 0, 249, 152, 153, 154, 155, 0,
	250, 156, 251, 157, 0, 158, 159, 160, 252, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 253, 176, 0,
	177, 178, 179, 180, 0, 254, 181, 182, 0, 183,
	184, 0, 185, 255, 256, 186, 0, 192, 187, 188,
	189, 191, 257, 190, 258, 0, 193, 0, 194, 195,
	196, 197, 0, 259, 260, 261, 0, 0, 198, 262,
	263, 0, 199, 200, 201, 202, 83, 0, 203, 204,
	205, 0, 206, 0, 207, 208, 209, 264, 265, 0,
	0, 210, 86, 87, 0, 88, 211, 212, 213, 214,
	215, 0, 0, 0, 0, 89, 90, 91, 216, 217,
	218, 219, 92, 220, 221, 0, 93, 222, 223, 94,
	0, 0, 224, 225, 226, 0, 227, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 269, 106, 228, 107, 229, 230, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 231, 113, 114, 232, 233, 0, 0, 0, 115,
	116, 234, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 235, 0, 236, 0, 120, 121, 122, 123, 491,
	238, 0, 0, 127, 0, 124, 0, 0, 125, 239,
	126, 240, 241, 242, 0, 243, 0, 0, 128, 0,
	129, 130, 0, 132, 131, 0, 244, 0, 133, 0,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	245, 139, 0, 141, 142, 144, 143, 0, 0, 0,
	246, 145, 247, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 248, 0, 151, 0, 249, 152, 153,
	154, 155, 0, 250, 156, 251, 157, 0, 158, 159,
	160, 252, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 0, 174, 175,
	253, 176, 0, 177, 178, 179, 180, 0, 254, 181,
	182, 0, 183, 184, 0, 185, 255, 256, 186, 0,
	192, 187, 188, 189, 191, 257, 190, 258, 0, 193,
	0, 194, 195, 196, 197, 0, 259, 260, 261, 0,
	0, 198, 262, 263, 0, 199, 200, 201, 202, 83,
	0, 203, 204, 205, 0, 206, 0, 207, 208, 209,
	264, 265, 0, 0, 210, 86, 87, 0, 88, 211,
	212, 213, 214, 215, 0, 0, 0, 0, 89, 90,
	91, 216, 217, 218, 219, 92, 220, 221, 0, 93,
	222, 223, 94, 0, 0, 224, 225, 226, 0, 227,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 269, 106, 228, 107, 229, 230,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 231, 113, 114, 232, 233, 0,
	0, 0, 115, 116, 234, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 235, 0, 236, 0, 120, 121,
	122, 123, 237, 238, 0, 0, 127, 0, 124, 0,
	0, 125, 239, 126, 240, 241, 242, 0, 243, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 244,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 245, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 246, 145, 247, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 248, 0, 151, 0,
	249, 152, 153, 154, 155, 0, 250, 156, 251, 157,
	0, 158, 159, 160, 252, 472, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 253, 176, 0, 177, 178, 179, 180,
	0, 254, 181, 182, 0, 183, 184, 0, 185, 255,
	256, 186, 0, 192, 187, 188, 189, 191, 257, 190,
	258, 0, 193, 0, 194, 195, 196, 197, 0, 259,
	260, 261, 0, 0, 198, 262, 263, 0, 199, 200,
	201, 202, 83, 0, 203, 204, 205, 0, 206, 0,
	207, 208, 209, 264, 265, 0, 0, 210, 86, 87,
	0, 88, 211, 212, 213, 214, 215, 0, 0, 0,
	0, 89, 90, 91, 216, 217, 218, 219, 92, 220,
	221, 0, 93, 222, 223, 94, 0, 0, 224, 225,
	226, 0, 227, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 269, 106, 228,
	107, 229, 230, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 231, 113, 114,
	232, 233, 0, 0, 0, 115, 116, 234, 0, 117,
	0, 118, 0, 0, 0, 0, 119, 235, 0, 236,
	0, 120, 121, 122, 123, 237, 238, 0, 0, 127,
	0, 124, 0, 0, 125, 239, 126, 240, 241, 242,
	0, 243, 0, 0, 128, 0, 129, 130, 0, 132,
	131, 0, 244, 0, 133, 0, 0, 414, 0, 0,
	135, 0, 136, 137, 138, 140, 245, 422, 0, 141,
	142, 144, 143, 0, 0, 0, 246, 145, 247, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 248,
	0, 151, 0, 249, 152, 153, 154, 155, 0, 250,
	156, 251, 157, 0, 158, 159, 160, 252, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 0, 174, 175, 416, 176, 0, 177,
	178, 179, 180, 0, 254, 181, 415, 0, 183, 184,
	0, 185, 255, 256, 186, 0, 192, 187, 188, 189,
	191, 257, 190, 258, 0, 193, 0, 194, 195, 196,
	197, 0, 421, 260, 261, 0, 0, 417, 262, 263,
	0, 199, 200, 201, 202, 83, 0, 203, 204, 205,
	0, 206, 0, 207, 208, 209, 264, 265, 0, 0,
	210, 86, 87, 0, 88, 211, 212, 213, 214, 215,
	0, 0, 0, 0, 89, 90, 91, 216, 217, 218,
	219, 92, 220, 221, 0, 93, 222, 223, 94, 0,
	0, 224, 225, 226, 0, 227, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	269, 106, 228, 107, 229, 230, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	231, 113, 114, 232, 233, 0, 0, 0, 115, 116,
	234, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	235, 0, 236, 0, 120, 121, 122, 123, 237, 238,
	0, 0, 127, 0, 124, 0, 0, 125, 239, 126,
	240, 241, 242, 0, 243, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 244, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 245,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 246,
	145, 247, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 248, 0, 151, 0, 249, 152, 153, 0,
	155, 0, 250, 156, 251, 157, 0, 158, 0, 160,
	252, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 253,
	0, 0, 177, 178, 179, 180, 0, 254, 181, 182,
	0, 183, 184, 0, 185, 255, 256, 186, 0, 192,
	187, 188, 189, 191, 257, 190, 258, 0, 193, 0,
	194, 195, 196, 197, 0, 259, 260, 261, 0, 0,
	198, 262, 263, 0, 199, 200, 201, 202, 0, 0,
	203, 204, 205, 0, 206, 0, 207, 208, 209, 264,
	265, 0, 0, 210, 0, 0, 0, 0, 211, 212,
	213, 214, 916, 917, 0, 936, 937, 938, 946, 947,
	948, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 919, 916, 917, 950, 936,
	937, 938, 946, 947, 948, 0, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 0, 0, 918, 0, 919,
	0, 0, 950, 933, 0, 0, 0, 0, 916, 917,
	0, 936, 937, 938, 946, 947, 948, 0, 0, 0,
	0, 918, 0, 0, 939, 0, 0, 933, 0, 0,
	0, 919, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 924, 918, 0, 0, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 951, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 1484, 949, 1501, 1502,
	1503, 0, 0, 0, 0, 943, 951, 0, 0, 941,
	0, 0, 0, 0, 0, 934, 0, 0, 924, 0,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 943, 951, 934,
	940, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 941, 0, 0, 0, 0,
	0, 934, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 1489, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 916, 917,
	1504, 936, 937, 938, 946, 947, 948, 0, 935, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 1499, 0,
	944, 919, 0, 942, 950, 0, 930, 931, 932, 0,
	929, 926, 927, 928, 920, 921, 922, 923, 925, 0,
	945, 0, 0, 918, 1930, 0, 0, 942, 0, 933,
	930, 931, 932, 0, 929, 926, 927, 928, 920, 921,
	922, 923, 925, 0, 945, 0, 0, 0, 1926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 930, 931, 932, 1500, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 0, 945, 0, 924, 0,
	1868, 0, 0, 916, 917, 0, 936, 937, 938, 946,
	947, 948, 0, 0, 0, 0, 0, 943, 951, 939,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 950,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 918, 0,
	0, 934, 0, 0, 933, 0, 0, 0, 0, 1495,
	1496, 1497, 0, 1494, 1491, 1492, 1493, 1485, 1486, 1487,
	1488, 1490, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 924, 0, 0, 0, 0, 916, 917,
	0, 936, 937, 938, 946, 947, 948, 0, 935, 0,
	0, 0, 943, 951, 939, 0, 0, 0, 0, 0,
	944, 919, 0, 0, 950, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 918, 0, 0, 934, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 930, 931, 932, 0, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 0, 945, 0, 924, 0,
	1846, 0, 0, 916, 917, 0, 936, 937, 938, 946,
	947, 948, 0, 935, 0, 0, 0, 943, 951, 939,
	0, 0, 0, 0, 0, 944, 919, 0, 0, 950,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 918, 0,
	0, 934, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 930, 931, 932,
	0, 929, 926, 927, 928, 920, 921, 922, 923, 925,
	0, 945, 0, 924, 0, 1845, 0, 0, 916, 917,
	0, 936, 937, 938, 946, 947, 948, 0, 935, 0,
	0, 0, 943, 951, 939, 0, 0, 0, 0, 0,
	944, 919, 0, 0, 950, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 918, 0, 0, 934, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 930, 931, 932, 0, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 0, 945, 0, 924, 0,
	1738, 0, 0, 916, 917, 0, 936, 937, 938, 946,
	947, 948, 0, 935, 0, 0, 0, 943, 951, 939,
	0, 0, 0, 0, 0, 944, 919, 0, 0, 950,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 918, 0,
	0, 934, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 930, 931, 932,
	0, 929, 926, 927, 928, 920, 921, 922, 923, 925,
	0, 945, 0, 924, 0, 1672, 0, 0, 916, 917,
	0, 936, 937, 938, 946, 947, 948, 0, 935, 0,
	0, 0, 943, 951, 939, 0, 0, 0, 0, 0,
	944, 919, 0, 0, 950, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 918, 0, 0, 934, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 930, 931, 932, 0, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 0, 945, 0, 924, 0,
	1656, 0, 0, 916, 917, 0, 936, 937, 938, 946,
	947, 948, 0, 935, 0, 0, 0, 943, 951, 939,
	0, 0, 0, 0, 0, 944, 919, 0, 0, 950,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 918, 0,
	0, 934, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 930, 931, 932,
	0, 929, 926, 927, 928, 920, 921, 922, 923, 925,
	0, 945, 0, 924, 2069, 1236, 0, 0, 0, 916,
	917, 0, 936, 937, 938, 946, 947, 948, 935, 0,
	0, 0, 943, 951, 0, 939, 0, 0, 0, 0,
	944, 0, 919, 954, 0, 950, 0, 0, 949, 916,
	917, 0, 936, 937, 938, 946, 947, 948, 0, 0,
	941, 0, 0, 0, 918, 939, 934, 0, 0, 953,
	933, 0, 919, 0, 0, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 918, 0, 0, 0, 0, 942,
	933, 0, 930, 931, 932, 2068, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 0, 945, 0, 1450, 924,
	0, 1515, 0, 0, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 0, 0, 0, 0, 943, 951,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 924,
	0, 0, 0, 0, 949, 916, 917, 0, 936, 937,
	938, 946, 947, 948, 0, 0, 941, 0, 943, 951,
	0, 939, 934, 0, 0, 0, 1151, 0, 919, 0,
	0, 950, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 940, 0, 0,
	918, 0, 934, 0, 942, 0, 933, 930, 931, 932,
	0, 929, 926, 927, 928, 920, 921, 922, 923, 925,
	0, 945, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 935,
	0, 0, 916, 917, 0, 936, 937, 938, 946, 947,
	948, 944, 0, 0, 0, 924, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 950, 935,
	0, 0, 0, 0, 943, 951, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 918, 0, 0,
	949, 0, 0, 933, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 934, 0,
	942, 0, 0, 930, 931, 932, 0, 929, 926, 927,
	928, 920, 921, 922, 923, 925, 0, 945, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	942, 0, 924, 930, 931, 932, 0, 929, 926, 927,
	928, 920, 921, 922, 923, 925, 0, 945, 0, 0,
	0, 943, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 935, 0, 949, 916, 917,
	0, 936, 937, 938, 946, 947, 948, 944, 0, 941,
	0, 0, 0, 0, 939, 934, 0, 0, 0, 0,
	0, 919, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 467, 0, 918, 0, 0, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 942, 0, 0, 930,
	931, 932, 0, 929, 926, 927, 928, 920, 921, 922,
	923, 925, 935, 945, 0, 916, 917, 0, 936, 937,
	938, 946, 947, 948, 944, 0, 0, 0, 924, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 950, 0, 0, 0, 0, 0, 943, 951, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 949, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 934, 0, 942, 0, 0, 930, 931, 932, 0,
	929, 926, 927, 928, 920, 921, 922, 923, 925, 0,
	945, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 0, 0, 0, 0,
	1521, 916, 917, 0, 936, 937, 938, 946, 947, 948,
	0, 0, 0, 0, 943, 951, 0, 939, 0, 0,
	0, 1516, 0, 0, 919, 0, 0, 950, 935, 0,
	949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 941, 0, 0, 0, 918, 0, 934, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 1660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 924, 930, 931, 932, 0, 929, 926, 927, 928,
	920, 921, 922, 923, 925, 935, 945, 0, 0, 0,
	943, 951, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 949, 916, 917, 0,
	936, 937, 938, 946, 947, 948, 0, 0, 941, 0,
	0, 0, 0, 939, 934, 0, 0, 0, 0, 0,
	919, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 918, 0, 0, 0, 942, 0, 933, 930,
	931, 932, 0, 929, 926, 927, 928, 920, 921, 922,
	923, 925, 0, 945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 0, 0, 916, 917, 0, 936, 937, 938,
	946, 947, 948, 944, 0, 0, 0, 924, 0, 0,
	939, 0, 0, 0, 1474, 0, 0, 919, 0, 0,
	950, 0, 0, 0, 0, 0, 943, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 949, 0, 0, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	934, 0, 942, 0, 0, 930, 931, 932, 0, 929,
	926, 927, 928, 920, 921, 922, 923, 925, 0, 945,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 924, 0, 0, 1481, 0, 916,
	917, 0, 936, 937, 938, 946, 947, 948, 0, 0,
	0, 0, 0, 943, 951, 939, 0, 0, 0, 0,
	0, 0, 919, 0, 0, 950, 0, 935, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 941, 0, 0, 918, 0, 0, 934, 0, 0,
	933, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 942, 924,
	0, 930, 931, 932, 0, 929, 926, 927, 928, 920,
	921, 922, 923, 925, 935, 945, 0, 0, 943, 951,
	0, 0, 0, 0, 916, 917, 944, 936, 937, 938,
	946, 947, 948, 0, 949, 0, 0, 0, 0, 0,
	939, 0, 0, 0, 0, 0, 941, 919, 0, 0,
	950, 0, 934, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 933, 0, 940, 0, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 930, 931,
	932, 0, 929, 926, 927, 928, 920, 921, 922, 923,
	925, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 916, 917, 924, 936, 937, 938, 946, 947,
	948, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 943, 951, 919, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 941, 0, 933, 0, 0, 0, 934, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 930, 931, 932, 0, 929, 926, 927,
	928, 920, 921, 922, 923, 925, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 924, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 951, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 949, 0, 800,
	792, 817, 785, 808, 807, 0, 0, 787, 786, 941,
	0, 0, 819, 818, 0, 934, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 813, 0, 805, 804, 0, 0, 0,
	0, 0, 0, 0, 803, 942, 0, 0, 930, 931,
	932, 0, 929, 926, 927, 928, 920, 921, 922, 923,
	925, 802, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 0, 0, 0, 0, 795,
	794, 796, 797, 798, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 0, 0, 0, 0, 0, 800, 792, 817, 785,
	808, 807, 806, 0, 787, 786, 793, 0, 0, 819,
	818, 0, 0, 942, 0, 0, 930, 931, 932, 0,
	929, 926, 927, 928, 920, 921, 922, 923, 925, 0,
	945, 801, 0, 0, 0, 1170, 1168, 1169, 1172, 1171,
	813, 0, 805, 804, 0, 0, 0, 0, 0, 0,
	0, 803, 0, 0, 0, 0, 0, 0, 790, 0,
	0, 0, 0, 0, 0, 0, 799, 791, 802, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	0, 0, 0, 0, 788, 0, 0, 814, 815, 0,
	0, 0, 0, 0, 0, 0, 795, 794, 796, 797,
	798, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	0, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 790, 0, 0, 0, 0,
	0, 0, 0, 799, 791, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 788, 0, 0, 814, 815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 820,
}
var sqlPact = [...]int{

	297, -1000, -141, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 714, 16258,
	16258, 19837, -1000, -1000, -1000, -1000, -1000, -1000, 746, 659,
	1018, 5644, 19837, 19837, 19564, 1769, 1769, 21202, -1000, -1000,
	24478, -1000, 3367, 485, 488, 485, 485, 507, 21202, 591,
	693, 117, -1000, 910, -29, 24205, 19837, 1333, 24, 18199,
	321, 297, 19291, 23932, 19837, 19018, 559, 20, 16820, 19837,
	-1000, 27, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1171, 344, 27, -1000,
	1170, 1036, 1032, 18199, 23659, 23386, 23113, 22840, -1000, 12572,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 757, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 326, 325, -1000, 18745, -1000, 883, -1000,
	21, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 882,
	-1000, 19837, -1000, -1000, 22567, 22294, 324, 868, -1000, -1000,
	563, 412, 1359, -1000, 34, -1000, -1000, -1000, 1163, -1000,
	881, 1162, 1159, 1158, 1157, 1156, 1155, 408, 911, 465,
	-1000, 1151, 868, -1000, 868, -1000, -1000, -1000, 554, 21202,
	-1000, 18199, -1000, 22021, 19837, 19837, 1050, 21748, -1000, 910,
	-1000, -1000, -1000, 889, 1330, 1330, 1330, 1360, 115, 109,
	117, 10, 19837, -1000, 322, 10, 9631, 9631, -1000, -1000,
	321, -1000, 349, 15415, -1000, 8710, -1000, 802, 1242, 438,
	761, 1238, -132, 741, 738, 1237, 15985, 16820, 20, 18,
	-1000, -1000, -1000, 5347, 15985, 642, 14596, 27, -1000, -1000,
	-1000, 18199, 19837, 19837, 662, 21475, -1000, 1235, 116, 1233,
	-1000, 114, 1227, -1000, 114, 1225, 1, -1000, -1000, -1000,
	-1000, -1000, -1000, 321, 18472, 19837, 1441, 27499, -1000, 10830,
	-1000, -1000, 16258, 1317, 16258, -1000, -1000, 1435, -1000, 10830,
	-1000, 17, 16, 983, 1113, 13157, 12871, 1288, 1035, -1000,
	-1000, -1000, 32, 5644, 19837, 1186, 16258, 19837, 19837, 19837,
	19837, 19837, 19837, -1000, 982, -1000, -1000, 19837, 19837, 755,
	-1000, 15, 12, -1000, 21202, -1000, 138, -1000, 318, 937,
	417, 113, 20929, 417, 931, -1000, 889, -1000, 875, 979,
	9933, 10830, 117, -1000, -1000, 117, 117, 10830, -1000, -1000,
	19837, 10, 1429, 19837, 111, -1000, 26179, -1000, -1000, 10830,
	10830, 10830, 10830, 10830, 830, 355, -1000, 316, 298, 6566,
	-1000, -1000, 1560, -1000, -1000, -1000, 121, -1000, -1000, 10830,
	27, -1000, -1000, -1000, -1000, 295, 1594, -1000, 406, -1000,
	-1000, -1000, 409, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1183, 294, 293, -1000, -1000, -1000, -1000, 289,
	286, 285, 279, 274, 273, 271, 269, 267, 265, 263,
	262, 261, 257, 256, 760, -1000, 430, -1000, -1000, 430,
	430, -1000, 250, 250, 251, -1000, -1000, -1000, -1000, 250,
	-1000, -1000, -1000, 391, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 254, 111, -1000, -1000, -1000, 19837, -9, -1000, 27029,
	-1000, -6, 827, -1000, 17653, 1346, 1312, 1311, 18199, 1374,
	1357, 553, 19837, 19837, 546, 545, 18199, 384, -1000, -1000,
	-1000, -1000, -1000, 19837, -1000, -1000, -28, -1000, -1000, 1150,
	-10, -1000, -1000, 423, 89, 1425, 89, 14869, -1000, 19837,
	19837, -1000, 19837, -1000, -1000, 19837, -1000, 19837, 19837, -1000,
	19837, 177, 17107, 763, 1220, 646, -29, -14, -1000, 1452,
	-1000, -1000, -1000, -1000, 83, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 251, 760, 250, 250, 250, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 391, -1000, -1000, 430, 430, 430,
	-1000, -1000, -15, 27029, 543, -1000, 1149, 484, -16, 756,
	1026, 809, -1000, -1000, -1000, -1000, 9, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1538, -1000, -1000,
	1558, 9, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1591, 5644, -1000, -1000, -1000, 19837, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19837, 19837, 756,
	1026, -1000, -1000, 18199, 17380, 1395, 1219, 781, -1000, 1387,
	19837, 880, 927, -1000, 519, 1218, -1000, -1000, -1000, -1000,
	27029, -1000, 27029, 676, 1037, -1000, 1037, 8, -1000, 26285,
	-1000, 248, -27, 423, 9631, 14307, 27362, 27499, 19837, 584,
	10830, 10830, 10830, 10830, 10830, 10830, 10830, 10830, 10830, 10830,
	10830, 10830, 10830, 10830, 10830, 10830, 10830, 10830, 10830, 10830,
	10830, 10830, 1098, 10830, 531, 10830, 10830, 10830, 10830, 1059,
	848, 213, 874, 5644, -1000, -1000, 665, 665, 665, 27252,
	27252, 204, 355, -1000, 10830, -1000, 9308, 109, 25833, 3,
	-1000, -1000, -1000, 7463, 428, 27029, 27, 6243, -1000, 1556,
	678, 1176, 1122, 247, 108, 107, 10830, 10830, 11129, 11129,
	10830, 11428, 10830, 10830, 6865, 10830, 10830, 10830, 10830, 10830,
	10830, -1000, 246, -1000, -1000, -1000, -1000, 1555, -1000, -1000,
	1554, -1000, 583, 581, 1546, 423, 106, 8710, -1000, 763,
	19837, 19837, 19837, -1000, -1000, 923, 20656, 912, 27499, 19837,
	-1000, 245, 230, 1005, 1003, 19837, 19837, 20383, 20110, 19837,
	767, -29, -29, 19837, 696, -1000, 19837, 19837, 695, 1090,
	890, -1000, 418, 15985, 641, 1148, 19837, 687, 10830, 840,
	-1000, 14018, 436, 19837, 687, 78, -1000, -1000, -1000, 378,
	19837, -1000, -1000, -1000, 116, -1000, 114, 114, -1000, -1000,
	18199, -1000, -1000, -1000, -1000, -1000, -1000, 27499, 354, 352,
	-1000, 1540, 529, -1000, 518, 516, 515, -1000, 224, -1000,
	10830, 19837, 19837, 1026, -1000, -1000, -1000, -1000, 710, -1000,
	753, -1000, 13443, -1000, -1000, -1000, -1000, -7, -1000, -1000,
	-1000, -1000, -1000, -1000, 105, -31, 2, 27499, -1000, -1000,
	-1000, -1000, -1000, 19837, 268, 19837, -29, 19837, -1000, 1587,
	-29, 19837, 1217, 1250, 374, 19837, -1000, -1000, -1000, 10830,
	-1000, -1000, -1000, -29, -1000, 1109, -1000, -57, 2104, 1294,
	-142, 112, 388, -1000, 13729, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 405, 311, 311, 532, 532,
	532, 532, 176, 176, 2188, 2551, 3935, 3935, 3935, 3146,
	451, 451, 3935, 3935, 3935, 27252, 27154, 2662, 10830, 10830,
	514, 844, 213, 2662, 10830, 1519, 2662, 2662, 2662, -1000,
	697, -1000, -1000, -1000, -1000, 1147, 212, 11428, 11428, -1000,
	-1000, -1000, 6566, 12026, -1000, -1000, -1000, -1000, -1000, 210,
	10830, -1000, 25938, -180, -40, -1000, -1000, 10830, -37, -41,
	-1000, -1000, 626, -1000, 10830, -1000, -23, 10830, 10830, 10830,
	103, 102, -1000, 836, 209, 207, 10830, -1000, -1000, 26924,
	3705, 101, 1146, -89, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 100, 97, 26837, -89, 95, 4440, -1000, 11428, 11428,
	11428, 6566, 205, 94, 26149, -89, 26701, 9009, 9009, 9009,
	93, 26595, 10830, -89, 3673, 3045, 2714, -48, -59, -60,
	1531, -61, 91, 399, 392, 87, 1109, -1000, -1000, -1000,
	-1000, 513, 511, 1213, -1000, 909, -1000, 440, -1000, 686,
	10830, 12299, 194, 190, 804, -1000, 1212, 873, 1211, 873,
	-1000, -6, 808, -1000, -1000, -1000, 508, -1000, -1000, 504,
	418, 1145, 600, -1000, 846, -1000, -1000, 610, -1000, -1000,
	7164, 27029, -1000, 687, 1314, -65, -1000, -1000, -1000, 423,
	14869, 14307, 8710, -67, -1000, -1000, -1000, 763, -1000, 512,
	1529, 86, 949, 891, 734, 669, 1524, 27029, -7, -7,
	-1000, -1000, -1000, -1000, -1000, 19837, 1073, -1000, 17380, 189,
	19837, 188, -1000, 187, -1000, -1000, 186, 19837, 992, 374,
	16547, -1000, 417, -1000, 85, 1100, 1355, -1000, 14307, 1014,
	1008, 14307, 1168, 838, 838, 838, -1000, 182, 258, 388,
	4739, 10830, 17926, 841, 52, 80, 2104, 10830, 2662, 2662,
	10830, 11428, 11428, -1000, 2662, -1000, -1000, -1000, -1000, -1000,
	1143, 181, 10830, 27499, 4380, 3233, -69, -1000, 8387, -11,
	-1000, 10830, -1000, 25728, -1000, -1000, 348, 1248, -1000, 10830,
	26508, 79, 8088, -1000, 26372, -35, -35, -1000, 1583, -1000,
	15142, 424, 843, 25623, 27362, 27499, -1000, 10830, -1000, -1000,
	1141, 10830, -1000, 27362, 27499, 11428, 11428, 11428, 11428, 11428,
	11428, 11428, 11428, 11428, 11428, 11428, 11428, 11428, 11428, 11428,
	11428, 11428, 11428, 11428, 1015, 11428, 1499, 1499, 1499, -24,
	7765, -1000, 1182, 1141, 10830, 10830, 27499, 77, 73, 72,
	-1000, 10830, -89, 10830, 10830, 10830, -1000, -1000, -1000, 65,
	-1000, 1520, -1000, -1000, -1000, -1000, 1100, 19837, 19837, 19837,
	1210, -1000, 1130, -1000, 25518, -71, -1000, 313, 1325, 10830,
	-1000, -1000, 179, 12299, 19837, -1000, 1011, 1055, 462, 19837,
	-1000, 19837, -1000, 19837, 19837, 19837, 19837, 19837, -1000, 15985,
	569, 175, -1000, -32, -1000, -1000, 203, -29, 687, -1000,
	-36, -1000, 376, -1000, 342, 340, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 64, -1000, -1000, 1084, -1000, 12299,
	164, 19837, 17380, 1386, 12299, 877, 995, 374, 16547, -1000,
	519, -1000, 420, 10830, 10830, 2104, 14307, 14307, 1496, 1007,
	14307, -1000, -1000, -1000, -1000, 338, 346, 336, 12572, 17926,
	-1000, 1516, 1022, -75, -1000, -1000, 19837, 162, -1000, 388,
	548, 2662, 2872, 2522, 10830, 27499, 3209, -80, 10830, 10830,
	-1000, -82, -1000, 10830, 333, 27029, -1000, -1000, -1000, 27029,
	10830, 1577, 10830, 58, 57, 56, -1000, -1000, -1000, 24751,
	10830, 54, -1000, 51, 49, 27029, 1182, 27029, -1000, -1000,
	538, 538, 1499, 1499, 1499, 1499, 525, 525, 897, 2649,
	434, 434, 434, 2156, 503, 503, 434, 434, 434, 1128,
	1017, 160, 25175, 10830, -84, -1000, -1000, -1000, 27029, 27029,
	48, -1000, -1000, -1000, -89, 142, 25413, 25308, -1000, 47,
	420, -1000, -1000, -1000, 19837, -1000, 19837, -1000, 19837, 19837,
	1112, 901, -1000, -1000, 1000, 155, 11428, 19837, -1000, 796,
	12299, 1322, 27, 19837, 1322, 25098, 6243, -88, -90, 900,
	-1000, 899, 10830, -1000, 27499, 873, 873, -1000, 495, 491,
	-1000, -1000, -49, 15712, 1581, 1258, 19837, 1298, -1000, -1000,
	154, -1000, -1000, -1000, 823, -92, 12299, -97, 45, -29,
	-98, 19837, -1000, 374, 16547, -1000, 1250, -1000, 19837, 27029,
	-89, -1000, 1496, -1000, 153, 10830, 14307, -1000, -142, -1000,
	-102, -1000, 388, -103, -1000, 331, -177, -1000, 373, -1000,
	388, 151, 19837, 17926, 10830, 10830, 3209, -104, -1000, 2662,
	2662, -1000, 25066, -1000, 27029, -1000, 26372, -1000, -1000, -1000,
	768, -1000, 25042, -1000, -1000, -1000, -1000, 11428, 1117, 150,
	27499, 4353, -1000, -1000, 10830, -1000, -1000, -1000, -1000, -1000,
	1092, -1000, -1000, 19837, 908, -1000, -1000, 10830, 25175, 149,
	1073, 148, -1000, -1000, -1000, -1000, -1000, -1000, 1325, -23,
	-1000, 699, -1000, -1000, 27029, 1323, -1000, -1000, 19837, 19837,
	-1000, 147, 27, -108, -1000, 371, 575, -109, 19837, -1000,
	-1000, 5941, 19837, 796, -110, -1000, 1073, -1000, 796, 145,
	16547, -1000, 992, -56, -1000, 1384, -1000, 19837, 27029, -1000,
	388, -1000, 1514, 17926, 177, -1000, 1022, -1000, 5047, 17926,
	19837, -115, -1000, 2662, 2662, -1000, -1000, 43, 843, 1352,
	-1000, 2212, 11428, 27499, -120, -1000, 4247, -1000, -1000, 1203,
	4040, 960, 19837, -1000, 19837, 1322, 41, 19837, 447, 19837,
	-1000, -1000, 10830, 1581, -1000, -1000, 1578, 660, -1000, 423,
	-1000, 143, 1073, 796, -1000, 1073, 12299, -1000, 995, 19837,
	128, -121, 17926, -1000, -1000, 330, -1000, -1000, 1507, -1000,
	-134, -1000, -1000, 805, 10830, 2212, -143, -1000, -1000, 1195,
	-1000, 850, 839, 39, -145, -1000, -1000, 113, -1000, 10830,
	-1000, -35, -1000, -1000, 14869, -1000, 19837, -1000, 1073, -1000,
	-149, -1000, -1000, -1000, -1000, -1000, 388, 329, -1000, 36,
	10531, 10531, -89, -1000, 19837, -1000, 866, 853, 680, -1000,
	-1000, -1000, -1000, -1000, 960, 27029, -26, -144, -158, -1000,
	796, 17926, -1000, -1000, -1000, -1000, 11727, 862, 681, 26043,
	-1000, -1000, -1000, 1268, -1000, 452, 851, 851, 850, 1577,
	-1000, 859, 1073, -1000, 1459, -1000, -1000, -1000, -1000, -1000,
	-1000, 1485, -1000, -1000, 994, -1000, -1000, -1000, -1000, -1000,
	-1000, 10232, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1850, 1849, 1394, 1556, 1847, 1844, 1541, 1842, 1841,
	1840, 1839, 1835, 1834, 100, 1483, 1472, 17, 1397, 1833,
	87, 1832, 1829, 1825, 98, 1823, 1822, 1814, 47, 1811,
	1801, 1386, 1382, 1800, 1795, 90, 1794, 20, 1793, 74,
	1792, 68, 134, 2170, 127, 1790, 1789, 1788, 18, 96,
	73, 1786, 51, 1783, 1782, 57, 43, 25, 24, 1781,
	121, 123, 1528, 39, 1779, 1778, 131, 1775, 35, 31,
	596, 143, 141, 125, 115, 1773, 1772, 1769, 1768, 54,
	1767, 2, 1766, 1765, 12, 62, 52, 1758, 36, 30,
	1757, 1754, 118, 1752, 67, 103, 1360, 26, 114, 169,
	1751, 75, 11, 77, 1750, 1749, 120, 44, 1748, 46,
	81, 129, 1746, 58, 145, 92, 27, 66, 102, 1743,
	1742, 1736, 83, 1735, 105, 71, 1734, 1733, 80, 1732,
	128, 130, 1731, 1729, 116, 1728, 1727, 1722, 147, 1720,
	1719, 146, 1718, 9, 34, 72, 29, 1368, 1366, 106,
	61, 32, 28, 1717, 2676, 691, 868, 45, 84, 70,
	53, 89, 56, 63, 136, 13, 1716, 1713, 108, 1712,
	1711, 1708, 1707, 1706, 85, 1703, 1702, 79, 135, 14,
	4, 15, 97, 33, 55, 86, 122, 142, 107, 1701,
	88, 113, 41, 64, 1700, 1699, 1202, 111, 1698, 1696,
	1695, 1167, 827, 808, 93, 1694, 1693, 792, 239, 1692,
	1690, 59, 1689, 138, 1688, 1687, 139, 132, 16, 1686,
	49, 76, 95, 1684, 112, 60, 0, 1927, 1385, 1682,
	117, 82, 1679, 1675, 1664, 1662, 23, 3, 7, 10,
	5, 8, 69, 21, 1660, 1656, 124, 37, 65, 1652,
	144, 1647, 1646, 1642, 50, 1639, 22, 1638, 19, 1633,
	1627, 6, 1, 1624, 1622, 140, 1620, 104, 1619, 1377,
	1616, 137, 1611, 1606, 1476, 40, 94,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 50, 50, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 47, 47,
	52, 52, 52, 54, 54, 51, 51, 46, 46, 5,
	5, 224, 224, 225, 225, 36, 36, 40, 40, 37,
	38, 38, 39, 39, 6, 6, 6, 7, 7, 7,
	7, 7, 7, 14, 15, 15, 15, 15, 15, 15,
	15, 15, 98, 98, 97, 97, 100, 100, 16, 16,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 192, 192, 191, 19, 166, 166, 20, 20, 20,
	20, 21, 123, 123, 22, 22, 22, 22, 23, 27,
	265, 265, 265, 269, 269, 270, 270, 271, 271, 271,
	271, 271, 271, 271, 267, 267, 30, 30, 30, 30,
	30, 142, 138, 138, 140, 140, 140, 140, 61, 137,
	137, 137, 137, 139, 139, 139, 139, 217, 216, 216,
	222, 222, 222, 76, 76, 76, 76, 76, 77, 77,
	77, 215, 215, 215, 215, 223, 223, 223, 223, 223,
	223, 78, 78, 78, 221, 221, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 18, 266,
	266, 268, 268, 32, 32, 10, 10, 11, 11, 79,
	79, 80, 80, 145, 145, 145, 145, 81, 81, 53,
	53, 53, 144, 234, 234, 235, 235, 235, 235, 235,
	235, 236, 236, 236, 236, 236, 236, 236, 232, 232,
	233, 230, 230, 231, 231, 231, 231, 272, 272, 143,
	143, 84, 84, 239, 239, 239, 239, 237, 237, 237,
	237, 237, 240, 238, 241, 241, 241, 241, 241, 178,
	178, 178, 34, 12, 59, 59, 13, 9, 9, 127,
	127, 88, 88, 183, 183, 183, 69, 69, 48, 48,
	48, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 128, 128, 129, 129, 25, 29, 33, 33,
	33, 33, 33, 274, 274, 65, 65, 65, 65, 66,
	66, 141, 141, 141, 141, 141, 60, 8, 8, 55,
	55, 56, 56, 57, 57, 58, 58, 275, 275, 24,
	24, 24, 72, 72, 134, 134, 134, 136, 136, 135,
	135, 135, 113, 113, 113, 35, 93, 93, 102, 102,
	103, 103, 189, 104, 104, 28, 28, 43, 43, 41,
	41, 41, 41, 41, 41, 42, 42, 44, 44, 44,
	44, 44, 44, 44, 247, 247, 247, 250, 250, 246,
	248, 248, 249, 249, 273, 273, 114, 114, 114, 83,
	82, 82, 86, 86, 85, 87, 87, 182, 111, 111,
	111, 111, 130, 131, 131, 132, 132, 133, 133, 110,
	110, 162, 162, 45, 45, 92, 92, 94, 94, 152,
	152, 152, 153, 153, 151, 151, 151, 151, 184, 184,
	184, 184, 184, 184, 184, 184, 263, 263, 263, 264,
	264, 181, 181, 185, 185, 185, 185, 185, 185, 179,
	179, 179, 179, 180, 180, 190, 190, 117, 117, 117,
	117, 115, 115, 116, 116, 186, 186, 186, 186, 112,
	112, 187, 187, 187, 146, 146, 193, 193, 193, 211,
	211, 91, 91, 91, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	195, 195, 195, 195, 197, 197, 197, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 210, 210, 210, 210, 210, 198, 198, 205, 205,
	206, 206, 207, 208, 199, 199, 200, 200, 201, 202,
	209, 209, 209, 209, 213, 213, 203, 203, 203, 203,
	203, 204, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	156, 156, 156, 156, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 242, 242, 242, 242, 242,
	242, 242, 244, 244, 245, 245, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 251, 251, 252, 252, 254, 254, 255,
	255, 256, 257, 257, 257, 258, 259, 259, 253, 253,
	260, 260, 260, 261, 261, 262, 262, 262, 262, 262,
	168, 168, 168, 169, 169, 170, 176, 176, 176, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 67, 67, 67, 67, 67,
	99, 99, 165, 165, 163, 163, 163, 167, 167, 118,
	118, 212, 212, 212, 212, 212, 212, 212, 119, 119,
	119, 126, 120, 120, 121, 121, 121, 121, 121, 121,
	159, 160, 122, 122, 122, 161, 161, 171, 175, 175,
	174, 173, 173, 172, 172, 149, 149, 150, 150, 148,
	147, 107, 107, 106, 106, 105, 105, 276, 276, 177,
	177, 108, 108, 109, 101, 101, 188, 188, 188, 188,
	95, 95, 74, 74, 96, 96, 70, 70, 73, 73,
	71, 71, 71, 71, 89, 89, 90, 90, 68, 68,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 214, 214, 214, 164, 62, 62, 62, 63, 63,
	64, 64, 219, 219, 219, 220, 220, 220, 220, 218,
	218, 218, 218, 218, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	6, 1, 1, 1, 3, 3, 0, 2, 0, 2,
	1, 3, 5, 0, 4, 6, 7, 1, 1, 1,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	4, 6, 1, 3, 1, 2, 2, 3, 2, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 3, 4, 4, 2, 5, 5, 2, 2,
	0, 2, 0, 6, 6, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 5, 2, 0, 6, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 8, 11, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 6, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 7, 4,
	6, 3, 1, 5, 6, 9, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	221, 65, -8, -9, -10, -11, -12, -13, -249, 93,
	101, 123, 204, 100, 86, 117, 224, 232, -41, -43,
	240, -142, 241, 35, 250, 59, 96, 226, 220, 273,
	67, -247, -44, -42, 321, 296, 302, 235, -45, 258,
	288, 324, 258, 132, 79, 291, -265, -96, 258, 79,
	-71, -62, 314, 4, -226, -228, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 58, 59, 60, 62, 64,
	65, 66, 69, 70, 77, 78, 80, 82, 86, 88,
	92, 93, 95, 100, 101, 107, 108, 111, 113, 118,
	123, 124, 125, 126, 133, 136, 138, 131, 146, 148,
	149, 152, 151, 156, 159, 162, 164, 165, 166, 169,
	167, 171, 172, 174, 173, 179, 181, 182, 184, 187,
	190, 193, 196, 197, 198, 199, 202, 204, 206, 207,
	208, 210, 211, 213, 214, 215, 216, 217, 220, 218,
	219, 221, 222, 224, 226, 227, 229, 231, 232, 233,
	234, 237, 238, 240, 241, 243, 246, 249, 250, 251,
	254, 252, 248, 257, 259, 260, 261, 262, 269, 273,
	274, 275, 276, 279, 280, 281, 283, 285, 286, 287,
	292, 297, 298, 299, 300, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 50, 51, 52, 54, 81, 83,
	84, 99, 102, 103, 109, 119, 121, 127, 128, 137,
	139, 140, 141, 143, 154, 168, 178, 180, 191, 195,
	201, 203, 209, 228, 236, 244, 245, 253, 255, 264,
	265, 266, 270, 271, 288, 289, -265, -70, -62, 79,
	88, 136, 281, 280, 79, 132, 258, 291, -17, 321,
	-28, -7, -15, -4, -24, -35, -14, -31, -18, -32,
	-16, 23, -218, 4, -226, -228, -227, -229, 56, 68,
	116, 135, 129, 145, 147, 155, 157, 170, 192, 194,
	225, 242, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 43, 48, 49, 53, 55, 57, 63, 67, 71,
	72, 73, 74, 75, 76, 85, 87, 89, 90, 91,
	94, 96, 98, 104, 105, 106, 112, 114, 115, 117,
	120, 122, 130, 132, 134, 142, 144, 150, 153, 158,
	160, 161, 175, 176, 177, 183, 185, 186, 188, 189,
	200, 205, 212, 223, 235, 239, 247, 256, 258, 263,
	267, 268, 272, 277, 278, 282, 284, 290, 291, 293,
	294, 295, 296, -62, -62, -62, 204, 22, -269, 22,
	-270, -271, 67, 93, 117, 235, 136, 88, 280, -269,
	-66, 232, -62, -138, 159, 238, 228, 269, -139, -137,
	-217, 264, 169, -97, -62, 4, 22, 79, 58, 80,
	118, 132, 133, 63, 64, 149, 259, 264, 269, 67,
	283, 261, -274, 269, 269, -274, -274, -65, 269, 267,
	-66, -273, 258, 258, 282, 291, -127, 79, 278, -42,
	-44, -43, -85, -86, 277, 142, 98, 189, -41, -43,
	-247, -250, 210, -246, -62, -250, -82, -83, 22, 90,
	325, -186, -70, 186, -109, 321, -3, -186, 127, -70,
	-73, 127, -70, -62, -186, 127, 267, 325, -96, -89,
	-62, -148, -147, 323, 115, 115, 321, -106, -107, -147,
	-148, 115, 144, 144, -187, -186, -62, 127, -74, 127,
	-73, -98, 127, -97, -98, 127, -192, -191, -220, 4,
	-226, -228, -227, 288, 258, 132, -166, 321, -123, 321,
	-62, 22, 185, 325, 185, -62, -138, 52, -138, 321,
	-140, -60, -61, 146, 206, 267, 306, 115, 300, -78,
	5, 85, -100, 323, 115, -266, 185, 115, 115, 115,
	115, 115, 115, 300, 146, 206, 231, 258, 291, 115,
	-141, -60, -61, -141, 267, -66, -112, -186, -97, 127,
	-62, -97, 132, -62, 127, -85, -86, -111, -130, -131,
	158, 183, -114, 22, 90, -114, -114, 44, 322, 322,
	325, -250, -90, 321, -101, -188, -154, 314, -156, 312,
	313, 318, 175, 301, -168, -158, -171, 99, 228, 321,
	-70, -157, 326, 9, -244, -43, 29, -169, -170, 48,
	-62, 7, 8, 5, 6, -68, -195, -164, -204, 272,
	104, 177, -242, -243, 4, -226, -219, -196, -206, -200,
	-203, 143, 56, 72, 75, 73, 76, 239, 282, 49,
	28, 102, 103, 195, 201, 255, 270, 271, 127, 178,
	128, 54, 119, 154, 92, 37, 39, 41, 42, 50,
	51, 81, 83, 84, 109, 137, 139, 140, 141, 180,
	209, 244, 253, 265, 266, 289, -227, -207, -208, -201,
	-202, -209, -101, -109, 314, -70, 321, -108, -177, -154,
	85, -50, 218, -49, 21, 23, 93, 286, 99, 248,
	248, 218, 99, 326, 218, 218, 99, -224, -221, 9,
	-220, 5, -71, 325, -218, 314, -225, -224, 251, 322,
	-95, -70, -107, -187, -72, -70, -72, 240, -62, 30,
	99, -52, 325, 47, 222, 99, -52, 325, 99, -52,
	99, 322, 325, -186, 127, -73, 30, -165, -193, -194,
	-196, -205, -199, -203, -204, 40, 46, 45, 262, 168,
	236, 245, 38, 184, 138, 137, 139, 140, 141, 244,
	37, 209, 109, 92, 84, 83, 180, 42, 41, -207,
	-208, -201, -202, 81, 265, 266, 143, 39, 51, 50,
	289, 253, -99, -154, -265, -271, -265, 30, -99, 325,
	325, 156, -77, 162, 174, 124, -216, 85, -222, -215,
	-178, 9, 272, 104, 185, -221, 8, 313, -214, 7,
	312, -216, 85, 70, -223, 5, 4, -164, -178, 85,
	159, -204, 323, -218, -217, -268, 112, -265, -217, -217,
	-217, -217, -217, -62, 156, -217, -217, 258, 132, 325,
	325, -66, -52, 325, 321, -84, 175, -248, 296, -84,
	321, -63, 127, -62, -248, 175, -111, -131, -130, -132,
	-154, 22, -154, -156, -42, -42, -42, -87, -182, -154,
	-246, 30, -89, -92, 325, 115, 10, 11, 55, 33,
	312, 313, 314, 315, 110, 316, 309, 310, 311, 308,
	304, 305, 306, 61, 163, 230, 13, 14, 15, 26,
	188, 157, 301, 129, 242, 318, 16, 17, 18, 145,
	36, 130, -67, 30, 4, -75, -154, -154, -154, -154,
	-154, 194, -105, -149, 319, -43, 321, -43, -154, -99,
	7, -43, -163, 319, -172, -154, -106, 321, 5, 321,
	5, -251, 297, 112, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 203, -213, 292, -213, -213, -197, 321, -197, -198,
	321, -197, 298, 302, 321, -92, -70, 325, 322, 325,
	267, -128, 63, 57, -144, 127, 57, -230, -62, 63,
	-231, 53, 278, 205, 114, -128, 63, -128, 63, 63,
	-186, 33, 33, 267, -73, -62, 267, 267, -186, -190,
	303, -62, -190, 325, 115, 322, 325, -146, 294, -134,
	-28, 321, 85, 30, -134, -102, -103, -189, -104, -70,
	321, -62, -62, -73, -74, -97, -98, -98, -17, -191,
	99, -20, -28, -24, -35, -14, 322, 325, -91, 29,
	-124, 321, 299, 166, 82, 125, 165, -125, 234, 322,
	325, 267, 115, 269, 322, -61, -60, -76, 208, 246,
	219, 237, 325, 8, 7, 7, -218, -267, -62, -70,
	-73, -61, -60, -186, -79, -89, -80, -62, -145, -144,
	-232, -233, -230, 132, 278, 105, 30, 99, -59, 199,
	30, 185, 175, -55, 260, 99, -133, 228, 229, 325,
	-48, 31, 89, 321, 322, -146, -188, -94, -184, 319,
	-186, -70, -43, -185, 321, -211, -193, -210, 214, 215,
	213, 217, 216, -193, -97, 264, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, 157, 129,
	242, 36, 130, -154, 267, -154, -154, -154, -154, 167,
	175, 177, 272, 104, 279, 90, 181, -276, 256, 32,
	-161, -43, 321, -176, 27, 247, 22, -218, -168, 228,
	321, -149, -154, -150, -99, 322, 322, 325, -99, -167,
	320, -163, -175, -174, 293, 322, -99, 290, 22, 90,
	314, 7, -124, -252, 107, 120, 321, 322, 322, -154,
	-154, -118, -212, -99, 4, 299, 166, 82, 125, 165,
	234, -118, -119, -154, -99, -120, -155, -156, 312, 313,
	318, 321, 228, -121, -154, -99, -154, 43, 153, 268,
	-122, -154, 115, -99, -154, -154, -154, -99, -99, -99,
	321, 7, 7, 264, 264, 7, -146, 322, -177, -49,
	-70, -62, -62, 175, -144, 127, -54, 175, -193, -62,
	321, 321, 148, 148, -62, -62, 127, -62, 127, -62,
	-62, -50, 218, -28, -28, -62, 218, -62, -70, 218,
	-36, 126, 181, -39, 296, -224, 251, 115, -70, -113,
	223, -154, -113, -136, 185, -95, 288, -62, -113, -93,
	325, 115, 306, -95, -52, -52, -52, -186, -193, 319,
	319, 7, 267, 267, 267, 267, 321, -154, -267, -267,
	-60, 276, 60, 208, -222, 325, 322, 322, 325, -63,
	132, -63, -28, -97, 5, -28, -70, 99, -56, 95,
	-275, 306, -62, -182, -20, -110, 120, -190, 325, 68,
	-117, 147, 170, 116, 155, 225, 135, 7, 101, -151,
	326, 321, -181, 302, -43, -185, -184, 300, -154, -154,
	267, -276, 256, -161, -154, 167, 177, 272, 104, 279,
	90, 181, 115, 321, -155, -155, -99, -158, 321, -99,
	320, 329, 322, -154, 320, 320, 325, -173, -174, 94,
	-154, -86, 325, -85, -154, -99, -99, 322, 322, -257,
	193, 321, 321, -154, 30, 325, 322, 115, 322, 322,
	-126, 200, 322, 10, 11, 312, 313, 314, 315, 110,
	316, 309, 310, 311, 308, 304, 305, 306, 61, 163,
	230, 13, 14, 15, 145, 130, -155, -155, -155, -99,
	321, 322, -159, -160, 115, 112, 30, -122, -122, -122,
	322, 115, -99, 325, 325, 325, 322, 322, 322, 7,
	322, 325, 322, 300, 300, 322, -110, 267, 267, 99,
	175, 285, -234, -231, -154, -88, -183, -62, -245, 321,
	-242, -243, -68, 321, 321, -47, 93, 240, -129, 99,
	-52, 99, -52, 267, -128, 63, 267, 267, -39, 115,
	257, 187, 251, -101, 176, -113, 62, 322, -146, -103,
	-94, -177, 322, 320, 7, 7, 322, 166, 125, 165,
	-125, 165, -125, -125, 7, -62, -81, 131, -145, 321,
	-63, 321, 321, -84, 321, -62, -57, 152, -275, -221,
	-248, 322, -162, 122, 44, -184, 147, 147, -184, -117,
	147, -115, 192, -115, -115, -263, 321, -17, 321, -181,
	-218, 319, 327, -99, -180, -179, 30, -62, 190, 322,
	-154, -154, -155, -155, 115, 321, -154, -165, 26, 26,
	322, -99, 322, 325, -150, -154, 322, -163, 96, -154,
	263, 322, 290, -86, -86, -86, 5, -258, -62, 321,
	294, -85, 322, -211, -193, -154, -159, -154, -211, -193,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, 90,
	175, 181, -155, 325, -99, 322, -160, -159, -154, -154,
	-193, 322, 322, 322, -99, -154, -154, -154, 322, 7,
	-162, -62, -62, -144, 99, -235, 63, -236, 55, 105,
	67, 175, 177, 278, 205, 53, 85, 212, 322, 322,
	325, -69, -106, 55, -69, -154, 321, -88, -89, 175,
	85, 175, 85, 78, 274, -62, -62, -70, -62, -62,
	-62, -70, -225, 264, 321, -135, 321, 185, -28, -113,
	306, 320, 320, 322, 130, -88, 321, -89, -79, 30,
	-88, 185, -58, 151, -275, -221, -55, -254, 295, -154,
	-99, -184, -184, -116, 284, 185, 147, -184, 320, 322,
	-264, 7, 320, -192, -180, 7, -153, -152, 113, 173,
	322, -62, 321, -181, 26, 26, -154, -165, 322, -154,
	-154, 322, -154, 320, -154, 5, -154, 322, 322, 322,
	-259, -62, -154, 322, 322, 322, -160, 115, 90, 181,
	321, -154, 322, 322, 325, 322, 322, 322, -254, -144,
	-62, -97, -62, 105, 127, 177, 148, 321, -155, -70,
	-143, -272, 66, 254, -183, -48, -97, -48, 322, -99,
	322, 322, 177, 177, -154, -193, -52, -52, 267, 267,
	-157, -68, -62, -38, -37, 5, 91, -89, 63, -109,
	-43, 321, 196, 322, -88, 322, 322, -28, 322, -70,
	-275, -221, -56, -255, -256, -62, -116, 321, -154, -184,
	-151, 322, 325, -181, 322, 320, 325, 328, 306, -181,
	321, -89, -179, -154, -154, 322, 322, -86, -253, 198,
	322, -155, 115, 321, -165, 322, -154, -236, -63, 175,
	-154, -64, 321, -81, 321, -69, -86, 212, -51, 55,
	-62, -62, 321, 325, 322, -40, 306, 280, 176, 322,
	-62, -62, -143, 322, -81, -143, 321, -221, -57, 325,
	30, -89, -181, 7, -180, -17, -152, -218, 319, -180,
	-89, 322, 322, -86, 44, -155, -165, 322, 322, 99,
	322, -239, 164, -62, -89, -48, 322, -70, -46, 284,
	-97, -99, -37, 5, 240, -146, 321, -81, -143, -81,
	-88, -58, -256, -258, 322, -179, 320, 7, 322, -260,
	207, 229, -99, 322, 105, -237, -240, -238, 185, 116,
	197, 243, 322, 322, -84, -154, -86, -102, -89, -81,
	322, -181, 320, 322, -261, -262, 36, 275, 70, -154,
	-261, -62, -238, 185, -240, 185, 280, 88, -239, 322,
	-146, 322, -143, -180, -262, 202, 111, 228, 202, 111,
	-241, 172, 222, 47, 240, -241, -237, -53, 47, 222,
	-81, 26, 20, 177, 85, -262,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 77, 78, 79, 80, 81, 82, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 385, -2,
	0, 150, 0, 334, 0, 334, 334, 338, 0, 415,
	300, 412, -2, 423, 0, 0, 0, 421, 399, 0,
	0, -2, 0, 0, 0, 0, 0, 130, 0, 944,
	874, 880, 881, 905, 906, 907, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 0, 0, 876, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 0, 218, 919, 920, 921, 922, 923, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 116, 123, 124, 996, 126, 0, 133,
	134, 135, 137, 138, 139, 140, 141, 142, 143, 0,
	327, 1017, 340, 146, 973, 1021, 1092, 1037, 153, 163,
	0, 1098, -2, 167, 94, 196, 197, 198, 0, 200,
	220, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	215, 0, 345, 333, 345, 330, 331, 332, 335, 0,
	326, 0, 414, 0, 0, 0, 0, 0, 299, -2,
	395, 396, -2, 0, 418, 418, 418, 0, 0, 396,
	0, 404, 1000, 407, 887, 405, 0, 0, 420, 419,
	0, 400, 495, 0, 443, 0, 2, 0, 1076, 495,
	0, 1076, 879, 0, 0, 1076, 0, 0, 131, 132,
	884, 882, 883, 0, 0, 0, 0, 877, 853, 851,
	852, 0, 0, 0, 0, 501, 84, 1076, 52, 1076,
	872, 52, 1076, 92, 52, 1076, 0, 111, 113, 915,
	916, 917, 918, 1103, 0, 0, 0, 0, 121, 0,
	125, 127, 0, 0, 0, 339, 147, 1065, 149, 0,
	152, 154, 155, 0, 0, 0, 0, 0, 0, 166,
	191, 192, 95, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 211, 212, 0, 0, 0,
	328, 341, 342, 329, 0, 337, 52, 499, 272, 1076,
	411, 272, 909, 411, 1076, -2, 0, 391, 430, 431,
	0, 0, 0, 416, 417, 0, 0, 0, 387, 388,
	0, 406, 0, 0, 446, 864, 868, 869, 598, 0,
	0, 0, 0, 0, 0, 690, 692, 1070, 1092, 0,
	694, 695, 0, 697, 699, 700, 0, 703, 704, 844,
	876, 890, 891, 892, 893, 0, 0, 896, 0, 898,
	899, 900, 744, 713, -2, -2, 888, 530, 531, 532,
	533, -2, 1105, 717, 719, 721, 722, 723, 724, 0,
	1054, 1071, 1072, 1088, 1089, 1097, 1101, 1102, 1076, 1085,
	1077, 1066, 1074, 1083, 949, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 914, 560, 561, 566,
	567, 569, 446, 444, 496, 497, 0, 0, 861, 859,
	860, 29, 323, 31, 0, 323, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 486, 61, 62,
	194, 195, 875, 0, 849, 850, 486, 63, 74, 0,
	0, 870, 854, 505, 0, 362, 0, 0, 502, 0,
	0, 86, 0, 50, 51, 0, 88, 0, 0, 90,
	0, 413, 0, 0, 1076, 0, 413, 0, 802, 513,
	514, 515, 516, 517, 595, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 537, 538, 539, 540, 541,
	542, 543, 557, 0, 536, 536, 536, 549, 550, 558,
	559, 564, 565, 576, 577, 579, 581, 575, 575, 575,
	572, 573, 0, 800, 0, 136, 0, 0, 0, 0,
	0, 0, 158, 178, 179, 180, 159, 161, 168, 170,
	171, 172, 181, 182, 183, 184, 289, 0, 291, 901,
	0, 160, 162, 164, 165, 185, 186, 187, 188, 189,
	190, 0, 0, 96, 199, 201, 0, 219, 202, 203,
	204, 205, 206, 207, 210, 213, 214, 0, 0, 0,
	0, 336, 292, 0, 230, 0, 0, 295, 410, 0,
	0, 0, 1076, 908, 350, 0, 394, 428, 429, 432,
	435, 436, 433, 598, 401, 402, 403, 424, 425, 310,
	408, 0, 0, 505, 0, 0, 0, 0, 0, 0,
	779, 780, 781, 782, 783, 784, 787, 788, 785, 786,
	789, 790, 791, 0, 0, 0, 792, 793, 794, 0,
	0, 796, 0, 798, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 867, 795, 603, 604, 605, 627,
	628, 0, 691, 855, 848, 693, 0, -2, 800, 0,
	696, 701, 702, 0, 0, 843, -2, 0, 895, 0,
	595, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 823, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 545, 563, 574, 571, 570, 547, 0, 546, 544,
	0, 548, 0, 0, 0, 505, 0, 0, 863, 0,
	0, 0, 0, 322, 33, 1076, 0, 54, 0, 0,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 66,
	0, 885, 73, 0, 0, 0, 0, 374, 0, 374,
	364, 0, 0, 0, 374, 377, 378, 380, 381, 0,
	0, 503, 85, 873, 52, 93, 52, 52, 99, 112,
	0, 114, 117, 118, 119, 120, 115, 0, 506, 508,
	518, 0, 582, 583, 584, 585, 586, 587, 596, 122,
	0, 0, 0, 0, 151, 156, 157, 346, 0, 175,
	0, 177, 0, 290, 903, 902, 97, 221, 144, 216,
	217, 343, 344, 500, 0, 0, 229, 884, 231, 233,
	234, 235, 236, 909, 0, 909, 0, 0, 293, 0,
	0, 0, 0, 352, 358, 0, 434, 437, 438, 0,
	427, 308, 309, 413, 886, 440, 865, 486, 447, 0,
	457, 495, 472, 462, 0, 599, 509, 510, 551, 552,
	553, 554, 555, 600, 601, 0, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, -2, -2, -2, 619,
	620, 621, -2, -2, -2, 625, 626, -2, 797, 799,
	0, 858, 0, -2, 0, 635, -2, -2, -2, 639,
	0, 641, 644, 646, 648, 0, 0, 0, 0, 857,
	658, 835, 0, 0, 776, 777, 778, 866, 643, 0,
	0, 856, 847, 0, 0, -2, 698, 0, 0, 0,
	806, 807, 842, 838, 0, 705, 423, 0, 0, 0,
	0, 0, 904, 754, 0, 0, 0, 718, 720, 0,
	0, 0, 0, 810, -2, -2, -2, -2, -2, -2,
	-2, 0, 0, 800, 820, 0, 0, 661, 0, 0,
	0, 0, 1092, 0, 800, 828, 0, 0, 0, 0,
	0, 800, 0, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 498, 862, 32,
	312, 0, 0, 0, 35, 1076, 43, 0, 244, 0,
	0, 0, 0, 0, 325, 44, 1076, 52, 1076, 52,
	45, 30, 323, 223, 224, 316, 0, 311, 314, 0,
	73, 0, 0, 60, 0, 64, 75, 0, 871, 83,
	0, 504, 359, 374, 0, 0, 366, 363, 361, 505,
	0, 0, 0, 0, 87, 89, 91, 0, 803, 0,
	0, 0, 0, 0, 0, 0, 0, 801, 128, 129,
	148, 173, 174, 176, 169, 0, 238, 271, 0, 0,
	909, 0, 227, 272, 294, 296, 0, 0, 354, 358,
	0, 357, 411, 426, 0, 442, 0, 445, 0, 0,
	0, 0, 0, 492, 492, 492, 490, 466, 413, 472,
	0, 0, 484, 0, -2, 462, 0, 0, -2, -2,
	0, 0, 0, 659, -2, 640, 642, 645, 647, 649,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	845, 848, -2, 801, 804, 805, 0, 0, 839, 0,
	0, 0, 0, 422, 423, 423, 423, 711, 0, 712,
	0, 0, 0, 0, 0, 0, 727, 0, 728, 729,
	0, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 664, 665, 666, 0,
	0, 731, 826, 827, 0, 0, 0, 0, 0, 0,
	736, 0, 833, 0, 0, 0, 740, 741, 742, 0,
	534, 0, 556, 578, 580, 568, 442, 0, 0, 0,
	0, 53, 242, 261, 0, 0, 301, 307, 307, 0,
	714, 715, 0, 0, 0, 37, 0, 0, 0, 0,
	41, 0, 47, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 76, 372, 373, 360, 371, 0, 374, 379,
	376, 382, 0, 511, 0, 0, 519, 588, 589, 590,
	591, 592, 593, 594, 0, 145, 225, 0, 232, 0,
	0, 0, 230, 0, 0, 0, 356, 358, 0, 349,
	350, 409, 748, 0, 0, 448, 0, 0, 0, 0,
	0, 487, 491, 488, 489, 0, 0, 0, 0, 484,
	454, 0, 0, 0, 461, 483, 0, 482, 471, -2,
	602, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	836, 0, 771, 0, 0, 847, -2, 808, 837, 841,
	0, 706, 0, 0, 0, 0, 897, 752, 753, 757,
	0, 0, 716, 0, 0, 809, 819, 821, 662, 663,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	-2, -2, -2, 680, 681, 682, -2, -2, -2, 0,
	0, 0, 822, 0, 0, 774, 824, 825, 830, 831,
	0, 733, 734, 735, 832, 0, 0, 0, 562, 0,
	748, 318, 320, 34, 0, 243, 0, 246, 0, 0,
	0, 0, 252, 253, 0, 0, 0, 0, 263, 270,
	0, 310, 889, 0, 310, 0, 0, 0, 0, 0,
	49, 0, 0, 324, 0, 52, 52, 313, 0, 0,
	317, 315, 65, 0, 0, 0, 0, 0, 365, 375,
	0, 512, 507, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 358, 0, 351, 352, 397, 0, 441,
	439, 474, 0, 476, 0, 0, 0, 478, 457, 467,
	0, 469, 472, 0, 459, 0, 0, 452, 0, 451,
	472, 480, 0, 0, 0, 0, -2, 0, 652, -2,
	-2, 770, 801, 846, 840, 894, 423, 707, 709, 710,
	759, 756, 0, 743, 725, 726, 818, 0, 0, 0,
	0, 801, 773, 732, 0, 738, 739, 535, 398, 36,
	0, 247, 248, 909, 0, 251, 254, 0, 256, 911,
	238, 0, 267, 268, 302, 303, 306, 304, 307, 423,
	265, 0, 38, 39, 48, 56, 40, 46, 0, 0,
	485, 0, 0, 0, 70, 68, 0, 0, 0, 383,
	384, 0, 0, 270, 0, 260, 238, 228, 270, 0,
	0, 353, 354, 747, 749, 0, 475, 0, 494, 477,
	472, 468, 0, 484, 413, 455, 0, 456, 0, 484,
	0, 0, 463, -2, -2, 653, 772, 0, 423, 0,
	745, -2, 0, 0, 0, 775, 0, 245, 249, 0,
	0, 276, 0, 264, 0, 310, 0, 0, 58, 0,
	319, 321, 0, 0, 72, 69, 0, 0, 368, 505,
	370, 0, 238, 270, 226, 238, 0, 355, 356, 0,
	0, 0, 0, 470, 464, 0, 453, 449, 0, 460,
	0, 481, 708, 762, 0, -2, 0, 688, 737, 0,
	255, 281, 0, 0, 0, 305, 706, 272, 42, 0,
	55, 423, 71, 67, 0, 369, 0, 258, 238, 297,
	0, 348, 750, 751, 493, 458, 472, 0, 479, 0,
	0, 0, 758, 689, 0, 257, 277, 278, 0, 273,
	274, 275, 910, 269, 276, 57, 0, 505, 0, 259,
	270, 484, 450, 755, 760, 763, -2, 1040, 941, 0,
	761, 250, 279, 0, 280, 0, 0, 0, 281, 0,
	367, 241, 238, 465, 0, 765, 766, 767, 768, 769,
	282, 0, 285, 286, 0, 283, 266, 237, 239, 240,
	298, 0, 284, 287, 288, 764,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 310, 3, 316, 311, 3,
	321, 322, 314, 312, 325, 313, 323, 315, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 329, 324,
	304, 306, 305, 3, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 319, 3, 320, 309, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 327, 308, 328, 318,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 307, 57647, 317, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:782
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:788
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 68:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{ /* SKIP DOC */
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1377
		{
			return unimplemented(sqllex)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{ /* SKIP DOC */
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return unimplemented(sqllex)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = Low
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = Normal
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = High
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			return unimplemented(sqllex)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			return unimplemented(sqllex)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1566
		{
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1654
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1658
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1670
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = DropDefault
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1780
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1999
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2005
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2008
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2009
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = true
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = false
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2119
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2120
		{
			return unimplemented(sqllex)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return unimplemented(sqllex)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2124
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = Ascending
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = Descending
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2178
		{
			return unimplemented(sqllex)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2179
		{
			return unimplemented(sqllex)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = true
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2193
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2236
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.str = ""
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.str = ""
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2423
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			return unimplemented(sqllex)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 375:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2458
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2685
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			return unimplemented(sqllex)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2694
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2698
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			return unimplemented(sqllex)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2702
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2705
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2706
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = true
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = false
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = false
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = true
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2729
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2730
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2768
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2829
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2888
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = &From{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2924
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2969
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2986
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = nil
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = true
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = false
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.str = astFullJoin
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.str = astLeftJoin
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.str = astRightJoin
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.str = astInnerJoin
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3165
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3251
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3264
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3279
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3288
		{
			return unimplemented(sqllex)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3356
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = nil
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3532
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3572
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = year
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = month
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = day
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = hour
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = minute
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = month
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = hour
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = minute
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = minute
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = nil
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = second
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3667
		{
			return unimplemented(sqllex)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3702
		{
			return unimplemented(sqllex)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			return unimplemented(sqllex)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3936
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4109
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4162
		{
			return unimplemented(sqllex)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4163
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4186
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			return unimplemented(sqllex)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4207
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4225
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4226
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4256
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4300
		{
			return unimplemented(sqllex)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4301
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = Window(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4336
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.str = ""
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4398
		{
			return unimplemented(sqllex)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4399
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4400
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4404
		{
			return unimplemented(sqllex)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4410
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4411
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4412
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			return unimplemented(sqllex)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4414
		{
			return unimplemented(sqllex)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = Any
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = Some
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = All
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = Plus
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = Minus
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = Mult
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = Div
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = FloorDiv
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = Mod
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = Bitand
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = Bitor
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = Bitxor
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = Bitxor
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = LT
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = GT
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = EQ
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = LE
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = GE
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = NE
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = Like
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = NotLike
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = ILike
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = NotILike
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4778
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4779
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4897
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4941
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4977
		{
			return unimplemented(sqllex)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = DNull
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5016
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.str = ""
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
