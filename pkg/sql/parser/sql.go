// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:494
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PHYSICAL = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SOME_EXISTENCE = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TIMEZONE = 57659
const TO = 57660
const TRAILING = 57661
const TRACE = 57662
const TRANSACTION = 57663
const TREAT = 57664
const TRIM = 57665
const TRUE = 57666
const TRUNCATE = 57667
const TYPE = 57668
const UNBOUNDED = 57669
const UNCOMMITTED = 57670
const UNION = 57671
const UNIQUE = 57672
const UNKNOWN = 57673
const UPDATE = 57674
const UPSERT = 57675
const USE = 57676
const USER = 57677
const USERS = 57678
const USING = 57679
const UUID = 57680
const VALID = 57681
const VALIDATE = 57682
const VALUE = 57683
const VALUES = 57684
const VARCHAR = 57685
const VARIADIC = 57686
const VIEW = 57687
const VARYING = 57688
const WHEN = 57689
const WHERE = 57690
const WINDOW = 57691
const WITH = 57692
const WITHIN = 57693
const WITHOUT = 57694
const WRITE = 57695
const YEAR = 57696
const ZONE = 57697
const NOT_LA = 57698
const WITH_LA = 57699
const AS_LA = 57700
const CONTAINED_BY = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TIMEZONE",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6976

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 736,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 585,
	-2, 0,
	-1, 54,
	97, 736,
	156, 736,
	332, 736,
	333, 736,
	-2, 0,
	-1, 64,
	1, 698,
	215, 698,
	261, 698,
	377, 698,
	379, 698,
	381, 698,
	382, 698,
	-2, 711,
	-1, 97,
	4, 738,
	20, 738,
	21, 738,
	24, 738,
	29, 738,
	34, 738,
	35, 738,
	36, 738,
	37, 738,
	38, 738,
	39, 738,
	40, 738,
	41, 738,
	42, 738,
	43, 738,
	45, 738,
	46, 738,
	47, 738,
	48, 738,
	49, 738,
	52, 738,
	53, 738,
	54, 738,
	56, 738,
	57, 738,
	61, 738,
	62, 738,
	63, 738,
	65, 738,
	66, 738,
	67, 738,
	68, 738,
	70, 738,
	72, 738,
	73, 738,
	76, 738,
	77, 738,
	78, 738,
	86, 738,
	87, 738,
	88, 738,
	89, 738,
	90, 738,
	91, 738,
	92, 738,
	93, 738,
	95, 738,
	97, 738,
	99, 738,
	102, 738,
	103, 738,
	105, 738,
	109, 738,
	110, 738,
	111, 738,
	112, 738,
	113, 738,
	114, 738,
	115, 738,
	123, 738,
	124, 738,
	125, 738,
	126, 738,
	127, 738,
	129, 738,
	131, 738,
	136, 738,
	137, 738,
	139, 738,
	142, 738,
	143, 738,
	144, 738,
	145, 738,
	146, 738,
	147, 738,
	150, 738,
	151, 738,
	153, 738,
	156, 738,
	157, 738,
	158, 738,
	159, 738,
	160, 738,
	161, 738,
	162, 738,
	163, 738,
	165, 738,
	168, 738,
	169, 738,
	170, 738,
	172, 738,
	173, 738,
	174, 738,
	175, 738,
	176, 738,
	178, 738,
	179, 738,
	181, 738,
	183, 738,
	184, 738,
	187, 738,
	188, 738,
	191, 738,
	193, 738,
	195, 738,
	196, 738,
	197, 738,
	198, 738,
	199, 738,
	201, 738,
	202, 738,
	203, 738,
	204, 738,
	208, 738,
	209, 738,
	210, 738,
	211, 738,
	212, 738,
	214, 738,
	216, 738,
	217, 738,
	220, 738,
	221, 738,
	223, 738,
	225, 738,
	226, 738,
	227, 738,
	228, 738,
	229, 738,
	230, 738,
	231, 738,
	233, 738,
	234, 738,
	235, 738,
	236, 738,
	237, 738,
	239, 738,
	240, 738,
	241, 738,
	242, 738,
	243, 738,
	244, 738,
	245, 738,
	246, 738,
	248, 738,
	249, 738,
	250, 738,
	251, 738,
	252, 738,
	254, 738,
	255, 738,
	256, 738,
	257, 738,
	258, 738,
	259, 738,
	260, 738,
	262, 738,
	264, 738,
	265, 738,
	266, 738,
	267, 738,
	269, 738,
	270, 738,
	271, 738,
	272, 738,
	273, 738,
	275, 738,
	276, 738,
	277, 738,
	278, 738,
	279, 738,
	281, 738,
	282, 738,
	283, 738,
	284, 738,
	286, 738,
	287, 738,
	288, 738,
	289, 738,
	292, 738,
	293, 738,
	294, 738,
	295, 738,
	296, 738,
	297, 738,
	298, 738,
	299, 738,
	300, 738,
	301, 738,
	303, 738,
	305, 738,
	306, 738,
	307, 738,
	308, 738,
	309, 738,
	310, 738,
	311, 738,
	312, 738,
	314, 738,
	315, 738,
	316, 738,
	317, 738,
	320, 738,
	321, 738,
	322, 738,
	323, 738,
	325, 738,
	326, 738,
	327, 738,
	328, 738,
	331, 738,
	332, 738,
	333, 738,
	334, 738,
	336, 738,
	338, 738,
	339, 738,
	340, 738,
	341, 738,
	342, 738,
	343, 738,
	346, 738,
	351, 738,
	352, 738,
	353, 738,
	354, 738,
	355, 738,
	-2, 0,
	-1, 115,
	1, 701,
	215, 701,
	261, 701,
	377, 701,
	379, 701,
	381, 701,
	382, 701,
	-2, 710,
	-1, 120,
	1, 636,
	168, 636,
	239, 636,
	243, 636,
	381, 636,
	382, 636,
	-2, 0,
	-1, 122,
	1, 636,
	381, 636,
	382, 636,
	-2, 0,
	-1, 123,
	1, 636,
	381, 636,
	382, 636,
	-2, 0,
	-1, 124,
	1, 640,
	381, 640,
	382, 640,
	-2, 0,
	-1, 146,
	4, 744,
	5, 744,
	6, 744,
	7, 744,
	8, 744,
	9, 744,
	20, 744,
	21, 744,
	24, 744,
	29, 744,
	30, 744,
	34, 744,
	35, 744,
	36, 744,
	37, 744,
	38, 744,
	39, 744,
	40, 744,
	41, 744,
	42, 744,
	43, 744,
	45, 744,
	46, 744,
	47, 744,
	48, 744,
	49, 744,
	50, 744,
	51, 744,
	52, 744,
	53, 744,
	54, 744,
	56, 744,
	57, 744,
	59, 744,
	61, 744,
	62, 744,
	63, 744,
	65, 744,
	66, 744,
	67, 744,
	68, 744,
	70, 744,
	72, 744,
	73, 744,
	75, 744,
	76, 744,
	77, 744,
	78, 744,
	80, 744,
	81, 744,
	82, 744,
	84, 744,
	85, 744,
	86, 744,
	87, 744,
	88, 744,
	89, 744,
	90, 744,
	91, 744,
	92, 744,
	93, 744,
	94, 744,
	95, 744,
	97, 744,
	99, 744,
	102, 744,
	103, 744,
	105, 744,
	109, 744,
	110, 744,
	111, 744,
	112, 744,
	113, 744,
	114, 744,
	115, 744,
	116, 744,
	117, 744,
	123, 744,
	124, 744,
	125, 744,
	126, 744,
	127, 744,
	129, 744,
	131, 744,
	134, 744,
	136, 744,
	137, 744,
	139, 744,
	142, 744,
	143, 744,
	144, 744,
	145, 744,
	146, 744,
	147, 744,
	148, 744,
	150, 744,
	151, 744,
	153, 744,
	155, 744,
	156, 744,
	157, 744,
	158, 744,
	159, 744,
	160, 744,
	161, 744,
	162, 744,
	163, 744,
	165, 744,
	167, 744,
	168, 744,
	169, 744,
	170, 744,
	171, 744,
	172, 744,
	173, 744,
	174, 744,
	175, 744,
	176, 744,
	178, 744,
	179, 744,
	181, 744,
	182, 744,
	183, 744,
	184, 744,
	185, 744,
	187, 744,
	188, 744,
	191, 744,
	193, 744,
	194, 744,
	195, 744,
	196, 744,
	197, 744,
	198, 744,
	199, 744,
	200, 744,
	201, 744,
	202, 744,
	203, 744,
	204, 744,
	205, 744,
	207, 744,
	208, 744,
	209, 744,
	210, 744,
	211, 744,
	212, 744,
	214, 744,
	217, 744,
	220, 744,
	221, 744,
	222, 744,
	223, 744,
	224, 744,
	225, 744,
	226, 744,
	227, 744,
	228, 744,
	229, 744,
	230, 744,
	231, 744,
	233, 744,
	234, 744,
	235, 744,
	236, 744,
	237, 744,
	239, 744,
	240, 744,
	241, 744,
	242, 744,
	243, 744,
	244, 744,
	245, 744,
	246, 744,
	248, 744,
	249, 744,
	250, 744,
	251, 744,
	252, 744,
	254, 744,
	255, 744,
	256, 744,
	257, 744,
	258, 744,
	259, 744,
	260, 744,
	262, 744,
	263, 744,
	264, 744,
	265, 744,
	266, 744,
	267, 744,
	269, 744,
	270, 744,
	271, 744,
	272, 744,
	273, 744,
	275, 744,
	276, 744,
	277, 744,
	278, 744,
	279, 744,
	280, 744,
	281, 744,
	282, 744,
	283, 744,
	284, 744,
	285, 744,
	286, 744,
	287, 744,
	288, 744,
	289, 744,
	292, 744,
	293, 744,
	294, 744,
	295, 744,
	296, 744,
	297, 744,
	298, 744,
	299, 744,
	300, 744,
	301, 744,
	303, 744,
	305, 744,
	306, 744,
	307, 744,
	308, 744,
	309, 744,
	310, 744,
	311, 744,
	312, 744,
	314, 744,
	315, 744,
	316, 744,
	317, 744,
	320, 744,
	321, 744,
	322, 744,
	323, 744,
	324, 744,
	325, 744,
	326, 744,
	327, 744,
	328, 744,
	331, 744,
	332, 744,
	333, 744,
	334, 744,
	335, 744,
	336, 744,
	338, 744,
	339, 744,
	340, 744,
	341, 744,
	342, 744,
	343, 744,
	346, 744,
	351, 744,
	352, 744,
	353, 744,
	354, 744,
	355, 744,
	356, 744,
	364, 744,
	369, 744,
	370, 744,
	371, 744,
	378, 744,
	384, 744,
	-2, 0,
	-1, 149,
	1, 54,
	382, 54,
	-2, 736,
	-1, 518,
	133, 1354,
	318, 1354,
	361, 1354,
	380, 1354,
	-2, 0,
	-1, 519,
	133, 1301,
	318, 1301,
	361, 1301,
	380, 1301,
	-2, 0,
	-1, 521,
	133, 1414,
	318, 1414,
	361, 1414,
	380, 1414,
	-2, 0,
	-1, 523,
	133, 1438,
	318, 1438,
	361, 1438,
	380, 1438,
	-2, 0,
	-1, 531,
	133, 1359,
	318, 1359,
	361, 1359,
	380, 1359,
	-2, 349,
	-1, 557,
	1, 428,
	377, 428,
	379, 428,
	381, 428,
	382, 428,
	-2, 0,
	-1, 558,
	1, 481,
	130, 481,
	377, 481,
	379, 481,
	381, 481,
	382, 481,
	-2, 0,
	-1, 564,
	1, 442,
	377, 442,
	379, 442,
	381, 442,
	382, 442,
	-2, 0,
	-1, 566,
	1, 446,
	377, 446,
	379, 446,
	381, 446,
	382, 446,
	-2, 0,
	-1, 569,
	1, 454,
	377, 454,
	379, 454,
	381, 454,
	382, 454,
	-2, 0,
	-1, 570,
	1, 459,
	377, 459,
	379, 459,
	381, 459,
	382, 459,
	-2, 0,
	-1, 573,
	1, 469,
	377, 469,
	379, 469,
	381, 469,
	382, 469,
	-2, 0,
	-1, 599,
	118, 746,
	130, 746,
	186, 746,
	213, 746,
	-2, 705,
	-1, 606,
	118, 745,
	130, 745,
	186, 745,
	213, 745,
	-2, 702,
	-1, 662,
	378, 1279,
	-2, 1272,
	-1, 663,
	378, 1280,
	-2, 1273,
	-1, 669,
	5, 930,
	378, 930,
	-2, 1490,
	-1, 694,
	5, 889,
	-2, 1459,
	-1, 695,
	5, 924,
	378, 924,
	-2, 1461,
	-1, 696,
	5, 899,
	-2, 1462,
	-1, 697,
	5, 898,
	-2, 1463,
	-1, 698,
	5, 924,
	378, 924,
	-2, 1466,
	-1, 699,
	5, 924,
	378, 924,
	-2, 1467,
	-1, 700,
	5, 925,
	-2, 1470,
	-1, 701,
	5, 881,
	-2, 1471,
	-1, 702,
	5, 881,
	-2, 1472,
	-1, 703,
	5, 906,
	-2, 1476,
	-1, 704,
	5, 891,
	-2, 1477,
	-1, 705,
	5, 892,
	-2, 1478,
	-1, 706,
	5, 882,
	-2, 1484,
	-1, 707,
	5, 883,
	-2, 1485,
	-1, 708,
	5, 884,
	-2, 1486,
	-1, 709,
	5, 885,
	-2, 1487,
	-1, 710,
	5, 886,
	-2, 1488,
	-1, 711,
	5, 887,
	-2, 1489,
	-1, 712,
	5, 881,
	-2, 1496,
	-1, 713,
	5, 890,
	-2, 1501,
	-1, 714,
	5, 888,
	-2, 1504,
	-1, 715,
	5, 922,
	378, 922,
	-2, 1506,
	-1, 716,
	5, 926,
	-2, 1509,
	-1, 717,
	5, 928,
	-2, 1510,
	-1, 718,
	5, 921,
	378, 921,
	-2, 1515,
	-1, 782,
	112, 505,
	-2, 835,
	-1, 913,
	229, 734,
	-2, 578,
	-1, 918,
	215, 1276,
	-2, 0,
	-1, 954,
	1, 225,
	377, 225,
	379, 225,
	381, 225,
	382, 225,
	-2, 709,
	-1, 957,
	4, 1514,
	10, 1514,
	11, 1514,
	13, 1514,
	14, 1514,
	15, 1514,
	16, 1514,
	17, 1514,
	18, 1514,
	20, 1514,
	21, 1514,
	23, 1514,
	24, 1514,
	27, 1514,
	29, 1514,
	31, 1514,
	34, 1514,
	35, 1514,
	36, 1514,
	37, 1514,
	38, 1514,
	39, 1514,
	40, 1514,
	41, 1514,
	42, 1514,
	43, 1514,
	45, 1514,
	46, 1514,
	47, 1514,
	48, 1514,
	49, 1514,
	52, 1514,
	53, 1514,
	54, 1514,
	56, 1514,
	57, 1514,
	58, 1514,
	61, 1514,
	62, 1514,
	63, 1514,
	64, 1514,
	65, 1514,
	66, 1514,
	67, 1514,
	68, 1514,
	70, 1514,
	71, 1514,
	72, 1514,
	73, 1514,
	75, 1514,
	76, 1514,
	77, 1514,
	78, 1514,
	86, 1514,
	87, 1514,
	88, 1514,
	89, 1514,
	90, 1514,
	91, 1514,
	92, 1514,
	93, 1514,
	95, 1514,
	97, 1514,
	99, 1514,
	102, 1514,
	103, 1514,
	105, 1514,
	109, 1514,
	110, 1514,
	111, 1514,
	112, 1514,
	113, 1514,
	114, 1514,
	115, 1514,
	119, 1514,
	120, 1514,
	121, 1514,
	122, 1514,
	123, 1514,
	124, 1514,
	125, 1514,
	126, 1514,
	127, 1514,
	128, 1514,
	129, 1514,
	131, 1514,
	134, 1514,
	136, 1514,
	137, 1514,
	139, 1514,
	142, 1514,
	143, 1514,
	144, 1514,
	145, 1514,
	146, 1514,
	147, 1514,
	148, 1514,
	149, 1514,
	150, 1514,
	151, 1514,
	153, 1514,
	155, 1514,
	156, 1514,
	157, 1514,
	158, 1514,
	159, 1514,
	160, 1514,
	161, 1514,
	162, 1514,
	163, 1514,
	165, 1514,
	167, 1514,
	168, 1514,
	169, 1514,
	170, 1514,
	171, 1514,
	172, 1514,
	173, 1514,
	174, 1514,
	175, 1514,
	176, 1514,
	178, 1514,
	179, 1514,
	181, 1514,
	182, 1514,
	183, 1514,
	184, 1514,
	185, 1514,
	187, 1514,
	188, 1514,
	191, 1514,
	192, 1514,
	193, 1514,
	195, 1514,
	196, 1514,
	197, 1514,
	198, 1514,
	199, 1514,
	200, 1514,
	201, 1514,
	202, 1514,
	203, 1514,
	204, 1514,
	208, 1514,
	209, 1514,
	210, 1514,
	211, 1514,
	212, 1514,
	214, 1514,
	217, 1514,
	218, 1514,
	220, 1514,
	221, 1514,
	223, 1514,
	225, 1514,
	226, 1514,
	227, 1514,
	228, 1514,
	229, 1514,
	230, 1514,
	231, 1514,
	233, 1514,
	234, 1514,
	235, 1514,
	236, 1514,
	237, 1514,
	239, 1514,
	240, 1514,
	241, 1514,
	242, 1514,
	243, 1514,
	244, 1514,
	245, 1514,
	246, 1514,
	248, 1514,
	249, 1514,
	250, 1514,
	251, 1514,
	252, 1514,
	253, 1514,
	254, 1514,
	255, 1514,
	256, 1514,
	257, 1514,
	258, 1514,
	259, 1514,
	260, 1514,
	262, 1514,
	263, 1514,
	264, 1514,
	265, 1514,
	266, 1514,
	267, 1514,
	268, 1514,
	269, 1514,
	270, 1514,
	271, 1514,
	272, 1514,
	273, 1514,
	275, 1514,
	276, 1514,
	277, 1514,
	278, 1514,
	279, 1514,
	281, 1514,
	282, 1514,
	283, 1514,
	284, 1514,
	285, 1514,
	286, 1514,
	287, 1514,
	288, 1514,
	289, 1514,
	291, 1514,
	292, 1514,
	293, 1514,
	294, 1514,
	295, 1514,
	296, 1514,
	297, 1514,
	298, 1514,
	299, 1514,
	300, 1514,
	301, 1514,
	303, 1514,
	305, 1514,
	306, 1514,
	307, 1514,
	308, 1514,
	309, 1514,
	310, 1514,
	311, 1514,
	312, 1514,
	314, 1514,
	315, 1514,
	316, 1514,
	317, 1514,
	320, 1514,
	321, 1514,
	322, 1514,
	323, 1514,
	325, 1514,
	326, 1514,
	327, 1514,
	328, 1514,
	331, 1514,
	332, 1514,
	333, 1514,
	334, 1514,
	336, 1514,
	338, 1514,
	339, 1514,
	340, 1514,
	341, 1514,
	342, 1514,
	343, 1514,
	346, 1514,
	351, 1514,
	352, 1514,
	353, 1514,
	354, 1514,
	355, 1514,
	356, 1514,
	357, 1514,
	359, 1514,
	360, 1514,
	361, 1514,
	362, 1514,
	363, 1514,
	364, 1514,
	366, 1514,
	367, 1514,
	368, 1514,
	369, 1514,
	370, 1514,
	371, 1514,
	372, 1514,
	373, 1514,
	374, 1514,
	376, 1514,
	379, 1514,
	380, 1514,
	383, 1514,
	384, 1514,
	-2, 0,
	-1, 973,
	133, 1414,
	318, 1414,
	361, 1414,
	380, 1414,
	-2, 0,
	-1, 990,
	133, 1438,
	318, 1438,
	361, 1438,
	380, 1438,
	-2, 0,
	-1, 991,
	168, 648,
	239, 648,
	243, 648,
	-2, 336,
	-1, 1073,
	118, 745,
	130, 745,
	186, 745,
	213, 745,
	-2, 706,
	-1, 1154,
	108, 711,
	118, 711,
	130, 711,
	164, 711,
	186, 711,
	213, 711,
	219, 711,
	329, 711,
	-2, 1060,
	-1, 1164,
	378, 1256,
	-2, 1244,
	-1, 1182,
	379, 1173,
	-2, 0,
	-1, 1206,
	168, 648,
	239, 648,
	243, 648,
	-2, 643,
	-1, 1234,
	379, 1173,
	-2, 0,
	-1, 1238,
	108, 711,
	118, 711,
	130, 711,
	164, 711,
	186, 711,
	213, 711,
	219, 711,
	329, 711,
	-2, 812,
	-1, 1384,
	168, 648,
	239, 648,
	243, 648,
	-2, 338,
	-1, 1483,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 965,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 966,
	-1, 1485,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 967,
	-1, 1486,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 968,
	-1, 1487,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 969,
	-1, 1488,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 970,
	-1, 1489,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 971,
	-1, 1490,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 972,
	-1, 1499,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 981,
	-1, 1500,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 982,
	-1, 1501,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 983,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 988,
	-1, 1510,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 990,
	-1, 1512,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 994,
	-1, 1513,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 995,
	-1, 1514,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 996,
	-1, 1515,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 997,
	-1, 1584,
	133, 1184,
	378, 1279,
	-2, 1272,
	-1, 1585,
	133, 1185,
	-2, 1455,
	-1, 1586,
	133, 1186,
	-2, 1358,
	-1, 1587,
	133, 1187,
	-2, 1319,
	-1, 1588,
	133, 1188,
	-2, 1336,
	-1, 1589,
	133, 1189,
	-2, 1357,
	-1, 1590,
	133, 1190,
	-2, 1411,
	-1, 1667,
	1, 813,
	75, 813,
	108, 813,
	118, 813,
	130, 813,
	134, 813,
	138, 813,
	140, 813,
	155, 813,
	164, 813,
	171, 813,
	182, 813,
	186, 813,
	200, 813,
	213, 813,
	215, 813,
	219, 813,
	261, 813,
	263, 813,
	329, 813,
	337, 813,
	348, 813,
	349, 813,
	358, 813,
	377, 813,
	379, 813,
	381, 813,
	382, 813,
	383, 813,
	-2, 812,
	-1, 1819,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 989,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 991,
	-1, 1825,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 992,
	-1, 1843,
	224, 1144,
	-2, 1146,
	-1, 2020,
	229, 734,
	-2, 578,
	-1, 2079,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 993,
	-1, 2084,
	167, 0,
	-2, 1009,
	-1, 2093,
	224, 1145,
	-2, 1147,
	-1, 2135,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1037,
	-1, 2136,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1038,
	-1, 2137,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1039,
	-1, 2141,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1043,
	-1, 2142,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1044,
	-1, 2143,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1045,
	-1, 2283,
	167, 0,
	-2, 1010,
	-1, 2286,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 1013,
	-1, 2287,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 1015,
	-1, 2415,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 1014,
	-1, 2416,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 1016,
	-1, 2423,
	167, 0,
	-2, 1046,
	-1, 2500,
	167, 0,
	-2, 1047,
	-1, 2582,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	356, 0,
	364, 0,
	-2, 1458,
	-1, 2665,
	378, 1526,
	-2, 518,
}

const sqlPrivate = 57344

const sqlLast = 43676

var sqlAct = [...]int{

	663, 1256, 2650, 2662, 2648, 2230, 2663, 2590, 2381, 2380,
	2554, 2581, 2591, 2631, 1738, 2592, 2449, 2057, 1283, 2112,
	2391, 1746, 1813, 2505, 2580, 2241, 2263, 607, 2270, 2024,
	2337, 1291, 1527, 790, 907, 2351, 2265, 2195, 1735, 186,
	1958, 1721, 1254, 1909, 186, 2429, 2032, 1232, 186, 1937,
	1716, 2026, 943, 2257, 186, 1215, 1326, 1236, 1662, 186,
	186, 805, 2317, 186, 1747, 1327, 186, 1680, 947, 1286,
	721, 950, 1285, 1720, 186, 1663, 2194, 1945, 1854, 1671,
	1710, 1160, 615, 110, 454, 1540, 653, 2165, 1539, 1908,
	1457, 639, 1462, 1809, 1564, 1078, 994, 1400, 1244, 1279,
	1548, 63, 1246, 1216, 1524, 1011, 1792, 772, 1613, 661,
	1304, 1440, 472, 26, 1438, 993, 530, 451, 1192, 1196,
	1558, 1718, 660, 792, 955, 940, 1724, 933, 775, 1649,
	1740, 1636, 755, 1149, 1223, 509, 631, 110, 1079, 1399,
	656, 186, 186, 1580, 115, 1206, 1441, 177, 1439, 186,
	655, 1001, 487, 527, 720, 1298, 930, 522, 182, 753,
	1205, 2352, 551, 1083, 1842, 2179, 1717, 1241, 2180, 1739,
	2382, 611, 186, 186, 795, 186, 186, 807, 2382, 1306,
	2678, 186, 186, 2677, 2671, 116, 1306, 2671, 1711, 2670,
	2627, 1233, 1306, 2671, 1274, 606, 2626, 2625, 2607, 2602,
	1274, 1274, 2350, 1643, 2041, 611, 2601, 501, 1879, 1880,
	1643, 2598, 2578, 2168, 2577, 1274, 1316, 621, 1316, 612,
	2549, 2544, 2543, 2539, 1772, 1274, 2405, 1274, 802, 2531,
	2502, 2480, 110, 2350, 1772, 2350, 2042, 2077, 2477, 2475,
	1879, 1880, 1274, 2350, 2460, 788, 2459, 2437, 1274, 2434,
	2350, 1274, 2417, 1274, 2376, 600, 1772, 2371, 1643, 2349,
	2330, 1643, 26, 2350, 1274, 2285, 2256, 2251, 2175, 1772,
	1715, 1715, 2176, 2088, 2051, 1270, 2683, 1643, 2013, 780,
	784, 616, 1094, 1095, 1638, 1124, 1125, 1126, 1134, 1135,
	1136, 2669, 1643, 2012, 1894, 1112, 599, 1274, 1934, 1127,
	1933, 757, 1643, 1926, 1274, 2550, 1097, 1927, 1924, 1138,
	1923, 1922, 1643, 1846, 1643, 1643, 769, 1782, 1771, 1847,
	1711, 1643, 1772, 1094, 1095, 2679, 1885, 1761, 1714, 1316,
	1096, 1643, 1715, 2659, 1642, 1643, 1116, 1319, 1643, 2409,
	759, 1320, 760, 1113, 2405, 1316, 2168, 1097, 895, 1094,
	1095, 1637, 1124, 1125, 1126, 1134, 1135, 1136, 1885, 2067,
	1669, 2148, 1112, 1094, 1095, 2090, 1127, 2013, 1812, 1853,
	1790, 1096, 1387, 1097, 1210, 1543, 1138, 1274, 893, 975,
	149, 972, 2353, 971, 970, 969, 968, 1097, 1013, 1307,
	1895, 1119, 1120, 1121, 1122, 967, 1307, 1096, 966, 965,
	1102, 964, 1307, 1116, 963, 1094, 1095, 146, 962, 961,
	1113, 1096, 960, 959, 958, 761, 758, 605, 604, 603,
	1131, 1139, 1895, 186, 795, 186, 602, 186, 598, 1097,
	186, 1094, 1095, 597, 596, 595, 186, 148, 594, 1137,
	591, 1102, 590, 589, 588, 186, 186, 186, 186, 795,
	584, 583, 582, 1096, 795, 1097, 549, 1129, 1119, 1120,
	1121, 1122, 548, 547, 1117, 546, 1896, 1102, 545, 544,
	543, 542, 541, 540, 539, 147, 538, 537, 536, 1096,
	535, 1102, 186, 534, 1561, 533, 2041, 1131, 1139, 517,
	1128, 516, 515, 514, 513, 913, 186, 442, 1896, 1879,
	1880, 420, 1897, 1898, 1899, 1117, 1137, 146, 1094, 1095,
	413, 117, 186, 1312, 1953, 412, 2282, 169, 1577, 168,
	1305, 167, 186, 1102, 1129, 1123, 1431, 166, 165, 164,
	163, 1117, 1097, 162, 1637, 614, 1562, 148, 161, 911,
	1118, 916, 160, 932, 159, 1117, 158, 157, 156, 1102,
	155, 154, 153, 1894, 795, 612, 1096, 1132, 152, 151,
	150, 936, 936, 1111, 1890, 1888, 1889, 1881, 1882, 1883,
	1884, 1886, 1887, 937, 899, 147, 1403, 956, 1575, 1020,
	906, 1118, 1573, 140, 1237, 1571, 186, 1117, 1563, 1560,
	141, 1257, 1123, 2654, 2652, 2597, 1890, 1888, 1889, 1881,
	1882, 1883, 1884, 1886, 1887, 2579, 1090, 1118, 2565, 2410,
	2559, 117, 976, 1117, 2497, 2478, 2316, 1885, 1743, 2398,
	2315, 1118, 2311, 2310, 1132, 1023, 1102, 1074, 1130, 1018,
	1111, 1108, 1109, 1115, 1114, 1110, 1133, 2303, 1107, 1105,
	1106, 1098, 1099, 1100, 1101, 1103, 1104, 2302, 2301, 2297,
	2296, 2015, 2295, 187, 2294, 2312, 1900, 2288, 2262, 2162,
	2157, 1879, 1880, 1118, 2156, 2155, 1565, 1008, 2098, 991,
	2011, 1965, 1961, 1931, 1928, 1916, 1907, 1004, 1073, 988,
	1878, 1895, 1098, 1099, 1100, 1101, 1103, 1104, 1875, 1118,
	1874, 1872, 1535, 1069, 1859, 1130, 1858, 1843, 1108, 1109,
	1115, 1114, 1110, 1133, 899, 1107, 1105, 1106, 1098, 1099,
	1100, 1101, 1103, 1104, 1667, 1021, 1090, 1161, 768, 1152,
	479, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 1879, 1880,
	1323, 38, 1168, 719, 1089, 1235, 2672, 904, 2657, 612,
	2639, 2668, 1234, 2638, 41, 1290, 2114, 1559, 2569, 2568,
	1014, 1808, 2567, 186, 1075, 186, 1076, 1896, 2534, 1807,
	600, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104,
	478, 1777, 2526, 1086, 1087, 2524, 2516, 186, 186, 1885,
	1091, 2514, 2397, 2490, 2489, 1529, 2446, 2425, 1105, 1106,
	1098, 1099, 1100, 1101, 1103, 1104, 2406, 2385, 146, 480,
	2374, 599, 2356, 2308, 1536, 2239, 53, 146, 482, 54,
	1164, 2236, 2235, 2233, 2203, 2202, 2183, 1194, 1195, 1219,
	2171, 2083, 1198, 2055, 2001, 1992, 1978, 796, 148, 1977,
	808, 1963, 1201, 1932, 1906, 1868, 1867, 148, 1864, 1839,
	56, 1834, 1197, 1200, 1654, 1266, 1885, 1625, 1891, 1892,
	1893, 1569, 1282, 1214, 110, 1890, 1888, 1889, 1881, 1882,
	1883, 1884, 1886, 1887, 1213, 1204, 147, 1098, 1099, 1100,
	1101, 1103, 1104, 668, 140, 147, 1774, 1978, 612, 1190,
	1189, 141, 1188, 140, 1187, 2508, 1951, 1186, 1209, 1231,
	141, 1185, 1184, 795, 186, 1576, 1183, 1094, 1095, 1182,
	807, 1181, 1742, 1180, 1207, 1239, 186, 797, 1179, 1178,
	809, 117, 1177, 1176, 1211, 1094, 1095, 1175, 1174, 186,
	1173, 1097, 1172, 1165, 1153, 186, 57, 186, 1152, 186,
	987, 979, 952, 186, 2404, 1289, 2290, 2261, 2178, 1097,
	2174, 1281, 1845, 1655, 1161, 1096, 1879, 1880, 2053, 1150,
	1235, 1781, 1017, 118, 59, 1574, 60, 2027, 2408, 1572,
	2407, 1275, 1570, 1096, 1272, 2411, 2401, 2181, 2043, 1711,
	146, 1202, 1237, 1067, 186, 186, 1203, 481, 2222, 1072,
	93, 795, 905, 186, 2215, 2004, 186, 1997, 2430, 1295,
	1930, 1929, 1818, 1435, 1780, 1000, 1170, 2058, 1393, 1287,
	148, 1193, 1996, 1800, 1260, 1739, 2115, 1549, 1850, 2655,
	2653, 2037, 2190, 1061, 2562, 1765, 1003, 1002, 723, 1013,
	1009, 807, 1883, 1884, 1886, 1887, 186, 1247, 443, 448,
	1248, 186, 932, 1102, 1324, 423, 186, 186, 147, 186,
	173, 186, 2622, 186, 1561, 186, 140, 2538, 1309, 1379,
	1368, 1311, 1273, 141, 1062, 1314, 186, 1442, 426, 2064,
	2364, 1257, 186, 186, 2623, 1247, 1783, 2471, 1248, 2469,
	748, 186, 1053, 421, 117, 750, 1673, 796, 746, 744,
	447, 1297, 1404, 2468, 1300, 2214, 2467, 1881, 1882, 1883,
	1884, 1886, 1887, 186, 767, 741, 1562, 807, 2224, 2217,
	2666, 722, 796, 1255, 2187, 1167, 1006, 796, 2186, 1249,
	1863, 1862, 1879, 1880, 447, 170, 1861, 432, 1681, 1860,
	1333, 1821, 1321, 1764, 1706, 1252, 1701, 1696, 1322, 610,
	1380, 988, 1511, 110, 1367, 1394, 1384, 1015, 174, 1381,
	1208, 1008, 1405, 1253, 446, 1673, 1221, 1249, 1563, 1560,
	892, 1004, 1395, 2379, 1672, 1429, 1401, 797, 1471, 426,
	1463, 1470, 1629, 1879, 1880, 1368, 1368, 1628, 1419, 1472,
	1736, 1070, 2228, 2537, 1526, 1444, 433, 1012, 446, 1430,
	1016, 1526, 797, 1412, 1409, 609, 1428, 797, 2229, 2008,
	1413, 586, 1414, 2054, 1415, 1684, 1416, 496, 1417, 1281,
	1007, 174, 175, 1277, 1235, 665, 2451, 796, 1408, 186,
	593, 186, 1533, 2575, 186, 1423, 1425, 1443, 1531, 1301,
	592, 1436, 1775, 1437, 1093, 186, 1565, 986, 600, 1508,
	1885, 600, 600, 593, 807, 1333, 1333, 186, 1879, 1880,
	611, 186, 1565, 1546, 186, 2205, 1461, 1544, 186, 1367,
	1367, 1549, 186, 1247, 612, 2546, 1248, 2614, 807, 612,
	186, 1104, 795, 1810, 1811, 175, 623, 1598, 1608, 1453,
	186, 807, 1454, 1455, 422, 186, 1100, 1101, 1103, 1104,
	2547, 1885, 1537, 186, 1534, 2108, 2034, 797, 441, 1674,
	1656, 186, 176, 2003, 1895, 1657, 445, 1994, 1989, 2622,
	427, 1683, 186, 2594, 186, 423, 186, 1559, 436, 186,
	1887, 186, 1071, 186, 186, 424, 186, 795, 795, 1695,
	1660, 795, 1707, 1591, 2063, 186, 1066, 448, 1685, 1687,
	445, 2641, 1708, 1699, 2212, 1249, 2070, 444, 1427, 1060,
	1506, 1509, 612, 1632, 1631, 1895, 1250, 1306, 2345, 1262,
	608, 1641, 435, 434, 171, 176, 1885, 1651, 1652, 1690,
	1647, 448, 1258, 1565, 2519, 1756, 1692, 1697, 1047, 1239,
	1896, 444, 2035, 2065, 1677, 422, 2634, 1505, 1703, 1191,
	1634, 1014, 1010, 2105, 1250, 173, 1760, 2346, 1759, 742,
	1052, 752, 1646, 1682, 751, 172, 2595, 742, 743, 1026,
	2072, 427, 110, 1670, 807, 1222, 423, 1048, 110, 2613,
	1767, 1741, 186, 1741, 742, 1257, 424, 171, 2034, 1226,
	1895, 1896, 1753, 2206, 625, 936, 2218, 936, 186, 186,
	186, 1745, 186, 2452, 1730, 2106, 1754, 1762, 1755, 1757,
	1229, 1268, 1698, 1823, 956, 1763, 1766, 1257, 173, 2271,
	1525, 2527, 414, 2474, 1776, 2596, 1648, 1267, 172, 1385,
	1778, 186, 997, 506, 1226, 1791, 2421, 1227, 1147, 1888,
	1889, 1881, 1882, 1883, 1884, 1886, 1887, 1507, 2382, 1264,
	1532, 1797, 1198, 485, 1201, 1229, 1245, 1650, 484, 1407,
	2069, 1263, 1866, 587, 1195, 1194, 1896, 1265, 2341, 495,
	2342, 1224, 1784, 110, 1092, 1057, 2528, 985, 485, 1034,
	1666, 611, 1227, 1565, 2647, 2612, 2068, 2277, 2593, 437,
	2621, 1889, 1881, 1882, 1883, 1884, 1886, 1887, 2272, 2632,
	1225, 2344, 1786, 998, 2619, 488, 2390, 999, 1795, 1799,
	2347, 2642, 1824, 1733, 1788, 1947, 796, 982, 1228, 1804,
	974, 1803, 2071, 808, 1806, 1522, 2345, 1307, 493, 2338,
	488, 438, 900, 902, 489, 1082, 1789, 2007, 2462, 2461,
	2336, 1520, 1250, 2444, 2306, 2340, 1058, 2363, 1787, 1852,
	2511, 2360, 488, 493, 2362, 1541, 2633, 1081, 2189, 489,
	1974, 1970, 439, 1228, 440, 2346, 490, 1881, 1882, 1883,
	1884, 1886, 1887, 1734, 1296, 493, 1288, 1284, 2635, 2104,
	2555, 489, 2144, 1822, 1422, 992, 1081, 492, 2339, 415,
	1388, 490, 1959, 2343, 909, 997, 797, 2646, 1077, 2658,
	908, 612, 1059, 809, 796, 1449, 1081, 1027, 2242, 186,
	807, 179, 492, 490, 977, 186, 186, 2445, 1849, 186,
	981, 1935, 1516, 2392, 186, 1080, 1941, 186, 1980, 1979,
	1517, 1022, 1518, 576, 492, 186, 1523, 1946, 1816, 504,
	1948, 186, 186, 186, 808, 1392, 1028, 186, 623, 1025,
	186, 620, 1082, 498, 1080, 2307, 186, 186, 186, 186,
	186, 416, 2359, 1645, 1960, 2361, 998, 186, 1644, 795,
	999, 1940, 186, 997, 1080, 612, 2341, 807, 2342, 609,
	918, 1082, 1450, 1954, 797, 1955, 186, 2145, 1971, 1913,
	1914, 1915, 1035, 2146, 1390, 1964, 186, 2231, 186, 1950,
	186, 795, 795, 929, 186, 491, 927, 1391, 186, 2344,
	2383, 1936, 3, 186, 1975, 186, 2006, 577, 2347, 1368,
	808, 2318, 186, 2166, 809, 1568, 2424, 2014, 2442, 2016,
	491, 2305, 477, 34, 2227, 186, 795, 1056, 2002, 1910,
	1995, 1045, 1966, 1142, 1143, 1144, 1145, 1146, 2082, 1519,
	186, 997, 491, 2009, 1155, 1975, 1521, 2443, 1043, 1988,
	1368, 1041, 2039, 494, 1163, 1039, 1873, 1037, 476, 33,
	1911, 1833, 2019, 2020, 1990, 1779, 1939, 1831, 897, 1031,
	576, 1713, 1943, 1944, 898, 1999, 1949, 186, 494, 1333,
	1705, 1694, 894, 1829, 1065, 1064, 980, 1077, 620, 1801,
	809, 2343, 1420, 1367, 2030, 1411, 503, 2050, 2052, 1171,
	494, 2017, 2036, 1368, 612, 2021, 2018, 475, 30, 1051,
	497, 2044, 998, 1332, 2589, 1567, 999, 925, 578, 1704,
	1333, 1693, 1271, 2552, 2334, 2045, 2046, 186, 2047, 2048,
	2210, 2049, 2208, 2188, 1367, 2023, 1737, 1731, 2060, 2061,
	2062, 1729, 1317, 2100, 2101, 2102, 2059, 808, 2066, 474,
	69, 2085, 778, 1315, 577, 473, 68, 928, 1055, 2073,
	926, 1313, 1044, 2075, 1826, 1368, 470, 22, 1310, 1217,
	1217, 808, 34, 1333, 1827, 796, 471, 23, 1832, 1042,
	1308, 1269, 1040, 1261, 808, 2089, 1038, 1367, 1036, 2094,
	1259, 2091, 469, 28, 1251, 2095, 1463, 2119, 2025, 579,
	1030, 1368, 1368, 2485, 2403, 1463, 2124, 2116, 33, 186,
	1368, 1368, 2150, 468, 20, 186, 2107, 2109, 2110, 466,
	19, 2623, 1814, 2118, 186, 186, 2121, 809, 1332, 1332,
	796, 796, 2123, 580, 796, 1333, 581, 1050, 2154, 467,
	18, 2402, 1402, 1368, 458, 15, 459, 16, 924, 1367,
	2258, 809, 2149, 465, 51, 797, 1084, 30, 1370, 2151,
	457, 50, 464, 12, 809, 578, 463, 44, 456, 45,
	764, 1333, 1333, 2177, 186, 110, 186, 2164, 2167, 2182,
	1333, 1333, 2170, 2226, 186, 1367, 1367, 795, 1815, 2169,
	765, 1828, 1673, 2487, 1367, 1367, 1689, 2237, 1830, 69,
	2185, 1688, 186, 186, 2192, 68, 2250, 2234, 462, 7,
	797, 797, 1222, 1333, 797, 2252, 22, 808, 2000, 186,
	2244, 1991, 461, 6, 1709, 2201, 23, 1367, 186, 2213,
	807, 186, 186, 186, 1085, 1802, 2246, 2243, 807, 740,
	2247, 1369, 28, 1700, 2220, 1673, 579, 2232, 2200, 2219,
	2248, 2220, 2254, 2238, 1686, 2209, 2225, 2211, 2245, 2279,
	2521, 2199, 483, 20, 2353, 2259, 2253, 1029, 766, 19,
	2499, 1226, 2473, 1370, 1370, 186, 2173, 1433, 1434, 2319,
	580, 1088, 1702, 581, 1691, 2276, 2551, 1094, 1095, 18,
	2184, 2273, 1229, 2388, 15, 1744, 16, 809, 1732, 2280,
	2284, 460, 36, 51, 1728, 455, 35, 1633, 1224, 1383,
	50, 1097, 12, 1325, 1368, 2630, 44, 2645, 45, 1227,
	1094, 1095, 623, 623, 505, 2304, 1879, 1880, 2436, 186,
	1094, 1095, 186, 1397, 1396, 1096, 2324, 1225, 2260, 2163,
	2111, 1397, 807, 186, 186, 1329, 2056, 186, 186, 186,
	1956, 1925, 1630, 1627, 1626, 1557, 1369, 1369, 7, 1398,
	1158, 2292, 745, 747, 186, 2103, 1168, 1166, 1096, 186,
	1939, 186, 6, 186, 186, 186, 1063, 1054, 186, 795,
	2325, 1049, 2323, 1156, 1333, 807, 1046, 1446, 795, 1451,
	2333, 1032, 2321, 2354, 984, 1458, 186, 186, 1367, 1386,
	1228, 2328, 585, 2326, 795, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 2394, 1510, 2357,
	1512, 1513, 1514, 1515, 2395, 2450, 2377, 2387, 486, 2201,
	2373, 36, 1410, 808, 2393, 35, 2378, 1538, 1033, 2400,
	1329, 1329, 2220, 2414, 1155, 1952, 1653, 2370, 2545, 2220,
	2384, 2298, 2200, 1865, 2375, 2504, 2389, 2420, 2412, 2413,
	2201, 2419, 1566, 1578, 1579, 2199, 2201, 1595, 1169, 1607,
	1609, 1614, 1617, 1618, 1619, 186, 2320, 186, 2322, 807,
	186, 48, 2197, 2200, 642, 2335, 2191, 1723, 186, 2200,
	2329, 1722, 796, 1220, 807, 810, 2199, 664, 1582, 1464,
	808, 739, 2199, 666, 2399, 2426, 1330, 2433, 667, 1331,
	2358, 1199, 654, 809, 2454, 1328, 2438, 2456, 953, 1368,
	1748, 2435, 1005, 1530, 796, 796, 1547, 1281, 2453, 1848,
	1162, 186, 634, 646, 795, 645, 1545, 978, 186, 633,
	2440, 1957, 2386, 2033, 2396, 1448, 186, 186, 795, 795,
	1805, 1445, 186, 2029, 2207, 2455, 425, 1876, 951, 796,
	1605, 1597, 1593, 1068, 1148, 2484, 1749, 2483, 1019, 2040,
	2464, 186, 797, 2492, 2488, 1368, 186, 2201, 2495, 1773,
	809, 1212, 2491, 186, 2482, 1456, 763, 762, 2498, 1333,
	2656, 1389, 1785, 1141, 1140, 2515, 749, 2513, 996, 995,
	2200, 1973, 2476, 1367, 797, 797, 2220, 2640, 186, 186,
	2509, 2472, 2201, 2199, 2510, 186, 2465, 2466, 2520, 2493,
	2494, 2204, 2501, 795, 2532, 2561, 2518, 648, 186, 145,
	795, 795, 2530, 2517, 2507, 2200, 1368, 2533, 2525, 797,
	142, 2479, 144, 143, 2005, 1333, 72, 1452, 2199, 32,
	2536, 31, 92, 91, 90, 186, 2535, 186, 89, 1367,
	186, 88, 807, 87, 86, 85, 183, 84, 83, 82,
	81, 418, 80, 79, 78, 428, 2570, 77, 1318, 2572,
	2558, 449, 76, 75, 74, 528, 499, 183, 2571, 524,
	507, 186, 1332, 512, 2576, 71, 70, 2574, 2541, 2542,
	29, 532, 25, 96, 2486, 24, 1333, 67, 186, 186,
	186, 2588, 2586, 1382, 2587, 66, 186, 2606, 2496, 2599,
	1367, 27, 17, 2563, 11, 21, 114, 113, 112, 111,
	186, 14, 13, 1332, 2611, 2609, 2610, 2608, 109, 108,
	107, 106, 105, 10, 9, 2620, 1599, 2618, 95, 2269,
	2624, 2573, 42, 8, 40, 39, 94, 136, 135, 132,
	134, 2201, 131, 2629, 2628, 133, 103, 138, 756, 756,
	137, 129, 2637, 127, 2643, 128, 418, 2636, 130, 126,
	2649, 2651, 2644, 125, 2200, 139, 1332, 102, 101, 100,
	99, 98, 1819, 1820, 5, 2, 1, 2199, 1825, 418,
	418, 2649, 800, 418, 2667, 2660, 2661, 0, 183, 896,
	638, 2649, 2673, 0, 2674, 0, 2676, 1838, 2675, 0,
	796, 2651, 2682, 2557, 0, 2651, 2684, 2680, 2681, 0,
	1844, 0, 0, 0, 0, 0, 1851, 1370, 0, 1855,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 417, 0, 1869, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 618, 0, 576,
	0, 808, 0, 0, 2603, 2604, 2605, 0, 1370, 0,
	0, 0, 0, 1156, 1332, 1332, 0, 620, 0, 0,
	1155, 1551, 0, 1332, 1332, 0, 0, 1614, 1614, 1614,
	797, 0, 0, 0, 1583, 1583, 1596, 0, 0, 0,
	1616, 0, 0, 0, 1620, 1621, 1623, 0, 0, 0,
	1369, 619, 0, 0, 1217, 0, 1332, 0, 0, 0,
	1942, 1370, 1835, 1836, 0, 0, 0, 0, 0, 0,
	1635, 0, 0, 809, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 577, 0, 0, 0, 0, 0, 773,
	0, 1369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	0, 0, 782, 786, 0, 0, 804, 0, 0, 0,
	0, 0, 0, 1370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1902, 1903,
	1904, 0, 796, 0, 1369, 0, 0, 0, 808, 0,
	0, 796, 0, 0, 1329, 0, 2031, 0, 0, 1370,
	1370, 0, 0, 0, 0, 0, 0, 796, 1370, 1370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	532, 0, 532, 0, 919, 809, 0, 922, 0, 0,
	0, 0, 0, 418, 578, 1329, 0, 623, 623, 0,
	0, 1370, 532, 532, 418, 944, 1369, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1599,
	1599, 0, 797, 0, 2074, 0, 0, 1332, 809, 1458,
	0, 797, 0, 0, 0, 2078, 0, 0, 2079, 532,
	0, 0, 1369, 1369, 0, 0, 0, 797, 1329, 0,
	2084, 1369, 1369, 532, 0, 0, 0, 0, 0, 2092,
	0, 0, 808, 0, 0, 0, 0, 2096, 0, 983,
	1942, 0, 0, 617, 0, 579, 0, 808, 0, 532,
	0, 0, 0, 0, 1369, 0, 0, 0, 0, 0,
	2120, 0, 0, 0, 2122, 1599, 1599, 1599, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	1329, 0, 581, 0, 0, 0, 0, 796, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2152, 2153, 0,
	0, 796, 796, 0, 0, 0, 2159, 2160, 2161, 0,
	0, 0, 809, 418, 0, 0, 1329, 1329, 0, 0,
	0, 0, 0, 0, 0, 1329, 1329, 809, 0, 0,
	2080, 2081, 0, 0, 2172, 0, 0, 0, 0, 0,
	0, 0, 1370, 0, 0, 0, 786, 0, 0, 0,
	0, 0, 0, 0, 0, 1837, 0, 804, 1329, 0,
	0, 0, 1840, 0, 2193, 0, 0, 797, 0, 0,
	0, 0, 0, 0, 0, 0, 796, 0, 0, 1856,
	1857, 797, 797, 796, 796, 0, 0, 0, 0, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 0, 2147,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	0, 1217, 1332, 0, 0, 1369, 0, 0, 0, 1905,
	2255, 0, 0, 0, 0, 0, 1616, 1616, 1616, 0,
	0, 1918, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 797, 0, 0, 0,
	0, 0, 0, 797, 797, 0, 0, 0, 0, 2283,
	0, 0, 0, 2286, 2287, 0, 0, 2289, 1332, 0,
	512, 0, 756, 0, 2291, 0, 2293, 1599, 1599, 0,
	0, 0, 0, 0, 0, 809, 786, 0, 0, 0,
	0, 0, 2300, 0, 418, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 2309, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 1599, 1599, 1599, 1599,
	1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
	1599, 1599, 1599, 1599, 1599, 0, 1599, 1370, 0, 0,
	0, 643, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2355, 0, 0, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 1370, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	1369, 0, 418, 0, 418, 0, 418, 0, 0, 0,
	1302, 0, 0, 0, 0, 0, 0, 480, 2415, 2416,
	0, 0, 0, 0, 53, 0, 482, 54, 0, 0,
	0, 0, 601, 0, 1370, 0, 0, 773, 1242, 613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2428,
	0, 532, 183, 0, 0, 2431, 1369, 0, 56, 0,
	183, 0, 0, 532, 0, 0, 0, 0, 0, 0,
	774, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2158, 0, 0, 0, 0, 0, 2463,
	0, 0, 0, 532, 1329, 0, 0, 0, 532, 0,
	0, 0, 0, 183, 532, 0, 532, 1369, 532, 0,
	532, 0, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 532,
	532, 0, 0, 0, 57, 0, 0, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 2423, 0, 0, 1280, 0, 2216, 0,
	532, 118, 59, 0, 60, 0, 0, 2223, 0, 0,
	0, 0, 0, 2512, 0, 786, 0, 1299, 146, 1299,
	37, 0, 1794, 0, 0, 481, 0, 0, 93, 0,
	0, 38, 120, 0, 2447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 0, 148, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 47, 0, 0, 140, 49, 0, 0, 0, 52,
	0, 141, 123, 0, 0, 0, 53, 0, 104, 54,
	0, 0, 2500, 2585, 2585, 0, 512, 0, 756, 0,
	0, 896, 117, 0, 0, 0, 0, 0, 0, 2600,
	0, 55, 418, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 1665, 0, 0, 0, 418, 2585,
	1599, 418, 0, 0, 0, 1678, 0, 0, 0, 418,
	0, 1432, 0, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 418, 0, 0,
	0, 0, 1712, 0, 1768, 0, 0, 0, 0, 0,
	1719, 1599, 0, 0, 0, 38, 0, 2585, 896, 0,
	0, 0, 0, 0, 0, 613, 0, 0, 41, 418,
	0, 1752, 0, 532, 0, 0, 532, 0, 532, 0,
	418, 418, 0, 1758, 2664, 0, 57, 0, 0, 0,
	0, 0, 1678, 58, 1769, 2664, 0, 0, 2664, 2664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 118, 59, 0, 60, 0, 61, 0,
	124, 0, 0, 1770, 0, 62, 0, 0, 0, 1599,
	146, 0, 482, 0, 0, 0, 0, 73, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 56, 1879, 1880, 0, 1897, 1898,
	1899, 0, 0, 0, 0, 773, 0, 0, 0, 1793,
	0, 97, 2281, 0, 0, 2432, 0, 0, 0, 0,
	119, 773, 0, 0, 1668, 418, 418, 418, 147, 418,
	0, 0, 786, 0, 0, 0, 140, 0, 0, 0,
	786, 0, 0, 141, 0, 0, 0, 0, 0, 1894,
	804, 0, 2458, 0, 0, 0, 0, 601, 418, 0,
	0, 0, 0, 0, 117, 0, 0, 4, 0, 0,
	2470, 0, 0, 0, 0, 0, 0, 1151, 0, 1154,
	57, 0, 1750, 0, 0, 0, 1159, 0, 0, 0,
	0, 0, 0, 804, 804, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 59, 0,
	60, 0, 0, 1885, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 1095, 146, 1124, 1125, 1126, 1134, 1135,
	1136, 481, 0, 0, 93, 1112, 0, 0, 0, 1127,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 1138,
	0, 0, 1900, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 1116, 1895, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 479, 0, 0,
	0, 0, 147, 0, 0, 2548, 0, 0, 38, 0,
	140, 0, 0, 0, 0, 0, 0, 141, 1796, 804,
	1798, 41, 786, 64, 0, 0, 0, 0, 1238, 0,
	2564, 0, 2566, 0, 0, 0, 0, 0, 117, 0,
	0, 1119, 1120, 1121, 1122, 0, 418, 478, 0, 0,
	1102, 1817, 418, 418, 0, 0, 418, 0, 0, 0,
	0, 1665, 0, 1896, 1665, 0, 0, 0, 0, 0,
	1131, 1139, 1962, 0, 0, 0, 480, 0, 418, 1968,
	1969, 0, 0, 53, 1678, 482, 54, 1976, 0, 1137,
	0, 0, 0, 1981, 1982, 1984, 1986, 1987, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 1129, 0, 1998,
	0, 0, 0, 0, 1117, 0, 0, 56, 0, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1294, 0, 1294, 0, 532, 0, 0,
	1128, 418, 0, 0, 0, 2028, 0, 0, 0, 0,
	418, 0, 2038, 0, 1891, 1892, 1893, 0, 0, 418,
	0, 1890, 1888, 1889, 1881, 1882, 1883, 1884, 1886, 1887,
	0, 0, 1793, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1793, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 1132, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 773,
	118, 59, 0, 60, 0, 773, 773, 0, 0, 773,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 1418, 0, 0, 481, 0, 0, 93, 0, 0,
	0, 1967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2113, 0, 0, 148, 1130, 0,
	0, 1108, 1109, 1115, 1114, 1110, 1133, 1993, 1107, 1105,
	1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0, 0,
	0, 0, 64, 0, 0, 1921, 2010, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 140, 2022, 0, 0, 0, 0, 0,
	141, 0, 0, 1280, 0, 601, 0, 0, 601, 601,
	0, 0, 1280, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 0, 1665, 0, 0, 0, 0, 0, 0, 0,
	0, 896, 1665, 0, 0, 0, 1094, 1095, 0, 1124,
	1125, 1126, 1134, 1135, 1136, 0, 2196, 0, 0, 1112,
	0, 1528, 0, 1127, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1138, 613, 2221, 0, 2076, 0, 1154,
	0, 0, 2221, 0, 0, 0, 0, 0, 0, 0,
	0, 1678, 0, 1294, 1096, 0, 0, 0, 0, 0,
	1116, 2240, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 418,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2266, 0, 0, 0,
	0, 0, 0, 0, 0, 2268, 774, 0, 2274, 418,
	418, 0, 0, 0, 0, 1119, 1120, 1121, 1122, 0,
	0, 0, 1238, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 1131, 1139, 0, 64, 0, 0,
	0, 0, 2299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 0, 0, 0, 0, 0, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 1129, 64, 0, 0, 0, 0, 0, 1117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 418, 64, 0, 896,
	0, 0, 0, 0, 1128, 0, 0, 0, 0, 0,
	1665, 896, 0, 0, 2331, 2332, 1678, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2196, 896, 0, 0, 1230, 0, 2365, 0, 2366, 1123,
	418, 2368, 2369, 2221, 0, 418, 0, 0, 0, 0,
	2221, 479, 1750, 773, 1118, 0, 0, 0, 0, 0,
	0, 2196, 38, 896, 1719, 0, 0, 2196, 0, 0,
	0, 1132, 0, 0, 0, 41, 0, 1111, 1094, 1095,
	0, 0, 2275, 804, 1134, 1135, 1136, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 478, 1097, 0, 0, 1138, 0, 0, 0, 0,
	0, 0, 1879, 1880, 0, 1897, 1898, 1899, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 2087,
	480, 0, 1116, 0, 0, 0, 0, 53, 0, 482,
	54, 0, 1130, 0, 0, 1108, 1109, 1115, 1114, 1110,
	1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 1678, 0, 2439, 0, 1894, 2441, 0, 1920,
	0, 56, 0, 0, 0, 418, 0, 0, 2196, 773,
	0, 1528, 0, 0, 0, 0, 0, 1119, 1120, 1121,
	1122, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 1154, 0, 0, 0, 0, 0, 2221, 0, 0,
	0, 0, 0, 2196, 0, 0, 1131, 1139, 418, 0,
	0, 0, 0, 2367, 0, 896, 0, 0, 2372, 0,
	1885, 0, 0, 2266, 2266, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 57, 2506, 0,
	1117, 0, 0, 1665, 0, 0, 0, 0, 0, 1900,
	1294, 0, 0, 0, 0, 1154, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 59, 0, 60, 0, 0,
	0, 0, 0, 0, 1895, 2522, 2523, 0, 0, 0,
	0, 146, 418, 0, 0, 0, 0, 0, 481, 0,
	774, 93, 0, 0, 0, 2540, 774, 774, 0, 0,
	774, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 2556, 0, 896, 0, 0, 418, 0, 0,
	0, 0, 0, 1132, 0, 0, 0, 0, 2448, 0,
	0, 0, 2196, 64, 0, 0, 0, 0, 0, 147,
	1896, 0, 0, 0, 64, 0, 0, 140, 2506, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 896, 896, 0, 0,
	64, 2481, 0, 418, 64, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 2617, 0, 0,
	0, 0, 0, 0, 1130, 0, 0, 0, 0, 0,
	0, 0, 1133, 0, 1107, 1105, 1106, 1098, 1099, 1100,
	1101, 1103, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1891, 1892, 1893, 0, 0, 0, 0, 1890, 1888,
	1889, 1881, 1882, 1883, 1884, 1886, 1887, 0, 0, 0,
	0, 0, 0, 0, 0, 2529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 954, 0, 794, 0, 0, 0,
	2560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 191, 192, 193, 354,
	355, 356, 357, 194, 358, 359, 0, 195, 360, 361,
	196, 197, 0, 0, 362, 363, 364, 0, 198, 365,
	0, 798, 0, 199, 200, 201, 1750, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 724, 209, 210,
	211, 0, 0, 0, 64, 0, 0, 0, 212, 213,
	419, 214, 366, 215, 367, 368, 0, 216, 0, 217,
	774, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 369, 222, 224, 223, 225, 370, 371, 0, 725,
	0, 0, 0, 0, 0, 226, 227, 372, 373, 374,
	0, 228, 0, 229, 0, 0, 726, 0, 230, 375,
	0, 376, 0, 0, 231, 232, 233, 234, 377, 378,
	728, 0, 379, 238, 0, 235, 0, 727, 236, 380,
	237, 381, 382, 383, 384, 385, 0, 386, 0, 729,
	239, 240, 241, 730, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 389, 731, 247, 248, 732, 0, 249,
	250, 0, 0, 251, 774, 252, 733, 253, 254, 256,
	390, 255, 734, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 735, 267, 736, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 737, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 146, 309, 399, 308,
	310, 311, 0, 312, 300, 301, 313, 738, 314, 400,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	402, 319, 320, 403, 0, 323, 148, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 405, 406, 332,
	774, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 957, 411, 0, 0, 347, 0,
	0, 0, 140, 348, 349, 350, 351, 352, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 811, 0, 190, 812, 813, 814,
	815, 353, 816, 817, 818, 819, 191, 192, 193, 354,
	355, 356, 357, 194, 358, 359, 820, 195, 360, 361,
	196, 197, 821, 822, 362, 363, 364, 823, 198, 365,
	824, 798, 825, 199, 200, 201, 0, 203, 204, 205,
	202, 826, 206, 0, 207, 208, 827, 724, 209, 210,
	211, 828, 829, 831, 830, 832, 833, 834, 212, 213,
	419, 214, 366, 215, 367, 368, 835, 216, 836, 217,
	837, 218, 838, 839, 219, 220, 840, 221, 841, 0,
	842, 369, 222, 224, 223, 225, 370, 371, 843, 725,
	844, 0, 0, 0, 0, 226, 227, 372, 373, 374,
	64, 228, 845, 229, 846, 847, 726, 848, 230, 375,
	849, 376, 850, 1528, 231, 232, 233, 234, 377, 378,
	728, 851, 379, 238, 852, 235, 853, 727, 236, 380,
	237, 381, 382, 383, 384, 385, 854, 386, 855, 729,
	239, 240, 241, 730, 387, 388, 242, 243, 244, 856,
	246, 245, 857, 389, 731, 247, 248, 732, 858, 249,
	250, 859, 860, 251, 0, 252, 733, 253, 254, 256,
	390, 255, 734, 257, 258, 260, 259, 861, 862, 863,
	391, 261, 392, 262, 263, 864, 264, 865, 866, 265,
	867, 868, 266, 393, 735, 267, 736, 394, 268, 269,
	270, 271, 272, 273, 869, 274, 395, 275, 396, 276,
	870, 277, 278, 279, 280, 281, 397, 282, 283, 871,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 872, 296, 737, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 873, 309, 399, 308,
	310, 311, 874, 312, 300, 301, 313, 738, 314, 400,
	401, 315, 875, 0, 322, 316, 317, 302, 318, 321,
	402, 319, 320, 403, 876, 323, 877, 324, 325, 326,
	327, 328, 329, 330, 331, 878, 404, 405, 406, 332,
	879, 880, 333, 334, 407, 408, 881, 335, 336, 337,
	338, 882, 883, 339, 340, 341, 342, 884, 343, 885,
	409, 344, 345, 346, 410, 411, 886, 887, 347, 888,
	889, 890, 891, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1658, 0,
	0, 0, 0, 0, 188, 189, 811, 1659, 190, 812,
	813, 814, 815, 353, 816, 817, 818, 819, 191, 192,
	193, 354, 355, 356, 357, 194, 358, 359, 820, 195,
	360, 361, 196, 197, 821, 822, 362, 363, 364, 823,
	198, 365, 824, 798, 825, 199, 200, 201, 0, 203,
	204, 205, 202, 826, 206, 0, 207, 208, 827, 724,
	209, 210, 211, 828, 829, 831, 830, 832, 833, 834,
	212, 213, 419, 214, 366, 215, 367, 368, 835, 216,
	836, 217, 837, 218, 838, 839, 219, 220, 840, 221,
	841, 0, 842, 369, 222, 224, 223, 225, 370, 371,
	843, 725, 844, 0, 0, 0, 0, 226, 227, 372,
	373, 374, 0, 228, 845, 229, 846, 847, 726, 848,
	230, 375, 849, 376, 850, 0, 231, 232, 233, 234,
	377, 378, 728, 851, 379, 238, 852, 235, 853, 727,
	236, 380, 237, 381, 382, 383, 384, 385, 854, 386,
	855, 729, 239, 240, 241, 730, 387, 388, 242, 243,
	244, 856, 246, 245, 857, 389, 731, 247, 248, 732,
	858, 249, 250, 859, 860, 251, 0, 252, 733, 253,
	254, 256, 390, 255, 734, 257, 258, 260, 259, 861,
	862, 863, 391, 261, 392, 262, 263, 864, 264, 865,
	866, 265, 867, 868, 266, 393, 735, 267, 736, 394,
	268, 269, 270, 271, 272, 273, 869, 274, 395, 275,
	396, 276, 870, 277, 278, 279, 280, 281, 397, 282,
	283, 871, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 872, 296, 737, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 873, 309,
	399, 308, 310, 311, 874, 312, 300, 301, 313, 738,
	314, 400, 401, 315, 875, 0, 322, 316, 317, 302,
	318, 321, 402, 319, 320, 403, 876, 323, 877, 324,
	325, 326, 327, 328, 329, 330, 331, 878, 404, 405,
	406, 332, 879, 880, 333, 334, 407, 408, 881, 335,
	336, 337, 338, 882, 883, 339, 340, 341, 342, 884,
	343, 885, 409, 344, 345, 346, 410, 411, 886, 887,
	347, 888, 889, 890, 891, 348, 349, 350, 351, 352,
	0, 806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 811,
	2327, 190, 812, 813, 814, 815, 353, 816, 817, 818,
	819, 191, 192, 193, 354, 355, 356, 357, 194, 358,
	359, 820, 195, 360, 361, 196, 197, 821, 822, 362,
	363, 364, 823, 198, 365, 824, 798, 825, 199, 200,
	201, 0, 203, 204, 205, 202, 826, 206, 0, 207,
	208, 827, 724, 209, 210, 211, 828, 829, 831, 830,
	832, 833, 834, 212, 213, 419, 214, 366, 215, 367,
	368, 835, 216, 836, 217, 837, 218, 838, 839, 219,
	220, 840, 221, 841, 0, 842, 369, 222, 224, 223,
	225, 370, 371, 843, 725, 844, 0, 0, 0, 0,
	226, 227, 372, 373, 374, 0, 228, 845, 229, 846,
	847, 726, 848, 230, 375, 849, 376, 850, 0, 231,
	232, 233, 234, 377, 378, 728, 851, 379, 238, 852,
	235, 853, 727, 236, 380, 237, 381, 382, 383, 384,
	385, 854, 386, 855, 729, 239, 240, 241, 730, 387,
	388, 242, 243, 244, 856, 246, 245, 857, 389, 731,
	247, 248, 732, 858, 249, 250, 859, 860, 251, 0,
	252, 733, 253, 254, 256, 390, 255, 734, 257, 258,
	260, 259, 861, 862, 863, 391, 261, 392, 262, 263,
	864, 264, 865, 866, 265, 867, 868, 266, 393, 735,
	267, 736, 394, 268, 269, 270, 271, 272, 273, 869,
	274, 395, 275, 396, 276, 870, 277, 278, 279, 280,
	281, 397, 282, 283, 871, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 872, 296,
	737, 297, 298, 398, 299, 0, 303, 304, 305, 306,
	307, 873, 309, 399, 308, 310, 311, 874, 312, 300,
	301, 313, 738, 314, 400, 401, 315, 875, 0, 322,
	316, 317, 302, 318, 321, 402, 319, 320, 403, 876,
	323, 877, 324, 325, 326, 327, 328, 329, 330, 331,
	878, 404, 405, 406, 332, 879, 880, 333, 334, 407,
	408, 881, 335, 336, 337, 338, 882, 883, 339, 340,
	341, 342, 884, 343, 885, 409, 344, 345, 346, 410,
	411, 886, 887, 347, 888, 889, 890, 891, 348, 349,
	350, 351, 352, 806, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1276, 188,
	189, 811, 0, 190, 812, 813, 814, 815, 353, 816,
	817, 818, 819, 191, 192, 193, 354, 355, 356, 357,
	194, 358, 359, 820, 195, 360, 361, 196, 197, 821,
	822, 362, 363, 364, 823, 198, 365, 824, 798, 825,
	199, 200, 201, 0, 203, 204, 205, 202, 826, 206,
	0, 207, 208, 827, 724, 209, 210, 211, 828, 829,
	831, 830, 832, 833, 834, 212, 213, 419, 214, 366,
	215, 367, 368, 835, 216, 836, 217, 837, 218, 838,
	839, 219, 220, 840, 221, 841, 0, 842, 369, 222,
	224, 223, 225, 370, 371, 843, 725, 844, 0, 0,
	0, 0, 226, 227, 372, 373, 374, 0, 228, 845,
	229, 846, 847, 726, 848, 230, 375, 849, 376, 850,
	0, 231, 232, 233, 234, 377, 378, 728, 851, 379,
	238, 852, 235, 853, 727, 236, 380, 237, 381, 382,
	383, 384, 385, 854, 386, 855, 729, 239, 240, 241,
	730, 387, 388, 242, 243, 244, 856, 246, 245, 857,
	389, 731, 247, 248, 732, 858, 249, 250, 859, 860,
	251, 0, 252, 733, 253, 254, 256, 390, 255, 734,
	257, 258, 260, 259, 861, 862, 863, 391, 261, 392,
	262, 263, 864, 264, 865, 866, 265, 867, 868, 266,
	393, 735, 267, 736, 394, 268, 269, 270, 271, 272,
	273, 869, 274, 395, 275, 396, 276, 870, 277, 278,
	279, 280, 281, 397, 282, 283, 871, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	872, 296, 737, 297, 298, 398, 299, 0, 303, 304,
	305, 306, 307, 873, 309, 399, 308, 310, 311, 874,
	312, 300, 301, 313, 738, 314, 400, 401, 315, 875,
	0, 322, 316, 317, 302, 318, 321, 402, 319, 320,
	403, 876, 323, 877, 324, 325, 326, 327, 328, 329,
	330, 331, 878, 404, 405, 406, 332, 879, 880, 333,
	334, 407, 408, 881, 335, 336, 337, 338, 882, 883,
	339, 340, 341, 342, 884, 343, 885, 409, 344, 345,
	346, 410, 411, 886, 887, 347, 888, 889, 890, 891,
	348, 349, 350, 351, 352, 1556, 0, 662, 651, 652,
	649, 650, 641, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 1553, 0, 190, 0, 0,
	0, 0, 679, 644, 0, 0, 0, 191, 192, 193,
	354, 694, 356, 695, 194, 696, 697, 0, 195, 360,
	361, 196, 197, 647, 678, 698, 699, 364, 0, 198,
	690, 0, 670, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 724, 209,
	210, 211, 0, 671, 672, 674, 0, 673, 675, 212,
	213, 419, 214, 700, 215, 701, 702, 632, 216, 0,
	217, 0, 218, 1554, 0, 693, 220, 0, 221, 0,
	0, 0, 635, 222, 224, 223, 225, 680, 681, 658,
	725, 0, 0, 0, 0, 0, 226, 227, 703, 704,
	705, 0, 228, 0, 229, 0, 0, 726, 0, 230,
	691, 0, 376, 0, 0, 231, 232, 233, 234, 687,
	689, 728, 0, 379, 238, 0, 235, 0, 727, 236,
	706, 237, 707, 708, 709, 710, 711, 0, 669, 0,
	729, 239, 240, 241, 730, 387, 388, 242, 243, 244,
	0, 246, 245, 0, 692, 731, 247, 248, 732, 0,
	249, 250, 0, 0, 251, 0, 252, 733, 253, 254,
	256, 390, 255, 734, 257, 258, 260, 259, 629, 0,
	659, 688, 261, 712, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 735, 267, 736, 682, 268,
	269, 270, 271, 272, 273, 0, 274, 683, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 713, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 737, 297, 298, 636,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 399,
	308, 310, 311, 676, 312, 300, 301, 313, 738, 314,
	714, 401, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 715, 319, 320, 684, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 404, 716, 717,
	332, 0, 0, 333, 334, 685, 686, 657, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 677, 343,
	0, 409, 344, 345, 346, 410, 718, 1552, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 630,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	0, 0, 626, 627, 1555, 0, 0, 0, 0, 0,
	0, 637, 1550, 0, 0, 0, 614, 640, 662, 651,
	652, 649, 650, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 679, 644, 0, 0, 0, 191, 192,
	193, 354, 694, 356, 695, 194, 696, 697, 0, 195,
	360, 361, 196, 197, 647, 678, 698, 699, 364, 0,
	198, 690, 0, 670, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 724,
	209, 210, 211, 0, 671, 672, 674, 0, 673, 675,
	212, 213, 419, 214, 700, 215, 701, 702, 632, 216,
	0, 217, 0, 218, 0, 0, 693, 220, 0, 221,
	0, 0, 0, 635, 222, 224, 223, 225, 680, 681,
	658, 725, 0, 0, 0, 0, 0, 226, 227, 703,
	704, 705, 0, 228, 0, 229, 0, 0, 726, 0,
	230, 691, 0, 376, 0, 0, 231, 232, 233, 234,
	687, 689, 728, 0, 379, 238, 0, 235, 0, 727,
	236, 706, 237, 707, 708, 709, 710, 711, 0, 669,
	0, 729, 239, 240, 241, 730, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 692, 731, 247, 248, 732,
	0, 249, 250, 0, 0, 251, 0, 252, 733, 253,
	254, 256, 390, 255, 734, 257, 258, 260, 259, 629,
	0, 659, 688, 261, 712, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 735, 267, 736, 682,
	268, 269, 270, 271, 272, 273, 0, 274, 683, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 713, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 737, 297, 298,
	636, 299, 0, 303, 304, 305, 306, 307, 146, 309,
	399, 308, 310, 311, 676, 312, 300, 301, 313, 738,
	314, 714, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 715, 319, 320, 684, 0, 323, 148, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 716,
	717, 332, 0, 0, 333, 334, 685, 686, 657, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 677,
	343, 0, 409, 344, 345, 346, 957, 718, 0, 0,
	347, 0, 0, 0, 140, 348, 349, 350, 351, 352,
	630, 141, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 626, 627, 662, 651, 652, 649, 650,
	641, 0, 1157, 0, 0, 0, 0, 0, 640, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	679, 644, 0, 0, 0, 191, 192, 193, 354, 694,
	356, 695, 194, 696, 697, 0, 195, 360, 361, 196,
	197, 647, 678, 698, 699, 364, 0, 198, 690, 0,
	670, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 724, 209, 210, 211,
	0, 671, 672, 674, 0, 673, 675, 212, 213, 419,
	214, 700, 215, 701, 702, 632, 216, 0, 217, 0,
	218, 0, 0, 693, 220, 0, 221, 0, 0, 0,
	635, 222, 224, 223, 225, 680, 681, 658, 725, 0,
	0, 0, 0, 0, 226, 227, 703, 704, 705, 0,
	228, 0, 229, 0, 0, 726, 0, 230, 691, 0,
	376, 0, 0, 231, 232, 233, 234, 687, 689, 728,
	0, 379, 238, 0, 235, 0, 727, 236, 706, 237,
	707, 708, 709, 710, 711, 0, 669, 0, 729, 239,
	240, 241, 730, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 692, 731, 247, 248, 732, 0, 249, 250,
	0, 0, 251, 0, 252, 733, 253, 254, 256, 390,
	255, 734, 257, 258, 260, 259, 629, 0, 659, 688,
	261, 712, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 735, 267, 736, 682, 268, 269, 270,
	271, 272, 273, 0, 274, 683, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 713, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 737, 297, 298, 636, 299, 0,
	303, 304, 305, 306, 307, 146, 309, 399, 308, 310,
	311, 676, 312, 300, 301, 313, 738, 314, 714, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 715,
	319, 320, 684, 0, 323, 148, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 716, 717, 332, 0,
	0, 333, 334, 685, 686, 657, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 677, 343, 0, 409,
	344, 345, 346, 957, 718, 0, 0, 347, 0, 0,
	0, 140, 348, 349, 350, 351, 352, 630, 141, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	626, 627, 662, 651, 652, 649, 650, 641, 0, 1157,
	0, 0, 0, 0, 0, 640, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 679, 644, 0,
	0, 0, 191, 192, 193, 354, 694, 356, 695, 194,
	696, 697, 1610, 195, 360, 361, 196, 197, 647, 678,
	698, 699, 364, 0, 198, 690, 0, 670, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 724, 209, 210, 211, 0, 671, 672,
	674, 0, 673, 675, 212, 213, 419, 214, 700, 215,
	701, 702, 632, 216, 0, 217, 0, 218, 0, 0,
	693, 220, 0, 221, 0, 0, 0, 635, 222, 224,
	223, 225, 680, 681, 658, 725, 0, 0, 0, 0,
	0, 226, 227, 703, 704, 705, 0, 228, 0, 229,
	0, 1615, 726, 0, 230, 691, 0, 376, 0, 0,
	231, 232, 233, 234, 687, 689, 728, 0, 379, 238,
	0, 235, 0, 727, 236, 706, 237, 707, 708, 709,
	710, 711, 0, 669, 0, 729, 239, 240, 241, 730,
	387, 388, 242, 243, 244, 0, 246, 245, 1611, 692,
	731, 247, 248, 732, 0, 249, 250, 0, 0, 251,
	0, 252, 733, 253, 254, 256, 390, 255, 734, 257,
	258, 260, 259, 629, 0, 659, 688, 261, 712, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	735, 267, 736, 682, 268, 269, 270, 271, 272, 273,
	0, 274, 683, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 713, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 737, 297, 298, 636, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 676, 312,
	300, 301, 313, 738, 314, 714, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 715, 319, 320, 684,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 716, 717, 332, 0, 1612, 333, 334,
	685, 686, 657, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 677, 343, 0, 409, 344, 345, 346,
	410, 718, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 630, 662, 651, 652, 649, 650,
	641, 0, 628, 0, 0, 0, 0, 626, 627, 0,
	0, 188, 189, 0, 0, 190, 637, 0, 0, 0,
	679, 644, 640, 0, 0, 191, 192, 193, 354, 694,
	356, 695, 194, 696, 697, 0, 195, 360, 361, 196,
	197, 647, 678, 698, 699, 364, 0, 198, 690, 0,
	670, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 724, 209, 210, 211,
	0, 671, 672, 674, 0, 673, 675, 212, 213, 419,
	214, 700, 215, 701, 702, 632, 216, 0, 217, 0,
	218, 0, 0, 693, 220, 0, 221, 0, 0, 0,
	635, 222, 224, 223, 225, 680, 681, 658, 725, 0,
	0, 0, 0, 0, 226, 227, 703, 704, 705, 0,
	228, 0, 229, 0, 0, 726, 0, 230, 691, 0,
	376, 0, 0, 231, 232, 233, 234, 687, 689, 728,
	0, 379, 238, 0, 235, 0, 727, 236, 706, 237,
	707, 708, 709, 710, 711, 0, 669, 0, 729, 239,
	240, 241, 730, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 692, 731, 247, 248, 732, 0, 249, 250,
	0, 0, 251, 0, 252, 733, 253, 254, 256, 390,
	255, 734, 257, 258, 260, 259, 629, 2249, 659, 688,
	261, 712, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 735, 267, 736, 682, 268, 269, 270,
	271, 272, 273, 0, 274, 683, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 713, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 737, 297, 298, 636, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 676, 312, 300, 301, 313, 738, 314, 714, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 715,
	319, 320, 684, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 716, 717, 332, 0,
	0, 333, 334, 685, 686, 657, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 677, 343, 0, 409,
	344, 345, 346, 410, 718, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 630, 662, 651,
	652, 649, 650, 641, 0, 628, 0, 0, 0, 0,
	626, 627, 1218, 0, 188, 189, 0, 0, 190, 637,
	0, 0, 0, 679, 644, 640, 0, 0, 191, 192,
	193, 354, 694, 356, 695, 194, 696, 697, 0, 195,
	360, 361, 196, 197, 647, 678, 698, 699, 364, 0,
	198, 690, 0, 670, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 724,
	209, 210, 211, 0, 671, 672, 674, 0, 673, 675,
	212, 213, 419, 214, 700, 215, 701, 702, 632, 216,
	0, 217, 0, 218, 0, 0, 693, 220, 0, 221,
	0, 0, 0, 635, 222, 224, 223, 225, 680, 681,
	658, 725, 0, 0, 0, 0, 0, 226, 227, 703,
	704, 705, 0, 228, 0, 229, 0, 0, 726, 0,
	230, 691, 0, 376, 0, 0, 231, 232, 233, 234,
	687, 689, 728, 0, 379, 238, 1460, 235, 0, 727,
	236, 706, 237, 707, 708, 709, 710, 711, 0, 669,
	0, 729, 239, 240, 241, 730, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 692, 731, 247, 248, 732,
	0, 249, 250, 0, 0, 251, 0, 252, 733, 253,
	254, 256, 390, 255, 734, 257, 258, 260, 259, 629,
	0, 659, 688, 261, 712, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 735, 267, 736, 682,
	268, 269, 270, 271, 272, 273, 0, 274, 683, 275,
	396, 276, 1459, 277, 278, 279, 280, 281, 713, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 737, 297, 298,
	636, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	399, 308, 310, 311, 676, 312, 300, 301, 313, 738,
	314, 714, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 715, 319, 320, 684, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 716,
	717, 332, 0, 0, 333, 334, 685, 686, 657, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 677,
	343, 0, 409, 344, 345, 346, 410, 718, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	630, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 626, 627, 0, 0, 0, 0, 0,
	0, 0, 637, 0, 0, 0, 0, 622, 640, 662,
	651, 652, 649, 650, 641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 679, 644, 0, 0, 0, 191,
	192, 193, 354, 694, 356, 695, 194, 696, 697, 0,
	195, 360, 361, 196, 197, 647, 678, 698, 699, 364,
	0, 198, 690, 0, 670, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	724, 209, 210, 211, 0, 671, 672, 674, 0, 673,
	675, 212, 213, 419, 214, 700, 215, 701, 702, 632,
	216, 0, 217, 0, 218, 0, 0, 693, 220, 0,
	221, 0, 0, 0, 635, 222, 224, 223, 225, 680,
	681, 658, 725, 0, 0, 0, 0, 0, 226, 227,
	703, 704, 705, 0, 228, 0, 229, 0, 0, 726,
	0, 230, 691, 0, 376, 0, 0, 231, 232, 233,
	234, 687, 689, 728, 0, 379, 238, 0, 235, 0,
	727, 236, 706, 237, 707, 708, 709, 710, 711, 0,
	669, 0, 729, 239, 240, 241, 730, 387, 388, 242,
	243, 244, 0, 246, 245, 0, 692, 731, 247, 248,
	732, 0, 249, 250, 0, 0, 251, 0, 252, 733,
	253, 254, 256, 390, 255, 734, 257, 258, 260, 259,
	629, 0, 659, 688, 261, 712, 262, 263, 0, 264,
	624, 0, 265, 0, 0, 266, 393, 735, 267, 736,
	682, 268, 269, 270, 271, 272, 273, 0, 274, 683,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 713,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 737, 297,
	298, 636, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 399, 308, 310, 311, 676, 312, 300, 301, 313,
	738, 314, 714, 401, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 715, 319, 320, 684, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 404,
	716, 717, 332, 0, 0, 333, 334, 685, 686, 657,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	677, 343, 0, 409, 344, 345, 346, 410, 718, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 630, 662, 651, 652, 649, 650, 641, 0, 628,
	0, 0, 0, 0, 626, 627, 0, 0, 188, 189,
	0, 0, 190, 637, 0, 0, 0, 679, 644, 640,
	0, 0, 191, 192, 193, 354, 694, 356, 695, 194,
	696, 697, 0, 195, 360, 361, 196, 197, 647, 678,
	698, 699, 364, 0, 198, 690, 0, 670, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 724, 209, 210, 211, 0, 671, 672,
	674, 0, 673, 675, 212, 213, 419, 214, 700, 215,
	701, 702, 632, 216, 0, 217, 0, 218, 0, 0,
	693, 220, 0, 221, 0, 0, 0, 635, 222, 224,
	223, 225, 680, 681, 658, 725, 0, 0, 0, 0,
	0, 226, 227, 703, 704, 705, 0, 228, 0, 229,
	0, 0, 726, 0, 230, 691, 0, 376, 0, 0,
	231, 232, 233, 234, 687, 689, 728, 0, 379, 238,
	0, 235, 0, 727, 236, 706, 237, 707, 708, 709,
	710, 711, 0, 669, 0, 729, 239, 240, 241, 730,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 692,
	731, 247, 248, 732, 0, 249, 250, 0, 0, 251,
	0, 252, 733, 253, 254, 256, 390, 255, 734, 257,
	258, 260, 259, 629, 0, 659, 688, 261, 712, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	735, 267, 736, 682, 268, 269, 270, 271, 272, 273,
	0, 274, 683, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 713, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 737, 297, 298, 636, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 676, 312,
	300, 301, 313, 738, 314, 714, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 715, 319, 320, 684,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 716, 717, 332, 0, 0, 333, 334,
	685, 686, 657, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 677, 343, 0, 409, 344, 345, 346,
	410, 718, 2099, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 630, 662, 651, 652, 649, 650,
	641, 0, 628, 0, 0, 0, 0, 626, 627, 0,
	0, 188, 189, 0, 0, 190, 637, 0, 0, 0,
	679, 644, 640, 0, 0, 191, 192, 193, 354, 694,
	356, 695, 194, 696, 697, 0, 195, 360, 361, 196,
	197, 647, 678, 698, 699, 364, 0, 198, 690, 0,
	670, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 724, 209, 210, 211,
	0, 671, 672, 674, 0, 673, 675, 212, 213, 419,
	214, 700, 215, 701, 702, 632, 216, 0, 217, 0,
	218, 0, 0, 693, 220, 0, 221, 0, 0, 0,
	635, 222, 224, 223, 225, 680, 681, 658, 725, 0,
	0, 0, 0, 0, 226, 227, 703, 704, 705, 0,
	228, 0, 229, 0, 0, 726, 0, 230, 691, 0,
	376, 0, 0, 231, 232, 233, 234, 687, 689, 728,
	0, 379, 238, 0, 235, 0, 727, 236, 706, 237,
	707, 708, 709, 710, 711, 0, 669, 0, 729, 239,
	240, 241, 730, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 692, 731, 247, 248, 732, 0, 249, 250,
	0, 0, 251, 0, 252, 733, 253, 254, 256, 390,
	255, 734, 257, 258, 260, 259, 629, 0, 659, 688,
	261, 712, 262, 263, 0, 264, 624, 0, 265, 0,
	0, 266, 393, 735, 267, 736, 682, 268, 269, 270,
	271, 272, 273, 0, 274, 683, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 713, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 737, 297, 298, 636, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 676, 312, 300, 301, 313, 738, 314, 714, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 715,
	319, 320, 684, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 716, 717, 332, 0,
	0, 333, 334, 685, 686, 657, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 677, 343, 0, 409,
	344, 345, 346, 410, 718, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 630, 662, 651,
	652, 649, 650, 641, 0, 628, 0, 0, 0, 0,
	626, 627, 0, 0, 188, 189, 0, 0, 190, 637,
	0, 0, 0, 679, 644, 640, 0, 0, 191, 192,
	193, 354, 694, 356, 695, 194, 696, 697, 0, 195,
	360, 361, 196, 197, 647, 678, 698, 699, 364, 0,
	198, 690, 0, 670, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 724,
	209, 210, 211, 0, 671, 672, 674, 0, 673, 675,
	212, 213, 419, 214, 700, 215, 701, 702, 632, 216,
	0, 217, 0, 218, 0, 0, 693, 220, 0, 221,
	0, 0, 0, 635, 222, 224, 223, 225, 680, 681,
	658, 725, 0, 0, 0, 0, 0, 226, 227, 703,
	704, 705, 0, 228, 0, 229, 0, 0, 726, 0,
	230, 691, 0, 376, 0, 0, 231, 232, 233, 234,
	687, 689, 728, 0, 379, 238, 0, 235, 0, 727,
	236, 706, 237, 707, 708, 709, 710, 711, 0, 669,
	0, 729, 239, 240, 241, 730, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 692, 731, 247, 248, 732,
	0, 249, 250, 0, 0, 251, 0, 252, 733, 253,
	254, 256, 390, 255, 734, 257, 258, 260, 259, 629,
	0, 659, 688, 261, 712, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 735, 267, 736, 682,
	268, 269, 270, 271, 272, 273, 0, 274, 683, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 713, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 737, 297, 298,
	636, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	399, 308, 310, 311, 676, 312, 300, 301, 313, 738,
	314, 714, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 715, 319, 320, 684, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 716,
	717, 332, 0, 0, 333, 334, 685, 686, 657, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 677,
	343, 0, 409, 344, 345, 346, 410, 718, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	630, 662, 651, 652, 649, 650, 641, 0, 628, 0,
	0, 0, 0, 626, 627, 1218, 0, 188, 189, 0,
	0, 190, 637, 0, 0, 0, 679, 644, 640, 0,
	0, 191, 192, 193, 354, 694, 356, 695, 194, 696,
	697, 0, 195, 360, 361, 196, 197, 647, 678, 698,
	699, 364, 0, 198, 690, 0, 670, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 724, 209, 210, 211, 0, 671, 672, 674,
	0, 673, 675, 212, 213, 419, 214, 700, 215, 701,
	702, 632, 216, 0, 217, 0, 218, 0, 0, 693,
	220, 0, 221, 0, 0, 0, 635, 222, 224, 223,
	225, 680, 681, 658, 725, 0, 0, 0, 0, 0,
	226, 227, 703, 704, 705, 0, 228, 0, 229, 0,
	1615, 726, 0, 230, 691, 0, 376, 0, 0, 231,
	232, 233, 234, 687, 689, 728, 0, 379, 238, 0,
	235, 0, 727, 236, 706, 237, 707, 708, 709, 710,
	711, 0, 669, 0, 729, 239, 240, 241, 730, 387,
	388, 242, 243, 244, 0, 246, 245, 0, 692, 731,
	247, 248, 732, 0, 249, 250, 0, 0, 251, 0,
	252, 733, 253, 254, 256, 390, 255, 734, 257, 258,
	260, 259, 629, 0, 659, 688, 261, 712, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 735,
	267, 736, 682, 268, 269, 270, 271, 272, 273, 0,
	274, 683, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 713, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	737, 297, 298, 636, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 399, 308, 310, 311, 676, 312, 300,
	301, 313, 738, 314, 714, 401, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 715, 319, 320, 684, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 404, 716, 717, 332, 0, 0, 333, 334, 685,
	686, 657, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 677, 343, 0, 409, 344, 345, 346, 410,
	718, 0, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 630, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 626, 627, 0, 0,
	0, 0, 0, 0, 0, 637, 0, 0, 0, 0,
	1661, 640, 662, 651, 652, 649, 650, 641, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 679, 644, 0,
	0, 0, 191, 192, 193, 354, 694, 356, 695, 194,
	696, 697, 0, 195, 360, 361, 196, 197, 647, 678,
	698, 699, 364, 0, 198, 690, 0, 670, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 724, 209, 210, 211, 0, 671, 672,
	674, 0, 673, 675, 212, 213, 419, 214, 700, 215,
	701, 702, 632, 216, 0, 217, 0, 218, 0, 0,
	693, 220, 0, 221, 0, 0, 0, 635, 222, 224,
	223, 225, 680, 681, 658, 725, 0, 0, 0, 0,
	0, 226, 227, 703, 704, 705, 0, 228, 0, 229,
	0, 0, 726, 0, 230, 691, 0, 376, 0, 0,
	231, 232, 233, 234, 687, 689, 728, 0, 379, 238,
	0, 235, 0, 727, 236, 706, 237, 707, 708, 709,
	710, 711, 0, 669, 0, 729, 239, 240, 241, 730,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 692,
	731, 247, 248, 732, 0, 249, 250, 0, 0, 251,
	0, 252, 733, 253, 254, 256, 390, 255, 734, 257,
	258, 260, 259, 629, 0, 659, 688, 261, 712, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	735, 267, 736, 682, 268, 269, 270, 271, 272, 273,
	0, 274, 683, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 713, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 737, 297, 298, 636, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 676, 312,
	300, 301, 313, 738, 314, 714, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 715, 319, 320, 684,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 716, 717, 332, 0, 0, 333, 334,
	685, 686, 657, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 677, 343, 0, 409, 344, 345, 346,
	410, 718, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 630, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 0, 0, 626, 627, 0,
	0, 0, 0, 0, 0, 0, 637, 0, 0, 0,
	0, 1624, 640, 662, 651, 652, 649, 650, 641, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 679, 644,
	0, 0, 0, 191, 192, 193, 354, 694, 356, 695,
	194, 696, 697, 0, 195, 360, 361, 196, 197, 647,
	678, 698, 699, 364, 0, 198, 690, 0, 670, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 724, 209, 210, 211, 0, 671,
	672, 674, 0, 673, 675, 212, 213, 419, 214, 700,
	215, 701, 702, 632, 216, 0, 217, 0, 218, 0,
	0, 693, 220, 0, 221, 0, 0, 0, 635, 222,
	224, 223, 225, 680, 681, 658, 725, 0, 0, 0,
	0, 0, 226, 227, 703, 704, 705, 0, 228, 0,
	229, 0, 0, 726, 0, 230, 691, 0, 376, 0,
	0, 231, 232, 233, 234, 687, 689, 728, 0, 379,
	238, 0, 235, 0, 727, 236, 706, 237, 707, 708,
	709, 710, 711, 0, 669, 0, 729, 239, 240, 241,
	730, 387, 388, 242, 243, 244, 0, 246, 245, 0,
	692, 731, 247, 248, 732, 0, 249, 250, 0, 0,
	251, 0, 252, 733, 253, 254, 256, 390, 255, 734,
	257, 258, 260, 259, 629, 0, 659, 688, 261, 712,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 735, 267, 736, 682, 268, 269, 270, 271, 272,
	273, 0, 274, 683, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 713, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 737, 297, 298, 636, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 399, 308, 310, 311, 676,
	312, 300, 301, 313, 738, 314, 714, 401, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 715, 319, 320,
	684, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 404, 716, 717, 332, 0, 0, 333,
	334, 685, 686, 657, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 677, 343, 0, 409, 344, 345,
	346, 410, 718, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 630, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 0, 0, 626, 627,
	0, 0, 0, 0, 0, 0, 0, 637, 0, 0,
	0, 0, 1622, 640, 662, 651, 652, 649, 650, 641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 679,
	644, 0, 0, 0, 191, 192, 193, 354, 694, 356,
	695, 194, 696, 697, 0, 195, 360, 361, 196, 197,
	647, 678, 698, 699, 364, 0, 198, 690, 0, 670,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 724, 209, 210, 211, 0,
	671, 672, 674, 0, 673, 675, 212, 213, 419, 214,
	700, 215, 701, 702, 632, 216, 0, 217, 0, 218,
	0, 0, 693, 220, 0, 221, 0, 0, 0, 635,
	222, 224, 223, 225, 680, 681, 658, 725, 0, 0,
	0, 0, 0, 226, 227, 703, 704, 705, 0, 228,
	0, 229, 0, 0, 726, 0, 230, 691, 0, 376,
	0, 0, 231, 232, 233, 234, 687, 689, 728, 0,
	379, 238, 0, 235, 0, 727, 236, 706, 237, 707,
	708, 709, 710, 711, 0, 669, 0, 729, 239, 240,
	241, 730, 387, 388, 242, 243, 244, 0, 246, 245,
	0, 692, 731, 247, 248, 732, 0, 249, 250, 0,
	0, 251, 0, 252, 733, 253, 254, 256, 390, 255,
	734, 257, 258, 260, 259, 629, 0, 659, 688, 261,
	712, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 735, 267, 736, 682, 268, 269, 270, 271,
	272, 273, 0, 274, 683, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 713, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 737, 297, 298, 636, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 399, 308, 310, 311,
	676, 312, 300, 301, 313, 738, 314, 714, 401, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 715, 319,
	320, 684, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 404, 716, 717, 332, 0, 0,
	333, 334, 685, 686, 657, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 677, 343, 0, 409, 344,
	345, 346, 410, 718, 0, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 630, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 0, 0, 626,
	627, 0, 0, 0, 0, 0, 0, 0, 637, 0,
	0, 0, 0, 1606, 640, 662, 651, 652, 649, 650,
	641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	679, 644, 0, 0, 0, 191, 192, 193, 354, 694,
	356, 695, 194, 696, 697, 0, 195, 360, 361, 196,
	197, 647, 678, 698, 699, 364, 0, 198, 690, 0,
	670, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 724, 209, 210, 211,
	0, 671, 672, 674, 0, 673, 675, 212, 213, 419,
	214, 700, 215, 701, 702, 632, 216, 0, 217, 0,
	218, 0, 0, 693, 220, 0, 221, 0, 0, 0,
	635, 222, 224, 223, 225, 680, 681, 658, 725, 0,
	0, 0, 0, 0, 226, 227, 703, 704, 705, 0,
	228, 0, 229, 0, 0, 726, 0, 230, 691, 0,
	376, 0, 0, 231, 232, 233, 234, 687, 689, 728,
	0, 379, 238, 0, 235, 0, 727, 236, 706, 237,
	707, 708, 709, 710, 711, 0, 669, 0, 729, 239,
	240, 241, 730, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 692, 731, 247, 248, 732, 0, 249, 250,
	0, 0, 251, 0, 252, 733, 253, 254, 256, 390,
	255, 734, 257, 258, 260, 259, 629, 0, 659, 688,
	261, 712, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 735, 267, 736, 682, 268, 269, 270,
	271, 272, 273, 0, 274, 683, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 713, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 737, 297, 298, 636, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 676, 312, 300, 301, 313, 738, 314, 714, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 715,
	319, 320, 684, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 716, 717, 332, 0,
	0, 333, 334, 685, 686, 657, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 677, 343, 0, 409,
	344, 345, 346, 410, 718, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 630, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	626, 627, 0, 0, 0, 0, 0, 0, 0, 637,
	0, 0, 0, 0, 1594, 640, 662, 651, 652, 649,
	650, 641, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 679, 644, 0, 0, 0, 191, 192, 193, 354,
	694, 356, 695, 194, 696, 697, 0, 195, 360, 361,
	196, 197, 647, 678, 698, 699, 364, 0, 198, 690,
	0, 670, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 724, 209, 210,
	211, 0, 671, 672, 674, 0, 673, 675, 212, 213,
	419, 214, 700, 215, 701, 702, 632, 216, 0, 217,
	0, 218, 0, 0, 693, 220, 0, 221, 0, 0,
	0, 635, 222, 224, 223, 225, 680, 681, 658, 725,
	0, 0, 0, 0, 0, 226, 227, 703, 704, 705,
	0, 228, 0, 229, 0, 0, 726, 0, 230, 691,
	0, 376, 0, 0, 231, 232, 233, 234, 687, 689,
	728, 0, 379, 238, 0, 235, 0, 727, 236, 706,
	237, 707, 708, 709, 710, 711, 0, 669, 0, 729,
	239, 240, 241, 730, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 692, 731, 247, 248, 732, 0, 249,
	250, 0, 0, 251, 0, 252, 733, 253, 254, 256,
	390, 255, 734, 257, 258, 260, 259, 629, 0, 659,
	688, 261, 712, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 735, 267, 736, 682, 268, 269,
	270, 271, 272, 273, 0, 274, 683, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 713, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 737, 297, 298, 636, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 399, 308,
	310, 311, 676, 312, 300, 301, 313, 738, 314, 714,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	715, 319, 320, 684, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 716, 717, 332,
	0, 0, 333, 334, 685, 686, 657, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 677, 343, 0,
	409, 344, 345, 346, 410, 718, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 630, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 626, 627, 0, 0, 0, 0, 0, 0, 0,
	637, 0, 0, 0, 0, 1592, 640, 1584, 651, 652,
	649, 650, 641, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 679, 644, 0, 0, 0, 191, 192, 193,
	354, 694, 356, 695, 194, 696, 697, 0, 195, 360,
	361, 196, 197, 647, 678, 698, 699, 364, 0, 198,
	690, 0, 670, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 724, 209,
	210, 211, 0, 671, 672, 674, 0, 673, 675, 212,
	213, 419, 214, 700, 1587, 701, 702, 632, 216, 0,
	217, 0, 218, 0, 0, 693, 220, 0, 221, 0,
	0, 0, 635, 222, 224, 223, 225, 680, 681, 658,
	725, 0, 0, 0, 0, 0, 226, 227, 703, 704,
	705, 0, 228, 0, 229, 0, 0, 726, 0, 230,
	691, 0, 376, 0, 0, 231, 1588, 233, 234, 687,
	689, 728, 0, 379, 238, 0, 235, 0, 727, 236,
	706, 237, 707, 708, 709, 710, 711, 0, 669, 0,
	729, 239, 240, 241, 730, 387, 388, 242, 243, 244,
	0, 246, 245, 0, 692, 731, 247, 248, 732, 0,
	249, 250, 0, 0, 251, 0, 252, 733, 1589, 1586,
	256, 390, 255, 734, 257, 258, 260, 259, 629, 0,
	659, 688, 261, 712, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 735, 267, 736, 682, 268,
	269, 270, 271, 272, 273, 0, 274, 683, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 713, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 737, 297, 298, 636,
	299, 0, 303, 304, 305, 306, 1590, 0, 309, 399,
	308, 310, 311, 676, 312, 300, 301, 313, 738, 314,
	714, 401, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 715, 319, 320, 684, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 404, 716, 717,
	332, 0, 0, 333, 334, 685, 686, 657, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 677, 343,
	0, 409, 344, 345, 346, 410, 718, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 1585, 352, 630,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	0, 0, 626, 627, 0, 0, 0, 0, 0, 0,
	0, 637, 0, 0, 0, 0, 1581, 640, 1584, 651,
	652, 649, 650, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 679, 644, 0, 0, 0, 191, 192,
	193, 354, 694, 356, 695, 194, 696, 697, 0, 195,
	360, 361, 196, 197, 647, 678, 698, 699, 364, 0,
	198, 690, 0, 670, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 724,
	209, 210, 211, 0, 671, 672, 674, 0, 673, 675,
	212, 213, 419, 214, 700, 1587, 701, 702, 632, 216,
	0, 217, 0, 218, 0, 0, 693, 220, 0, 221,
	0, 0, 0, 635, 222, 224, 223, 225, 680, 681,
	658, 725, 0, 0, 0, 0, 0, 226, 227, 703,
	704, 705, 0, 228, 0, 229, 0, 0, 726, 0,
	230, 691, 0, 376, 0, 0, 231, 1588, 233, 234,
	687, 689, 728, 0, 379, 238, 0, 235, 0, 727,
	236, 706, 237, 707, 708, 709, 710, 711, 0, 669,
	0, 729, 239, 240, 241, 730, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 692, 731, 247, 248, 732,
	0, 249, 250, 0, 0, 251, 0, 252, 733, 1589,
	1586, 256, 390, 255, 734, 257, 258, 260, 259, 629,
	0, 659, 688, 261, 712, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 735, 267, 736, 682,
	268, 269, 270, 271, 272, 273, 0, 274, 683, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 713, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 737, 297, 298,
	636, 299, 0, 303, 304, 305, 306, 1590, 0, 309,
	399, 308, 310, 311, 676, 312, 300, 301, 313, 738,
	314, 714, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 715, 319, 320, 684, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 716,
	717, 332, 0, 0, 333, 334, 685, 686, 657, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 677,
	343, 0, 409, 344, 345, 346, 410, 718, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 1585, 352,
	630, 662, 651, 652, 649, 650, 641, 0, 628, 0,
	0, 0, 0, 626, 627, 0, 0, 188, 189, 0,
	0, 190, 637, 0, 0, 0, 679, 644, 640, 0,
	0, 191, 192, 193, 354, 694, 356, 695, 194, 696,
	697, 0, 195, 360, 361, 196, 197, 647, 678, 698,
	699, 364, 0, 198, 690, 0, 670, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 724, 209, 210, 211, 0, 671, 672, 674,
	0, 673, 675, 212, 213, 419, 214, 700, 215, 701,
	702, 632, 216, 0, 217, 0, 218, 0, 0, 693,
	220, 0, 221, 0, 0, 0, 635, 222, 224, 223,
	225, 680, 681, 658, 725, 0, 0, 0, 0, 0,
	226, 227, 703, 704, 705, 0, 228, 0, 229, 0,
	0, 726, 0, 230, 691, 0, 376, 0, 0, 231,
	232, 233, 234, 687, 689, 728, 0, 379, 238, 0,
	235, 0, 727, 236, 706, 237, 707, 708, 709, 710,
	711, 0, 669, 0, 729, 239, 240, 241, 730, 387,
	388, 242, 243, 244, 0, 246, 245, 0, 692, 731,
	247, 248, 732, 0, 249, 250, 0, 0, 251, 0,
	252, 733, 253, 254, 256, 390, 255, 734, 257, 258,
	260, 259, 629, 0, 659, 688, 261, 712, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 735,
	267, 736, 682, 268, 269, 270, 271, 272, 273, 0,
	274, 683, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 713, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	737, 297, 298, 636, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 399, 308, 310, 311, 676, 312, 300,
	301, 313, 738, 314, 714, 401, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 715, 319, 320, 684, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 404, 716, 717, 332, 0, 0, 333, 334, 685,
	686, 657, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 677, 343, 0, 409, 344, 345, 346, 410,
	718, 0, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 630, 662, 651, 652, 649, 650, 641,
	0, 628, 0, 0, 0, 0, 626, 627, 0, 0,
	188, 189, 1447, 1161, 190, 637, 0, 0, 0, 679,
	644, 640, 0, 0, 191, 192, 193, 354, 694, 356,
	695, 194, 696, 697, 0, 195, 360, 361, 196, 197,
	647, 678, 698, 699, 364, 0, 198, 690, 0, 670,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 724, 209, 210, 211, 0,
	671, 672, 674, 0, 673, 675, 212, 213, 419, 214,
	700, 215, 701, 702, 632, 216, 0, 217, 0, 218,
	0, 0, 693, 220, 0, 221, 0, 0, 0, 635,
	222, 224, 223, 225, 680, 681, 658, 725, 0, 0,
	0, 0, 0, 226, 227, 703, 704, 705, 0, 228,
	0, 229, 0, 0, 726, 0, 230, 691, 0, 376,
	0, 0, 231, 232, 233, 234, 687, 689, 728, 0,
	379, 238, 0, 235, 0, 727, 236, 706, 237, 707,
	708, 709, 710, 711, 0, 669, 0, 729, 239, 240,
	241, 730, 387, 388, 242, 243, 244, 0, 246, 245,
	0, 692, 731, 247, 248, 732, 0, 249, 250, 0,
	0, 251, 0, 252, 733, 253, 254, 256, 390, 255,
	734, 257, 258, 260, 259, 629, 0, 659, 688, 261,
	712, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 735, 267, 736, 682, 268, 269, 270, 271,
	272, 273, 0, 274, 683, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 713, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 737, 297, 298, 636, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 399, 308, 310, 311,
	676, 312, 300, 301, 313, 738, 314, 714, 401, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 715, 319,
	320, 684, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 404, 716, 717, 332, 0, 0,
	333, 334, 685, 686, 657, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 677, 343, 0, 409, 344,
	345, 346, 410, 718, 0, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 630, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 0, 0, 626,
	627, 0, 0, 0, 0, 0, 0, 0, 637, 0,
	0, 0, 0, 903, 640, 662, 651, 652, 649, 650,
	641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	679, 644, 0, 0, 0, 191, 192, 193, 354, 694,
	356, 695, 194, 696, 697, 0, 195, 360, 361, 196,
	197, 647, 678, 698, 699, 364, 0, 198, 690, 0,
	670, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 724, 209, 210, 211,
	0, 671, 672, 674, 0, 673, 675, 212, 213, 419,
	214, 700, 215, 701, 702, 632, 216, 0, 217, 0,
	218, 0, 0, 693, 220, 0, 221, 0, 0, 0,
	635, 222, 224, 223, 225, 680, 681, 658, 725, 0,
	0, 0, 0, 0, 226, 227, 703, 704, 705, 0,
	228, 0, 229, 0, 0, 726, 0, 230, 691, 0,
	376, 0, 0, 231, 232, 233, 234, 687, 689, 728,
	0, 379, 238, 0, 235, 0, 727, 236, 706, 237,
	707, 708, 709, 710, 711, 0, 669, 0, 729, 239,
	240, 241, 730, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 692, 731, 247, 248, 732, 0, 249, 250,
	0, 0, 251, 0, 252, 733, 253, 254, 256, 390,
	255, 734, 257, 258, 260, 259, 629, 0, 659, 688,
	261, 712, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 735, 267, 736, 682, 268, 269, 270,
	271, 272, 273, 0, 274, 683, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 713, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 737, 297, 298, 636, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 676, 312, 300, 301, 313, 738, 314, 714, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 715,
	319, 320, 684, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 716, 717, 332, 0,
	0, 333, 334, 685, 686, 657, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 677, 343, 0, 409,
	344, 345, 346, 410, 718, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 630, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	626, 627, 0, 0, 0, 0, 0, 0, 0, 637,
	0, 0, 0, 0, 901, 640, 662, 651, 652, 649,
	650, 641, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 679, 644, 0, 0, 0, 191, 192, 193, 354,
	694, 356, 695, 194, 696, 697, 0, 195, 360, 361,
	196, 197, 647, 678, 698, 699, 364, 0, 198, 690,
	0, 670, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 724, 209, 210,
	211, 0, 671, 672, 674, 0, 673, 675, 212, 213,
	419, 214, 700, 215, 701, 702, 632, 216, 0, 217,
	0, 218, 0, 0, 693, 220, 0, 221, 0, 0,
	0, 635, 222, 224, 223, 225, 680, 681, 658, 725,
	0, 0, 0, 0, 0, 226, 227, 703, 704, 705,
	0, 228, 0, 229, 0, 0, 726, 0, 230, 691,
	0, 376, 0, 0, 231, 232, 233, 234, 687, 689,
	728, 0, 379, 238, 0, 235, 0, 727, 236, 706,
	237, 707, 708, 709, 710, 711, 0, 669, 0, 729,
	239, 240, 241, 730, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 692, 731, 247, 248, 732, 0, 249,
	250, 0, 0, 251, 0, 252, 733, 253, 254, 256,
	390, 255, 734, 257, 258, 260, 259, 629, 0, 659,
	688, 261, 712, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 735, 267, 736, 682, 268, 269,
	270, 271, 272, 273, 0, 274, 683, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 713, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 737, 297, 298, 636, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 399, 308,
	310, 311, 676, 312, 300, 301, 313, 738, 314, 714,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	715, 319, 320, 684, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 716, 717, 332,
	0, 0, 333, 334, 685, 686, 657, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 677, 343, 0,
	409, 344, 345, 346, 410, 718, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 630, 662,
	651, 652, 649, 650, 641, 0, 628, 0, 0, 0,
	0, 626, 627, 0, 0, 188, 189, 0, 0, 190,
	637, 0, 0, 0, 679, 644, 640, 0, 0, 191,
	192, 193, 354, 694, 356, 695, 194, 696, 697, 0,
	195, 360, 361, 196, 197, 647, 678, 698, 699, 364,
	0, 198, 690, 0, 670, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	724, 209, 210, 211, 0, 671, 672, 674, 0, 673,
	675, 212, 213, 419, 214, 700, 215, 701, 702, 632,
	216, 0, 217, 0, 218, 0, 0, 693, 220, 0,
	221, 0, 0, 0, 635, 222, 224, 223, 225, 680,
	681, 658, 725, 0, 0, 0, 0, 0, 226, 227,
	703, 704, 705, 0, 228, 0, 229, 0, 0, 726,
	0, 230, 691, 0, 376, 0, 0, 231, 232, 233,
	234, 687, 689, 728, 0, 379, 238, 0, 235, 0,
	727, 236, 706, 237, 707, 708, 709, 710, 711, 0,
	669, 0, 729, 239, 240, 241, 730, 387, 388, 242,
	243, 244, 0, 246, 245, 0, 692, 731, 247, 248,
	732, 0, 249, 250, 0, 0, 251, 0, 252, 2665,
	253, 254, 256, 390, 255, 734, 257, 258, 260, 259,
	629, 0, 659, 688, 261, 712, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 735, 267, 736,
	682, 268, 269, 270, 271, 272, 273, 0, 274, 683,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 713,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 737, 297,
	298, 636, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 399, 308, 310, 311, 676, 312, 300, 301, 313,
	738, 314, 714, 401, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 715, 319, 320, 684, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 404,
	716, 717, 332, 0, 0, 333, 334, 685, 686, 657,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	677, 343, 0, 409, 344, 345, 346, 410, 718, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 630, 662, 651, 652, 649, 650, 641, 0, 628,
	0, 0, 0, 0, 626, 627, 0, 0, 188, 189,
	0, 0, 190, 637, 0, 0, 0, 679, 644, 640,
	0, 0, 191, 192, 193, 354, 694, 356, 695, 194,
	696, 697, 0, 195, 360, 361, 196, 197, 647, 678,
	698, 699, 364, 0, 198, 690, 0, 670, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 724, 209, 210, 2584, 0, 671, 672,
	674, 0, 673, 675, 212, 213, 419, 214, 700, 215,
	701, 702, 632, 216, 0, 217, 0, 218, 0, 0,
	693, 220, 0, 221, 0, 0, 0, 635, 222, 224,
	223, 225, 680, 681, 658, 725, 0, 0, 0, 0,
	0, 226, 227, 703, 704, 705, 0, 228, 0, 229,
	0, 0, 726, 0, 230, 691, 0, 376, 0, 0,
	231, 232, 233, 234, 687, 689, 728, 0, 379, 238,
	0, 235, 0, 727, 236, 706, 237, 707, 708, 709,
	710, 711, 0, 669, 0, 729, 239, 240, 241, 730,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 692,
	731, 247, 248, 732, 0, 249, 250, 0, 0, 251,
	0, 252, 733, 253, 254, 256, 390, 255, 734, 257,
	258, 260, 259, 629, 0, 659, 688, 261, 712, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	735, 267, 736, 682, 268, 269, 270, 271, 272, 273,
	0, 274, 683, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 713, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 737, 297, 298, 636, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 676, 312,
	300, 301, 313, 738, 314, 714, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 715, 319, 320, 684,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 716, 717, 332, 0, 0, 333, 334,
	685, 686, 657, 335, 336, 2583, 338, 0, 0, 339,
	340, 341, 342, 677, 343, 0, 409, 344, 345, 346,
	410, 718, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 630, 662, 651, 652, 649, 650,
	641, 0, 628, 0, 0, 0, 0, 626, 627, 0,
	0, 188, 189, 0, 0, 190, 637, 0, 0, 0,
	679, 644, 640, 0, 0, 191, 192, 193, 354, 694,
	356, 695, 194, 696, 697, 0, 195, 360, 361, 196,
	197, 647, 678, 698, 699, 364, 0, 198, 690, 0,
	670, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 724, 209, 210, 211,
	0, 671, 672, 674, 0, 673, 675, 212, 213, 419,
	214, 700, 215, 701, 702, 632, 216, 0, 217, 0,
	218, 0, 0, 693, 220, 0, 221, 0, 0, 0,
	635, 222, 224, 223, 225, 680, 681, 658, 725, 0,
	0, 0, 0, 0, 226, 227, 703, 704, 705, 0,
	228, 0, 229, 0, 0, 726, 0, 230, 691, 0,
	376, 0, 0, 231, 232, 233, 234, 687, 689, 728,
	0, 379, 238, 0, 235, 0, 727, 236, 706, 237,
	707, 708, 709, 710, 711, 0, 669, 0, 729, 239,
	240, 241, 730, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 692, 731, 247, 248, 732, 0, 249, 250,
	0, 0, 251, 0, 252, 733, 253, 254, 256, 390,
	255, 734, 257, 258, 260, 259, 629, 0, 659, 688,
	261, 712, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 735, 267, 736, 682, 268, 269, 270,
	271, 272, 273, 0, 274, 683, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 713, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 737, 297, 298, 636, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 676, 312, 300, 301, 313, 738, 314, 714, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 715,
	319, 320, 684, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 716, 717, 332, 0,
	0, 333, 334, 685, 686, 657, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 677, 343, 0, 409,
	344, 345, 346, 410, 718, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 630, 662, 651,
	652, 649, 650, 641, 0, 628, 0, 0, 0, 0,
	626, 627, 0, 0, 188, 189, 0, 0, 190, 637,
	0, 0, 0, 679, 644, 640, 0, 0, 191, 192,
	193, 2582, 694, 356, 695, 194, 696, 697, 0, 195,
	360, 361, 196, 197, 647, 678, 698, 699, 364, 0,
	198, 690, 0, 670, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 724,
	209, 210, 2584, 0, 671, 672, 674, 0, 673, 675,
	212, 213, 419, 214, 700, 215, 701, 702, 632, 216,
	0, 217, 0, 218, 0, 0, 693, 220, 0, 221,
	0, 0, 0, 635, 222, 224, 223, 225, 680, 681,
	658, 725, 0, 0, 0, 0, 0, 226, 227, 703,
	704, 705, 0, 228, 0, 229, 0, 0, 726, 0,
	230, 691, 0, 376, 0, 0, 231, 232, 233, 234,
	687, 689, 728, 0, 379, 238, 0, 235, 0, 727,
	236, 706, 237, 707, 708, 709, 710, 711, 0, 669,
	0, 729, 239, 240, 241, 730, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 692, 731, 247, 248, 732,
	0, 249, 250, 0, 0, 251, 0, 252, 733, 253,
	254, 256, 390, 255, 734, 257, 258, 260, 259, 629,
	0, 659, 688, 261, 712, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 735, 267, 736, 682,
	268, 269, 270, 271, 272, 273, 0, 274, 683, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 713, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 737, 297, 298,
	636, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	399, 308, 310, 311, 676, 312, 300, 301, 313, 738,
	314, 714, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 715, 319, 320, 684, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 716,
	717, 332, 0, 0, 333, 334, 685, 686, 657, 335,
	336, 2583, 338, 0, 0, 339, 340, 341, 342, 677,
	343, 0, 409, 344, 345, 346, 410, 718, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	630, 662, 651, 652, 649, 650, 641, 0, 628, 0,
	0, 0, 0, 626, 627, 0, 0, 188, 189, 0,
	0, 190, 637, 0, 0, 0, 679, 644, 640, 0,
	0, 191, 192, 193, 354, 694, 356, 695, 194, 696,
	697, 0, 195, 360, 361, 196, 197, 647, 678, 698,
	699, 364, 0, 198, 690, 0, 670, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 724, 209, 210, 211, 0, 671, 672, 674,
	0, 673, 675, 212, 213, 419, 214, 700, 215, 701,
	702, 0, 216, 0, 217, 0, 218, 0, 0, 693,
	220, 0, 221, 0, 0, 0, 635, 222, 224, 223,
	225, 680, 681, 658, 725, 0, 0, 0, 0, 0,
	226, 227, 703, 704, 705, 0, 228, 0, 229, 0,
	0, 726, 0, 230, 691, 0, 376, 0, 0, 231,
	232, 233, 234, 687, 689, 728, 0, 379, 238, 0,
	235, 0, 727, 236, 706, 237, 707, 708, 709, 710,
	711, 0, 669, 0, 729, 239, 240, 241, 730, 387,
	388, 242, 243, 244, 0, 246, 245, 0, 692, 731,
	247, 248, 732, 0, 249, 250, 0, 0, 251, 0,
	252, 733, 253, 254, 256, 390, 255, 734, 257, 258,
	260, 259, 0, 0, 659, 688, 261, 712, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 735,
	267, 736, 682, 268, 269, 270, 271, 272, 273, 0,
	274, 683, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 713, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	737, 297, 298, 1604, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 399, 308, 310, 311, 676, 312, 300,
	301, 313, 738, 314, 714, 401, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 715, 319, 320, 684, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 404, 716, 717, 332, 0, 0, 333, 334, 685,
	686, 657, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 677, 343, 0, 409, 344, 345, 346, 410,
	718, 0, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 662, 651, 652, 649, 650, 641, 0,
	0, 1602, 0, 0, 0, 0, 1600, 1601, 0, 188,
	189, 0, 0, 190, 0, 1603, 0, 0, 679, 644,
	0, 640, 0, 191, 192, 193, 0, 694, 356, 695,
	194, 696, 697, 0, 195, 360, 361, 196, 197, 647,
	678, 698, 699, 364, 0, 198, 690, 0, 670, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 724, 209, 210, 2584, 0, 671,
	672, 674, 0, 673, 675, 212, 213, 419, 214, 700,
	215, 701, 702, 632, 216, 0, 217, 0, 218, 0,
	0, 693, 220, 0, 221, 0, 0, 0, 635, 222,
	224, 223, 225, 680, 681, 658, 725, 0, 0, 0,
	0, 0, 226, 227, 703, 704, 705, 0, 228, 0,
	229, 0, 0, 726, 0, 230, 691, 0, 376, 0,
	0, 231, 232, 233, 234, 687, 689, 0, 0, 379,
	238, 0, 235, 0, 727, 236, 706, 237, 707, 708,
	709, 710, 711, 0, 669, 0, 0, 239, 240, 241,
	730, 387, 388, 242, 243, 244, 0, 246, 245, 0,
	692, 731, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 733, 253, 254, 256, 390, 255, 734,
	257, 258, 260, 259, 629, 0, 659, 688, 261, 712,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 735, 267, 736, 682, 268, 269, 270, 271, 272,
	273, 0, 274, 683, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 713, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 737, 297, 298, 636, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 399, 308, 310, 311, 676,
	312, 300, 301, 313, 0, 314, 714, 401, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 715, 319, 320,
	684, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 404, 716, 717, 332, 0, 0, 333,
	334, 685, 686, 657, 335, 336, 2583, 338, 0, 0,
	339, 340, 341, 342, 677, 343, 0, 409, 344, 345,
	346, 410, 718, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 662, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 627,
	0, 188, 189, 0, 0, 190, 0, 637, 0, 0,
	679, 0, 0, 640, 0, 191, 192, 193, 354, 355,
	356, 357, 194, 358, 359, 0, 195, 360, 361, 196,
	197, 0, 678, 362, 363, 364, 0, 198, 690, 0,
	670, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 724, 209, 210, 211,
	0, 671, 672, 674, 0, 673, 675, 212, 213, 419,
	214, 366, 215, 367, 368, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	369, 222, 224, 223, 225, 680, 681, 0, 725, 0,
	0, 0, 0, 0, 226, 227, 372, 373, 374, 0,
	228, 0, 229, 0, 0, 726, 0, 230, 691, 0,
	376, 0, 0, 231, 232, 233, 234, 687, 689, 728,
	0, 379, 238, 0, 235, 0, 727, 236, 380, 237,
	381, 382, 383, 384, 385, 0, 386, 0, 729, 239,
	240, 241, 730, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 692, 731, 247, 248, 732, 0, 249, 250,
	0, 0, 251, 0, 252, 733, 253, 254, 256, 390,
	255, 734, 257, 258, 260, 259, 0, 0, 0, 688,
	261, 392, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 735, 267, 736, 682, 268, 269, 270,
	271, 272, 273, 0, 274, 683, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 737, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 676, 312, 300, 301, 313, 738, 314, 400, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 402,
	319, 320, 684, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 405, 406, 332, 0,
	0, 333, 334, 685, 686, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 677, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 0, 347, 614, 0,
	185, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 0, 0, 2198,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 777, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	146, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	148, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 957, 411,
	0, 0, 347, 0, 0, 185, 140, 348, 349, 350,
	351, 352, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	353, 0, 771, 0, 1240, 191, 192, 193, 354, 355,
	356, 357, 194, 358, 359, 0, 195, 360, 361, 196,
	197, 0, 0, 362, 363, 364, 0, 198, 365, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 419,
	214, 366, 215, 367, 368, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	369, 222, 224, 223, 225, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 372, 373, 374, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 375, 0,
	376, 0, 0, 231, 232, 233, 234, 377, 378, 0,
	0, 379, 238, 0, 235, 0, 0, 236, 380, 237,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 239,
	240, 241, 0, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 389, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 390,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 777, 265, 0,
	0, 266, 393, 0, 267, 0, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 146, 309, 399, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 400, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 402,
	319, 320, 403, 0, 323, 148, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 405, 406, 332, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 957, 411, 0, 0, 347, 614, 0,
	185, 140, 348, 349, 350, 351, 352, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 771, 0, 1240,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	146, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	148, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 957, 411,
	0, 0, 347, 1938, 0, 185, 140, 348, 349, 350,
	351, 352, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	353, 0, 0, 0, 117, 191, 192, 193, 354, 355,
	356, 357, 194, 358, 359, 0, 195, 360, 361, 196,
	197, 0, 0, 362, 363, 364, 0, 198, 365, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 419,
	214, 366, 215, 367, 368, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	369, 222, 224, 223, 225, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 372, 373, 374, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 375, 0,
	376, 0, 0, 231, 232, 233, 234, 377, 378, 0,
	0, 379, 238, 0, 235, 0, 0, 236, 380, 237,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 239,
	240, 241, 0, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 389, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 390,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 777, 265, 0,
	0, 266, 393, 0, 267, 0, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 400, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 402,
	319, 320, 403, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 405, 406, 332, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 0, 347, 770, 0,
	185, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 771, 0, 776,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 777, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 0, 347, 0, 0, 185, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	353, 0, 771, 0, 776, 191, 192, 193, 354, 355,
	356, 357, 194, 358, 359, 0, 195, 360, 361, 196,
	197, 0, 0, 362, 363, 364, 0, 198, 365, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 419,
	214, 366, 215, 367, 368, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	369, 222, 224, 223, 225, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 372, 373, 374, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 375, 0,
	376, 0, 0, 231, 232, 233, 234, 377, 378, 0,
	0, 379, 238, 0, 235, 0, 0, 236, 380, 237,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 239,
	240, 241, 0, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 389, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 390,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 777, 265, 0,
	0, 266, 393, 0, 267, 0, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 400, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 402,
	319, 320, 403, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 405, 406, 332, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 0, 347, 0, 0,
	185, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 771, 0, 776,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 0, 347, 0, 0, 0, 185, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 353, 0, 0, 0, 1278, 191, 192, 193, 354,
	355, 356, 357, 194, 358, 359, 0, 195, 360, 361,
	196, 197, 0, 0, 362, 363, 364, 0, 198, 365,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	419, 214, 366, 215, 367, 368, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 369, 222, 224, 223, 225, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 372, 373, 374,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 375,
	0, 376, 0, 0, 231, 232, 233, 234, 377, 378,
	0, 0, 379, 238, 0, 235, 0, 0, 236, 380,
	237, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	239, 240, 241, 0, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 389, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 399, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 400,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	402, 319, 320, 403, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 405, 406, 332,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 0, 347, 0,
	0, 185, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 353, 0, 0, 0,
	1751, 191, 192, 193, 354, 355, 356, 357, 194, 358,
	359, 0, 195, 360, 361, 196, 197, 0, 0, 362,
	363, 364, 0, 198, 365, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 419, 214, 366, 215, 367,
	368, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 369, 222, 224, 223,
	225, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 372, 373, 374, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 375, 0, 376, 0, 0, 231,
	232, 233, 234, 377, 378, 0, 0, 379, 238, 0,
	235, 0, 0, 236, 380, 237, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 239, 240, 241, 0, 387,
	388, 242, 243, 244, 0, 246, 245, 0, 389, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 390, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 391, 261, 392, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 0,
	267, 0, 394, 268, 269, 270, 271, 272, 273, 0,
	274, 395, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 397, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 398, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 399, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 400, 401, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 402, 319, 320, 403, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 404, 405, 406, 332, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 0, 347, 0, 0, 185, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 353, 0, 0, 0, 2114, 191, 192, 193, 354,
	355, 356, 357, 194, 358, 359, 0, 195, 360, 361,
	196, 197, 0, 0, 362, 363, 364, 0, 198, 365,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	419, 214, 366, 215, 367, 368, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 369, 222, 224, 223, 225, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 372, 373, 374,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 375,
	0, 376, 0, 0, 231, 232, 233, 234, 377, 378,
	0, 0, 379, 238, 0, 235, 0, 0, 236, 380,
	237, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	239, 240, 241, 0, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 389, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 399, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 400,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	402, 319, 320, 403, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 405, 406, 332,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 662, 651,
	652, 649, 650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	1243, 0, 0, 353, 0, 0, 0, 0, 191, 192,
	193, 354, 694, 356, 695, 194, 696, 697, 0, 195,
	360, 361, 196, 197, 0, 0, 698, 699, 364, 0,
	198, 365, 0, 798, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 724,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 419, 214, 700, 215, 701, 702, 0, 216,
	0, 217, 0, 218, 0, 0, 693, 220, 0, 221,
	0, 0, 0, 369, 222, 224, 223, 225, 370, 371,
	658, 725, 0, 0, 0, 0, 0, 226, 227, 703,
	704, 705, 0, 228, 0, 229, 0, 0, 726, 0,
	230, 375, 0, 376, 0, 0, 231, 232, 233, 234,
	377, 378, 728, 0, 379, 238, 0, 235, 0, 727,
	236, 706, 237, 707, 708, 709, 710, 711, 0, 669,
	0, 729, 239, 240, 241, 730, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 389, 731, 247, 248, 732,
	0, 249, 250, 0, 0, 251, 0, 252, 733, 253,
	254, 256, 390, 255, 734, 257, 258, 260, 259, 0,
	0, 659, 391, 261, 712, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 735, 267, 736, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 713, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 737, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	399, 308, 310, 311, 0, 312, 300, 301, 313, 738,
	314, 714, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 715, 319, 320, 403, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 716,
	717, 332, 0, 0, 333, 334, 407, 408, 657, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 718, 0, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	1024, 0, 794, 793, 0, 0, 0, 791, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 798, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 724, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 725, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 726, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 728, 0, 379, 238,
	0, 235, 0, 727, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 729, 239, 240, 241, 730,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	731, 247, 248, 732, 0, 249, 250, 0, 0, 251,
	0, 252, 733, 253, 254, 256, 390, 255, 734, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	735, 267, 736, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 737, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 738, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 949, 0, 794, 793, 0, 0,
	0, 791, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 191, 192, 193, 354,
	355, 356, 357, 194, 358, 359, 0, 195, 360, 361,
	196, 197, 0, 0, 362, 363, 364, 0, 198, 365,
	0, 798, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 724, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	419, 214, 366, 215, 367, 368, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 369, 222, 224, 223, 225, 370, 371, 0, 725,
	0, 0, 0, 0, 0, 226, 227, 372, 373, 374,
	0, 228, 0, 229, 0, 0, 726, 0, 230, 375,
	0, 376, 0, 0, 231, 232, 233, 234, 948, 378,
	728, 0, 379, 238, 0, 235, 0, 727, 236, 380,
	237, 381, 382, 383, 384, 385, 0, 386, 0, 729,
	239, 240, 241, 730, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 389, 731, 247, 248, 732, 0, 249,
	250, 0, 0, 251, 0, 252, 733, 253, 254, 256,
	390, 255, 734, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 735, 267, 736, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 737, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 399, 308,
	310, 311, 0, 312, 300, 301, 313, 738, 314, 400,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	402, 319, 320, 403, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 405, 406, 332,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 915, 0,
	794, 793, 0, 0, 0, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 798, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 724, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 725, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	726, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 914, 378, 728, 0, 379, 238, 0, 235,
	0, 727, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 729, 239, 240, 241, 730, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 731, 247,
	248, 732, 0, 249, 250, 0, 0, 251, 0, 252,
	733, 253, 254, 256, 390, 255, 734, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 735, 267,
	736, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 737,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 738, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 787, 0, 794, 793, 0, 0, 0, 791,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 191, 192, 193, 354, 355, 356,
	357, 194, 358, 359, 0, 195, 360, 361, 196, 197,
	0, 0, 362, 363, 364, 0, 198, 365, 0, 798,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 724, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 419, 214,
	366, 215, 367, 368, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 369,
	222, 224, 223, 225, 370, 371, 0, 725, 0, 0,
	0, 0, 0, 226, 227, 372, 373, 374, 0, 228,
	0, 229, 0, 0, 726, 0, 230, 375, 0, 376,
	0, 0, 231, 232, 233, 234, 789, 378, 728, 0,
	379, 238, 0, 235, 0, 727, 236, 380, 237, 381,
	382, 383, 384, 385, 0, 386, 0, 729, 239, 240,
	241, 730, 387, 388, 242, 243, 244, 0, 246, 245,
	0, 389, 731, 247, 248, 732, 0, 249, 250, 0,
	0, 251, 0, 252, 733, 253, 254, 256, 390, 255,
	734, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 735, 267, 736, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 737, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 399, 308, 310, 311,
	0, 312, 300, 301, 313, 738, 314, 400, 401, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 402, 319,
	320, 403, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 404, 405, 406, 332, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 502, 347, 185, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 191, 192, 193,
	354, 355, 356, 357, 194, 358, 359, 0, 195, 360,
	361, 196, 197, 0, 0, 362, 363, 364, 0, 198,
	365, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 181, 214, 366, 215, 367, 368, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 369, 222, 224, 223, 225, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 372, 373,
	374, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	375, 0, 376, 0, 0, 231, 232, 233, 234, 377,
	378, 0, 0, 379, 238, 0, 235, 0, 0, 236,
	380, 237, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 239, 240, 241, 0, 387, 388, 242, 243, 244,
	0, 246, 245, 0, 389, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 390, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 391, 261, 392, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 0, 267, 0, 394, 268,
	269, 270, 271, 272, 273, 0, 274, 395, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 397, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 398,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 399,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	400, 401, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 402, 319, 320, 403, 0, 323, 180, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 404, 405, 406,
	332, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 178, 347,
	185, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 184, 353, 0, 0, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 181, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	180, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	794, 793, 347, 0, 0, 791, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 184, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 798, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 724, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 725, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	726, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 728, 0, 379, 238, 0, 235,
	0, 727, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 729, 239, 240, 241, 730, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 731, 247,
	248, 732, 0, 249, 250, 0, 0, 251, 0, 252,
	733, 253, 254, 256, 390, 255, 734, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 735, 267,
	736, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 737,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 738, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	185, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 181, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	180, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	794, 793, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 184, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 798, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 724, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 725, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	726, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 728, 0, 379, 238, 0, 235,
	0, 727, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 729, 239, 240, 241, 730, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 731, 247,
	248, 732, 0, 249, 250, 0, 0, 251, 0, 252,
	733, 253, 254, 256, 390, 255, 734, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 735, 267,
	736, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 737,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 738, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	185, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	794, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 184, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 198, 365, 0, 798, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 724, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 725, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	726, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 728, 0, 379, 238, 0, 235,
	0, 727, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 729, 239, 240, 241, 730, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 731, 247,
	248, 732, 0, 249, 250, 0, 0, 251, 0, 252,
	733, 253, 254, 256, 390, 255, 734, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 735, 267,
	736, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 737,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 738, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	185, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 1681, 198, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 1679, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 1727, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 1684, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 1725, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 1683, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 1726, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	185, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 1681, 198, 365, 0, 0, 1676, 199, 200, 201,
	0, 203, 204, 205, 202, 1679, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 1684, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 1675, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 1683, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	404, 405, 406, 332, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 1682, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 931, 347, 185, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 191, 192, 193, 354, 355, 356, 357,
	194, 358, 359, 0, 195, 360, 361, 196, 197, 0,
	0, 362, 363, 364, 0, 198, 365, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 419, 214, 366,
	215, 367, 368, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 369, 222,
	224, 223, 225, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 372, 373, 374, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 375, 0, 376, 0,
	0, 231, 232, 233, 234, 377, 378, 0, 0, 379,
	238, 0, 235, 0, 0, 236, 380, 237, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 239, 240, 241,
	0, 387, 388, 242, 243, 244, 0, 246, 245, 0,
	389, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 390, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 391, 261, 392,
	262, 263, 0, 264, 0, 777, 265, 0, 0, 266,
	393, 0, 267, 0, 394, 268, 269, 270, 271, 272,
	273, 0, 274, 395, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 397, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 398, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 399, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 400, 401, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 402, 319, 320,
	403, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 404, 405, 406, 332, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 783, 347, 185, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 191, 192, 193, 354,
	355, 356, 357, 194, 358, 359, 0, 195, 360, 361,
	196, 197, 0, 0, 362, 363, 364, 0, 198, 365,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	419, 214, 366, 215, 367, 368, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 369, 222, 224, 223, 225, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 372, 373, 374,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 375,
	0, 376, 0, 0, 231, 232, 233, 234, 785, 378,
	0, 0, 379, 238, 0, 235, 0, 0, 236, 380,
	237, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	239, 240, 241, 0, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 389, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 777, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 399, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 400,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	402, 319, 320, 403, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 405, 406, 332,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 779, 347, 185,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 191,
	192, 193, 354, 355, 356, 357, 194, 358, 359, 0,
	195, 360, 361, 196, 197, 0, 0, 362, 363, 364,
	0, 198, 365, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 419, 214, 366, 215, 367, 368, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 369, 222, 224, 223, 225, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	372, 373, 374, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 375, 0, 376, 0, 0, 231, 232, 233,
	234, 781, 378, 0, 0, 379, 238, 0, 235, 0,
	0, 236, 380, 237, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 239, 240, 241, 0, 387, 388, 242,
	243, 244, 0, 246, 245, 0, 389, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 390, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 777, 265, 0, 0, 266, 393, 0, 267, 0,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 399, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 400, 401, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 402, 319, 320, 403, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 404,
	405, 406, 332, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	431, 347, 185, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	430, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 429, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 1664,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 2267, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 2267, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 2264, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 777, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 1426, 347, 185, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 191, 192, 193, 354, 355,
	356, 357, 194, 358, 359, 0, 195, 360, 361, 196,
	197, 0, 0, 362, 363, 364, 0, 198, 365, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 419,
	214, 366, 215, 367, 368, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	369, 222, 224, 223, 225, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 372, 373, 374, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 375, 0,
	376, 0, 0, 231, 232, 233, 234, 377, 378, 0,
	0, 379, 238, 0, 235, 0, 0, 236, 380, 237,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 239,
	240, 241, 0, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 389, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 390,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 0, 267, 0, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 400, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 402,
	319, 320, 403, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 405, 406, 332, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 1424, 347, 185, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 191, 192,
	193, 354, 355, 356, 357, 194, 358, 359, 0, 195,
	360, 361, 196, 197, 0, 0, 362, 363, 364, 0,
	198, 365, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 419, 214, 366, 215, 367, 368, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 369, 222, 224, 223, 225, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 372,
	373, 374, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 375, 0, 376, 0, 0, 231, 232, 233, 234,
	377, 378, 0, 0, 379, 238, 0, 235, 0, 0,
	236, 380, 237, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 239, 240, 241, 0, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 389, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	399, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 400, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 402, 319, 320, 403, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 405,
	406, 332, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 185, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 188, 189, 1406, 0, 190, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 191, 192,
	193, 354, 355, 356, 357, 194, 358, 359, 0, 195,
	360, 361, 196, 197, 0, 0, 362, 363, 364, 0,
	198, 365, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 419, 214, 366, 215, 367, 368, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 369, 222, 224, 223, 225, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 372,
	373, 374, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 375, 0, 376, 0, 0, 231, 232, 233, 234,
	377, 378, 0, 0, 379, 238, 0, 235, 0, 0,
	236, 380, 237, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 239, 240, 241, 0, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 389, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	399, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 400, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 402, 319, 320, 403, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 405,
	406, 332, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 529,
	347, 185, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 191, 192, 193, 354, 355, 356, 357, 194, 358,
	359, 0, 195, 360, 361, 196, 197, 0, 0, 362,
	363, 989, 0, 198, 365, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 419, 214, 366, 215, 367,
	368, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 369, 222, 224, 223,
	225, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 372, 373, 374, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 375, 0, 376, 0, 0, 231,
	232, 233, 234, 377, 378, 0, 0, 379, 238, 0,
	235, 0, 0, 236, 380, 237, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 239, 240, 241, 0, 387,
	388, 242, 243, 244, 0, 246, 245, 0, 389, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 390, 531, 0, 257, 258,
	260, 259, 0, 0, 0, 391, 261, 392, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 0,
	267, 0, 394, 268, 269, 270, 271, 272, 273, 0,
	274, 395, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 397, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 398, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 399, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 400, 401, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 402, 319, 320, 403, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 525, 405, 406, 526, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 1293, 347, 185, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 191, 192, 193, 354, 355, 356,
	357, 194, 358, 359, 0, 195, 360, 361, 196, 197,
	0, 0, 362, 363, 364, 0, 198, 365, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 419, 214,
	366, 215, 367, 368, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 369,
	222, 224, 223, 225, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 372, 373, 374, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 375, 0, 376,
	0, 0, 231, 232, 233, 234, 1292, 378, 0, 0,
	379, 238, 0, 235, 0, 0, 236, 380, 237, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 239, 240,
	241, 0, 387, 388, 242, 243, 244, 0, 246, 245,
	0, 389, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 399, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 400, 401, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 402, 319,
	320, 403, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 404, 405, 406, 332, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 529, 347, 185, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 191, 192, 193,
	354, 355, 356, 357, 194, 358, 359, 0, 195, 360,
	361, 196, 197, 0, 0, 362, 363, 989, 0, 198,
	365, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 419, 214, 366, 215, 367, 368, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 369, 222, 224, 223, 225, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 372, 373,
	374, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	375, 0, 376, 0, 0, 231, 232, 233, 234, 377,
	378, 0, 0, 379, 238, 0, 235, 0, 0, 236,
	380, 237, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 239, 240, 241, 0, 387, 388, 242, 243, 244,
	0, 246, 245, 0, 389, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 390, 531, 0, 257, 258, 260, 259, 0, 0,
	0, 391, 261, 392, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 0, 267, 0, 394, 268,
	269, 270, 271, 272, 273, 0, 274, 395, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 397, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 398,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 399,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	400, 401, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 402, 319, 320, 403, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 525, 405, 406,
	526, 0, 0, 333, 990, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 529, 347,
	185, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 519, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 531, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 398, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 973, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	525, 405, 406, 526, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 946, 347, 185, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 191, 192, 193, 354, 355, 356, 357,
	194, 358, 359, 0, 195, 360, 361, 196, 197, 0,
	0, 362, 363, 364, 0, 198, 365, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 419, 214, 366,
	215, 367, 368, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 369, 222,
	224, 223, 225, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 372, 373, 374, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 375, 0, 376, 0,
	0, 231, 232, 233, 234, 945, 378, 0, 0, 379,
	238, 0, 235, 0, 0, 236, 380, 237, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 239, 240, 241,
	0, 387, 388, 242, 243, 244, 0, 246, 245, 0,
	389, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 390, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 391, 261, 392,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 0, 267, 0, 394, 268, 269, 270, 271, 272,
	273, 0, 274, 395, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 397, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 398, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 399, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 400, 401, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 402, 319, 320,
	403, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 404, 405, 406, 332, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 942, 347, 185, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 191, 192, 193, 354,
	355, 356, 357, 194, 358, 359, 0, 195, 360, 361,
	196, 197, 0, 0, 362, 363, 364, 0, 198, 365,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	419, 214, 366, 215, 367, 368, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 369, 222, 224, 223, 225, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 372, 373, 374,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 375,
	0, 376, 0, 0, 231, 232, 233, 234, 941, 378,
	0, 0, 379, 238, 0, 235, 0, 0, 236, 380,
	237, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	239, 240, 241, 0, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 389, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 399, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 400,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	402, 319, 320, 403, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 405, 406, 332,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 939, 347, 185,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 191,
	192, 193, 354, 355, 356, 357, 194, 358, 359, 0,
	195, 360, 361, 196, 197, 0, 0, 362, 363, 364,
	0, 198, 365, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 419, 214, 366, 215, 367, 368, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 369, 222, 224, 223, 225, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	372, 373, 374, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 375, 0, 376, 0, 0, 231, 232, 233,
	234, 938, 378, 0, 0, 379, 238, 0, 235, 0,
	0, 236, 380, 237, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 239, 240, 241, 0, 387, 388, 242,
	243, 244, 0, 246, 245, 0, 389, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 390, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 0, 267, 0,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 399, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 400, 401, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 402, 319, 320, 403, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 404,
	405, 406, 332, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	935, 347, 185, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 934, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	923, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 921, 347, 185, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 191, 192, 193, 354, 355,
	356, 357, 194, 358, 359, 0, 195, 360, 361, 196,
	197, 0, 0, 362, 363, 364, 0, 198, 365, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 419,
	214, 366, 215, 367, 368, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	369, 222, 224, 223, 225, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 372, 373, 374, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 375, 0,
	376, 0, 0, 231, 232, 233, 234, 920, 378, 0,
	0, 379, 238, 0, 235, 0, 0, 236, 380, 237,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 239,
	240, 241, 0, 387, 388, 242, 243, 244, 0, 246,
	245, 0, 389, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 390,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 391,
	261, 392, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 393, 0, 267, 0, 394, 268, 269, 270,
	271, 272, 273, 0, 274, 395, 275, 396, 276, 0,
	277, 278, 279, 280, 281, 397, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 398, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 399, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 400, 401,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 402,
	319, 320, 403, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 404, 405, 406, 332, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 917, 347, 185, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 191, 192,
	193, 354, 355, 356, 357, 194, 358, 359, 0, 195,
	360, 361, 196, 197, 0, 0, 362, 363, 364, 0,
	198, 365, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 419, 214, 366, 215, 367, 368, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 369, 222, 224, 223, 225, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 372,
	373, 374, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 375, 0, 376, 0, 0, 231, 232, 233, 234,
	377, 378, 0, 0, 379, 238, 0, 235, 0, 0,
	236, 380, 237, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 239, 240, 241, 0, 387, 388, 242, 243,
	244, 0, 246, 245, 0, 389, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 390, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 391, 261, 392, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 393, 0, 267, 0, 394,
	268, 269, 270, 271, 272, 273, 0, 274, 395, 275,
	396, 276, 0, 277, 278, 279, 280, 281, 397, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	398, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	399, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 400, 401, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 402, 319, 320, 403, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 404, 405,
	406, 332, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 910,
	347, 185, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 191, 192, 193, 354, 355, 356, 357, 194, 358,
	359, 0, 195, 360, 361, 196, 197, 0, 0, 362,
	363, 364, 0, 198, 365, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 419, 214, 366, 215, 367,
	368, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 369, 222, 224, 223,
	225, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 372, 373, 374, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 375, 0, 376, 0, 0, 231,
	232, 233, 234, 912, 378, 0, 0, 379, 238, 0,
	235, 0, 0, 236, 380, 237, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 239, 240, 241, 0, 387,
	388, 242, 243, 244, 0, 246, 245, 0, 389, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 390, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 391, 261, 392, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 393, 0,
	267, 0, 394, 268, 269, 270, 271, 272, 273, 0,
	274, 395, 275, 396, 276, 0, 277, 278, 279, 280,
	281, 397, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 398, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 399, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 400, 401, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 402, 319, 320, 403, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 404, 405, 406, 332, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 801, 347, 185, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 191, 192, 193, 354, 355, 356,
	357, 194, 358, 359, 0, 195, 360, 361, 196, 197,
	0, 0, 362, 363, 364, 0, 198, 365, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 419, 214,
	366, 215, 367, 368, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 369,
	222, 224, 223, 225, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 372, 373, 374, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 375, 0, 376,
	0, 0, 231, 232, 233, 234, 803, 378, 0, 0,
	379, 238, 0, 235, 0, 0, 236, 380, 237, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 239, 240,
	241, 0, 387, 388, 242, 243, 244, 0, 246, 245,
	0, 389, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 390, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 391, 261,
	392, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 393, 0, 267, 0, 394, 268, 269, 270, 271,
	272, 273, 0, 274, 395, 275, 396, 276, 0, 277,
	278, 279, 280, 281, 397, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 398, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 399, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 400, 401, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 402, 319,
	320, 403, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 404, 405, 406, 332, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 799, 347, 185, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 191, 192, 193,
	354, 355, 356, 357, 194, 358, 359, 0, 195, 360,
	361, 196, 197, 0, 0, 362, 363, 364, 0, 198,
	365, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 419, 214, 366, 215, 367, 368, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 369, 222, 224, 223, 225, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 372, 373,
	374, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	375, 0, 376, 0, 0, 231, 232, 233, 234, 377,
	378, 0, 0, 379, 238, 0, 235, 0, 0, 236,
	380, 237, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 239, 240, 241, 0, 387, 388, 242, 243, 244,
	0, 246, 245, 0, 389, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 390, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 391, 261, 392, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 393, 0, 267, 0, 394, 268,
	269, 270, 271, 272, 273, 0, 274, 395, 275, 396,
	276, 0, 277, 278, 279, 280, 281, 397, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 398,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 399,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	400, 401, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 402, 319, 320, 403, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 404, 405, 406,
	332, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 529, 347,
	185, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	191, 192, 193, 354, 355, 356, 357, 194, 358, 359,
	0, 195, 360, 361, 196, 197, 0, 0, 362, 363,
	364, 0, 519, 365, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 419, 214, 366, 215, 367, 368,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 369, 222, 224, 223, 225,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 372, 373, 374, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 375, 0, 376, 0, 0, 231, 232,
	233, 234, 377, 378, 0, 0, 379, 238, 0, 235,
	0, 0, 236, 380, 237, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 239, 240, 241, 0, 387, 388,
	242, 243, 244, 0, 246, 245, 0, 389, 0, 247,
	248, 0, 0, 249, 518, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 390, 531, 0, 257, 258, 260,
	259, 0, 0, 0, 391, 261, 392, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 393, 0, 267,
	0, 394, 268, 269, 270, 271, 272, 273, 0, 274,
	395, 275, 396, 276, 0, 277, 278, 279, 280, 281,
	397, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 520, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 399, 308, 521, 311, 0, 312, 300, 301,
	313, 0, 314, 400, 401, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 402, 319, 320, 403, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	525, 405, 406, 526, 0, 0, 333, 523, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 510, 347, 185, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 191, 192, 193, 354, 355, 356, 357,
	194, 358, 359, 0, 195, 360, 361, 196, 197, 0,
	0, 362, 363, 364, 0, 198, 365, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 419, 214, 366,
	215, 367, 368, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 369, 222,
	224, 223, 225, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 372, 373, 374, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 375, 0, 376, 0,
	0, 231, 232, 233, 234, 377, 378, 0, 0, 379,
	238, 0, 235, 0, 0, 236, 380, 237, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 239, 240, 241,
	0, 387, 388, 242, 243, 244, 0, 246, 245, 0,
	389, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 390, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 391, 261, 392,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	393, 0, 267, 0, 394, 268, 269, 270, 271, 272,
	273, 0, 274, 395, 275, 396, 276, 0, 277, 278,
	279, 280, 281, 397, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 398, 299, 0, 511, 304,
	305, 306, 307, 0, 309, 399, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 400, 401, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 402, 319, 320,
	403, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 404, 405, 406, 332, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 508, 347, 185, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 191, 192, 193, 354,
	355, 356, 357, 194, 358, 359, 0, 195, 360, 361,
	196, 197, 0, 0, 362, 363, 364, 0, 198, 365,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	419, 214, 366, 215, 367, 368, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 369, 222, 224, 223, 225, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 372, 373, 374,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 375,
	0, 376, 0, 0, 231, 232, 233, 234, 377, 378,
	0, 0, 379, 238, 0, 235, 0, 0, 236, 380,
	237, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	239, 240, 241, 0, 387, 388, 242, 243, 244, 0,
	246, 245, 0, 389, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	390, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	391, 261, 392, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 393, 0, 267, 0, 394, 268, 269,
	270, 271, 272, 273, 0, 274, 395, 275, 396, 276,
	0, 277, 278, 279, 280, 281, 397, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 398, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 399, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 400,
	401, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	402, 319, 320, 403, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 404, 405, 406, 332,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 500, 347, 185,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 191,
	192, 193, 354, 355, 356, 357, 194, 358, 359, 0,
	195, 360, 361, 196, 197, 0, 0, 362, 363, 364,
	0, 198, 365, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 419, 214, 366, 215, 367, 368, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 369, 222, 224, 223, 225, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	372, 373, 374, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 375, 0, 376, 0, 0, 231, 232, 233,
	234, 377, 378, 0, 0, 379, 238, 0, 235, 0,
	0, 236, 380, 237, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 239, 240, 241, 0, 387, 388, 242,
	243, 244, 0, 246, 245, 0, 389, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 390, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 391, 261, 392, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 393, 0, 267, 0,
	394, 268, 269, 270, 271, 272, 273, 0, 274, 395,
	275, 396, 276, 0, 277, 278, 279, 280, 281, 397,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 398, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 399, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 400, 401, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 402, 319, 320, 403, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 404,
	405, 406, 332, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	450, 347, 185, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 1985, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 1983, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 1972, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 511, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 1303,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 0,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 270, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	280, 281, 397, 754, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 185, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 191, 192, 193, 354, 355, 356, 357, 194,
	358, 359, 0, 195, 360, 361, 196, 197, 0, 0,
	362, 363, 364, 0, 198, 365, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 419, 214, 366, 215,
	367, 368, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 369, 222, 224,
	223, 225, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 372, 373, 374, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 375, 0, 376, 0, 0,
	231, 232, 233, 234, 377, 378, 0, 0, 379, 238,
	0, 235, 0, 0, 236, 380, 237, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 239, 240, 241, 0,
	387, 388, 242, 243, 244, 0, 246, 245, 0, 389,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 390, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 391, 261, 392, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 393,
	0, 267, 0, 394, 268, 269, 0, 271, 272, 273,
	0, 274, 395, 275, 396, 276, 0, 277, 278, 279,
	0, 281, 397, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 398, 0, 0, 303, 304, 305,
	306, 307, 0, 309, 399, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 400, 401, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 402, 319, 320, 403,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 404, 405, 406, 332, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 1094, 1095, 0, 1124, 1125, 1126,
	1134, 1135, 1136, 0, 0, 0, 0, 1112, 0, 0,
	0, 1127, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1138, 0, 0, 1879, 1880, 0, 1897, 1898, 1899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2086, 1096, 0, 0, 0, 1094, 1095, 1116, 1124,
	1125, 1126, 1134, 1135, 1136, 1113, 0, 0, 0, 1112,
	0, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1138, 0, 0, 0, 0, 1894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	1116, 0, 0, 1119, 1120, 1121, 1122, 1113, 0, 0,
	0, 0, 1102, 1879, 1880, 0, 1897, 1898, 1899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1131, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 1885, 0, 0, 0, 0, 0, 0, 0,
	0, 1137, 0, 0, 0, 1119, 1120, 1121, 1122, 0,
	0, 0, 0, 0, 1102, 0, 0, 1894, 0, 1129,
	0, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	0, 1900, 0, 0, 1131, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1128, 1137, 0, 0, 1895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 0, 0, 0, 0, 1117, 0,
	0, 1885, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 1128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1132,
	1900, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 1896, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 1895, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 0, 0,
	0, 1094, 1095, 0, 1124, 1125, 1126, 1134, 1135, 1136,
	0, 1132, 0, 0, 1112, 0, 0, 1111, 1127, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1138, 0,
	1130, 0, 0, 1108, 1109, 1115, 1114, 1110, 1133, 0,
	1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 1096,
	0, 0, 0, 0, 0, 1116, 0, 1919, 0, 0,
	0, 1896, 1113, 1891, 1892, 1893, 0, 0, 0, 0,
	1890, 1888, 1889, 1881, 1882, 1883, 1884, 1886, 1887, 0,
	0, 0, 1130, 0, 0, 1108, 1109, 1115, 1114, 1110,
	1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 1871,
	1119, 1120, 1121, 1122, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 1094, 1095, 0, 1124, 1125, 1126,
	1134, 1135, 1136, 0, 0, 0, 0, 1112, 0, 1131,
	1139, 1127, 0, 0, 0, 0, 1094, 1095, 1097, 0,
	0, 1138, 1891, 1892, 1893, 0, 0, 0, 1137, 1890,
	1888, 1889, 1881, 1882, 1883, 1884, 1886, 1887, 0, 0,
	1097, 0, 1096, 0, 0, 0, 1129, 0, 1116, 0,
	0, 0, 0, 1117, 0, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 1128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 1120, 1121, 1122, 0, 0, 0,
	0, 0, 1102, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 1120, 1121, 1122, 1118,
	0, 0, 1131, 1139, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1132, 0, 0, 0,
	0, 1137, 1111, 1094, 1095, 0, 1124, 1125, 1126, 1134,
	1135, 1136, 0, 0, 0, 0, 1112, 0, 0, 1129,
	1127, 0, 0, 0, 0, 0, 1117, 1097, 0, 0,
	1138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1117, 0,
	0, 1096, 1128, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 1130, 0, 0,
	1108, 1109, 1115, 1114, 1110, 1133, 0, 1107, 1105, 1106,
	1098, 1099, 1100, 1101, 1103, 1104, 0, 1123, 0, 0,
	2553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 1119, 1120, 1121, 1122, 0, 0, 0, 1132,
	0, 1102, 0, 0, 1118, 1111, 1094, 1095, 0, 1124,
	1125, 1126, 1134, 1135, 1136, 0, 0, 0, 0, 1112,
	0, 1131, 1139, 1127, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1138, 0, 0, 0, 0, 0, 0,
	1137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 1129, 0,
	1116, 0, 0, 0, 0, 1117, 0, 1113, 0, 0,
	1130, 0, 0, 1108, 1109, 1115, 1114, 1110, 1133, 0,
	1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0,
	0, 1128, 0, 2503, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 0, 0, 0, 1119, 1120, 1121, 1122, 0,
	0, 0, 0, 0, 1102, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, 0, 0, 1131, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 1137, 1111, 1094, 1095, 0, 1124, 1125,
	1126, 1134, 1135, 1136, 0, 0, 0, 0, 1112, 0,
	0, 1129, 1127, 0, 0, 0, 0, 0, 1117, 1097,
	0, 0, 1138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 1128, 0, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 1130,
	0, 0, 1108, 1109, 1115, 1114, 1110, 1133, 0, 1107,
	1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 1123,
	0, 0, 2457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 1120, 1121, 1122, 0, 0,
	0, 1132, 0, 1102, 0, 0, 0, 1111, 1094, 1095,
	0, 1124, 1125, 1126, 1134, 1135, 1136, 0, 0, 0,
	0, 1112, 0, 1131, 1139, 1127, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 1138, 0, 0, 0, 0,
	0, 0, 1137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	1129, 0, 1116, 0, 0, 0, 0, 1117, 0, 1113,
	0, 0, 1130, 0, 0, 1108, 1109, 1115, 1114, 1110,
	1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 0, 1128, 0, 2427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 1120, 1121,
	1122, 0, 0, 0, 0, 0, 1102, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1118, 0, 0, 1131, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 0, 0, 0, 0, 1137, 1111, 1094, 1095, 0,
	1124, 1125, 1126, 1134, 1135, 1136, 0, 0, 0, 0,
	1112, 0, 0, 1129, 1127, 0, 0, 0, 0, 0,
	1117, 1097, 0, 0, 1138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 1128, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 1130, 0, 0, 1108, 1109, 1115, 1114, 1110, 1133,
	0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104,
	0, 1123, 0, 0, 2422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 1120, 1121, 1122,
	0, 0, 0, 1132, 0, 1102, 0, 0, 0, 1111,
	1094, 1095, 0, 1124, 1125, 1126, 1134, 1135, 1136, 0,
	0, 0, 0, 1112, 0, 1131, 1139, 1127, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 1138, 0, 0,
	0, 0, 0, 0, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 1129, 0, 1116, 0, 0, 0, 0, 1117,
	0, 1113, 0, 0, 1130, 0, 0, 1108, 1109, 1115,
	1114, 1110, 1133, 0, 1107, 1105, 1106, 1098, 1099, 1100,
	1101, 1103, 1104, 0, 0, 1128, 0, 2418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	1120, 1121, 1122, 0, 0, 0, 0, 0, 1102, 0,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 1131, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1132, 0, 0, 0, 0, 1137, 1111, 1094,
	1095, 0, 1124, 1125, 1126, 1134, 1135, 1136, 0, 0,
	0, 0, 1112, 0, 0, 1129, 1127, 0, 0, 0,
	0, 0, 1117, 1097, 0, 0, 1138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 1128, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 1130, 0, 0, 1108, 1109, 1115, 1114,
	1110, 1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101,
	1103, 1104, 0, 1123, 0, 0, 2348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 1120,
	1121, 1122, 0, 0, 0, 1132, 0, 1102, 0, 0,
	0, 1111, 1094, 1095, 0, 1124, 1125, 1126, 1134, 1135,
	1136, 0, 0, 0, 0, 1112, 0, 1131, 1139, 1127,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 1138,
	0, 0, 0, 0, 0, 0, 1137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 1129, 0, 1116, 0, 0, 0,
	0, 1117, 0, 1113, 0, 0, 1130, 0, 0, 1108,
	1109, 1115, 1114, 1110, 1133, 0, 1107, 1105, 1106, 1098,
	1099, 1100, 1101, 1103, 1104, 0, 0, 1128, 0, 2314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1119, 1120, 1121, 1122, 0, 0, 0, 0, 0,
	1102, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	1131, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 0, 0, 0, 1137,
	1111, 1094, 1095, 0, 1124, 1125, 1126, 1134, 1135, 1136,
	0, 0, 0, 0, 1112, 0, 0, 1129, 1127, 0,
	0, 0, 0, 0, 1117, 1097, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	1128, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 1130, 0, 0, 1108, 1109,
	1115, 1114, 1110, 1133, 0, 1107, 1105, 1106, 1098, 1099,
	1100, 1101, 1103, 1104, 0, 1123, 0, 0, 2313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 1120, 1121, 1122, 0, 0, 0, 1132, 0, 1102,
	0, 0, 0, 1111, 1094, 1095, 0, 1124, 1125, 1126,
	1134, 1135, 1136, 0, 0, 0, 0, 1112, 0, 1131,
	1139, 1127, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1138, 0, 0, 0, 0, 0, 0, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 1129, 0, 1116, 0,
	0, 0, 0, 1117, 0, 1113, 0, 0, 1130, 0,
	0, 1108, 1109, 1115, 1114, 1110, 1133, 0, 1107, 1105,
	1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0, 1128,
	0, 2278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 1120, 1121, 1122, 0, 0, 0,
	0, 0, 1102, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 1131, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1132, 0, 0, 0,
	0, 1137, 1111, 1094, 1095, 0, 1124, 1125, 1126, 1134,
	1135, 1136, 0, 0, 0, 0, 1112, 0, 0, 1129,
	1127, 0, 0, 0, 0, 0, 1117, 1097, 0, 0,
	1138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 1128, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 1130, 0, 0,
	1108, 1109, 1115, 1114, 1110, 1133, 0, 1107, 1105, 1106,
	1098, 1099, 1100, 1101, 1103, 1104, 0, 1123, 0, 0,
	2117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1119, 1120, 1121, 1122, 0, 0, 0, 1132,
	0, 1102, 0, 0, 0, 1111, 1094, 1095, 0, 1124,
	1125, 1126, 1134, 1135, 1136, 0, 0, 0, 0, 1112,
	0, 1131, 1139, 1127, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1138, 0, 0, 0, 0, 0, 0,
	1137, 0, 0, 0, 1879, 1880, 0, 1897, 1898, 1899,
	0, 0, 0, 0, 1096, 0, 0, 0, 1129, 0,
	1116, 0, 0, 0, 0, 1117, 0, 1113, 0, 0,
	1130, 0, 0, 1108, 1109, 1115, 1114, 1110, 1133, 0,
	1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0,
	0, 1128, 0, 2093, 0, 0, 0, 0, 1894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 1120, 1121, 1122, 0,
	0, 0, 0, 0, 1102, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, 0, 0, 1131, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 1885, 1137, 1111, 0, 0, 1094, 1095, 0,
	1124, 1125, 1126, 1134, 1135, 1136, 0, 0, 0, 0,
	1112, 1129, 0, 1901, 1127, 0, 0, 0, 1117, 0,
	0, 1097, 0, 0, 1138, 0, 0, 0, 0, 1879,
	1880, 1900, 1897, 1898, 1899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1128, 1096, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 1895, 0, 1113, 1130,
	0, 0, 1108, 1109, 1115, 1114, 1110, 1133, 0, 1107,
	1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 1123,
	0, 0, 1542, 1894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 1120, 1121, 1122,
	0, 1132, 0, 0, 0, 1102, 2616, 1111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1896, 0, 0, 1131, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1885, 0, 0,
	0, 0, 0, 0, 1137, 0, 1094, 1095, 0, 1124,
	1125, 1126, 1134, 1135, 1136, 0, 0, 0, 0, 1112,
	0, 0, 1129, 1127, 0, 0, 0, 0, 0, 1117,
	1097, 0, 1130, 1138, 0, 1108, 1109, 1115, 1114, 1110,
	1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 0, 1841, 1096, 1128, 0, 0, 0, 0,
	1116, 1895, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 2615, 1891, 1892, 1893, 0, 0, 0, 0,
	1890, 1888, 1889, 1881, 1882, 1883, 1884, 1886, 1887, 0,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 1120, 1121, 1122, 0,
	0, 0, 1132, 0, 1102, 0, 1911, 0, 1111, 1910,
	0, 0, 0, 0, 0, 0, 0, 1896, 0, 0,
	0, 0, 0, 0, 1131, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 0, 1094, 1095, 0, 1124, 1125,
	1126, 1134, 1135, 1136, 0, 0, 0, 0, 1112, 0,
	0, 1129, 1127, 0, 0, 0, 0, 1814, 1117, 1097,
	0, 0, 1138, 1130, 0, 0, 1108, 1109, 1115, 1114,
	1110, 1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101,
	1103, 1104, 0, 1096, 1128, 0, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 1113, 0, 1891, 1892,
	1893, 0, 0, 0, 0, 1890, 1888, 1889, 1881, 1882,
	1883, 1884, 1886, 1887, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 1815, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 1120, 1121, 1122, 0, 0,
	0, 1132, 1640, 1102, 0, 0, 0, 1111, 1094, 1095,
	0, 1124, 1125, 1126, 1134, 1135, 1136, 0, 0, 0,
	0, 1112, 0, 1131, 1139, 1127, 0, 0, 0, 1639,
	0, 0, 1097, 0, 0, 1138, 0, 0, 0, 0,
	0, 0, 1137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	1129, 0, 1116, 0, 0, 0, 0, 1117, 0, 1113,
	0, 0, 1130, 0, 0, 1108, 1109, 1115, 1114, 1110,
	1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 0, 1128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 1120, 1121,
	1122, 0, 0, 0, 0, 0, 1102, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1118, 0, 0, 1131, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 0, 0, 0, 0, 1137, 1111, 1094, 1095, 0,
	1124, 1125, 1126, 1134, 1135, 1136, 0, 0, 0, 0,
	1112, 0, 0, 1129, 1127, 0, 0, 0, 0, 0,
	1117, 1097, 0, 0, 1138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 1128, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 1130, 0, 0, 1108, 1109, 1115, 1114, 1110, 1133,
	0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 1120, 1121, 1122,
	0, 0, 0, 1132, 0, 1102, 0, 0, 0, 1111,
	1094, 1095, 0, 1124, 1125, 1126, 1134, 1135, 1136, 0,
	0, 0, 0, 1112, 0, 1131, 1139, 1127, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 1138, 0, 0,
	0, 0, 0, 0, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 1129, 0, 1116, 0, 0, 0, 0, 1117,
	0, 1113, 0, 0, 1130, 0, 0, 1108, 1109, 1115,
	1114, 1110, 1133, 0, 1107, 1105, 1106, 1098, 1099, 1100,
	1101, 1103, 1104, 0, 0, 1128, 611, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	1120, 1121, 1122, 0, 0, 0, 0, 0, 1102, 0,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 1131, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1132, 0, 0, 0, 0, 1137, 1111, 1094,
	1095, 0, 1124, 1125, 1126, 1134, 1135, 1136, 0, 0,
	0, 0, 1112, 0, 0, 1129, 1127, 0, 0, 0,
	0, 0, 1117, 1097, 0, 0, 1138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 1128, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 1130, 0, 0, 1108, 1109, 1115, 1114,
	1110, 1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101,
	1103, 1104, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 1120,
	1121, 1122, 0, 0, 0, 1132, 0, 1102, 0, 0,
	0, 1111, 1917, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1131, 1139, 0,
	0, 0, 0, 2097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1137, 0, 1094, 1095,
	0, 1124, 1125, 1126, 1134, 1135, 1136, 0, 0, 0,
	0, 1112, 0, 0, 1129, 1127, 0, 0, 0, 1912,
	0, 1117, 1097, 0, 0, 1138, 1130, 0, 0, 1108,
	1109, 1115, 1114, 1110, 1133, 0, 1107, 1105, 1106, 1098,
	1099, 1100, 1101, 1103, 1104, 0, 1096, 1128, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 1120, 1121,
	1122, 0, 0, 0, 1132, 0, 1102, 0, 0, 0,
	1111, 1094, 1095, 0, 1124, 1125, 1126, 1134, 1135, 1136,
	0, 0, 0, 0, 1112, 0, 1131, 1139, 1127, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 1137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 1129, 0, 1116, 0, 0, 0, 0,
	1117, 0, 1113, 0, 0, 1130, 0, 0, 1108, 1109,
	1115, 1114, 1110, 1133, 0, 1107, 1105, 1106, 1098, 1099,
	1100, 1101, 1103, 1104, 0, 0, 1128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 1120, 1121, 1122, 0, 0, 0, 0, 0, 1102,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 1131,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1132, 0, 0, 0, 0, 1137, 1111,
	1094, 1095, 0, 1124, 1125, 1126, 1134, 1135, 1136, 0,
	0, 0, 0, 1112, 0, 0, 1129, 1127, 0, 0,
	0, 1870, 0, 1117, 1097, 0, 0, 1138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 1128,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 0,
	0, 1113, 0, 1877, 1130, 0, 0, 1108, 1109, 1115,
	1114, 1110, 1133, 0, 1107, 1105, 1106, 1098, 1099, 1100,
	1101, 1103, 1104, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	1120, 1121, 1122, 0, 0, 0, 1132, 0, 1102, 0,
	0, 0, 1111, 1094, 1095, 0, 1124, 1125, 1126, 1134,
	1135, 1136, 0, 0, 0, 0, 1112, 0, 1131, 1139,
	1127, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1138, 0, 0, 0, 0, 0, 0, 1137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 1129, 0, 1116, 0, 0,
	0, 0, 1117, 0, 1113, 0, 0, 1130, 0, 0,
	1108, 1109, 1115, 1114, 1110, 1133, 0, 1107, 1105, 1106,
	1098, 1099, 1100, 1101, 1103, 1104, 0, 0, 1128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1119, 1120, 1121, 1122, 0, 0, 0, 0,
	0, 1102, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 1131, 1139, 0, 1094, 1095, 0, 1124, 1125, 1126,
	1134, 1135, 1136, 0, 0, 1132, 0, 1112, 0, 0,
	1137, 1111, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1138, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 1117, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 1128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 0, 0, 1108,
	1109, 1115, 1114, 1110, 1133, 0, 1107, 1105, 1106, 1098,
	1099, 1100, 1101, 1103, 1104, 0, 1123, 0, 0, 0,
	0, 0, 0, 1119, 1120, 1121, 1122, 0, 0, 0,
	0, 1118, 1102, 0, 0, 0, 1094, 1095, 0, 1124,
	1125, 1126, 1134, 1135, 1136, 0, 0, 0, 1132, 1112,
	0, 0, 1131, 1139, 1111, 0, 0, 0, 0, 0,
	1097, 0, 0, 1138, 0, 0, 0, 0, 0, 0,
	452, 1137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 1129,
	1116, 0, 479, 0, 0, 0, 1117, 1113, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 1130,
	0, 0, 1108, 1109, 1115, 1114, 1110, 1133, 0, 1107,
	1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 0, 0,
	0, 0, 478, 0, 0, 1119, 1120, 1121, 1122, 0,
	0, 0, 0, 0, 1102, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 480, 1118, 0, 1131, 1139, 0, 0, 53, 0,
	482, 54, 0, 0, 0, 0, 0, 0, 0, 1132,
	0, 0, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 56, 0, 0, 0, 0, 0, 1117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1130, 0, 0, 1108, 1109, 1115, 1114, 1110, 1133, 0,
	1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103, 1104, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 0, 0, 1111, 0, 1348,
	0, 0, 0, 0, 0, 118, 59, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 481,
	0, 0, 93, 1356, 1345, 1374, 1334, 1366, 1365, 0,
	0, 1336, 1335, 0, 0, 0, 0, 1376, 1375, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1130, 0, 0, 1108, 1109, 1115, 1114, 1110,
	1133, 0, 1107, 1105, 1106, 1098, 1099, 1100, 1101, 1103,
	1104, 0, 0, 0, 0, 1371, 0, 1363, 1362, 0,
	147, 0, 0, 0, 0, 0, 0, 1361, 140, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1360, 1358, 1359, 0, 0, 0, 453, 0, 550, 0,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 555, 0,
	0, 0, 1349, 1347, 1350, 1351, 1352, 1353, 1354, 0,
	1012, 553, 0, 0, 0, 0, 0, 1338, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 0, 0, 0, 1348, 556, 0, 0,
	0, 0, 0, 1340, 0, 562, 563, 0, 0, 0,
	572, 0, 0, 0, 0, 1364, 0, 0, 0, 1346,
	0, 0, 0, 0, 577, 557, 0, 0, 0, 0,
	1356, 1345, 1374, 1334, 1366, 1365, 0, 0, 1336, 1335,
	0, 0, 0, 0, 1376, 1375, 0, 575, 0, 1357,
	0, 0, 0, 1467, 1465, 1466, 1469, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 1371, 0, 1363, 1362, 0, 0, 559, 560,
	0, 0, 1355, 1342, 1361, 0, 0, 0, 0, 0,
	0, 0, 0, 1378, 0, 0, 566, 0, 0, 0,
	0, 561, 568, 0, 0, 0, 1339, 1360, 1358, 1359,
	1372, 1373, 0, 0, 565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 1344, 1343, 0, 0, 0, 0, 1377, 1349,
	1347, 1350, 1351, 1352, 1353, 1354, 0, 1012, 0, 0,
	0, 0, 0, 0, 1338, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1364, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 0, 552, 569, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1357, 0, 0, 0,
	0, 570, 0, 0, 0, 574, 0, 0, 0, 0,
	580, 0, 0, 581, 0, 0, 567, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 573, 0, 0, 0, 0, 0, 0, 1355,
	1342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 1372, 1373, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 1377,
}
var sqlPact = [...]int{

	3576, -1000, -2, -1000, -1000, -1000, 179, -1000, -1000, -1000,
	-1000, 178, 177, 171, -1000, 170, 169, 167, 166, 165,
	163, 161, 157, 152, 149, 148, -1000, 147, -1000, -1000,
	-1000, -1000, 146, 140, 138, -1000, 136, 1113, 23136, 134,
	129, 1450, -1000, 36128, 120, -1000, 1071, 26888, 1020, 1286,
	-1000, 116, 1026, 35788, 42898, 1486, 1195, 1681, 35445, 22793,
	1667, 1461, 35102, -1000, -1000, 34759, 113, 112, 111, 110,
	108, -1000, -1000, 34416, 104, 102, 99, 97, 96, 95,
	93, 92, 91, 90, 89, 88, 87, 84, -1000, 82,
	81, 75, -1000, 43276, 71, 70, 69, 1189, 63, 62,
	61, 59, -1000, -1000, 949, 57, 54, 53, 52, 47,
	133, 45, 38, 37, 36, -1000, 1021, 533, 2725, 9215,
	1093, 1077, 1076, 1068, 1073, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	38168, 36128, 35, -41, 34, -1000, 2008, 716, 18956, 3576,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26545, 26202, 22450, 34073, 33730, 6659, 832, -1000, -5,
	24496, 36128, -1000, 194, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14762, 14381, 604, 194, -1000,
	-1000, -1000, 33387, 22096, 33044, 1558, 32701, -1000, -1000, 32358,
	-1000, -1000, 1855, 1734, 1731, 25859, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32018, 31675, 31332, 30989, 21742, 554,
	-1000, -1000, -1000, 5182, -1000, -1000, -1000, -1000, 33, -1000,
	32, 31, -1000, 28, 27, 23, 20, 18, 17, -1000,
	14, 5, -1000, 4, 3, -1000, 2, 0, 970, 1050,
	992, 30646, 926, 1335, -1000, -1000, -4, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36128, -1000, 15821, -1000, 553,
	-1000, 1693, -1000, 15821, -1000, 1332, -1000, -1000, -1000, -1000,
	-1000, 36128, -1000, -1000, -1000, -1000, -1000, -1000, 2232, 1225,
	552, 30303, -1000, 1613, -1000, 640, 1012, 819, -1000, -1000,
	-1000, 9921, 199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1659, 21388, 1397, 2051, 1807, 2229, 1507, 1795,
	1793, 1789, 1786, 1769, 2224, 1128, 2219, 1847, 1070, 2215,
	1765, 1337, 709, 2214, 1692, 1691, -1000, -1000, -1000, -1000,
	971, -1000, -1000, -1000, -1000, 28248, -1000, -1000, -1000, -1000,
	-1000, -1000, 867, 957, -1000, -1000, -1000, -1000, -1000, 1021,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1498, 1974, 1974,
	1974, 2076, 355, 337, -1000, 133, -1000, 1806, -1000, 1222,
	-1000, -1000, -1000, 42593, -1000, -1000, 15821, 15821, 15821, 15821,
	15821, 1244, -1000, 573, -1000, 550, 546, 7761, -1000, -1000,
	2193, -1000, -1000, -1000, 341, -1000, -1000, 15821, 194, -1000,
	-1000, -1000, -1000, 545, 2202, -1000, 727, -1000, -1000, -1000,
	645, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1709, 544, 542, 540, -1000, 539, -1000, -1000, 535, 534,
	531, 530, 525, 523, 521, 518, 514, 513, 509, 506,
	504, 502, 501, 1143, -1000, 655, -1000, -1000, 655, 655,
	-1000, 464, 464, 465, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 464, -1000, -1000, -1000, 619, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 487,
	1294, -1000, -1000, 1294, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 822, 37488, -9, 36128, -1000, 486, -9, -1000, -1000,
	475, -1000, 10274, 10274, -1000, -1000, -1000, 15821, -1000, 1977,
	-1000, 4687, -193, 364, 615, -1000, 17921, 20682, -1000, -1000,
	1232, 1825, 833, -1000, 1108, 1821, 579, -1000, 654, 1814,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1237, -1000, 1187, 1812, -109, 1750, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 23476, 24496, -5, -6, -1000, -1000, -1000, 6307,
	42593, -1000, 42593, -1000, 907, 19646, 194, -1000, -1000, -1000,
	-1000, 474, 1402, 649, 1401, -1000, 367, -1000, 29960, 649,
	1399, -1000, -1000, -1000, 28248, -1000, 36128, -1000, 36128, -1000,
	938, -1000, 37828, 137, 1811, -1000, -1000, 137, 1799, -1000,
	130, 1792, -1000, -1000, 1298, 1784, -1000, -54, 1773, -1000,
	-1000, -1000, 15821, -42, -1000, -1000, -1000, 716, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29617, 23816, 1508, 656, 42593, 2122, 43332,
	23476, 42593, 23816, -1000, -1000, 36128, -1000, 15821, -1000, 2118,
	1457, -11, -1000, -1000, -1000, -1000, -1000, 1436, 1533, 782,
	1012, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2201, -1000,
	2166, -1000, -1000, -1000, 2192, 9921, 9921, 1904, -1000, 196,
	6659, -1000, -1000, -1000, -1000, 29274, -1000, -1000, -1000, 1206,
	36128, -1000, -1000, 1705, -1000, 23816, 36128, -1000, 36128, -1000,
	36128, -1000, 36128, -1000, 36128, -1000, -1000, -1000, -1000, -1000,
	4053, -1000, 1702, -1000, -1000, 36128, -1000, 1430, -1000, -1000,
	-1000, 28934, 28591, -1000, 1034, 851, -1000, -1000, 143, -1000,
	36128, 2052, 638, -1000, 1498, 1469, 1697, 725, 1352, 1518,
	14000, 1511, 15821, 133, -1000, -1000, 133, 133, 8834, -1000,
	-1000, -1000, 36128, -1000, 43145, 43332, 6659, 855, 15821, 15821,
	15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821,
	15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821,
	15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821, 15821,
	1192, 15821, 814, 15821, 15821, 15821, 15821, 1455, 1148, 407,
	1190, -1000, 2160, 2160, 2160, 42734, 42734, 426, 573, -1000,
	15821, -1000, 233, 15821, 337, 40863, -8, 7394, -1000, -1000,
	-1000, 13647, 660, 42593, 194, 7013, -1000, 2188, 953, 1732,
	1617, 473, 583, 580, 576, 516, 15821, 15821, 13294, 12913,
	12532, 16527, 12151, 15821, 8128, 15821, 15821, 15821, 15821, 11770,
	11389, -1000, 469, -1000, -1000, -1000, -1000, 2187, -1000, -1000,
	2186, -1000, 853, 848, 2185, -1000, -11, -1000, 37488, -1000,
	36128, -9, 2116, 36128, 15821, 151, -1000, 41588, -1000, 151,
	-45, 42593, 1527, 1522, 19301, 1285, 1265, 1265, 1265, -1000,
	466, 566, 615, 5592, 11008, -1000, 27228, 1290, 227, 335,
	17576, 1977, -1000, 36128, -23, 1085, -1000, 25516, 2025, 1972,
	1967, 28248, 2090, 233, 1749, 1688, -1000, 6659, 809, 28248,
	1213, 23476, 2016, 808, 2088, 233, 1747, 1687, 806, 36128,
	6659, 1997, 611, -1000, 36128, -1000, -1000, -1000, 1678, -51,
	-1000, -1000, 25176, 2113, 1772, -1000, 1205, -1000, 1768, 2107,
	36128, 1328, 1398, -1000, -1000, 863, 1767, 657, 524, 2104,
	524, 19992, -1000, 36128, -1000, 36128, -1000, -1000, 36128, -1000,
	36128, -1000, 36128, 36128, -1000, 36128, 23476, 23476, -52, 696,
	24836, 805, -1000, 678, 25176, 3740, -61, -1000, 846, -1000,
	-1000, -1000, -1000, 393, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	465, 1143, 464, 464, 464, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 619, -1000, 655, 655, 655, -1000, -1000, -38,
	1672, 633, -62, 745, -11, -1000, 1294, -1000, 1289, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -13,
	-1000, -13, -1000, 6659, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 36128, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3324, -1000, -1000, -1000, -1000, -1000, -1000, 36128, 36128, 36128,
	-1000, 28248, 653, 1699, -1000, 2009, 1469, 1697, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42593, -1000, 381, -1000,
	-1000, 42593, 997, 1545, -1000, 1545, -15, -1000, 41465, 1494,
	36128, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 637, 905, 905, 887, 887, 887, 887, 2117,
	353, 313, 421, 4728, 4728, 4728, 4728, 4728, 4728, 4728,
	4728, 395, 498, 498, 395, 395, 395, 395, 395, 4728,
	4728, 4728, 42734, 339, 39316, 15821, 15821, 803, 1141, 407,
	39316, 15821, 39316, 39316, 39316, 39316, -1000, 1707, -1000, -1000,
	-1000, -1000, 1668, 463, 16527, 16527, -1000, -1000, -1000, 7761,
	15821, -1000, -1000, -1000, -1000, 461, 15821, -1000, 40986, -223,
	318, -91, -1000, 15821, 565, -64, -1000, 904, -1000, 15821,
	-1000, -14, 15821, 15821, 15821, 317, -1000, 315, -1000, 801,
	-1000, 798, 793, 792, -1000, 460, 1269, 458, 457, 15821,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42470, 38906,
	312, -1000, 1663, -91, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 311, -1000, 309, -1000, 42311, -91, 301, 41024, -1000,
	16527, 16527, 16527, 7761, 456, 297, -1000, 41306, -1000, 42188,
	10627, 10627, 10627, 296, 42029, 15821, -91, 38854, 4446, 4002,
	-68, -69, -1000, -71, -1000, 2184, -76, 295, 636, 635,
	294, -1000, -1000, 455, -79, -81, 657, 10274, 18611, 6659,
	-1000, 657, -1000, 15821, 19301, 19301, 1330, 1499, 19301, -1000,
	-1000, -1000, -1000, 27228, 507, 615, 27228, -1000, 2183, 1491,
	293, -1000, -1000, -1000, 36128, 453, -1000, 615, 292, 1006,
	36128, 36128, 36128, -1000, -1000, 1386, 37148, 1385, 43332, 36128,
	-1000, 451, 448, 1485, 1484, 36128, 36128, 36808, 36468, 36128,
	1044, 233, -1000, 1994, 447, -1000, 36128, 1043, 23476, 652,
	632, 36128, 233, -1000, 1991, 446, 6659, 1039, -1000, 630,
	1601, 1356, -1000, 893, 1650, 36128, 291, -86, -16, 43332,
	-1000, -1000, -1000, -1000, -1000, 36128, 499, 36128, 233, 36128,
	23476, 23476, 233, 36128, 1766, 1833, 596, 36128, 1518, 15821,
	1157, -1000, 18266, 669, 36128, 1025, 103, -1000, -1000, -1000,
	607, 36128, -1000, -1000, 137, 137, -1000, 130, 1298, -1000,
	-54, -1000, -1000, -1000, 36128, 23476, -105, -1000, 705, 700,
	694, -1000, 43332, -1000, 572, 816, -1000, 2179, 647, 36128,
	9921, 9921, -1000, 1535, -1000, -1000, 996, -1000, 1130, -1000,
	9921, -1000, -24, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1299, 1248, -1000, -1000, -1000, 997, -1000, 15821, 2174, -1000,
	-1000, -1000, 8834, -1000, -1000, -1000, 36128, -147, 15821, 39316,
	39316, 15821, 16527, 16527, -1000, 39316, -1000, -1000, -1000, -1000,
	-1000, 1645, 443, 15821, 43332, 38884, 4762, -106, 395, 15821,
	-18, -1000, 15821, -1000, 40704, -1000, -1000, 568, 1829, -1000,
	15821, 41870, 289, 9568, -1000, 41747, -48, -48, -1000, 2200,
	1413, 1240, 1090, 969, 2173, -1000, 20337, 658, 1292, 40581,
	43145, 43332, -1000, 15821, -1000, -1000, 1636, 15821, -1000, 43145,
	43332, 16527, 16527, 16527, 16527, 16527, 16527, 16527, 16527, 16527,
	16527, 16527, 16527, 16527, 16527, 16527, 16527, 16527, 16527, 16527,
	1512, 16527, 2156, 2156, 2156, -22, 15821, -1000, 1670, 1636,
	15821, 15821, 43332, 286, 285, 281, -1000, 15821, -91, 15821,
	15821, 15821, -1000, -1000, -1000, 280, -1000, 2172, -1000, -1000,
	-1000, -1000, 3740, -1000, -1000, 1615, -1000, -170, -1000, 1977,
	-1000, 1615, 42593, -1000, 1330, -1000, 442, 15821, 19301, -1000,
	563, -1000, -111, -1000, 27228, -1000, 561, -218, -1000, 606,
	-1000, 615, 438, 36128, 27228, -1000, -1000, -1000, 790, 786,
	1764, -1000, 1383, -1000, 673, -1000, 1063, 15821, 17231, 437,
	436, 1142, -1000, 1763, 1298, 1761, 1298, -1000, -23, 1016,
	-1000, 629, 15821, -1000, 781, -1000, 1197, 21034, -1000, -1000,
	623, 15821, -1000, 780, 21034, 647, 1631, 869, -1000, 892,
	-1000, 1576, -1000, 25176, 435, 36128, 434, -1000, 433, -1000,
	649, -1000, 427, 36128, 1459, 596, 24156, -1000, 649, 1025,
	-1000, 42593, -1000, 1025, 8481, 1978, -112, -1000, -1000, -1000,
	657, 19992, 19301, 15821, -113, -1000, -1000, -1000, -1000, -24,
	1914, 1914, -1000, 2171, -1000, 560, 279, -1000, 27908, -24,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36128, 1297, 6659,
	36128, 36128, 36128, 1301, 40422, -1000, 1930, 6659, 2150, 39316,
	3875, 489, 15821, 43332, 42856, -114, 15821, 15821, -1000, 278,
	15821, 559, 42593, -1000, -1000, -1000, 42593, 15821, 2196, 15821,
	275, 273, 271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 270, -1000, -1000, 38508, 15821, 269, -1000, 268, 258,
	42593, 1670, 42593, -1000, -1000, 651, 651, 936, 936, 936,
	936, 2156, 1153, 1228, 1102, 230, 230, 230, 198, 718,
	718, 230, 230, 230, 1628, 1474, 425, 38973, 15821, 244,
	-1000, -1000, 42593, 42593, 243, -1000, -1000, -1000, -91, 272,
	40299, 40140, -1000, 241, 237, 1611, 2074, -1000, 19301, 1611,
	-1000, 36128, 42593, -1000, -193, -1000, 2169, -1000, -1000, 1491,
	-1000, 5954, 27228, 36128, -119, -1000, 36128, 36128, 36128, 1755,
	-1000, 1501, -1000, 40017, -120, -1000, 324, 2046, 15821, -1000,
	-1000, 424, 17231, 36128, -1000, 1487, 1490, 734, 36128, -1000,
	36128, -1000, 36128, 36128, 36128, 21034, -122, 36128, 23476, -1000,
	422, 194, 21034, -125, 6659, -1000, -1000, 23476, 839, -1000,
	1250, 1591, -1000, 17231, 419, 36128, 25176, 2102, -1000, 17231,
	1321, 1475, 596, 24156, -1000, 863, -1000, -1000, -32, -1000,
	404, 233, 1025, -1000, -37, 42593, 605, 1894, -1000, 1857,
	557, -1000, -1000, -39, 418, -1000, 599, 597, -1000, -44,
	-1000, 587, -1000, -1000, -1000, 1219, 1219, -1000, -1000, -1000,
	1930, 15821, 15821, 42856, -127, -1000, 39316, 39316, -1000, 39858,
	-1000, 42593, -1000, 41747, -1000, -1000, -1000, -1000, 1238, -1000,
	39735, -1000, -1000, -1000, -1000, 16527, 1623, 409, 43332, 39576,
	-1000, -1000, 15821, -1000, -1000, -1000, -1000, 639, 15821, 15821,
	1977, 639, -130, 615, -1000, -1000, -1000, 2161, -1000, -132,
	-1000, -1000, -1000, -1000, 36128, -1000, 36128, -1000, 6659, 36128,
	1641, 1366, -1000, -1000, 1473, 408, 16527, 36128, -1000, 1133,
	17231, 1930, 194, 6659, 1930, 39453, 7013, -133, -135, 1362,
	-1000, 1361, 15821, -1000, 43332, 1298, 1298, -1000, 768, 765,
	-1000, 751, -1000, -1000, 15821, -1000, 749, -1000, -54, 21034,
	-1000, -1000, 2067, 1227, -140, 17231, -141, 236, 233, -148,
	36128, -1000, 596, 24156, -1000, 1833, 1842, 36128, 1964, -1000,
	-1000, 407, 406, 405, -1000, 27568, 27568, 23476, 23476, 1297,
	-1000, 36128, -1000, -1000, -1000, 39316, 39316, -1000, -1000, 235,
	1292, 2065, -1000, 41179, 16527, 43332, -149, -1000, 39294, -1000,
	36128, 42593, -91, -1000, -1000, 27228, 508, -1000, -1000, 1293,
	-1000, -1000, 36128, 1375, -1000, -1000, 15821, 38973, 403, 1576,
	398, -1000, -1000, -1000, -1000, -1000, -1000, 2046, -14, -1000,
	1117, -1000, -1000, 42593, 2042, -1000, -1000, 36128, 36128, 397,
	-48, 394, -1000, 1264, 36128, 1133, -150, -1000, 1576, -1000,
	1133, 380, 24156, -1000, 1459, 841, -156, 36128, -1000, 23476,
	23476, -1000, -157, -1000, -1000, -1000, -158, -1000, 1013, 15821,
	41179, -159, -1000, -1000, -78, -1000, 2095, -1000, -1000, -1000,
	-1000, 1754, 39171, 1417, 36128, -1000, 36128, 1930, 231, 36128,
	677, 6659, -1000, -1000, 15821, 229, 15821, 374, 371, 370,
	1576, 1133, -1000, 1576, 17231, -1000, 1475, 932, -1000, 657,
	-1000, -165, -167, -1000, -1000, 226, 16174, 16174, -91, -1000,
	36128, 368, 1737, -1000, 1303, 1169, 216, -168, -1000, -1000,
	367, -1000, 15821, -1000, -173, 2196, -180, 36128, 36128, 36128,
	-1000, 1576, -1000, -181, -1000, 19992, -1000, 647, 647, -1000,
	-1000, -1000, 16879, 1280, 991, 41147, -1000, -1000, -1000, 36128,
	-1000, 1319, 1305, 967, -1000, -1000, -1000, -1000, -1000, 1417,
	42593, -1000, -1000, -182, -183, -189, -1000, 1133, -179, -1000,
	-1000, 2128, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1864,
	-1000, 710, 1327, 1327, 1303, 365, 362, 1282, 1576, -1000,
	15468, -1000, 2137, -1000, -1000, 1420, -1000, -1000, 1219, 1219,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 215, 668,
	214, 667, -1000, 360, -1000, 1446, -50, 15115, 788, 363,
	-92, -1000, -190, -1000, 42593, -1000, 358, -1000, 15115, 1219,
	-1000, 15115, 15115, -196, -1000, -1000, -199, -1000, -58, 1219,
	-107, -1000, -1000, 1219, -1000,
}
var sqlPgo = [...]int{

	0, 2656, 2655, 1742, 2654, 2145, 2651, 2650, 2649, 2648,
	2141, 2647, 2645, 2643, 2639, 2638, 2635, 2633, 2631, 2630,
	2627, 2626, 2625, 2622, 2620, 2619, 2618, 2617, 2062, 2616,
	2048, 2615, 2614, 2613, 2612, 2609, 28, 2608, 2604, 2603,
	2008, 2602, 2601, 2600, 2599, 2006, 2598, 2002, 2592, 2591,
	2000, 2589, 2588, 2587, 1993, 2586, 1986, 2585, 84, 117,
	1984, 2584, 2582, 1979, 1959, 1953, 2581, 1932, 2575, 2567,
	1916, 1906, 2565, 112, 2563, 2562, 2560, 1895, 1889, 2556,
	2555, 2549, 157, 2545, 1847, 2544, 2543, 2542, 2537, 2534,
	2533, 2532, 2530, 2529, 2528, 2527, 2525, 2524, 2523, 2521,
	2518, 2514, 2513, 2512, 162, 2511, 2509, 1798, 1762, 2506,
	2504, 36, 26, 17, 53, 101, 185, 3331, 144, 2503,
	2502, 2500, 2489, 2485, 2481, 22, 102, 98, 2478, 110,
	2467, 2461, 38, 29, 25, 20, 72, 96, 2459, 2458,
	2487, 31, 2457, 2456, 135, 2454, 86, 35, 2670, 158,
	155, 52, 125, 2453, 2452, 2451, 50, 121, 5, 9,
	8, 1, 42, 4, 2, 2450, 3, 6, 2447, 2446,
	18, 78, 27, 2445, 76, 166, 2441, 2439, 131, 2429,
	49, 99, 1641, 116, 127, 1585, 85, 2428, 55, 21,
	64, 2426, 2424, 161, 34, 87, 148, 114, 2423, 46,
	163, 129, 77, 134, 143, 2422, 2421, 2420, 108, 2418,
	120, 94, 2417, 2416, 79, 2414, 95, 138, 2413, 146,
	111, 2411, 2410, 93, 2405, 130, 2404, 2403, 160, 145,
	115, 16, 41, 73, 14, 1630, 1624, 133, 88, 47,
	40, 2401, 1146, 1267, 1424, 91, 2399, 89, 43, 32,
	62, 81, 150, 56, 2397, 2396, 136, 2395, 2393, 2392,
	2390, 2389, 100, 2386, 2383, 2382, 75, 58, 57, 90,
	37, 167, 128, 107, 156, 103, 2380, 80, 124, 2378,
	65, 2375, 2372, 1205, 119, 2371, 2369, 2368, 1101, 1018,
	873, 140, 2366, 2363, 154, 70, 2361, 2359, 92, 2358,
	118, 105, 97, 139, 153, 61, 2357, 123, 33, 151,
	71, 68, 0, 733, 653, 2355, 126, 67, 2351, 2347,
	2346, 2345, 30, 10, 7, 13, 15, 12, 122, 109,
	2344, 2342, 132, 82, 69, 2341, 159, 2328, 2322, 2317,
	45, 2315, 23, 2313, 19, 2311, 2308, 24, 11, 2306,
	2305, 147, 2298, 106, 2292, 2102, 2288, 152, 2285, 2242,
	2079, 2239, 51, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 127, 127, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	124, 124, 129, 129, 129, 131, 131, 128, 128, 123,
	123, 28, 28, 71, 71, 114, 64, 64, 64, 310,
	310, 311, 311, 110, 110, 111, 111, 111, 111, 112,
	112, 113, 113, 113, 38, 38, 38, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 47, 47, 48, 48, 48, 48, 48, 48, 49,
	49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
	50, 55, 55, 55, 53, 53, 53, 52, 52, 52,
	51, 51, 51, 54, 54, 54, 184, 184, 183, 183,
	187, 187, 56, 56, 56, 56, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 59, 59,
	59, 59, 59, 59, 59, 279, 279, 278, 57, 57,
	254, 254, 60, 60, 209, 209, 61, 61, 61, 61,
	61, 62, 62, 72, 72, 351, 351, 351, 355, 355,
	356, 356, 357, 357, 357, 357, 357, 357, 357, 353,
	353, 67, 67, 67, 67, 68, 68, 68, 69, 69,
	109, 109, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 33, 34, 34, 35, 35, 36, 36, 36, 78,
	78, 78, 80, 77, 77, 77, 79, 79, 79, 79,
	81, 81, 82, 82, 82, 82, 82, 82, 83, 83,
	304, 302, 302, 303, 303, 154, 154, 154, 154, 154,
	155, 155, 155, 309, 309, 309, 309, 309, 309, 308,
	308, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 96, 96,
	96, 104, 104, 104, 104, 104, 104, 104, 104, 85,
	85, 90, 90, 90, 90, 90, 86, 86, 91, 91,
	92, 92, 93, 93, 93, 93, 93, 93, 87, 87,
	87, 87, 95, 95, 95, 95, 94, 94, 100, 100,
	100, 100, 100, 100, 97, 97, 97, 97, 98, 98,
	98, 101, 101, 101, 101, 88, 88, 89, 89, 102,
	102, 103, 103, 103, 103, 103, 103, 99, 99, 99,
	352, 352, 354, 354, 65, 65, 43, 43, 44, 44,
	156, 156, 157, 157, 233, 233, 233, 233, 158, 158,
	130, 130, 130, 161, 162, 162, 159, 159, 160, 160,
	163, 163, 163, 165, 165, 166, 166, 167, 167, 164,
	164, 164, 232, 320, 320, 321, 321, 321, 321, 321,
	321, 322, 322, 322, 322, 322, 322, 322, 318, 318,
	319, 316, 316, 317, 317, 317, 317, 358, 358, 231,
	231, 170, 170, 323, 323, 323, 323, 324, 324, 324,
	324, 324, 327, 326, 325, 325, 325, 325, 325, 265,
	265, 265, 106, 106, 45, 45, 45, 136, 136, 46,
	46, 42, 42, 42, 213, 213, 174, 174, 270, 270,
	270, 147, 147, 125, 125, 125, 19, 21, 21, 15,
	15, 15, 15, 15, 15, 27, 27, 24, 24, 214,
	214, 215, 215, 66, 66, 70, 70, 75, 75, 105,
	105, 105, 105, 105, 105, 29, 29, 29, 29, 37,
	37, 37, 37, 74, 74, 360, 360, 143, 143, 143,
	143, 144, 144, 228, 228, 229, 229, 361, 361, 230,
	230, 230, 138, 137, 139, 139, 41, 41, 41, 132,
	132, 133, 133, 134, 134, 135, 135, 362, 362, 63,
	63, 63, 108, 108, 150, 150, 225, 225, 225, 227,
	227, 226, 226, 226, 199, 199, 199, 107, 107, 179,
	179, 189, 189, 190, 190, 276, 191, 73, 73, 117,
	117, 115, 115, 115, 115, 115, 115, 115, 115, 116,
	116, 116, 118, 118, 118, 118, 118, 118, 118, 121,
	121, 121, 122, 122, 122, 120, 120, 333, 333, 333,
	336, 336, 332, 334, 334, 335, 335, 359, 359, 200,
	200, 200, 169, 168, 168, 172, 172, 171, 173, 173,
	269, 269, 269, 197, 197, 196, 196, 196, 196, 218,
	218, 216, 216, 217, 217, 221, 221, 222, 222, 222,
	223, 223, 224, 224, 195, 195, 250, 250, 220, 220,
	219, 119, 119, 119, 178, 178, 178, 180, 180, 240,
	240, 240, 241, 241, 239, 239, 239, 239, 271, 271,
	271, 271, 271, 271, 271, 271, 349, 349, 349, 350,
	350, 268, 268, 272, 272, 272, 272, 272, 272, 266,
	266, 266, 266, 267, 267, 277, 277, 203, 203, 203,
	203, 201, 201, 202, 202, 273, 273, 273, 273, 198,
	198, 274, 274, 274, 234, 234, 280, 280, 280, 298,
	298, 177, 177, 177, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 282, 282, 282, 282, 284,
	284, 284, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	297, 297, 297, 297, 297, 285, 285, 292, 292, 293,
	293, 294, 295, 286, 286, 287, 287, 288, 289, 296,
	296, 296, 296, 300, 300, 290, 290, 290, 290, 290,
	291, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 211, 211, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	244, 244, 244, 244, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 328, 328, 328, 328, 328,
	328, 328, 328, 330, 330, 331, 331, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 337, 337, 338,
	338, 340, 340, 341, 341, 342, 343, 343, 343, 344,
	345, 345, 339, 339, 346, 346, 346, 347, 347, 348,
	348, 348, 348, 348, 256, 256, 257, 258, 264, 264,
	264, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 145, 145, 145,
	145, 145, 186, 186, 185, 185, 253, 253, 251, 251,
	255, 255, 204, 204, 299, 299, 299, 299, 299, 299,
	299, 205, 205, 205, 212, 206, 206, 207, 207, 207,
	207, 207, 247, 248, 208, 208, 208, 249, 249, 259,
	263, 263, 262, 261, 261, 260, 260, 237, 237, 238,
	238, 236, 235, 194, 194, 193, 193, 192, 192, 363,
	363, 188, 188, 275, 275, 275, 275, 181, 181, 152,
	152, 182, 182, 148, 148, 151, 151, 149, 149, 149,
	149, 175, 175, 176, 176, 146, 146, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 301, 301,
	301, 252, 140, 140, 140, 141, 141, 142, 142, 306,
	306, 306, 307, 307, 307, 307, 305, 305, 305, 305,
	305, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 1, 4, 7, 1, 3, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 2, 3, 1, 1, 2, 1,
	1, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 1, 2, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 4, 3,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 2,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 2,
	3, 7, 7, 8, 8, 4, 5, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 8, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	5, 6, 4, 3, 5, 1, 3, 1, 1, 9,
	10, 8, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 7, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 1, 0, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 3, 2,
	0, 1, 3, 1, 1, 3, 5, 1, 1, 3,
	3, 1, 2, 4, 4, 2, 3, 5, 5, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 1, 0, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 1, 0,
	2, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 1, 3,
	3, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -28, -30, -33, -38,
	-39, -61, -47, -48, -49, -60, -56, -62, -63, -64,
	-65, -57, -71, -70, -72, -75, -73, -66, -67, -76,
	-84, -105, -106, -107, -108, -5, -10, 24, 35, -31,
	-32, 48, -34, 72, -45, -40, 74, 95, -335, 99,
	-50, -54, 103, 110, 113, 135, 144, 230, 237, 258,
	260, 262, 269, -115, -117, 256, -68, -69, -77, -78,
	-79, -80, -109, 281, -85, -86, -87, -88, -89, -90,
	-91, -92, -93, -94, -95, -96, -97, -98, -99, -100,
	-101, -102, -103, 284, -29, -37, -74, 325, -6, -7,
	-8, -9, -11, -21, 112, -41, -42, -43, -44, -46,
	-333, -51, -52, -53, -55, -118, -116, 378, 257, 334,
	36, 294, 62, 106, 264, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -27, -19, -20, -12,
	350, 357, -121, -119, -120, -122, 274, 342, 304, 382,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	2, 304, 345, 335, 88, 152, 242, -351, 2, -182,
	304, 88, -149, -140, 371, 4, -312, -314, 20, 21,
	24, 34, 35, 36, 41, 45, 48, 49, 56, 61,
	62, 63, 68, 65, 66, 67, 70, 72, 73, 76,
	77, 78, 86, 87, 89, 91, 95, 97, 99, 102,
	103, 105, 110, 112, 111, 113, 123, 124, 129, 131,
	136, 142, 143, 144, 145, 153, 156, 158, 151, 168,
	169, 170, 174, 175, 176, 179, 178, 183, 184, 187,
	188, 191, 193, 195, 196, 199, 197, 201, 202, 204,
	203, 209, 211, 212, 214, 217, 220, 223, 226, 227,
	228, 229, 230, 231, 233, 235, 237, 239, 240, 241,
	242, 243, 245, 246, 248, 249, 250, 251, 252, 256,
	254, 255, 257, 258, 259, 260, 262, 264, 265, 267,
	282, 283, 295, 269, 270, 271, 272, 273, 277, 275,
	278, 279, 281, 284, 286, 289, 293, 294, 296, 299,
	300, 297, 292, 303, 305, 306, 307, 308, 309, 310,
	311, 312, 317, 320, 321, 325, 326, 327, 328, 331,
	332, 333, 334, 336, 339, 340, 341, 346, 351, 352,
	353, 354, 355, 29, 37, 38, 39, 40, 42, 43,
	46, 47, 52, 53, 54, 57, 90, 92, 93, 109,
	114, 115, 125, 126, 127, 137, 139, 146, 147, 150,
	157, 159, 160, 161, 162, 163, 165, 172, 173, 181,
	198, 208, 210, 221, 225, 234, 236, 244, 266, 276,
	287, 288, 298, 301, 314, 315, 316, 322, 323, 338,
	342, 343, 381, 381, 2, 169, 241, -148, -140, 88,
	381, 2, 304, 335, 345, -213, 88, 330, -140, 237,
	22, 2, 97, 156, 333, 332, 22, 233, 275, 306,
	308, 2, 381, 2, 345, 304, 152, 88, 335, -140,
	2, -59, 2, 378, -58, -5, -40, -50, -60, -56,
	-10, -28, -30, -45, -47, -54, -64, -63, -65, -67,
	-71, -70, -73, -77, -78, -84, -107, -108, 74, 24,
	103, 281, 112, -355, 2, 22, -356, -357, 74, 103,
	135, 274, 156, 97, 332, 304, 2, 169, 2, -140,
	2, -351, 2, 169, 2, -355, 2, -140, 2, -144,
	2, 269, -140, 381, 381, 381, 381, 381, 188, 56,
	266, 278, -82, 321, -81, 314, 317, -304, -83, 2,
	-183, 199, -140, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	2, -104, 278, 35, 56, 22, 61, 89, 136, 152,
	153, 175, 69, 70, 240, 188, 170, 320, 176, 279,
	305, 321, 74, 336, 309, 111, 4, 88, 199, 280,
	314, 317, 381, 381, 381, -359, 2, 304, 381, 381,
	381, 381, 271, 284, 381, 381, 381, 381, 381, -116,
	-118, -117, 381, 381, 381, 381, -171, -172, 329, 164,
	108, 219, -115, -117, 2, -333, -104, 278, 2, 56,
	22, -302, 2, -242, 215, -244, 369, 370, 364, 205,
	356, -256, 94, -246, -259, 109, 266, 378, -148, -245,
	384, 9, -330, -117, 30, -257, -258, 50, -140, 7,
	8, 5, 6, -146, -282, -252, -291, 324, 116, 207,
	-328, -329, 4, -312, -306, -283, -293, -287, -290, 165,
	59, 80, 81, 84, 82, 85, 280, 335, 51, 29,
	114, 115, 225, 234, 301, 322, 323, 146, 208, 147,
	57, 137, 181, 102, 38, 40, 42, 43, 52, 53,
	90, 92, 93, 125, 126, 127, 157, 159, 160, 161,
	162, 163, 210, 244, 287, 298, 315, 316, 343, -313,
	-294, -295, -288, -289, 75, 117, 134, 155, 148, 167,
	171, 182, 185, 194, 200, 222, 224, 263, 285, -296,
	-360, 2, 321, 321, 2, -360, 2, -360, 2, -143,
	2, 321, 318, -336, 245, -332, -140, -336, 381, 381,
	383, 381, -168, -169, 2, 22, 100, 378, 2, -271,
	2, 376, -273, -148, -117, -272, 378, 216, -3, 2,
	-273, 146, -148, 2, -273, 146, -148, 2, -310, 146,
	-308, 9, -307, 5, 4, -312, -314, -313, 59, 2,
	-140, 2, -151, 146, -148, -305, 4, -312, -314, -313,
	-315, 22, 25, 26, 27, 28, 30, 31, 32, 33,
	44, 50, 51, 55, 58, 60, 69, 74, 79, 80,
	82, 81, 83, 84, 85, 94, 96, 98, 100, 101,
	104, 106, 108, 116, 118, 130, 132, 133, 135, 138,
	140, 149, 152, 154, 164, 166, 177, 180, 186, 189,
	190, 205, 206, 207, 213, 215, 216, 218, 219, 232,
	238, 247, 261, 274, 280, 290, 302, 304, 313, 318,
	319, 324, 329, 330, 335, 337, 344, 345, 347, 348,
	349, 350, 318, 383, -182, -175, -140, -236, -235, 380,
	-242, 2, -242, 2, 133, 378, -193, -194, -235, -236,
	2, -183, 146, -310, 146, 2, -183, 2, 152, -140,
	146, 2, -140, 22, 133, 2, 166, 2, 166, 2,
	-274, 2, -273, -184, 146, 2, -183, -184, 146, 2,
	-152, 146, 2, -151, -140, 146, 2, -311, 146, 2,
	-310, -209, 378, -279, 2, -278, -307, 342, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 278, 215, 383, -183, -242, -254, 378,
	133, -242, 215, -140, 2, 282, 2, 378, -82, 54,
	321, -229, 2, -230, -137, -138, -139, 168, 239, 243,
	355, -309, 5, 4, -252, -265, 94, 188, -291, 8,
	370, -301, 165, 7, 369, 318, 361, 133, -302, -187,
	380, -104, 2, -310, 2, 282, 2, 240, 279, 56,
	133, 2, 2, -352, 2, 215, 133, 2, 133, 2,
	133, 2, 133, 2, 133, 2, 2, 240, 279, 2,
	130, 2, 320, 2, 2, 133, 2, 168, 239, 295,
	2, 304, 345, 2, 133, 133, 355, 2, -198, -273,
	304, 355, 22, -171, -172, -219, -196, 130, -216, -217,
	186, 118, 213, -200, 22, 100, -200, -200, 45, 379,
	379, -104, 282, 2, 10, 11, 58, 34, 369, 370,
	371, 372, 128, 373, 374, 367, 368, 366, 359, 360,
	363, 291, 23, 71, 362, 361, 64, 192, 268, 119,
	120, 121, 122, 253, 13, 14, 15, 27, 218, 185,
	356, 148, 285, 364, 16, 17, 18, 167, 37, 149,
	-145, -153, -242, -242, -242, -242, -242, 224, -192, -237,
	376, -117, 378, 378, -117, -242, -185, 378, 7, -117,
	-251, 376, -260, -242, -193, 378, 5, 378, 5, -337,
	351, 130, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 236, -300, 346, -300, -300, -284, 378, -284, -285,
	378, -284, 352, 357, 378, -228, -229, -228, 318, -144,
	383, -336, -176, 378, 378, -188, -275, -242, 371, -188,
	-185, -242, 75, -203, 171, 200, 134, 182, 263, 155,
	7, -59, -239, 384, 378, 371, -268, 357, -117, -272,
	378, -271, -148, 378, -127, 254, -126, 21, 24, 103,
	340, 109, 292, 310, -162, 270, -161, 228, 254, 109,
	350, 109, 112, 254, 292, 310, -162, 270, 254, 109,
	384, 112, -310, -149, 383, -305, 371, 296, 379, -181,
	-148, -194, 378, -170, 205, -136, -334, 350, 205, -170,
	378, -141, 146, 2, -140, -334, 205, -274, -150, -148,
	-150, 281, -140, 31, -129, 383, 49, 259, 109, -129,
	109, -129, 383, 109, -129, 109, 383, 109, -185, 379,
	383, -351, -357, 74, 378, 31, -253, -280, -281, -283,
	-292, -286, -290, -291, 41, 47, 46, 173, 172, 311,
	198, 276, 288, 338, 150, 39, 214, 158, 4, 157,
	159, 160, 161, 162, 163, 287, 38, 244, 126, 127,
	125, 102, 93, 92, 210, 43, 42, -294, -295, -288,
	-289, 90, 315, 316, 40, 53, 52, 343, 298, -311,
	-351, -304, -185, 31, -229, 2, -361, 383, 184, -155,
	191, 204, 142, 216, 353, -309, 8, 7, 7, -303,
	-302, -303, 78, 380, -305, -183, 22, 283, 2, -304,
	-354, 130, -351, -304, -304, -304, -304, -304, 278, -59,
	130, -140, 184, -304, 2, -304, 2, 304, 152, 304,
	-129, 383, -148, 65, 66, 355, -219, -196, -197, -196,
	-220, -219, 332, -217, -216, -221, -242, 22, -224, 124,
	201, -242, -244, -116, -116, -116, -173, -269, -242, 238,
	152, -304, -298, -280, -297, 249, 250, 248, 252, 251,
	-280, -305, 314, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, 185, 148, 285, 37, 149,
	-242, 318, -242, -242, -242, -242, 197, 205, 207, 324,
	116, 331, 100, 211, -363, 302, 33, -249, -117, 378,
	-264, 28, 290, 22, -256, 266, 378, -237, -242, -238,
	-186, -185, 379, 383, -186, -255, -251, -263, -262, 347,
	379, -185, 344, 22, 100, 371, 2, 7, -210, 354,
	196, 91, 143, 195, -211, 273, -338, 123, 138, 378,
	379, 2, 379, 2, 379, 2, 379, 2, -242, -242,
	-204, 2, -299, -185, 4, 354, 196, 91, 143, 195,
	273, -204, 2, -205, 2, -242, -185, -206, -243, -244,
	369, 370, 364, 378, 266, -207, 2, -242, -186, -242,
	44, 180, 319, -208, -242, 133, -185, -242, -242, -242,
	-185, -185, 2, -185, 2, 378, 7, 7, 314, 314,
	7, -144, -332, 31, -175, -185, -178, 383, 133, 31,
	4, -178, 379, 383, 171, 171, -271, -203, 171, -201,
	222, -201, -201, -349, 378, 377, -268, -305, 376, 385,
	-186, 2, -267, -266, 31, -140, 220, 379, -148, 383,
	318, -214, 69, 60, -232, 146, 60, -316, -140, 69,
	-317, 55, 330, 238, 132, -214, 69, -214, 69, 69,
	-273, 34, -73, 112, 133, -305, 318, -273, 229, -310,
	67, 318, 34, -73, 112, 133, 318, -151, -305, 67,
	-277, 358, -140, 133, 379, 383, -156, -175, -157, -140,
	-233, -232, -318, -319, -316, 152, 330, 117, 31, 109,
	229, 109, 31, 215, 205, -132, 307, 109, -234, 348,
	-225, -73, 378, 94, 31, -225, -189, -190, -276, -191,
	-148, 378, -140, -183, -184, -184, -151, -152, -140, -310,
	-311, 379, -59, -278, 318, 337, -157, -58, 24, 74,
	103, 379, 383, -177, 30, 376, -210, 378, -277, 133,
	361, 318, 379, 321, -230, -154, 243, 289, 255, 277,
	383, -305, -353, -140, 278, -59, -148, -151, -148, -273,
	350, 130, 66, -197, -220, -222, -301, 378, 370, -223,
	266, 267, 383, -125, 32, 98, 174, -148, 355, -242,
	-242, 318, -363, 302, -249, -242, 197, 207, 324, 116,
	331, 100, 211, 133, 378, -243, -243, -185, -242, 378,
	-185, 377, 387, 379, -242, 377, 377, 383, -261, -262,
	104, -242, -172, 383, -171, -242, -185, -185, 379, 379,
	318, 318, 318, 318, 378, -343, 223, 378, 378, -242,
	31, 383, 379, 133, 379, 379, -212, 232, 379, 10,
	11, 369, 370, 371, 372, 128, 373, 374, 367, 368,
	366, 359, 360, 361, 64, 192, 268, 13, 14, 15,
	167, 149, -243, -243, -243, -185, 378, 379, -247, -248,
	133, 130, 31, -208, -208, -208, 379, 133, -185, 383,
	383, 383, 379, 379, 379, 7, 379, 383, 379, 355,
	355, 379, 378, 379, 379, -234, -275, -180, 2, -271,
	-305, -234, -242, -271, -271, -202, 337, 215, 171, -271,
	-266, 379, -350, 7, -268, -267, 7, -241, -240, 131,
	203, 379, -140, 378, -268, 379, -126, -148, -140, -140,
	205, -232, 146, -131, 205, -280, -140, 378, 378, 174,
	174, -140, -140, 146, -140, 146, -140, -140, -127, 254,
	-73, 67, 378, -148, 254, -310, 350, 355, -140, -73,
	67, 378, -305, 254, 355, -110, 145, 211, 296, 133,
	-148, 379, 379, 383, -141, 152, -141, -73, -183, -310,
	-310, -73, -148, 109, -133, 105, -362, 361, -140, -218,
	-216, -242, -199, -227, 261, 215, -181, 342, -140, -199,
	-179, 383, 133, 361, -181, -129, -129, -129, -129, -353,
	-310, 379, -280, 376, 377, 7, 7, -113, 350, -353,
	-302, -302, -137, 328, 63, 243, -302, 383, 217, 242,
	88, 304, 152, -223, -242, -269, -148, 384, -242, -242,
	-243, -243, 133, 378, -242, -253, 27, 27, 379, -186,
	383, -238, -242, 379, -251, 106, -242, 313, 379, 344,
	-172, -172, -172, 5, 196, 143, 195, -211, 195, -211,
	-211, 7, -344, -140, 378, 348, -171, 379, -298, -280,
	-242, -247, -242, -298, -280, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, 100, 205, 211, -243, 383, -186,
	-248, -247, -242, -242, -280, 379, 379, 379, -185, -242,
	-242, -242, 379, 7, -58, -195, 138, -277, 383, -195,
	-202, 378, -242, -271, 377, 379, 383, -267, 377, 383,
	386, 361, -268, 378, -175, -266, 318, 318, 109, 205,
	339, -320, -317, -242, -174, -270, -140, -331, 378, -328,
	-329, -146, 378, 378, -124, 103, 281, -215, 109, -129,
	109, -129, 318, -214, 69, 355, -185, 318, 229, -245,
	-146, -140, 355, -185, 318, -245, -113, 133, 303, 296,
	-158, 151, -233, 378, -141, 378, 378, -170, -136, 378,
	-140, -134, 179, -362, -308, -334, -199, -199, -188, 206,
	68, 379, -234, -190, -180, -242, 379, -114, 76, -114,
	7, 377, 379, -112, 217, -111, -140, 5, -140, -35,
	-36, 152, 231, -305, -140, -148, -151, 216, 379, -125,
	-305, 27, 27, -242, -253, 379, -242, -242, 379, -242,
	377, -242, 5, -242, 379, 379, 379, 379, -345, -140,
	-242, 379, 379, 379, -248, 133, 100, 211, 378, -242,
	379, 379, 383, 379, 379, 379, 379, -250, 140, 45,
	-271, -250, -175, -239, 7, -240, -305, 376, -267, -175,
	379, -140, -140, -232, 109, -321, 69, -322, 58, 117,
	74, 205, 207, 330, 238, 55, 94, 247, 379, 379,
	383, -147, -193, 58, -147, -242, 378, -174, -175, 205,
	94, 205, 94, 87, 326, -140, -140, -148, -140, -140,
	-245, 379, -148, -310, 378, -245, 379, -305, -311, 314,
	-159, -160, 228, 149, -174, 378, -175, -156, 31, -174,
	215, -135, 178, -362, -308, -132, -226, 378, 215, -73,
	-199, 361, 87, 87, 377, 383, 378, 361, 361, 383,
	22, 378, -162, -162, -125, -242, -242, 379, 379, -172,
	-339, 228, 379, -243, 133, 378, -253, 379, -242, -340,
	349, -242, -185, -340, 379, -268, 7, 379, -232, -140,
	-305, -140, 117, 146, 207, 174, 378, -243, -148, -231,
	-358, 73, 300, -270, -125, -305, -125, 379, -185, 379,
	379, 207, 207, -242, -280, -129, -129, 318, 318, 318,
	-185, 318, -245, 45, 226, 379, -174, 379, 379, -73,
	379, -148, -362, -308, -133, 101, -175, 69, -249, 378,
	378, -111, -112, -310, -310, -36, -175, 379, -172, 45,
	-243, -253, 379, 379, -341, -342, -140, -267, 377, -322,
	-141, 205, -242, -142, 378, -158, 378, -147, -172, 247,
	-128, 58, -140, -140, 378, -172, 378, 187, 242, -148,
	-231, 379, -158, -231, 378, -308, -134, 332, 206, 379,
	-140, -311, -311, 379, 379, -346, 242, 267, -185, 379,
	383, 31, 109, 379, -323, 193, -140, -175, -125, 379,
	-148, -123, 337, -305, -185, 379, -185, 378, 378, 378,
	-158, -231, -158, -174, -135, 281, -234, 379, 379, 379,
	-347, -348, 37, 327, 78, -242, -347, -342, -344, 117,
	-324, -327, -326, 215, 134, 227, 286, 379, 379, -170,
	-242, 379, 379, -175, -175, -175, -158, 379, -189, -113,
	-113, -348, 235, 129, 266, 235, 129, -140, -326, 215,
	-327, 215, 332, 97, -323, 379, 379, 379, -231, -234,
	27, -325, 202, 259, 49, 281, -325, -324, 378, 378,
	-130, 49, 259, -158, -348, 20, 207, 94, -163, -161,
	-164, -161, 379, 342, 379, 342, -165, 378, 183, 383,
	-160, -159, -166, -167, -242, 194, 312, -163, 378, 383,
	379, 383, 378, -166, -163, -167, -166, 379, 379, 383,
	-160, -159, -164, 383, -164,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 321, 0, 166, 168, -2, 0, 0, 0,
	189, 190, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 697, -2, 0, 301, 303, 312, 314,
	316, 318, 319, 0, 371, 373, 375, 377, 379, 381,
	383, 385, 387, 389, 391, 393, 395, 397, 399, 400,
	402, 404, 406, 0, 619, 621, 623, -2, 59, 61,
	63, 65, 67, 77, 0, 170, 172, 174, 176, 179,
	735, 193, 195, 197, 199, -2, 746, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 87, 75, 79, 80, 82,
	0, 0, 712, 714, 716, 718, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 43, 49, 51, 53, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 132, 285,
	0, 1317, 1241, 1247, 1248, 1272, 1273, 1274, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 158, 160, 161, 0, 0, 0, 1243, 1317,
	167, 169, 0, 0, 0, 0, 0, 584, 276, 1380,
	278, 280, 0, 0, 0, 0, 183, 184, 185, 186,
	187, 188, 191, 192, 0, 0, 0, 0, 0, 275,
	273, 222, 223, 0, 258, 259, 260, 261, 262, 264,
	226, 228, 230, 231, 233, 235, 237, 239, 241, 243,
	244, 246, 248, 249, 251, 253, 254, 256, 585, 0,
	0, 0, 0, 0, 282, 288, 289, 290, 292, 293,
	294, 295, 296, 297, 298, 0, 138, 0, 485, 271,
	269, 0, 134, 0, 616, 0, 284, 617, 618, 613,
	614, 1407, 642, 302, 304, 313, 315, 317, -2, -2,
	1502, -2, 334, -2, 342, 1508, 1436, 0, 346, 347,
	350, -2, 218, 372, 374, 376, 378, 380, 382, 384,
	386, 388, 390, 392, 394, 396, 398, 401, 403, 405,
	407, 408, 0, 0, 0, 412, 0, -2, -2, 0,
	0, 0, 0, 0, -2, 0, -2, 0, 0, -2,
	-2, 0, 0, -2, 0, 0, 411, 413, 414, 415,
	0, 417, 620, 622, 624, 0, 573, 737, 60, 62,
	64, 66, 0, 0, 171, 173, 175, 177, 180, -2,
	710, 711, 194, 196, 198, 200, -2, 0, 741, 741,
	741, 0, 0, 711, 709, 0, 305, 0, 307, 0,
	412, 310, 311, 351, 352, 947, 0, 0, 0, 0,
	0, 0, 1020, 1050, 1052, 1473, 1502, 0, 1054, 1055,
	0, 1057, 1059, 1060, 0, 1063, 1064, 1216, 1243, 1257,
	1258, 1259, 1260, 0, 0, 1263, 0, 1265, 1266, 1267,
	1118, 1074, -2, -2, 1255, 875, 876, 877, 878, -2,
	1516, 1078, 1081, 1084, 1087, 1088, 1091, 1092, 0, 1457,
	1474, 1475, 1498, 1499, 1507, 1511, 1512, 1481, 1495, 1482,
	1469, 1479, 1493, 1323, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1281,
	909, 910, 915, 916, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 918,
	644, 626, 635, 644, 628, 629, 630, 631, 632, 633,
	634, 637, 0, 727, 1386, 730, 1254, 728, 713, 715,
	0, 717, 0, 0, 721, 743, 742, 0, 782, 725,
	726, 736, 797, 835, 812, 803, 0, 0, 2, 74,
	0, 1481, -2, 76, 0, 1481, 835, 78, 0, 1481,
	139, 140, 369, 370, 1282, 1283, 1284, 1285, 1516, 81,
	0, 88, 505, 1481, 1246, 0, 1286, 1287, 1288, 1289,
	1290, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 0, 0, 286, 287, 1251, 1249, 1250, 0,
	162, 163, 164, 165, 0, 0, 1244, 1225, 1223, 1224,
	178, 552, 1481, -2, 1481, 576, 552, 580, -2, 734,
	1481, 658, 277, 279, 0, 182, 0, 671, 0, 673,
	0, 688, 841, 124, 1481, 203, 216, 124, 1481, 206,
	124, 1481, 209, 1239, 124, 1481, 212, 213, 1481, 215,
	141, 272, 0, 0, -2, 265, 267, -2, 263, 227,
	229, 232, 234, 236, 238, 240, 242, 245, 247, 250,
	252, 255, 257, -2, 0, 0, 0, 484, 0, 0,
	0, 615, 0, 641, 320, 0, 331, 0, 333, 1468,
	-2, -2, 337, 645, 649, 650, 651, 0, 0, 0,
	0, 344, 363, 364, 365, 366, 367, 368, 0, 569,
	0, 571, 930, 1268, 0, 0, 0, 0, 348, 219,
	0, 409, 410, 419, 420, 0, 423, 444, 456, 0,
	0, 427, 429, 483, 431, 0, 0, 433, 0, 435,
	0, 437, 0, 439, 0, 441, 443, 445, 457, 447,
	736, 449, 0, 451, 455, 0, 460, 0, 462, 463,
	464, 0, 0, 470, 0, 0, 416, 418, 124, 839,
	0, 0, 0, -2, 0, 754, 779, 0, 757, 758,
	0, 0, 0, 0, 739, 740, 0, 0, 0, 699,
	700, 306, 0, 309, 0, 0, 0, 0, 1151, 1152,
	1153, 1154, 1155, 1156, 1159, 1160, 1157, 1158, 1161, 1162,
	0, 0, 0, 0, 0, 1163, 0, 0, 0, 0,
	0, 0, 0, 0, 1164, 1165, 1166, 0, 0, 1168,
	0, 1170, 0, 0, 0, 0, 0, 0, 1230, 0,
	0, 1167, 952, 953, 954, 986, 987, 0, 1051, 1227,
	1220, 1053, 0, 1173, -2, 1174, 0, 0, 1056, 1061,
	1062, 1173, 0, 1215, -2, 0, 1262, 0, 944, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1196, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 894, 912, 923, 920, 919, 896, 0, 895, 893,
	0, 897, 0, 0, 0, 625, -2, 627, 0, 639,
	0, 729, 0, 0, 0, 786, 1231, 1235, 1236, 786,
	0, 1174, 0, 0, 0, 0, 832, 832, 832, 830,
	806, 0, 812, 0, -2, 836, 824, 0, -2, 803,
	0, 0, 837, 0, 89, 610, 103, 0, 610, 610,
	0, 0, 0, 0, 0, 99, 504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 826, 1242, 0, 1221, 1222, 154, 0, 0,
	1237, 1226, 491, 0, 0, 574, 0, 733, 0, 0,
	0, 0, 1481, 583, 1275, 660, 0, 845, 0, 674,
	0, 0, 842, 0, 201, 0, 122, 123, 0, 204,
	0, 207, 0, 0, 210, 0, 0, 0, 0, 736,
	0, 0, 291, 0, 0, 736, 0, 1176, 853, 854,
	855, 856, 857, 944, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	906, 0, 881, 881, 881, 898, 899, 907, 908, 913,
	914, 925, 926, 928, 924, 924, 924, 921, 922, 826,
	0, 0, 0, 0, -2, 339, 0, 647, 0, 652,
	360, 361, 362, 654, 655, 343, 570, 1270, 1269, 340,
	353, 341, 345, 0, 220, 421, 422, 424, 425, 426,
	430, 0, 480, 432, 434, 436, 438, 440, 448, 452,
	736, 458, 461, 465, 466, 467, 468, 0, 0, 0,
	572, 0, 322, 0, 475, 0, 754, 779, 703, 753,
	704, 778, 780, 755, 756, 761, 765, 766, 769, 772,
	773, 763, 947, 722, 723, 724, 747, 748, 595, 0,
	0, 308, 948, 849, 850, 900, 901, 902, 903, 904,
	949, 950, 0, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, -2, -2, -2, -2, -2, -2, -2,
	-2, 973, 974, 975, 976, 977, 978, 979, 980, -2,
	-2, -2, 984, 985, -2, 1169, 1171, 0, 1230, 0,
	-2, 0, -2, -2, -2, -2, 998, 0, 1000, 1003,
	1005, 1007, 0, 0, 0, 0, 1229, 1017, 1207, 0,
	0, 1148, 1149, 1150, 1002, 0, 0, 1228, 1219, 0,
	0, 1172, 1058, 0, 0, 0, 1180, 1214, 1210, 0,
	1065, 746, 0, 0, 0, 0, 1072, 0, 1271, 931,
	932, 933, 934, 935, 936, 945, 1128, 0, 0, 0,
	1079, 1080, 1082, 1083, 1085, 1086, 1089, 1090, 0, 0,
	0, 1096, 0, 1183, -2, -2, -2, -2, -2, -2,
	-2, 0, 1098, 0, 1100, 1174, 1193, 0, 0, 1021,
	0, 0, 0, 0, 1502, 0, 1103, 1174, 1201, 0,
	0, 0, 0, 0, 1174, 0, 1206, 0, 0, 0,
	0, 0, 1114, 0, 1116, 0, 0, 0, 0, 0,
	0, 638, 731, 0, 0, 0, 845, 0, 0, 0,
	1234, 845, 781, 0, 0, 0, 0, 0, 0, 827,
	831, 828, 829, 0, 0, 812, 824, 794, 0, 0,
	0, 801, 802, 823, 0, 822, 811, -2, 0, 0,
	0, 0, 0, 609, 105, 1481, 0, 126, 0, 0,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 1245, 0,
	144, 0, 1252, 0, 0, 0, 0, 0, 490, 1251,
	492, 494, 495, 496, 497, 1276, 0, 1276, 0, 0,
	0, 0, 0, 0, 0, 662, 668, 0, 760, 0,
	686, 676, 0, 0, 0, 686, 690, 691, 693, 694,
	0, 0, 843, 217, 124, 124, 1240, 124, 124, 142,
	214, 274, 224, 266, 0, 0, 0, 268, 0, 0,
	0, 270, 0, 846, 848, 0, 858, 0, 153, 0,
	0, 0, 332, 0, 646, 653, 0, 357, 0, 359,
	0, 221, 482, 299, 450, 453, 477, 478, 479, 840,
	0, 0, 476, 707, 708, 0, 767, 0, 0, 764,
	770, 771, 0, 750, 593, 594, 0, 0, 0, -2,
	-2, 0, 0, 0, 1018, -2, 999, 1001, 1004, 1006,
	1008, 0, 0, 0, 0, 0, 0, 0, 1019, 1173,
	0, 1217, 1220, -2, 1175, 1178, 1179, 0, 0, 1211,
	0, 0, 0, 0, 745, 746, 746, 746, 1071, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 1095, 0, 1097, 1099, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1024, 1025, 1026, 0, 1173, 1102, 1199, 1200,
	0, 0, 0, 0, 0, 0, 1108, 0, 1205, 0,
	0, 0, 1112, 1113, 1115, 0, 879, 0, 905, 927,
	929, 917, 736, 1253, 783, 775, 1232, 826, 785, 787,
	1233, 775, 1175, 814, 0, 816, 0, 0, 0, 818,
	0, 807, 0, 809, 824, 799, 0, 0, 792, 0,
	791, 812, 820, 0, 0, 838, 104, 599, 0, 0,
	0, 107, 1481, 115, 0, 524, 0, 0, 0, 0,
	0, 612, 116, 1481, 124, 1481, 124, 117, 90, 610,
	91, 0, 0, 605, 0, 597, 0, 0, 596, 92,
	0, 0, 607, 0, 0, 153, 0, 0, 155, 0,
	1238, 499, 551, 0, 0, 1276, 0, 488, 552, 577,
	-2, 579, 0, 0, 664, 668, 0, 667, 734, 686,
	759, 844, 669, 686, 0, 0, 0, 678, 675, 672,
	845, 0, 0, 0, 0, 202, 205, 208, 211, 281,
	0, 0, 1177, 0, 851, 0, 0, 133, 0, 283,
	329, 330, 335, 355, 356, 358, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 595, 0, 951, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1208, 0,
	0, 0, 1219, -2, 1181, 1209, 1213, 0, 1066, 0,
	0, 0, 0, 1264, 937, 938, 939, 940, 941, 942,
	943, 0, 1126, 1127, 1131, 0, 0, 1077, 0, 0,
	1182, 1192, 1194, 1022, 1023, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, -2, -2, -2, 1040, 1041,
	1042, -2, -2, -2, 0, 0, 0, 1195, 0, 0,
	1197, 1198, 1202, 1203, 0, 1105, 1106, 1107, 1204, 0,
	0, 0, 911, 0, 0, 777, 0, 784, 0, 777,
	815, 0, 834, 817, 797, 808, 0, 805, 795, 0,
	796, 0, 824, 0, 0, 804, 0, 0, 0, 0,
	125, 522, 541, 0, 0, 586, 592, 592, 0, 1075,
	1076, 0, 0, 0, 109, 0, 0, 0, 0, 113,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 95, 131, 0, 0, 156,
	507, 0, 493, 0, 0, 0, 491, 0, 575, 0,
	0, 666, 668, 0, 659, 660, 181, 670, 684, 685,
	683, 0, 686, 692, 689, 695, 0, 0, 135, 0,
	0, 852, 859, 151, 1369, 149, 146, 148, 300, 323,
	324, 0, 328, 471, 472, 505, 505, 762, 768, 751,
	595, 0, 0, -2, 0, 1011, -2, -2, 1144, 1175,
	1218, 1212, 1261, 746, 1067, 1069, 1070, 946, 1133, 1130,
	0, 1117, 1093, 1094, 1191, 0, 0, 0, 0, 1175,
	1146, 1104, 0, 1110, 1111, 880, 732, 1122, 0, 0,
	788, 1122, 0, 812, 810, 793, 789, 0, 800, 0,
	821, 601, 603, 106, 0, 523, 0, 526, 0, 0,
	0, 0, 532, 533, 0, 0, 0, 0, 543, 550,
	0, 595, 1256, 0, 595, 0, 0, 0, 0, 0,
	121, 0, 0, 611, 0, 124, 124, 600, 0, 0,
	97, 0, 606, 598, 0, 98, 0, 608, 143, 0,
	486, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 656, 668, 0, 661, 662, 0, 0, 0, 677,
	687, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	326, 0, 473, 474, 752, -2, -2, 1012, 1145, 0,
	746, 0, 1119, -2, 0, 0, 0, 1147, 0, 719,
	0, 776, 774, 720, 833, 824, 0, 819, 108, 0,
	527, 528, 1276, 0, 531, 534, 0, 536, 1278, 499,
	0, 547, 548, 587, 588, 591, 589, 592, 746, 545,
	0, 110, 111, 120, 128, 112, 118, 0, 0, 0,
	746, 0, 825, 0, 0, 550, 0, 540, 499, 489,
	550, 0, 0, 663, 664, 0, 0, 0, 696, 0,
	0, 150, 0, 145, 147, 325, 0, 1068, 1136, 0,
	-2, 0, 1048, 1109, 1121, 1123, 0, 798, 790, 525,
	529, 0, 0, 556, 0, 544, 0, 595, 0, 0,
	130, 0, 602, 604, 0, 0, 0, 0, 0, 0,
	499, 550, 487, 499, 0, 665, 666, 0, 680, 845,
	682, 0, 0, 152, 327, 0, 0, 0, 1132, 1049,
	0, 0, 0, 535, 561, 0, 0, 0, 590, 1066,
	552, 114, 0, 127, 0, 0, 0, 0, 0, 0,
	538, 499, 581, 0, 657, 0, 681, 153, 153, 1129,
	1134, 1137, -2, 1441, 1314, 0, 1135, 1124, 1125, 0,
	537, 557, 558, 0, 553, 554, 555, 1277, 549, 556,
	129, 100, 102, 0, 0, 0, 539, 550, 845, 136,
	137, 0, 1139, 1140, 1141, 1142, 1143, 530, 559, 0,
	560, 0, 0, 0, 561, 0, 0, 502, 499, 679,
	0, 562, 0, 565, 566, 0, 563, 546, 0, 0,
	498, 500, 501, 582, 1138, 564, 567, 568, 0, 0,
	0, 0, 508, 0, 509, 0, 507, 0, 0, 0,
	506, 512, 0, 515, 517, -2, 0, 510, 0, 0,
	513, 0, 0, 0, 511, 516, 0, 514, 507, 0,
	506, 521, 519, 0, 520,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	359, 361, 360, 363, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 362, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1110
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1122
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1131
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1140
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1152
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1224
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1247
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1324
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1484
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1566
		{
			return helpWith(sqllex, "DELETE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "INSERT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{ /* SKIP DOC */
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "GRANT")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			return helpWith(sqllex, "RESET")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "RESET")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{ /* SKIP DOC */
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{ /* SKIP DOC */
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2025
		{
			return unimplemented(sqllex, "set local")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2144
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2168
		{
			return unimplemented(sqllex, "set from current")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = Low
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = Normal
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = High
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.str = "client_encoding"
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2356
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2515
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2523
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2534
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2545
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2556
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2571
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2575
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2579
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2586
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2593
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2597
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2603
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2607
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2611
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2752
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = DropDefault
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.str = ""
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			return unimplemented(sqllex, "match full")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			return unimplemented(sqllex, "match partial")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			return unimplemented(sqllex, "match simple")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3089
		{
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = NoAction
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = Restrict
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = Cascade
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = SetNull
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = SetDefault
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = nil
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3255
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = true
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = false
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3286
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3290
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = Ascending
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = Descending
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3341
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3343
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = true
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = false
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3377
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3434
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3439
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3457
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3465
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3472
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3476
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.str = ""
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3535
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3537
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = ReadOnly
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = ReadWrite
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.str = ""
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.str = ""
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.str = ""
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.str = ""
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3645
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			return helpWith(sqllex, "INSERT")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3728
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3732
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3740
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 687:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3768
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3930
		{
			return helpWith(sqllex, "SELECT")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			return helpWith(sqllex, "VALUES")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			return helpWith(sqllex, "TABLE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3979
		{
			return helpWith(sqllex, "SELECT")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4023
		{
			return helpWith(sqllex, "TABLE")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4034
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4043
		{
			return unimplemented(sqllex, "cte")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4047
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4054
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = false
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = false
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4079
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4157
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = false
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = true
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4285
		{
			return helpWith(sqllex, "VALUES")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4287
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4302
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &From{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4324
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4369
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4406
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = nil
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = true
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = false
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.str = astFullJoin
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.str = astLeftJoin
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.str = astRightJoin
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.str = astInnerJoin
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4590
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4676
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4690
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4698
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4733
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = jsonbColType
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = jsonColType
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4791
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4831
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = nil
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4896
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4992
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5024
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5064
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = year
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = month
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = day
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = hour
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = minute
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = month
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = hour
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = minute
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = minute
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = nil
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = second
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5159
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5194
		{
			return unimplemented(sqllex, "at tz")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5468
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5645
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5698
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5699
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5712
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5723
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5739
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5740
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5744
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5753
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5762
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5771
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5772
		{
			return unimplemented(sqllex, "current role")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5781
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5807
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5812
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5821
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5822
		{
			return unimplemented(sqllex, "treat")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5859
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5864
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5868
		{
			return unimplemented(sqllex, "within group")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5869
		{
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5904
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.str = ""
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5966
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5967
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5968
		{
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5971
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5972
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5978
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5979
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5980
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5981
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5982
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = Any
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = Some
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = All
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = Plus
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = Minus
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = Mult
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = Div
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = Mod
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = Bitand
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = Bitor
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = Pow
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = Bitxor
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = LT
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = GT
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6040
		{
			sqlVAL.union.val = EQ
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = LE
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = GE
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = NE
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = Like
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = NotLike
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = ILike
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = NotILike
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6148
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6224
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6266
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6279
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6328
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6337
		{
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6338
		{
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6342
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6352
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6377
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6397
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6422
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6426
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6439
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6443
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6447
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6467
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6470
		{
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6480
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6484
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6491
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6495
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6499
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6503
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6506
		{
			return unimplemented(sqllex, "func const")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6508
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6512
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6515
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6517
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = DNull
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6532
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6536
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6542
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6577
		{
			sqlVAL.str = ""
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6583
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6587
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
