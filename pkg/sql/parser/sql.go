// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5858

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	354, 32,
	-2, 502,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 65,
	1, 474,
	197, 474,
	241, 474,
	350, 474,
	352, 474,
	354, 474,
	-2, 484,
	-1, 113,
	1, 477,
	197, 477,
	241, 477,
	350, 477,
	352, 477,
	354, 477,
	-2, 483,
	-1, 126,
	1, 32,
	354, 32,
	-2, 502,
	-1, 507,
	122, 1083,
	293, 1083,
	336, 1083,
	353, 1083,
	-2, 0,
	-1, 518,
	1, 214,
	354, 214,
	-2, 1088,
	-1, 538,
	111, 512,
	170, 512,
	195, 512,
	-2, 480,
	-1, 546,
	111, 511,
	170, 511,
	195, 511,
	-2, 478,
	-1, 686,
	351, 1015,
	-2, 1008,
	-1, 687,
	351, 1016,
	-2, 1009,
	-1, 693,
	5, 682,
	351, 682,
	-2, 1213,
	-1, 718,
	5, 641,
	-2, 1183,
	-1, 719,
	5, 676,
	351, 676,
	-2, 1185,
	-1, 720,
	5, 651,
	-2, 1186,
	-1, 721,
	5, 650,
	-2, 1187,
	-1, 722,
	5, 676,
	351, 676,
	-2, 1190,
	-1, 723,
	5, 676,
	351, 676,
	-2, 1191,
	-1, 724,
	5, 677,
	-2, 1194,
	-1, 725,
	5, 633,
	-2, 1195,
	-1, 726,
	5, 633,
	-2, 1196,
	-1, 727,
	5, 658,
	-2, 1200,
	-1, 728,
	5, 643,
	-2, 1201,
	-1, 729,
	5, 644,
	-2, 1202,
	-1, 730,
	5, 634,
	-2, 1207,
	-1, 731,
	5, 635,
	-2, 1208,
	-1, 732,
	5, 636,
	-2, 1209,
	-1, 733,
	5, 637,
	-2, 1210,
	-1, 734,
	5, 638,
	-2, 1211,
	-1, 735,
	5, 639,
	-2, 1212,
	-1, 736,
	5, 633,
	-2, 1217,
	-1, 737,
	5, 642,
	-2, 1222,
	-1, 738,
	5, 640,
	-2, 1225,
	-1, 739,
	5, 674,
	351, 674,
	-2, 1227,
	-1, 740,
	5, 678,
	-2, 1230,
	-1, 741,
	5, 680,
	-2, 1231,
	-1, 742,
	5, 673,
	351, 673,
	-2, 1236,
	-1, 790,
	211, 500,
	-2, 377,
	-1, 795,
	111, 511,
	170, 511,
	195, 511,
	-2, 481,
	-1, 954,
	102, 484,
	111, 484,
	151, 484,
	170, 484,
	195, 484,
	201, 484,
	304, 484,
	-2, 801,
	-1, 963,
	351, 992,
	-2, 980,
	-1, 1234,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 717,
	-1, 1235,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 718,
	-1, 1236,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 719,
	-1, 1240,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 723,
	-1, 1241,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 724,
	-1, 1242,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 725,
	-1, 1245,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 730,
	-1, 1251,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 732,
	-1, 1253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 736,
	-1, 1254,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 737,
	-1, 1255,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 738,
	-1, 1256,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 739,
	-1, 1282,
	206, 874,
	-2, 877,
	-1, 1319,
	122, 914,
	351, 1015,
	-2, 1008,
	-1, 1320,
	122, 915,
	-2, 1179,
	-1, 1321,
	122, 916,
	-2, 1087,
	-1, 1322,
	122, 917,
	-2, 1051,
	-1, 1323,
	122, 918,
	-2, 1068,
	-1, 1324,
	122, 919,
	-2, 1086,
	-1, 1325,
	122, 920,
	-2, 1138,
	-1, 1505,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 731,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 733,
	-1, 1511,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 734,
	-1, 1529,
	206, 873,
	-2, 876,
	-1, 1708,
	102, 484,
	111, 484,
	151, 484,
	170, 484,
	195, 484,
	201, 484,
	304, 484,
	-2, 568,
	-1, 1728,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 735,
	-1, 1733,
	154, 0,
	-2, 751,
	-1, 1743,
	206, 875,
	-2, 878,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 778,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 779,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 780,
	-1, 1791,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 784,
	-1, 1792,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 785,
	-1, 1793,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 786,
	-1, 1899,
	1, 569,
	70, 569,
	102, 569,
	111, 569,
	123, 569,
	127, 569,
	129, 569,
	142, 569,
	151, 569,
	158, 569,
	167, 569,
	170, 569,
	182, 569,
	195, 569,
	197, 569,
	201, 569,
	241, 569,
	243, 569,
	304, 569,
	312, 569,
	323, 569,
	324, 569,
	333, 569,
	350, 569,
	352, 569,
	354, 569,
	355, 569,
	-2, 568,
	-1, 1912,
	154, 0,
	-2, 752,
	-1, 1915,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 755,
	-1, 1916,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 757,
	-1, 2043,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 756,
	-1, 2044,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 758,
	-1, 2051,
	154, 0,
	-2, 787,
	-1, 2132,
	154, 0,
	-2, 788,
	-1, 2213,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1182,
}

const sqlPrivate = 57344

const sqlLast = 31547

var sqlAct = [...]int{

	687, 1819, 2212, 2220, 2070, 2221, 2258, 2185, 2222, 1193,
	1090, 1201, 547, 2211, 1381, 1895, 1762, 389, 2035, 2102,
	1825, 1894, 1979, 1842, 1422, 2023, 1646, 1950, 64, 1965,
	1703, 1097, 1706, 1826, 2010, 562, 631, 135, 135, 2004,
	1004, 135, 663, 680, 1385, 613, 677, 1403, 135, 1380,
	1873, 1882, 885, 1093, 1384, 1595, 135, 1487, 1648, 391,
	1467, 135, 1694, 1436, 135, 1393, 1213, 135, 1305, 1540,
	745, 1348, 1594, 959, 135, 1280, 874, 1202, 373, 23,
	1466, 1085, 867, 1481, 1689, 1472, 685, 365, 363, 684,
	1154, 1156, 1078, 1128, 1418, 764, 1345, 1290, 1185, 1427,
	1005, 657, 1268, 868, 1265, 1469, 886, 1388, 802, 889,
	565, 763, 1299, 950, 1316, 554, 111, 571, 804, 656,
	135, 135, 662, 1176, 994, 566, 135, 644, 797, 605,
	135, 135, 127, 990, 113, 1195, 810, 495, 1076, 114,
	811, 557, 679, 517, 552, 622, 515, 780, 513, 1966,
	812, 381, 893, 639, 131, 499, 816, 603, 779, 511,
	1528, 2113, 1087, 347, 2114, 1087, 1701, 1198, 2244, 1194,
	346, 882, 111, 2234, 2233, 1087, 1209, 1209, 2231, 551,
	2229, 1964, 118, 882, 546, 2207, 2204, 551, 882, 882,
	1565, 1566, 2181, 118, 2171, 1363, 2144, 882, 1186, 1964,
	2134, 1498, 1499, 1363, 498, 23, 1704, 2127, 2122, 555,
	882, 2121, 2109, 2085, 1658, 2110, 1964, 1302, 2082, 121,
	1692, 882, 905, 906, 2081, 1178, 2080, 1964, 110, 882,
	2068, 615, 2045, 1964, 1209, 1363, 2161, 1565, 1566, 110,
	2026, 2001, 111, 1209, 1209, 908, 539, 125, 616, 2000,
	1963, 538, 1209, 1964, 905, 906, 112, 925, 926, 927,
	935, 936, 937, 55, 1303, 56, 1111, 112, 1939, 907,
	928, 1209, 1917, 574, 55, 1209, 56, 908, 607, 1914,
	939, 1737, 1363, 124, 1209, 1726, 1189, 1721, 1192, 58,
	1192, 119, 1629, 1612, 1692, 882, 1613, 1571, 120, 1610,
	58, 907, 1209, 1609, 1186, 1608, 1209, 922, 1209, 1304,
	1301, 1532, 1529, 1531, 1177, 1209, 1533, 115, 1209, 1463,
	1369, 1362, 882, 1209, 1363, 1208, 1189, 1191, 1209, 913,
	1192, 1183, 121, 1209, 1182, 901, 1434, 1659, 902, 1798,
	1740, 1539, 882, 1630, 1571, 1421, 1377, 1060, 1284, 863,
	620, 648, 135, 1088, 612, 1581, 1088, 135, 1967, 126,
	125, 913, 626, 905, 906, 571, 1088, 1082, 2018, 1707,
	778, 2236, 2227, 121, 2210, 2192, 2129, 2083, 1944, 1940,
	932, 940, 1932, 1931, 1306, 568, 908, 923, 1930, 823,
	1926, 1925, 1924, 552, 1923, 1906, 124, 1899, 938, 1872,
	1818, 125, 1581, 1813, 119, 1808, 1807, 1806, 1748, 877,
	907, 120, 121, 930, 1633, 1628, 1705, 2235, 1617, 923,
	1614, 1602, 117, 121, 1593, 1564, 1561, 1429, 1582, 1560,
	1197, 905, 906, 117, 1558, 1498, 1545, 124, 1544, 1477,
	125, 1313, 1312, 1311, 929, 823, 967, 960, 822, 115,
	1096, 125, 1764, 628, 908, 2182, 1276, 2160, 1177, 2159,
	924, 1300, 640, 2152, 2146, 877, 2142, 2120, 1816, 1109,
	913, 115, 1104, 2117, 2105, 1582, 124, 2065, 907, 616,
	2053, 2042, 1086, 1367, 119, 2028, 1970, 124, 1962, 1937,
	645, 120, 924, 1903, 1887, 119, 1840, 135, 630, 1838,
	1837, 1836, 120, 1833, 1823, 1732, 1682, 136, 933, 1680,
	115, 135, 1634, 1637, 1592, 1554, 1553, 1550, 1525, 571,
	1520, 115, 1567, 1568, 1569, 1570, 1572, 1573, 135, 135,
	1270, 960, 1462, 135, 135, 135, 995, 135, 913, 1565,
	1566, 998, 135, 135, 135, 135, 135, 1355, 1310, 1905,
	1089, 796, 916, 917, 909, 910, 911, 912, 914, 915,
	808, 1277, 1002, 1186, 988, 987, 392, 1574, 1575, 1567,
	1568, 1569, 1570, 1572, 1573, 931, 986, 571, 919, 920,
	921, 934, 985, 918, 916, 917, 909, 910, 911, 912,
	914, 915, 984, 905, 906, 2112, 923, 983, 982, 1941,
	135, 135, 135, 135, 981, 135, 980, 979, 795, 1565,
	1566, 774, 829, 978, 977, 976, 908, 975, 135, 974,
	571, 135, 973, 972, 572, 971, 1634, 391, 571, 118,
	135, 964, 1565, 1566, 785, 953, 115, 135, 135, 135,
	907, 135, 614, 866, 883, 758, 1571, 750, 135, 642,
	2015, 616, 1946, 1945, 626, 829, 754, 1919, 872, 1888,
	762, 1620, 1619, 829, 951, 783, 805, 891, 771, 924,
	759, 800, 2124, 2115, 773, 110, 788, 1649, 791, 1565,
	1566, 781, 629, 828, 1909, 799, 799, 1565, 1566, 539,
	552, 1500, 871, 1616, 538, 909, 910, 911, 912, 914,
	915, 1707, 1615, 112, 1164, 855, 819, 820, 861, 1504,
	55, 772, 56, 2016, 899, 770, 1571, 755, 969, 858,
	569, 1417, 857, 805, 1162, 616, 880, 1302, 1066, 1416,
	1000, 827, 1580, 956, 1094, 1001, 58, 1482, 2005, 1571,
	878, 1163, 640, 1070, 1069, 1194, 568, 563, 1765, 1536,
	1291, 991, 890, 135, 1494, 2250, 851, 1856, 135, 616,
	894, 894, 864, 909, 910, 911, 912, 914, 915, 2198,
	1994, 846, 571, 571, 1303, 881, 2251, 2126, 527, 391,
	903, 526, 1370, 135, 521, 522, 1571, 2100, 1625, 2099,
	892, 895, 966, 135, 1011, 852, 1083, 1581, 877, 2098,
	904, 1157, 1095, 1158, 2097, 544, 1871, 1438, 905, 906,
	1157, 1815, 1158, 1867, 1075, 1870, 1853, 1852, 1549, 1304,
	1301, 1042, 963, 536, 1548, 1547, 1157, 1073, 1158, 1546,
	1057, 908, 135, 1507, 1460, 1459, 135, 353, 135, 135,
	135, 135, 135, 135, 1581, 771, 1457, 1100, 135, 1252,
	1212, 996, 135, 135, 782, 907, 992, 993, 1067, 121,
	619, 999, 543, 1144, 135, 601, 1902, 135, 1359, 117,
	1582, 1358, 572, 1569, 1570, 1572, 1573, 1159, 1223, 1103,
	135, 1175, 1106, 135, 1108, 1054, 1159, 125, 772, 354,
	1153, 1048, 1404, 1152, 1306, 529, 2125, 135, 1714, 135,
	1267, 1716, 1159, 571, 1056, 1958, 1055, 1484, 391, 1059,
	1074, 1079, 1072, 1071, 887, 913, 1134, 1582, 1267, 501,
	1084, 2072, 600, 124, 757, 1222, 1438, 2175, 896, 848,
	915, 119, 1437, 1102, 1145, 1755, 1394, 502, 120, 1959,
	744, 1567, 1568, 1569, 1570, 1572, 1573, 1306, 650, 1011,
	1011, 539, 2241, 1115, 539, 539, 1124, 115, 1488, 1125,
	1126, 111, 1114, 1575, 1567, 1568, 1569, 1570, 1572, 1573,
	1138, 1300, 1196, 1291, 1196, 1132, 1042, 1042, 1687, 2224,
	1756, 843, 1135, 1684, 1188, 1139, 1140, 1141, 1142, 1143,
	1210, 1274, 2250, 1173, 849, 1181, 1272, 503, 1149, 1150,
	891, 1858, 1184, 1396, 542, 2256, 1214, 1221, 1576, 1574,
	1575, 1567, 1568, 1569, 1570, 1572, 1573, 111, 844, 1205,
	2178, 1693, 532, 1678, 1573, 1281, 572, 550, 645, 1624,
	1211, 1200, 1285, 545, 1288, 1151, 1293, 2149, 1954, 1155,
	1955, 1865, 118, 541, 2179, 1492, 537, 850, 1318, 1318,
	1329, 533, 1340, 356, 355, 1306, 1517, 1171, 1352, 1353,
	1354, 534, 1168, 1278, 599, 2225, 1419, 1420, 1275, 1087,
	1957, 1515, 1170, 1626, 1697, 1758, 549, 989, 1167, 1960,
	530, 569, 564, 391, 572, 1399, 2049, 135, 110, 1488,
	135, 1361, 1326, 1700, 118, 1160, 504, 135, 1165, 357,
	1378, 1395, 2057, 602, 1160, 135, 135, 2261, 135, 1695,
	135, 135, 391, 135, 135, 1166, 112, 2240, 1698, 111,
	1160, 2226, 948, 55, 1366, 56, 551, 572, 1413, 1411,
	2073, 1552, 135, 1696, 392, 572, 1883, 1898, 135, 551,
	110, 1512, 911, 912, 914, 915, 531, 1509, 2012, 58,
	1306, 1513, 135, 135, 135, 1518, 1956, 1715, 135, 1847,
	1435, 996, 135, 999, 1859, 1266, 832, 1373, 112, 1249,
	135, 2223, 1371, 135, 505, 55, 2249, 56, 1375, 135,
	391, 2247, 382, 672, 993, 992, 1464, 1444, 1978, 1401,
	571, 1475, 1379, 135, 1699, 837, 2257, 1474, 135, 1376,
	135, 58, 1439, 833, 387, 506, 831, 135, 767, 616,
	383, 1374, 752, 135, 1331, 2239, 2092, 647, 815, 1410,
	132, 132, 1445, 1447, 348, 829, 552, 1480, 1409, 548,
	1415, 350, 805, 805, 1407, 1430, 1408, 384, 1273, 362,
	1935, 2091, 1452, 2259, 492, 1455, 2269, 497, 1406, 799,
	497, 799, 2063, 1490, 1426, 2139, 386, 519, 1496, 1476,
	1088, 1514, 111, 2011, 814, 1442, 1855, 1450, 1516, 1247,
	1250, 1432, 121, 768, 1431, 805, 1433, 769, 1461, 572,
	572, 1465, 117, 692, 616, 1990, 392, 1669, 1458, 1665,
	1402, 358, 805, 1101, 1091, 616, 1483, 743, 2260, 552,
	125, 1470, 1246, 606, 606, 1794, 1538, 1493, 1754, 348,
	2024, 1993, 1503, 132, 623, 1486, 1501, 501, 1992, 2262,
	890, 1120, 1148, 813, 121, 2186, 814, 1061, 1843, 890,
	1958, 359, 1980, 1951, 117, 502, 124, 2064, 1639, 1936,
	1638, 1949, 1523, 1425, 119, 1953, 2013, 2268, 815, 1526,
	1878, 120, 125, 1510, 1508, 767, 393, 1877, 1065, 493,
	360, 491, 361, 638, 1959, 552, 385, 1542, 1543, 135,
	115, 637, 549, 1524, 1263, 2025, 792, 1820, 571, 1947,
	1479, 2061, 1874, 633, 1989, 813, 1952, 1535, 124, 1261,
	135, 1121, 135, 135, 632, 503, 119, 1248, 1795, 135,
	1693, 1063, 135, 120, 1796, 2062, 135, 1011, 1591, 128,
	572, 377, 31, 1064, 573, 392, 1690, 1991, 1309, 1604,
	388, 1632, 364, 1635, 376, 30, 135, 1011, 2052, 1934,
	1596, 1731, 1713, 1559, 1042, 1597, 135, 135, 135, 1599,
	1600, 1601, 135, 1519, 1485, 1456, 135, 135, 135, 135,
	135, 1453, 1146, 1697, 1042, 371, 27, 1368, 135, 1257,
	135, 135, 3, 1954, 1618, 1955, 1623, 1258, 1622, 1259,
	1627, 1190, 1700, 1264, 135, 854, 1640, 853, 847, 1643,
	842, 375, 17, 841, 1631, 840, 1666, 1011, 1695, 1651,
	1652, 839, 1653, 838, 504, 1957, 835, 1698, 636, 135,
	135, 627, 552, 1137, 1960, 970, 845, 1722, 1308, 1654,
	2219, 2183, 1696, 1988, 1042, 1656, 624, 369, 13, 1863,
	370, 16, 1861, 1854, 1644, 1645, 1661, 625, 372, 14,
	1679, 1405, 1660, 1681, 1710, 634, 368, 12, 31, 621,
	348, 1677, 1641, 1398, 1631, 1172, 374, 10, 1657, 1719,
	1688, 30, 1169, 135, 1750, 1751, 1752, 1702, 1662, 1709,
	1711, 1734, 1712, 1161, 1011, 1691, 1113, 1112, 1110, 1107,
	500, 1717, 505, 1699, 367, 8, 1723, 1725, 111, 1260,
	1724, 1956, 27, 1686, 111, 1105, 1262, 1745, 1647, 618,
	392, 1042, 2037, 520, 2251, 1697, 1470, 1738, 817, 610,
	1011, 1011, 1081, 506, 1741, 366, 4, 1744, 17, 1011,
	1011, 2039, 1449, 1423, 1700, 1720, 1757, 1759, 1760, 392,
	1438, 1205, 1470, 1768, 1766, 2156, 1448, 1042, 1042, 378,
	1881, 135, 1773, 834, 135, 1771, 1042, 1042, 1967, 1698,
	2131, 1875, 1011, 821, 13, 1438, 135, 16, 747, 571,
	1801, 1446, 1839, 905, 906, 14, 1454, 1214, 1769, 391,
	135, 1451, 573, 12, 1799, 1824, 1214, 1774, 1802, 1042,
	818, 611, 379, 10, 1424, 1809, 1850, 2162, 1976, 1400,
	753, 1832, 1849, 1397, 1845, 1821, 1199, 392, 523, 524,
	1174, 1041, 494, 135, 519, 746, 135, 572, 1058, 1805,
	907, 8, 1834, 1003, 1846, 391, 1844, 135, 1365, 2254,
	2267, 497, 348, 2206, 571, 1699, 519, 790, 519, 382,
	793, 1831, 1890, 2165, 1830, 519, 519, 348, 806, 623,
	1565, 1566, 4, 905, 906, 2021, 1889, 825, 824, 689,
	1817, 387, 1866, 1814, 905, 906, 1761, 383, 825, 829,
	1884, 1885, 1868, 1876, 1869, 1862, 1879, 1864, 1621, 1880,
	1611, 1360, 1900, 1357, 1123, 135, 1901, 908, 1356, 1298,
	957, 826, 1921, 1913, 384, 2174, 1011, 1893, 2036, 1753,
	1908, 1642, 900, 348, 348, 860, 348, 967, 606, 756,
	965, 907, 528, 386, 905, 906, 2071, 380, 1136, 836,
	1907, 348, 2017, 1042, 132, 1886, 2177, 1927, 1551, 2101,
	2048, 1307, 968, 348, 48, 1470, 573, 908, 1470, 1828,
	348, 348, 348, 666, 897, 1948, 1822, 1933, 1387, 1386,
	394, 132, 1068, 688, 135, 556, 1317, 1215, 135, 135,
	748, 907, 690, 1008, 1961, 571, 1041, 1041, 1971, 691,
	1009, 997, 1974, 135, 135, 135, 678, 1973, 1968, 1006,
	643, 1977, 135, 1203, 135, 1271, 135, 135, 135, 1289,
	1832, 135, 135, 1534, 573, 1984, 961, 658, 135, 135,
	1982, 670, 135, 1832, 669, 572, 1286, 1832, 1975, 749,
	135, 2022, 1491, 1904, 1983, 1119, 1414, 135, 1116, 1987,
	1860, 913, 1981, 385, 535, 1562, 135, 641, 1338, 1330,
	1831, 2020, 1327, 1830, 784, 873, 949, 573, 1204, 777,
	2038, 2019, 1497, 1831, 393, 573, 1830, 1831, 1332, 1364,
	1830, 865, 2029, 1127, 609, 2047, 132, 608, 2008, 2009,
	2030, 519, 2014, 1382, 775, 2031, 1062, 2007, 1372, 2032,
	135, 942, 391, 135, 941, 2040, 525, 388, 2141, 923,
	766, 135, 765, 1092, 1668, 2255, 497, 2155, 391, 2059,
	1857, 2197, 123, 122, 2123, 2034, 1099, 1478, 2054, 135,
	72, 1011, 571, 2069, 29, 2076, 28, 91, 1997, 135,
	2075, 90, 89, 2077, 2003, 88, 87, 86, 2074, 85,
	1470, 1470, 84, 891, 1470, 83, 135, 82, 1042, 1832,
	2089, 1832, 81, 80, 135, 519, 79, 2088, 78, 519,
	135, 132, 519, 519, 519, 519, 519, 77, 76, 135,
	135, 1147, 924, 2090, 1010, 519, 519, 75, 1011, 2087,
	135, 2111, 2079, 2118, 2104, 2119, 2108, 606, 74, 1831,
	623, 1831, 1830, 516, 1830, 2084, 71, 70, 135, 2116,
	69, 2130, 135, 348, 68, 1042, 1187, 26, 22, 573,
	573, 552, 2145, 2143, 2107, 21, 393, 2095, 2096, 20,
	348, 25, 1207, 2067, 24, 2150, 2137, 18, 571, 15,
	2151, 9, 2148, 2138, 2133, 2094, 19, 1011, 135, 135,
	53, 2086, 54, 52, 51, 50, 135, 11, 2147, 46,
	45, 44, 43, 2154, 42, 41, 391, 135, 135, 7,
	2163, 39, 38, 2153, 1042, 917, 909, 910, 911, 912,
	914, 915, 2170, 2167, 6, 5, 1470, 2176, 2169, 2166,
	2173, 2164, 107, 135, 104, 2188, 106, 135, 103, 2189,
	135, 105, 108, 2194, 100, 101, 572, 391, 102, 99,
	98, 2190, 135, 35, 34, 135, 392, 33, 32, 2,
	1, 0, 2191, 2195, 2199, 0, 135, 2196, 0, 2203,
	2205, 2202, 0, 135, 0, 2208, 0, 2209, 0, 1010,
	1010, 2228, 2172, 2217, 0, 0, 0, 2218, 0, 1832,
	573, 0, 0, 2180, 2230, 393, 0, 0, 0, 0,
	0, 0, 392, 0, 1332, 1332, 2238, 0, 0, 2237,
	135, 572, 0, 0, 0, 0, 0, 0, 2248, 0,
	2246, 2200, 2201, 0, 0, 0, 2253, 0, 2252, 1831,
	0, 0, 1830, 0, 0, 0, 0, 0, 0, 0,
	0, 667, 65, 0, 0, 2265, 2264, 2266, 2263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 2193, 1383, 649, 0, 751, 0, 0, 0,
	623, 0, 1332, 1332, 1332, 0, 0, 0, 519, 519,
	0, 519, 0, 348, 348, 0, 1412, 623, 1205, 0,
	0, 0, 0, 0, 1041, 0, 0, 0, 65, 0,
	0, 0, 0, 786, 787, 348, 0, 0, 0, 905,
	906, 1428, 0, 0, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 348, 348, 0, 0,
	0, 1443, 908, 0, 0, 348, 0, 0, 0, 0,
	0, 0, 572, 348, 0, 0, 348, 0, 0, 0,
	0, 0, 348, 540, 0, 0, 907, 553, 0, 0,
	0, 0, 922, 0, 0, 0, 348, 0, 65, 0,
	393, 348, 0, 1495, 1041, 0, 0, 0, 0, 0,
	348, 869, 869, 0, 0, 0, 1428, 875, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 0, 0, 943, 944, 945, 946, 947, 0,
	0, 0, 0, 0, 955, 0, 1043, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 1332, 1332, 392,
	0, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 392, 0, 393, 0, 0,
	1521, 1522, 0, 0, 923, 0, 0, 573, 0, 572,
	1007, 0, 0, 0, 0, 0, 0, 1041, 1041, 0,
	0, 0, 0, 0, 0, 0, 1041, 1041, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 1332, 1332, 1332,
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
	1332, 1332, 1332, 1332, 1332, 0, 1332, 0, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 1588, 1589,
	1590, 0, 1428, 0, 1044, 1044, 0, 924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 905, 906, 0,
	0, 0, 0, 1099, 0, 1099, 1636, 0, 0, 0,
	0, 0, 519, 0, 0, 348, 0, 0, 0, 1650,
	908, 0, 0, 0, 0, 572, 1117, 0, 1122, 0,
	0, 1043, 1043, 0, 1129, 0, 0, 1565, 1566, 348,
	1583, 1584, 1585, 0, 907, 0, 553, 0, 0, 348,
	1663, 1664, 0, 392, 0, 1443, 0, 0, 0, 1670,
	1671, 1673, 1675, 1676, 0, 0, 0, 0, 0, 0,
	0, 1683, 0, 1685, 348, 1007, 1007, 1010, 918, 916,
	917, 909, 910, 911, 912, 914, 915, 348, 0, 0,
	1580, 0, 0, 0, 392, 0, 0, 1010, 0, 0,
	0, 0, 0, 1041, 913, 573, 0, 0, 0, 0,
	0, 0, 348, 348, 0, 0, 0, 0, 0, 0,
	0, 0, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1571, 1251, 0, 1253, 1254, 1255,
	1256, 0, 0, 1729, 1730, 0, 0, 1010, 0, 0,
	0, 0, 923, 0, 1279, 0, 1763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1586, 0, 0, 0, 0, 0, 1314, 1315, 0,
	0, 1328, 0, 1339, 1341, 1346, 1349, 1350, 1351, 0,
	0, 0, 1581, 0, 0, 0, 0, 0, 0, 0,
	1565, 1566, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 0, 1797, 0, 1010, 924, 540, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 1099, 1827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 1010, 0, 1851, 0, 1582, 0, 0, 0, 1010,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 1041, 348,
	0, 0, 1010, 1332, 0, 0, 0, 1571, 0, 0,
	1897, 0, 0, 0, 0, 0, 918, 916, 917, 909,
	910, 911, 912, 914, 915, 0, 0, 0, 1332, 0,
	0, 952, 0, 954, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1577, 1578, 1579, 0, 1041, 1576, 1574, 1575, 1567,
	1568, 1569, 1570, 1572, 1573, 1581, 573, 0, 1928, 0,
	0, 0, 0, 0, 0, 0, 393, 0, 0, 0,
	869, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 1041, 0, 0, 0, 0, 0,
	0, 1332, 393, 0, 0, 0, 0, 1827, 0, 0,
	0, 573, 1044, 0, 0, 0, 1010, 623, 1582, 0,
	1827, 623, 1383, 0, 1827, 0, 0, 0, 0, 1505,
	1506, 0, 1044, 0, 0, 1511, 1985, 1986, 1443, 0,
	0, 0, 0, 0, 0, 1995, 0, 1996, 0, 348,
	1998, 1999, 0, 0, 2002, 348, 0, 0, 0, 1043,
	0, 348, 348, 0, 0, 348, 0, 1530, 540, 0,
	0, 540, 540, 1897, 1537, 905, 906, 1541, 0, 1043,
	2027, 935, 936, 937, 0, 0, 2033, 0, 0, 623,
	0, 0, 1044, 1555, 0, 0, 0, 65, 908, 0,
	0, 939, 0, 1007, 0, 0, 0, 0, 0, 1576,
	1574, 1575, 1567, 1568, 1569, 1570, 1572, 1573, 0, 955,
	0, 0, 907, 1007, 0, 1346, 1346, 1346, 922, 0,
	0, 0, 0, 2058, 0, 0, 2060, 0, 0, 1043,
	0, 0, 573, 0, 348, 65, 1827, 65, 1827, 2051,
	0, 0, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 1443, 0, 2066, 0, 0, 0, 0, 0,
	0, 0, 913, 1007, 0, 0, 0, 0, 0, 2103,
	0, 0, 1269, 0, 0, 0, 0, 348, 0, 1655,
	0, 932, 940, 1897, 1129, 1044, 1044, 0, 0, 0,
	0, 0, 623, 1897, 1044, 1044, 1043, 0, 0, 0,
	0, 1010, 0, 2128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	923, 2136, 0, 0, 0, 1099, 0, 1044, 0, 393,
	0, 0, 1043, 1043, 0, 65, 0, 0, 0, 0,
	1007, 1043, 1043, 0, 0, 393, 0, 2132, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 1010, 573,
	0, 2157, 2158, 875, 0, 0, 0, 1727, 0, 623,
	1728, 0, 0, 0, 1043, 0, 1007, 1007, 0, 0,
	1897, 623, 1733, 0, 0, 1007, 1007, 0, 0, 0,
	0, 1742, 0, 924, 0, 0, 0, 0, 0, 1746,
	0, 0, 1502, 0, 0, 0, 2187, 0, 0, 933,
	623, 0, 0, 348, 0, 0, 1827, 1010, 1007, 0,
	0, 0, 1770, 0, 0, 2103, 1772, 0, 1897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 0, 0, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1803,
	1804, 1044, 0, 0, 0, 573, 0, 0, 1810, 1811,
	1812, 0, 0, 0, 0, 0, 931, 0, 65, 0,
	0, 0, 934, 2245, 918, 916, 917, 909, 910, 911,
	912, 914, 915, 393, 0, 65, 0, 0, 65, 0,
	1835, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	1471, 0, 905, 906, 0, 925, 926, 927, 935, 936,
	937, 0, 0, 0, 0, 0, 0, 0, 928, 553,
	0, 0, 0, 0, 393, 908, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 907,
	0, 0, 0, 0, 0, 922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1912, 0, 0, 0, 1915, 1916,
	0, 0, 954, 1918, 0, 0, 0, 0, 0, 0,
	1920, 0, 1922, 0, 0, 0, 0, 0, 0, 913,
	0, 0, 0, 0, 0, 0, 0, 0, 1929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 0, 0, 0,
	0, 1938, 0, 0, 0, 0, 1044, 0, 954, 0,
	0, 930, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 65,
	0, 0, 65, 0, 0, 0, 0, 2006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 0, 0, 0,
	1043, 0, 0, 2043, 2044, 1565, 1566, 0, 1583, 1584,
	1585, 0, 1044, 65, 0, 0, 65, 0, 0, 0,
	0, 1911, 0, 0, 65, 0, 0, 0, 0, 0,
	65, 0, 0, 0, 2056, 1708, 0, 0, 0, 0,
	0, 0, 0, 0, 1007, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1580, 1043,
	0, 1471, 0, 931, 0, 0, 919, 920, 921, 934,
	0, 918, 916, 917, 909, 910, 911, 912, 914, 915,
	0, 0, 0, 0, 0, 2093, 0, 1607, 0, 0,
	905, 906, 0, 925, 926, 927, 935, 936, 937, 0,
	0, 0, 0, 1007, 0, 2106, 928, 0, 0, 0,
	0, 0, 1571, 908, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 906, 0, 925, 926,
	927, 935, 936, 937, 0, 875, 0, 907, 0, 0,
	0, 928, 0, 922, 0, 0, 0, 0, 908, 1586,
	0, 939, 0, 0, 0, 0, 0, 0, 2140, 905,
	906, 0, 925, 926, 927, 935, 936, 937, 0, 0,
	1581, 0, 907, 0, 0, 928, 0, 0, 922, 0,
	0, 0, 908, 0, 0, 939, 0, 0, 0, 0,
	0, 1565, 1566, 0, 1583, 1584, 1585, 913, 0, 0,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 0,
	1565, 1566, 922, 1583, 1584, 1585, 932, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 1910, 0, 0, 0,
	0, 0, 913, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 1582, 1580, 0, 0, 0, 0, 930,
	0, 932, 940, 0, 1471, 923, 0, 1471, 0, 0,
	0, 0, 0, 1580, 0, 0, 913, 0, 0, 938,
	0, 2216, 2216, 0, 0, 0, 0, 0, 0, 0,
	929, 0, 0, 65, 930, 932, 940, 0, 0, 0,
	923, 2232, 0, 0, 0, 0, 0, 0, 1571, 0,
	0, 0, 0, 938, 0, 0, 2216, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 1571, 930, 0,
	0, 0, 0, 0, 923, 0, 0, 0, 924, 1577,
	1578, 1579, 0, 0, 1576, 1574, 1575, 1567, 1568, 1569,
	1570, 1572, 1573, 0, 933, 0, 0, 2216, 0, 929,
	0, 0, 0, 0, 1586, 0, 1581, 0, 0, 0,
	0, 0, 0, 924, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1581, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 933, 919, 920, 921, 934, 0, 918,
	916, 917, 909, 910, 911, 912, 914, 915, 0, 1582,
	0, 0, 0, 0, 0, 1606, 0, 0, 0, 1471,
	1471, 0, 0, 1471, 0, 0, 931, 0, 1582, 919,
	920, 921, 934, 0, 918, 916, 917, 909, 910, 911,
	912, 914, 915, 0, 0, 0, 0, 0, 0, 0,
	1605, 2041, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 919, 920, 921, 934, 0, 918, 916,
	917, 909, 910, 911, 912, 914, 915, 0, 0, 0,
	0, 0, 0, 0, 1557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1577, 1578, 1579, 0, 0,
	1576, 1574, 1575, 1567, 1568, 1569, 1570, 1572, 1573, 0,
	0, 0, 0, 0, 1577, 1578, 1579, 0, 65, 1576,
	1574, 1575, 1567, 1568, 1569, 1570, 1572, 1573, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 390,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 954, 137, 138, 409, 139, 410,
	411, 412, 413, 290, 414, 415, 416, 417, 140, 141,
	142, 291, 292, 293, 294, 143, 295, 296, 418, 144,
	297, 298, 145, 146, 419, 420, 299, 300, 301, 421,
	147, 302, 422, 395, 423, 148, 149, 150, 0, 151,
	424, 152, 153, 154, 425, 396, 155, 156, 426, 427,
	429, 428, 430, 431, 432, 157, 158, 349, 159, 303,
	160, 304, 305, 433, 161, 434, 162, 435, 163, 436,
	437, 164, 165, 438, 166, 439, 0, 440, 306, 167,
	168, 169, 307, 308, 441, 442, 443, 170, 171, 309,
	310, 311, 0, 172, 444, 173, 445, 446, 397, 447,
	174, 312, 448, 313, 449, 175, 176, 177, 178, 314,
	315, 399, 450, 182, 451, 179, 452, 398, 180, 316,
	181, 317, 318, 319, 320, 321, 453, 322, 454, 400,
	183, 184, 185, 401, 186, 187, 188, 455, 190, 189,
	456, 323, 402, 191, 403, 457, 192, 458, 459, 193,
	0, 194, 195, 196, 198, 324, 197, 404, 199, 200,
	202, 201, 460, 461, 462, 325, 203, 326, 204, 205,
	463, 206, 464, 465, 207, 466, 467, 208, 327, 405,
	209, 406, 328, 210, 211, 212, 213, 214, 468, 215,
	329, 216, 330, 217, 469, 218, 219, 220, 221, 222,
	331, 223, 224, 470, 225, 226, 227, 228, 229, 231,
	232, 230, 233, 234, 235, 236, 471, 237, 407, 238,
	239, 332, 240, 0, 244, 245, 246, 247, 472, 249,
	333, 248, 250, 251, 473, 252, 241, 242, 253, 408,
	254, 334, 335, 255, 474, 261, 256, 257, 243, 258,
	260, 336, 259, 337, 475, 262, 476, 263, 264, 265,
	266, 267, 268, 269, 477, 338, 339, 340, 478, 479,
	270, 271, 341, 342, 480, 272, 273, 274, 275, 481,
	482, 276, 277, 278, 279, 483, 280, 484, 343, 281,
	282, 283, 344, 345, 485, 486, 284, 487, 488, 489,
	490, 285, 286, 287, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 0, 0, 1891, 0, 0, 0, 0, 0,
	0, 0, 1892, 137, 138, 409, 139, 410, 411, 412,
	413, 290, 414, 415, 416, 417, 140, 141, 142, 291,
	292, 293, 294, 143, 295, 296, 418, 144, 297, 298,
	145, 146, 419, 420, 299, 300, 301, 421, 147, 302,
	422, 395, 423, 148, 149, 150, 0, 151, 424, 152,
	153, 154, 425, 396, 155, 156, 426, 427, 429, 428,
	430, 431, 432, 157, 158, 349, 159, 303, 160, 304,
	305, 433, 161, 434, 162, 435, 163, 436, 437, 164,
	165, 438, 166, 439, 0, 440, 306, 167, 168, 169,
	307, 308, 441, 442, 443, 170, 171, 309, 310, 311,
	0, 172, 444, 173, 445, 446, 397, 447, 174, 312,
	448, 313, 449, 175, 176, 177, 178, 314, 315, 399,
	450, 182, 451, 179, 452, 398, 180, 316, 181, 317,
	318, 319, 320, 321, 453, 322, 454, 400, 183, 184,
	185, 401, 186, 187, 188, 455, 190, 189, 456, 323,
	402, 191, 403, 457, 192, 458, 459, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	460, 461, 462, 325, 203, 326, 204, 205, 463, 206,
	464, 465, 207, 466, 467, 208, 327, 405, 209, 406,
	328, 210, 211, 212, 213, 214, 468, 215, 329, 216,
	330, 217, 469, 218, 219, 220, 221, 222, 331, 223,
	224, 470, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 471, 237, 407, 238, 239, 332,
	240, 0, 244, 245, 246, 247, 472, 249, 333, 248,
	250, 251, 473, 252, 241, 242, 253, 408, 254, 334,
	335, 255, 474, 261, 256, 257, 243, 258, 260, 336,
	259, 337, 475, 262, 476, 263, 264, 265, 266, 267,
	268, 269, 477, 338, 339, 340, 478, 479, 270, 271,
	341, 342, 480, 272, 273, 274, 275, 481, 482, 276,
	277, 278, 279, 483, 280, 484, 343, 281, 282, 283,
	344, 345, 485, 486, 284, 487, 488, 489, 490, 285,
	286, 287, 288, 289, 0, 0, 0, 390, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2168, 137, 138, 409, 139, 410, 411, 412,
	413, 290, 414, 415, 416, 417, 140, 141, 142, 291,
	292, 293, 294, 143, 295, 296, 418, 144, 297, 298,
	145, 146, 419, 420, 299, 300, 301, 421, 147, 302,
	422, 395, 423, 148, 149, 150, 0, 151, 424, 152,
	153, 154, 425, 396, 155, 156, 426, 427, 429, 428,
	430, 431, 432, 157, 158, 349, 159, 303, 160, 304,
	305, 433, 161, 434, 162, 435, 163, 436, 437, 164,
	165, 438, 166, 439, 0, 440, 306, 167, 168, 169,
	307, 308, 441, 442, 443, 170, 171, 309, 310, 311,
	0, 172, 444, 173, 445, 446, 397, 447, 174, 312,
	448, 313, 449, 175, 176, 177, 178, 314, 315, 399,
	450, 182, 451, 179, 452, 398, 180, 316, 181, 317,
	318, 319, 320, 321, 453, 322, 454, 400, 183, 184,
	185, 401, 186, 187, 188, 455, 190, 189, 456, 323,
	402, 191, 403, 457, 192, 458, 459, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	460, 461, 462, 325, 203, 326, 204, 205, 463, 206,
	464, 465, 207, 466, 467, 208, 327, 405, 209, 406,
	328, 210, 211, 212, 213, 214, 468, 215, 329, 216,
	330, 217, 469, 218, 219, 220, 221, 222, 331, 223,
	224, 470, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 471, 237, 407, 238, 239, 332,
	240, 0, 244, 245, 246, 247, 472, 249, 333, 248,
	250, 251, 473, 252, 241, 242, 253, 408, 254, 334,
	335, 255, 474, 261, 256, 257, 243, 258, 260, 336,
	259, 337, 475, 262, 476, 263, 264, 265, 266, 267,
	268, 269, 477, 338, 339, 340, 478, 479, 270, 271,
	341, 342, 480, 272, 273, 274, 275, 481, 482, 276,
	277, 278, 279, 483, 280, 484, 343, 281, 282, 283,
	344, 345, 485, 486, 284, 487, 488, 489, 490, 285,
	286, 287, 288, 289, 390, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 0,
	137, 138, 409, 139, 410, 411, 412, 413, 290, 414,
	415, 416, 417, 140, 141, 142, 291, 292, 293, 294,
	143, 295, 296, 418, 144, 297, 298, 145, 146, 419,
	420, 299, 300, 301, 421, 147, 302, 422, 395, 423,
	148, 149, 150, 0, 151, 424, 152, 153, 154, 425,
	396, 155, 156, 426, 427, 429, 428, 430, 431, 432,
	157, 158, 349, 159, 303, 160, 304, 305, 433, 161,
	434, 162, 435, 163, 436, 437, 164, 165, 438, 166,
	439, 0, 440, 306, 167, 168, 169, 307, 308, 441,
	442, 443, 170, 171, 309, 310, 311, 0, 172, 444,
	173, 445, 446, 397, 447, 174, 312, 448, 313, 449,
	175, 176, 177, 178, 314, 315, 399, 450, 182, 451,
	179, 452, 398, 180, 316, 181, 317, 318, 319, 320,
	321, 453, 322, 454, 400, 183, 184, 185, 401, 186,
	187, 188, 455, 190, 189, 456, 323, 402, 191, 403,
	457, 192, 458, 459, 193, 0, 194, 195, 196, 198,
	324, 197, 404, 199, 200, 202, 201, 460, 461, 462,
	325, 203, 326, 204, 205, 463, 206, 464, 465, 207,
	466, 467, 208, 327, 405, 209, 406, 328, 210, 211,
	212, 213, 214, 468, 215, 329, 216, 330, 217, 469,
	218, 219, 220, 221, 222, 331, 223, 224, 470, 225,
	226, 227, 228, 229, 231, 232, 230, 233, 234, 235,
	236, 471, 237, 407, 238, 239, 332, 240, 0, 244,
	245, 246, 247, 472, 249, 333, 248, 250, 251, 473,
	252, 241, 242, 253, 408, 254, 334, 335, 255, 474,
	261, 256, 257, 243, 258, 260, 336, 259, 337, 475,
	262, 476, 263, 264, 265, 266, 267, 268, 269, 477,
	338, 339, 340, 478, 479, 270, 271, 341, 342, 480,
	272, 273, 274, 275, 481, 482, 276, 277, 278, 279,
	483, 280, 484, 343, 281, 282, 283, 344, 345, 485,
	486, 284, 487, 488, 489, 490, 285, 286, 287, 288,
	289, 686, 675, 676, 673, 674, 665, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 138, 0,
	139, 0, 0, 0, 0, 703, 668, 0, 0, 0,
	140, 141, 142, 291, 718, 293, 719, 143, 720, 721,
	0, 144, 297, 298, 145, 146, 671, 702, 722, 723,
	301, 0, 147, 714, 0, 694, 0, 148, 149, 150,
	0, 151, 0, 152, 153, 154, 0, 396, 155, 156,
	0, 695, 696, 698, 0, 697, 699, 157, 158, 349,
	159, 724, 160, 725, 726, 876, 161, 0, 162, 0,
	163, 0, 0, 717, 165, 0, 166, 0, 0, 0,
	659, 167, 168, 169, 704, 705, 682, 0, 0, 170,
	171, 727, 728, 729, 0, 172, 0, 173, 0, 0,
	397, 0, 174, 715, 0, 313, 0, 175, 176, 177,
	178, 711, 713, 399, 0, 182, 0, 179, 0, 398,
	180, 730, 181, 731, 732, 733, 734, 735, 0, 693,
	0, 400, 183, 184, 185, 401, 186, 187, 188, 0,
	190, 189, 0, 716, 402, 191, 403, 0, 192, 0,
	0, 193, 0, 194, 195, 196, 198, 324, 197, 404,
	199, 200, 202, 201, 654, 0, 683, 712, 203, 736,
	204, 205, 0, 206, 0, 0, 207, 0, 0, 208,
	327, 405, 209, 406, 706, 210, 211, 212, 213, 214,
	0, 215, 707, 216, 330, 217, 0, 218, 219, 220,
	221, 222, 737, 223, 224, 0, 225, 226, 227, 228,
	229, 231, 232, 230, 233, 234, 235, 236, 0, 237,
	407, 238, 239, 660, 240, 0, 244, 245, 246, 247,
	121, 249, 333, 248, 250, 251, 700, 252, 241, 242,
	253, 408, 254, 738, 335, 255, 0, 261, 256, 257,
	243, 258, 260, 739, 259, 708, 0, 262, 125, 263,
	264, 265, 266, 267, 268, 269, 0, 338, 740, 741,
	0, 0, 270, 271, 709, 710, 681, 272, 273, 274,
	275, 0, 0, 276, 277, 278, 279, 701, 280, 0,
	343, 281, 282, 283, 646, 742, 0, 0, 284, 0,
	0, 0, 119, 285, 286, 287, 288, 289, 655, 120,
	0, 0, 0, 0, 653, 0, 0, 0, 0, 651,
	652, 686, 675, 676, 673, 674, 665, 0, 661, 0,
	0, 0, 0, 664, 0, 0, 0, 137, 138, 1295,
	139, 0, 0, 0, 0, 703, 668, 0, 0, 0,
	140, 141, 142, 291, 718, 293, 719, 143, 720, 721,
	0, 144, 297, 298, 145, 146, 671, 702, 722, 723,
	301, 0, 147, 714, 0, 694, 0, 148, 149, 150,
	0, 151, 0, 152, 153, 154, 0, 396, 155, 156,
	0, 695, 696, 698, 0, 697, 699, 157, 158, 349,
	159, 724, 160, 725, 726, 0, 161, 0, 162, 0,
	163, 1296, 0, 717, 165, 0, 166, 0, 0, 0,
	659, 167, 168, 169, 704, 705, 682, 0, 0, 170,
	171, 727, 728, 729, 0, 172, 0, 173, 0, 0,
	397, 0, 174, 715, 0, 313, 0, 175, 176, 177,
	178, 711, 713, 399, 0, 182, 0, 179, 0, 398,
	180, 730, 181, 731, 732, 733, 734, 735, 0, 693,
	0, 400, 183, 184, 185, 401, 186, 187, 188, 0,
	190, 189, 0, 716, 402, 191, 403, 0, 192, 0,
	0, 193, 0, 194, 195, 196, 198, 324, 197, 404,
	199, 200, 202, 201, 654, 0, 683, 712, 203, 736,
	204, 205, 0, 206, 0, 0, 207, 0, 0, 208,
	327, 405, 209, 406, 706, 210, 211, 212, 213, 214,
	0, 215, 707, 216, 330, 217, 0, 218, 219, 220,
	221, 222, 737, 223, 224, 0, 225, 226, 227, 228,
	229, 231, 232, 230, 233, 234, 235, 236, 0, 237,
	407, 238, 239, 660, 240, 0, 244, 245, 246, 247,
	0, 249, 333, 248, 250, 251, 700, 252, 241, 242,
	253, 408, 254, 738, 335, 255, 0, 261, 256, 257,
	243, 258, 260, 739, 259, 708, 0, 262, 0, 263,
	264, 265, 266, 267, 268, 269, 0, 338, 740, 741,
	0, 0, 270, 271, 709, 710, 681, 272, 273, 274,
	275, 0, 0, 276, 277, 278, 279, 701, 280, 0,
	343, 281, 282, 283, 344, 742, 1294, 0, 284, 0,
	0, 0, 0, 285, 286, 287, 288, 289, 655, 0,
	0, 0, 0, 0, 653, 0, 0, 0, 0, 651,
	652, 1297, 686, 675, 676, 673, 674, 665, 661, 1292,
	0, 0, 0, 664, 0, 0, 0, 0, 137, 138,
	0, 139, 0, 0, 0, 0, 703, 668, 0, 0,
	0, 140, 141, 142, 291, 718, 293, 719, 143, 720,
	721, 0, 144, 297, 298, 145, 146, 671, 702, 722,
	723, 301, 0, 147, 714, 0, 694, 0, 148, 149,
	150, 0, 151, 0, 152, 153, 154, 0, 396, 155,
	156, 0, 695, 696, 698, 0, 697, 699, 157, 158,
	349, 159, 724, 160, 725, 726, 0, 161, 0, 162,
	0, 163, 0, 0, 717, 165, 0, 166, 0, 0,
	0, 659, 167, 168, 169, 704, 705, 682, 0, 0,
	170, 171, 727, 728, 729, 0, 172, 0, 173, 0,
	0, 397, 0, 174, 715, 0, 313, 0, 175, 176,
	177, 178, 711, 713, 399, 0, 182, 0, 179, 0,
	398, 180, 730, 181, 731, 732, 733, 734, 735, 0,
	693, 0, 400, 183, 184, 185, 401, 186, 187, 188,
	0, 190, 189, 0, 716, 402, 191, 403, 0, 192,
	0, 0, 193, 0, 194, 195, 196, 198, 324, 197,
	404, 199, 200, 202, 201, 654, 0, 683, 712, 203,
	736, 204, 205, 0, 206, 0, 0, 207, 0, 0,
	208, 327, 405, 209, 406, 706, 210, 211, 212, 213,
	214, 0, 215, 707, 216, 330, 217, 0, 218, 219,
	220, 221, 222, 737, 223, 224, 0, 225, 226, 227,
	228, 229, 231, 232, 230, 233, 234, 235, 236, 0,
	237, 407, 238, 239, 660, 240, 0, 244, 245, 246,
	247, 121, 249, 333, 248, 250, 251, 700, 252, 241,
	242, 253, 408, 254, 738, 335, 255, 0, 261, 256,
	257, 243, 258, 260, 739, 259, 708, 0, 262, 125,
	263, 264, 265, 266, 267, 268, 269, 0, 338, 740,
	741, 0, 0, 270, 271, 709, 710, 681, 272, 273,
	274, 275, 0, 0, 276, 277, 278, 279, 701, 280,
	0, 343, 281, 282, 283, 646, 742, 0, 0, 284,
	0, 0, 0, 119, 285, 286, 287, 288, 289, 655,
	120, 0, 0, 0, 0, 653, 0, 0, 0, 0,
	651, 652, 686, 675, 676, 673, 674, 665, 0, 661,
	0, 0, 0, 0, 664, 0, 0, 0, 137, 138,
	0, 139, 0, 0, 0, 0, 703, 668, 0, 0,
	0, 140, 141, 142, 291, 718, 293, 719, 143, 720,
	721, 1342, 144, 297, 298, 145, 146, 671, 702, 722,
	723, 301, 0, 147, 714, 0, 694, 0, 148, 149,
	150, 0, 151, 0, 152, 153, 154, 0, 396, 155,
	156, 0, 695, 696, 698, 0, 697, 699, 157, 158,
	349, 159, 724, 160, 725, 726, 0, 161, 0, 162,
	0, 163, 0, 0, 717, 165, 0, 166, 0, 0,
	0, 659, 167, 168, 169, 704, 705, 682, 0, 0,
	170, 171, 727, 728, 729, 0, 172, 0, 173, 0,
	1347, 397, 0, 174, 715, 0, 313, 0, 175, 176,
	177, 178, 711, 713, 399, 0, 182, 0, 179, 0,
	398, 180, 730, 181, 731, 732, 733, 734, 735, 0,
	693, 0, 400, 183, 184, 185, 401, 186, 187, 188,
	0, 190, 189, 1343, 716, 402, 191, 403, 0, 192,
	0, 0, 193, 0, 194, 195, 196, 198, 324, 197,
	404, 199, 200, 202, 201, 654, 0, 683, 712, 203,
	736, 204, 205, 0, 206, 0, 0, 207, 0, 0,
	208, 327, 405, 209, 406, 706, 210, 211, 212, 213,
	214, 0, 215, 707, 216, 330, 217, 0, 218, 219,
	220, 221, 222, 737, 223, 224, 0, 225, 226, 227,
	228, 229, 231, 232, 230, 233, 234, 235, 236, 0,
	237, 407, 238, 239, 660, 240, 0, 244, 245, 246,
	247, 0, 249, 333, 248, 250, 251, 700, 252, 241,
	242, 253, 408, 254, 738, 335, 255, 0, 261, 256,
	257, 243, 258, 260, 739, 259, 708, 0, 262, 0,
	263, 264, 265, 266, 267, 268, 269, 0, 338, 740,
	741, 0, 1344, 270, 271, 709, 710, 681, 272, 273,
	274, 275, 0, 0, 276, 277, 278, 279, 701, 280,
	0, 343, 281, 282, 283, 344, 742, 0, 0, 284,
	0, 0, 0, 0, 285, 286, 287, 288, 289, 655,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 0,
	651, 652, 686, 675, 676, 673, 674, 665, 0, 661,
	0, 0, 0, 0, 664, 0, 0, 0, 137, 138,
	0, 139, 0, 0, 0, 0, 703, 668, 0, 0,
	0, 140, 141, 142, 291, 718, 293, 719, 143, 720,
	721, 0, 144, 297, 298, 145, 146, 671, 702, 722,
	723, 301, 0, 147, 714, 0, 694, 0, 148, 149,
	150, 0, 151, 0, 152, 153, 154, 0, 396, 155,
	156, 0, 695, 696, 698, 0, 697, 699, 157, 158,
	349, 159, 724, 160, 725, 726, 0, 161, 0, 162,
	0, 163, 0, 0, 717, 165, 0, 166, 0, 0,
	0, 659, 167, 168, 169, 704, 705, 682, 0, 0,
	170, 171, 727, 728, 729, 0, 172, 0, 173, 0,
	0, 397, 0, 174, 715, 0, 313, 0, 175, 176,
	177, 178, 711, 713, 399, 0, 182, 0, 179, 0,
	398, 180, 730, 181, 731, 732, 733, 734, 735, 0,
	693, 0, 400, 183, 184, 185, 401, 186, 187, 188,
	0, 190, 189, 0, 716, 402, 191, 403, 0, 192,
	0, 0, 193, 0, 194, 195, 196, 198, 324, 197,
	404, 199, 200, 202, 201, 654, 1718, 683, 712, 203,
	736, 204, 205, 0, 206, 0, 0, 207, 0, 0,
	208, 327, 405, 209, 406, 706, 210, 211, 212, 213,
	214, 0, 215, 707, 216, 330, 217, 0, 218, 219,
	220, 221, 222, 737, 223, 224, 0, 225, 226, 227,
	228, 229, 231, 232, 230, 233, 234, 235, 236, 0,
	237, 407, 238, 239, 660, 240, 0, 244, 245, 246,
	247, 0, 249, 333, 248, 250, 251, 700, 252, 241,
	242, 253, 408, 254, 738, 335, 255, 0, 261, 256,
	257, 243, 258, 260, 739, 259, 708, 0, 262, 0,
	263, 264, 265, 266, 267, 268, 269, 0, 338, 740,
	741, 0, 0, 270, 271, 709, 710, 681, 272, 273,
	274, 275, 0, 0, 276, 277, 278, 279, 701, 280,
	0, 343, 281, 282, 283, 344, 742, 0, 0, 284,
	0, 0, 0, 0, 285, 286, 287, 288, 289, 655,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 0,
	651, 652, 870, 686, 675, 676, 673, 674, 665, 661,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 137,
	138, 0, 139, 0, 0, 0, 0, 703, 668, 0,
	0, 0, 140, 141, 142, 291, 718, 293, 719, 143,
	720, 721, 0, 144, 297, 298, 145, 146, 671, 702,
	722, 723, 301, 0, 147, 714, 0, 694, 0, 148,
	149, 150, 0, 151, 0, 152, 153, 154, 0, 396,
	155, 156, 0, 695, 696, 698, 0, 697, 699, 157,
	158, 349, 159, 724, 160, 725, 726, 0, 161, 0,
	162, 0, 163, 0, 0, 717, 165, 0, 166, 0,
	0, 0, 659, 167, 168, 169, 704, 705, 682, 0,
	0, 170, 171, 727, 728, 729, 0, 172, 0, 173,
	0, 0, 397, 0, 174, 715, 0, 313, 0, 175,
	176, 177, 178, 711, 713, 399, 0, 182, 1131, 179,
	0, 398, 180, 730, 181, 731, 732, 733, 734, 735,
	0, 693, 0, 400, 183, 184, 185, 401, 186, 187,
	188, 0, 190, 189, 0, 716, 402, 191, 403, 0,
	192, 0, 0, 193, 0, 194, 195, 196, 198, 324,
	197, 404, 199, 200, 202, 201, 654, 0, 683, 712,
	203, 736, 204, 205, 0, 206, 0, 0, 207, 0,
	0, 208, 327, 405, 209, 406, 706, 210, 211, 212,
	213, 214, 0, 215, 707, 216, 330, 217, 1130, 218,
	219, 220, 221, 222, 737, 223, 224, 0, 225, 226,
	227, 228, 229, 231, 232, 230, 233, 234, 235, 236,
	0, 237, 407, 238, 239, 660, 240, 0, 244, 245,
	246, 247, 0, 249, 333, 248, 250, 251, 700, 252,
	241, 242, 253, 408, 254, 738, 335, 255, 0, 261,
	256, 257, 243, 258, 260, 739, 259, 708, 0, 262,
	0, 263, 264, 265, 266, 267, 268, 269, 0, 338,
	740, 741, 0, 0, 270, 271, 709, 710, 681, 272,
	273, 274, 275, 0, 0, 276, 277, 278, 279, 701,
	280, 0, 343, 281, 282, 283, 344, 742, 0, 0,
	284, 0, 0, 0, 0, 285, 286, 287, 288, 289,
	655, 0, 0, 0, 0, 0, 653, 0, 0, 0,
	0, 651, 652, 686, 675, 676, 673, 674, 665, 0,
	661, 0, 0, 0, 0, 664, 0, 0, 0, 137,
	138, 0, 139, 0, 0, 0, 0, 703, 668, 0,
	0, 0, 140, 141, 142, 291, 718, 293, 719, 143,
	720, 721, 0, 144, 297, 298, 145, 146, 671, 702,
	722, 723, 301, 0, 147, 714, 0, 694, 0, 148,
	149, 150, 0, 151, 0, 152, 153, 154, 0, 396,
	155, 156, 0, 695, 696, 698, 0, 697, 699, 157,
	158, 349, 159, 724, 160, 725, 726, 0, 161, 0,
	162, 0, 163, 0, 0, 717, 165, 0, 166, 0,
	0, 0, 659, 167, 168, 169, 704, 705, 682, 0,
	0, 170, 171, 727, 728, 729, 0, 172, 0, 173,
	0, 0, 397, 0, 174, 715, 0, 313, 0, 175,
	176, 177, 178, 711, 713, 399, 0, 182, 0, 179,
	0, 398, 180, 730, 181, 731, 732, 733, 734, 735,
	0, 693, 0, 400, 183, 184, 185, 401, 186, 187,
	188, 0, 190, 189, 0, 716, 402, 191, 403, 0,
	192, 0, 0, 193, 0, 194, 195, 196, 198, 324,
	197, 404, 199, 200, 202, 201, 654, 0, 683, 712,
	203, 736, 204, 205, 0, 206, 0, 0, 207, 0,
	0, 208, 327, 405, 209, 406, 706, 210, 211, 212,
	213, 214, 0, 215, 707, 216, 330, 217, 0, 218,
	219, 220, 221, 222, 737, 223, 224, 0, 225, 226,
	227, 228, 229, 231, 232, 230, 233, 234, 235, 236,
	0, 237, 407, 238, 239, 660, 240, 0, 244, 245,
	246, 247, 0, 249, 333, 248, 250, 251, 700, 252,
	241, 242, 253, 408, 254, 738, 335, 255, 0, 261,
	256, 257, 243, 258, 260, 739, 259, 708, 0, 262,
	0, 263, 264, 265, 266, 267, 268, 269, 0, 338,
	740, 741, 0, 0, 270, 271, 709, 710, 681, 272,
	273, 274, 275, 0, 0, 276, 277, 278, 279, 701,
	280, 0, 343, 281, 282, 283, 344, 742, 0, 0,
	284, 0, 0, 0, 0, 285, 286, 287, 288, 289,
	655, 0, 0, 0, 0, 0, 653, 0, 0, 0,
	0, 651, 652, 0, 0, 0, 0, 0, 960, 1287,
	661, 0, 0, 0, 0, 664, 686, 675, 676, 673,
	674, 665, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 138, 0, 139, 0, 0, 0, 0,
	703, 668, 0, 0, 0, 140, 141, 142, 291, 718,
	293, 719, 143, 720, 721, 0, 144, 297, 298, 145,
	146, 671, 702, 722, 723, 301, 0, 147, 714, 0,
	694, 0, 148, 149, 150, 0, 151, 0, 152, 153,
	154, 0, 396, 155, 156, 0, 695, 696, 698, 0,
	697, 699, 157, 158, 349, 159, 724, 160, 725, 726,
	0, 161, 0, 162, 0, 163, 0, 0, 717, 165,
	0, 166, 0, 0, 0, 659, 167, 168, 169, 704,
	705, 682, 0, 0, 170, 171, 727, 728, 729, 0,
	172, 0, 173, 0, 0, 397, 0, 174, 715, 0,
	313, 0, 175, 176, 177, 178, 711, 713, 399, 0,
	182, 0, 179, 0, 398, 180, 730, 181, 731, 732,
	733, 734, 735, 0, 693, 0, 400, 183, 184, 185,
	401, 186, 187, 188, 0, 190, 189, 0, 716, 402,
	191, 403, 0, 192, 0, 0, 193, 0, 194, 195,
	196, 198, 324, 197, 404, 199, 200, 202, 201, 654,
	0, 683, 712, 203, 736, 204, 205, 0, 206, 0,
	0, 207, 0, 0, 208, 327, 405, 209, 406, 706,
	210, 211, 212, 213, 214, 0, 215, 707, 216, 330,
	217, 0, 218, 219, 220, 221, 222, 737, 223, 224,
	0, 225, 226, 227, 228, 229, 231, 232, 230, 233,
	234, 235, 236, 0, 237, 407, 238, 239, 660, 240,
	0, 244, 245, 246, 247, 0, 249, 333, 248, 250,
	251, 700, 252, 241, 242, 253, 408, 254, 738, 335,
	255, 0, 261, 256, 257, 243, 258, 260, 739, 259,
	708, 0, 262, 0, 263, 264, 265, 266, 267, 268,
	269, 0, 338, 740, 741, 0, 0, 270, 271, 709,
	710, 681, 272, 273, 274, 275, 0, 0, 276, 277,
	278, 279, 701, 280, 0, 343, 281, 282, 283, 344,
	742, 0, 0, 284, 0, 0, 0, 0, 285, 286,
	287, 288, 289, 655, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 651, 652, 686, 675, 676, 673,
	674, 665, 0, 661, 1800, 0, 0, 0, 664, 0,
	0, 0, 137, 138, 0, 139, 0, 0, 0, 0,
	703, 668, 0, 0, 0, 140, 141, 142, 291, 718,
	293, 719, 143, 720, 721, 0, 144, 297, 298, 145,
	146, 671, 702, 722, 723, 301, 0, 147, 714, 0,
	694, 0, 148, 149, 150, 0, 151, 0, 152, 153,
	154, 0, 396, 155, 156, 0, 695, 696, 698, 0,
	697, 699, 157, 158, 349, 159, 724, 160, 725, 726,
	0, 161, 0, 162, 0, 163, 0, 0, 717, 165,
	0, 166, 0, 0, 0, 659, 167, 168, 169, 704,
	705, 682, 0, 0, 170, 171, 727, 728, 729, 0,
	172, 0, 173, 0, 0, 397, 0, 174, 715, 0,
	313, 0, 175, 176, 177, 178, 711, 713, 399, 0,
	182, 0, 179, 0, 398, 180, 730, 181, 731, 732,
	733, 734, 735, 0, 693, 0, 400, 183, 184, 185,
	401, 186, 187, 188, 0, 190, 189, 0, 716, 402,
	191, 403, 0, 192, 0, 0, 193, 0, 194, 195,
	196, 198, 324, 197, 404, 199, 200, 202, 201, 654,
	0, 683, 712, 203, 736, 204, 205, 0, 206, 0,
	0, 207, 0, 0, 208, 327, 405, 209, 406, 706,
	210, 211, 212, 213, 214, 0, 215, 707, 216, 330,
	217, 0, 218, 219, 220, 221, 222, 737, 223, 224,
	0, 225, 226, 227, 228, 229, 231, 232, 230, 233,
	234, 235, 236, 0, 237, 407, 238, 239, 660, 240,
	0, 244, 245, 246, 247, 0, 249, 333, 248, 250,
	251, 700, 252, 241, 242, 253, 408, 254, 738, 335,
	255, 0, 261, 256, 257, 243, 258, 260, 739, 259,
	708, 0, 262, 0, 263, 264, 265, 266, 267, 268,
	269, 0, 338, 740, 741, 0, 0, 270, 271, 709,
	710, 681, 272, 273, 274, 275, 0, 0, 276, 277,
	278, 279, 701, 280, 0, 343, 281, 282, 283, 344,
	742, 1749, 0, 284, 0, 0, 0, 0, 285, 286,
	287, 288, 289, 655, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 651, 652, 686, 675, 676, 673,
	674, 665, 0, 661, 0, 0, 0, 0, 664, 0,
	0, 0, 137, 138, 0, 139, 0, 0, 0, 0,
	703, 668, 0, 0, 0, 140, 141, 142, 291, 718,
	293, 719, 143, 720, 721, 0, 144, 297, 298, 145,
	146, 671, 702, 722, 723, 301, 0, 147, 714, 0,
	694, 0, 148, 149, 150, 0, 151, 0, 152, 153,
	154, 0, 396, 155, 156, 0, 695, 696, 698, 0,
	697, 699, 157, 158, 349, 159, 724, 160, 725, 726,
	0, 161, 0, 162, 0, 163, 0, 0, 717, 165,
	0, 166, 0, 0, 0, 659, 167, 168, 169, 704,
	705, 682, 0, 0, 170, 171, 727, 728, 729, 0,
	172, 0, 173, 0, 0, 397, 0, 174, 715, 0,
	313, 0, 175, 176, 177, 178, 711, 713, 399, 0,
	182, 0, 179, 0, 398, 180, 730, 181, 731, 732,
	733, 734, 735, 0, 693, 0, 400, 183, 184, 185,
	401, 186, 187, 188, 0, 190, 189, 0, 716, 402,
	191, 403, 0, 192, 0, 0, 193, 0, 194, 195,
	196, 198, 324, 197, 404, 199, 200, 202, 201, 654,
	0, 683, 712, 203, 736, 204, 205, 0, 206, 0,
	0, 207, 0, 0, 208, 327, 405, 209, 406, 706,
	210, 211, 212, 213, 214, 0, 215, 707, 216, 330,
	217, 0, 218, 219, 220, 221, 222, 737, 223, 224,
	0, 225, 226, 227, 228, 229, 231, 232, 230, 233,
	234, 235, 236, 0, 237, 407, 238, 239, 660, 240,
	0, 244, 245, 246, 247, 0, 249, 333, 248, 250,
	251, 700, 252, 241, 242, 253, 408, 254, 738, 335,
	255, 0, 261, 256, 257, 243, 258, 260, 739, 259,
	708, 0, 262, 0, 263, 264, 265, 266, 267, 268,
	269, 0, 338, 740, 741, 0, 0, 270, 271, 709,
	710, 681, 272, 273, 274, 275, 0, 0, 276, 277,
	278, 279, 701, 280, 0, 343, 281, 282, 283, 344,
	742, 0, 0, 284, 0, 0, 0, 0, 285, 286,
	287, 288, 289, 655, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 651, 652, 686, 675, 676, 673,
	674, 665, 0, 661, 1739, 0, 0, 0, 664, 0,
	0, 0, 137, 138, 0, 139, 0, 0, 0, 0,
	703, 668, 0, 0, 0, 140, 141, 142, 291, 718,
	293, 719, 143, 720, 721, 0, 144, 297, 298, 145,
	146, 671, 702, 722, 723, 301, 0, 147, 714, 0,
	694, 0, 148, 149, 150, 0, 151, 0, 152, 153,
	154, 0, 396, 155, 156, 0, 695, 696, 698, 0,
	697, 699, 157, 158, 349, 159, 724, 160, 725, 726,
	876, 161, 0, 162, 0, 163, 0, 0, 717, 165,
	0, 166, 0, 0, 0, 659, 167, 168, 169, 704,
	705, 682, 0, 0, 170, 171, 727, 728, 729, 0,
	172, 0, 173, 0, 0, 397, 0, 174, 715, 0,
	313, 0, 175, 176, 177, 178, 711, 713, 399, 0,
	182, 0, 179, 0, 398, 180, 730, 181, 731, 732,
	733, 734, 735, 0, 693, 0, 400, 183, 184, 185,
	401, 186, 187, 188, 0, 190, 189, 0, 716, 402,
	191, 403, 0, 192, 0, 0, 193, 0, 194, 195,
	196, 198, 324, 197, 404, 199, 200, 202, 201, 654,
	0, 683, 712, 203, 736, 204, 205, 0, 206, 0,
	0, 207, 0, 0, 208, 327, 405, 209, 406, 706,
	210, 211, 212, 213, 214, 0, 215, 707, 216, 330,
	217, 0, 218, 219, 220, 221, 222, 737, 223, 224,
	0, 225, 226, 227, 228, 229, 231, 232, 230, 233,
	234, 235, 236, 0, 237, 407, 238, 239, 660, 240,
	0, 244, 245, 246, 247, 0, 249, 333, 248, 250,
	251, 700, 252, 241, 242, 253, 408, 254, 738, 335,
	255, 0, 261, 256, 257, 243, 258, 260, 739, 259,
	708, 0, 262, 0, 263, 264, 265, 266, 267, 268,
	269, 0, 338, 740, 741, 0, 0, 270, 271, 709,
	710, 681, 272, 273, 274, 275, 0, 0, 276, 277,
	278, 279, 701, 280, 0, 343, 281, 282, 283, 344,
	742, 0, 0, 284, 0, 0, 0, 0, 285, 286,
	287, 288, 289, 655, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 651, 652, 686, 675, 676, 673,
	674, 665, 0, 661, 0, 0, 0, 0, 664, 0,
	0, 0, 137, 138, 0, 139, 0, 0, 0, 0,
	703, 668, 0, 0, 0, 140, 141, 142, 291, 718,
	293, 719, 143, 720, 721, 0, 144, 297, 298, 145,
	146, 671, 702, 722, 723, 301, 0, 147, 714, 0,
	694, 0, 148, 149, 150, 0, 151, 0, 152, 153,
	154, 0, 396, 155, 156, 0, 695, 696, 698, 0,
	697, 699, 157, 158, 349, 159, 724, 160, 725, 726,
	0, 161, 0, 162, 0, 163, 0, 0, 717, 165,
	0, 166, 0, 0, 0, 659, 167, 168, 169, 704,
	705, 682, 0, 0, 170, 171, 727, 728, 729, 0,
	172, 0, 173, 0, 1347, 397, 0, 174, 715, 0,
	313, 0, 175, 176, 177, 178, 711, 713, 399, 0,
	182, 0, 179, 0, 398, 180, 730, 181, 731, 732,
	733, 734, 735, 0, 693, 0, 400, 183, 184, 185,
	401, 186, 187, 188, 0, 190, 189, 0, 716, 402,
	191, 403, 0, 192, 0, 0, 193, 0, 194, 195,
	196, 198, 324, 197, 404, 199, 200, 202, 201, 654,
	0, 683, 712, 203, 736, 204, 205, 0, 206, 0,
	0, 207, 0, 0, 208, 327, 405, 209, 406, 706,
	210, 211, 212, 213, 214, 0, 215, 707, 216, 330,
	217, 0, 218, 219, 220, 221, 222, 737, 223, 224,
	0, 225, 226, 227, 228, 229, 231, 232, 230, 233,
	234, 235, 236, 0, 237, 407, 238, 239, 660, 240,
	0, 244, 245, 246, 247, 0, 249, 333, 248, 250,
	251, 700, 252, 241, 242, 253, 408, 254, 738, 335,
	255, 0, 261, 256, 257, 243, 258, 260, 739, 259,
	708, 0, 262, 0, 263, 264, 265, 266, 267, 268,
	269, 0, 338, 740, 741, 0, 0, 270, 271, 709,
	710, 681, 272, 273, 274, 275, 0, 0, 276, 277,
	278, 279, 701, 280, 0, 343, 281, 282, 283, 344,
	742, 0, 0, 284, 0, 0, 0, 0, 285, 286,
	287, 288, 289, 655, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 651, 652, 686, 675, 676, 673,
	674, 665, 0, 661, 0, 0, 0, 0, 664, 0,
	0, 0, 137, 138, 0, 139, 0, 0, 0, 0,
	703, 668, 0, 0, 0, 140, 141, 142, 291, 718,
	293, 719, 143, 720, 721, 0, 144, 297, 298, 145,
	146, 671, 702, 722, 723, 301, 0, 147, 714, 0,
	694, 0, 148, 149, 150, 0, 151, 0, 152, 153,
	154, 0, 396, 155, 156, 0, 695, 696, 698, 0,
	697, 699, 157, 158, 349, 159, 724, 160, 725, 726,
	0, 161, 0, 162, 0, 163, 0, 0, 717, 165,
	0, 166, 0, 0, 0, 659, 167, 168, 169, 704,
	705, 682, 0, 0, 170, 171, 727, 728, 729, 0,
	172, 0, 173, 0, 0, 397, 0, 174, 715, 0,
	313, 0, 175, 176, 177, 178, 711, 713, 399, 0,
	182, 0, 179, 0, 398, 180, 730, 181, 731, 732,
	733, 734, 735, 0, 693, 0, 400, 183, 184, 185,
	401, 186, 187, 188, 0, 190, 189, 0, 716, 402,
	191, 403, 0, 192, 0, 0, 193, 0, 194, 195,
	196, 198, 324, 197, 404, 199, 200, 202, 201, 654,
	0, 683, 712, 203, 736, 204, 205, 0, 206, 0,
	0, 207, 0, 0, 208, 327, 405, 209, 406, 706,
	210, 211, 212, 213, 214, 0, 215, 707, 216, 330,
	217, 0, 218, 219, 220, 221, 222, 737, 223, 224,
	0, 225, 226, 227, 228, 229, 231, 232, 230, 233,
	234, 235, 236, 0, 237, 407, 238, 239, 660, 240,
	0, 244, 245, 246, 247, 0, 249, 333, 248, 250,
	251, 700, 252, 241, 242, 253, 408, 254, 738, 335,
	255, 0, 261, 256, 257, 243, 258, 260, 739, 259,
	708, 0, 262, 0, 263, 264, 265, 266, 267, 268,
	269, 0, 338, 740, 741, 0, 0, 270, 271, 709,
	710, 681, 272, 273, 274, 275, 0, 0, 276, 277,
	278, 279, 701, 280, 0, 343, 281, 282, 283, 344,
	742, 0, 0, 284, 0, 0, 0, 0, 285, 286,
	287, 288, 289, 655, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 651, 652, 870, 686, 675, 676,
	673, 674, 665, 661, 0, 0, 0, 0, 664, 0,
	0, 0, 0, 137, 138, 0, 139, 0, 0, 0,
	0, 703, 668, 0, 0, 0, 140, 141, 142, 291,
	718, 293, 719, 143, 720, 721, 0, 144, 297, 298,
	145, 146, 671, 702, 722, 723, 301, 0, 147, 714,
	0, 694, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 396, 155, 156, 0, 695, 696, 698,
	0, 697, 699, 157, 158, 349, 159, 724, 160, 725,
	726, 0, 161, 0, 162, 0, 163, 0, 0, 717,
	165, 0, 166, 0, 0, 0, 659, 167, 168, 169,
	704, 705, 682, 0, 0, 170, 171, 727, 728, 729,
	0, 172, 0, 173, 0, 0, 397, 0, 174, 715,
	0, 313, 0, 175, 176, 177, 178, 711, 713, 399,
	0, 182, 0, 179, 0, 398, 180, 730, 181, 731,
	732, 733, 734, 735, 0, 693, 0, 400, 183, 184,
	185, 401, 186, 187, 188, 0, 190, 189, 0, 716,
	402, 191, 403, 0, 192, 0, 0, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	654, 0, 683, 712, 203, 736, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 405, 209, 406,
	706, 210, 211, 212, 213, 214, 0, 215, 707, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 737, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 407, 238, 239, 660,
	240, 0, 244, 245, 246, 247, 0, 249, 333, 248,
	250, 251, 700, 252, 241, 242, 253, 408, 254, 738,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 739,
	259, 708, 0, 262, 0, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 740, 741, 0, 0, 270, 271,
	709, 710, 681, 272, 273, 274, 275, 0, 0, 276,
	277, 278, 279, 701, 280, 0, 343, 281, 282, 283,
	344, 742, 0, 0, 284, 0, 0, 0, 0, 285,
	286, 287, 288, 289, 655, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 651, 652, 686, 675, 676,
	673, 674, 665, 0, 661, 1282, 0, 0, 0, 664,
	0, 0, 0, 137, 138, 1118, 139, 0, 0, 0,
	0, 703, 668, 0, 0, 0, 140, 141, 142, 291,
	718, 293, 719, 143, 720, 721, 0, 144, 297, 298,
	145, 146, 671, 702, 722, 723, 301, 0, 147, 714,
	0, 694, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 396, 155, 156, 0, 695, 696, 698,
	0, 697, 699, 157, 158, 349, 159, 724, 160, 725,
	726, 0, 161, 0, 162, 0, 163, 0, 0, 717,
	165, 0, 166, 0, 0, 0, 659, 167, 168, 169,
	704, 705, 682, 0, 0, 170, 171, 727, 728, 729,
	0, 172, 0, 173, 0, 0, 397, 0, 174, 715,
	0, 313, 0, 175, 176, 177, 178, 711, 713, 399,
	0, 182, 0, 179, 0, 398, 180, 730, 181, 731,
	732, 733, 734, 735, 0, 693, 0, 400, 183, 184,
	185, 401, 186, 187, 188, 0, 190, 189, 0, 716,
	402, 191, 403, 0, 192, 0, 0, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	654, 0, 683, 712, 203, 736, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 405, 209, 406,
	706, 210, 211, 212, 213, 214, 0, 215, 707, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 737, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 407, 238, 239, 660,
	240, 0, 244, 245, 246, 247, 0, 249, 333, 248,
	250, 251, 700, 252, 241, 242, 253, 408, 254, 738,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 739,
	259, 708, 0, 262, 0, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 740, 741, 0, 0, 270, 271,
	709, 710, 681, 272, 273, 274, 275, 0, 0, 276,
	277, 278, 279, 701, 280, 0, 343, 281, 282, 283,
	344, 742, 0, 0, 284, 0, 0, 0, 0, 285,
	286, 287, 288, 289, 655, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 651, 652, 686, 675, 676,
	673, 674, 665, 0, 661, 0, 0, 0, 0, 664,
	0, 0, 0, 137, 138, 0, 139, 0, 0, 0,
	0, 703, 668, 0, 0, 0, 140, 141, 142, 291,
	718, 293, 719, 143, 720, 721, 0, 144, 297, 298,
	145, 146, 671, 702, 722, 723, 301, 0, 147, 714,
	0, 694, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 396, 155, 2215, 0, 695, 696, 698,
	0, 697, 699, 157, 158, 349, 159, 724, 160, 725,
	726, 0, 161, 0, 162, 0, 163, 0, 0, 717,
	165, 0, 166, 0, 0, 0, 659, 167, 168, 169,
	704, 705, 682, 0, 0, 170, 171, 727, 728, 729,
	0, 172, 0, 173, 0, 0, 397, 0, 174, 715,
	0, 313, 0, 175, 176, 177, 178, 711, 713, 399,
	0, 182, 0, 179, 0, 398, 180, 730, 181, 731,
	732, 733, 734, 735, 0, 693, 0, 400, 183, 184,
	185, 401, 186, 187, 188, 0, 190, 189, 0, 716,
	402, 191, 403, 0, 192, 0, 0, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	654, 0, 683, 712, 203, 736, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 405, 209, 406,
	706, 210, 211, 212, 213, 214, 0, 215, 707, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 737, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 407, 238, 239, 660,
	240, 0, 244, 245, 246, 247, 0, 249, 333, 248,
	250, 251, 700, 252, 241, 242, 253, 408, 254, 738,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 739,
	259, 708, 0, 262, 0, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 740, 741, 0, 0, 270, 271,
	709, 710, 681, 272, 273, 2214, 275, 0, 0, 276,
	277, 278, 279, 701, 280, 0, 343, 281, 282, 283,
	344, 742, 0, 0, 284, 0, 0, 0, 0, 285,
	286, 287, 288, 289, 655, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 651, 652, 686, 675, 676,
	673, 674, 665, 0, 661, 0, 0, 0, 0, 664,
	0, 0, 0, 137, 138, 0, 139, 0, 0, 0,
	0, 703, 668, 0, 0, 0, 140, 141, 142, 291,
	718, 293, 719, 143, 720, 721, 0, 144, 297, 298,
	145, 146, 671, 702, 722, 723, 301, 0, 147, 714,
	0, 694, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 396, 155, 156, 0, 695, 696, 698,
	0, 697, 699, 157, 158, 349, 159, 724, 160, 725,
	726, 0, 161, 0, 162, 0, 163, 0, 0, 717,
	165, 0, 166, 0, 0, 0, 659, 167, 168, 169,
	704, 705, 682, 0, 0, 170, 171, 727, 728, 729,
	0, 172, 0, 173, 0, 0, 397, 0, 174, 715,
	0, 313, 0, 175, 176, 177, 178, 711, 713, 399,
	0, 182, 0, 179, 0, 398, 180, 730, 181, 731,
	732, 733, 734, 735, 0, 693, 0, 400, 183, 184,
	185, 401, 186, 187, 188, 0, 190, 189, 0, 716,
	402, 191, 403, 0, 192, 0, 0, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	654, 0, 683, 712, 203, 736, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 405, 209, 406,
	706, 210, 211, 212, 213, 214, 0, 215, 707, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 737, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 407, 238, 239, 660,
	240, 0, 244, 245, 246, 247, 0, 249, 333, 248,
	250, 251, 700, 252, 241, 242, 253, 408, 254, 738,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 739,
	259, 708, 0, 262, 0, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 740, 741, 0, 0, 270, 271,
	709, 710, 681, 272, 273, 274, 275, 0, 0, 276,
	277, 278, 279, 701, 280, 0, 343, 281, 282, 283,
	344, 742, 0, 0, 284, 0, 0, 0, 0, 285,
	286, 287, 288, 289, 655, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 651, 652, 686, 675, 676,
	673, 674, 665, 0, 661, 0, 0, 0, 0, 664,
	0, 0, 0, 137, 138, 0, 139, 0, 0, 0,
	0, 703, 668, 0, 0, 0, 140, 141, 142, 2213,
	718, 293, 719, 143, 720, 721, 0, 144, 297, 298,
	145, 146, 671, 702, 722, 723, 301, 0, 147, 714,
	0, 694, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 396, 155, 2215, 0, 695, 696, 698,
	0, 697, 699, 157, 158, 349, 159, 724, 160, 725,
	726, 0, 161, 0, 162, 0, 163, 0, 0, 717,
	165, 0, 166, 0, 0, 0, 659, 167, 168, 169,
	704, 705, 682, 0, 0, 170, 171, 727, 728, 729,
	0, 172, 0, 173, 0, 0, 397, 0, 174, 715,
	0, 313, 0, 175, 176, 177, 178, 711, 713, 399,
	0, 182, 0, 179, 0, 398, 180, 730, 181, 731,
	732, 733, 734, 735, 0, 693, 0, 400, 183, 184,
	185, 401, 186, 187, 188, 0, 190, 189, 0, 716,
	402, 191, 403, 0, 192, 0, 0, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	654, 0, 683, 712, 203, 736, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 405, 209, 406,
	706, 210, 211, 212, 213, 214, 0, 215, 707, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 737, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 407, 238, 239, 660,
	240, 0, 244, 245, 246, 247, 0, 249, 333, 248,
	250, 251, 700, 252, 241, 242, 253, 408, 254, 738,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 739,
	259, 708, 0, 262, 0, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 740, 741, 0, 0, 270, 271,
	709, 710, 681, 272, 273, 2214, 275, 0, 0, 276,
	277, 278, 279, 701, 280, 0, 343, 281, 282, 283,
	344, 742, 0, 0, 284, 0, 0, 0, 0, 285,
	286, 287, 288, 289, 655, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 651, 652, 1319, 675, 676,
	673, 674, 665, 0, 661, 0, 0, 0, 0, 664,
	0, 0, 0, 137, 138, 0, 139, 0, 0, 0,
	0, 703, 668, 0, 0, 0, 140, 141, 142, 291,
	718, 293, 719, 143, 720, 721, 0, 144, 297, 298,
	145, 146, 671, 702, 722, 723, 301, 0, 147, 714,
	0, 694, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 396, 155, 156, 0, 695, 696, 698,
	0, 697, 699, 157, 158, 349, 159, 724, 1322, 725,
	726, 0, 161, 0, 162, 0, 163, 0, 0, 717,
	165, 0, 166, 0, 0, 0, 659, 167, 168, 169,
	704, 705, 682, 0, 0, 170, 171, 727, 728, 729,
	0, 172, 0, 173, 0, 0, 397, 0, 174, 715,
	0, 313, 0, 175, 176, 1323, 178, 711, 713, 399,
	0, 182, 0, 179, 0, 398, 180, 730, 181, 731,
	732, 733, 734, 735, 0, 693, 0, 400, 183, 184,
	185, 401, 186, 187, 188, 0, 190, 189, 0, 716,
	402, 191, 403, 0, 192, 0, 0, 193, 0, 194,
	1324, 1321, 198, 324, 197, 404, 199, 200, 202, 201,
	654, 0, 683, 712, 203, 736, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 405, 209, 406,
	706, 210, 211, 212, 213, 214, 0, 215, 707, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 737, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 407, 238, 239, 660,
	240, 0, 244, 245, 246, 1325, 0, 249, 333, 248,
	250, 251, 700, 252, 241, 242, 253, 408, 254, 738,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 739,
	259, 708, 0, 262, 0, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 740, 741, 0, 0, 270, 271,
	709, 710, 681, 272, 273, 274, 275, 0, 0, 276,
	277, 278, 279, 701, 280, 0, 343, 281, 282, 283,
	344, 742, 0, 0, 284, 0, 0, 0, 0, 285,
	286, 287, 1320, 289, 655, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 651, 652, 686, 675, 676,
	673, 674, 665, 0, 661, 0, 0, 0, 0, 664,
	0, 0, 0, 137, 138, 0, 139, 0, 0, 0,
	0, 703, 668, 0, 0, 0, 140, 141, 142, 291,
	718, 293, 719, 143, 720, 721, 0, 144, 297, 298,
	145, 146, 671, 702, 722, 723, 301, 0, 147, 714,
	0, 694, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 396, 155, 156, 0, 695, 696, 698,
	0, 697, 699, 157, 158, 349, 159, 724, 160, 725,
	726, 0, 161, 0, 162, 0, 163, 0, 0, 717,
	165, 0, 166, 0, 0, 0, 659, 167, 168, 169,
	704, 705, 682, 0, 0, 170, 171, 727, 728, 729,
	0, 172, 0, 173, 0, 0, 397, 0, 174, 715,
	0, 313, 0, 175, 176, 177, 178, 711, 713, 399,
	0, 182, 0, 179, 0, 398, 180, 730, 181, 731,
	732, 733, 734, 735, 0, 693, 0, 400, 183, 184,
	185, 401, 186, 187, 188, 0, 190, 189, 0, 716,
	402, 191, 403, 0, 192, 0, 0, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	0, 0, 683, 712, 203, 736, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 405, 209, 406,
	706, 210, 211, 212, 213, 214, 0, 215, 707, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 737, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 407, 238, 239, 1337,
	240, 0, 244, 245, 246, 247, 0, 249, 333, 248,
	250, 251, 700, 252, 241, 242, 253, 408, 254, 738,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 739,
	259, 708, 0, 262, 0, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 740, 741, 0, 0, 270, 271,
	709, 710, 681, 272, 273, 274, 275, 0, 0, 276,
	277, 278, 279, 701, 280, 0, 343, 281, 282, 283,
	344, 742, 0, 0, 284, 0, 0, 0, 0, 285,
	286, 287, 288, 289, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 1333, 1334, 686, 675, 676,
	673, 674, 665, 0, 1336, 0, 0, 0, 0, 664,
	0, 0, 0, 137, 138, 0, 139, 0, 0, 0,
	0, 703, 668, 0, 0, 0, 140, 141, 142, 291,
	718, 293, 719, 143, 720, 721, 0, 144, 297, 298,
	145, 146, 0, 702, 722, 723, 301, 0, 147, 714,
	0, 694, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 396, 155, 156, 0, 695, 696, 698,
	0, 697, 699, 157, 158, 349, 159, 724, 160, 725,
	726, 0, 161, 0, 162, 0, 163, 0, 0, 717,
	165, 0, 166, 0, 0, 0, 306, 167, 168, 169,
	704, 705, 682, 0, 0, 170, 171, 727, 728, 729,
	0, 172, 0, 173, 0, 0, 397, 0, 174, 715,
	0, 313, 0, 175, 176, 177, 178, 711, 713, 399,
	0, 182, 0, 179, 0, 398, 180, 730, 181, 731,
	732, 733, 734, 735, 0, 693, 0, 400, 183, 184,
	185, 401, 186, 187, 188, 0, 190, 189, 0, 716,
	402, 191, 403, 0, 192, 0, 0, 193, 0, 194,
	195, 196, 198, 324, 197, 404, 199, 200, 202, 201,
	0, 0, 683, 712, 203, 736, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 405, 209, 406,
	706, 210, 211, 212, 213, 214, 0, 215, 707, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 737, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 407, 238, 239, 1337,
	240, 0, 244, 245, 246, 247, 0, 249, 333, 248,
	250, 251, 700, 252, 241, 242, 253, 408, 254, 738,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 739,
	259, 708, 0, 262, 0, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 740, 741, 0, 0, 270, 271,
	709, 710, 681, 272, 273, 274, 275, 0, 0, 276,
	277, 278, 279, 701, 280, 0, 343, 281, 282, 283,
	344, 742, 0, 0, 284, 0, 0, 0, 0, 285,
	286, 287, 288, 289, 0, 0, 686, 675, 676, 673,
	674, 665, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 138, 1336, 139, 0, 0, 0, 664,
	703, 668, 0, 0, 0, 140, 141, 142, 0, 718,
	293, 719, 143, 720, 721, 0, 144, 297, 298, 145,
	146, 671, 702, 722, 723, 301, 0, 147, 714, 0,
	694, 0, 148, 149, 150, 0, 151, 0, 152, 153,
	154, 0, 396, 155, 2215, 0, 695, 696, 698, 0,
	697, 699, 157, 158, 349, 159, 724, 160, 725, 726,
	0, 161, 0, 162, 0, 163, 0, 0, 717, 165,
	0, 166, 0, 0, 0, 659, 167, 168, 169, 704,
	705, 682, 0, 0, 170, 171, 727, 728, 729, 0,
	172, 0, 173, 0, 0, 397, 0, 174, 715, 0,
	313, 0, 175, 176, 177, 178, 711, 713, 0, 0,
	182, 0, 179, 0, 398, 180, 730, 181, 731, 732,
	733, 734, 735, 0, 693, 0, 0, 183, 184, 185,
	401, 186, 187, 188, 0, 190, 189, 0, 716, 402,
	191, 0, 0, 192, 0, 0, 193, 0, 194, 195,
	196, 198, 324, 197, 404, 199, 200, 202, 201, 654,
	0, 683, 712, 203, 736, 204, 205, 0, 206, 0,
	0, 207, 0, 0, 208, 327, 405, 209, 406, 706,
	210, 211, 212, 213, 214, 0, 215, 707, 216, 330,
	217, 0, 218, 219, 220, 221, 222, 737, 223, 224,
	0, 225, 226, 227, 228, 229, 231, 232, 230, 233,
	234, 235, 236, 0, 237, 407, 238, 239, 660, 240,
	0, 244, 245, 246, 247, 0, 249, 333, 248, 250,
	251, 700, 252, 241, 242, 253, 0, 254, 738, 335,
	255, 0, 261, 256, 257, 243, 258, 260, 739, 259,
	708, 0, 262, 0, 263, 264, 265, 266, 267, 268,
	269, 0, 338, 740, 741, 0, 0, 270, 271, 709,
	710, 681, 272, 273, 2214, 275, 0, 0, 276, 277,
	278, 279, 701, 280, 0, 343, 281, 282, 283, 344,
	742, 0, 0, 284, 0, 0, 0, 0, 285, 286,
	287, 288, 289, 686, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 652, 0, 0, 0, 137,
	138, 0, 139, 661, 0, 0, 0, 703, 664, 0,
	0, 0, 140, 141, 142, 291, 292, 293, 294, 143,
	295, 296, 0, 144, 297, 298, 145, 146, 0, 702,
	299, 300, 301, 0, 147, 714, 0, 694, 0, 148,
	149, 150, 0, 151, 0, 152, 153, 154, 0, 396,
	155, 156, 0, 695, 696, 698, 0, 697, 699, 157,
	158, 349, 159, 303, 160, 304, 305, 0, 161, 0,
	162, 0, 163, 0, 0, 164, 165, 0, 166, 0,
	0, 0, 306, 167, 168, 169, 704, 705, 0, 0,
	0, 170, 171, 309, 310, 311, 0, 172, 0, 173,
	0, 0, 397, 0, 174, 715, 0, 313, 0, 175,
	176, 177, 178, 711, 713, 399, 0, 182, 0, 179,
	0, 398, 180, 316, 181, 317, 318, 319, 320, 321,
	0, 322, 0, 400, 183, 184, 185, 401, 186, 187,
	188, 0, 190, 189, 0, 716, 402, 191, 403, 0,
	192, 0, 0, 193, 0, 194, 195, 196, 198, 324,
	197, 404, 199, 200, 202, 201, 0, 0, 0, 712,
	203, 326, 204, 205, 0, 206, 0, 0, 207, 0,
	0, 208, 327, 405, 209, 406, 706, 210, 211, 212,
	213, 214, 0, 215, 707, 216, 330, 217, 0, 218,
	219, 220, 221, 222, 331, 223, 224, 0, 225, 226,
	227, 228, 229, 231, 232, 230, 233, 234, 235, 236,
	0, 237, 407, 238, 239, 332, 240, 0, 244, 245,
	246, 247, 0, 249, 333, 248, 250, 251, 700, 252,
	241, 242, 253, 408, 254, 334, 335, 255, 0, 261,
	256, 257, 243, 258, 260, 336, 259, 708, 0, 262,
	0, 263, 264, 265, 266, 267, 268, 269, 0, 338,
	339, 340, 0, 0, 270, 271, 709, 710, 0, 272,
	273, 274, 275, 0, 0, 276, 277, 278, 279, 701,
	280, 0, 343, 281, 282, 283, 344, 345, 0, 0,
	284, 0, 570, 0, 0, 285, 286, 287, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 138,
	0, 139, 0, 0, 0, 0, 290, 0, 0, 0,
	1829, 140, 141, 142, 291, 292, 293, 294, 143, 295,
	296, 0, 144, 297, 298, 145, 146, 0, 0, 299,
	300, 301, 0, 147, 302, 0, 395, 0, 148, 149,
	150, 0, 151, 0, 152, 153, 154, 0, 396, 155,
	156, 0, 0, 0, 0, 0, 0, 0, 157, 158,
	349, 159, 303, 160, 304, 305, 0, 161, 0, 162,
	0, 163, 0, 0, 164, 165, 0, 166, 0, 0,
	0, 306, 167, 168, 169, 307, 308, 0, 0, 0,
	170, 171, 309, 310, 311, 0, 172, 0, 173, 0,
	0, 397, 0, 174, 312, 0, 313, 0, 175, 176,
	177, 178, 314, 315, 399, 0, 182, 0, 179, 0,
	398, 180, 316, 181, 317, 318, 319, 320, 321, 0,
	322, 0, 400, 183, 184, 185, 401, 186, 187, 188,
	0, 190, 189, 0, 323, 402, 191, 403, 0, 192,
	0, 0, 193, 0, 194, 195, 196, 198, 324, 197,
	404, 199, 200, 202, 201, 0, 0, 0, 325, 203,
	326, 204, 205, 0, 206, 0, 0, 207, 0, 0,
	208, 327, 405, 209, 406, 328, 210, 211, 212, 213,
	214, 0, 215, 329, 216, 330, 217, 0, 218, 219,
	220, 221, 222, 331, 223, 224, 0, 225, 226, 227,
	228, 229, 231, 232, 230, 233, 234, 235, 236, 0,
	237, 407, 238, 239, 332, 240, 0, 244, 245, 246,
	247, 121, 249, 333, 248, 250, 251, 0, 252, 241,
	242, 253, 408, 254, 334, 335, 255, 0, 261, 256,
	257, 243, 258, 260, 336, 259, 337, 0, 262, 125,
	263, 264, 265, 266, 267, 268, 269, 0, 338, 339,
	340, 0, 0, 270, 271, 341, 342, 0, 272, 273,
	274, 275, 0, 0, 276, 277, 278, 279, 0, 280,
	0, 343, 281, 282, 283, 646, 345, 0, 0, 284,
	0, 0, 0, 119, 285, 286, 287, 288, 289, 0,
	120, 570, 567, 0, 568, 563, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 138, 115,
	139, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	140, 141, 142, 291, 292, 293, 294, 143, 295, 296,
	0, 144, 297, 298, 145, 146, 0, 0, 299, 300,
	301, 0, 147, 302, 0, 395, 0, 148, 149, 150,
	0, 151, 0, 152, 153, 154, 0, 396, 155, 156,
	0, 0, 0, 0, 0, 0, 0, 157, 158, 349,
	159, 303, 160, 304, 305, 1080, 161, 0, 162, 0,
	163, 0, 0, 164, 165, 0, 166, 0, 0, 0,
	306, 167, 168, 169, 307, 308, 560, 0, 0, 170,
	171, 309, 310, 311, 0, 172, 0, 173, 0, 0,
	397, 0, 174, 312, 0, 313, 0, 175, 176, 177,
	178, 314, 315, 399, 0, 182, 0, 179, 0, 398,
	180, 316, 181, 317, 318, 319, 320, 321, 0, 322,
	0, 400, 183, 184, 185, 401, 186, 187, 188, 0,
	190, 189, 0, 323, 402, 191, 403, 0, 192, 0,
	0, 193, 0, 194, 195, 196, 198, 324, 197, 404,
	199, 200, 202, 201, 0, 0, 0, 325, 203, 326,
	204, 205, 0, 206, 561, 0, 207, 0, 0, 208,
	327, 405, 209, 406, 328, 210, 211, 212, 213, 214,
	0, 215, 329, 216, 330, 217, 0, 218, 219, 220,
	221, 222, 331, 223, 224, 0, 225, 226, 227, 228,
	229, 231, 232, 230, 233, 234, 235, 236, 0, 237,
	407, 238, 239, 332, 240, 0, 244, 245, 246, 247,
	0, 249, 333, 248, 250, 251, 0, 252, 241, 242,
	253, 408, 254, 334, 335, 255, 0, 261, 256, 257,
	243, 258, 260, 336, 259, 337, 0, 262, 0, 263,
	264, 265, 266, 267, 268, 269, 0, 338, 339, 340,
	0, 0, 270, 271, 341, 342, 559, 272, 273, 274,
	275, 0, 0, 276, 277, 278, 279, 0, 280, 0,
	343, 281, 282, 283, 344, 345, 0, 0, 284, 0,
	0, 0, 0, 285, 286, 287, 288, 289, 570, 567,
	0, 568, 563, 558, 0, 0, 0, 0, 0, 569,
	564, 0, 0, 0, 137, 138, 0, 139, 0, 0,
	0, 0, 290, 0, 0, 0, 0, 140, 141, 142,
	291, 292, 293, 294, 143, 295, 296, 0, 144, 297,
	298, 145, 146, 0, 0, 299, 300, 301, 0, 147,
	302, 0, 395, 0, 148, 149, 150, 0, 151, 0,
	152, 153, 154, 0, 396, 155, 156, 0, 0, 0,
	0, 0, 0, 0, 157, 158, 349, 159, 303, 160,
	304, 305, 1077, 161, 0, 162, 0, 163, 0, 0,
	164, 165, 0, 166, 0, 0, 0, 306, 167, 168,
	169, 307, 308, 560, 0, 0, 170, 171, 309, 310,
	311, 0, 172, 0, 173, 0, 0, 397, 0, 174,
	312, 0, 313, 0, 175, 176, 177, 178, 314, 315,
	399, 0, 182, 0, 179, 0, 398, 180, 316, 181,
	317, 318, 319, 320, 321, 0, 322, 0, 400, 183,
	184, 185, 401, 186, 187, 188, 0, 190, 189, 0,
	323, 402, 191, 403, 0, 192, 0, 0, 193, 0,
	194, 195, 196, 198, 324, 197, 404, 199, 200, 202,
	201, 0, 0, 0, 325, 203, 326, 204, 205, 0,
	206, 561, 0, 207, 0, 0, 208, 327, 405, 209,
	406, 328, 210, 211, 212, 213, 214, 0, 215, 329,
	216, 330, 217, 0, 218, 219, 220, 221, 222, 331,
	223, 224, 0, 225, 226, 227, 228, 229, 231, 232,
	230, 233, 234, 235, 236, 0, 237, 407, 238, 239,
	332, 240, 0, 244, 245, 246, 247, 0, 249, 333,
	248, 250, 251, 0, 252, 241, 242, 253, 408, 254,
	334, 335, 255, 0, 261, 256, 257, 243, 258, 260,
	336, 259, 337, 0, 262, 0, 263, 264, 265, 266,
	267, 268, 269, 0, 338, 339, 340, 0, 0, 270,
	271, 341, 342, 559, 272, 273, 274, 275, 0, 0,
	276, 277, 278, 279, 0, 280, 0, 343, 281, 282,
	283, 344, 345, 0, 0, 284, 0, 0, 0, 0,
	285, 286, 287, 288, 289, 570, 567, 0, 568, 563,
	558, 0, 0, 0, 0, 0, 569, 564, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 395,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 396, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 776,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	560, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 397, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 399, 0, 182,
	0, 179, 0, 398, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 400, 183, 184, 185, 401,
	186, 187, 188, 0, 190, 189, 0, 323, 402, 191,
	403, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 404, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 561, 0,
	207, 0, 0, 208, 327, 405, 209, 406, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 407, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 408, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	559, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	0, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 570, 567, 0, 568, 563, 558, 0, 0,
	0, 0, 0, 569, 564, 0, 0, 0, 137, 138,
	0, 139, 0, 0, 0, 0, 290, 0, 0, 0,
	0, 140, 141, 142, 291, 292, 293, 294, 143, 295,
	296, 0, 144, 297, 298, 145, 146, 0, 0, 299,
	300, 301, 0, 147, 302, 0, 395, 0, 148, 149,
	150, 0, 151, 0, 152, 153, 154, 0, 396, 155,
	156, 0, 0, 0, 0, 0, 0, 0, 157, 158,
	349, 159, 303, 160, 304, 305, 0, 161, 0, 162,
	0, 163, 0, 0, 164, 165, 0, 166, 0, 0,
	0, 306, 167, 168, 169, 307, 308, 560, 0, 0,
	170, 171, 309, 310, 311, 0, 172, 0, 173, 0,
	0, 397, 0, 174, 312, 0, 313, 0, 175, 176,
	177, 178, 314, 315, 399, 0, 182, 0, 179, 0,
	398, 180, 316, 181, 317, 318, 319, 320, 321, 0,
	322, 0, 400, 183, 184, 185, 401, 186, 187, 188,
	0, 190, 189, 0, 323, 402, 191, 403, 0, 192,
	0, 0, 193, 0, 194, 195, 196, 198, 324, 197,
	404, 199, 200, 202, 201, 0, 0, 0, 325, 203,
	326, 204, 205, 0, 206, 561, 0, 207, 0, 0,
	208, 327, 405, 209, 406, 328, 210, 211, 212, 213,
	214, 0, 215, 329, 216, 330, 217, 0, 218, 219,
	220, 221, 222, 331, 223, 224, 0, 225, 226, 227,
	228, 229, 231, 232, 230, 233, 234, 235, 236, 0,
	237, 407, 238, 239, 332, 240, 0, 244, 245, 246,
	247, 0, 249, 333, 248, 250, 251, 0, 252, 241,
	242, 253, 408, 254, 334, 335, 255, 0, 261, 256,
	257, 243, 258, 260, 336, 259, 337, 0, 262, 0,
	263, 264, 265, 266, 267, 268, 269, 0, 338, 339,
	340, 0, 0, 270, 271, 341, 342, 559, 272, 273,
	274, 275, 0, 0, 276, 277, 278, 279, 0, 280,
	0, 343, 281, 282, 283, 344, 345, 0, 134, 284,
	0, 0, 0, 0, 285, 286, 287, 288, 289, 0,
	0, 0, 0, 0, 137, 138, 0, 139, 0, 0,
	569, 564, 290, 0, 0, 0, 0, 140, 141, 142,
	291, 292, 293, 294, 143, 295, 296, 0, 144, 297,
	298, 145, 146, 0, 0, 299, 300, 301, 0, 147,
	302, 0, 0, 0, 148, 149, 150, 0, 151, 0,
	152, 153, 154, 0, 0, 155, 156, 0, 0, 0,
	0, 0, 0, 0, 157, 158, 349, 159, 303, 160,
	304, 305, 0, 161, 0, 162, 0, 163, 0, 0,
	164, 165, 0, 166, 0, 0, 0, 306, 167, 168,
	169, 307, 308, 0, 0, 0, 170, 171, 309, 310,
	311, 0, 172, 0, 173, 0, 0, 0, 0, 174,
	312, 0, 313, 0, 175, 176, 177, 178, 314, 315,
	0, 0, 182, 0, 179, 0, 0, 180, 316, 181,
	317, 318, 319, 320, 321, 0, 322, 0, 0, 183,
	184, 185, 0, 186, 187, 188, 0, 190, 189, 0,
	323, 0, 191, 0, 0, 192, 0, 0, 193, 0,
	194, 195, 196, 198, 324, 197, 0, 199, 200, 202,
	201, 0, 0, 0, 325, 203, 326, 204, 205, 0,
	206, 0, 617, 207, 0, 0, 208, 327, 0, 209,
	0, 328, 210, 211, 212, 213, 214, 0, 215, 329,
	216, 330, 217, 0, 218, 219, 220, 221, 222, 331,
	223, 224, 0, 225, 226, 227, 228, 229, 231, 232,
	230, 233, 234, 235, 236, 0, 237, 0, 238, 239,
	332, 240, 0, 244, 245, 246, 247, 121, 249, 333,
	248, 250, 251, 0, 252, 241, 242, 253, 0, 254,
	334, 335, 255, 0, 261, 256, 257, 243, 258, 260,
	336, 259, 337, 0, 262, 125, 263, 264, 265, 266,
	267, 268, 269, 0, 338, 339, 340, 0, 0, 270,
	271, 341, 342, 0, 272, 273, 274, 275, 0, 0,
	276, 277, 278, 279, 0, 280, 0, 343, 281, 282,
	283, 646, 345, 0, 0, 284, 0, 134, 0, 119,
	285, 286, 287, 288, 289, 0, 120, 0, 0, 0,
	0, 0, 0, 137, 138, 0, 139, 0, 0, 0,
	0, 290, 0, 1468, 0, 1473, 140, 141, 142, 291,
	292, 293, 294, 143, 295, 296, 0, 144, 297, 298,
	145, 146, 0, 0, 299, 300, 301, 0, 147, 302,
	0, 0, 0, 148, 149, 150, 0, 151, 0, 152,
	153, 154, 0, 0, 155, 156, 0, 0, 0, 0,
	0, 0, 0, 157, 158, 349, 159, 303, 160, 304,
	305, 0, 161, 0, 162, 0, 163, 0, 0, 164,
	165, 0, 166, 0, 0, 0, 306, 167, 168, 169,
	307, 308, 0, 0, 0, 170, 171, 309, 310, 311,
	0, 172, 0, 173, 0, 0, 0, 0, 174, 312,
	0, 313, 0, 175, 176, 177, 178, 314, 315, 0,
	0, 182, 0, 179, 0, 0, 180, 316, 181, 317,
	318, 319, 320, 321, 0, 322, 0, 0, 183, 184,
	185, 0, 186, 187, 188, 0, 190, 189, 0, 323,
	0, 191, 0, 0, 192, 0, 0, 193, 0, 194,
	195, 196, 198, 324, 197, 0, 199, 200, 202, 201,
	0, 0, 0, 325, 203, 326, 204, 205, 0, 206,
	0, 0, 207, 0, 0, 208, 327, 0, 209, 0,
	328, 210, 211, 212, 213, 214, 0, 215, 329, 216,
	330, 217, 0, 218, 219, 220, 221, 222, 331, 223,
	224, 0, 225, 226, 227, 228, 229, 231, 232, 230,
	233, 234, 235, 236, 0, 237, 0, 238, 239, 332,
	240, 0, 244, 245, 246, 247, 121, 249, 333, 248,
	250, 251, 0, 252, 241, 242, 253, 0, 254, 334,
	335, 255, 0, 261, 256, 257, 243, 258, 260, 336,
	259, 337, 0, 262, 125, 263, 264, 265, 266, 267,
	268, 269, 0, 338, 339, 340, 0, 0, 270, 271,
	341, 342, 0, 272, 273, 274, 275, 0, 0, 276,
	277, 278, 279, 0, 280, 0, 343, 281, 282, 283,
	646, 345, 0, 0, 284, 0, 134, 0, 119, 285,
	286, 287, 288, 289, 0, 120, 0, 0, 0, 0,
	0, 0, 137, 138, 0, 139, 0, 0, 0, 0,
	290, 0, 0, 0, 115, 140, 141, 142, 291, 292,
	293, 294, 143, 295, 296, 0, 144, 297, 298, 145,
	146, 0, 0, 299, 300, 301, 0, 147, 302, 0,
	0, 0, 148, 149, 150, 0, 151, 0, 152, 153,
	154, 0, 0, 155, 156, 0, 0, 0, 0, 0,
	0, 0, 157, 158, 349, 159, 303, 160, 304, 305,
	0, 161, 0, 162, 0, 163, 0, 0, 164, 165,
	0, 166, 0, 0, 0, 306, 167, 168, 169, 307,
	308, 0, 0, 0, 170, 171, 309, 310, 311, 0,
	172, 0, 173, 0, 0, 0, 0, 174, 312, 0,
	313, 0, 175, 176, 177, 178, 314, 315, 0, 0,
	182, 0, 179, 0, 0, 180, 316, 181, 317, 318,
	319, 320, 321, 0, 322, 0, 0, 183, 184, 185,
	0, 186, 187, 188, 0, 190, 189, 0, 323, 0,
	191, 0, 0, 192, 0, 0, 193, 0, 194, 195,
	196, 198, 324, 197, 0, 199, 200, 202, 201, 0,
	0, 0, 325, 203, 326, 204, 205, 0, 206, 0,
	617, 207, 0, 0, 208, 327, 0, 209, 0, 328,
	210, 211, 212, 213, 214, 0, 215, 329, 216, 330,
	217, 0, 218, 219, 220, 221, 222, 331, 223, 224,
	0, 225, 226, 227, 228, 229, 231, 232, 230, 233,
	234, 235, 236, 0, 237, 0, 238, 239, 332, 240,
	0, 244, 245, 246, 247, 0, 249, 333, 248, 250,
	251, 0, 252, 241, 242, 253, 0, 254, 334, 335,
	255, 0, 261, 256, 257, 243, 258, 260, 336, 259,
	337, 0, 262, 0, 263, 264, 265, 266, 267, 268,
	269, 0, 338, 339, 340, 0, 0, 270, 271, 341,
	342, 0, 272, 273, 274, 275, 0, 0, 276, 277,
	278, 279, 0, 280, 0, 343, 281, 282, 283, 344,
	345, 0, 0, 284, 0, 134, 0, 0, 285, 286,
	287, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 1468, 0, 1473, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	0, 0, 284, 0, 0, 134, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 888, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	0, 0, 284, 0, 134, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 138, 0, 139, 0, 0, 0, 0, 290, 0,
	0, 0, 1206, 140, 141, 142, 291, 292, 293, 294,
	143, 295, 296, 0, 144, 297, 298, 145, 146, 0,
	0, 299, 300, 301, 0, 147, 302, 0, 0, 0,
	148, 149, 150, 0, 151, 0, 152, 153, 154, 0,
	0, 155, 156, 0, 0, 0, 0, 0, 0, 0,
	157, 158, 349, 159, 303, 160, 304, 305, 0, 161,
	0, 162, 0, 163, 0, 0, 164, 165, 0, 166,
	0, 0, 0, 306, 167, 168, 169, 307, 308, 0,
	0, 0, 170, 171, 309, 310, 311, 0, 172, 0,
	173, 0, 0, 0, 0, 174, 312, 0, 313, 0,
	175, 176, 177, 178, 314, 315, 0, 0, 182, 0,
	179, 0, 0, 180, 316, 181, 317, 318, 319, 320,
	321, 0, 322, 0, 0, 183, 184, 185, 0, 186,
	187, 188, 0, 190, 189, 0, 323, 0, 191, 0,
	0, 192, 0, 0, 193, 0, 194, 195, 196, 198,
	324, 197, 0, 199, 200, 202, 201, 0, 0, 0,
	325, 203, 326, 204, 205, 0, 206, 0, 0, 207,
	0, 0, 208, 327, 0, 209, 0, 328, 210, 211,
	212, 213, 214, 0, 215, 329, 216, 330, 217, 0,
	218, 219, 220, 221, 222, 331, 223, 224, 0, 225,
	226, 227, 228, 229, 231, 232, 230, 233, 234, 235,
	236, 0, 237, 0, 238, 239, 332, 240, 0, 244,
	245, 246, 247, 0, 249, 333, 248, 250, 251, 0,
	252, 241, 242, 253, 0, 254, 334, 335, 255, 0,
	261, 256, 257, 243, 258, 260, 336, 259, 337, 0,
	262, 0, 263, 264, 265, 266, 267, 268, 269, 0,
	338, 339, 340, 0, 0, 270, 271, 341, 342, 0,
	272, 273, 274, 275, 0, 0, 276, 277, 278, 279,
	0, 280, 0, 343, 281, 282, 283, 344, 345, 0,
	0, 284, 0, 134, 0, 0, 285, 286, 287, 288,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	138, 0, 139, 0, 0, 0, 0, 290, 0, 0,
	0, 1764, 140, 141, 142, 291, 292, 293, 294, 143,
	295, 296, 0, 144, 297, 298, 145, 146, 0, 0,
	299, 300, 301, 0, 147, 302, 0, 0, 0, 148,
	149, 150, 0, 151, 0, 152, 153, 154, 0, 0,
	155, 156, 0, 0, 0, 0, 0, 0, 0, 157,
	158, 349, 159, 303, 160, 304, 305, 0, 161, 0,
	162, 0, 163, 0, 0, 164, 165, 0, 166, 0,
	0, 0, 306, 167, 168, 169, 307, 308, 0, 0,
	0, 170, 171, 309, 310, 311, 0, 172, 0, 173,
	0, 0, 0, 0, 174, 312, 0, 313, 0, 175,
	176, 177, 178, 314, 315, 0, 0, 182, 0, 179,
	0, 0, 180, 316, 181, 317, 318, 319, 320, 321,
	0, 322, 0, 0, 183, 184, 185, 0, 186, 187,
	188, 0, 190, 189, 0, 323, 0, 191, 0, 0,
	192, 0, 0, 193, 0, 194, 195, 196, 198, 324,
	197, 0, 199, 200, 202, 201, 0, 0, 0, 325,
	203, 326, 204, 205, 0, 206, 0, 0, 207, 0,
	0, 208, 327, 0, 209, 0, 328, 210, 211, 212,
	213, 214, 0, 215, 329, 216, 330, 217, 0, 218,
	219, 220, 221, 222, 331, 223, 224, 0, 225, 226,
	227, 228, 229, 231, 232, 230, 233, 234, 235, 236,
	0, 237, 0, 238, 239, 332, 240, 0, 244, 245,
	246, 247, 0, 249, 333, 248, 250, 251, 0, 252,
	241, 242, 253, 0, 254, 334, 335, 255, 0, 261,
	256, 257, 243, 258, 260, 336, 259, 337, 0, 262,
	0, 263, 264, 265, 266, 267, 268, 269, 0, 338,
	339, 340, 0, 0, 270, 271, 341, 342, 0, 272,
	273, 274, 275, 0, 0, 276, 277, 278, 279, 0,
	280, 0, 343, 281, 282, 283, 344, 345, 0, 0,
	284, 0, 0, 0, 0, 285, 286, 287, 288, 289,
	686, 675, 676, 673, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 138, 0, 139,
	879, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 718, 293, 719, 143, 720, 721, 0,
	144, 297, 298, 145, 146, 0, 0, 722, 723, 301,
	0, 147, 302, 0, 395, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 396, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	724, 160, 725, 726, 0, 161, 0, 162, 0, 163,
	0, 0, 717, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 682, 0, 0, 170, 171,
	727, 728, 729, 0, 172, 0, 173, 0, 0, 397,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 399, 0, 182, 0, 179, 0, 398, 180,
	730, 181, 731, 732, 733, 734, 735, 0, 693, 0,
	400, 183, 184, 185, 401, 186, 187, 188, 0, 190,
	189, 0, 323, 402, 191, 403, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 404, 199,
	200, 202, 201, 0, 0, 683, 325, 203, 736, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	405, 209, 406, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 737, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 407,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	408, 254, 738, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 739, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 740, 741, 0,
	0, 270, 271, 341, 342, 681, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 742, 570, 567, 284, 0, 0,
	830, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 395,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 396, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 397, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 399, 0, 182,
	0, 179, 0, 398, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 400, 183, 184, 185, 401,
	186, 187, 188, 0, 190, 189, 0, 323, 402, 191,
	403, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 404, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 405, 209, 406, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 407, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 408, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 130, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 129, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 570, 567, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	133, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 395,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 396, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 397, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 399, 0, 182,
	0, 179, 0, 398, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 400, 183, 184, 185, 401,
	186, 187, 188, 0, 190, 189, 0, 323, 402, 191,
	403, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 404, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 405, 209, 406, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 407, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 408, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 570, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	133, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 395,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 396, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 397, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 399, 0, 182,
	0, 179, 0, 398, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 400, 183, 184, 185, 401,
	186, 187, 188, 0, 190, 189, 0, 323, 402, 191,
	403, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 404, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 405, 209, 406, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 407, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 408, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	1394, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 1392, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 1391, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 1396, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 1389, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 1395, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 1390, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 1394, 147, 302, 0, 0,
	1441, 148, 149, 150, 0, 151, 1392, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 1396, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 1440, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	1395, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 1444, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 1896, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 617,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 1133, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 862, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 617,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	856, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 617, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 635, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 352, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 351, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	1674, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 1672, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	1667, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 1098, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 496, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 898, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 0, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	859, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 809, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	807, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 803, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	801, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 798, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	794, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 197, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 338, 339, 340, 0,
	0, 270, 271, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 789, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 760,
	0, 147, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 192, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 518, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 332, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 250, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 514, 339, 340, 0,
	0, 270, 761, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 212, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 221, 222, 331, 604, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 240, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	134, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 0, 0, 0, 0, 137, 138, 0, 139,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 140,
	141, 142, 291, 292, 293, 294, 143, 295, 296, 0,
	144, 297, 298, 145, 146, 0, 0, 299, 300, 301,
	0, 508, 302, 0, 0, 0, 148, 149, 150, 0,
	151, 0, 152, 153, 154, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 349, 159,
	303, 160, 304, 305, 0, 161, 0, 162, 0, 163,
	0, 0, 164, 165, 0, 166, 0, 0, 0, 306,
	167, 168, 169, 307, 308, 0, 0, 0, 170, 171,
	309, 310, 311, 0, 172, 0, 173, 0, 0, 0,
	0, 174, 312, 0, 313, 0, 175, 176, 177, 178,
	314, 315, 0, 0, 182, 0, 179, 0, 0, 180,
	316, 181, 317, 318, 319, 320, 321, 0, 322, 0,
	0, 183, 184, 185, 0, 186, 187, 188, 0, 190,
	189, 0, 323, 0, 191, 0, 0, 507, 0, 0,
	193, 0, 194, 195, 196, 198, 324, 518, 0, 199,
	200, 202, 201, 0, 0, 0, 325, 203, 326, 204,
	205, 0, 206, 0, 0, 207, 0, 0, 208, 327,
	0, 209, 0, 328, 210, 211, 212, 213, 214, 0,
	215, 329, 216, 330, 217, 0, 218, 219, 220, 221,
	222, 331, 223, 224, 0, 225, 226, 227, 228, 229,
	231, 232, 230, 233, 234, 235, 236, 0, 237, 0,
	238, 239, 509, 240, 0, 244, 245, 246, 247, 0,
	249, 333, 248, 510, 251, 0, 252, 241, 242, 253,
	0, 254, 334, 335, 255, 0, 261, 256, 257, 243,
	258, 260, 336, 259, 337, 0, 262, 0, 263, 264,
	265, 266, 267, 268, 269, 0, 514, 339, 340, 0,
	0, 270, 512, 341, 342, 0, 272, 273, 274, 275,
	0, 0, 276, 277, 278, 279, 0, 280, 0, 343,
	281, 282, 283, 344, 345, 134, 0, 284, 0, 0,
	0, 0, 285, 286, 287, 288, 289, 0, 0, 0,
	0, 137, 138, 0, 139, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 140, 141, 142, 291, 292, 293,
	294, 143, 295, 296, 0, 144, 297, 298, 145, 146,
	0, 0, 299, 300, 301, 0, 147, 302, 0, 0,
	0, 148, 149, 150, 0, 151, 0, 152, 153, 154,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 349, 159, 303, 160, 304, 305, 0,
	161, 0, 162, 0, 163, 0, 0, 164, 165, 0,
	166, 0, 0, 0, 306, 167, 168, 169, 307, 308,
	0, 0, 0, 170, 171, 309, 310, 311, 0, 172,
	0, 173, 0, 0, 0, 0, 174, 312, 0, 313,
	0, 175, 176, 177, 178, 314, 315, 0, 0, 182,
	0, 179, 0, 0, 180, 316, 181, 317, 318, 319,
	320, 321, 0, 322, 0, 0, 183, 184, 185, 0,
	186, 187, 188, 0, 190, 189, 0, 323, 0, 191,
	0, 0, 192, 0, 0, 193, 0, 194, 195, 196,
	198, 324, 197, 0, 199, 200, 202, 201, 0, 0,
	0, 325, 203, 326, 204, 205, 0, 206, 0, 0,
	207, 0, 0, 208, 327, 0, 209, 0, 328, 210,
	211, 0, 213, 214, 0, 215, 329, 216, 330, 217,
	0, 218, 219, 220, 0, 222, 331, 223, 224, 0,
	225, 226, 227, 228, 229, 231, 232, 230, 233, 234,
	235, 236, 0, 237, 0, 238, 239, 332, 0, 0,
	244, 245, 246, 247, 0, 249, 333, 248, 250, 251,
	0, 252, 241, 242, 253, 0, 254, 334, 335, 255,
	0, 261, 256, 257, 243, 258, 260, 336, 259, 337,
	0, 262, 0, 263, 264, 265, 266, 267, 268, 269,
	0, 338, 339, 340, 0, 0, 270, 271, 341, 342,
	0, 272, 273, 274, 275, 0, 0, 276, 277, 278,
	279, 0, 280, 0, 343, 281, 282, 283, 344, 345,
	0, 0, 284, 0, 0, 0, 0, 285, 286, 287,
	288, 289, 905, 906, 0, 925, 926, 927, 935, 936,
	937, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 908, 0, 0, 939, 0,
	905, 906, 0, 925, 926, 927, 935, 936, 937, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 907,
	0, 0, 0, 908, 0, 922, 939, 0, 905, 906,
	0, 925, 926, 927, 935, 936, 937, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 907, 0, 0,
	0, 908, 0, 922, 939, 0, 0, 905, 906, 0,
	925, 926, 927, 935, 936, 937, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 907, 0, 0, 0, 913,
	908, 922, 0, 939, 0, 905, 906, 0, 925, 926,
	927, 935, 936, 937, 0, 0, 0, 0, 932, 940,
	0, 928, 0, 0, 907, 0, 0, 913, 908, 0,
	922, 939, 0, 0, 0, 0, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 940, 0, 0,
	0, 930, 907, 0, 0, 913, 0, 923, 922, 0,
	0, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 940, 0, 0, 0, 930,
	0, 0, 929, 0, 913, 923, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 940, 0, 0, 930, 0, 0,
	929, 0, 913, 923, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 932, 940, 0, 0, 0, 930, 0, 929, 0,
	0, 0, 923, 0, 0, 0, 933, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 924, 0,
	0, 0, 0, 0, 930, 0, 0, 929, 0, 0,
	923, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 924, 919, 920, 921, 934,
	0, 918, 916, 917, 909, 910, 911, 912, 914, 915,
	0, 933, 0, 0, 2184, 0, 0, 0, 0, 0,
	0, 931, 0, 924, 919, 920, 921, 934, 0, 918,
	916, 917, 909, 910, 911, 912, 914, 915, 0, 933,
	0, 0, 2135, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 919, 920, 921, 934, 0, 918, 916, 917,
	909, 910, 911, 912, 914, 915, 0, 0, 0, 0,
	2078, 0, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 919, 920, 921, 934, 0, 918, 916, 917, 909,
	910, 911, 912, 914, 915, 0, 0, 0, 0, 2055,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 919,
	920, 921, 934, 0, 918, 916, 917, 909, 910, 911,
	912, 914, 915, 0, 0, 905, 906, 2050, 925, 926,
	927, 935, 936, 937, 0, 0, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 0, 0, 908, 0,
	0, 939, 0, 905, 906, 0, 925, 926, 927, 935,
	936, 937, 0, 0, 0, 0, 0, 0, 0, 928,
	0, 0, 907, 0, 0, 0, 908, 0, 922, 939,
	0, 905, 906, 0, 925, 926, 927, 935, 936, 937,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	907, 0, 0, 0, 908, 0, 922, 939, 0, 0,
	905, 906, 0, 925, 926, 927, 935, 936, 937, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 907, 0,
	0, 0, 913, 908, 922, 0, 939, 0, 905, 906,
	0, 925, 926, 927, 935, 936, 937, 0, 0, 0,
	0, 932, 940, 0, 928, 0, 0, 907, 0, 0,
	913, 908, 0, 922, 939, 0, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	940, 0, 0, 0, 930, 907, 0, 0, 913, 0,
	923, 922, 0, 0, 0, 0, 0, 938, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 940, 0,
	0, 0, 930, 0, 0, 929, 0, 913, 923, 0,
	0, 0, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 940, 0, 0,
	930, 0, 0, 929, 0, 913, 923, 0, 0, 0,
	0, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 924, 932, 940, 0, 0, 0, 930,
	0, 929, 0, 0, 0, 923, 0, 0, 0, 933,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 0,
	0, 924, 0, 0, 0, 0, 0, 930, 0, 0,
	929, 0, 0, 923, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 924,
	0, 0, 0, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 924, 919,
	920, 921, 934, 0, 918, 916, 917, 909, 910, 911,
	912, 914, 915, 0, 933, 0, 0, 2046, 0, 0,
	0, 0, 0, 0, 931, 0, 924, 919, 920, 921,
	934, 0, 918, 916, 917, 909, 910, 911, 912, 914,
	915, 0, 933, 0, 0, 1972, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 919, 920, 921, 934, 0,
	918, 916, 917, 909, 910, 911, 912, 914, 915, 0,
	0, 0, 0, 1943, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 919, 920, 921, 934, 0, 918,
	916, 917, 909, 910, 911, 912, 914, 915, 0, 0,
	0, 0, 1942, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 919, 920, 921, 934, 0, 918, 916, 917,
	909, 910, 911, 912, 914, 915, 0, 0, 905, 906,
	1848, 925, 926, 927, 935, 936, 937, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 939, 0, 905, 906, 0, 925,
	926, 927, 935, 936, 937, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 907, 0, 0, 0, 908,
	0, 922, 939, 0, 905, 906, 0, 925, 926, 927,
	935, 936, 937, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 907, 0, 0, 0, 908, 0, 922,
	939, 0, 0, 905, 906, 0, 925, 926, 927, 935,
	936, 937, 0, 0, 0, 0, 0, 0, 0, 928,
	0, 907, 0, 0, 0, 913, 908, 922, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 932, 940, 0, 0, 0, 0,
	907, 0, 0, 913, 0, 0, 922, 0, 0, 0,
	0, 0, 938, 0, 1565, 1566, 0, 1583, 1584, 1585,
	0, 0, 932, 940, 0, 0, 0, 930, 0, 0,
	1736, 913, 0, 923, 0, 0, 0, 0, 0, 0,
	938, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	932, 940, 0, 0, 0, 930, 0, 0, 929, 0,
	913, 923, 0, 0, 0, 0, 0, 1580, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	940, 0, 0, 930, 0, 0, 929, 0, 0, 923,
	0, 0, 0, 0, 0, 0, 0, 938, 0, 0,
	0, 0, 0, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 930, 0, 929, 0, 0, 0, 923, 0,
	0, 1571, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 924, 0, 0, 0, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 0, 0, 0, 0, 0, 1586, 0,
	0, 0, 924, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 1581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 924, 919, 920, 921, 934, 0, 918, 916, 917,
	909, 910, 911, 912, 914, 915, 0, 933, 0, 0,
	1767, 0, 0, 0, 0, 0, 0, 931, 0, 0,
	919, 920, 921, 934, 0, 918, 916, 917, 909, 910,
	911, 912, 914, 915, 0, 0, 0, 0, 1743, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 919, 920,
	921, 934, 1582, 918, 916, 917, 909, 910, 911, 912,
	914, 915, 0, 0, 0, 0, 1283, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 919, 920, 921,
	934, 0, 918, 916, 917, 909, 910, 911, 912, 914,
	915, 118, 0, 1527, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 92, 0, 905, 906, 0, 925, 926,
	927, 935, 936, 937, 0, 109, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 0, 0, 908, 94,
	0, 939, 0, 0, 0, 40, 0, 110, 1577, 1578,
	1579, 0, 0, 1576, 1574, 1575, 1567, 1568, 1569, 1570,
	1572, 1573, 907, 0, 0, 0, 0, 47, 922, 0,
	0, 49, 0, 0, 0, 112, 0, 0, 95, 0,
	0, 0, 55, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 913, 2243, 0, 0, 0, 0, 1565, 1566,
	0, 1583, 1584, 1585, 0, 0, 0, 0, 0, 0,
	0, 932, 940, 0, 1735, 0, 0, 905, 906, 0,
	925, 926, 927, 935, 936, 937, 0, 0, 0, 938,
	0, 0, 0, 928, 0, 0, 0, 0, 1423, 0,
	908, 0, 0, 939, 930, 0, 0, 0, 0, 0,
	923, 1580, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 907, 0, 60, 0, 0, 0,
	922, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 67, 37, 0, 61, 0,
	62, 2242, 96, 0, 0, 0, 0, 63, 0, 1424,
	0, 121, 0, 0, 0, 1571, 0, 0, 73, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 924, 913, 0, 0, 0, 0, 125,
	905, 906, 0, 925, 926, 927, 935, 936, 937, 933,
	0, 0, 1586, 932, 940, 0, 928, 0, 97, 0,
	0, 0, 0, 908, 0, 0, 939, 116, 0, 0,
	0, 938, 0, 1581, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 930, 907, 0, 0,
	120, 0, 923, 922, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 931, 929, 0, 919,
	920, 921, 934, 0, 918, 916, 917, 909, 910, 911,
	912, 914, 915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1582, 913, 0, 1597,
	0, 0, 1596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1180, 0, 924, 932, 940, 0, 905,
	906, 0, 925, 926, 927, 935, 936, 937, 0, 0,
	0, 933, 0, 0, 938, 928, 0, 0, 0, 1179,
	0, 0, 908, 0, 0, 939, 0, 0, 0, 930,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	929, 0, 1577, 1578, 1579, 0, 0, 1576, 1574, 1575,
	1567, 1568, 1569, 1570, 1572, 1573, 0, 0, 931, 0,
	0, 919, 920, 921, 934, 0, 918, 916, 917, 909,
	910, 911, 912, 914, 915, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 913, 0, 924, 0,
	0, 0, 905, 906, 0, 925, 926, 927, 935, 936,
	937, 0, 0, 0, 933, 932, 940, 0, 928, 0,
	0, 0, 0, 0, 0, 908, 0, 0, 939, 0,
	0, 0, 0, 938, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 930, 907,
	0, 0, 0, 0, 923, 922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 931, 0, 0, 919, 920, 921, 934, 0, 918,
	916, 917, 909, 910, 911, 912, 914, 915, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 913,
	905, 906, 0, 925, 926, 927, 935, 936, 937, 0,
	0, 0, 0, 0, 0, 0, 928, 924, 932, 940,
	0, 0, 0, 908, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 907, 0, 0,
	0, 930, 0, 922, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 919, 920, 921, 934, 913, 918, 916,
	917, 909, 910, 911, 912, 914, 915, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 940, 0, 0,
	924, 0, 905, 906, 0, 925, 926, 927, 935, 936,
	937, 0, 0, 0, 938, 0, 933, 0, 928, 0,
	0, 0, 0, 0, 0, 908, 0, 0, 939, 930,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 907,
	0, 0, 0, 0, 0, 922, 0, 0, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 919, 920, 921, 934,
	0, 918, 916, 917, 909, 910, 911, 912, 914, 915,
	0, 0, 0, 0, 0, 0, 0, 0, 924, 913,
	0, 0, 0, 0, 1603, 905, 906, 0, 925, 926,
	927, 935, 936, 937, 933, 0, 0, 0, 932, 940,
	0, 928, 0, 0, 0, 1598, 0, 0, 908, 0,
	0, 939, 0, 0, 0, 0, 938, 0, 0, 1747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 907, 0, 0, 0, 0, 923, 922, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 929, 0, 919, 920, 921, 934, 0, 918,
	916, 917, 909, 910, 911, 912, 914, 915, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 913, 905, 906, 0, 925, 926, 927, 935,
	936, 937, 0, 0, 0, 0, 0, 0, 0, 928,
	924, 932, 940, 0, 0, 0, 908, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 933, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 0, 930, 0, 922, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 919, 920, 921, 934,
	913, 918, 916, 917, 909, 910, 911, 912, 914, 915,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	940, 0, 0, 924, 0, 905, 906, 0, 925, 926,
	927, 935, 936, 937, 0, 0, 0, 938, 0, 933,
	0, 928, 0, 0, 0, 1556, 0, 0, 908, 0,
	0, 939, 930, 0, 0, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 907, 0, 0, 0, 0, 0, 922, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 919,
	920, 921, 934, 0, 918, 916, 917, 909, 910, 911,
	912, 914, 915, 0, 0, 0, 0, 0, 0, 0,
	0, 924, 913, 905, 906, 0, 925, 926, 927, 935,
	936, 937, 0, 0, 0, 0, 0, 933, 0, 928,
	0, 932, 940, 0, 0, 0, 908, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	907, 0, 0, 0, 930, 0, 922, 0, 0, 0,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 929, 0, 919, 920, 921,
	934, 0, 918, 916, 917, 909, 910, 911, 912, 914,
	915, 0, 0, 0, 0, 0, 0, 0, 905, 906,
	913, 925, 926, 927, 935, 936, 937, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 932,
	940, 908, 0, 924, 939, 0, 0, 905, 906, 0,
	925, 926, 927, 935, 936, 937, 0, 938, 0, 933,
	0, 0, 0, 0, 0, 907, 0, 0, 0, 0,
	908, 922, 930, 939, 0, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	922, 0, 0, 929, 0, 0, 0, 0, 1565, 1566,
	0, 1583, 1584, 1585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 913, 931, 0, 0, 919,
	920, 921, 934, 0, 918, 916, 917, 909, 910, 911,
	912, 914, 915, 0, 932, 940, 0, 0, 0, 0,
	0, 924, 905, 906, 913, 925, 926, 927, 935, 936,
	937, 1580, 938, 0, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 932, 940, 908, 0, 930, 939, 0,
	0, 0, 0, 923, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 0, 0, 0, 907,
	0, 0, 0, 0, 0, 922, 930, 0, 0, 0,
	0, 0, 923, 0, 0, 1571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 1587, 0, 919, 920, 921,
	934, 0, 918, 916, 917, 909, 910, 911, 912, 914,
	915, 0, 1586, 0, 0, 0, 924, 0, 0, 913,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 1581, 0, 0, 0, 0, 932, 940,
	0, 0, 0, 0, 0, 924, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 919, 920, 921, 934, 1582, 918, 916, 917,
	909, 910, 911, 912, 914, 915, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 919, 920, 921, 934, 0, 918, 916, 917, 909,
	910, 911, 912, 914, 915, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 1030, 1020, 1049, 1012, 1040, 1039, 0,
	0, 1014, 1013, 0, 0, 0, 0, 1051, 1050, 0,
	0, 0, 1577, 1578, 1579, 0, 0, 1576, 1574, 1575,
	1567, 1568, 1569, 1570, 1572, 1573, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 0, 1037, 1036, 0, 0, 0, 0, 0, 0,
	0, 0, 1035, 931, 0, 0, 919, 920, 921, 934,
	0, 918, 916, 917, 909, 910, 911, 912, 914, 915,
	1034, 1032, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 1020, 1049, 1012, 1040, 1039, 0,
	0, 1014, 1013, 0, 0, 0, 0, 1051, 1050, 0,
	1023, 1022, 1024, 1025, 1026, 1027, 1028, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 0, 1037, 1036, 0, 0, 1016, 0, 0, 0,
	0, 0, 1035, 0, 0, 0, 0, 0, 1038, 0,
	0, 0, 1021, 0, 0, 0, 0, 0, 0, 0,
	1034, 1032, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 0, 1218, 1216, 1217, 1220, 1219,
	1023, 1022, 1024, 1025, 1026, 1027, 1028, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 0, 0, 0, 0, 501,
	0, 0, 1029, 1018, 0, 0, 1016, 0, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 578, 1038, 0,
	0, 0, 1021, 0, 1015, 0, 0, 1046, 1047, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	577, 1031, 0, 0, 1052, 579, 0, 0, 0, 0,
	585, 586, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 503, 580, 0,
	0, 1017, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 1018, 0, 0, 0, 0, 0, 0,
	598, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1015, 0, 0, 1046, 1047, 0,
	581, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 583, 0, 0, 0, 1019,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 584, 591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 592, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 0, 0,
	0, 597, 0, 0, 0, 506, 0, 0, 0, 0,
	590, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596,
}
var sqlPact = [...]int{

	29288, -1000, 5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17886, 17886, -1000, -1000,
	21981, -1000, -1000, -1000, -1000, -1000, -1000, 21666, 746, 1077,
	-1000, -1000, -1000, -1000, -1000, 21981, 1071, 1650, 5270, 1205,
	21981, 1203, 1650, 23556, -1000, -1000, 23556, 1313, -1000, -1000,
	-1000, -1000, -1000, 27336, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 488, 489, 488, 488, 485, 614, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 924,
	741, 120, 723, -1000, 925, -34, 14698, 31235, 783, 27021,
	21981, 1577, -1, -1000, 291, 20091, 29288, 567, -5, 18516,
	21981, -1000, 9, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1379, 331, 9, -1000,
	-1000, 21351, -1000, 1376, 1218, 1210, 20091, -1000, -1000, -1000,
	-1000, -1000, 298, -1000, 13388, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1020, -1000,
	-4, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11053, 296, 11053, 1015, -1000, 21981, -1000, -1000, -1000,
	915, -1000, -1000, -1000, -1000, -1000, 387, 1787, 663, 294,
	26706, -1000, 1053, -1000, 385, 552, -1000, -1000, 14371, 17,
	1053, -1000, 1053, -1000, -1000, -1000, 561, 23556, 20091, -1000,
	11053, 11053, 26391, 21981, 21981, 1237, 26076, -1000, 925, -1000,
	-1000, 25761, 25446, 25131, 24816, 24501, -1000, 1153, 1576, 1576,
	1576, 1599, 96, 93, 120, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1730, -1000, -1000, -1000, -1000, 1764,
	-1000, -1000, -1000, -1000, -1000, 915, 17571, 945, 1578, 1374,
	-1000, 998, 1371, 1369, 1363, 1361, 1358, -1000, 760, -1000,
	1387, 476, -1000, 1356, 774, 475, -1000, 1355, 1353, 21036,
	24186, 21981, 20721, -6, 21981, -1000, 292, -6, 9692, 9692,
	-1000, -1000, 291, -1000, 9012, -1000, 121, 16929, -1000, 17571,
	18516, -5, -13, -1000, -1000, -1000, 4943, 17571, 640, 15971,
	9, -1000, -1000, -1000, -1000, -1000, 20091, 21981, 21981, 668,
	23871, -1000, 11053, -17, -1000, -1000, 291, 17886, 1113, 30503,
	-1000, 11053, 11053, 11053, 11053, 11053, 916, 315, -1000, 285,
	284, 6278, -1000, -1000, 1763, -1000, -1000, -1000, 98, -1000,
	-1000, 11053, 9, -1000, -1000, -1000, -1000, 280, 1785, -1000,
	441, -1000, -1000, -1000, 392, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1386, 274, 272, 271, -1000, -1000,
	-1000, -1000, 268, 266, 264, 263, 262, 256, 255, 253,
	247, 246, 241, 231, 225, 214, 213, 860, -1000, 430,
	-1000, -1000, 430, 430, -1000, 185, 185, 190, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 185, -1000, -1000, -1000,
	403, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 211, 1673,
	31066, 30503, 17886, -1000, -1000, -1000, -1000, 21981, 11053, -1000,
	1668, 1053, -8, -1000, -1000, -1000, -1000, 1159, 1227, 530,
	739, 14044, 13717, 1530, -1000, -1000, -1000, 14, 5270, -1000,
	-8, -1000, 23556, -1000, 127, -1000, 30503, 30503, 199, 1107,
	409, 99, 23241, 409, 1106, -1000, 1153, 117, 1482, -1000,
	117, 1466, 114, 1465, -1000, -90, -1000, 1464, -13, 1463,
	-1000, 1023, 1215, 10373, 1208, 11053, 120, -1000, -1000, 120,
	120, 7299, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20406, -1000, -1000, 654, 21981, 1384, 17886, 21981, 21981,
	21981, 21981, 21981, -1000, -1000, 606, 1333, 21981, 1154, -1000,
	-1000, 21981, 21981, 754, 609, 805, 1460, 454, 828, 1449,
	838, 823, 1442, 21981, -6, 1660, 21981, 103, -1000, 29689,
	-1000, 103, -1000, -21, -1000, 30503, -1000, -1000, -1000, 21981,
	230, -1000, 21981, -1000, -1000, -29, -1000, -1000, 1349, -25,
	-1000, -1000, 422, 79, 1656, 79, 16291, -1000, 21981, -27,
	30503, 1019, 18831, 557, -1000, 30976, 31066, 5270, 588, 11053,
	11053, 11053, 11053, 11053, 11053, 11053, 11053, 11053, 11053, 11053,
	11053, 11053, 11053, 11053, 11053, 11053, 11053, 11053, 11053, 11053,
	11053, 1133, 11053, 556, 11053, 11053, 11053, 11053, 1280, 886,
	179, 969, -1000, 1723, 1723, 1723, 30637, 30637, 210, 315,
	-1000, 11053, -1000, 10033, 93, 28934, -7, -1000, -1000, -1000,
	7639, 428, 30503, 9, 5937, -1000, 1762, 642, 1396, 1291,
	197, 91, 90, 89, 11053, 11053, 11733, 11733, 11053, 12073,
	11053, 11053, 6618, 11053, 11053, 11053, 11053, 11053, 11053, -1000,
	196, -1000, -1000, -1000, -1000, 1761, -1000, -1000, 1756, -1000,
	581, 578, 1754, -34, -31, -1000, 1679, -1000, -1000, -1000,
	-1000, 132, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 190, 860, 185, 185, 185, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 403, -1000, -1000, 430,
	430, 430, -1000, -1000, 1335, -1000, 375, -32, 486, -8,
	1053, 943, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1782, -9, -1000, -1000, -9,
	-1000, -1000, 5270, -1000, -1000, -1000, 20091, -1000, -1000, 19146,
	1653, 1440, -1000, 874, -1000, 1649, 21981, 992, 1103, -1000,
	608, 1428, -1000, -1000, 21981, 21981, -1000, 21981, -1000, 21981,
	21981, 5270, 21981, 21981, -1000, -1000, -1000, 30503, -1000, 378,
	-1000, -1000, 30503, 820, 1221, -1000, 1221, -10, -1000, 29447,
	1184, 21981, -1000, -1000, -1000, -1000, -1000, 21981, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 170, -1000, -1000, -1000,
	-1000, 21981, 21981, 21981, -19, 867, -1000, 19461, 1586, 1561,
	1547, 20091, 1628, -34, 1329, 1623, -34, 1323, 553, 21981,
	542, 541, 20091, -1000, 181, -33, 422, 9692, 15652, 5270,
	-1000, 422, 9012, -1000, 87, 1247, 1034, -1000, 412, 17571,
	633, 1322, 21981, 717, 11053, 848, -1000, 15333, 437, 21981,
	717, 80, -1000, -1000, -1000, 355, 21981, -1000, -1000, 11053,
	-1000, -1000, 21981, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 379, 798, 798, 583, 583, 583, 583,
	1734, 1784, 421, 212, 3065, 3065, 3065, 2557, 353, 353,
	3065, 3065, 3065, 30637, 30608, 2309, 11053, 11053, 540, 868,
	179, 2309, 11053, 2309, 2309, 2309, 2309, -1000, 962, -1000,
	-1000, -1000, -1000, 1321, 169, 12073, 12073, -1000, -1000, -1000,
	6278, 12413, -1000, -1000, -1000, -1000, 167, 11053, -1000, 28963,
	-199, -40, -1000, -1000, 11053, -37, -39, -1000, -1000, 651,
	-1000, 11053, -1000, -14, 11053, 11053, 11053, 86, 84, -1000,
	536, -1000, 532, 531, 525, -1000, 166, 926, 165, 164,
	11053, -1000, -1000, -1000, 30395, 3839, 82, 1311, -121, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 77, 74, 30263, -121,
	73, 30698, -1000, 12073, 12073, 12073, 6278, 163, 72, 29560,
	-121, 30155, 9352, 9352, 9352, 69, 30042, 11053, -121, 3805,
	3770, 3422, -47, -49, -53, 1753, -59, 68, 372, 363,
	66, -1000, -1000, 31066, 313, 312, -1000, 1751, 21981, -1000,
	1200, -1000, -1000, 726, -1000, 849, -1000, 14698, -1000, -1000,
	63, -60, -12, 31066, -1000, -1000, -1000, -1000, -1000, 21981,
	275, 21981, 21981, -1000, 162, 1181, 1179, -34, 21981, 1776,
	-34, 21981, 1422, 1489, 341, 21981, -1000, 117, 117, -1000,
	114, -1000, -1000, -13, 820, -1000, 11053, 1741, -1000, -1000,
	-1000, 7299, -1000, -1000, -1000, 21981, -142, -18, -1000, -1000,
	-1000, -1000, -1000, 230, 780, 21981, 21981, 21981, -1000, -1000,
	1102, 22926, 1100, 31066, 161, 21981, 21981, 22611, 22296, 21981,
	789, -34, -1000, 158, -34, -1000, 155, 21981, 749, 21981,
	21981, 744, -34, -1000, 1289, -1000, -135, 1330, 159, -150,
	65, 369, -1000, 15014, -1000, 1289, -1000, -1000, 412, 1310,
	618, -1000, 958, -1000, -1000, 627, -1000, -1000, 6958, 30503,
	-1000, 717, 1551, -65, -1000, -1000, -1000, 422, 16291, 15652,
	9012, -67, 30503, -18, 11053, 2309, 2309, 11053, 12073, 12073,
	-1000, 2309, -1000, -1000, -1000, -1000, -1000, 1309, 154, 11053,
	31066, 29428, 29024, -71, -1000, 8672, -15, -1000, 11053, -1000,
	28906, -1000, -1000, 182, 1487, -1000, 11053, 29910, 56, 8332,
	-1000, 29802, -22, -22, -1000, 1774, 1130, 803, 898, 695,
	1739, -1000, 16610, 425, 938, 28878, 30976, 31066, -1000, 11053,
	-1000, -1000, 1308, 11053, -1000, 30976, 31066, 12073, 12073, 12073,
	12073, 12073, 12073, 12073, 12073, 12073, 12073, 12073, 12073, 12073,
	12073, 12073, 12073, 12073, 12073, 12073, 1211, 12073, 1720, 1720,
	1720, -16, 7992, -1000, 1316, 1308, 11053, 11053, 31066, 55,
	54, 53, -1000, 11053, -121, 11053, 11053, 11053, -1000, -1000,
	-1000, 51, -1000, 1736, -1000, -1000, -1000, -1000, -1000, 461,
	1733, 48, -18, -1000, -1000, -1000, -1000, -1000, 1239, -1000,
	19146, -1000, 153, 21981, 13069, 152, 882, 11053, 150, 149,
	-1000, 148, -1000, -1000, 145, 21981, 1164, 341, 18201, -1000,
	409, -1000, -1000, -1000, 961, 28538, -1000, 1582, 5270, 21981,
	-1000, -1000, -1000, 524, 523, 1420, -1000, 1079, -1000, 443,
	904, -1000, 1419, 1021, 1416, 1021, -1000, -19, 748, -1000,
	11053, -1000, 11053, -1000, 522, -1000, -1000, 513, 47, 1253,
	1597, -1000, 15652, 1199, 1192, 15652, 1472, 932, 932, 932,
	-1000, 143, 309, 369, 4275, 11053, 19776, 935, 37, 45,
	1330, 1253, -1000, 17571, 576, 142, -1000, -41, -1000, -1000,
	198, -34, 717, -1000, -61, -1000, 348, 1643, 2309, 3890,
	3685, 11053, 31066, 30742, -73, 11053, 11053, -1000, -80, -1000,
	11053, 307, 30503, -1000, -1000, -1000, 30503, 11053, 1767, 11053,
	42, 40, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 38, -1000, -1000, 27651, 11053, 36, -1000, 31, 30,
	30503, 1316, 30503, -1000, -1000, 529, 529, 677, 677, 677,
	677, 1720, 622, 180, 227, 669, 669, 669, 2770, 599,
	599, 669, 669, 669, 1307, 1146, 138, 2597, 11053, -84,
	-1000, -1000, -1000, 30503, 30503, 27, -1000, -1000, -1000, -121,
	244, 28510, 28481, -1000, 26, -1000, 303, 302, -1000, -1000,
	1242, -1000, 1276, 13069, 137, -102, -1000, 301, 1581, 11053,
	-1000, -1000, 135, 21981, -1000, 28453, 13069, 21981, 19146, 1648,
	13069, 991, 1169, 341, 18201, -1000, 608, -1000, -1000, -1000,
	1582, -1000, 21981, 21981, 21981, 1410, -1000, -1000, 1197, 1230,
	469, 21981, -1000, 21981, -1000, 21981, 21981, 21981, -103, -111,
	21981, 21981, -1000, 414, 11053, 11053, 1330, 15652, 15652, 951,
	1188, 15652, -1000, -1000, -1000, -1000, 300, 361, 369, 19776,
	-1000, 1728, 1190, -112, -1000, -1000, 21981, 134, -1000, 369,
	414, -69, 17256, 1773, 1497, 21981, 1546, -1000, -1000, 130,
	11053, 11053, 30742, -120, -1000, 2309, 2309, -1000, 28425, -1000,
	30503, -1000, 29802, -1000, -1000, -1000, -1000, 876, -1000, 28085,
	-1000, -1000, -1000, -1000, 12073, 1306, 129, 31066, 28057, -1000,
	-1000, 11053, -1000, -1000, -1000, -1000, -1000, 894, -1000, 21981,
	-1000, 5270, 21981, 1271, 1063, -1000, -1000, 1178, 126, 12073,
	21981, -122, 13069, 853, 13069, 1582, 9, 5270, 1582, 28028,
	5937, -126, -1000, -128, -134, 25, -34, -139, 21981, -1000,
	341, 18201, -1000, 1489, -1000, -1000, -1000, -1000, 21981, 1052,
	-1000, 1027, 11053, -1000, 31066, 1021, 1021, -1000, 511, 506,
	496, 494, -1000, -1000, -1000, 21981, 30503, -121, -1000, 951,
	-1000, 123, 11053, 15652, -1000, -150, -1000, -140, -1000, 19776,
	-1000, 245, -194, -1000, 337, -1000, 369, 122, 21981, 19776,
	-1000, -1000, 116, 9, -144, -1000, 336, 589, -145, 21981,
	-1000, -1000, 5597, 2309, 2309, -1000, -1000, 24, 938, 1596,
	-1000, 3871, 12073, 31066, -152, -1000, 28000, 21981, 851, -1000,
	-1000, 21981, 1068, -1000, -1000, 11053, 2597, 115, 853, -156,
	1239, 113, -1000, -1000, -1000, -1000, -1000, -1000, 1581, -14,
	-1000, -1000, 809, 1239, -1000, 853, 112, 18201, -1000, 1164,
	-1000, -1000, -1000, 30503, 1568, -1000, -1000, 21981, 21981, 108,
	106, -119, -1000, 1647, -1000, 21981, 30503, -1000, 369, -1000,
	1716, -1000, -1000, 1190, -1000, 4613, 19776, 21981, -158, -1000,
	11053, 1773, -1000, -1000, 1770, 667, -1000, 422, -1000, -1000,
	797, 11053, 3871, -160, -1000, -1000, 104, -1000, -1000, 1408,
	27972, 1149, 21981, 1239, 853, -1000, 21981, 1582, 23, 21981,
	-1000, 1239, 13069, -1000, 1169, 457, 5270, -1000, -1000, 11053,
	11053, 21981, 101, -166, 19776, -1000, -1000, -1000, 1706, -1000,
	-167, -1000, -22, -1000, -1000, 16291, -1000, 22, 11393, 11393,
	-121, -1000, 21981, 1400, -1000, 974, 856, 20, -1000, 1239,
	-172, -1000, -1000, 99, -1000, -174, -1000, -1000, 11053, -1000,
	-178, -179, -1000, -1000, -1000, -1000, 67, -1000, 19, -154,
	-1000, -1000, -1000, 12742, 999, 706, 29315, -1000, -184, 21981,
	-1000, 984, 979, 685, -1000, -1000, -1000, -1000, -1000, -1000,
	1149, 853, 30503, -1000, -1000, -1000, 1767, -1000, 1683, -1000,
	-1000, -1000, -1000, -1000, 957, -1000, -1000, 1503, -1000, 448,
	1059, 1059, 974, 1239, 10713, -1000, -1000, -1000, -1000, 1690,
	-1000, -1000, 1158, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2170, 2169, 1462, 1605, 2168, 2167, 2164, 2163, 2160,
	2159, 2158, 2155, 2154, 2152, 2151, 2148, 2146, 2144, 2142,
	2135, 2134, 2122, 2121, 2119, 1574, 2115, 2114, 2112, 2111,
	2110, 2109, 1546, 2107, 1536, 2105, 2104, 2103, 2102, 2100,
	1528, 1520, 2096, 87, 88, 1517, 2091, 2089, 1481, 2087,
	2084, 2081, 2079, 2075, 78, 2068, 2067, 2064, 2060, 2057,
	2056, 148, 159, 2053, 1455, 2048, 2037, 2028, 2027, 2018,
	2016, 2013, 2012, 2007, 2005, 2002, 1999, 1997, 1996, 1995,
	1992, 1991, 1987, 155, 1986, 1984, 1424, 1411, 1980, 1977,
	18, 1975, 83, 1974, 28, 139, 2251, 134, 1973, 1972,
	1971, 1970, 24, 91, 90, 1967, 81, 1965, 1964, 47,
	26, 23, 22, 1963, 95, 1962, 1960, 1183, 31, 1958,
	1956, 137, 1954, 46, 29, 122, 154, 152, 118, 108,
	1951, 1948, 1946, 1944, 49, 1943, 1, 1937, 1934, 10,
	69, 12, 1933, 20, 14, 1931, 1929, 123, 1922, 80,
	109, 1409, 143, 128, 71, 1919, 82, 11, 77, 1918,
	1916, 149, 36, 1915, 45, 84, 136, 1914, 57, 156,
	51, 34, 62, 114, 1912, 1909, 1908, 96, 1907, 112,
	68, 1905, 1904, 63, 1900, 140, 150, 1898, 1896, 94,
	1895, 135, 1893, 1892, 158, 147, 111, 4, 44, 54,
	9, 1394, 1383, 113, 75, 30, 25, 1891, 1782, 1214,
	948, 42, 101, 72, 55, 102, 50, 73, 142, 40,
	1889, 1886, 119, 1884, 1881, 1877, 1876, 1873, 97, 1869,
	1865, 76, 141, 15, 21, 32, 93, 33, 60, 85,
	105, 153, 103, 1863, 98, 127, 1860, 100, 1859, 1856,
	1739, 124, 1851, 1850, 1849, 1695, 1648, 1283, 43, 1843,
	1842, 940, 70, 1840, 1837, 66, 1836, 133, 110, 1835,
	138, 146, 17, 1833, 125, 35, 92, 1832, 106, 52,
	0, 1297, 507, 1830, 107, 65, 1829, 1828, 1826, 1825,
	27, 3, 8, 7, 5, 6, 89, 86, 1823, 1819,
	129, 115, 53, 1814, 157, 1812, 1811, 1810, 39, 1809,
	19, 1808, 16, 1807, 1806, 13, 2, 1805, 1802, 132,
	1799, 99, 1798, 1629, 1797, 151, 1796, 1792, 1593, 58,
	104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 5, 5, 5,
	5, 5, 7, 8, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 104, 104,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 101, 101, 106, 106, 106,
	108, 108, 105, 105, 100, 100, 20, 20, 278, 278,
	279, 279, 89, 89, 93, 93, 90, 91, 91, 92,
	92, 24, 24, 24, 21, 21, 22, 23, 25, 25,
	25, 25, 25, 25, 32, 33, 33, 33, 33, 33,
	34, 34, 34, 34, 34, 39, 39, 37, 37, 36,
	36, 35, 35, 38, 38, 153, 153, 152, 152, 155,
	155, 40, 40, 43, 43, 43, 43, 43, 44, 44,
	44, 44, 44, 44, 44, 44, 246, 246, 245, 42,
	220, 220, 45, 178, 178, 46, 46, 46, 46, 47,
	53, 319, 319, 319, 323, 323, 324, 324, 325, 325,
	325, 325, 325, 325, 325, 321, 321, 51, 51, 88,
	56, 56, 56, 56, 56, 56, 58, 60, 57, 57,
	57, 59, 59, 61, 61, 61, 61, 62, 62, 62,
	62, 63, 63, 133, 133, 271, 270, 270, 276, 276,
	276, 131, 131, 131, 131, 131, 132, 132, 132, 269,
	269, 269, 269, 277, 277, 277, 277, 277, 277, 275,
	275, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 76,
	76, 83, 83, 83, 83, 83, 83, 65, 70, 70,
	70, 66, 71, 72, 73, 73, 73, 67, 67, 75,
	75, 75, 74, 80, 80, 80, 80, 77, 77, 77,
	78, 78, 81, 81, 81, 68, 69, 82, 79, 79,
	79, 41, 320, 320, 322, 322, 49, 28, 28, 29,
	29, 134, 134, 135, 135, 199, 199, 199, 199, 136,
	136, 107, 107, 107, 198, 288, 288, 289, 289, 289,
	289, 289, 289, 290, 290, 290, 290, 290, 290, 290,
	286, 286, 287, 284, 284, 285, 285, 285, 285, 326,
	326, 197, 197, 139, 139, 293, 293, 293, 293, 291,
	291, 291, 291, 291, 294, 292, 295, 295, 295, 295,
	295, 232, 232, 232, 85, 30, 113, 113, 31, 27,
	27, 182, 182, 143, 143, 237, 237, 237, 124, 124,
	102, 102, 102, 14, 11, 11, 11, 11, 11, 11,
	19, 19, 17, 17, 183, 183, 184, 184, 50, 52,
	55, 84, 84, 84, 84, 84, 328, 328, 120, 120,
	120, 120, 121, 121, 194, 194, 195, 195, 196, 196,
	196, 115, 114, 116, 116, 26, 26, 109, 109, 110,
	110, 111, 111, 112, 112, 329, 329, 48, 48, 87,
	127, 127, 191, 191, 191, 193, 193, 192, 192, 192,
	168, 168, 168, 86, 148, 148, 157, 157, 158, 158,
	243, 159, 159, 54, 54, 96, 96, 94, 94, 94,
	94, 94, 94, 95, 95, 97, 97, 97, 97, 97,
	97, 97, 99, 301, 301, 301, 304, 304, 300, 302,
	302, 303, 303, 327, 327, 169, 169, 169, 138, 137,
	137, 141, 141, 140, 142, 142, 236, 236, 236, 166,
	166, 166, 166, 185, 185, 186, 186, 187, 187, 188,
	188, 188, 189, 189, 190, 190, 165, 165, 216, 216,
	98, 98, 147, 147, 149, 149, 206, 206, 206, 207,
	207, 205, 205, 205, 205, 238, 238, 238, 238, 238,
	238, 238, 317, 317, 317, 318, 318, 235, 235, 239,
	239, 239, 239, 239, 239, 233, 233, 233, 233, 234,
	234, 244, 244, 172, 172, 172, 172, 170, 170, 171,
	171, 240, 240, 240, 240, 167, 167, 241, 241, 241,
	200, 200, 247, 247, 247, 265, 265, 146, 146, 146,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 249, 249, 249,
	249, 251, 251, 251, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 264, 264, 264, 264, 264, 252, 252, 259,
	259, 260, 260, 261, 262, 253, 253, 254, 254, 255,
	256, 263, 263, 263, 263, 267, 267, 257, 257, 257,
	257, 257, 258, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 180, 180, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 210, 210, 210, 210, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 296, 296, 296, 296,
	296, 296, 296, 298, 298, 299, 299, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 305, 305, 306, 306,
	308, 308, 309, 309, 310, 311, 311, 311, 312, 313,
	313, 307, 307, 314, 314, 314, 315, 315, 316, 316,
	316, 316, 316, 222, 222, 222, 223, 223, 224, 230,
	230, 230, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 122, 122,
	122, 122, 122, 154, 154, 219, 219, 217, 217, 217,
	221, 221, 173, 173, 266, 266, 266, 266, 266, 266,
	266, 174, 174, 174, 181, 175, 175, 176, 176, 176,
	176, 176, 176, 213, 214, 177, 177, 177, 215, 215,
	225, 229, 229, 228, 227, 227, 226, 226, 203, 203,
	204, 204, 202, 201, 162, 162, 161, 161, 160, 160,
	330, 330, 231, 231, 163, 163, 164, 156, 156, 242,
	242, 242, 242, 150, 150, 129, 129, 151, 151, 125,
	125, 128, 128, 126, 126, 126, 126, 144, 144, 145,
	145, 123, 123, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 268, 268, 268, 218, 117, 117,
	117, 118, 118, 119, 119, 273, 273, 273, 274, 274,
	274, 274, 272, 272, 272, 272, 272, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 6, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 4, 6, 4, 6, 4,
	6, 3, 5, 3, 5, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 3, 3, 0, 2, 3, 2, 3, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 2,
	1, 1, 1, 1, 1, 3, 4, 5, 3, 2,
	6, 3, 4, 3, 3, 3, 3, 1, 3, 3,
	1, 2, 2, 1, 0, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 1, 1, 1, 1, 1, 2, 3, 4, 4,
	4, 4, 2, 4, 4, 4, 4, 4, 4, 2,
	3, 3, 2, 4, 5, 4, 5, 2, 3, 3,
	4, 2, 4, 3, 3, 4, 4, 2, 5, 5,
	6, 2, 2, 0, 2, 0, 3, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 4, 3, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 3,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 1, 4,
	4, 4, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 7, 4, 6, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 6,
	4, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -21, -24, -25, -46,
	-32, -33, -34, -45, -40, -47, -41, -48, -49, -42,
	-52, -53, -55, -54, -50, -51, -56, -64, -84, -85,
	-86, -87, -5, -6, -7, -8, 34, 238, -22, -23,
	67, -26, -27, -28, -29, -30, -31, 89, -303, 93,
	-35, -36, -37, -39, -38, 104, 106, 124, 130, 212,
	218, 240, 242, 249, -94, -96, 236, 237, -57, -58,
	-59, -60, -88, 260, -65, -66, -67, -68, -69, -70,
	-71, -72, -73, -74, -75, -76, -77, -78, -79, -80,
	-81, -82, 35, 272, 61, 100, 244, 300, -9, -10,
	-13, -12, -11, -16, -18, -15, -17, -19, -14, 47,
	69, -301, 97, -97, -95, 351, 309, 263, 23, 325,
	332, 253, -98, -99, 317, 281, 354, -319, -151, 281,
	82, -126, -117, 344, 4, -280, -282, 20, 21, 23,
	33, 34, 35, 40, 44, 47, 48, 55, 60, 61,
	62, 64, 66, 67, 68, 71, 72, 80, 81, 83,
	85, 89, 91, 93, 96, 97, 99, 104, 105, 106,
	112, 113, 118, 120, 125, 130, 131, 132, 133, 140,
	143, 145, 138, 155, 156, 157, 159, 160, 161, 164,
	163, 168, 171, 174, 176, 177, 178, 181, 179, 183,
	184, 186, 185, 191, 193, 194, 196, 199, 202, 205,
	208, 209, 210, 211, 212, 214, 216, 218, 220, 221,
	222, 223, 224, 226, 227, 229, 230, 231, 232, 233,
	236, 234, 235, 237, 238, 239, 240, 242, 244, 245,
	247, 261, 262, 273, 249, 250, 251, 252, 256, 254,
	257, 258, 260, 263, 265, 268, 271, 272, 274, 277,
	275, 270, 280, 282, 283, 284, 285, 286, 287, 288,
	295, 296, 300, 301, 302, 303, 306, 307, 308, 309,
	311, 314, 315, 316, 321, 326, 327, 328, 329, 330,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 84, 86, 87, 103, 107, 108, 114,
	115, 116, 126, 128, 134, 135, 144, 146, 147, 148,
	149, 150, 152, 166, 180, 190, 192, 203, 207, 215,
	217, 225, 246, 255, 266, 267, 276, 278, 290, 291,
	292, 297, 298, 313, 317, 318, -319, -125, -117, 82,
	-117, 218, 22, 91, 143, 308, 307, 22, 214, 254,
	283, 285, -117, -44, 351, -43, -4, -25, -34, -45,
	-41, -64, -40, -54, -32, -48, -86, -87, -323, 22,
	-324, -325, 69, 97, 124, 253, 143, 91, 307, -272,
	4, -280, -282, -281, -283, 58, 70, 123, 142, 136,
	154, 158, 167, 169, 182, 204, 206, 243, 264, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 49,
	50, 54, 57, 59, 65, 69, 73, 74, 76, 75,
	77, 78, 79, 88, 90, 92, 94, 95, 98, 100,
	102, 109, 110, 111, 119, 121, 122, 124, 127, 129,
	137, 139, 141, 151, 153, 162, 165, 170, 172, 173,
	187, 188, 189, 195, 197, 198, 200, 201, 213, 219,
	228, 241, 253, 259, 269, 279, 281, 289, 293, 294,
	299, 304, 305, 310, 312, 319, 320, 322, 323, 324,
	325, 156, -117, 156, -323, -121, 249, -117, -121, -83,
	257, 4, 22, 82, 181, 259, 290, 171, 55, 246,
	257, -62, 296, -61, 290, -271, -63, -152, 181, -117,
	-328, 296, 296, -328, -328, -120, 296, 293, -327, 281,
	156, 222, 281, 310, 320, -182, 82, 305, -95, -97,
	-96, 320, 281, 139, 82, 310, -140, -141, 304, 151,
	102, 201, -94, -96, -301, -276, -269, -232, 9, 299,
	109, 197, -275, 8, 343, -268, -274, 5, 7, 342,
	4, -280, -282, -281, -83, 257, 34, 55, 22, 60,
	83, 125, 139, 140, 160, 65, 66, 221, 171, 157,
	295, 161, 258, 282, 296, 69, 311, 286, 105, 281,
	139, 82, 320, -304, 226, -300, -117, -304, -137, -138,
	22, 94, 355, -164, 351, -240, -125, 198, -3, 293,
	355, -151, -144, -117, -202, -201, 353, 122, 122, 351,
	-161, -162, -201, -202, -117, 22, 122, 153, 153, -241,
	-240, -178, 351, -246, -245, -274, 317, 197, 355, -208,
	-210, 342, 343, 337, 187, 331, -222, -212, -225, 103,
	246, 351, -125, -211, 356, 9, -298, -96, 29, -223,
	-224, 49, -117, 7, 8, 5, 6, -123, -249, -218,
	-258, 299, 109, 189, -296, -297, 4, -280, -273, -250,
	-260, -254, -257, 152, 58, 74, 75, 78, 76, 79,
	259, 310, 50, 28, 107, 108, 207, 215, 278, 297,
	298, 134, 190, 135, 56, 126, 166, 96, 37, 39,
	41, 42, 51, 52, 84, 86, 87, 114, 115, 116,
	144, 146, 147, 148, 149, 150, 192, 225, 266, 276,
	291, 292, 318, -281, -261, -262, -255, -256, -263, -220,
	351, -208, 197, -117, -83, 330, 2, 261, 351, -62,
	53, 296, -195, -196, -114, -115, -116, 155, 220, 224,
	330, 293, 336, 122, -276, -133, 88, -155, 353, -194,
	-195, -194, 293, -121, -167, -240, -208, -208, -152, 134,
	-117, -152, 139, -117, 134, -140, -141, -153, 134, -152,
	-153, 134, -129, 134, -128, -125, -117, 134, -144, 134,
	-166, -185, -186, 170, 111, 195, -169, 22, 94, -169,
	-169, 44, 352, 352, 8, 7, 7, -83, -278, -275,
	9, 261, 221, 258, 55, 122, -320, 197, 122, 122,
	122, 122, 122, 221, 258, 119, 295, 122, 155, 220,
	273, 281, 320, 122, 122, -240, 134, -125, -128, 134,
	-117, -240, 134, 355, -304, -145, 351, -156, -242, -208,
	344, -156, -164, -163, -231, -208, 88, 344, -125, 351,
	-278, -126, 355, -272, 344, -279, -278, 274, 352, -150,
	-125, -162, -241, -127, -125, -127, 260, -117, 30, -154,
	-208, 352, 355, -319, -325, 10, 11, 57, 33, 342,
	343, 344, 345, 117, 346, 347, 340, 341, 339, 334,
	335, 336, 63, 175, 248, 13, 14, 15, 26, 200,
	169, 331, 136, 264, 337, 16, 17, 18, 154, 36,
	137, -122, -130, -208, -208, -208, -208, -208, 206, -160,
	-203, 349, -96, 351, -96, -208, -154, 7, -96, -217,
	349, -226, -208, -161, 351, 5, 351, 5, -305, 326,
	119, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 217,
	-267, 321, -267, -267, -251, 351, -251, -252, 351, -251,
	327, 332, 351, 30, -219, -247, -248, -250, -259, -253,
	-257, -258, 40, 46, 45, 288, 180, 255, 267, 313,
	38, 196, 145, 144, 146, 147, 148, 149, 150, 266,
	37, 225, 115, 116, 114, 96, 87, 86, 192, 42,
	41, -261, -262, -255, -256, 84, 291, 292, 152, 39,
	52, 51, 318, 276, -319, -61, -271, -154, 30, -195,
	355, 168, -132, 174, 186, 131, 198, 328, -277, 5,
	4, -218, -232, 88, 171, -258, -270, 88, -276, -270,
	88, 72, 353, -272, -121, -106, 355, 48, 239, 351,
	-139, 187, -113, -302, 325, -139, 351, -118, 134, -117,
	-302, 187, -166, -106, 355, 103, -106, 103, -106, 355,
	103, 356, 103, 103, -186, -185, -187, -208, 22, -190,
	113, 183, -208, -210, -95, -95, -95, -142, -236, -208,
	219, 139, -152, 22, 262, -271, -322, 119, -319, -271,
	-271, -271, -271, -271, 257, -44, 119, -117, 168, -271,
	-271, 281, 139, 281, -104, 234, -103, 21, 23, 97,
	315, 103, 270, 287, 250, 270, 287, 250, 234, 103,
	234, 234, 103, -300, 30, -144, -147, 355, 122, 30,
	4, -147, 355, 352, -125, -244, 333, -117, -244, 355,
	122, 352, 355, -200, 323, -191, -54, 351, 88, 30,
	-191, -157, -158, -243, -159, -125, 351, -117, 352, 355,
	-44, -245, 293, -265, -247, -264, 230, 231, 229, 233,
	232, -247, -272, 290, -208, -208, -208, -208, -208, -208,
	-208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
	-208, -208, -208, -208, -208, -208, 169, 136, 264, 36,
	137, -208, 293, -208, -208, -208, -208, 179, 187, 189,
	299, 109, 306, 94, 193, -330, 279, 32, -215, -96,
	351, -230, 27, 269, 22, -222, 246, 351, -203, -208,
	-204, -154, 352, 352, 355, -154, -221, 350, -217, -229,
	-228, 322, 352, -154, 319, 22, 94, 344, 7, -179,
	329, 178, 85, 132, 177, -180, 252, -306, 112, 127,
	351, 352, 352, 352, -208, -208, -173, -266, -154, 4,
	329, 178, 85, 132, 177, 252, -173, -174, -208, -154,
	-175, -209, -210, 342, 343, 337, 351, 246, -176, -208,
	-154, -208, 43, 165, 294, -177, -208, 122, -154, -208,
	-208, -208, -154, -154, -154, 351, 7, 7, 290, 290,
	7, -43, 352, 355, -146, 29, -179, 351, 122, 352,
	296, -196, -131, 224, 268, 235, 256, 355, -272, -240,
	-134, -144, -135, -117, -199, -198, -286, -287, -284, 139,
	305, 110, 65, -285, 54, 219, 121, 30, 103, 211,
	30, 197, 187, -109, 284, 103, -152, -153, -153, -128,
	-129, -272, -117, -144, -188, -268, 351, 343, -189, 246,
	247, 355, -102, 31, 92, 159, -125, -321, -117, 257,
	-44, -125, -128, -125, 355, 293, -183, 65, 59, -198,
	134, 59, -284, -117, 305, -183, 65, -183, 65, 65,
	-240, 33, -54, 122, 33, -54, 122, 293, -128, 293,
	293, -240, 351, 352, -200, -242, -149, -238, 349, -240,
	-125, -96, -239, 351, -272, -200, -231, 352, -89, 133,
	193, -92, 325, -278, 274, 122, -125, -168, 241, -208,
	-168, -193, 197, -150, 317, -117, -168, -148, 355, 122,
	336, -150, -208, -321, 330, -208, -208, 293, -330, 279,
	-215, -208, 179, 189, 299, 109, 306, 94, 193, 122,
	351, -209, -209, -154, -212, 351, -154, 350, 359, 352,
	-208, 350, 350, 355, -227, -228, 98, -208, -141, 355,
	-140, -208, -154, -154, 352, 352, 293, 293, 293, 293,
	351, -311, 205, 351, 351, -208, 30, 355, 352, 122,
	352, 352, -181, 213, 352, 10, 11, 342, 343, 344,
	345, 117, 346, 347, 340, 341, 339, 334, 335, 336,
	63, 175, 248, 13, 14, 15, 154, 137, -209, -209,
	-209, -154, 351, 352, -213, -214, 122, 119, 30, -177,
	-177, -177, 352, 122, -154, 355, 355, 355, 352, 352,
	352, 7, 352, 355, 352, 330, 330, 352, -247, 349,
	349, 7, -321, -114, 303, 62, 224, -276, 352, 352,
	355, -247, -118, 139, 351, -118, -117, 351, 159, 159,
	-54, -152, 5, -54, -125, 103, -110, 99, -329, 336,
	-117, -106, -106, -106, -189, -208, -236, -125, 356, 355,
	-244, -103, -125, -117, -117, 187, -198, 134, -108, 187,
	-117, -117, 134, -117, 134, -117, -117, -104, 234, -54,
	351, -54, 351, -117, 234, -117, -125, 234, -43, -165,
	127, -244, 355, 70, -172, 158, 182, 123, 167, 243,
	142, 7, -44, -205, 356, 351, -235, 332, -96, -239,
	-238, -165, -92, 122, 280, 199, 274, -156, 188, -168,
	64, 352, -200, -158, -149, -231, 352, -208, -208, -209,
	-209, 122, 351, -208, -219, 26, 26, 352, -154, 352,
	355, -204, -208, 352, -217, 100, -208, 289, 352, 319,
	-141, -141, -141, 5, 178, 132, 177, -180, 177, -180,
	-180, 7, -312, -117, 351, 323, -140, 352, -265, -247,
	-208, -213, -208, -265, -247, -209, -209, -209, -209, -209,
	-209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
	-209, -209, -209, -209, 94, 187, 193, -209, 355, -154,
	352, -214, -213, -208, -208, -247, 352, 352, 352, -154,
	-208, -208, -208, 352, 7, 350, 7, 7, 352, -136,
	138, -199, -288, 351, -118, -143, -237, -117, -299, 351,
	-296, -297, -123, 351, -285, -208, 351, 351, 351, -139,
	351, -117, -111, 164, -329, -275, -302, 198, 352, -102,
	-272, -117, 293, 293, 103, 187, 314, -101, 97, 260,
	-184, 103, -106, 103, -106, 293, -183, 65, -154, -154,
	293, 293, 352, -216, 129, 44, -238, 158, 158, -238,
	-172, 158, -170, 204, -170, -170, -317, 351, 350, -235,
	-272, 349, 357, -154, -234, -233, 30, -117, 202, 352,
	-216, -279, 290, 351, -192, 351, 197, -54, -168, 336,
	26, 26, -208, -219, 352, -208, -208, 352, -208, 350,
	-208, 5, -208, 352, 352, 352, 352, -313, -117, -208,
	352, 352, 352, -214, 122, 94, 193, 351, -208, 352,
	352, 355, 352, 352, 352, 350, 350, 137, -289, 65,
	-290, 57, 110, 69, 187, 189, 305, 219, 54, 88,
	228, -143, 351, 352, 355, -124, -161, 57, -124, -208,
	351, -144, 352, -143, -144, -134, 30, -143, 197, -112,
	163, -329, -275, -109, -102, -117, -117, -198, 103, 187,
	88, 187, 88, 81, 301, -117, -117, -125, -117, -117,
	352, 352, -117, -125, -308, 324, -208, -154, -238, -238,
	-171, 312, 197, 158, -238, 350, 352, -318, 7, -235,
	-234, 7, -207, -206, 120, 185, 352, -117, 351, -235,
	-308, -211, -123, -117, -91, -90, 5, 95, -144, 65,
	-164, -96, 351, -208, -208, 352, 352, -141, -307, 210,
	352, -209, 122, 351, -219, 352, -208, 208, -117, -272,
	-117, 110, 134, 189, 159, 351, -209, -125, 352, -143,
	-197, -326, 68, 277, -237, -102, -272, -102, 352, -154,
	352, 352, 352, 352, -54, 352, -125, -329, -275, -110,
	-198, 189, 189, -208, -247, -106, -106, 293, 293, 293,
	293, -309, -310, -117, -171, 351, -208, -238, -205, 352,
	355, -234, 350, 355, 358, 336, -235, 351, -144, -233,
	351, 355, 352, -93, 336, 307, 188, 352, -117, 352,
	-141, 44, -209, -219, 352, 352, -117, -290, -118, 187,
	-208, -119, 351, -197, 352, -136, 351, -124, -141, 228,
	-136, -197, 351, -275, -111, -105, 57, -117, -117, 351,
	351, 355, 30, -144, -235, 7, -206, -272, 349, -234,
	-144, 352, -154, -90, 5, 260, -200, -314, 223, 247,
	-154, 352, 351, 103, 352, -293, 176, -117, -136, -197,
	-144, -102, 352, -125, -136, -143, -112, -100, 312, -272,
	-154, -154, -310, -312, 352, -233, 7, 352, -141, -157,
	352, -315, -316, 36, 302, 72, -208, -315, -144, 110,
	-291, -294, -292, 197, 123, 209, 265, 352, -136, 352,
	-139, 352, -208, 352, 352, 350, 352, -200, -316, 216,
	118, 246, 216, 118, 352, -117, -292, 197, -294, 197,
	307, 91, -293, -197, 26, -107, 48, 239, -295, 184,
	239, 48, 260, -295, -291, -136, -316, 20, 189, 88,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 33, 34, 35, 36, 0, 0, 104, 105,
	0, 108, 109, 110, 111, 112, 113, 0, 0, 0,
	120, 121, 122, 123, 124, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 473, -2, 0, 0, 190, 191,
	192, 193, 194, 0, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 417, 0, 417, 417, 421, 504, 37, 38,
	39, 40, 41, 44, 45, 46, 47, 42, 43, 0,
	382, 501, 0, -2, 512, 0, 0, 0, 0, 0,
	0, 510, 487, 488, 0, 0, -2, 0, 171, 0,
	1049, 977, 983, 984, 1008, 1009, 1010, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 0, 0, 979, 1049,
	165, 1108, 167, 0, 0, 0, 0, 115, 116, 117,
	118, 119, 164, 141, 0, 148, 149, 150, 151, 152,
	153, 154, 155, 143, 144, 145, 146, 147, 0, 174,
	175, 176, 178, 179, 180, 181, 182, 183, 184, 301,
	1022, 1023, 1024, 1025, 1026, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 0, 161, 0, 0, 410, 1135, 423, 408, 187,
	0, 261, 262, 263, 264, 265, 0, -2, 1037, 1223,
	1141, 199, 1162, 207, 1229, 0, 210, 215, -2, 137,
	425, 416, 425, 413, 414, 415, 418, 0, 0, 503,
	0, 0, 0, 0, 0, 0, 0, 381, -2, 483,
	484, 0, 0, 0, 0, 0, -2, 0, 507, 507,
	507, 0, 0, 484, 0, 189, 218, 219, 220, 229,
	230, 231, 232, 371, 0, 373, 239, 240, 1004, 0,
	1018, 1019, 1020, 1021, 259, 0, 0, 0, 262, 0,
	272, 303, 0, 0, 0, 0, 0, 279, 0, 282,
	0, 0, 287, 291, 0, 0, 297, 0, 0, 0,
	0, 0, 0, 493, 1114, 496, 990, 494, 0, 0,
	509, 508, 0, 540, 0, 492, 591, 0, 2, 0,
	0, 172, 173, 987, 985, 986, 0, 0, 0, 0,
	980, 956, 954, 955, 166, 168, 0, 0, 0, 0,
	597, 162, 0, 0, 156, 158, 1235, 0, 0, 306,
	699, 0, 0, 0, 0, 0, 0, 791, 793, 1197,
	1223, 0, 795, 796, 0, 798, 800, 801, 0, 804,
	805, 947, 979, 993, 994, 995, 996, 0, 0, 999,
	0, 1001, 1002, 1003, 847, 814, -2, -2, 991, 627,
	628, 629, 630, -2, 1237, 818, 820, 822, 824, 825,
	826, 827, 0, 1181, 1198, 1199, 1219, 1220, 1228, 1232,
	1233, 1205, 1216, 1206, 1193, 1203, 1214, 1055, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1017, 661, 662, 667, 668, 670, 0,
	0, 409, 0, 422, 188, 266, 195, 0, 0, 198,
	1192, 1162, 201, 426, 428, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 213, 138, 0, 411,
	424, 412, 0, 420, 79, 595, 106, 107, 354, 1205,
	-2, 354, 1012, 500, 1205, -2, 0, 79, 1205, 135,
	79, 1205, 79, 1205, 975, 982, 131, 1205, 133, 1205,
	479, 521, 522, 0, 0, 0, 0, 505, 506, 0,
	0, 0, 475, 476, 372, 1006, 1005, 260, 267, 88,
	89, 0, 280, 288, 0, 0, 305, 0, 0, 0,
	0, 0, 0, 281, 289, 502, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 0, 1205, 591, 0, 1205,
	0, 0, 1205, 0, 495, 0, 0, 543, 967, 971,
	972, 543, 541, 0, 964, 962, 963, 592, 593, 0,
	582, 978, 0, 952, 953, 582, 90, 101, 0, 0,
	973, 957, 601, 0, 450, 0, 0, 598, 0, 0,
	903, 502, 0, 0, 177, 0, 0, 0, 0, 882,
	883, 884, 885, 886, 887, 890, 891, 888, 889, 892,
	893, 894, 0, 0, 0, 895, 896, 897, 0, 0,
	899, 0, 901, 0, 0, 0, 0, 0, 0, 961,
	0, 0, 898, 704, 705, 706, 728, 729, 0, 792,
	958, 951, 794, 0, -2, 903, 0, 797, 802, 803,
	0, 0, 946, -2, 0, 998, 0, 696, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 646,
	664, 675, 672, 671, 648, 0, 647, 645, 0, 649,
	0, 0, 0, 502, 0, 905, 609, 610, 611, 612,
	613, 696, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 658, 0, 633, 633, 633, 650,
	651, 659, 660, 665, 666, 677, 678, 680, 682, 676,
	676, 676, 673, 674, 0, 196, 0, 0, 0, 202,
	0, 0, 431, 226, 227, 228, 433, 434, 208, 233,
	234, 235, 236, 237, 238, 0, 203, 205, 216, 204,
	206, 209, 0, 139, 419, 374, 0, 77, 78, 312,
	0, 0, 375, 0, 499, 0, 0, 0, 1205, 1011,
	438, 0, 482, 125, 0, 0, 127, 0, 129, 0,
	0, 0, 0, 0, 519, 520, 523, 527, 528, 531,
	534, 535, 525, 699, 489, 490, 491, 513, 514, 392,
	0, 0, 268, 269, 270, 271, 273, 0, 302, 274,
	275, 276, 277, 278, 283, 285, 502, 290, 292, 295,
	296, 0, 0, 0, 48, 405, 58, 0, 405, 405,
	0, 0, 0, 0, 54, 0, 0, 56, 0, 0,
	0, 0, 0, 497, 0, 0, 601, 0, 0, 0,
	970, 601, 0, 966, 0, 93, 0, 988, 100, 0,
	0, 0, 0, 462, 0, 462, 452, 0, 0, 0,
	462, 465, 466, 468, 469, 0, 0, 599, 163, 0,
	142, 157, 0, 700, 605, 606, 652, 653, 654, 655,
	656, 701, 702, 0, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, -2, -2, -2, 720, 721, 722,
	-2, -2, -2, 726, 727, -2, 900, 902, 0, 961,
	0, -2, 0, -2, -2, -2, -2, 740, 0, 742,
	745, 747, 749, 0, 0, 0, 0, 960, 759, 938,
	0, 0, 879, 880, 881, 744, 0, 0, 959, 950,
	0, 0, -2, 799, 0, 0, 0, 909, 910, 945,
	941, 0, 806, 512, 0, 0, 0, 0, 0, 1007,
	683, 684, 685, 686, 687, 688, 697, 857, 0, 0,
	0, 819, 821, 823, 0, 0, 0, 0, 913, -2,
	-2, -2, -2, -2, -2, -2, 0, 0, 903, 923,
	0, 0, 762, 0, 0, 0, 0, 1223, 0, 903,
	931, 0, 0, 0, 0, 0, 903, 0, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 159, 160, 0, 602, 604, 614, 0, 0, 197,
	0, 427, 432, 0, 223, 0, 225, 0, 140, 596,
	0, 0, 311, 987, 313, 315, 316, 317, 318, 1012,
	0, 1012, 0, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 446, 0, 136, 79, 79, 976,
	79, 981, 132, 134, 0, 529, 0, 0, 526, 532,
	533, 0, 516, 390, 391, 0, 0, 304, 185, 284,
	286, 298, 299, 582, 0, 0, 0, 0, 404, 60,
	1205, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 502, 989, 537, 968, 582, 544, 502, 554,
	591, 568, 559, 0, 969, 537, 965, 594, 100, 0,
	0, 87, 0, 91, 102, 0, 974, 114, 0, 600,
	447, 462, 0, 0, 454, 451, 449, 601, 0, 0,
	0, 0, 904, 169, 0, -2, -2, 0, 0, 0,
	760, -2, 741, 743, 746, 748, 750, 0, 0, 0,
	0, 0, 0, 0, 761, 0, 0, 948, 951, -2,
	904, 907, 908, 0, 0, 942, 0, 0, 0, 0,
	511, 512, 512, 512, 812, 0, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 0, 0, 830, 0,
	831, 832, 0, 0, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 766,
	767, 0, 0, 834, 929, 930, 0, 0, 0, 0,
	0, 0, 839, 0, 936, 0, 0, 0, 843, 844,
	845, 0, 631, 0, 657, 679, 681, 669, 906, 0,
	0, 0, 170, 200, 221, 222, 224, 217, 320, 353,
	0, 326, 0, 1012, 0, 0, 0, 0, 0, 0,
	309, 354, 376, 378, 0, 0, 442, 446, 0, 445,
	500, 126, 128, 130, 0, 0, 515, 392, 0, 0,
	300, 59, 394, 0, 0, 0, 62, 1205, 70, 0,
	407, 71, 1205, 79, 1205, 79, 72, 49, 405, 50,
	0, 51, 0, 402, 0, 393, 400, 0, 0, 539,
	0, 542, 0, 0, 0, 0, 0, 588, 588, 588,
	586, 562, 0, 568, 0, 0, 580, 0, -2, 559,
	0, 539, 86, 0, 0, 0, 103, 460, 461, 448,
	459, 0, 462, 467, 464, 470, 0, 703, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 939, 0, 874,
	0, 0, 950, -2, 911, 940, 944, 0, 807, 0,
	0, 0, 0, 1000, 689, 690, 691, 692, 693, 694,
	695, 0, 855, 856, 860, 0, 0, 817, 0, 0,
	912, 922, 924, 763, 764, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, -2, -2, -2, 781, 782,
	783, -2, -2, -2, 0, 0, 0, 925, 0, 0,
	877, 927, 928, 933, 934, 0, 836, 837, 838, 935,
	0, 0, 0, 663, 0, 607, 0, 0, 615, 307,
	0, 314, 324, 0, 0, 0, 383, 389, 389, 0,
	815, 816, 0, 0, 343, 0, 0, 0, 312, 0,
	0, 0, 444, 446, 0, 437, 438, 524, 530, 517,
	392, 186, 0, 0, 0, 0, 80, 64, 0, 0,
	0, 0, 68, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 498, 851, 0, 0, 545, 0, 0, 0,
	0, 0, 583, 587, 584, 585, 0, 0, 568, 580,
	551, 0, 0, 0, 558, 579, 0, 578, 567, -2,
	851, 92, 0, 0, 0, 0, 0, 453, 463, 0,
	0, 0, -2, 0, 753, -2, -2, 873, 904, 949,
	943, 997, 512, 808, 810, 811, 698, 862, 859, 0,
	846, 828, 829, 921, 0, 0, 0, 0, 904, 876,
	835, 0, 841, 842, 632, 608, 603, 0, 325, 0,
	328, 0, 0, 0, 0, 334, 335, 0, 0, 0,
	0, 0, 0, 352, 0, 392, 992, 0, 392, 0,
	0, 0, 345, 0, 0, 0, 0, 0, 0, 435,
	446, 0, 439, 440, 518, 396, 398, 61, 0, 0,
	76, 0, 0, 406, 0, 79, 79, 395, 0, 0,
	0, 0, 403, 401, 485, 0, 538, 536, 570, 0,
	572, 0, 0, 0, 574, 554, 563, 0, 565, 580,
	556, 0, 0, 549, 0, 548, 568, 576, 0, 0,
	486, 581, 0, 0, 0, 97, 95, 0, 0, 0,
	471, 472, 0, -2, -2, 754, 875, 0, 512, 0,
	848, -2, 0, 0, 0, 878, 0, 0, 0, 329,
	330, 1012, 0, 333, 336, 0, 338, 1014, 352, 0,
	320, 0, 349, 350, 384, 385, 388, 386, 389, 512,
	342, 347, 0, 320, 310, 352, 0, 0, 441, 442,
	63, 65, 66, 75, 83, 67, 73, 0, 0, 0,
	0, 850, 852, 0, 571, 0, 590, 573, 568, 564,
	0, 561, 552, 0, 553, 0, 580, 0, 0, 560,
	0, 0, 99, 96, 0, 0, 456, 601, 458, 809,
	865, 0, -2, 0, 789, 840, 0, 327, 331, 0,
	0, 358, 0, 320, 352, 346, 0, 392, 0, 0,
	308, 320, 0, 443, 444, 85, 0, 397, 399, 0,
	0, 0, 0, 0, 0, 566, 550, 546, 0, 557,
	0, 577, 512, 98, 94, 0, 457, 0, 0, 0,
	861, 790, 0, 0, 337, 363, 0, 0, 340, 320,
	0, 387, 807, 354, 379, 0, 436, 69, 0, 82,
	0, 0, 853, 854, 589, 555, 0, 575, 0, 601,
	858, 863, 866, -2, 1165, 1046, 0, 864, 0, 0,
	339, 359, 360, 0, 355, 356, 357, 1013, 341, 351,
	358, 352, 84, 55, 57, 547, 0, 455, 0, 868,
	869, 870, 871, 872, 323, 332, 361, 0, 362, 0,
	0, 0, 363, 320, 0, 319, 321, 322, 364, 0,
	367, 368, 0, 365, 348, 380, 867, 366, 369, 370,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:856
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:978
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:988
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1034
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1057
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = nil
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = DropCascade
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = DropRestrict
		}
	case 79:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = DropDefault
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplemented(sqllex, "alter using")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1134
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.str = ""
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1207
		{
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1264
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{ /* SKIP DOC */
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1588
		{ /* SKIP DOC */
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{ /* SKIP DOC */
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			return unimplemented(sqllex, "set local")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			return unimplemented(sqllex, "set from current")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1675
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1677
		{
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = Low
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = Normal
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = High
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.str = "client_encoding"
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1953
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1985
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1989
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2005
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = DropDefault
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2112
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			return unimplemented(sqllex, "match full")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			return unimplemented(sqllex, "match partial")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			return unimplemented(sqllex, "match simple")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2330
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2339
		{
			return unimplemented(sqllex, "no action")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2343
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			return unimplemented(sqllex, "action set null")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
			return unimplemented(sqllex, "action set default")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = true
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = false
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2453
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2457
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = Ascending
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = Descending
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2497
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2499
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = true
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = false
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2532
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2544
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2583
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.str = ""
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.str = ""
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = ReadOnly
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = ReadWrite
		}
	case 435:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.str = ""
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.str = ""
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.str = ""
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2738
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 463:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2839
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3078
		{
			return unimplemented(sqllex, "cte")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3081
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3086
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3089
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3090
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = true
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = false
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = false
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = true
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3114
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &From{}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3328
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3373
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3390
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = nil
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = true
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = false
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.str = astFullJoin
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.str = astLeftJoin
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.str = astRightJoin
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.str = astInnerJoin
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3566
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3652
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3665
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3680
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3689
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3761
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = nil
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3922
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3954
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3994
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = year
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = month
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = day
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = hour
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = minute
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = month
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = hour
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = minute
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = minute
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = nil
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = second
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4089
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			return unimplemented(sqllex, "at tz")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4292
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4358
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4584
		{
			return unimplemented(sqllex, "variadic")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4585
		{
			return unimplemented(sqllex, "variadic")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4608
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			return unimplemented(sqllex, "func_application")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4629
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			return unimplemented(sqllex, "current role")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			return unimplemented(sqllex, "current user")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			return unimplemented(sqllex, "session user")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			return unimplemented(sqllex, "user")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4686
		{
			return unimplemented(sqllex, "treat")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4730
		{
			return unimplemented(sqllex, "within group")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4731
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = Window(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4766
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.str = ""
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4828
		{
			return unimplemented(sqllex, "frame range")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4829
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4830
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4834
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4840
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4842
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4843
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4844
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = Any
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = Some
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = All
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = Plus
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = Minus
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = Mult
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = Div
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = FloorDiv
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = Mod
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = Bitand
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = Bitor
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = Pow
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = Bitxor
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = LT
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = GT
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = EQ
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = LE
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = GE
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = NE
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = Like
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = NotLike
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = ILike
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = NotILike
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5208
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5209
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5327
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5371
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5407
		{
			return unimplemented(sqllex, "func const")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5416
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = DNull
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.str = ""
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
