// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPLAIN = 57444
const EXTRACT = 57445
const EXTRACT_DURATION = 57446
const FALSE = 57447
const FAMILY = 57448
const FETCH = 57449
const FILTER = 57450
const FIRST = 57451
const FLOAT = 57452
const FLOORDIV = 57453
const FOLLOWING = 57454
const FOR = 57455
const FORCE_INDEX = 57456
const FOREIGN = 57457
const FROM = 57458
const FULL = 57459
const GRANT = 57460
const GRANTS = 57461
const GREATEST = 57462
const GROUP = 57463
const GROUPING = 57464
const HAVING = 57465
const HELP = 57466
const HIGH = 57467
const HOUR = 57468
const INCREMENTAL = 57469
const IF = 57470
const IFNULL = 57471
const ILIKE = 57472
const IN = 57473
const INTERLEAVE = 57474
const INDEX = 57475
const INDEXES = 57476
const INITIALLY = 57477
const INNER = 57478
const INSERT = 57479
const INT = 57480
const INT2VECTOR = 57481
const INT8 = 57482
const INT64 = 57483
const INTEGER = 57484
const INTERSECT = 57485
const INTERVAL = 57486
const INTO = 57487
const IS = 57488
const ISOLATION = 57489
const JOIN = 57490
const KEY = 57491
const KEYS = 57492
const LATERAL = 57493
const LC_CTYPE = 57494
const LC_COLLATE = 57495
const LEADING = 57496
const LEAST = 57497
const LEFT = 57498
const LEVEL = 57499
const LIKE = 57500
const LIMIT = 57501
const LOCAL = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const LOW = 57505
const LSHIFT = 57506
const MATCH = 57507
const MINUTE = 57508
const MONTH = 57509
const NAN = 57510
const NAME = 57511
const NAMES = 57512
const NATURAL = 57513
const NEXT = 57514
const NO = 57515
const NO_INDEX_JOIN = 57516
const NORMAL = 57517
const NOT = 57518
const NOTHING = 57519
const NULL = 57520
const NULLIF = 57521
const NULLS = 57522
const NUMERIC = 57523
const OF = 57524
const OFF = 57525
const OFFSET = 57526
const OID = 57527
const ON = 57528
const ONLY = 57529
const OPTIONS = 57530
const OR = 57531
const ORDER = 57532
const ORDINALITY = 57533
const OUT = 57534
const OUTER = 57535
const OVER = 57536
const OVERLAPS = 57537
const OVERLAY = 57538
const PARENT = 57539
const PARTIAL = 57540
const PARTITION = 57541
const PASSWORD = 57542
const PLACING = 57543
const POSITION = 57544
const PRECEDING = 57545
const PRECISION = 57546
const PREPARE = 57547
const PRIMARY = 57548
const PRIORITY = 57549
const RANGE = 57550
const READ = 57551
const REAL = 57552
const RECURSIVE = 57553
const REF = 57554
const REFERENCES = 57555
const REGCLASS = 57556
const REGPROC = 57557
const REGPROCEDURE = 57558
const REGNAMESPACE = 57559
const REGTYPE = 57560
const RENAME = 57561
const REPEATABLE = 57562
const RELEASE = 57563
const RESET = 57564
const RESTORE = 57565
const RESTRICT = 57566
const RETURNING = 57567
const REVOKE = 57568
const RIGHT = 57569
const ROLLBACK = 57570
const ROLLUP = 57571
const ROW = 57572
const ROWS = 57573
const RSHIFT = 57574
const STATUS = 57575
const SAVEPOINT = 57576
const SEARCH = 57577
const SECOND = 57578
const SELECT = 57579
const SERIAL = 57580
const SERIALIZABLE = 57581
const SESSION = 57582
const SESSION_USER = 57583
const SET = 57584
const SETTING = 57585
const SHOW = 57586
const SIMILAR = 57587
const SIMPLE = 57588
const SMALLINT = 57589
const SMALLSERIAL = 57590
const SNAPSHOT = 57591
const SOME = 57592
const SPLIT = 57593
const SQL = 57594
const START = 57595
const STDIN = 57596
const STRICT = 57597
const STRING = 57598
const STORING = 57599
const SUBSTRING = 57600
const SYMMETRIC = 57601
const SYSTEM = 57602
const TABLE = 57603
const TABLES = 57604
const TEMPLATE = 57605
const TESTING_RANGES = 57606
const TESTING_RELOCATE = 57607
const TEXT = 57608
const THEN = 57609
const TIME = 57610
const TIMESTAMP = 57611
const TIMESTAMPTZ = 57612
const TO = 57613
const TRAILING = 57614
const TRANSACTION = 57615
const TREAT = 57616
const TRIM = 57617
const TRUE = 57618
const TRUNCATE = 57619
const TYPE = 57620
const UNBOUNDED = 57621
const UNCOMMITTED = 57622
const UNION = 57623
const UNIQUE = 57624
const UNKNOWN = 57625
const UPDATE = 57626
const UPSERT = 57627
const USER = 57628
const USERS = 57629
const USING = 57630
const VALID = 57631
const VALIDATE = 57632
const VALUE = 57633
const VALUES = 57634
const VARCHAR = 57635
const VARIADIC = 57636
const VIEW = 57637
const VARYING = 57638
const WHEN = 57639
const WHERE = 57640
const WINDOW = 57641
const WITH = 57642
const WITHIN = 57643
const WITHOUT = 57644
const YEAR = 57645
const ZONE = 57646
const NOT_LA = 57647
const WITH_LA = 57648
const AS_LA = 57649
const POSTFIXOP = 57650
const UMINUS = 57651

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5437

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 30,
	328, 30,
	-2, 420,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	99, 403,
	143, 403,
	159, 403,
	184, 403,
	190, 403,
	281, 403,
	-2, 393,
	-1, 65,
	99, 402,
	143, 402,
	159, 402,
	184, 402,
	190, 402,
	281, 402,
	-2, 396,
	-1, 74,
	1, 30,
	328, 30,
	-2, 420,
	-1, 431,
	1, 198,
	328, 198,
	-2, 986,
	-1, 469,
	159, 430,
	184, 430,
	-2, 399,
	-1, 472,
	159, 429,
	184, 429,
	-2, 397,
	-1, 606,
	159, 429,
	184, 429,
	-2, 400,
	-1, 665,
	325, 919,
	-2, 912,
	-1, 666,
	325, 920,
	-2, 913,
	-1, 672,
	5, 588,
	325, 588,
	-2, 1093,
	-1, 696,
	5, 549,
	-2, 1067,
	-1, 697,
	5, 582,
	325, 582,
	-2, 1069,
	-1, 698,
	5, 557,
	-2, 1070,
	-1, 699,
	5, 556,
	-2, 1071,
	-1, 700,
	5, 582,
	325, 582,
	-2, 1074,
	-1, 701,
	5, 582,
	325, 582,
	-2, 1075,
	-1, 702,
	5, 583,
	-2, 1078,
	-1, 703,
	5, 543,
	-2, 1079,
	-1, 704,
	5, 543,
	-2, 1080,
	-1, 705,
	5, 564,
	-2, 1084,
	-1, 706,
	5, 544,
	-2, 1089,
	-1, 707,
	5, 545,
	-2, 1090,
	-1, 708,
	5, 546,
	-2, 1091,
	-1, 709,
	5, 547,
	-2, 1092,
	-1, 710,
	5, 543,
	-2, 1097,
	-1, 711,
	5, 550,
	-2, 1102,
	-1, 712,
	5, 548,
	-2, 1105,
	-1, 713,
	5, 580,
	325, 580,
	-2, 1107,
	-1, 714,
	5, 584,
	-2, 1110,
	-1, 715,
	5, 586,
	-2, 1111,
	-1, 716,
	5, 579,
	325, 579,
	-2, 1115,
	-1, 982,
	99, 403,
	143, 403,
	159, 403,
	184, 403,
	190, 403,
	281, 403,
	-2, 707,
	-1, 991,
	325, 896,
	-2, 884,
	-1, 1203,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 623,
	-1, 1204,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 624,
	-1, 1205,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 625,
	-1, 1209,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 629,
	-1, 1210,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 630,
	-1, 1211,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 631,
	-1, 1214,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 636,
	-1, 1220,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 638,
	-1, 1223,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 643,
	-1, 1224,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 644,
	-1, 1225,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 645,
	-1, 1252,
	195, 778,
	-2, 781,
	-1, 1281,
	116, 818,
	325, 919,
	-2, 912,
	-1, 1282,
	116, 819,
	-2, 1063,
	-1, 1283,
	116, 820,
	-2, 985,
	-1, 1284,
	116, 821,
	-2, 954,
	-1, 1285,
	116, 822,
	-2, 969,
	-1, 1286,
	116, 823,
	-2, 984,
	-1, 1287,
	116, 824,
	-2, 1029,
	-1, 1441,
	99, 403,
	143, 403,
	159, 403,
	184, 403,
	190, 403,
	281, 403,
	-2, 479,
	-1, 1445,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 637,
	-1, 1446,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 639,
	-1, 1451,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 640,
	-1, 1469,
	195, 777,
	-2, 780,
	-1, 1656,
	1, 480,
	69, 480,
	99, 480,
	117, 480,
	121, 480,
	123, 480,
	136, 480,
	143, 480,
	148, 480,
	156, 480,
	159, 480,
	171, 480,
	184, 480,
	186, 480,
	190, 480,
	225, 480,
	227, 480,
	281, 480,
	288, 480,
	298, 480,
	299, 480,
	307, 480,
	324, 480,
	326, 480,
	328, 480,
	329, 480,
	-2, 479,
	-1, 1658,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 641,
	-1, 1663,
	146, 0,
	-2, 657,
	-1, 1673,
	195, 779,
	-2, 782,
	-1, 1707,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 684,
	-1, 1708,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 685,
	-1, 1709,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 686,
	-1, 1713,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 690,
	-1, 1714,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 691,
	-1, 1715,
	13, 0,
	14, 0,
	15, 0,
	308, 0,
	309, 0,
	310, 0,
	-2, 692,
	-1, 1833,
	146, 0,
	-2, 658,
	-1, 1836,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 661,
	-1, 1837,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 663,
	-1, 1940,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 662,
	-1, 1941,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 664,
	-1, 1948,
	146, 0,
	-2, 693,
	-1, 2002,
	146, 0,
	-2, 694,
	-1, 2063,
	36, 0,
	130, 0,
	158, 0,
	245, 0,
	305, 0,
	-2, 1066,
}

const sqlPrivate = 57344

const sqlLast = 28137

var sqlAct = [...]int{

	87, 2062, 2042, 2008, 2087, 2043, 1074, 1613, 1651, 2044,
	2061, 900, 1877, 1082, 1652, 1684, 300, 1142, 1901, 1921,
	1439, 664, 1799, 790, 1824, 1167, 1623, 663, 656, 285,
	1562, 480, 64, 1436, 1758, 1744, 906, 1415, 1417, 518,
	1810, 753, 432, 494, 302, 1804, 642, 1146, 536, 1563,
	1141, 1160, 1366, 1530, 473, 1629, 1480, 1529, 751, 1182,
	987, 1250, 1427, 1083, 759, 1638, 1145, 902, 732, 1360,
	1114, 1036, 729, 1045, 64, 1422, 50, 1174, 625, 636,
	1260, 1237, 1098, 1234, 1066, 853, 1180, 923, 1134, 791,
	292, 29, 734, 635, 1278, 1307, 1175, 763, 291, 16,
	509, 760, 293, 8, 1107, 978, 64, 1021, 626, 537,
	528, 1149, 1076, 928, 531, 1759, 483, 65, 609, 608,
	610, 592, 429, 472, 418, 593, 851, 855, 79, 530,
	66, 1177, 428, 1017, 409, 767, 524, 658, 774, 83,
	613, 481, 591, 1468, 478, 776, 421, 1933, 931, 932,
	1934, 951, 952, 953, 961, 962, 963, 776, 1111, 776,
	2078, 273, 1079, 756, 954, 29, 931, 932, 1075, 2057,
	477, 934, 1757, 16, 965, 2050, 1310, 8, 756, 477,
	2040, 1437, 470, 1104, 460, 459, 746, 2035, 2031, 934,
	756, 756, 1472, 2004, 933, 469, 1104, 1473, 1378, 1377,
	948, 1112, 1998, 70, 491, 756, 500, 497, 659, 930,
	504, 485, 933, 931, 932, 1117, 1980, 1976, 948, 1757,
	756, 1971, 1942, 1931, 1970, 1104, 785, 72, 1928, 931,
	932, 1929, 1915, 1471, 1912, 1757, 934, 756, 1117, 1986,
	1910, 1113, 1110, 1757, 1888, 1887, 1070, 756, 1757, 939,
	1859, 1838, 934, 1117, 1117, 1425, 929, 1835, 73, 933,
	1104, 1827, 1756, 1720, 1117, 1757, 68, 939, 958, 966,
	1667, 1599, 69, 1117, 1073, 933, 1067, 1594, 931, 932,
	1073, 1670, 1547, 1545, 964, 1548, 1117, 540, 1067, 1544,
	1543, 67, 1117, 1117, 1469, 74, 956, 1117, 1425, 1402,
	1404, 934, 949, 756, 1171, 1121, 1034, 756, 1117, 1117,
	1070, 1115, 1116, 70, 939, 1117, 1405, 1254, 1479, 641,
	949, 1166, 777, 1129, 933, 621, 533, 533, 538, 1103,
	939, 895, 1104, 894, 777, 1072, 777, 72, 1073, 1033,
	784, 845, 1032, 785, 844, 756, 507, 553, 490, 1760,
	70, 513, 1818, 274, 877, 1440, 574, 2076, 1500, 1501,
	2060, 2049, 2013, 478, 1999, 1913, 1864, 949, 73, 1860,
	950, 1852, 1851, 1850, 72, 620, 68, 1846, 1109, 939,
	1845, 1844, 69, 959, 1790, 1735, 1730, 1729, 950, 1728,
	1784, 517, 492, 1678, 1656, 499, 502, 1628, 492, 534,
	1108, 1078, 1407, 1603, 1552, 73, 1549, 1537, 1246, 1528,
	1515, 1377, 525, 1499, 1496, 1495, 1493, 1485, 1484, 725,
	1403, 1324, 929, 1275, 1601, 1274, 1438, 780, 620, 995,
	619, 988, 949, 67, 515, 950, 905, 988, 67, 775,
	1686, 898, 2023, 957, 1500, 1501, 945, 946, 947, 1983,
	944, 941, 942, 943, 935, 936, 937, 938, 940, 1506,
	960, 1969, 1961, 2059, 1500, 1501, 1959, 1950, 944, 941,
	942, 943, 935, 936, 937, 938, 940, 1937, 960, 1924,
	1908, 725, 1874, 1857, 1829, 1793, 1781, 666, 666, 1763,
	1662, 1643, 1621, 1619, 1500, 1501, 666, 1518, 1519, 1520,
	950, 1618, 1616, 1247, 1571, 1570, 599, 540, 602, 1527,
	1832, 1489, 1516, 1488, 302, 540, 941, 942, 943, 935,
	936, 937, 938, 940, 607, 960, 606, 931, 932, 1783,
	757, 1465, 1460, 1239, 724, 935, 936, 937, 938, 940,
	1393, 960, 1338, 1500, 1501, 1506, 1515, 1337, 562, 1317,
	666, 1273, 563, 1170, 1022, 931, 932, 765, 1025, 1029,
	1015, 666, 1014, 1013, 1012, 1506, 723, 540, 540, 556,
	558, 1011, 1010, 933, 1009, 302, 1008, 1007, 934, 1006,
	1517, 1005, 1004, 596, 935, 936, 937, 938, 940, 1003,
	960, 878, 1002, 598, 1338, 1506, 594, 1001, 470, 1000,
	492, 933, 502, 999, 992, 981, 67, 899, 750, 1500,
	1501, 469, 666, 666, 904, 719, 616, 617, 1516, 666,
	513, 495, 624, 560, 622, 860, 860, 549, 547, 2033,
	1521, 666, 666, 666, 666, 666, 1932, 1840, 1819, 1815,
	1789, 666, 927, 516, 1506, 1788, 1387, 755, 1516, 1386,
	979, 666, 718, 525, 566, 740, 931, 932, 766, 769,
	1511, 1508, 1509, 1510, 1502, 1503, 1504, 1505, 1507, 741,
	779, 1816, 909, 782, 568, 788, 786, 1973, 1935, 1418,
	1787, 837, 842, 839, 1379, 1067, 1517, 1027, 838, 997,
	1440, 1028, 841, 567, 866, 1551, 88, 873, 879, 1550,
	1444, 883, 884, 885, 886, 887, 882, 872, 903, 584,
	1506, 890, 891, 569, 1361, 1805, 1517, 478, 467, 1075,
	896, 1687, 725, 1261, 1476, 1018, 835, 911, 588, 913,
	912, 470, 1373, 1558, 470, 470, 897, 843, 925, 2016,
	303, 1600, 1975, 2073, 919, 1120, 1293, 920, 921, 994,
	1502, 1503, 1504, 1505, 1507, 735, 797, 736, 1771, 458,
	1038, 457, 589, 1516, 452, 1399, 1582, 991, 453, 1510,
	1502, 1503, 1504, 1505, 1507, 717, 2074, 281, 876, 1111,
	1896, 492, 1895, 1039, 629, 1038, 540, 1584, 735, 1583,
	736, 1037, 1512, 1513, 1514, 1555, 1511, 1508, 1509, 1510,
	1502, 1503, 1504, 1505, 1507, 299, 1500, 1501, 1050, 1052,
	1554, 1447, 1023, 726, 1095, 1392, 64, 984, 1026, 304,
	77, 64, 1112, 1092, 533, 1391, 533, 538, 737, 566,
	282, 1517, 1390, 1389, 1019, 1020, 764, 1030, 1046, 960,
	1221, 492, 768, 768, 1069, 277, 1118, 1042, 1064, 1974,
	63, 1504, 1505, 1507, 1063, 1060, 595, 506, 1780, 1321,
	1320, 737, 1113, 1110, 499, 502, 1192, 960, 567, 742,
	1161, 1055, 893, 76, 462, 1061, 41, 744, 302, 1587,
	1101, 1065, 1081, 743, 42, 1589, 1363, 1879, 1100, 1091,
	545, 761, 1102, 278, 1133, 1096, 1093, 1573, 1094, 463,
	1049, 1236, 559, 2021, 770, 1090, 43, 1506, 735, 742,
	736, 1511, 1508, 1509, 1510, 1502, 1503, 1504, 1505, 1507,
	468, 1115, 2084, 743, 464, 1023, 1261, 1026, 1164, 1165,
	666, 2095, 1115, 465, 1236, 1172, 666, 666, 666, 666,
	666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
	666, 666, 666, 666, 666, 666, 666, 666, 283, 666,
	1516, 666, 666, 666, 666, 1020, 1019, 1123, 960, 302,
	1122, 2073, 2037, 1580, 2046, 1367, 1191, 1500, 1501, 1426,
	666, 737, 666, 541, 1398, 1244, 1349, 776, 476, 666,
	1608, 1048, 284, 666, 1356, 2038, 1752, 1371, 1035, 1109,
	892, 75, 666, 666, 666, 666, 666, 666, 666, 666,
	666, 666, 666, 666, 666, 666, 666, 1139, 544, 70,
	1138, 1183, 1190, 1137, 738, 1353, 54, 1430, 1517, 1753,
	1140, 765, 475, 666, 748, 78, 1367, 1323, 1173, 1964,
	280, 279, 2090, 72, 1605, 1574, 1433, 1031, 1243, 1258,
	747, 1218, 1400, 1241, 410, 2047, 565, 738, 1428, 492,
	1115, 1125, 542, 1016, 1156, 502, 1431, 1047, 2083, 492,
	1245, 540, 1127, 1946, 73, 415, 666, 1880, 1506, 477,
	411, 1429, 68, 1248, 1606, 1909, 976, 1487, 69, 1331,
	1086, 1128, 585, 564, 1639, 502, 1812, 1655, 502, 1288,
	1269, 1126, 477, 2048, 412, 1325, 733, 67, 2096, 1508,
	1509, 1510, 1502, 1503, 1504, 1505, 1507, 1588, 666, 1748,
	2045, 1749, 2072, 414, 1348, 931, 932, 1326, 1449, 1369,
	540, 1516, 611, 1335, 1375, 2070, 1798, 1432, 1158, 577,
	797, 797, 1359, 554, 552, 1216, 1219, 612, 934, 1751,
	1890, 2101, 586, 565, 1115, 478, 1754, 612, 1251, 2082,
	1716, 1235, 1889, 823, 777, 1255, 1855, 666, 2088, 1263,
	474, 933, 1362, 1215, 1872, 1956, 1372, 738, 587, 1557,
	1280, 1280, 1291, 1334, 1302, 1380, 1330, 1406, 860, 1408,
	1314, 1315, 1316, 1159, 1385, 910, 901, 1410, 1811, 1517,
	822, 1604, 64, 541, 1767, 2009, 850, 1395, 1396, 611,
	303, 541, 1136, 502, 1770, 1401, 666, 666, 492, 2089,
	1825, 1769, 666, 413, 671, 1750, 939, 889, 846, 1384,
	1381, 1624, 1382, 1383, 1335, 666, 666, 2091, 1800, 1873,
	666, 666, 1397, 2100, 848, 1717, 1340, 1339, 666, 1813,
	1178, 1718, 797, 1421, 1420, 666, 849, 1856, 478, 1424,
	1217, 1101, 666, 541, 541, 666, 666, 666, 1442, 1100,
	416, 303, 1634, 1102, 666, 1633, 1242, 564, 1443, 949,
	1826, 523, 542, 1502, 1503, 1504, 1505, 1507, 522, 304,
	542, 475, 603, 1614, 1766, 1791, 666, 666, 666, 666,
	1870, 1450, 1448, 1358, 1630, 666, 666, 666, 1423, 1272,
	666, 1768, 651, 797, 1949, 1854, 478, 1531, 1478, 1661,
	1464, 1586, 1871, 1494, 1459, 931, 932, 1364, 1119, 1071,
	590, 583, 582, 581, 580, 579, 578, 575, 666, 666,
	1475, 521, 542, 542, 84, 84, 275, 950, 934, 514,
	304, 1532, 998, 797, 881, 1327, 1271, 401, 402, 403,
	1568, 2041, 420, 1434, 2006, 433, 1567, 1569, 666, 1741,
	1578, 933, 1576, 420, 433, 478, 1556, 1414, 1162, 1154,
	666, 484, 484, 1595, 1355, 275, 1097, 783, 275, 275,
	503, 275, 1426, 1365, 84, 510, 781, 918, 764, 1553,
	1534, 1535, 1536, 778, 773, 749, 745, 764, 739, 1675,
	1560, 1903, 1416, 2074, 1168, 571, 1463, 492, 540, 614,
	488, 1581, 1620, 1592, 1466, 3, 939, 1585, 868, 1905,
	943, 935, 936, 937, 938, 940, 1054, 960, 302, 666,
	1430, 1596, 1482, 1483, 1617, 666, 1590, 721, 666, 666,
	666, 720, 1598, 1348, 1647, 1625, 1597, 1646, 1435, 1433,
	666, 1607, 1609, 1610, 520, 1644, 666, 64, 519, 666,
	80, 1428, 1615, 1169, 1593, 1526, 1626, 666, 1413, 1431,
	666, 668, 541, 1577, 1664, 1579, 1539, 1627, 615, 489,
	297, 24, 1636, 1966, 1429, 666, 572, 1640, 1641, 666,
	496, 1178, 1760, 666, 666, 666, 666, 666, 666, 666,
	666, 666, 666, 666, 666, 666, 666, 666, 666, 666,
	666, 666, 1632, 666, 406, 1635, 2001, 1631, 666, 1038,
	1671, 618, 666, 666, 1674, 1053, 1680, 1681, 1682, 666,
	1058, 666, 666, 666, 296, 23, 1688, 823, 823, 511,
	1432, 1690, 508, 512, 451, 1693, 1038, 1056, 1987, 1796,
	1695, 542, 1051, 1157, 1106, 24, 1153, 666, 1080, 926,
	840, 666, 789, 417, 303, 2098, 2099, 1500, 1501, 294,
	22, 1183, 1691, 1723, 822, 822, 2034, 540, 1724, 1765,
	1183, 1696, 1568, 275, 526, 275, 433, 433, 1567, 1569,
	1761, 1764, 931, 932, 1740, 1990, 295, 11, 1822, 1737,
	298, 10, 454, 455, 1736, 1650, 1611, 666, 1602, 23,
	289, 9, 666, 1727, 1546, 1457, 540, 1131, 1130, 1388,
	1322, 666, 666, 937, 938, 940, 1794, 960, 1568, 1455,
	1319, 1318, 1668, 1568, 1567, 1569, 540, 1792, 1786, 1567,
	1569, 1779, 1797, 304, 22, 1821, 1268, 1132, 985, 823,
	1842, 2020, 666, 1801, 1902, 303, 666, 666, 1683, 797,
	1795, 666, 1430, 1411, 288, 7, 995, 1830, 666, 1803,
	666, 11, 993, 461, 1802, 10, 1834, 538, 666, 1878,
	408, 1433, 880, 576, 1820, 9, 822, 1086, 1178, 1817,
	797, 797, 1452, 1637, 1721, 1642, 2036, 1847, 1486, 797,
	797, 1431, 1453, 1920, 1945, 1731, 1458, 550, 290, 4,
	823, 666, 478, 1270, 996, 40, 1565, 645, 1742, 1559,
	1808, 1809, 555, 1148, 1814, 433, 433, 1147, 305, 869,
	667, 854, 797, 863, 304, 1178, 1279, 1853, 1178, 7,
	1184, 722, 669, 794, 666, 670, 795, 822, 666, 1024,
	823, 657, 792, 1084, 666, 1240, 1259, 541, 1474, 989,
	666, 420, 796, 637, 275, 649, 433, 601, 433, 1568,
	604, 666, 1432, 1865, 1882, 1567, 1569, 1884, 1868, 1866,
	648, 1294, 1256, 4, 666, 484, 546, 822, 1823, 765,
	53, 1904, 540, 1883, 287, 20, 275, 1881, 1807, 1898,
	1454, 561, 427, 666, 1370, 1568, 1782, 1456, 1163, 914,
	84, 1567, 1569, 836, 1911, 1575, 541, 1897, 466, 275,
	1497, 1906, 666, 666, 275, 275, 275, 548, 771, 1917,
	1930, 1919, 1232, 1300, 1292, 1939, 542, 1938, 1936, 1927,
	1923, 1289, 597, 728, 977, 666, 1230, 275, 275, 1085,
	1918, 1892, 666, 573, 1376, 84, 1105, 84, 623, 922,
	487, 797, 433, 486, 1143, 666, 570, 847, 1124, 20,
	970, 1951, 967, 456, 1958, 1960, 1155, 1333, 433, 2094,
	84, 433, 433, 433, 433, 433, 888, 1965, 1944, 1572,
	1774, 433, 433, 1954, 1778, 542, 2015, 1955, 420, 666,
	1926, 1893, 1894, 71, 1972, 1900, 908, 1357, 540, 1226,
	1962, 1981, 28, 1979, 25, 21, 19, 1227, 1982, 1228,
	18, 27, 17, 1233, 484, 26, 302, 510, 15, 1991,
	1886, 1963, 1988, 14, 13, 1996, 1985, 12, 1989, 39,
	666, 38, 1994, 1178, 1178, 1997, 37, 1178, 1993, 36,
	35, 1992, 34, 64, 6, 5, 2, 1, 0, 0,
	666, 0, 0, 0, 2003, 0, 1984, 0, 0, 2011,
	797, 1461, 1462, 2022, 666, 478, 0, 2024, 2012, 2019,
	2026, 0, 0, 2025, 0, 825, 0, 0, 0, 824,
	2000, 0, 666, 2030, 2032, 1568, 2029, 0, 2028, 2017,
	0, 1567, 1569, 0, 2027, 0, 0, 666, 0, 1294,
	1294, 871, 870, 0, 864, 861, 2051, 1229, 0, 793,
	0, 0, 0, 2056, 1231, 2054, 0, 0, 666, 666,
	275, 2055, 1523, 1524, 1525, 0, 0, 0, 1043, 2067,
	2071, 0, 275, 2069, 2058, 2075, 407, 1752, 275, 1062,
	1745, 2077, 275, 0, 666, 2081, 797, 2080, 1743, 1068,
	2079, 0, 1747, 2053, 1876, 0, 823, 0, 2093, 2092,
	1294, 1294, 1294, 275, 0, 1088, 1089, 2097, 275, 0,
	1753, 275, 0, 433, 433, 0, 433, 0, 0, 666,
	2102, 0, 410, 874, 0, 0, 0, 823, 823, 0,
	1746, 0, 0, 822, 541, 0, 823, 823, 1916, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 411, 0,
	0, 0, 0, 1178, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 822, 2018, 0, 0, 823,
	0, 0, 412, 822, 822, 0, 796, 796, 0, 797,
	0, 829, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 0, 0, 0, 0, 0, 875, 2039, 0,
	1748, 0, 1749, 0, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 542, 1135, 1659, 1660, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 275, 0, 0, 0,
	1751, 275, 1144, 304, 0, 0, 0, 1754, 510, 0,
	0, 0, 0, 0, 1500, 1501, 0, 1518, 1519, 1520,
	0, 0, 0, 1294, 1294, 0, 0, 0, 0, 0,
	1831, 0, 0, 275, 0, 0, 433, 0, 0, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 796, 1719,
	0, 413, 0, 0, 0, 0, 1515, 0, 823, 0,
	0, 0, 0, 541, 2014, 0, 1750, 1294, 1294, 1294,
	1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
	1294, 1294, 1294, 1294, 1294, 1294, 0, 1294, 0, 0,
	627, 627, 0, 0, 0, 822, 0, 0, 416, 730,
	0, 0, 541, 0, 0, 1506, 0, 0, 0, 796,
	0, 0, 0, 865, 862, 0, 0, 0, 0, 0,
	0, 1086, 541, 0, 0, 0, 0, 0, 275, 1328,
	1329, 0, 0, 0, 1043, 0, 0, 1336, 0, 0,
	1521, 0, 542, 1341, 1342, 1344, 1346, 1347, 0, 796,
	0, 0, 0, 1352, 0, 0, 1354, 275, 1516, 825,
	825, 0, 0, 824, 824, 0, 275, 823, 0, 0,
	0, 275, 0, 1374, 646, 51, 0, 0, 0, 0,
	275, 542, 0, 0, 0, 0, 30, 0, 0, 0,
	275, 0, 0, 793, 793, 0, 0, 31, 55, 0,
	0, 542, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 1135, 1135, 0, 0, 915, 917, 51, 0, 0,
	0, 0, 924, 57, 0, 0, 1517, 0, 0, 33,
	0, 63, 0, 0, 971, 972, 973, 974, 975, 471,
	0, 0, 479, 908, 983, 908, 0, 433, 0, 51,
	46, 275, 0, 823, 990, 1419, 0, 41, 0, 0,
	58, 0, 0, 0, 45, 42, 0, 0, 0, 0,
	0, 825, 0, 0, 275, 824, 0, 0, 541, 0,
	1875, 47, 0, 0, 0, 0, 0, 43, 0, 0,
	822, 1500, 1501, 0, 1518, 1519, 1520, 0, 0, 0,
	0, 0, 1512, 1513, 1514, 793, 1511, 1508, 1509, 1510,
	1502, 1503, 1504, 1505, 1507, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 1057, 0, 1059, 0,
	0, 0, 825, 0, 0, 0, 824, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 823, 0, 0, 0,
	0, 0, 1077, 0, 1077, 0, 0, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 793, 0, 44, 0,
	0, 0, 825, 0, 1099, 0, 824, 0, 0, 0,
	0, 1948, 0, 822, 60, 61, 32, 0, 0, 48,
	0, 59, 1506, 0, 541, 0, 0, 49, 0, 0,
	70, 0, 0, 0, 0, 52, 793, 54, 0, 0,
	0, 0, 303, 0, 0, 0, 56, 0, 0, 1294,
	0, 0, 0, 0, 72, 0, 0, 1521, 0, 0,
	0, 1564, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 479, 0, 68, 0, 796, 0, 0, 0, 69,
	275, 275, 0, 542, 0, 0, 2002, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 304, 0, 0, 0, 1612, 796, 796, 1043, 0,
	908, 0, 0, 0, 0, 796, 796, 1622, 0, 0,
	0, 0, 0, 1517, 1294, 0, 0, 0, 275, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 1654, 627, 0, 0, 0, 0, 796, 1193,
	1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
	1214, 0, 1220, 0, 1222, 1223, 1224, 1225, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	1685, 0, 0, 1249, 0, 0, 0, 0, 0, 1512,
	1513, 1514, 0, 1511, 1508, 1509, 1510, 1502, 1503, 1504,
	1505, 1507, 41, 0, 0, 1276, 1277, 0, 0, 1290,
	42, 1301, 1303, 1308, 1311, 1312, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 1501, 43, 1518, 1519, 1520, 730, 0, 0, 0,
	0, 1350, 0, 1351, 0, 0, 1666, 1738, 1739, 1043,
	0, 0, 0, 0, 0, 471, 0, 0, 0, 0,
	0, 0, 0, 1564, 510, 0, 0, 796, 0, 1772,
	0, 1773, 0, 275, 1775, 1776, 1777, 275, 0, 1368,
	0, 0, 1515, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1564,
	0, 510, 1144, 0, 1564, 0, 0, 0, 0, 825,
	825, 1394, 793, 824, 824, 0, 275, 275, 825, 825,
	275, 1506, 824, 824, 931, 932, 0, 0, 1409, 1654,
	0, 0, 1412, 0, 0, 70, 1828, 0, 0, 0,
	0, 0, 54, 793, 793, 1099, 0, 934, 0, 0,
	0, 825, 793, 793, 0, 824, 1521, 0, 0, 72,
	924, 0, 0, 0, 0, 0, 796, 0, 0, 1848,
	933, 0, 0, 0, 1516, 0, 0, 0, 471, 0,
	0, 471, 471, 0, 0, 793, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 980, 69, 982, 0, 0, 0, 1445,
	1446, 0, 986, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 0, 1645, 1043, 939, 1867, 0, 433, 1869,
	0, 0, 0, 0, 0, 0, 0, 275, 299, 0,
	1564, 0, 1517, 433, 0, 0, 0, 0, 1470, 0,
	0, 0, 796, 0, 0, 1477, 0, 0, 1481, 0,
	0, 0, 0, 1899, 0, 0, 510, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 1564, 0, 949, 0,
	825, 275, 0, 63, 824, 0, 0, 0, 1922, 0,
	0, 0, 983, 0, 0, 0, 275, 0, 1308, 1308,
	1308, 0, 0, 0, 0, 0, 51, 0, 51, 41,
	0, 0, 510, 1654, 793, 0, 0, 42, 1512, 1513,
	1514, 0, 1511, 1508, 1509, 1510, 1502, 1503, 1504, 1505,
	1507, 1561, 51, 0, 51, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 0, 796, 950, 0, 0, 51,
	0, 0, 0, 908, 51, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 1967, 1968,
	0, 0, 0, 0, 0, 0, 0, 0, 1977, 825,
	0, 0, 1978, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 0, 0,
	0, 0, 0, 1654, 0, 0, 0, 0, 0, 1654,
	510, 0, 0, 793, 0, 0, 944, 941, 942, 943,
	935, 936, 937, 938, 940, 0, 960, 0, 1657, 0,
	0, 1658, 2010, 0, 510, 0, 0, 275, 0, 433,
	0, 0, 70, 1663, 0, 0, 0, 0, 0, 54,
	0, 0, 1672, 0, 0, 0, 1564, 0, 0, 1922,
	1676, 0, 1654, 1394, 0, 825, 72, 0, 0, 824,
	0, 0, 0, 0, 0, 0, 0, 0, 1692, 0,
	0, 0, 1694, 931, 932, 1179, 951, 952, 953, 961,
	962, 963, 0, 0, 275, 0, 510, 73, 0, 793,
	0, 0, 0, 0, 0, 68, 934, 0, 0, 965,
	0, 69, 0, 0, 2068, 1725, 1726, 0, 0, 0,
	0, 1238, 0, 0, 1732, 1733, 1734, 0, 0, 933,
	286, 1654, 0, 1500, 1501, 948, 1518, 1519, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1665,
	1762, 0, 0, 0, 0, 0, 0, 0, 825, 1785,
	0, 0, 824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 939, 1515, 0, 0, 0, 0,
	0, 954, 793, 0, 0, 0, 0, 0, 934, 0,
	0, 965, 0, 958, 966, 0, 0, 0, 0, 0,
	0, 51, 0, 51, 1806, 0, 0, 0, 0, 964,
	0, 933, 0, 0, 0, 0, 0, 948, 0, 0,
	0, 956, 0, 479, 1506, 0, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 1833, 0, 0, 0, 1836,
	1837, 0, 0, 0, 1839, 0, 0, 0, 0, 0,
	0, 1841, 0, 1843, 0, 0, 0, 0, 0, 1521,
	0, 1849, 0, 0, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 0, 0,
	0, 0, 0, 0, 0, 958, 966, 0, 0, 0,
	0, 0, 0, 0, 1858, 950, 0, 0, 51, 0,
	0, 964, 51, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 956, 0, 51, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1891, 955, 1517, 0, 0, 0, 0,
	0, 1914, 0, 0, 0, 0, 0, 1500, 1501, 0,
	1518, 1519, 1520, 0, 1238, 0, 0, 0, 957, 0,
	0, 945, 946, 947, 0, 944, 941, 942, 943, 935,
	936, 937, 938, 940, 982, 960, 1925, 950, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 0, 0, 0,
	959, 0, 0, 0, 954, 1940, 1941, 0, 0, 1515,
	0, 934, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 1512, 1513, 1514, 0, 1511, 1508, 1509, 1510, 1502,
	1503, 1504, 1505, 1507, 933, 1953, 0, 0, 0, 0,
	948, 0, 0, 982, 0, 0, 0, 0, 1957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	957, 0, 0, 945, 946, 947, 0, 944, 941, 942,
	943, 935, 936, 937, 938, 940, 0, 960, 1522, 0,
	0, 0, 730, 0, 1861, 0, 0, 0, 0, 939,
	0, 0, 0, 1521, 931, 932, 0, 951, 952, 953,
	961, 962, 963, 0, 0, 0, 0, 0, 958, 966,
	954, 1516, 0, 0, 0, 0, 0, 934, 0, 0,
	965, 0, 0, 1179, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	933, 0, 949, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 0, 0,
	1179, 0, 0, 1179, 0, 0, 0, 0, 0, 1517,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2052, 0, 0, 0, 0, 939, 0, 0, 0, 0,
	0, 931, 932, 0, 951, 952, 953, 961, 962, 963,
	950, 2066, 2066, 0, 958, 966, 0, 954, 0, 0,
	0, 0, 0, 959, 934, 0, 0, 965, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 2066, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 933, 949, 0,
	0, 0, 0, 948, 0, 1512, 1513, 1514, 0, 1511,
	1508, 1509, 1510, 1502, 1503, 1504, 1505, 1507, 0, 0,
	0, 0, 2066, 955, 0, 0, 1500, 1501, 0, 1518,
	1519, 1520, 0, 957, 0, 0, 945, 946, 947, 0,
	944, 941, 942, 943, 935, 936, 937, 938, 940, 0,
	960, 0, 939, 0, 931, 932, 0, 1542, 0, 0,
	961, 962, 963, 0, 0, 0, 950, 0, 0, 0,
	0, 958, 966, 0, 0, 0, 0, 934, 1515, 959,
	965, 0, 0, 0, 0, 0, 0, 964, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	933, 0, 0, 0, 0, 949, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 1179, 1179,
	955, 0, 1179, 0, 0, 0, 0, 0, 0, 957,
	479, 0, 945, 946, 947, 0, 944, 941, 942, 943,
	935, 936, 937, 938, 940, 939, 960, 0, 0, 0,
	0, 0, 0, 1541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 958, 966, 0, 0, 0, 0,
	1516, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 1517, 945,
	946, 947, 0, 944, 941, 942, 943, 935, 936, 937,
	938, 940, 0, 960, 0, 0, 0, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 1907, 0, 0, 0, 0, 0, 0, 959,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 1513, 1514, 0, 1511, 1508,
	1509, 1510, 1502, 1503, 1504, 1505, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 944, 941, 942, 943,
	935, 936, 937, 938, 940, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 89, 90, 320,
	91, 321, 322, 323, 324, 222, 325, 326, 327, 328,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	329, 96, 229, 230, 97, 330, 331, 231, 232, 233,
	332, 98, 234, 333, 306, 334, 99, 100, 101, 0,
	102, 335, 103, 104, 105, 336, 307, 106, 107, 337,
	338, 339, 340, 341, 342, 108, 109, 276, 110, 235,
	111, 236, 237, 343, 112, 344, 113, 345, 346, 347,
	114, 115, 348, 116, 349, 0, 350, 238, 117, 118,
	239, 240, 351, 352, 353, 119, 120, 241, 0, 121,
	354, 122, 355, 356, 308, 357, 123, 242, 358, 243,
	359, 124, 125, 126, 127, 244, 245, 310, 360, 131,
	361, 128, 362, 309, 129, 246, 130, 247, 248, 249,
	363, 250, 364, 311, 132, 312, 133, 134, 365, 136,
	135, 366, 251, 313, 137, 314, 367, 138, 368, 369,
	139, 0, 140, 141, 142, 144, 252, 143, 315, 145,
	146, 148, 147, 370, 371, 372, 253, 149, 254, 150,
	151, 373, 152, 374, 375, 153, 376, 377, 154, 255,
	316, 155, 317, 256, 156, 157, 158, 159, 378, 257,
	160, 258, 161, 379, 162, 163, 164, 259, 165, 166,
	380, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 381, 178, 318, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 382, 261, 187, 188, 383, 189,
	182, 190, 319, 191, 262, 263, 192, 384, 198, 193,
	194, 195, 197, 264, 196, 265, 385, 199, 386, 200,
	201, 202, 203, 204, 387, 266, 267, 268, 388, 389,
	205, 269, 270, 390, 206, 207, 208, 209, 391, 392,
	210, 211, 212, 393, 213, 394, 214, 215, 216, 271,
	272, 395, 396, 217, 397, 398, 399, 400, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	1648, 0, 0, 0, 0, 0, 0, 0, 1649, 89,
	90, 320, 91, 321, 322, 323, 324, 222, 325, 326,
	327, 328, 92, 93, 94, 223, 224, 225, 226, 95,
	227, 228, 329, 96, 229, 230, 97, 330, 331, 231,
	232, 233, 332, 98, 234, 333, 306, 334, 99, 100,
	101, 0, 102, 335, 103, 104, 105, 336, 307, 106,
	107, 337, 338, 339, 340, 341, 342, 108, 109, 276,
	110, 235, 111, 236, 237, 343, 112, 344, 113, 345,
	346, 347, 114, 115, 348, 116, 349, 0, 350, 238,
	117, 118, 239, 240, 351, 352, 353, 119, 120, 241,
	0, 121, 354, 122, 355, 356, 308, 357, 123, 242,
	358, 243, 359, 124, 125, 126, 127, 244, 245, 310,
	360, 131, 361, 128, 362, 309, 129, 246, 130, 247,
	248, 249, 363, 250, 364, 311, 132, 312, 133, 134,
	365, 136, 135, 366, 251, 313, 137, 314, 367, 138,
	368, 369, 139, 0, 140, 141, 142, 144, 252, 143,
	315, 145, 146, 148, 147, 370, 371, 372, 253, 149,
	254, 150, 151, 373, 152, 374, 375, 153, 376, 377,
	154, 255, 316, 155, 317, 256, 156, 157, 158, 159,
	378, 257, 160, 258, 161, 379, 162, 163, 164, 259,
	165, 166, 380, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 381, 178, 318, 179, 180, 260,
	181, 0, 183, 184, 185, 186, 382, 261, 187, 188,
	383, 189, 182, 190, 319, 191, 262, 263, 192, 384,
	198, 193, 194, 195, 197, 264, 196, 265, 385, 199,
	386, 200, 201, 202, 203, 204, 387, 266, 267, 268,
	388, 389, 205, 269, 270, 390, 206, 207, 208, 209,
	391, 392, 210, 211, 212, 393, 213, 394, 214, 215,
	216, 271, 272, 395, 396, 217, 397, 398, 399, 400,
	218, 219, 220, 221, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1995, 89, 90, 320, 91, 321, 322, 323,
	324, 222, 325, 326, 327, 328, 92, 93, 94, 223,
	224, 225, 226, 95, 227, 228, 329, 96, 229, 230,
	97, 330, 331, 231, 232, 233, 332, 98, 234, 333,
	306, 334, 99, 100, 101, 0, 102, 335, 103, 104,
	105, 336, 307, 106, 107, 337, 338, 339, 340, 341,
	342, 108, 109, 276, 110, 235, 111, 236, 237, 343,
	112, 344, 113, 345, 346, 347, 114, 115, 348, 116,
	349, 0, 350, 238, 117, 118, 239, 240, 351, 352,
	353, 119, 120, 241, 0, 121, 354, 122, 355, 356,
	308, 357, 123, 242, 358, 243, 359, 124, 125, 126,
	127, 244, 245, 310, 360, 131, 361, 128, 362, 309,
	129, 246, 130, 247, 248, 249, 363, 250, 364, 311,
	132, 312, 133, 134, 365, 136, 135, 366, 251, 313,
	137, 314, 367, 138, 368, 369, 139, 0, 140, 141,
	142, 144, 252, 143, 315, 145, 146, 148, 147, 370,
	371, 372, 253, 149, 254, 150, 151, 373, 152, 374,
	375, 153, 376, 377, 154, 255, 316, 155, 317, 256,
	156, 157, 158, 159, 378, 257, 160, 258, 161, 379,
	162, 163, 164, 259, 165, 166, 380, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 381, 178,
	318, 179, 180, 260, 181, 0, 183, 184, 185, 186,
	382, 261, 187, 188, 383, 189, 182, 190, 319, 191,
	262, 263, 192, 384, 198, 193, 194, 195, 197, 264,
	196, 265, 385, 199, 386, 200, 201, 202, 203, 204,
	387, 266, 267, 268, 388, 389, 205, 269, 270, 390,
	206, 207, 208, 209, 391, 392, 210, 211, 212, 393,
	213, 394, 214, 215, 216, 271, 272, 395, 396, 217,
	397, 398, 399, 400, 218, 219, 220, 221, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 89, 90, 320, 91, 321, 322,
	323, 324, 222, 325, 326, 327, 328, 92, 93, 94,
	223, 224, 225, 226, 95, 227, 228, 329, 96, 229,
	230, 97, 330, 331, 231, 232, 233, 332, 98, 234,
	333, 306, 334, 99, 100, 101, 0, 102, 335, 103,
	104, 105, 336, 307, 106, 107, 337, 338, 339, 340,
	341, 342, 108, 109, 276, 110, 235, 111, 236, 237,
	343, 112, 344, 113, 345, 346, 347, 114, 115, 348,
	116, 349, 0, 350, 238, 117, 118, 239, 240, 351,
	352, 353, 119, 120, 241, 0, 121, 354, 122, 355,
	356, 308, 357, 123, 242, 358, 243, 359, 124, 125,
	126, 127, 244, 245, 310, 360, 131, 361, 128, 362,
	309, 129, 246, 130, 247, 248, 249, 363, 250, 364,
	311, 132, 312, 133, 134, 365, 136, 135, 366, 251,
	313, 137, 314, 367, 138, 368, 369, 139, 0, 140,
	141, 142, 144, 252, 143, 315, 145, 146, 148, 147,
	370, 371, 372, 253, 149, 254, 150, 151, 373, 152,
	374, 375, 153, 376, 377, 154, 255, 316, 155, 317,
	256, 156, 157, 158, 159, 378, 257, 160, 258, 161,
	379, 162, 163, 164, 259, 165, 166, 380, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 381,
	178, 318, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 382, 261, 187, 188, 383, 189, 182, 190, 319,
	191, 262, 263, 192, 384, 198, 193, 194, 195, 197,
	264, 196, 265, 385, 199, 386, 200, 201, 202, 203,
	204, 387, 266, 267, 268, 388, 389, 205, 269, 270,
	390, 206, 207, 208, 209, 391, 392, 210, 211, 212,
	393, 213, 394, 214, 215, 216, 271, 272, 395, 396,
	217, 397, 398, 399, 400, 218, 219, 220, 221, 665,
	654, 655, 652, 653, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 681, 647, 0, 0, 0, 92, 93,
	94, 223, 696, 225, 697, 95, 698, 699, 0, 96,
	229, 230, 97, 650, 680, 700, 701, 233, 0, 98,
	692, 0, 673, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 307, 106, 107, 0, 674, 676,
	0, 675, 677, 108, 109, 276, 110, 702, 111, 703,
	704, 731, 112, 0, 113, 0, 0, 0, 695, 115,
	0, 116, 0, 0, 0, 638, 117, 118, 682, 683,
	661, 0, 0, 119, 120, 705, 0, 121, 0, 122,
	0, 0, 308, 0, 123, 693, 0, 243, 0, 124,
	125, 126, 127, 689, 691, 310, 0, 131, 0, 128,
	0, 309, 129, 706, 130, 707, 708, 709, 0, 672,
	0, 311, 132, 312, 133, 134, 0, 136, 135, 0,
	694, 313, 137, 314, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 315, 145, 146, 148,
	147, 633, 0, 662, 690, 149, 710, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 316, 155,
	317, 684, 156, 157, 158, 159, 0, 685, 160, 258,
	161, 0, 162, 163, 164, 711, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 318, 179, 180, 639, 181, 0, 183, 184,
	185, 186, 70, 261, 187, 188, 678, 189, 182, 190,
	319, 191, 712, 263, 192, 0, 198, 193, 194, 195,
	197, 713, 196, 686, 0, 199, 72, 200, 201, 202,
	203, 204, 0, 266, 714, 715, 0, 0, 205, 687,
	688, 660, 206, 207, 208, 209, 0, 0, 210, 211,
	212, 679, 213, 0, 214, 215, 216, 543, 716, 0,
	0, 217, 0, 0, 0, 68, 218, 219, 220, 221,
	634, 69, 0, 0, 0, 665, 654, 655, 652, 653,
	644, 630, 631, 0, 0, 0, 0, 632, 0, 0,
	640, 89, 90, 1265, 91, 643, 0, 0, 0, 681,
	647, 0, 0, 0, 92, 93, 94, 223, 696, 225,
	697, 95, 698, 699, 0, 96, 229, 230, 97, 650,
	680, 700, 701, 233, 0, 98, 692, 0, 673, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	307, 106, 107, 0, 674, 676, 0, 675, 677, 108,
	109, 276, 110, 702, 111, 703, 704, 0, 112, 0,
	113, 0, 1266, 0, 695, 115, 0, 116, 0, 0,
	0, 638, 117, 118, 682, 683, 661, 0, 0, 119,
	120, 705, 0, 121, 0, 122, 0, 0, 308, 0,
	123, 693, 0, 243, 0, 124, 125, 126, 127, 689,
	691, 310, 0, 131, 0, 128, 0, 309, 129, 706,
	130, 707, 708, 709, 0, 672, 0, 311, 132, 312,
	133, 134, 0, 136, 135, 0, 694, 313, 137, 314,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 315, 145, 146, 148, 147, 633, 0, 662,
	690, 149, 710, 150, 151, 0, 152, 0, 0, 153,
	0, 0, 154, 255, 316, 155, 317, 684, 156, 157,
	158, 159, 0, 685, 160, 258, 161, 0, 162, 163,
	164, 711, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 318, 179,
	180, 639, 181, 0, 183, 184, 185, 186, 0, 261,
	187, 188, 678, 189, 182, 190, 319, 191, 712, 263,
	192, 0, 198, 193, 194, 195, 197, 713, 196, 686,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	714, 715, 0, 0, 205, 687, 688, 660, 206, 207,
	208, 209, 0, 0, 210, 211, 212, 679, 213, 0,
	214, 215, 216, 271, 716, 1264, 0, 217, 0, 0,
	0, 0, 218, 219, 220, 221, 634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 631, 1267,
	0, 0, 0, 632, 0, 0, 640, 1262, 0, 0,
	0, 643, 665, 654, 655, 652, 653, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 681, 647, 0, 0,
	0, 92, 93, 94, 223, 696, 225, 697, 95, 698,
	699, 0, 96, 229, 230, 97, 650, 680, 700, 701,
	233, 0, 98, 692, 0, 673, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 307, 106, 107,
	0, 674, 676, 0, 675, 677, 108, 109, 276, 110,
	702, 111, 703, 704, 0, 112, 0, 113, 0, 0,
	0, 695, 115, 0, 116, 0, 0, 0, 638, 117,
	118, 682, 683, 661, 0, 0, 119, 120, 705, 0,
	121, 0, 122, 0, 0, 308, 0, 123, 693, 0,
	243, 0, 124, 125, 126, 127, 689, 691, 310, 0,
	131, 0, 128, 0, 309, 129, 706, 130, 707, 708,
	709, 0, 672, 0, 311, 132, 312, 133, 134, 0,
	136, 135, 0, 694, 313, 137, 314, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 315,
	145, 146, 148, 147, 633, 0, 662, 690, 149, 710,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 316, 155, 317, 684, 156, 157, 158, 159, 0,
	685, 160, 258, 161, 0, 162, 163, 164, 711, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 318, 179, 180, 639, 181,
	0, 183, 184, 185, 186, 70, 261, 187, 188, 678,
	189, 182, 190, 319, 191, 712, 263, 192, 0, 198,
	193, 194, 195, 197, 713, 196, 686, 0, 199, 72,
	200, 201, 202, 203, 204, 0, 266, 714, 715, 0,
	0, 205, 687, 688, 660, 206, 207, 208, 209, 0,
	0, 210, 211, 212, 679, 213, 0, 214, 215, 216,
	543, 716, 0, 0, 217, 0, 0, 0, 68, 218,
	219, 220, 221, 634, 69, 665, 654, 655, 652, 653,
	644, 0, 0, 0, 630, 631, 0, 0, 0, 0,
	632, 89, 90, 640, 91, 0, 0, 0, 643, 681,
	647, 0, 0, 0, 92, 93, 94, 223, 696, 225,
	697, 95, 698, 699, 1304, 96, 229, 230, 97, 650,
	680, 700, 701, 233, 0, 98, 692, 0, 673, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	307, 106, 107, 0, 674, 676, 0, 675, 677, 108,
	109, 276, 110, 702, 111, 703, 704, 0, 112, 0,
	113, 0, 0, 0, 695, 115, 0, 116, 0, 0,
	0, 638, 117, 118, 682, 683, 661, 0, 0, 119,
	120, 705, 0, 121, 0, 122, 0, 1309, 308, 0,
	123, 693, 0, 243, 0, 124, 125, 126, 127, 689,
	691, 310, 0, 131, 0, 128, 0, 309, 129, 706,
	130, 707, 708, 709, 0, 672, 0, 311, 132, 312,
	133, 134, 0, 136, 135, 1305, 694, 313, 137, 314,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 315, 145, 146, 148, 147, 633, 0, 662,
	690, 149, 710, 150, 151, 0, 152, 0, 0, 153,
	0, 0, 154, 255, 316, 155, 317, 684, 156, 157,
	158, 159, 0, 685, 160, 258, 161, 0, 162, 163,
	164, 711, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 318, 179,
	180, 639, 181, 0, 183, 184, 185, 186, 0, 261,
	187, 188, 678, 189, 182, 190, 319, 191, 712, 263,
	192, 0, 198, 193, 194, 195, 197, 713, 196, 686,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	714, 715, 0, 1306, 205, 687, 688, 660, 206, 207,
	208, 209, 0, 0, 210, 211, 212, 679, 213, 0,
	214, 215, 216, 271, 716, 0, 0, 217, 0, 0,
	0, 0, 218, 219, 220, 221, 634, 0, 665, 654,
	655, 652, 653, 644, 0, 0, 0, 630, 631, 0,
	0, 0, 0, 632, 89, 90, 640, 91, 0, 0,
	0, 643, 681, 647, 0, 0, 0, 92, 93, 94,
	223, 696, 225, 697, 95, 698, 699, 0, 96, 229,
	230, 97, 650, 680, 700, 701, 233, 0, 98, 692,
	0, 673, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 307, 106, 107, 0, 674, 676, 0,
	675, 677, 108, 109, 276, 110, 702, 111, 703, 704,
	0, 112, 0, 113, 0, 0, 0, 695, 115, 0,
	116, 0, 0, 0, 638, 117, 118, 682, 683, 661,
	0, 0, 119, 120, 705, 0, 121, 0, 122, 0,
	0, 308, 0, 123, 693, 0, 243, 0, 124, 125,
	126, 127, 689, 691, 310, 0, 131, 0, 128, 0,
	309, 129, 706, 130, 707, 708, 709, 0, 672, 0,
	311, 132, 312, 133, 134, 0, 136, 135, 0, 694,
	313, 137, 314, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 315, 145, 146, 148, 147,
	633, 1591, 662, 690, 149, 710, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 316, 155, 317,
	684, 156, 157, 158, 159, 0, 685, 160, 258, 161,
	0, 162, 163, 164, 711, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 318, 179, 180, 639, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 678, 189, 182, 190, 319,
	191, 712, 263, 192, 0, 198, 193, 194, 195, 197,
	713, 196, 686, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 714, 715, 0, 0, 205, 687, 688,
	660, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	679, 213, 0, 214, 215, 216, 271, 716, 0, 0,
	217, 0, 0, 0, 0, 218, 219, 220, 221, 634,
	0, 665, 654, 655, 652, 653, 644, 0, 0, 0,
	630, 631, 628, 0, 0, 0, 632, 89, 90, 640,
	91, 0, 0, 0, 643, 681, 647, 0, 0, 0,
	92, 93, 94, 223, 696, 225, 697, 95, 698, 699,
	0, 96, 229, 230, 97, 650, 680, 700, 701, 233,
	0, 98, 692, 0, 673, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 307, 106, 107, 0,
	674, 676, 0, 675, 677, 108, 109, 276, 110, 702,
	111, 703, 704, 0, 112, 0, 113, 0, 0, 0,
	695, 115, 0, 116, 0, 0, 0, 638, 117, 118,
	682, 683, 661, 0, 0, 119, 120, 705, 0, 121,
	0, 122, 0, 0, 308, 0, 123, 693, 0, 243,
	0, 124, 125, 126, 127, 689, 691, 310, 0, 131,
	0, 128, 0, 309, 129, 706, 130, 707, 708, 709,
	0, 672, 0, 311, 132, 312, 133, 134, 0, 136,
	135, 0, 694, 313, 137, 314, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 315, 145,
	146, 148, 147, 633, 0, 662, 690, 149, 710, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	316, 155, 317, 684, 156, 157, 158, 159, 0, 685,
	160, 258, 161, 0, 162, 163, 164, 711, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 318, 179, 180, 639, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 678, 189,
	182, 190, 319, 191, 712, 263, 192, 0, 198, 193,
	194, 195, 197, 713, 196, 686, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 714, 715, 0, 0,
	205, 687, 688, 660, 206, 207, 208, 209, 0, 0,
	210, 211, 212, 679, 213, 0, 214, 215, 216, 271,
	716, 0, 0, 217, 0, 0, 0, 0, 218, 219,
	220, 221, 634, 0, 0, 0, 0, 665, 654, 655,
	652, 653, 644, 630, 631, 0, 0, 0, 0, 632,
	988, 1257, 640, 89, 90, 0, 91, 643, 0, 0,
	0, 681, 647, 0, 0, 0, 92, 93, 94, 223,
	696, 225, 697, 95, 698, 699, 0, 96, 229, 230,
	97, 650, 680, 700, 701, 233, 0, 98, 692, 0,
	673, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 307, 106, 107, 0, 674, 676, 0, 675,
	677, 108, 109, 276, 110, 702, 111, 703, 704, 0,
	112, 0, 113, 0, 0, 0, 695, 115, 0, 116,
	0, 0, 0, 638, 117, 118, 682, 683, 661, 0,
	0, 119, 120, 705, 0, 121, 0, 122, 0, 0,
	308, 0, 123, 693, 0, 243, 0, 124, 125, 126,
	127, 689, 691, 310, 0, 131, 0, 128, 0, 309,
	129, 706, 130, 707, 708, 709, 0, 672, 0, 311,
	132, 312, 133, 134, 0, 136, 135, 0, 694, 313,
	137, 314, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 315, 145, 146, 148, 147, 633,
	0, 662, 690, 149, 710, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 316, 155, 317, 684,
	156, 157, 158, 159, 0, 685, 160, 258, 161, 0,
	162, 163, 164, 711, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	318, 179, 180, 639, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 678, 189, 182, 190, 319, 191,
	712, 263, 192, 0, 198, 193, 194, 195, 197, 713,
	196, 686, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 714, 715, 0, 0, 205, 687, 688, 660,
	206, 207, 208, 209, 0, 0, 210, 211, 212, 679,
	213, 0, 214, 215, 216, 271, 716, 0, 0, 217,
	0, 0, 0, 0, 218, 219, 220, 221, 634, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 630,
	631, 0, 0, 0, 0, 632, 0, 0, 640, 1722,
	0, 0, 0, 643, 665, 654, 655, 652, 653, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 681, 647,
	0, 0, 0, 92, 93, 94, 223, 696, 225, 697,
	95, 698, 699, 0, 96, 229, 230, 97, 650, 680,
	700, 701, 233, 0, 98, 692, 0, 673, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 307,
	106, 107, 0, 674, 676, 0, 675, 677, 108, 109,
	276, 110, 702, 111, 703, 704, 0, 112, 0, 113,
	0, 0, 0, 695, 115, 0, 116, 0, 0, 0,
	638, 117, 118, 682, 683, 661, 0, 0, 119, 120,
	705, 0, 121, 0, 122, 0, 0, 308, 0, 123,
	693, 0, 243, 0, 124, 125, 126, 127, 689, 691,
	310, 0, 131, 0, 128, 0, 309, 129, 706, 130,
	707, 708, 709, 0, 672, 0, 311, 132, 312, 133,
	134, 0, 136, 135, 0, 694, 313, 137, 314, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 315, 145, 146, 148, 147, 633, 0, 662, 690,
	149, 710, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 316, 155, 317, 684, 156, 157, 158,
	159, 0, 685, 160, 258, 161, 0, 162, 163, 164,
	711, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 318, 179, 180,
	639, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 678, 189, 182, 190, 319, 191, 712, 263, 192,
	0, 198, 193, 194, 195, 197, 713, 196, 686, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 714,
	715, 0, 0, 205, 687, 688, 660, 206, 207, 208,
	209, 0, 0, 210, 211, 212, 679, 213, 0, 214,
	215, 216, 271, 716, 1679, 0, 217, 0, 0, 0,
	0, 218, 219, 220, 221, 634, 0, 665, 654, 655,
	652, 653, 644, 0, 0, 0, 630, 631, 0, 0,
	0, 0, 632, 89, 90, 640, 91, 0, 0, 0,
	643, 681, 647, 0, 0, 0, 92, 93, 94, 223,
	696, 225, 697, 95, 698, 699, 0, 96, 229, 230,
	97, 650, 680, 700, 701, 233, 0, 98, 692, 0,
	673, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 307, 106, 107, 0, 674, 676, 0, 675,
	677, 108, 109, 276, 110, 702, 111, 703, 704, 0,
	112, 0, 113, 0, 0, 0, 695, 115, 0, 116,
	0, 0, 0, 638, 117, 118, 682, 683, 661, 0,
	0, 119, 120, 705, 0, 121, 0, 122, 0, 0,
	308, 0, 123, 693, 0, 243, 0, 124, 125, 126,
	127, 689, 691, 310, 0, 131, 0, 128, 0, 309,
	129, 706, 130, 707, 708, 709, 0, 672, 0, 311,
	132, 312, 133, 134, 0, 136, 135, 0, 694, 313,
	137, 314, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 315, 145, 146, 148, 147, 633,
	0, 662, 690, 149, 710, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 316, 155, 317, 684,
	156, 157, 158, 159, 0, 685, 160, 258, 161, 0,
	162, 163, 164, 711, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	318, 179, 180, 639, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 678, 189, 182, 190, 319, 191,
	712, 263, 192, 0, 198, 193, 194, 195, 197, 713,
	196, 686, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 714, 715, 0, 0, 205, 687, 688, 660,
	206, 207, 208, 209, 0, 0, 210, 211, 212, 679,
	213, 0, 214, 215, 216, 271, 716, 0, 0, 217,
	0, 0, 0, 0, 218, 219, 220, 221, 634, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 630,
	631, 0, 0, 0, 0, 632, 0, 0, 640, 1669,
	0, 0, 0, 643, 665, 654, 655, 652, 653, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 681, 647,
	0, 0, 0, 92, 93, 94, 223, 696, 225, 697,
	95, 698, 699, 0, 96, 229, 230, 97, 650, 680,
	700, 701, 233, 0, 98, 692, 0, 673, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 307,
	106, 107, 0, 674, 676, 0, 675, 677, 108, 109,
	276, 110, 702, 111, 703, 704, 731, 112, 0, 113,
	0, 0, 0, 695, 115, 0, 116, 0, 0, 0,
	638, 117, 118, 682, 683, 661, 0, 0, 119, 120,
	705, 0, 121, 0, 122, 0, 0, 308, 0, 123,
	693, 0, 243, 0, 124, 125, 126, 127, 689, 691,
	310, 0, 131, 0, 128, 0, 309, 129, 706, 130,
	707, 708, 709, 0, 672, 0, 311, 132, 312, 133,
	134, 0, 136, 135, 0, 694, 313, 137, 314, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 315, 145, 146, 148, 147, 633, 0, 662, 690,
	149, 710, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 316, 155, 317, 684, 156, 157, 158,
	159, 0, 685, 160, 258, 161, 0, 162, 163, 164,
	711, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 318, 179, 180,
	639, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 678, 189, 182, 190, 319, 191, 712, 263, 192,
	0, 198, 193, 194, 195, 197, 713, 196, 686, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 714,
	715, 0, 0, 205, 687, 688, 660, 206, 207, 208,
	209, 0, 0, 210, 211, 212, 679, 213, 0, 214,
	215, 216, 271, 716, 0, 0, 217, 0, 0, 0,
	0, 218, 219, 220, 221, 634, 0, 665, 654, 655,
	652, 653, 644, 0, 0, 0, 630, 631, 0, 0,
	0, 0, 632, 89, 90, 640, 91, 0, 0, 0,
	643, 681, 647, 0, 0, 0, 92, 93, 94, 223,
	696, 225, 697, 95, 698, 699, 0, 96, 229, 230,
	97, 650, 680, 700, 701, 233, 0, 98, 692, 0,
	673, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 307, 106, 107, 0, 674, 676, 0, 675,
	677, 108, 109, 276, 110, 702, 111, 703, 704, 0,
	112, 0, 113, 0, 0, 0, 695, 115, 0, 116,
	0, 0, 0, 638, 117, 118, 682, 683, 661, 0,
	0, 119, 120, 705, 0, 121, 0, 122, 0, 1309,
	308, 0, 123, 693, 0, 243, 0, 124, 125, 126,
	127, 689, 691, 310, 0, 131, 0, 128, 0, 309,
	129, 706, 130, 707, 708, 709, 0, 672, 0, 311,
	132, 312, 133, 134, 0, 136, 135, 0, 694, 313,
	137, 314, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 315, 145, 146, 148, 147, 633,
	0, 662, 690, 149, 710, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 316, 155, 317, 684,
	156, 157, 158, 159, 0, 685, 160, 258, 161, 0,
	162, 163, 164, 711, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	318, 179, 180, 639, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 678, 189, 182, 190, 319, 191,
	712, 263, 192, 0, 198, 193, 194, 195, 197, 713,
	196, 686, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 714, 715, 0, 0, 205, 687, 688, 660,
	206, 207, 208, 209, 0, 0, 210, 211, 212, 679,
	213, 0, 214, 215, 216, 271, 716, 0, 0, 217,
	0, 0, 0, 0, 218, 219, 220, 221, 634, 0,
	665, 654, 655, 652, 653, 644, 0, 0, 0, 630,
	631, 0, 0, 0, 0, 632, 89, 90, 640, 91,
	0, 0, 0, 643, 681, 647, 0, 0, 0, 92,
	93, 94, 223, 696, 225, 697, 95, 698, 699, 0,
	96, 229, 230, 97, 650, 680, 700, 701, 233, 0,
	98, 692, 0, 673, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 307, 106, 107, 0, 674,
	676, 0, 675, 677, 108, 109, 276, 110, 702, 111,
	703, 704, 0, 112, 0, 113, 0, 0, 0, 695,
	115, 0, 116, 0, 0, 0, 638, 117, 118, 682,
	683, 661, 0, 0, 119, 120, 705, 0, 121, 0,
	122, 0, 0, 308, 0, 123, 693, 0, 243, 0,
	124, 125, 126, 127, 689, 691, 310, 0, 131, 0,
	128, 0, 309, 129, 706, 130, 707, 708, 709, 0,
	672, 0, 311, 132, 312, 133, 134, 0, 136, 135,
	0, 694, 313, 137, 314, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 315, 145, 146,
	148, 147, 633, 0, 662, 690, 149, 710, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 316,
	155, 317, 684, 156, 157, 158, 159, 0, 685, 160,
	258, 161, 0, 162, 163, 164, 711, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 318, 179, 180, 639, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 678, 189, 182,
	190, 319, 191, 712, 263, 192, 0, 198, 193, 194,
	195, 197, 713, 196, 686, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 714, 715, 0, 0, 205,
	687, 688, 660, 206, 207, 208, 209, 0, 0, 210,
	211, 212, 679, 213, 0, 214, 215, 216, 271, 716,
	0, 0, 217, 0, 0, 0, 0, 218, 219, 220,
	221, 634, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 630, 631, 0, 0, 0, 0, 632, 0,
	0, 640, 1252, 0, 0, 0, 643, 665, 654, 655,
	652, 653, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 681, 647, 0, 0, 0, 92, 93, 94, 223,
	696, 225, 697, 95, 698, 699, 0, 96, 229, 230,
	97, 650, 680, 700, 701, 233, 0, 98, 692, 0,
	673, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 307, 106, 107, 0, 674, 676, 0, 675,
	677, 108, 109, 276, 110, 702, 111, 703, 704, 0,
	112, 0, 113, 0, 0, 0, 695, 115, 0, 116,
	0, 0, 0, 638, 117, 118, 682, 683, 661, 0,
	0, 119, 120, 705, 0, 121, 0, 122, 0, 0,
	308, 0, 123, 693, 0, 243, 0, 124, 125, 126,
	127, 689, 691, 310, 0, 131, 0, 128, 0, 309,
	129, 706, 130, 707, 708, 709, 0, 672, 0, 311,
	132, 312, 133, 134, 0, 136, 135, 0, 694, 313,
	137, 314, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 315, 145, 146, 148, 147, 633,
	0, 662, 690, 149, 710, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 316, 155, 317, 684,
	156, 157, 158, 159, 0, 685, 160, 258, 161, 0,
	162, 163, 164, 711, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	318, 179, 180, 639, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 678, 189, 182, 190, 319, 191,
	712, 263, 192, 0, 198, 193, 194, 195, 197, 713,
	196, 686, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 714, 715, 0, 0, 205, 687, 688, 660,
	206, 207, 208, 209, 0, 0, 210, 211, 212, 679,
	213, 0, 214, 215, 216, 271, 716, 0, 0, 217,
	0, 0, 0, 0, 218, 219, 220, 221, 634, 0,
	0, 0, 0, 665, 654, 655, 652, 653, 644, 630,
	631, 628, 0, 0, 0, 632, 0, 0, 640, 89,
	90, 916, 91, 643, 0, 0, 0, 681, 647, 0,
	0, 0, 92, 93, 94, 223, 696, 225, 697, 95,
	698, 699, 0, 96, 229, 230, 97, 650, 680, 700,
	701, 233, 0, 98, 692, 0, 673, 0, 99, 100,
	101, 0, 102, 0, 103, 104, 105, 0, 307, 106,
	107, 0, 674, 676, 0, 675, 677, 108, 109, 276,
	110, 702, 111, 703, 704, 0, 112, 0, 113, 0,
	0, 0, 695, 115, 0, 116, 0, 0, 0, 638,
	117, 118, 682, 683, 661, 0, 0, 119, 120, 705,
	0, 121, 0, 122, 0, 0, 308, 0, 123, 693,
	0, 243, 0, 124, 125, 126, 127, 689, 691, 310,
	0, 131, 0, 128, 0, 309, 129, 706, 130, 707,
	708, 709, 0, 672, 0, 311, 132, 312, 133, 134,
	0, 136, 135, 0, 694, 313, 137, 314, 0, 138,
	0, 0, 139, 0, 140, 141, 142, 144, 252, 143,
	315, 145, 146, 148, 147, 633, 0, 662, 690, 149,
	710, 150, 151, 0, 152, 0, 0, 153, 0, 0,
	154, 255, 316, 155, 317, 684, 156, 157, 158, 159,
	0, 685, 160, 258, 161, 0, 162, 163, 164, 711,
	165, 166, 0, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 0, 178, 318, 179, 180, 639,
	181, 0, 183, 184, 185, 186, 0, 261, 187, 188,
	678, 189, 182, 190, 319, 191, 712, 263, 192, 0,
	198, 193, 194, 195, 197, 713, 196, 686, 0, 199,
	0, 200, 201, 202, 203, 204, 0, 266, 714, 715,
	0, 0, 205, 687, 688, 660, 206, 207, 208, 209,
	0, 0, 210, 211, 212, 679, 213, 0, 214, 215,
	216, 271, 716, 0, 0, 217, 0, 0, 0, 0,
	218, 219, 220, 221, 634, 0, 665, 654, 655, 652,
	653, 644, 0, 0, 0, 630, 631, 0, 0, 0,
	0, 632, 89, 90, 640, 91, 0, 0, 0, 643,
	681, 647, 0, 0, 0, 92, 93, 94, 223, 696,
	225, 697, 95, 698, 699, 0, 96, 229, 230, 97,
	650, 680, 700, 701, 233, 0, 98, 692, 0, 673,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 307, 106, 2065, 0, 674, 676, 0, 675, 677,
	108, 109, 276, 110, 702, 111, 703, 704, 0, 112,
	0, 113, 0, 0, 0, 695, 115, 0, 116, 0,
	0, 0, 638, 117, 118, 682, 683, 661, 0, 0,
	119, 120, 705, 0, 121, 0, 122, 0, 0, 308,
	0, 123, 693, 0, 243, 0, 124, 125, 126, 127,
	689, 691, 310, 0, 131, 0, 128, 0, 309, 129,
	706, 130, 707, 708, 709, 0, 672, 0, 311, 132,
	312, 133, 134, 0, 136, 135, 0, 694, 313, 137,
	314, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 315, 145, 146, 148, 147, 633, 0,
	662, 690, 149, 710, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 316, 155, 317, 684, 156,
	157, 158, 159, 0, 685, 160, 258, 161, 0, 162,
	163, 164, 711, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 318,
	179, 180, 639, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 678, 189, 182, 190, 319, 191, 712,
	263, 192, 0, 198, 193, 194, 195, 197, 713, 196,
	686, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 714, 715, 0, 0, 205, 687, 688, 660, 206,
	207, 2064, 209, 0, 0, 210, 211, 212, 679, 213,
	0, 214, 215, 216, 271, 716, 0, 0, 217, 0,
	0, 0, 0, 218, 219, 220, 221, 634, 0, 665,
	654, 655, 652, 653, 644, 0, 0, 0, 630, 631,
	0, 0, 0, 0, 632, 89, 90, 640, 91, 0,
	0, 0, 643, 681, 647, 0, 0, 0, 92, 93,
	94, 2063, 696, 225, 697, 95, 698, 699, 0, 96,
	229, 230, 97, 650, 680, 700, 701, 233, 0, 98,
	692, 0, 673, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 307, 106, 2065, 0, 674, 676,
	0, 675, 677, 108, 109, 276, 110, 702, 111, 703,
	704, 0, 112, 0, 113, 0, 0, 0, 695, 115,
	0, 116, 0, 0, 0, 638, 117, 118, 682, 683,
	661, 0, 0, 119, 120, 705, 0, 121, 0, 122,
	0, 0, 308, 0, 123, 693, 0, 243, 0, 124,
	125, 126, 127, 689, 691, 310, 0, 131, 0, 128,
	0, 309, 129, 706, 130, 707, 708, 709, 0, 672,
	0, 311, 132, 312, 133, 134, 0, 136, 135, 0,
	694, 313, 137, 314, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 315, 145, 146, 148,
	147, 633, 0, 662, 690, 149, 710, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 316, 155,
	317, 684, 156, 157, 158, 159, 0, 685, 160, 258,
	161, 0, 162, 163, 164, 711, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 318, 179, 180, 639, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 678, 189, 182, 190,
	319, 191, 712, 263, 192, 0, 198, 193, 194, 195,
	197, 713, 196, 686, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 714, 715, 0, 0, 205, 687,
	688, 660, 206, 207, 2064, 209, 0, 0, 210, 211,
	212, 679, 213, 0, 214, 215, 216, 271, 716, 0,
	0, 217, 0, 0, 0, 0, 218, 219, 220, 221,
	634, 0, 665, 654, 655, 652, 653, 644, 0, 0,
	0, 630, 631, 0, 0, 0, 0, 632, 89, 90,
	640, 91, 0, 0, 0, 643, 681, 647, 0, 0,
	0, 92, 93, 94, 223, 696, 225, 697, 95, 698,
	699, 0, 96, 229, 230, 97, 650, 680, 700, 701,
	233, 0, 98, 692, 0, 673, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 307, 106, 107,
	0, 674, 676, 0, 675, 677, 108, 109, 276, 110,
	702, 111, 703, 704, 0, 112, 0, 113, 0, 0,
	0, 695, 115, 0, 116, 0, 0, 0, 638, 117,
	118, 682, 683, 661, 0, 0, 119, 120, 705, 0,
	121, 0, 122, 0, 0, 308, 0, 123, 693, 0,
	243, 0, 124, 125, 126, 127, 689, 691, 310, 0,
	131, 0, 128, 0, 309, 129, 706, 130, 707, 708,
	709, 0, 672, 0, 311, 132, 312, 133, 134, 0,
	136, 135, 0, 694, 313, 137, 314, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 315,
	145, 146, 148, 147, 633, 0, 662, 690, 149, 710,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 316, 155, 317, 684, 156, 157, 158, 159, 0,
	685, 160, 258, 161, 0, 162, 163, 164, 711, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 318, 179, 180, 639, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 678,
	189, 182, 190, 319, 191, 712, 263, 192, 0, 198,
	193, 194, 195, 197, 713, 196, 686, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 714, 715, 0,
	0, 205, 687, 688, 660, 206, 207, 208, 209, 0,
	0, 210, 211, 212, 679, 213, 0, 214, 215, 216,
	271, 716, 0, 0, 217, 0, 0, 0, 0, 218,
	219, 220, 221, 634, 0, 1281, 654, 655, 652, 653,
	644, 0, 0, 0, 630, 631, 0, 0, 0, 0,
	632, 89, 90, 640, 91, 0, 0, 0, 643, 681,
	647, 0, 0, 0, 92, 93, 94, 223, 696, 225,
	697, 95, 698, 699, 0, 96, 229, 230, 97, 650,
	680, 700, 701, 233, 0, 98, 692, 0, 673, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	307, 106, 107, 0, 674, 676, 0, 675, 677, 108,
	109, 276, 110, 702, 1284, 703, 704, 0, 112, 0,
	113, 0, 0, 0, 695, 115, 0, 116, 0, 0,
	0, 638, 117, 118, 682, 683, 661, 0, 0, 119,
	120, 705, 0, 121, 0, 122, 0, 0, 308, 0,
	123, 693, 0, 243, 0, 124, 125, 1285, 127, 689,
	691, 310, 0, 131, 0, 128, 0, 309, 129, 706,
	130, 707, 708, 709, 0, 672, 0, 311, 132, 312,
	133, 134, 0, 136, 135, 0, 694, 313, 137, 314,
	0, 138, 0, 0, 139, 0, 140, 1286, 1283, 144,
	252, 143, 315, 145, 146, 148, 147, 633, 0, 662,
	690, 149, 710, 150, 151, 0, 152, 0, 0, 153,
	0, 0, 154, 255, 316, 155, 317, 684, 156, 157,
	158, 159, 0, 685, 160, 258, 161, 0, 162, 163,
	164, 711, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 318, 179,
	180, 639, 181, 0, 183, 184, 185, 1287, 0, 261,
	187, 188, 678, 189, 182, 190, 319, 191, 712, 263,
	192, 0, 198, 193, 194, 195, 197, 713, 196, 686,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	714, 715, 0, 0, 205, 687, 688, 660, 206, 207,
	208, 209, 0, 0, 210, 211, 212, 679, 213, 0,
	214, 215, 216, 271, 716, 0, 0, 217, 0, 0,
	0, 0, 218, 219, 1282, 221, 634, 0, 665, 654,
	655, 652, 653, 644, 0, 0, 0, 630, 631, 0,
	0, 0, 0, 632, 89, 90, 640, 91, 0, 0,
	0, 643, 681, 647, 0, 0, 0, 92, 93, 94,
	223, 696, 225, 697, 95, 698, 699, 0, 96, 229,
	230, 97, 650, 680, 700, 701, 233, 0, 98, 692,
	0, 673, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 307, 106, 107, 0, 674, 676, 0,
	675, 677, 108, 109, 276, 110, 702, 111, 703, 704,
	0, 112, 0, 113, 0, 0, 0, 695, 115, 0,
	116, 0, 0, 0, 638, 117, 118, 682, 683, 661,
	0, 0, 119, 120, 705, 0, 121, 0, 122, 0,
	0, 308, 0, 123, 693, 0, 243, 0, 124, 125,
	126, 127, 689, 691, 310, 0, 131, 0, 128, 0,
	309, 129, 706, 130, 707, 708, 709, 0, 672, 0,
	311, 132, 312, 133, 134, 0, 136, 135, 0, 694,
	313, 137, 314, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 315, 145, 146, 148, 147,
	0, 0, 662, 690, 149, 710, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 316, 155, 317,
	684, 156, 157, 158, 159, 0, 685, 160, 258, 161,
	0, 162, 163, 164, 711, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 318, 179, 180, 1299, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 678, 189, 182, 190, 319,
	191, 712, 263, 192, 0, 198, 193, 194, 195, 197,
	713, 196, 686, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 714, 715, 0, 0, 205, 687, 688,
	660, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	679, 213, 0, 214, 215, 216, 271, 716, 0, 0,
	217, 0, 0, 0, 0, 218, 219, 220, 221, 0,
	0, 665, 654, 655, 652, 653, 644, 0, 0, 0,
	1295, 1296, 0, 0, 0, 0, 1297, 89, 90, 1298,
	91, 0, 0, 0, 643, 681, 647, 0, 0, 0,
	92, 93, 94, 0, 696, 225, 697, 95, 698, 699,
	0, 96, 229, 230, 97, 650, 680, 700, 701, 233,
	0, 98, 692, 0, 673, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 307, 106, 2065, 0,
	674, 676, 0, 675, 677, 108, 109, 276, 110, 702,
	111, 703, 704, 0, 112, 0, 113, 0, 0, 0,
	695, 115, 0, 116, 0, 0, 0, 638, 117, 118,
	682, 683, 661, 0, 0, 119, 120, 705, 0, 121,
	0, 122, 0, 0, 308, 0, 123, 693, 0, 243,
	0, 124, 125, 126, 127, 689, 691, 0, 0, 131,
	0, 128, 0, 309, 129, 706, 130, 707, 708, 709,
	0, 672, 0, 0, 132, 312, 133, 134, 0, 136,
	135, 0, 694, 313, 137, 0, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 315, 145,
	146, 148, 147, 633, 0, 662, 690, 149, 710, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	316, 155, 317, 684, 156, 157, 158, 159, 0, 685,
	160, 258, 161, 0, 162, 163, 164, 711, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 318, 179, 180, 639, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 678, 189,
	182, 190, 0, 191, 712, 263, 192, 0, 198, 193,
	194, 195, 197, 713, 196, 686, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 714, 715, 0, 0,
	205, 687, 688, 660, 206, 207, 2064, 209, 0, 0,
	210, 211, 212, 679, 213, 0, 214, 215, 216, 271,
	716, 0, 0, 217, 0, 0, 0, 0, 218, 219,
	220, 221, 0, 0, 665, 654, 655, 652, 653, 644,
	0, 0, 0, 630, 631, 0, 0, 0, 0, 632,
	89, 90, 640, 91, 0, 0, 0, 643, 681, 647,
	0, 0, 0, 92, 93, 94, 223, 696, 225, 697,
	95, 698, 699, 0, 96, 229, 230, 97, 0, 680,
	700, 701, 233, 0, 98, 692, 0, 673, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 307,
	106, 107, 0, 674, 676, 0, 675, 677, 108, 109,
	276, 110, 702, 111, 703, 704, 0, 112, 0, 113,
	0, 0, 0, 695, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 682, 683, 661, 0, 0, 119, 120,
	705, 0, 121, 0, 122, 0, 0, 308, 0, 123,
	693, 0, 243, 0, 124, 125, 126, 127, 689, 691,
	310, 0, 131, 0, 128, 0, 309, 129, 706, 130,
	707, 708, 709, 0, 672, 0, 311, 132, 312, 133,
	134, 0, 136, 135, 0, 694, 313, 137, 314, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 315, 145, 146, 148, 147, 0, 0, 662, 690,
	149, 710, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 316, 155, 317, 684, 156, 157, 158,
	159, 0, 685, 160, 258, 161, 0, 162, 163, 164,
	711, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 318, 179, 180,
	1299, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 678, 189, 182, 190, 319, 191, 712, 263, 192,
	0, 198, 193, 194, 195, 197, 713, 196, 686, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 714,
	715, 0, 0, 205, 687, 688, 660, 206, 207, 208,
	209, 665, 0, 210, 211, 212, 679, 213, 0, 214,
	215, 216, 271, 716, 0, 0, 217, 89, 90, 0,
	91, 218, 219, 220, 221, 681, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 1298, 680, 231, 232, 233,
	643, 98, 692, 0, 673, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 307, 106, 107, 0,
	674, 676, 0, 675, 677, 108, 109, 276, 110, 235,
	111, 236, 237, 0, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	682, 683, 0, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 0, 0, 308, 0, 123, 693, 0, 243,
	0, 124, 125, 126, 127, 689, 691, 310, 0, 131,
	0, 128, 0, 309, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 311, 132, 312, 133, 134, 0, 136,
	135, 0, 694, 313, 137, 314, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 315, 145,
	146, 148, 147, 0, 0, 0, 690, 149, 254, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	316, 155, 317, 684, 156, 157, 158, 159, 0, 685,
	160, 258, 161, 0, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 318, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 678, 189,
	182, 190, 319, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 686, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 687, 688, 0, 206, 207, 208, 209, 539, 0,
	210, 211, 212, 679, 213, 0, 214, 215, 216, 271,
	272, 0, 0, 217, 89, 90, 0, 91, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 92, 93, 94,
	223, 224, 225, 226, 95, 227, 228, 0, 96, 229,
	230, 97, 1566, 0, 231, 232, 233, 0, 98, 234,
	0, 306, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 307, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 308, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 310, 0, 131, 0, 128, 0,
	309, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	311, 132, 312, 133, 134, 0, 136, 135, 0, 251,
	313, 137, 314, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 315, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 316, 155, 317,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 318, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 70, 261, 187, 188, 0, 189, 182, 190, 319,
	191, 262, 263, 192, 0, 198, 193, 194, 195, 197,
	264, 196, 265, 0, 199, 72, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 0, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 543, 272, 0, 0,
	217, 0, 0, 0, 68, 218, 219, 220, 221, 0,
	69, 539, 754, 0, 864, 861, 856, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 67,
	91, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 0, 0, 231, 232, 233,
	0, 98, 234, 0, 306, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 307, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 276, 110, 235,
	111, 236, 237, 867, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	239, 240, 858, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 0, 0, 308, 0, 123, 242, 0, 243,
	0, 124, 125, 126, 127, 244, 245, 310, 0, 131,
	0, 128, 0, 309, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 311, 132, 312, 133, 134, 0, 136,
	135, 0, 251, 313, 137, 314, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 315, 145,
	146, 148, 147, 0, 0, 0, 253, 149, 254, 150,
	151, 0, 152, 859, 0, 153, 0, 0, 154, 255,
	316, 155, 317, 256, 156, 157, 158, 159, 0, 257,
	160, 258, 161, 0, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 318, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 0, 189,
	182, 190, 319, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 265, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 269, 270, 857, 206, 207, 208, 209, 0, 0,
	210, 211, 212, 0, 213, 0, 214, 215, 216, 271,
	272, 539, 754, 217, 864, 861, 856, 0, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 865, 862, 222, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 0, 0, 231, 232, 233,
	0, 98, 234, 0, 306, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 307, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 276, 110, 235,
	111, 236, 237, 852, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	239, 240, 858, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 0, 0, 308, 0, 123, 242, 0, 243,
	0, 124, 125, 126, 127, 244, 245, 310, 0, 131,
	0, 128, 0, 309, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 311, 132, 312, 133, 134, 0, 136,
	135, 0, 251, 313, 137, 314, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 315, 145,
	146, 148, 147, 0, 0, 0, 253, 149, 254, 150,
	151, 0, 152, 859, 0, 153, 0, 0, 154, 255,
	316, 155, 317, 256, 156, 157, 158, 159, 0, 257,
	160, 258, 161, 0, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 318, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 0, 189,
	182, 190, 319, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 265, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 269, 270, 857, 206, 207, 208, 209, 0, 0,
	210, 211, 212, 0, 213, 0, 214, 215, 216, 271,
	272, 539, 754, 217, 864, 861, 856, 0, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 865, 862, 222, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 0, 0, 231, 232, 233,
	0, 98, 234, 0, 306, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 307, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 276, 110, 235,
	111, 236, 237, 0, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	239, 240, 858, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 0, 0, 308, 0, 123, 242, 0, 243,
	0, 124, 125, 126, 127, 244, 245, 310, 0, 131,
	0, 128, 0, 309, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 311, 132, 312, 133, 134, 0, 136,
	135, 0, 251, 313, 137, 314, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 315, 145,
	146, 148, 147, 0, 0, 0, 253, 149, 254, 150,
	151, 0, 152, 859, 0, 153, 0, 0, 154, 255,
	316, 155, 317, 256, 156, 157, 158, 159, 0, 257,
	160, 258, 161, 0, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 318, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 0, 189,
	182, 190, 319, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 265, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 269, 270, 857, 206, 207, 208, 209, 0, 0,
	210, 211, 212, 0, 213, 0, 214, 215, 216, 271,
	272, 86, 0, 217, 0, 0, 0, 0, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 865, 862, 222, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 0, 0, 231, 232, 233,
	0, 98, 234, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 276, 110, 235,
	111, 236, 237, 0, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	239, 240, 0, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 242, 0, 243,
	0, 124, 125, 126, 127, 244, 245, 0, 0, 131,
	0, 128, 0, 0, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 0, 132, 0, 133, 134, 0, 136,
	135, 0, 251, 0, 137, 0, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 0, 145,
	146, 148, 147, 0, 0, 0, 253, 149, 254, 150,
	151, 0, 152, 0, 493, 153, 0, 0, 154, 255,
	0, 155, 0, 256, 156, 157, 158, 159, 0, 257,
	160, 258, 161, 0, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 0, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 70, 261, 187, 188, 0, 189,
	182, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 265, 0, 199, 72, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 269, 270, 0, 206, 207, 208, 209, 0, 0,
	210, 211, 212, 0, 213, 0, 214, 215, 216, 543,
	272, 0, 0, 217, 86, 0, 0, 68, 218, 219,
	220, 221, 0, 69, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 222, 0,
	1176, 0, 1181, 92, 93, 94, 223, 224, 225, 226,
	95, 227, 228, 0, 96, 229, 230, 97, 0, 0,
	231, 232, 233, 0, 98, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 70, 261, 187,
	188, 0, 189, 182, 190, 0, 191, 262, 263, 192,
	0, 198, 193, 194, 195, 197, 264, 196, 265, 0,
	199, 72, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 0, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 543, 272, 0, 0, 217, 86, 0, 0,
	68, 218, 219, 220, 221, 0, 69, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 222, 0, 0, 0, 67, 92, 93, 94, 223,
	224, 225, 226, 95, 227, 228, 0, 96, 229, 230,
	97, 0, 0, 231, 232, 233, 0, 98, 234, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 0, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 276, 110, 235, 111, 236, 237, 0,
	112, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 238, 117, 118, 239, 240, 0, 0,
	0, 119, 120, 241, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 242, 0, 243, 0, 124, 125, 126,
	127, 244, 245, 0, 0, 131, 0, 128, 0, 0,
	129, 246, 130, 247, 248, 249, 0, 250, 0, 0,
	132, 0, 133, 134, 0, 136, 135, 0, 251, 0,
	137, 0, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 0, 145, 146, 148, 147, 0,
	0, 0, 253, 149, 254, 150, 151, 0, 152, 0,
	493, 153, 0, 0, 154, 255, 0, 155, 0, 256,
	156, 157, 158, 159, 0, 257, 160, 258, 161, 0,
	162, 163, 164, 259, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	0, 179, 180, 260, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 0, 189, 182, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 195, 197, 264,
	196, 265, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 267, 268, 0, 0, 205, 269, 270, 0,
	206, 207, 208, 209, 0, 0, 210, 211, 212, 0,
	213, 0, 214, 215, 216, 271, 272, 0, 0, 217,
	86, 0, 0, 0, 218, 219, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 0, 222, 0, 1176, 0, 1181, 92,
	93, 94, 223, 224, 225, 226, 95, 227, 228, 0,
	96, 229, 230, 97, 0, 0, 231, 232, 233, 0,
	98, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 244, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 182,
	190, 0, 191, 262, 263, 192, 0, 198, 193, 194,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 86, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 89, 90, 0, 91, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 92, 93, 94, 223,
	224, 225, 226, 95, 227, 228, 0, 96, 229, 230,
	97, 0, 762, 231, 232, 233, 0, 98, 234, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 0, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 276, 110, 235, 111, 236, 237, 0,
	112, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 238, 117, 118, 239, 240, 0, 0,
	0, 119, 120, 241, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 242, 0, 243, 0, 124, 125, 126,
	127, 244, 245, 0, 0, 131, 0, 128, 0, 0,
	129, 246, 130, 247, 248, 249, 0, 250, 0, 0,
	132, 0, 133, 134, 0, 136, 135, 0, 251, 0,
	137, 0, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 0, 145, 146, 148, 147, 0,
	0, 0, 253, 149, 254, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 0, 155, 0, 256,
	156, 157, 158, 159, 0, 257, 160, 258, 161, 0,
	162, 163, 164, 259, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	0, 179, 180, 260, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 0, 189, 182, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 195, 197, 264,
	196, 265, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 267, 268, 0, 0, 205, 269, 270, 0,
	206, 207, 208, 209, 86, 0, 210, 211, 212, 0,
	213, 0, 214, 215, 216, 271, 272, 0, 0, 217,
	89, 90, 0, 91, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 92, 93, 94, 223, 224, 225, 226,
	95, 227, 228, 0, 96, 229, 230, 97, 1087, 0,
	231, 232, 233, 0, 98, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 182, 190, 0, 191, 262, 263, 192,
	0, 198, 193, 194, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 86, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 89, 90, 0,
	91, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 1686, 0, 231, 232, 233,
	0, 98, 234, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 276, 110, 235,
	111, 236, 237, 0, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	239, 240, 0, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 242, 0, 243,
	0, 124, 125, 126, 127, 244, 245, 0, 0, 131,
	0, 128, 0, 0, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 0, 132, 0, 133, 134, 0, 136,
	135, 0, 251, 0, 137, 0, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 0, 145,
	146, 148, 147, 0, 0, 0, 253, 149, 254, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	0, 155, 0, 256, 156, 157, 158, 159, 0, 257,
	160, 258, 161, 0, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 0, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 0, 189,
	182, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 265, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 269, 270, 0, 206, 207, 208, 209, 0, 0,
	210, 211, 212, 0, 213, 0, 214, 215, 216, 271,
	272, 0, 0, 217, 0, 0, 0, 0, 218, 219,
	220, 221, 665, 654, 655, 652, 653, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 727, 0, 0, 0, 222, 0, 0, 0,
	0, 92, 93, 94, 223, 696, 225, 697, 95, 698,
	699, 0, 96, 229, 230, 97, 0, 0, 700, 701,
	233, 0, 98, 234, 0, 306, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 307, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	702, 111, 703, 704, 0, 112, 0, 113, 0, 0,
	0, 695, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 661, 0, 0, 119, 120, 705, 0,
	121, 0, 122, 0, 0, 308, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 244, 245, 310, 0,
	131, 0, 128, 0, 309, 129, 706, 130, 707, 708,
	709, 0, 672, 0, 311, 132, 312, 133, 134, 0,
	136, 135, 0, 251, 313, 137, 314, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 315,
	145, 146, 148, 147, 0, 0, 662, 253, 149, 710,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 316, 155, 317, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 711, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 318, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 182, 190, 319, 191, 712, 263, 192, 0, 198,
	193, 194, 195, 197, 713, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 714, 715, 0,
	0, 205, 269, 270, 660, 206, 207, 208, 209, 539,
	754, 210, 211, 212, 752, 213, 0, 214, 215, 216,
	271, 716, 0, 0, 217, 89, 90, 0, 91, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 92, 93,
	94, 223, 224, 225, 226, 95, 227, 228, 0, 96,
	229, 230, 97, 0, 0, 231, 232, 233, 0, 98,
	234, 0, 306, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 307, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 276, 110, 235, 111, 236,
	237, 0, 112, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 238, 117, 118, 239, 240,
	0, 0, 0, 119, 120, 241, 0, 121, 0, 122,
	0, 0, 308, 0, 123, 242, 0, 243, 0, 124,
	125, 126, 127, 244, 245, 310, 0, 131, 0, 128,
	0, 309, 129, 246, 130, 247, 248, 249, 0, 250,
	0, 311, 132, 312, 133, 134, 0, 136, 135, 0,
	251, 313, 137, 314, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 315, 145, 146, 148,
	147, 0, 0, 0, 253, 149, 254, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 316, 155,
	317, 256, 156, 157, 158, 159, 0, 257, 160, 258,
	161, 0, 162, 163, 164, 259, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 318, 179, 180, 260, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 0, 189, 182, 190,
	319, 191, 262, 263, 192, 0, 198, 193, 194, 195,
	197, 264, 196, 265, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 267, 268, 0, 0, 205, 269,
	270, 0, 206, 207, 208, 209, 86, 0, 210, 211,
	212, 0, 213, 0, 214, 215, 216, 271, 272, 0,
	0, 217, 89, 90, 0, 91, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 92, 93, 94, 223, 224,
	225, 226, 95, 227, 228, 0, 96, 229, 230, 97,
	0, 0, 231, 232, 233, 0, 98, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 82, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	244, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 182, 190, 0, 191, 262,
	263, 192, 0, 198, 193, 194, 195, 197, 264, 196,
	265, 0, 199, 81, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 0, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 539,
	754, 0, 0, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	85, 0, 0, 222, 0, 0, 0, 0, 92, 93,
	94, 223, 224, 225, 226, 95, 227, 228, 0, 96,
	229, 230, 97, 0, 0, 231, 232, 233, 0, 98,
	234, 0, 306, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 307, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 276, 110, 235, 111, 236,
	237, 0, 112, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 238, 117, 118, 239, 240,
	0, 0, 0, 119, 120, 241, 0, 121, 0, 122,
	0, 0, 308, 0, 123, 242, 0, 243, 0, 124,
	125, 126, 127, 244, 245, 310, 0, 131, 0, 128,
	0, 309, 129, 246, 130, 247, 248, 249, 0, 250,
	0, 311, 132, 312, 133, 134, 0, 136, 135, 0,
	251, 313, 137, 314, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 315, 145, 146, 148,
	147, 0, 0, 0, 253, 149, 254, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 316, 155,
	317, 256, 156, 157, 158, 159, 0, 257, 160, 258,
	161, 0, 162, 163, 164, 259, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 318, 179, 180, 260, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 0, 189, 182, 190,
	319, 191, 262, 263, 192, 0, 198, 193, 194, 195,
	197, 264, 196, 265, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 267, 268, 0, 0, 205, 269,
	270, 0, 206, 207, 208, 209, 86, 0, 210, 211,
	212, 0, 213, 0, 214, 215, 216, 271, 272, 0,
	0, 217, 89, 90, 0, 91, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 92, 93, 94, 223, 224,
	225, 226, 95, 227, 228, 0, 96, 229, 230, 97,
	0, 0, 231, 232, 233, 0, 98, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	244, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 182, 190, 0, 191, 262,
	263, 192, 0, 198, 193, 194, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 0, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 539, 217, 0,
	0, 0, 0, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	85, 222, 0, 0, 0, 0, 92, 93, 94, 223,
	224, 225, 226, 95, 227, 228, 0, 96, 229, 230,
	97, 0, 0, 231, 232, 233, 0, 98, 234, 0,
	306, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 307, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 276, 110, 235, 111, 236, 237, 0,
	112, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 238, 117, 118, 239, 240, 0, 0,
	0, 119, 120, 241, 0, 121, 0, 122, 0, 0,
	308, 0, 123, 242, 0, 243, 0, 124, 125, 126,
	127, 244, 245, 310, 0, 131, 0, 128, 0, 309,
	129, 246, 130, 247, 248, 249, 0, 250, 0, 311,
	132, 312, 133, 134, 0, 136, 135, 0, 251, 313,
	137, 314, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 315, 145, 146, 148, 147, 0,
	0, 0, 253, 149, 254, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 316, 155, 317, 256,
	156, 157, 158, 159, 0, 257, 160, 258, 161, 0,
	162, 163, 164, 259, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	318, 179, 180, 260, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 0, 189, 182, 190, 319, 191,
	262, 263, 192, 0, 198, 193, 194, 195, 197, 264,
	196, 265, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 267, 268, 0, 0, 205, 269, 270, 0,
	206, 207, 208, 209, 86, 0, 210, 211, 212, 0,
	213, 0, 214, 215, 216, 271, 272, 0, 0, 217,
	89, 90, 0, 91, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 92, 93, 94, 223, 224, 225, 226,
	95, 227, 228, 0, 96, 229, 230, 97, 0, 0,
	231, 232, 233, 1046, 98, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 1044, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 1152, 0, 119, 120,
	241, 0, 121, 0, 122, 1049, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 244, 245,
	0, 0, 131, 1150, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 1048, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 182, 190, 0, 191, 262, 263, 192,
	0, 198, 193, 194, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 86, 1151, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 89, 90, 0,
	91, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 0, 0, 231, 232, 233,
	1046, 98, 234, 0, 0, 1041, 99, 100, 101, 0,
	102, 1044, 103, 104, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 276, 110, 235,
	111, 236, 237, 0, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	239, 240, 0, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 1049, 0, 0, 0, 123, 242, 0, 243,
	0, 124, 125, 126, 127, 1040, 245, 0, 0, 131,
	0, 128, 0, 0, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 0, 132, 0, 133, 134, 0, 136,
	135, 0, 251, 0, 137, 0, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 0, 145,
	146, 148, 147, 0, 0, 0, 253, 149, 254, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	0, 155, 0, 256, 156, 157, 158, 159, 0, 257,
	160, 258, 161, 1048, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 0, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 0, 189,
	182, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 265, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 269, 270, 0, 206, 207, 208, 209, 86, 1047,
	210, 211, 212, 0, 213, 0, 214, 215, 216, 271,
	272, 0, 0, 217, 89, 90, 0, 91, 218, 219,
	220, 221, 222, 0, 1653, 0, 0, 92, 93, 94,
	223, 224, 225, 226, 95, 227, 228, 0, 96, 229,
	230, 97, 0, 0, 231, 232, 233, 0, 98, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 244, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 182, 190, 0,
	191, 262, 263, 192, 0, 198, 193, 194, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 86, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 89, 90, 0, 91, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 92, 93, 94, 223, 224, 225,
	226, 95, 227, 228, 0, 96, 229, 230, 97, 0,
	0, 231, 232, 233, 0, 98, 234, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	0, 106, 107, 0, 0, 0, 0, 0, 0, 108,
	109, 276, 110, 235, 111, 236, 237, 0, 112, 0,
	113, 0, 0, 0, 114, 115, 0, 116, 0, 0,
	0, 238, 117, 118, 239, 240, 0, 0, 0, 119,
	120, 241, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 242, 0, 243, 0, 124, 125, 126, 127, 244,
	245, 0, 0, 131, 0, 128, 0, 0, 129, 246,
	130, 247, 248, 249, 0, 250, 0, 0, 132, 0,
	133, 134, 0, 136, 135, 0, 251, 0, 137, 0,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 0, 145, 146, 148, 147, 0, 0, 0,
	253, 149, 254, 150, 151, 0, 152, 0, 493, 153,
	0, 0, 154, 255, 0, 155, 0, 256, 156, 157,
	158, 159, 0, 257, 160, 258, 161, 0, 162, 163,
	164, 259, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 0, 179,
	180, 260, 181, 0, 183, 184, 185, 186, 0, 261,
	187, 188, 0, 189, 182, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 195, 197, 264, 196, 265,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	267, 268, 0, 0, 205, 269, 270, 0, 206, 207,
	208, 209, 86, 0, 210, 211, 212, 0, 213, 0,
	214, 215, 216, 271, 272, 0, 0, 217, 89, 90,
	0, 91, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 92, 93, 94, 223, 224, 225, 226, 95, 227,
	228, 0, 96, 229, 230, 97, 0, 0, 231, 232,
	233, 0, 98, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 787, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 493, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 182, 190, 0, 191, 262, 263, 192, 0, 198,
	193, 194, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 86,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 89, 90, 551, 91, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 92, 93,
	94, 223, 224, 225, 226, 95, 227, 228, 0, 96,
	229, 230, 97, 0, 0, 231, 232, 233, 0, 98,
	234, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 0, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 276, 110, 235, 111, 236,
	237, 0, 112, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 238, 117, 118, 239, 240,
	0, 0, 0, 119, 120, 241, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 242, 0, 243, 0, 124,
	125, 126, 127, 244, 245, 0, 0, 131, 0, 128,
	0, 0, 129, 246, 130, 247, 248, 249, 0, 250,
	0, 0, 132, 0, 133, 134, 0, 136, 135, 0,
	251, 0, 137, 0, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 0, 145, 146, 148,
	147, 0, 0, 0, 253, 149, 254, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 0, 155,
	0, 256, 156, 157, 158, 159, 0, 257, 160, 258,
	161, 0, 162, 163, 164, 259, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 0, 179, 180, 260, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 0, 189, 182, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 195,
	197, 264, 196, 265, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 267, 268, 0, 0, 205, 269,
	270, 0, 206, 207, 208, 209, 86, 0, 210, 211,
	212, 0, 213, 0, 214, 215, 216, 271, 272, 0,
	0, 217, 89, 90, 0, 91, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 92, 93, 94, 223, 224,
	225, 226, 95, 227, 228, 0, 96, 229, 230, 97,
	0, 0, 231, 232, 233, 0, 98, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	505, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 493,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 182, 190, 0, 191, 262,
	263, 192, 0, 198, 193, 194, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 86, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 89,
	90, 0, 91, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 92, 93, 94, 223, 224, 225, 226, 95,
	227, 228, 0, 96, 229, 230, 97, 0, 0, 231,
	232, 233, 0, 98, 234, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 104, 105, 0, 0, 106,
	107, 0, 0, 0, 0, 0, 0, 108, 109, 276,
	110, 235, 111, 236, 237, 0, 112, 0, 113, 0,
	0, 0, 114, 115, 0, 116, 0, 0, 0, 238,
	117, 118, 239, 240, 0, 0, 0, 119, 120, 241,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 242,
	0, 243, 0, 124, 125, 126, 127, 498, 245, 0,
	0, 131, 0, 128, 0, 0, 129, 246, 130, 247,
	248, 249, 0, 250, 0, 0, 132, 0, 133, 134,
	0, 136, 135, 0, 251, 0, 137, 0, 0, 138,
	0, 0, 139, 0, 140, 141, 142, 144, 252, 143,
	0, 145, 146, 148, 147, 0, 0, 0, 253, 149,
	254, 150, 151, 0, 152, 0, 493, 153, 0, 0,
	154, 255, 0, 155, 0, 256, 156, 157, 158, 159,
	0, 257, 160, 258, 161, 0, 162, 163, 164, 259,
	165, 166, 0, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 0, 178, 0, 179, 180, 260,
	181, 0, 183, 184, 185, 186, 0, 261, 187, 188,
	0, 189, 182, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 195, 197, 264, 196, 265, 0, 199,
	0, 200, 201, 202, 203, 204, 0, 266, 267, 268,
	0, 0, 205, 269, 270, 0, 206, 207, 208, 209,
	86, 0, 210, 211, 212, 0, 213, 0, 214, 215,
	216, 271, 272, 0, 0, 217, 89, 90, 405, 91,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 92,
	93, 94, 223, 224, 225, 226, 95, 227, 228, 0,
	96, 229, 230, 97, 0, 0, 231, 232, 233, 0,
	98, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 244, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 143, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 404, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 182,
	190, 0, 191, 262, 263, 192, 0, 198, 193, 194,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 266, 267, 268, 0, 0, 205,
	269, 270, 0, 206, 207, 208, 209, 86, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 89, 90, 0, 91, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 92, 93, 94, 223,
	224, 225, 226, 95, 227, 228, 0, 96, 229, 230,
	97, 0, 0, 231, 232, 233, 0, 98, 234, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 0, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 276, 110, 235, 111, 236, 237, 0,
	112, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 238, 117, 118, 239, 240, 0, 0,
	0, 119, 120, 241, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 242, 0, 243, 0, 124, 125, 126,
	127, 244, 245, 0, 0, 131, 0, 128, 0, 0,
	129, 246, 130, 247, 248, 249, 0, 250, 0, 0,
	132, 0, 133, 134, 0, 136, 135, 0, 251, 0,
	137, 0, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 143, 0, 145, 146, 148, 147, 0,
	0, 0, 253, 149, 254, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 0, 155, 0, 256,
	156, 157, 158, 159, 0, 257, 160, 258, 161, 0,
	162, 163, 164, 259, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	0, 179, 180, 260, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 0, 189, 182, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 195, 197, 264,
	196, 265, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 266, 267, 268, 0, 0, 205, 269, 270, 0,
	206, 207, 208, 209, 86, 0, 210, 211, 212, 0,
	213, 0, 214, 215, 216, 271, 272, 0, 0, 217,
	89, 90, 0, 91, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 92, 93, 94, 223, 224, 225, 226,
	95, 227, 228, 0, 96, 229, 230, 97, 0, 0,
	231, 232, 233, 0, 98, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 1345, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 182, 190, 0, 191, 262, 263, 192,
	0, 198, 193, 194, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 86, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 89, 90, 0,
	91, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 0, 0, 231, 232, 233,
	0, 98, 234, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 276, 110, 235,
	111, 236, 237, 0, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	239, 240, 0, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 242, 0, 243,
	0, 124, 125, 126, 127, 1343, 245, 0, 0, 131,
	0, 128, 0, 0, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 0, 132, 0, 133, 134, 0, 136,
	135, 0, 251, 0, 137, 0, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 0, 145,
	146, 148, 147, 0, 0, 0, 253, 149, 254, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	0, 155, 0, 256, 156, 157, 158, 159, 0, 257,
	160, 258, 161, 0, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 0, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 0, 189,
	182, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 265, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 269, 270, 0, 206, 207, 208, 209, 86, 0,
	210, 211, 212, 0, 213, 0, 214, 215, 216, 271,
	272, 0, 0, 217, 89, 90, 0, 91, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 92, 93, 94,
	223, 224, 225, 226, 95, 227, 228, 0, 96, 229,
	230, 97, 0, 0, 231, 232, 233, 0, 98, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 1332, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 182, 190, 0,
	191, 262, 263, 192, 0, 198, 193, 194, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 86, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 89, 90, 0, 91, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 92, 93, 94, 223, 224, 225,
	226, 95, 227, 228, 0, 96, 229, 230, 97, 0,
	0, 231, 232, 233, 0, 98, 234, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	0, 106, 107, 0, 0, 0, 0, 0, 0, 108,
	109, 276, 110, 235, 111, 236, 237, 0, 112, 0,
	113, 0, 0, 0, 114, 115, 0, 116, 0, 0,
	0, 238, 117, 118, 239, 240, 0, 0, 0, 119,
	120, 241, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 242, 0, 243, 0, 124, 125, 126, 127, 907,
	245, 0, 0, 131, 0, 128, 0, 0, 129, 246,
	130, 247, 248, 249, 0, 250, 0, 0, 132, 0,
	133, 134, 0, 136, 135, 0, 251, 0, 137, 0,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 0, 145, 146, 148, 147, 0, 0, 0,
	253, 149, 254, 150, 151, 0, 152, 0, 0, 153,
	0, 0, 154, 255, 0, 155, 0, 256, 156, 157,
	158, 159, 0, 257, 160, 258, 161, 0, 162, 163,
	164, 259, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 0, 179,
	180, 260, 181, 0, 183, 184, 185, 186, 0, 261,
	187, 188, 0, 189, 182, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 195, 197, 264, 196, 265,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	267, 268, 0, 0, 205, 269, 270, 0, 206, 207,
	208, 209, 86, 0, 210, 211, 212, 0, 213, 0,
	214, 215, 216, 271, 272, 0, 0, 217, 89, 90,
	0, 91, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 92, 93, 94, 223, 224, 225, 226, 95, 227,
	228, 0, 96, 229, 230, 97, 0, 0, 231, 232,
	233, 0, 98, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 244, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 419, 185, 186, 0, 261, 187, 188, 0,
	189, 182, 190, 0, 191, 262, 263, 192, 0, 198,
	193, 194, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 86,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 89, 90, 0, 91, 218,
	219, 220, 221, 222, 0, 772, 0, 0, 92, 93,
	94, 223, 224, 225, 226, 95, 227, 228, 0, 96,
	229, 230, 97, 0, 0, 231, 232, 233, 0, 98,
	234, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 0, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 276, 110, 235, 111, 236,
	237, 0, 112, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 238, 117, 118, 239, 240,
	0, 0, 0, 119, 120, 241, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 242, 0, 243, 0, 124,
	125, 126, 127, 244, 245, 0, 0, 131, 0, 128,
	0, 0, 129, 246, 130, 247, 248, 249, 0, 250,
	0, 0, 132, 0, 133, 134, 0, 136, 135, 0,
	251, 0, 137, 0, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 0, 145, 146, 148,
	147, 0, 0, 0, 253, 149, 254, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 0, 155,
	0, 256, 156, 157, 158, 159, 0, 257, 160, 258,
	161, 0, 162, 163, 164, 259, 165, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 0, 179, 180, 260, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 0, 0, 182, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 195,
	197, 264, 196, 265, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 267, 268, 0, 0, 205, 269,
	270, 0, 206, 207, 208, 209, 86, 0, 210, 211,
	212, 0, 213, 0, 214, 215, 216, 271, 272, 0,
	0, 217, 89, 90, 0, 91, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 92, 93, 94, 223, 224,
	225, 226, 95, 227, 228, 0, 96, 229, 230, 97,
	0, 0, 231, 232, 233, 0, 98, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	605, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 138, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 143, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 260, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 188, 0, 189, 182, 190, 0, 191, 262,
	263, 192, 0, 198, 193, 194, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	266, 267, 268, 0, 0, 205, 269, 270, 0, 206,
	207, 208, 209, 86, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 89,
	90, 0, 91, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 92, 93, 94, 223, 224, 225, 226, 95,
	227, 228, 0, 96, 229, 230, 97, 0, 0, 231,
	232, 233, 0, 98, 234, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 104, 105, 0, 0, 106,
	107, 0, 0, 0, 0, 0, 0, 108, 109, 276,
	110, 235, 111, 236, 237, 0, 112, 0, 113, 0,
	0, 0, 114, 115, 0, 116, 0, 0, 0, 238,
	117, 118, 239, 240, 0, 0, 0, 119, 120, 241,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 242,
	0, 243, 0, 124, 125, 126, 127, 600, 245, 0,
	0, 131, 0, 128, 0, 0, 129, 246, 130, 247,
	248, 249, 0, 250, 0, 0, 132, 0, 133, 134,
	0, 136, 135, 0, 251, 0, 137, 0, 0, 138,
	0, 0, 139, 0, 140, 141, 142, 144, 252, 143,
	0, 145, 146, 148, 147, 0, 0, 0, 253, 149,
	254, 150, 151, 0, 152, 0, 0, 153, 0, 0,
	154, 255, 0, 155, 0, 256, 156, 157, 158, 159,
	0, 257, 160, 258, 161, 0, 162, 163, 164, 259,
	165, 166, 0, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 0, 178, 0, 179, 180, 260,
	181, 0, 183, 184, 185, 186, 0, 261, 187, 188,
	0, 189, 182, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 195, 197, 264, 196, 265, 0, 199,
	0, 200, 201, 202, 203, 204, 0, 266, 267, 268,
	0, 0, 205, 269, 270, 0, 206, 207, 208, 209,
	86, 0, 210, 211, 212, 0, 213, 0, 214, 215,
	216, 271, 272, 0, 0, 217, 89, 90, 0, 91,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 92,
	93, 94, 223, 224, 225, 226, 95, 227, 228, 0,
	96, 229, 230, 97, 0, 0, 231, 232, 557, 0,
	98, 234, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 104, 105, 0, 0, 106, 107, 0, 0,
	0, 0, 0, 0, 108, 109, 276, 110, 235, 111,
	236, 237, 0, 112, 0, 113, 0, 0, 0, 114,
	115, 0, 116, 0, 0, 0, 238, 117, 118, 239,
	240, 0, 0, 0, 119, 120, 241, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 242, 0, 243, 0,
	124, 125, 126, 127, 244, 245, 0, 0, 131, 0,
	128, 0, 0, 129, 246, 130, 247, 248, 249, 0,
	250, 0, 0, 132, 0, 133, 134, 0, 136, 135,
	0, 251, 0, 137, 0, 0, 138, 0, 0, 139,
	0, 140, 141, 142, 144, 252, 431, 0, 145, 146,
	148, 147, 0, 0, 0, 253, 149, 254, 150, 151,
	0, 152, 0, 0, 153, 0, 0, 154, 255, 0,
	155, 0, 256, 156, 157, 158, 159, 0, 257, 160,
	258, 161, 0, 162, 163, 164, 259, 165, 166, 0,
	167, 168, 169, 170, 171, 173, 174, 172, 175, 176,
	177, 0, 178, 0, 179, 180, 260, 181, 0, 183,
	184, 185, 186, 0, 261, 187, 188, 0, 189, 182,
	190, 0, 191, 262, 263, 192, 0, 198, 193, 194,
	195, 197, 264, 196, 265, 0, 199, 0, 200, 201,
	202, 203, 204, 0, 430, 267, 268, 0, 0, 426,
	269, 270, 0, 206, 207, 208, 209, 86, 0, 210,
	211, 212, 0, 213, 0, 214, 215, 216, 271, 272,
	0, 0, 217, 89, 90, 0, 91, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 92, 93, 94, 223,
	224, 225, 226, 95, 227, 228, 0, 96, 229, 230,
	97, 0, 0, 231, 232, 233, 0, 98, 234, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 104,
	105, 0, 0, 106, 107, 0, 0, 0, 0, 0,
	0, 108, 109, 276, 110, 235, 111, 236, 237, 0,
	112, 0, 113, 0, 0, 0, 114, 115, 0, 116,
	0, 0, 0, 238, 117, 118, 239, 240, 0, 0,
	0, 119, 120, 241, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 242, 0, 243, 0, 124, 125, 126,
	127, 244, 245, 0, 0, 131, 0, 128, 0, 0,
	129, 246, 130, 247, 248, 249, 0, 250, 0, 0,
	132, 0, 133, 134, 0, 136, 135, 0, 251, 0,
	137, 0, 0, 138, 0, 0, 139, 0, 140, 141,
	142, 144, 252, 431, 0, 145, 146, 148, 147, 0,
	0, 0, 253, 149, 254, 150, 151, 0, 152, 0,
	0, 153, 0, 0, 154, 255, 0, 155, 0, 256,
	156, 157, 158, 159, 0, 257, 160, 258, 161, 0,
	162, 163, 164, 259, 165, 166, 0, 167, 168, 169,
	170, 171, 173, 174, 172, 175, 176, 177, 0, 178,
	0, 179, 180, 260, 181, 0, 183, 184, 185, 186,
	0, 261, 187, 188, 0, 189, 182, 190, 0, 191,
	262, 263, 192, 0, 198, 193, 194, 195, 197, 264,
	196, 265, 0, 199, 0, 200, 201, 202, 203, 204,
	0, 430, 267, 268, 0, 0, 426, 269, 270, 0,
	206, 207, 208, 209, 86, 0, 210, 211, 212, 0,
	213, 0, 214, 215, 216, 271, 272, 0, 0, 217,
	89, 90, 0, 91, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 92, 93, 94, 223, 224, 225, 226,
	95, 227, 228, 0, 96, 229, 230, 97, 0, 0,
	231, 232, 233, 0, 98, 234, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 104, 105, 0, 0,
	106, 107, 0, 0, 0, 0, 0, 0, 108, 109,
	276, 110, 235, 111, 236, 237, 0, 112, 0, 113,
	0, 0, 0, 114, 115, 0, 116, 0, 0, 0,
	238, 117, 118, 239, 240, 0, 0, 0, 119, 120,
	241, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	242, 0, 243, 0, 124, 125, 126, 127, 535, 245,
	0, 0, 131, 0, 128, 0, 0, 129, 246, 130,
	247, 248, 249, 0, 250, 0, 0, 132, 0, 133,
	134, 0, 136, 135, 0, 251, 0, 137, 0, 0,
	138, 0, 0, 139, 0, 140, 141, 142, 144, 252,
	143, 0, 145, 146, 148, 147, 0, 0, 0, 253,
	149, 254, 150, 151, 0, 152, 0, 0, 153, 0,
	0, 154, 255, 0, 155, 0, 256, 156, 157, 158,
	159, 0, 257, 160, 258, 161, 0, 162, 163, 164,
	259, 165, 166, 0, 167, 168, 169, 170, 171, 173,
	174, 172, 175, 176, 177, 0, 178, 0, 179, 180,
	260, 181, 0, 183, 184, 185, 186, 0, 261, 187,
	188, 0, 189, 182, 190, 0, 191, 262, 263, 192,
	0, 198, 193, 194, 195, 197, 264, 196, 265, 0,
	199, 0, 200, 201, 202, 203, 204, 0, 266, 267,
	268, 0, 0, 205, 269, 270, 0, 206, 207, 208,
	209, 86, 0, 210, 211, 212, 0, 213, 0, 214,
	215, 216, 271, 272, 0, 0, 217, 89, 90, 0,
	91, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	92, 93, 94, 223, 224, 225, 226, 95, 227, 228,
	0, 96, 229, 230, 97, 0, 0, 231, 232, 233,
	0, 98, 234, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 104, 105, 0, 0, 106, 107, 0,
	0, 0, 0, 0, 0, 108, 109, 276, 110, 235,
	111, 236, 237, 0, 112, 0, 113, 0, 0, 0,
	114, 115, 0, 116, 0, 0, 0, 238, 117, 118,
	239, 240, 0, 0, 0, 119, 120, 241, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 242, 0, 243,
	0, 124, 125, 126, 127, 532, 245, 0, 0, 131,
	0, 128, 0, 0, 129, 246, 130, 247, 248, 249,
	0, 250, 0, 0, 132, 0, 133, 134, 0, 136,
	135, 0, 251, 0, 137, 0, 0, 138, 0, 0,
	139, 0, 140, 141, 142, 144, 252, 143, 0, 145,
	146, 148, 147, 0, 0, 0, 253, 149, 254, 150,
	151, 0, 152, 0, 0, 153, 0, 0, 154, 255,
	0, 155, 0, 256, 156, 157, 158, 159, 0, 257,
	160, 258, 161, 0, 162, 163, 164, 259, 165, 166,
	0, 167, 168, 169, 170, 171, 173, 174, 172, 175,
	176, 177, 0, 178, 0, 179, 180, 260, 181, 0,
	183, 184, 185, 186, 0, 261, 187, 188, 0, 189,
	182, 190, 0, 191, 262, 263, 192, 0, 198, 193,
	194, 195, 197, 264, 196, 265, 0, 199, 0, 200,
	201, 202, 203, 204, 0, 266, 267, 268, 0, 0,
	205, 269, 270, 0, 206, 207, 208, 209, 86, 0,
	210, 211, 212, 0, 213, 0, 214, 215, 216, 271,
	272, 0, 0, 217, 89, 90, 0, 91, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 92, 93, 94,
	223, 224, 225, 226, 95, 227, 228, 0, 96, 229,
	230, 97, 0, 0, 231, 232, 233, 0, 98, 234,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	104, 105, 0, 0, 106, 107, 0, 0, 0, 0,
	0, 0, 108, 109, 276, 110, 235, 111, 236, 237,
	0, 112, 0, 113, 0, 0, 0, 114, 115, 0,
	116, 0, 0, 0, 238, 117, 118, 239, 240, 0,
	0, 0, 119, 120, 241, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 242, 0, 243, 0, 124, 125,
	126, 127, 529, 245, 0, 0, 131, 0, 128, 0,
	0, 129, 246, 130, 247, 248, 249, 0, 250, 0,
	0, 132, 0, 133, 134, 0, 136, 135, 0, 251,
	0, 137, 0, 0, 138, 0, 0, 139, 0, 140,
	141, 142, 144, 252, 143, 0, 145, 146, 148, 147,
	0, 0, 0, 253, 149, 254, 150, 151, 0, 152,
	0, 0, 153, 0, 0, 154, 255, 0, 155, 0,
	256, 156, 157, 158, 159, 0, 257, 160, 258, 161,
	0, 162, 163, 164, 259, 165, 166, 0, 167, 168,
	169, 170, 171, 173, 174, 172, 175, 176, 177, 0,
	178, 0, 179, 180, 260, 181, 0, 183, 184, 185,
	186, 0, 261, 187, 188, 0, 189, 182, 190, 0,
	191, 262, 263, 192, 0, 198, 193, 194, 195, 197,
	264, 196, 265, 0, 199, 0, 200, 201, 202, 203,
	204, 0, 266, 267, 268, 0, 0, 205, 269, 270,
	0, 206, 207, 208, 209, 86, 0, 210, 211, 212,
	0, 213, 0, 214, 215, 216, 271, 272, 0, 0,
	217, 89, 90, 0, 91, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 92, 93, 94, 223, 224, 225,
	226, 95, 227, 228, 0, 96, 229, 230, 97, 0,
	0, 231, 232, 233, 0, 98, 234, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 104, 105, 0,
	0, 106, 107, 0, 0, 0, 0, 0, 0, 108,
	109, 276, 110, 235, 111, 236, 237, 0, 112, 0,
	113, 0, 0, 0, 114, 115, 0, 116, 0, 0,
	0, 238, 117, 118, 239, 240, 0, 0, 0, 119,
	120, 241, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 242, 0, 243, 0, 124, 125, 126, 127, 527,
	245, 0, 0, 131, 0, 128, 0, 0, 129, 246,
	130, 247, 248, 249, 0, 250, 0, 0, 132, 0,
	133, 134, 0, 136, 135, 0, 251, 0, 137, 0,
	0, 138, 0, 0, 139, 0, 140, 141, 142, 144,
	252, 143, 0, 145, 146, 148, 147, 0, 0, 0,
	253, 149, 254, 150, 151, 0, 152, 0, 0, 153,
	0, 0, 154, 255, 0, 155, 0, 256, 156, 157,
	158, 159, 0, 257, 160, 258, 161, 0, 162, 163,
	164, 259, 165, 166, 0, 167, 168, 169, 170, 171,
	173, 174, 172, 175, 176, 177, 0, 178, 0, 179,
	180, 260, 181, 0, 183, 184, 185, 186, 0, 261,
	187, 188, 0, 189, 182, 190, 0, 191, 262, 263,
	192, 0, 198, 193, 194, 195, 197, 264, 196, 265,
	0, 199, 0, 200, 201, 202, 203, 204, 0, 266,
	267, 268, 0, 0, 205, 269, 270, 0, 206, 207,
	208, 209, 86, 0, 210, 211, 212, 0, 213, 0,
	214, 215, 216, 271, 272, 0, 0, 217, 89, 90,
	0, 91, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 92, 93, 94, 223, 224, 225, 226, 95, 227,
	228, 0, 96, 229, 230, 97, 0, 0, 231, 232,
	233, 0, 98, 234, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 104, 105, 0, 0, 106, 107,
	0, 0, 0, 0, 0, 0, 108, 109, 276, 110,
	235, 111, 236, 237, 0, 112, 0, 113, 0, 0,
	0, 114, 115, 0, 116, 0, 0, 0, 238, 117,
	118, 239, 240, 0, 0, 0, 119, 120, 241, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 242, 0,
	243, 0, 124, 125, 126, 127, 501, 245, 0, 0,
	131, 0, 128, 0, 0, 129, 246, 130, 247, 248,
	249, 0, 250, 0, 0, 132, 0, 133, 134, 0,
	136, 135, 0, 251, 0, 137, 0, 0, 138, 0,
	0, 139, 0, 140, 141, 142, 144, 252, 143, 0,
	145, 146, 148, 147, 0, 0, 0, 253, 149, 254,
	150, 151, 0, 152, 0, 0, 153, 0, 0, 154,
	255, 0, 155, 0, 256, 156, 157, 158, 159, 0,
	257, 160, 258, 161, 0, 162, 163, 164, 259, 165,
	166, 0, 167, 168, 169, 170, 171, 173, 174, 172,
	175, 176, 177, 0, 178, 0, 179, 180, 260, 181,
	0, 183, 184, 185, 186, 0, 261, 187, 188, 0,
	189, 182, 190, 0, 191, 262, 263, 192, 0, 198,
	193, 194, 195, 197, 264, 196, 265, 0, 199, 0,
	200, 201, 202, 203, 204, 0, 266, 267, 268, 0,
	0, 205, 269, 270, 0, 206, 207, 208, 209, 86,
	0, 210, 211, 212, 0, 213, 0, 214, 215, 216,
	271, 272, 0, 0, 217, 89, 90, 0, 91, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 92, 93,
	94, 223, 224, 225, 226, 95, 227, 228, 0, 96,
	229, 230, 97, 0, 0, 231, 232, 233, 0, 98,
	234, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 104, 105, 0, 0, 106, 107, 0, 0, 0,
	0, 0, 0, 108, 109, 276, 110, 235, 111, 236,
	237, 0, 112, 0, 113, 0, 0, 0, 114, 115,
	0, 116, 0, 0, 0, 238, 117, 118, 239, 240,
	0, 0, 0, 119, 120, 241, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 242, 0, 243, 0, 124,
	125, 126, 127, 244, 245, 0, 0, 131, 0, 128,
	0, 0, 129, 246, 130, 247, 248, 249, 0, 250,
	0, 0, 132, 0, 133, 134, 0, 136, 135, 0,
	251, 0, 137, 0, 0, 138, 0, 0, 139, 0,
	140, 141, 142, 144, 252, 143, 0, 145, 146, 148,
	147, 0, 0, 0, 253, 149, 254, 150, 151, 0,
	152, 0, 0, 153, 0, 0, 154, 255, 0, 155,
	0, 256, 156, 157, 158, 159, 0, 257, 160, 258,
	161, 0, 162, 163, 164, 259, 482, 166, 0, 167,
	168, 169, 170, 171, 173, 174, 172, 175, 176, 177,
	0, 178, 0, 179, 180, 260, 181, 0, 183, 184,
	185, 186, 0, 261, 187, 188, 0, 189, 182, 190,
	0, 191, 262, 263, 192, 0, 198, 193, 194, 195,
	197, 264, 196, 265, 0, 199, 0, 200, 201, 202,
	203, 204, 0, 266, 267, 268, 0, 0, 205, 269,
	270, 0, 206, 207, 208, 209, 86, 0, 210, 211,
	212, 0, 213, 0, 214, 215, 216, 271, 272, 0,
	0, 217, 89, 90, 0, 91, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 92, 93, 94, 223, 224,
	225, 226, 95, 227, 228, 0, 96, 229, 230, 97,
	0, 0, 231, 232, 233, 0, 424, 234, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 104, 105,
	0, 0, 106, 107, 0, 0, 0, 0, 0, 0,
	108, 109, 276, 110, 235, 111, 236, 237, 0, 112,
	0, 113, 0, 0, 0, 114, 115, 0, 116, 0,
	0, 0, 238, 117, 118, 239, 240, 0, 0, 0,
	119, 120, 241, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 242, 0, 243, 0, 124, 125, 126, 127,
	244, 245, 0, 0, 131, 0, 128, 0, 0, 129,
	246, 130, 247, 248, 249, 0, 250, 0, 0, 132,
	0, 133, 134, 0, 136, 135, 0, 251, 0, 137,
	0, 0, 422, 0, 0, 139, 0, 140, 141, 142,
	144, 252, 431, 0, 145, 146, 148, 147, 0, 0,
	0, 253, 149, 254, 150, 151, 0, 152, 0, 0,
	153, 0, 0, 154, 255, 0, 155, 0, 256, 156,
	157, 158, 159, 0, 257, 160, 258, 161, 0, 162,
	163, 164, 259, 165, 166, 0, 167, 168, 169, 170,
	171, 173, 174, 172, 175, 176, 177, 0, 178, 0,
	179, 180, 425, 181, 0, 183, 184, 185, 186, 0,
	261, 187, 423, 0, 189, 182, 190, 0, 191, 262,
	263, 192, 0, 198, 193, 194, 195, 197, 264, 196,
	265, 0, 199, 0, 200, 201, 202, 203, 204, 0,
	430, 267, 268, 0, 0, 426, 269, 270, 0, 206,
	207, 208, 209, 86, 0, 210, 211, 212, 0, 213,
	0, 214, 215, 216, 271, 272, 0, 0, 217, 89,
	90, 0, 91, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 92, 93, 94, 223, 224, 225, 226, 95,
	227, 228, 0, 96, 229, 230, 97, 0, 0, 231,
	232, 233, 0, 98, 234, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 104, 105, 0, 0, 106,
	107, 0, 0, 0, 0, 0, 0, 108, 109, 276,
	110, 235, 111, 236, 237, 0, 112, 0, 113, 0,
	0, 0, 114, 115, 0, 116, 0, 0, 0, 238,
	117, 118, 239, 240, 0, 0, 0, 119, 120, 241,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 242,
	0, 243, 0, 124, 125, 126, 127, 244, 245, 0,
	0, 131, 0, 128, 0, 0, 129, 246, 130, 247,
	248, 249, 0, 250, 0, 0, 132, 0, 133, 134,
	0, 136, 135, 0, 251, 0, 137, 0, 0, 138,
	0, 0, 139, 0, 140, 141, 142, 144, 252, 143,
	0, 145, 146, 148, 147, 0, 0, 0, 253, 149,
	254, 150, 151, 0, 152, 0, 0, 153, 0, 0,
	154, 255, 0, 155, 0, 256, 156, 157, 0, 159,
	0, 257, 160, 258, 161, 0, 162, 0, 164, 259,
	165, 166, 0, 167, 168, 169, 170, 171, 173, 174,
	172, 175, 176, 177, 0, 178, 0, 179, 180, 260,
	0, 0, 183, 184, 185, 186, 0, 261, 187, 188,
	0, 189, 182, 190, 0, 191, 262, 263, 192, 0,
	198, 193, 194, 195, 197, 264, 196, 265, 0, 199,
	0, 200, 201, 202, 203, 204, 0, 266, 267, 268,
	0, 0, 205, 269, 270, 0, 206, 207, 208, 209,
	0, 0, 210, 211, 212, 0, 213, 0, 214, 215,
	216, 271, 272, 0, 0, 217, 0, 0, 0, 0,
	218, 219, 220, 221, 931, 932, 0, 951, 952, 953,
	961, 962, 963, 0, 0, 0, 0, 0, 0, 0,
	954, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	965, 0, 0, 0, 0, 0, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 0, 0, 0, 0, 0,
	933, 0, 954, 0, 0, 0, 948, 0, 0, 934,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 931, 932, 0, 951, 952, 953, 961,
	962, 963, 0, 0, 0, 939, 0, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 965,
	0, 0, 0, 0, 958, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 933,
	964, 0, 0, 931, 932, 948, 951, 952, 953, 961,
	962, 963, 956, 0, 0, 0, 958, 966, 949, 954,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 965,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 955, 956, 0, 0, 0, 0, 933,
	949, 0, 0, 0, 939, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 966, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 956, 0, 0, 939, 0, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 958, 966, 0, 0, 0, 0, 0,
	0, 959, 955, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 949, 0, 957,
	0, 0, 945, 946, 947, 0, 944, 941, 942, 943,
	935, 936, 937, 938, 940, 950, 960, 0, 0, 0,
	0, 0, 955, 1492, 0, 0, 0, 0, 959, 0,
	0, 957, 0, 0, 945, 946, 947, 0, 944, 941,
	942, 943, 935, 936, 937, 938, 940, 0, 960, 0,
	0, 0, 2007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 945, 946, 947, 0, 944, 941, 942, 943, 935,
	936, 937, 938, 940, 0, 960, 0, 0, 0, 2005,
	931, 932, 0, 951, 952, 953, 961, 962, 963, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 965, 0, 957, 0,
	0, 945, 946, 947, 0, 944, 941, 942, 943, 935,
	936, 937, 938, 940, 0, 960, 933, 0, 0, 1952,
	931, 932, 948, 951, 952, 953, 961, 962, 963, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 0, 0, 0,
	0, 939, 948, 0, 0, 0, 0, 931, 932, 0,
	951, 952, 953, 961, 962, 963, 0, 0, 0, 0,
	958, 966, 0, 954, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 965, 0, 0, 964, 0, 0, 931,
	932, 0, 951, 952, 953, 961, 962, 963, 956, 0,
	0, 939, 0, 933, 949, 954, 0, 0, 0, 948,
	0, 0, 934, 0, 0, 965, 0, 0, 0, 0,
	958, 966, 0, 0, 0, 0, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 933, 964, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 949, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 958, 966, 955,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	939, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 958,
	966, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 955, 956, 0, 0,
	0, 0, 0, 949, 0, 957, 0, 0, 945, 946,
	947, 0, 944, 941, 942, 943, 935, 936, 937, 938,
	940, 0, 960, 0, 0, 0, 1947, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 957, 0, 0, 945, 946,
	947, 0, 944, 941, 942, 943, 935, 936, 937, 938,
	940, 950, 960, 0, 0, 0, 1943, 0, 0, 0,
	0, 0, 931, 932, 959, 951, 952, 953, 961, 962,
	963, 0, 0, 0, 0, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 965, 0,
	0, 0, 957, 0, 0, 945, 946, 947, 0, 944,
	941, 942, 943, 935, 936, 937, 938, 940, 933, 960,
	0, 0, 0, 1885, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 945, 946, 947,
	0, 944, 941, 942, 943, 935, 936, 937, 938, 940,
	0, 960, 0, 0, 0, 1863, 0, 0, 0, 0,
	0, 931, 932, 0, 951, 952, 953, 961, 962, 963,
	0, 0, 0, 939, 0, 0, 0, 954, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 965, 0, 0,
	0, 0, 958, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 964, 0,
	0, 931, 932, 948, 951, 952, 953, 961, 962, 963,
	956, 0, 0, 0, 0, 0, 949, 954, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 933, 0, 0,
	0, 0, 939, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 932, 0, 951, 952, 953, 961, 962,
	963, 958, 966, 0, 0, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 950, 934, 0, 964, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 956,
	0, 0, 939, 0, 0, 949, 0, 0, 933, 0,
	0, 0, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 958, 966, 0, 0, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 949, 0, 957, 0, 0,
	945, 946, 947, 939, 944, 941, 942, 943, 935, 936,
	937, 938, 940, 950, 960, 0, 0, 0, 1862, 0,
	955, 0, 958, 966, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 957, 0, 0, 945,
	946, 947, 0, 944, 941, 942, 943, 935, 936, 937,
	938, 940, 0, 960, 0, 0, 0, 1755, 0, 0,
	0, 0, 931, 932, 0, 951, 952, 953, 961, 962,
	963, 0, 0, 0, 950, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 934, 957, 959, 965, 945,
	946, 947, 0, 944, 941, 942, 943, 935, 936, 937,
	938, 940, 0, 960, 0, 0, 0, 1689, 933, 0,
	0, 0, 0, 0, 948, 0, 0, 0, 0, 931,
	932, 0, 951, 952, 953, 961, 962, 963, 0, 0,
	0, 0, 0, 0, 0, 954, 0, 0, 0, 0,
	0, 0, 934, 0, 0, 965, 0, 957, 0, 0,
	945, 946, 947, 0, 944, 941, 942, 943, 935, 936,
	937, 938, 940, 939, 960, 933, 0, 0, 1673, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 966, 0, 0, 0, 0, 0, 434,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	956, 0, 0, 0, 0, 0, 949, 0, 0, 0,
	939, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	966, 955, 0, 0, 437, 0, 0, 0, 0, 442,
	443, 0, 0, 448, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 436, 438, 956, 0, 0,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 955, 0,
	0, 0, 0, 0, 439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 957, 0, 0,
	945, 946, 947, 0, 944, 941, 942, 943, 935, 936,
	937, 938, 940, 0, 960, 0, 0, 0, 1253, 0,
	0, 0, 0, 0, 931, 932, 0, 951, 952, 953,
	961, 962, 963, 0, 0, 0, 0, 0, 0, 0,
	954, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	965, 0, 0, 0, 957, 0, 0, 945, 946, 947,
	0, 944, 941, 942, 943, 935, 936, 937, 938, 940,
	933, 960, 0, 1467, 0, 0, 948, 0, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 445, 0, 450,
	0, 0, 0, 446, 954, 0, 0, 0, 447, 0,
	0, 934, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 933, 939, 2086, 0, 0, 0,
	948, 954, 0, 0, 0, 0, 1168, 0, 934, 0,
	0, 965, 0, 0, 958, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 933, 0, 0, 0, 0, 0, 948, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 949, 939,
	0, 1532, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1169, 0, 0, 958, 966,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 939, 2085, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 949, 0, 0, 958, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 955, 0, 959,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 957,
	0, 0, 945, 946, 947, 0, 944, 941, 942, 943,
	935, 936, 937, 938, 940, 0, 960, 950, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 931, 932,
	959, 951, 952, 953, 961, 962, 963, 0, 0, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 968, 0,
	0, 934, 0, 957, 965, 0, 945, 946, 947, 0,
	944, 941, 942, 943, 935, 936, 937, 938, 940, 0,
	960, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 945, 946, 947, 0, 944, 941, 942,
	943, 935, 936, 937, 938, 940, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 931, 932, 0,
	951, 952, 953, 961, 962, 963, 0, 0, 0, 939,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 965, 0, 0, 0, 0, 958, 966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 964, 0, 0, 0, 0, 948,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 931, 932, 0, 951, 952, 953, 961,
	962, 963, 0, 0, 0, 0, 0, 958, 966, 954,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 965,
	950, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 956, 0, 0, 0, 933,
	0, 949, 0, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 957, 939, 0, 945, 946, 947, 0,
	944, 941, 942, 943, 935, 936, 937, 938, 940, 950,
	960, 0, 0, 958, 966, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 931, 932, 0, 951, 952, 953, 961, 962,
	963, 956, 0, 0, 0, 0, 0, 949, 954, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 957, 0, 948, 945, 946, 947, 0, 944,
	941, 942, 943, 935, 936, 937, 938, 940, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 1538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1677, 0, 958, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 949, 0, 957, 0,
	0, 945, 946, 947, 0, 944, 941, 942, 943, 935,
	936, 937, 938, 940, 0, 960, 0, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 0, 0, 1533, 0, 0, 934, 0,
	0, 965, 0, 0, 950, 0, 0, 931, 932, 0,
	951, 952, 953, 961, 962, 963, 0, 959, 0, 0,
	0, 933, 0, 954, 0, 0, 0, 948, 0, 0,
	934, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 957, 0, 0,
	945, 946, 947, 0, 944, 941, 942, 943, 935, 936,
	937, 938, 940, 0, 960, 958, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 964, 0, 0, 931, 932, 0, 951, 952, 953,
	961, 962, 963, 956, 0, 0, 0, 958, 966, 949,
	954, 0, 0, 0, 1491, 0, 0, 934, 0, 0,
	965, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 956, 0, 0, 0, 0,
	933, 949, 0, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 1498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 939, 0, 931, 932, 0,
	951, 952, 953, 961, 962, 963, 0, 0, 0, 950,
	0, 0, 0, 954, 958, 966, 0, 0, 0, 0,
	934, 0, 959, 965, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 933, 0, 0, 0, 0, 949, 948,
	957, 0, 0, 945, 946, 947, 0, 944, 941, 942,
	943, 935, 936, 937, 938, 940, 0, 960, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 945, 946, 947, 0, 944,
	941, 942, 943, 935, 936, 937, 938, 940, 939, 960,
	0, 0, 0, 0, 931, 932, 0, 951, 952, 953,
	961, 962, 963, 0, 0, 0, 950, 958, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 959,
	965, 0, 0, 964, 0, 813, 805, 830, 798, 821,
	820, 0, 0, 800, 799, 956, 0, 0, 832, 831,
	933, 949, 0, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	826, 0, 818, 817, 0, 0, 0, 0, 0, 957,
	0, 816, 945, 946, 947, 0, 944, 941, 942, 943,
	935, 936, 937, 938, 940, 939, 960, 0, 815, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 958, 966, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 808, 807, 809, 810,
	811, 0, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 806, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 945, 946, 947, 0, 944,
	941, 942, 943, 935, 936, 937, 938, 940, 814, 960,
	0, 0, 1187, 1185, 1186, 1189, 1188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 803, 0, 0, 959,
	0, 0, 0, 0, 0, 812, 804, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 801, 0, 0, 827, 828, 0,
	813, 805, 830, 798, 821, 820, 0, 0, 800, 799,
	0, 0, 0, 832, 831, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 945, 946, 947, 0, 944, 941, 942, 943,
	935, 936, 937, 938, 940, 826, 960, 818, 817, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 815, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 808, 807, 809, 810, 811, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 802, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 0, 0, 0, 806, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 803, 0, 0, 0, 0, 0, 0, 0, 0,
	812, 804, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 801,
	0, 0, 827, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833,
}
var sqlPact = [...]int{

	2383, -1000, -33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	740, 15982, 15982, 19613, -1000, -1000, -1000, -1000, -1000, -1000,
	756, 697, 3045, 5224, 19613, 19613, 19336, 2034, 2034, 20998,
	-1000, -1000, 24322, -1000, 26215, 491, 495, 491, 491, 488,
	20998, 19613, 613, 638, 113, -1000, 889, -34, 24045, 19613,
	1398, 19, 17951, 296, 2383, 19059, 23768, 19613, 18782, 586,
	17, 16552, 19613, -1000, 24, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1233, 318, 24, -1000, 1225, 1143, 1136,
	17951, 23491, 23214, 22937, 22660, -1000, 12244, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 757,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 303, 302, -1000, 18505, -1000, 958, -1000, 18, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 957, -1000, 19613,
	-1000, -1000, 22383, 22106, 659, 298, 946, -1000, -1000, 558,
	409, 1410, -1000, 29, -1000, -1000, -1000, 1221, -1000, 953,
	1220, 1219, 1218, 1217, 1216, 1215, 405, 945, 467, -1000,
	1214, 946, -1000, 946, -1000, -1000, -1000, 585, 20998, -1000,
	-1000, 17951, -1000, 21829, 19613, 19613, 1159, 21552, -1000, 889,
	-1000, -1000, -1000, 973, 1397, 1397, 1397, 1487, 104, 102,
	113, -4, 19613, -1000, 297, -4, 9263, 9263, -1000, -1000,
	296, -1000, 163, 15127, -1000, 8330, -1000, 887, 1308, 404,
	658, 1306, -144, 831, 815, 1305, 15705, 16552, 17, 16,
	-1000, -1000, -1000, 4923, 15705, 637, 14296, 24, -1000, -1000,
	-1000, 17951, 19613, 19613, 662, 21275, -1000, 1304, 110, 1303,
	-1000, 98, 1296, -1000, 98, 1287, 14, -1000, -1000, -1000,
	-1000, -1000, -1000, 296, 18228, 19613, 1542, 27843, -1000, 10478,
	-1000, -1000, 15982, 986, 15982, -1000, -1000, 1540, -1000, 19613,
	10478, -1000, 15, 12, 1071, 1081, 12837, 12547, 1357, 2017,
	-1000, -1000, -1000, 27, 5224, 19613, 1241, 15982, 19613, 19613,
	19613, 19613, 19613, 19613, -1000, 1070, -1000, -1000, 19613, 19613,
	739, -1000, 4, 2, -1000, 20998, -1000, 112, -1000, 282,
	1020, 408, 111, 20721, 408, 1019, -1000, 973, -1000, 963,
	1050, 9569, 10478, 113, -1000, -1000, 113, 113, 10478, -1000,
	-1000, 19613, -4, 1539, 19613, 93, -1000, 26728, -1000, -1000,
	10478, 10478, 10478, 10478, 10478, 891, 327, -1000, 281, 280,
	6158, -1000, -1000, 1651, -1000, -1000, -1000, 108, -1000, -1000,
	10478, 24, -1000, -1000, -1000, -1000, 279, 1677, -1000, 424,
	-1000, -1000, -1000, 388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1239, 278, 274, -1000, -1000, -1000, -1000,
	272, 267, 264, 257, 256, 254, 252, 251, 249, 247,
	246, 239, 238, 237, 235, 859, -1000, 429, -1000, -1000,
	429, 429, -1000, 229, 229, 233, -1000, -1000, -1000, -1000,
	229, -1000, -1000, -1000, 385, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 234, 93, -1000, -1000, -1000, 19613, 13, -1000,
	27497, -1000, -23, 727, -1000, 17397, 1498, 1471, 1372, 17951,
	1524, -34, 1507, -34, 584, 19613, 19613, 583, 577, 17951,
	378, -1000, -1000, -1000, -1000, -1000, 19613, -1000, -1000, -19,
	-1000, -1000, 1213, 9, -1000, -1000, 421, 76, 1538, 76,
	14573, -1000, 19613, 19613, -1000, 19613, -1000, -1000, 19613, -1000,
	19613, 19613, -1000, 19613, 782, 16843, 734, 1286, 618, -34,
	3, -1000, 1535, -1000, -1000, -1000, -1000, 75, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 233, 859, 229, 229, 229,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 385, -1000, -1000,
	429, 429, 429, -1000, -1000, -14, 27497, 575, -1000, 1212,
	472, -1000, 383, -21, 849, 1130, 852, -1000, -1000, -1000,
	-1000, -6, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1620, -1000, -1000, 1650, -6, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1671, 5224, -1000, -1000,
	-1000, 19613, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19613, 19613, 849, 1130, -1000, -1000, 17951, 17120,
	1536, 1279, 864, -1000, 1533, 19613, 952, 1017, -1000, 607,
	1278, -1000, -1000, -1000, -1000, 27497, -1000, 27497, 698, 1148,
	-1000, 1148, -8, -1000, 26495, -1000, 228, -22, 421, 9263,
	14003, 27608, 27843, 19613, 598, 10478, 10478, 10478, 10478, 10478,
	10478, 10478, 10478, 10478, 10478, 10478, 10478, 10478, 10478, 10478,
	10478, 10478, 10478, 10478, 10478, 10478, 10478, 1015, 10478, 569,
	10478, 10478, 10478, 10478, 1751, 902, 208, 1026, 5224, -1000,
	-1000, 646, 646, 646, 3313, 3313, 178, 327, -1000, 10478,
	-1000, 8936, 102, 26082, -12, -1000, -1000, -1000, 7067, 426,
	27497, 24, 5831, -1000, 1649, 696, 1248, 1188, 226, 99,
	97, 10478, 10478, 10781, 10781, 10478, 11084, 10478, 10478, 6461,
	10478, 10478, 10478, 10478, 10478, 10478, -1000, 224, -1000, -1000,
	-1000, -1000, 1634, -1000, -1000, 1633, -1000, 592, 591, 1623,
	421, 95, 8330, -1000, 734, 19613, 19613, 19613, -1000, -1000,
	1010, 20444, 1007, 27843, 19613, -1000, 222, 217, 1098, 1097,
	19613, 19613, 20167, 19890, 19613, 767, -34, -1000, -34, -1000,
	19613, 806, -1000, 19613, 19613, 775, 1176, 960, -1000, 414,
	15705, 632, 1211, 19613, 750, 10478, 811, -1000, 13710, 440,
	19613, 750, 82, -1000, -1000, -1000, 374, 19613, -1000, -1000,
	-1000, 110, -1000, 98, 98, -1000, -1000, 17951, -1000, -1000,
	-1000, -1000, -1000, -1000, 27843, 326, 323, -1000, 1622, 562,
	-1000, 561, 554, 544, -1000, 215, -1000, 10478, 19613, 19613,
	1130, -1000, -1000, -1000, -1000, 704, -1000, 843, -1000, 13127,
	-1000, -1000, -1000, -1000, -30, -1000, -1000, -1000, -1000, -1000,
	-1000, 94, -26, -13, 27843, -1000, -1000, -1000, -1000, -1000,
	19613, 269, 19613, -34, 19613, -1000, 1668, -34, 19613, 1277,
	1316, 369, 19613, -1000, -1000, -1000, 10478, -1000, -1000, -1000,
	-34, -1000, 1187, -1000, -31, 1323, 1356, -149, 101, 384,
	-1000, 13417, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 396, 1315, 1315, 545, 545, 545, 545, 1115,
	1115, 268, 203, 3944, 3944, 3944, 2944, 219, 219, 3944,
	3944, 3944, 3313, 138, 156, 10478, 10478, 540, 869, 208,
	156, 10478, 1592, 156, 156, 156, -1000, 1534, -1000, -1000,
	-1000, -1000, 1208, 207, 11084, 11084, -1000, -1000, -1000, 6158,
	11690, -1000, -1000, -1000, -1000, -1000, 206, 10478, -1000, 26139,
	-190, -32, -1000, -1000, 10478, -91, -132, -1000, -1000, 629,
	-1000, 10478, -1000, -11, 10478, 10478, 10478, 92, 91, -1000,
	893, 188, 186, 10478, -1000, -1000, 27394, 24894, 90, 1207,
	-114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 89, 88,
	27287, -114, 87, 3597, -1000, 11084, 11084, 11084, 6158, 184,
	83, 26458, -114, 27255, 8633, 8633, 8633, 81, 27062, 10478,
	-114, 3841, 3734, 3628, -36, -37, -43, 1617, -44, 80,
	395, 391, 78, 1187, -1000, -1000, -1000, -1000, 539, 524,
	1276, -1000, 1003, -1000, 444, -1000, 785, 10478, 11967, 180,
	179, 803, -1000, 1272, 940, 1270, 940, -1000, -23, 702,
	-1000, -1000, -1000, 518, -1000, -1000, 516, 414, 1205, 619,
	-1000, 929, -1000, -1000, 631, -1000, -1000, 6764, 27497, -1000,
	750, 1411, -49, -1000, -1000, -1000, 421, 14573, 14003, 8330,
	-55, -1000, -1000, -1000, 734, -1000, 417, 1611, 77, 1034,
	918, 824, 685, 1609, 27497, -30, -30, -1000, -1000, -1000,
	-1000, -1000, 19613, 1161, -1000, 17120, 177, 19613, 176, -1000,
	168, -1000, -1000, 167, 19613, 1078, 369, 16275, -1000, 408,
	-1000, 71, 1181, 1483, -1000, 14003, 1127, 1124, 14003, 1555,
	901, 901, 901, -1000, 166, 2728, 384, 4307, 10478, 17674,
	906, 49, 68, 1323, 10478, 156, 156, 10478, 11084, 11084,
	-1000, 156, -1000, -1000, -1000, -1000, -1000, 1203, 165, 10478,
	27843, 3363, 2840, -56, -1000, 8003, -48, -1000, 10478, -1000,
	25872, -1000, -1000, 114, 1312, -1000, 10478, 26923, 67, 7700,
	-1000, 26817, -20, -20, -1000, 1663, -1000, 14850, 423, 912,
	25811, 27608, 27843, -1000, 10478, -1000, -1000, 1201, 10478, -1000,
	27608, 27843, 11084, 11084, 11084, 11084, 11084, 11084, 11084, 11084,
	11084, 11084, 11084, 11084, 11084, 11084, 11084, 11084, 11084, 11084,
	11084, 1069, 11084, 1567, 1567, 1567, -66, 7373, -1000, 1238,
	1201, 10478, 10478, 27843, 63, 61, 60, -1000, 10478, -114,
	10478, 10478, 10478, -1000, -1000, -1000, 59, -1000, 1607, -1000,
	-1000, -1000, -1000, 1181, 19613, 19613, 19613, 1269, -1000, 2004,
	-1000, 25761, -64, -1000, 293, 1446, 10478, -1000, -1000, 164,
	11967, 19613, -1000, 1118, 1135, 480, 19613, -1000, 19613, -1000,
	19613, 19613, 19613, 19613, 19613, -1000, 15705, 590, 161, -1000,
	-73, -1000, -1000, 204, -34, 750, -1000, -74, -1000, 370,
	-1000, 321, 316, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 58, -1000, -1000, 1164, -1000, 11967, 160, 19613, 17120,
	1529, 11967, 950, 1086, 369, 16275, -1000, 607, -1000, 416,
	10478, 10478, 1323, 14003, 14003, 910, 1101, 14003, -1000, -1000,
	-1000, -1000, 315, 345, 314, 12244, 17674, -1000, 1601, 1106,
	-65, -1000, -1000, 19613, 159, -1000, 384, 517, 156, 2214,
	484, 10478, 27843, 27604, -69, 10478, 10478, -1000, -75, -1000,
	10478, 313, 27497, -1000, -1000, -1000, 27497, 10478, 1655, 10478,
	55, 54, 51, -1000, -1000, -1000, 24599, 10478, 47, -1000,
	46, 45, 27497, 1238, 27497, -1000, -1000, 533, 533, 1567,
	1567, 1567, 1567, 454, 454, 967, 796, 348, 348, 348,
	599, 434, 434, 348, 348, 348, 1199, 1075, 158, 2501,
	10478, -76, -1000, -1000, -1000, 27497, 27497, 43, -1000, -1000,
	-1000, -114, 3405, 25672, 25439, -1000, 40, 416, -1000, -1000,
	-1000, 19613, -1000, 19613, -1000, 19613, 19613, 1194, 996, -1000,
	-1000, 1090, 157, 11084, 19613, -1000, 820, 11967, 1383, 24,
	19613, 1383, 25407, 5831, -81, -82, 984, -1000, 972, 10478,
	-1000, 27843, 940, 940, -1000, 511, 509, -1000, -1000, -83,
	15428, 1659, 1319, 19613, 1365, -1000, -1000, 155, -1000, -1000,
	-1000, 888, -86, 11967, -92, 39, -34, -94, 19613, -1000,
	369, 16275, -1000, 1316, -1000, 19613, 27497, -114, -1000, 910,
	-1000, 154, 10478, 14003, -1000, -149, -1000, -98, -1000, 384,
	-103, -1000, 312, -182, -1000, 368, -1000, 384, 152, 19613,
	17674, 10478, 10478, 27604, -104, -1000, 156, 156, -1000, 25350,
	-1000, 27497, -1000, 26817, -1000, -1000, -1000, 874, -1000, 25300,
	-1000, -1000, -1000, -1000, 11084, 1198, 142, 27843, 25033, -1000,
	-1000, 10478, -1000, -1000, -1000, -1000, -1000, 943, -1000, -1000,
	19613, 999, -1000, -1000, 10478, 2501, 141, 1161, 137, -1000,
	-1000, -1000, -1000, -1000, -1000, 1446, -11, -1000, 826, -1000,
	-1000, 27497, 1437, -1000, -1000, 19613, 19613, -1000, 136, 24,
	-105, -1000, 367, 565, -109, 19613, -1000, -1000, 5525, 19613,
	820, -110, -1000, 1161, -1000, 820, 124, 16275, -1000, 1078,
	-90, -1000, 1528, -1000, 19613, 27497, -1000, 384, -1000, 1598,
	17674, 782, -1000, 1106, -1000, 4619, 17674, 19613, -124, -1000,
	156, 156, -1000, -1000, 38, 912, 1482, -1000, 3916, 11084,
	27843, -133, -1000, 24983, -1000, -1000, 1264, 24926, 1040, 19613,
	-1000, 19613, 1383, 36, 19613, 451, 19613, -1000, -1000, 10478,
	1659, -1000, -1000, 1656, 661, -1000, 421, -1000, 117, 1161,
	820, -1000, 1161, 11967, -1000, 1086, 19613, 115, -138, 17674,
	-1000, -1000, 305, -1000, -1000, 1579, -1000, -139, -1000, -1000,
	764, 10478, 3916, -146, -1000, -1000, 1255, -1000, 934, 857,
	35, -151, -1000, -1000, 111, -1000, 10478, -1000, -20, -1000,
	-1000, 14573, -1000, 19613, -1000, 1161, -1000, -157, -1000, -1000,
	-1000, -1000, -1000, 384, 139, -1000, 34, 10175, 10175, -114,
	-1000, 19613, -1000, 949, 936, 687, -1000, -1000, -1000, -1000,
	-1000, 1040, 27497, 31, -130, -166, -1000, 820, 17674, -1000,
	-1000, -1000, -1000, 11387, 956, 692, 26404, -1000, -1000, -1000,
	1324, -1000, 459, 995, 995, 934, 1655, -1000, 884, 1161,
	-1000, 1549, -1000, -1000, -1000, -1000, -1000, -1000, 1556, -1000,
	-1000, 1065, -1000, -1000, -1000, -1000, -1000, -1000, 9872, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1967, 1966, 1425, 1718, 1965, 1964, 1674, 1962, 1960,
	1959, 1956, 1951, 1949, 102, 1620, 1610, 29, 1606, 1947,
	82, 1944, 1943, 1938, 98, 1935, 1932, 1931, 1930, 1804,
	1926, 1925, 1579, 1544, 1490, 1924, 1922, 90, 1917, 18,
	1915, 69, 1914, 76, 130, 2394, 117, 1913, 1906, 1899,
	25, 92, 68, 1897, 138, 1889, 1887, 51, 37, 26,
	22, 1886, 121, 125, 1312, 36, 1884, 1883, 124, 1882,
	28, 34, 319, 139, 135, 129, 110, 1880, 1878, 1877,
	1876, 50, 1874, 7, 1873, 1870, 11, 56, 54, 1869,
	30, 17, 1868, 1866, 113, 1864, 77, 97, 1470, 42,
	114, 176, 1863, 78, 13, 63, 1859, 1854, 115, 39,
	1853, 43, 75, 119, 1852, 52, 140, 65, 40, 62,
	94, 1851, 1844, 1843, 95, 1837, 104, 70, 1830, 1828,
	71, 1825, 118, 120, 1819, 1818, 112, 1816, 1814, 132,
	146, 1812, 1811, 142, 1800, 12, 47, 66, 6, 1468,
	1464, 105, 61, 33, 24, 1798, 1823, 746, 784, 46,
	79, 57, 53, 81, 55, 60, 137, 23, 1796, 1792,
	93, 1790, 1775, 1773, 1769, 1768, 80, 1766, 1765, 72,
	127, 14, 8, 20, 87, 49, 96, 86, 131, 136,
	108, 1763, 84, 109, 48, 89, 1762, 1761, 1481, 107,
	1759, 1756, 1755, 1451, 1447, 1224, 208, 1753, 1752, 652,
	615, 1751, 1750, 59, 1746, 133, 1743, 1741, 126, 122,
	16, 1740, 41, 58, 85, 1739, 101, 64, 0, 775,
	696, 1738, 111, 73, 1737, 1733, 1729, 1728, 35, 2,
	9, 3, 5, 4, 27, 21, 1727, 1726, 116, 31,
	67, 1725, 141, 1724, 1723, 1714, 45, 1713, 19, 1708,
	15, 1707, 1706, 10, 1, 1705, 1699, 128, 1693, 88,
	1692, 1524, 1690, 134, 1689, 1683, 1554, 38, 83,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 4, 52, 52, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	49, 49, 54, 54, 54, 56, 56, 53, 53, 48,
	48, 5, 5, 226, 226, 227, 227, 38, 38, 42,
	42, 39, 40, 40, 41, 41, 6, 6, 6, 7,
	7, 7, 7, 7, 7, 14, 15, 15, 15, 15,
	15, 15, 15, 15, 100, 100, 99, 99, 102, 102,
	16, 16, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 194, 194, 193, 19, 168, 168,
	20, 20, 20, 20, 21, 125, 125, 22, 22, 22,
	22, 23, 28, 267, 267, 267, 271, 271, 272, 272,
	273, 273, 273, 273, 273, 273, 273, 269, 269, 27,
	31, 31, 31, 31, 31, 31, 144, 140, 140, 142,
	142, 142, 142, 63, 139, 139, 139, 139, 141, 141,
	141, 141, 219, 218, 218, 224, 224, 224, 78, 78,
	78, 78, 78, 79, 79, 79, 217, 217, 217, 217,
	225, 225, 225, 225, 225, 225, 80, 80, 80, 223,
	223, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 18, 268, 268, 270, 270, 33, 33,
	34, 34, 10, 10, 11, 11, 81, 81, 82, 82,
	147, 147, 147, 147, 83, 83, 55, 55, 55, 146,
	236, 236, 237, 237, 237, 237, 237, 237, 238, 238,
	238, 238, 238, 238, 238, 234, 234, 235, 232, 232,
	233, 233, 233, 233, 274, 274, 145, 145, 86, 86,
	241, 241, 241, 241, 239, 239, 239, 239, 239, 242,
	240, 243, 243, 243, 243, 243, 180, 180, 180, 36,
	12, 61, 61, 13, 9, 9, 129, 129, 90, 90,
	185, 185, 185, 71, 71, 50, 50, 50, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 130,
	130, 131, 131, 25, 30, 35, 35, 35, 35, 35,
	276, 276, 67, 67, 67, 67, 68, 68, 143, 143,
	143, 143, 143, 62, 8, 8, 57, 57, 58, 58,
	59, 59, 60, 60, 277, 277, 24, 24, 24, 74,
	74, 136, 136, 136, 138, 138, 137, 137, 137, 115,
	115, 115, 37, 95, 95, 104, 104, 105, 105, 191,
	106, 106, 29, 29, 45, 45, 43, 43, 43, 43,
	43, 43, 44, 44, 46, 46, 46, 46, 46, 46,
	46, 249, 249, 249, 252, 252, 248, 250, 250, 251,
	251, 275, 275, 116, 116, 116, 85, 84, 84, 88,
	88, 87, 89, 89, 184, 113, 113, 113, 113, 132,
	133, 133, 134, 134, 135, 135, 112, 112, 164, 164,
	47, 47, 94, 94, 96, 96, 154, 154, 154, 155,
	155, 153, 153, 153, 153, 186, 186, 186, 186, 186,
	186, 186, 186, 265, 265, 265, 266, 266, 183, 183,
	187, 187, 187, 187, 187, 187, 181, 181, 181, 181,
	182, 182, 192, 192, 119, 119, 119, 119, 117, 117,
	118, 118, 188, 188, 188, 188, 114, 114, 189, 189,
	189, 148, 148, 195, 195, 195, 213, 213, 93, 93,
	93, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 197, 197, 197,
	197, 199, 199, 199, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 212, 212,
	212, 212, 212, 200, 200, 207, 207, 208, 208, 209,
	210, 201, 201, 202, 202, 203, 204, 211, 211, 211,
	211, 215, 215, 205, 205, 205, 205, 205, 206, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 127, 127, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 158, 158, 158,
	158, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 244, 244, 244, 244, 244, 244, 244, 246,
	246, 247, 247, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	253, 253, 254, 254, 256, 256, 257, 257, 258, 259,
	259, 259, 260, 261, 261, 255, 255, 262, 262, 262,
	263, 263, 264, 264, 264, 264, 264, 170, 170, 170,
	171, 171, 172, 178, 178, 178, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 69, 69, 69, 69, 69, 101, 101, 167,
	167, 165, 165, 165, 169, 169, 120, 120, 214, 214,
	214, 214, 214, 214, 214, 121, 121, 121, 128, 122,
	122, 123, 123, 123, 123, 123, 123, 161, 162, 124,
	124, 124, 163, 163, 173, 177, 177, 176, 175, 175,
	174, 174, 151, 151, 152, 152, 150, 149, 109, 109,
	108, 108, 107, 107, 278, 278, 179, 179, 110, 110,
	111, 103, 103, 190, 190, 190, 190, 97, 97, 76,
	76, 98, 98, 72, 72, 75, 75, 73, 73, 73,
	73, 91, 91, 92, 92, 70, 70, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 216, 216,
	216, 166, 64, 64, 64, 65, 65, 66, 66, 221,
	221, 221, 222, 222, 222, 222, 220, 220, 220, 220,
	220, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 4, 6, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 6, 1, 1, 1, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 4, 6, 7, 1,
	1, 1, 1, 1, 1, 6, 3, 5, 4, 6,
	4, 6, 4, 6, 1, 3, 1, 2, 2, 3,
	2, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	1, 1, 1, 1, 3, 3, 0, 2, 3, 2,
	3, 6, 6, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	2, 3, 6, 3, 4, 1, 5, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 2, 4, 2, 4, 4, 4, 4,
	4, 4, 4, 2, 3, 4, 3, 3, 4, 4,
	2, 5, 5, 2, 2, 0, 2, 0, 6, 6,
	5, 5, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 8, 11, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 6, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 7, 4, 6, 3, 1,
	5, 6, 9, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -25, -27, -36, -37,
	23, 34, 223, 66, -8, -9, -10, -11, -12, -13,
	-251, 94, 102, 124, 205, 101, 87, 118, 226, 234,
	-43, -45, 242, -144, 244, 35, 253, 60, 97, 228,
	221, 222, 277, 68, -249, -46, -44, 325, 300, 306,
	237, -47, 261, 292, 328, 261, 133, 80, 295, -267,
	-98, 261, 80, -73, -64, 318, 4, -228, -230, 20,
	21, 23, 33, 34, 35, 40, 44, 47, 54, 59,
	60, 61, 63, 65, 66, 67, 70, 71, 78, 79,
	81, 83, 87, 89, 93, 94, 96, 101, 102, 108,
	109, 112, 114, 119, 124, 125, 126, 127, 134, 137,
	139, 132, 147, 149, 150, 153, 152, 157, 160, 163,
	165, 166, 167, 170, 168, 172, 173, 175, 174, 180,
	182, 183, 185, 188, 191, 194, 197, 198, 199, 200,
	203, 205, 207, 208, 209, 211, 212, 214, 215, 216,
	217, 218, 221, 219, 220, 222, 223, 224, 226, 228,
	229, 231, 243, 233, 234, 235, 236, 239, 240, 242,
	244, 246, 249, 252, 253, 254, 257, 255, 251, 260,
	262, 263, 264, 265, 266, 273, 277, 278, 279, 280,
	283, 284, 285, 287, 289, 290, 291, 296, 301, 302,
	303, 304, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 50, 51, 52, 55, 82, 84, 85, 100, 103,
	104, 110, 120, 122, 128, 129, 138, 140, 141, 142,
	144, 155, 169, 179, 181, 192, 196, 202, 204, 210,
	230, 238, 247, 248, 256, 258, 268, 269, 270, 274,
	275, 292, 293, -267, -72, -64, 80, 89, 137, 285,
	284, 80, 133, 261, 295, -17, 325, -29, -7, -15,
	-4, -24, -37, -14, -32, -18, -33, -34, -16, 23,
	-220, 4, -228, -230, -229, -231, 57, 69, 117, 136,
	130, 146, 148, 156, 158, 171, 193, 195, 227, 245,
	22, 24, 25, 26, 27, 29, 30, 31, 32, 43,
	48, 49, 53, 56, 58, 64, 68, 72, 73, 74,
	75, 76, 77, 86, 88, 90, 91, 92, 95, 97,
	99, 105, 106, 107, 113, 115, 116, 118, 121, 123,
	131, 133, 135, 143, 145, 151, 154, 159, 161, 162,
	176, 177, 178, 184, 186, 187, 189, 190, 201, 206,
	213, 225, 237, 241, 250, 259, 261, 267, 271, 272,
	276, 281, 282, 286, 288, 294, 295, 297, 298, 299,
	300, -64, -64, -64, 205, 22, -271, 22, -272, -273,
	68, 94, 118, 237, 137, 89, 284, -271, -68, 234,
	-64, -140, 160, 240, 54, 230, 273, -141, -139, -219,
	268, 170, -99, -64, 4, 22, 80, 59, 81, 119,
	133, 134, 64, 65, 150, 262, 268, 273, 68, 287,
	264, -276, 273, 273, -276, -276, -67, 273, 271, -68,
	-219, -275, 261, 261, 286, 295, -129, 80, 282, -44,
	-46, -45, -87, -88, 281, 143, 99, 190, -43, -45,
	-249, -252, 211, -248, -64, -252, -84, -85, 22, 91,
	329, -188, -72, 187, -111, 325, -3, -188, 128, -72,
	-75, 128, -72, -64, -188, 128, 271, 329, -98, -91,
	-64, -150, -149, 327, 116, 116, 325, -108, -109, -149,
	-150, 116, 145, 145, -189, -188, -64, 128, -76, 128,
	-75, -100, 128, -99, -100, 128, -194, -193, -222, 4,
	-228, -230, -229, 292, 261, 133, -168, 325, -125, 325,
	-64, 22, 186, 329, 186, -64, -140, 52, -140, 243,
	325, -142, -62, -63, 147, 207, 271, 310, 116, 304,
	-80, 5, 86, -102, 327, 116, -268, 186, 116, 116,
	116, 116, 116, 116, 304, 147, 207, 233, 261, 295,
	116, -143, -62, -63, -143, 271, -68, -114, -188, -99,
	128, -64, -99, 133, -64, 128, -87, -88, -113, -132,
	-133, 159, 184, -116, 22, 91, -116, -116, 44, 326,
	326, 329, -252, -92, 325, -103, -190, -156, 318, -158,
	316, 317, 322, 176, 305, -170, -160, -173, 100, 230,
	325, -72, -159, 330, 9, -246, -45, 29, -171, -172,
	48, -64, 7, 8, 5, 6, -70, -197, -166, -206,
	276, 105, 178, -244, -245, 4, -228, -221, -198, -208,
	-202, -205, 144, 57, 73, 76, 74, 77, 241, 286,
	49, 28, 103, 104, 196, 202, 258, 274, 275, 128,
	179, 129, 55, 120, 155, 93, 37, 39, 41, 42,
	50, 51, 82, 84, 85, 110, 138, 140, 141, 142,
	181, 210, 247, 256, 269, 270, 293, -229, -209, -210,
	-203, -204, -211, -103, -111, 318, -72, 325, -110, -179,
	-156, 86, -52, 219, -51, 21, 23, 94, 290, 100,
	251, 265, 251, 265, 219, 100, 330, 219, 219, 100,
	-226, -223, 9, -222, 5, -73, 329, -220, 318, -227,
	-226, 254, 326, -97, -72, -109, -189, -74, -72, -74,
	242, -64, 30, 100, -54, 329, 47, 224, 100, -54,
	329, 100, -54, 100, 326, 329, -188, 128, -75, 30,
	-167, -195, -196, -198, -207, -201, -205, -206, 40, 46,
	45, 266, 169, 238, 248, 38, 185, 139, 138, 140,
	141, 142, 247, 37, 210, 110, 93, 85, 84, 181,
	42, 41, -209, -210, -203, -204, 82, 269, 270, 144,
	39, 51, 50, 293, 256, -101, -156, -267, -273, -267,
	30, -139, -219, -101, 329, 329, 157, -79, 163, 175,
	125, -218, 86, -224, -217, -180, 9, 276, 105, 186,
	-223, 8, 317, -216, 7, 316, -218, 86, 71, -225,
	5, 4, -166, -180, 86, 160, -206, 327, -220, -219,
	-270, 113, -267, -219, -219, -219, -219, -219, -64, 157,
	-219, -219, 261, 133, 329, 329, -68, -54, 329, 325,
	-86, 176, -250, 300, -86, 325, -65, 128, -64, -250,
	176, -113, -133, -132, -134, -156, 22, -156, -158, -44,
	-44, -44, -89, -184, -156, -248, 30, -91, -94, 329,
	116, 10, 11, 56, 33, 316, 317, 318, 319, 111,
	320, 313, 314, 315, 312, 308, 309, 310, 62, 164,
	232, 13, 14, 15, 26, 189, 158, 305, 130, 245,
	322, 16, 17, 18, 146, 36, 131, -69, 30, 4,
	-77, -156, -156, -156, -156, -156, 195, -107, -151, 323,
	-45, 325, -45, -156, -101, 7, -45, -165, 323, -174,
	-156, -108, 325, 5, 325, 5, -253, 301, 113, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 204, -215, 296, -215,
	-215, -199, 325, -199, -200, 325, -199, 302, 306, 325,
	-94, -72, 329, 326, 329, 271, -130, 64, 58, -146,
	128, 58, -232, -64, 64, -233, 53, 282, 206, 115,
	-130, 64, -130, 64, 64, -188, 33, -29, 33, -29,
	271, -75, -64, 271, 271, -188, -192, 307, -64, -192,
	329, 116, 326, 329, -148, 298, -136, -29, 325, 86,
	30, -136, -104, -105, -191, -106, -72, 325, -64, -64,
	-75, -76, -99, -100, -100, -17, -193, 100, -20, -29,
	-24, -37, -14, 326, 329, -93, 29, -126, 325, 303,
	167, 83, 126, 166, -127, 236, 326, 329, 271, 116,
	273, 326, -63, -62, -78, 209, 249, 220, 239, 329,
	8, 7, 7, -220, -269, -64, -72, -75, -63, -62,
	-188, -81, -91, -82, -64, -147, -146, -234, -235, -232,
	133, 282, 106, 30, 100, -61, 200, 30, 186, 176,
	-57, 263, 100, -135, 230, 231, 329, -50, 31, 90,
	325, 326, -148, -190, -96, -186, 323, -188, -72, -45,
	-187, 325, -213, -195, -212, 215, 216, 214, 218, 217,
	-195, -99, 268, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, 158, 130, 245, 36, 131,
	-156, 271, -156, -156, -156, -156, 168, 176, 178, 276,
	105, 283, 91, 182, -278, 259, 32, -163, -45, 325,
	-178, 27, 250, 22, -220, -170, 230, 325, -151, -156,
	-152, -101, 326, 326, 329, -101, -169, 324, -165, -177,
	-176, 297, 326, -101, 294, 22, 91, 318, 7, -126,
	-254, 108, 121, 325, 326, 326, -156, -156, -120, -214,
	-101, 4, 303, 167, 83, 126, 166, 236, -120, -121,
	-156, -101, -122, -157, -158, 316, 317, 322, 325, 230,
	-123, -156, -101, -156, 43, 154, 272, -124, -156, 116,
	-101, -156, -156, -156, -101, -101, -101, 325, 7, 7,
	268, 268, 7, -148, 326, -179, -51, -72, -64, -64,
	176, -146, 128, -56, 176, -195, -64, 325, 325, 149,
	149, -64, -64, 128, -64, 128, -64, -64, -52, 219,
	-29, -29, -64, 219, -64, -72, 219, -38, 127, 182,
	-41, 300, -226, 254, 116, -72, -115, 225, -156, -115,
	-138, 186, -97, 292, -64, -115, -95, 329, 116, 310,
	-97, -54, -54, -54, -188, -195, 323, 323, 7, 271,
	271, 271, 271, 325, -156, -269, -269, -62, 280, 61,
	209, -224, 329, 326, 326, 329, -65, 133, -65, -29,
	-99, 5, -29, -72, 100, -58, 96, -277, 310, -64,
	-184, -20, -112, 121, -192, 329, 69, -119, 148, 171,
	117, 156, 227, 136, 7, 102, -153, 330, 325, -183,
	306, -45, -187, -186, 304, -156, -156, 271, -278, 259,
	-163, -156, 168, 178, 276, 105, 283, 91, 182, 116,
	325, -157, -157, -101, -160, 325, -101, 324, 333, 326,
	-156, 324, 324, 329, -175, -176, 95, -156, -88, 329,
	-87, -156, -101, -101, 326, 326, -259, 194, 325, 325,
	-156, 30, 329, 326, 116, 326, 326, -128, 201, 326,
	10, 11, 316, 317, 318, 319, 111, 320, 313, 314,
	315, 312, 308, 309, 310, 62, 164, 232, 13, 14,
	15, 146, 131, -157, -157, -157, -101, 325, 326, -161,
	-162, 116, 113, 30, -124, -124, -124, 326, 116, -101,
	329, 329, 329, 326, 326, 326, 7, 326, 329, 326,
	304, 304, 326, -112, 271, 271, 100, 176, 289, -236,
	-233, -156, -90, -185, -64, -247, 325, -244, -245, -70,
	325, 325, -49, 94, 242, -131, 100, -54, 100, -54,
	271, -130, 64, 271, 271, -41, 116, 260, 188, 254,
	-103, 177, -115, 63, 326, -148, -105, -96, -179, 326,
	324, 7, 7, 326, 167, 126, 166, -127, 166, -127,
	-127, 7, -64, -83, 132, -147, 325, -65, 325, 325,
	-86, 325, -64, -59, 153, -277, -223, -250, 326, -164,
	123, 44, -186, 148, 148, -186, -119, 148, -117, 193,
	-117, -117, -265, 325, -17, 325, -183, -220, 323, 331,
	-101, -182, -181, 30, -64, 191, 326, -156, -156, -157,
	-157, 116, 325, -156, -167, 26, 26, 326, -101, 326,
	329, -152, -156, 326, -165, 97, -156, 267, 326, 294,
	-88, -88, -88, 5, -260, -64, 325, 298, -87, 326,
	-213, -195, -156, -161, -156, -213, -195, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, 91, 176, 182, -157,
	329, -101, 326, -162, -161, -156, -156, -195, 326, 326,
	326, -101, -156, -156, -156, 326, 7, -164, -64, -64,
	-146, 100, -237, 64, -238, 56, 106, 68, 176, 178,
	282, 206, 53, 86, 213, 326, 326, 329, -71, -108,
	56, -71, -156, 325, -90, -91, 176, 86, 176, 86,
	79, 278, -64, -64, -72, -64, -64, -64, -72, -227,
	268, 325, -137, 325, 186, -29, -115, 310, 324, 324,
	326, 131, -90, 325, -91, -81, 30, -90, 186, -60,
	152, -277, -223, -57, -256, 299, -156, -101, -186, -186,
	-118, 288, 186, 148, -186, 324, 326, -266, 7, 324,
	-194, -182, 7, -155, -154, 114, 174, 326, -64, 325,
	-183, 26, 26, -156, -167, 326, -156, -156, 326, -156,
	324, -156, 5, -156, 326, 326, 326, -261, -64, -156,
	326, 326, 326, -162, 116, 91, 182, 325, -156, 326,
	326, 329, 326, 326, 326, -256, -146, -64, -99, -64,
	106, 128, 178, 149, 325, -157, -72, -145, -274, 67,
	257, -185, -50, -99, -50, 326, -101, 326, 326, 178,
	178, -156, -195, -54, -54, 271, 271, -159, -70, -64,
	-40, -39, 5, 92, -91, 64, -111, -45, 325, 197,
	326, -90, 326, 326, -29, 326, -72, -277, -223, -58,
	-257, -258, -64, -118, 325, -156, -186, -153, 326, 329,
	-183, 326, 324, 329, 332, 310, -183, 325, -91, -181,
	-156, -156, 326, 326, -88, -255, 199, 326, -157, 116,
	325, -167, 326, -156, -238, -65, 176, -156, -66, 325,
	-83, 325, -71, -88, 213, -53, 56, -64, -64, 325,
	329, 326, -42, 310, 284, 177, 326, -64, -64, -145,
	326, -83, -145, 325, -223, -59, 329, 30, -91, -183,
	7, -182, -17, -154, -220, 323, -182, -91, 326, 326,
	-88, 44, -157, -167, 326, 326, 100, 326, -241, 165,
	-64, -91, -50, 326, -72, -48, 288, -99, -101, -39,
	5, 242, -148, 325, -83, -145, -83, -90, -60, -258,
	-260, 326, -181, 324, 7, 326, -262, 208, 231, -101,
	326, 106, -239, -242, -240, 186, 117, 198, 246, 326,
	326, -86, -156, -88, -104, -91, -83, 326, -183, 324,
	326, -263, -264, 36, 279, 71, -156, -263, -64, -240,
	186, -242, 186, 284, 89, -241, 326, -148, 326, -145,
	-182, -264, 203, 112, 230, 203, 112, -243, 173, 224,
	47, 242, -243, -239, -55, 47, 224, -83, 26, 20,
	178, 86, -264,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	0, 0, 0, 0, 79, 80, 81, 82, 83, 84,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	392, -2, 0, 155, 0, 341, 0, 341, 341, 345,
	0, 0, 422, 307, 419, -2, 430, 0, 0, 0,
	428, 406, 0, 0, -2, 0, 0, 0, 0, 0,
	133, 0, 952, 881, 887, 888, 912, 913, 914, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 0, 0, 883, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 0,
	223, 926, 927, 928, 929, 930, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 119, 126, 127, 1004, 129, 0, 136, 137, 138,
	140, 141, 142, 143, 144, 145, 146, 0, 334, 1027,
	347, 150, 981, 1031, 940, 1103, 1048, 158, 168, 0,
	1109, -2, 172, 96, 201, 202, 203, 0, 205, 225,
	0, 0, 0, 0, 0, 213, 0, 0, 0, 220,
	0, 352, 340, 352, 337, 338, 339, 342, 0, 333,
	149, 0, 421, 0, 0, 0, 0, 0, 306, -2,
	402, 403, -2, 0, 425, 425, 425, 0, 0, 403,
	0, 411, 1008, 414, 894, 412, 0, 0, 427, 426,
	0, 407, 502, 0, 450, 0, 2, 0, 1087, 502,
	0, 1087, 886, 0, 0, 1087, 0, 0, 134, 135,
	891, 889, 890, 0, 0, 0, 0, 884, 860, 858,
	859, 0, 0, 0, 0, 508, 86, 1087, 54, 1087,
	879, 54, 1087, 94, 54, 1087, 0, 114, 116, 922,
	923, 924, 925, 1114, 0, 0, 0, 0, 124, 0,
	128, 130, 0, 0, 0, 346, 151, 1076, 153, 0,
	0, 157, 159, 160, 0, 0, 0, 0, 0, 0,
	171, 196, 197, 97, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 216, 217, 0, 0,
	0, 335, 348, 349, 336, 0, 344, 54, 506, 279,
	1087, 418, 279, 916, 418, 1087, -2, 0, 398, 437,
	438, 0, 0, 0, 423, 424, 0, 0, 0, 394,
	395, 0, 413, 0, 0, 453, 871, 875, 876, 605,
	0, 0, 0, 0, 0, 0, 697, 699, 1081, 1103,
	0, 701, 702, 0, 704, 706, 707, 0, 710, 711,
	851, 883, 897, 898, 899, 900, 0, 0, 903, 0,
	905, 906, 907, 751, 720, -2, -2, 895, 537, 538,
	539, 540, -2, 1116, 724, 726, 728, 729, 730, 731,
	0, 1065, 1082, 1083, 1099, 1100, 1108, 1112, 1113, 1087,
	1096, 1088, 1077, 1085, 1094, 957, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 921, 567, 568,
	573, 574, 576, 453, 451, 503, 504, 0, 0, 868,
	866, 867, 31, 330, 33, 0, 330, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	493, 63, 64, 199, 200, 882, 0, 856, 857, 493,
	65, 76, 0, 0, 877, 861, 512, 0, 369, 0,
	0, 509, 0, 0, 88, 0, 52, 53, 0, 90,
	0, 0, 92, 0, 420, 0, 0, 1087, 0, 420,
	0, 809, 520, 521, 522, 523, 524, 602, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 544, 545,
	546, 547, 548, 549, 550, 564, 0, 543, 543, 543,
	556, 557, 565, 566, 571, 572, 583, 584, 586, 588,
	582, 582, 582, 579, 580, 0, 807, 0, 139, 0,
	0, 154, 0, 0, 0, 0, 0, 163, 183, 184,
	185, 164, 166, 173, 175, 176, 177, 186, 187, 188,
	189, 296, 0, 298, 908, 0, 165, 167, 169, 170,
	190, 191, 192, 193, 194, 195, 0, 0, 98, 204,
	206, 0, 224, 207, 208, 209, 210, 211, 212, 215,
	218, 219, 0, 0, 0, 0, 343, 299, 0, 237,
	0, 0, 302, 417, 0, 0, 0, 1087, 915, 357,
	0, 401, 435, 436, 439, 442, 443, 440, 605, 408,
	409, 410, 431, 432, 317, 415, 0, 0, 512, 0,
	0, 0, 0, 0, 0, 786, 787, 788, 789, 790,
	791, 794, 795, 792, 793, 796, 797, 798, 0, 0,
	0, 799, 800, 801, 0, 0, 803, 0, 805, 0,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 874,
	802, 610, 611, 612, 634, 635, 0, 698, 862, 855,
	700, 0, -2, 807, 0, 703, 708, 709, 0, 0,
	850, -2, 0, 902, 0, 602, 753, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 570, 581, 578,
	577, 554, 0, 553, 551, 0, 555, 0, 0, 0,
	512, 0, 0, 870, 0, 0, 0, 0, 329, 35,
	1087, 0, 56, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 231,
	0, 0, 885, 0, 0, 0, 68, 0, 892, 75,
	0, 0, 0, 0, 381, 0, 381, 371, 0, 0,
	0, 381, 384, 385, 387, 388, 0, 0, 510, 87,
	880, 54, 95, 54, 54, 101, 115, 0, 117, 120,
	121, 122, 123, 118, 0, 513, 515, 525, 0, 589,
	590, 591, 592, 593, 594, 603, 125, 0, 0, 0,
	0, 156, 161, 162, 353, 0, 180, 0, 182, 0,
	297, 910, 909, 99, 226, 147, 221, 222, 350, 351,
	507, 0, 0, 236, 891, 238, 240, 241, 242, 243,
	916, 0, 916, 0, 0, 300, 0, 0, 0, 0,
	359, 365, 0, 441, 444, 445, 0, 434, 315, 316,
	420, 893, 447, 872, 493, 454, 0, 464, 502, 479,
	469, 0, 606, 516, 517, 558, 559, 560, 561, 562,
	607, 608, 0, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, -2, -2, -2, 626, 627, 628, -2,
	-2, -2, 632, 633, -2, 804, 806, 0, 865, 0,
	-2, 0, 642, -2, -2, -2, 646, 0, 648, 651,
	653, 655, 0, 0, 0, 0, 864, 665, 842, 0,
	0, 783, 784, 785, 873, 650, 0, 0, 863, 854,
	0, 0, -2, 705, 0, 0, 0, 813, 814, 849,
	845, 0, 712, 430, 0, 0, 0, 0, 0, 911,
	761, 0, 0, 0, 725, 727, 0, 0, 0, 0,
	817, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	807, 827, 0, 0, 668, 0, 0, 0, 0, 1103,
	0, 807, 835, 0, 0, 0, 0, 0, 807, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 447, 505, 869, 34, 319, 0, 0,
	0, 37, 1087, 45, 0, 251, 0, 0, 0, 0,
	0, 332, 46, 1087, 54, 1087, 54, 47, 32, 330,
	228, 229, 323, 0, 318, 321, 0, 75, 0, 0,
	62, 0, 66, 77, 0, 878, 85, 0, 511, 366,
	381, 0, 0, 373, 370, 368, 512, 0, 0, 0,
	0, 89, 91, 93, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 808, 131, 132, 152, 178, 179,
	181, 174, 0, 245, 278, 0, 0, 916, 0, 234,
	279, 301, 303, 0, 0, 361, 365, 0, 364, 418,
	433, 0, 449, 0, 452, 0, 0, 0, 0, 0,
	499, 499, 499, 497, 473, 420, 479, 0, 0, 491,
	0, -2, 469, 0, 0, -2, -2, 0, 0, 0,
	666, -2, 647, 649, 652, 654, 656, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 0, 852, 855, -2,
	808, 811, 812, 0, 0, 846, 0, 0, 0, 0,
	429, 430, 430, 430, 718, 0, 719, 0, 0, 0,
	0, 0, 0, 734, 0, 735, 736, 0, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 672, 673, 0, 0, 738, 833,
	834, 0, 0, 0, 0, 0, 0, 743, 0, 840,
	0, 0, 0, 747, 748, 749, 0, 541, 0, 563,
	585, 587, 575, 449, 0, 0, 0, 0, 55, 249,
	268, 0, 0, 308, 314, 314, 0, 721, 722, 0,
	0, 0, 39, 0, 0, 0, 0, 43, 0, 49,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 78,
	379, 380, 367, 378, 0, 381, 386, 383, 389, 0,
	518, 0, 0, 526, 595, 596, 597, 598, 599, 600,
	601, 0, 148, 232, 0, 239, 0, 0, 0, 237,
	0, 0, 0, 363, 365, 0, 356, 357, 416, 755,
	0, 0, 455, 0, 0, 0, 0, 0, 494, 498,
	495, 496, 0, 0, 0, 0, 491, 461, 0, 0,
	0, 468, 490, 0, 489, 478, -2, 609, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 843, 0, 778,
	0, 0, 854, -2, 815, 844, 848, 0, 713, 0,
	0, 0, 0, 904, 759, 760, 764, 0, 0, 723,
	0, 0, 816, 826, 828, 669, 670, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, -2, -2, -2,
	687, 688, 689, -2, -2, -2, 0, 0, 0, 829,
	0, 0, 781, 831, 832, 837, 838, 0, 740, 741,
	742, 839, 0, 0, 0, 569, 0, 755, 325, 327,
	36, 0, 250, 0, 253, 0, 0, 0, 0, 259,
	260, 0, 0, 0, 0, 270, 277, 0, 317, 896,
	0, 317, 0, 0, 0, 0, 0, 51, 0, 0,
	331, 0, 54, 54, 320, 0, 0, 324, 322, 67,
	0, 0, 0, 0, 0, 372, 382, 0, 519, 514,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	365, 0, 358, 359, 404, 0, 448, 446, 481, 0,
	483, 0, 0, 0, 485, 464, 474, 0, 476, 479,
	0, 466, 0, 0, 459, 0, 458, 479, 487, 0,
	0, 0, 0, -2, 0, 659, -2, -2, 777, 808,
	853, 847, 901, 430, 714, 716, 717, 766, 763, 0,
	750, 732, 733, 825, 0, 0, 0, 0, 808, 780,
	739, 0, 745, 746, 542, 405, 38, 0, 254, 255,
	916, 0, 258, 261, 0, 263, 918, 245, 0, 274,
	275, 309, 310, 313, 311, 314, 430, 272, 0, 40,
	41, 50, 58, 42, 48, 0, 0, 492, 0, 0,
	0, 72, 70, 0, 0, 0, 390, 391, 0, 0,
	277, 0, 267, 245, 235, 277, 0, 0, 360, 361,
	754, 756, 0, 482, 0, 501, 484, 479, 475, 0,
	491, 420, 462, 0, 463, 0, 491, 0, 0, 470,
	-2, -2, 660, 779, 0, 430, 0, 752, -2, 0,
	0, 0, 782, 0, 252, 256, 0, 0, 283, 0,
	271, 0, 317, 0, 0, 60, 0, 326, 328, 0,
	0, 74, 71, 0, 0, 375, 512, 377, 0, 245,
	277, 233, 245, 0, 362, 363, 0, 0, 0, 0,
	477, 471, 0, 460, 456, 0, 467, 0, 488, 715,
	769, 0, -2, 0, 695, 744, 0, 262, 288, 0,
	0, 0, 312, 713, 279, 44, 0, 57, 430, 73,
	69, 0, 376, 0, 265, 245, 304, 0, 355, 757,
	758, 500, 465, 479, 0, 486, 0, 0, 0, 765,
	696, 0, 264, 284, 285, 0, 280, 281, 282, 917,
	276, 283, 59, 0, 512, 0, 266, 277, 491, 457,
	762, 767, 770, -2, 1051, 949, 0, 768, 257, 286,
	0, 287, 0, 0, 0, 288, 0, 374, 248, 245,
	472, 0, 772, 773, 774, 775, 776, 289, 0, 292,
	293, 0, 290, 273, 244, 246, 247, 305, 0, 291,
	294, 295, 771,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 314, 3, 320, 315, 3,
	325, 326, 318, 316, 329, 317, 327, 319, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 333, 328,
	308, 310, 309, 3, 330, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 323, 3, 324, 313, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 331, 312, 332, 322,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 311, 57651, 321, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:784
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:790
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:796
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:914
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			return unimplemented(sqllex)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = nil
		}
	case 52:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropCascade
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropRestrict
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = DropDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return unimplemented(sqllex)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:991
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:999
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 68:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.str = ""
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1064
		{
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{ /* SKIP DOC */
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{ /* SKIP DOC */
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			return unimplemented(sqllex)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			return unimplemented(sqllex)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = Low
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = Normal
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = High
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			return unimplemented(sqllex)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			return unimplemented(sqllex)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1583
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1671
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1675
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1718
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1722
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = DropDefault
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2015
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2026
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2029
		{
			return unimplemented(sqllex)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return unimplemented(sqllex)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			return unimplemented(sqllex)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = true
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = false
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			return unimplemented(sqllex)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2147
		{
			return unimplemented(sqllex)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return unimplemented(sqllex)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2151
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = Ascending
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = Descending
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2205
		{
			return unimplemented(sqllex)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2206
		{
			return unimplemented(sqllex)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = true
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = false
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2220
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2263
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.str = ""
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.str = ""
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.str = ""
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.str = ""
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.str = ""
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.str = ""
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2385
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2386
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2450
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			return unimplemented(sqllex)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 382:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2485
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2712
		{
			return unimplemented(sqllex)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2713
		{
			return unimplemented(sqllex)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2714
		{
			return unimplemented(sqllex)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2717
		{
			return unimplemented(sqllex)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2718
		{
			return unimplemented(sqllex)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2721
		{
			return unimplemented(sqllex)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			return unimplemented(sqllex)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2733
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = true
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = false
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = false
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = true
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2795
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2815
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2856
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &From{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2951
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2969
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2996
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3013
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = nil
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = true
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = false
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.str = astFullJoin
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.str = astLeftJoin
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.str = astRightJoin
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.str = astInnerJoin
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3192
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3278
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3291
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3306
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			return unimplemented(sqllex)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3374
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3383
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = nil
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3528
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3560
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3600
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = year
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = month
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = day
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = hour
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = minute
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = month
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = hour
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = minute
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = minute
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = nil
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = second
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3695
		{
			return unimplemented(sqllex)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3730
		{
			return unimplemented(sqllex)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			return unimplemented(sqllex)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3964
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4137
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4190
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4191
		{
			return unimplemented(sqllex)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4214
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4230
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4235
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4253
		{
			return unimplemented(sqllex)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4254
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			return unimplemented(sqllex)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4284
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4328
		{
			return unimplemented(sqllex)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4329
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = Window(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4364
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.str = ""
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4426
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4427
		{
			return unimplemented(sqllex)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4428
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			return unimplemented(sqllex)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4432
		{
			return unimplemented(sqllex)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4438
		{
			return unimplemented(sqllex)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4439
		{
			return unimplemented(sqllex)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4440
		{
			return unimplemented(sqllex)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4441
		{
			return unimplemented(sqllex)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4442
		{
			return unimplemented(sqllex)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = Any
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = Some
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = All
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = Plus
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = Minus
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = Mult
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = Div
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = FloorDiv
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = Mod
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = Bitand
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = Bitor
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = Bitxor
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = Bitxor
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = LT
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = GT
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = EQ
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = LE
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = GE
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = NE
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = Like
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = NotLike
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = ILike
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = NotILike
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4807
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4969
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5005
		{
			return unimplemented(sqllex)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = DNull
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.str = ""
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
