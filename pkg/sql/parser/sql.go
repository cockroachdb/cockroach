// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:464
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const KEY = 57515
const KEYS = 57516
const KV = 57517
const LATERAL = 57518
const LC_CTYPE = 57519
const LC_COLLATE = 57520
const LEADING = 57521
const LEAST = 57522
const LEFT = 57523
const LEVEL = 57524
const LIKE = 57525
const LIMIT = 57526
const LOCAL = 57527
const LOCALTIME = 57528
const LOCALTIMESTAMP = 57529
const LOW = 57530
const LSHIFT = 57531
const MATCH = 57532
const MINUTE = 57533
const MONTH = 57534
const NAN = 57535
const NAME = 57536
const NAMES = 57537
const NATURAL = 57538
const NEXT = 57539
const NO = 57540
const NO_INDEX_JOIN = 57541
const NORMAL = 57542
const NOT = 57543
const NOTHING = 57544
const NULL = 57545
const NULLIF = 57546
const NULLS = 57547
const NUMERIC = 57548
const OF = 57549
const OFF = 57550
const OFFSET = 57551
const OID = 57552
const ON = 57553
const ONLY = 57554
const OPTIONS = 57555
const OR = 57556
const ORDER = 57557
const ORDINALITY = 57558
const OUT = 57559
const OUTER = 57560
const OVER = 57561
const OVERLAPS = 57562
const OVERLAY = 57563
const PARENT = 57564
const PARTIAL = 57565
const PARTITION = 57566
const PASSWORD = 57567
const PAUSE = 57568
const PLACING = 57569
const PLANS = 57570
const POSITION = 57571
const PRECEDING = 57572
const PRECISION = 57573
const PREPARE = 57574
const PRIMARY = 57575
const PRIORITY = 57576
const QUERIES = 57577
const QUERY = 57578
const RANGE = 57579
const READ = 57580
const REAL = 57581
const RECURSIVE = 57582
const REF = 57583
const REFERENCES = 57584
const REGCLASS = 57585
const REGPROC = 57586
const REGPROCEDURE = 57587
const REGNAMESPACE = 57588
const REGTYPE = 57589
const REMOVE_PATH = 57590
const RENAME = 57591
const REPEATABLE = 57592
const RELEASE = 57593
const RESET = 57594
const RESTORE = 57595
const RESTRICT = 57596
const RESUME = 57597
const RETURNING = 57598
const REVOKE = 57599
const RIGHT = 57600
const ROLLBACK = 57601
const ROLLUP = 57602
const ROW = 57603
const ROWS = 57604
const RSHIFT = 57605
const SAVEPOINT = 57606
const SCATTER = 57607
const SEARCH = 57608
const SECOND = 57609
const SELECT = 57610
const SEQUENCES = 57611
const SERIAL = 57612
const SERIALIZABLE = 57613
const SESSION = 57614
const SESSIONS = 57615
const SESSION_USER = 57616
const SET = 57617
const SETTING = 57618
const SETTINGS = 57619
const SHOW = 57620
const SIMILAR = 57621
const SIMPLE = 57622
const SMALLINT = 57623
const SMALLSERIAL = 57624
const SNAPSHOT = 57625
const SOME = 57626
const SPLIT = 57627
const SQL = 57628
const START = 57629
const STATUS = 57630
const STDIN = 57631
const STRICT = 57632
const STRING = 57633
const STORE = 57634
const STORING = 57635
const SUBSTRING = 57636
const SYMMETRIC = 57637
const SYSTEM = 57638
const TABLE = 57639
const TABLES = 57640
const TEMP = 57641
const TEMPLATE = 57642
const TEMPORARY = 57643
const TESTING_RANGES = 57644
const TESTING_RELOCATE = 57645
const TEXT = 57646
const THEN = 57647
const TIME = 57648
const TIMESTAMP = 57649
const TIMESTAMPTZ = 57650
const TO = 57651
const TRAILING = 57652
const TRACE = 57653
const TRANSACTION = 57654
const TREAT = 57655
const TRIM = 57656
const TRUE = 57657
const TRUNCATE = 57658
const TYPE = 57659
const UNBOUNDED = 57660
const UNCOMMITTED = 57661
const UNION = 57662
const UNIQUE = 57663
const UNKNOWN = 57664
const UPDATE = 57665
const UPSERT = 57666
const USE = 57667
const USER = 57668
const USERS = 57669
const USING = 57670
const UUID = 57671
const VALID = 57672
const VALIDATE = 57673
const VALUE = 57674
const VALUES = 57675
const VARCHAR = 57676
const VARIADIC = 57677
const VIEW = 57678
const VARYING = 57679
const WHEN = 57680
const WHERE = 57681
const WINDOW = 57682
const WITH = 57683
const WITHIN = 57684
const WITHOUT = 57685
const WRITE = 57686
const YEAR = 57687
const ZONE = 57688
const NOT_LA = 57689
const WITH_LA = 57690
const AS_LA = 57691
const CONTAINED_BY = 57692
const HAS_SOME_KEY = 57693
const HAS_ALL_KEYS = 57694
const POSTFIXOP = 57695
const UMINUS = 57696
const HELPTOKEN = 57697

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6638

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	375, 53,
	-2, 687,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	153, 539,
	-2, 0,
	-1, 62,
	96, 687,
	157, 687,
	323, 687,
	324, 687,
	-2, 0,
	-1, 72,
	107, 662,
	117, 662,
	165, 662,
	184, 662,
	209, 662,
	215, 662,
	320, 662,
	-2, 651,
	-1, 105,
	4, 689,
	20, 689,
	21, 689,
	23, 689,
	28, 689,
	33, 689,
	34, 689,
	35, 689,
	36, 689,
	37, 689,
	38, 689,
	39, 689,
	40, 689,
	41, 689,
	42, 689,
	44, 689,
	45, 689,
	46, 689,
	47, 689,
	48, 689,
	51, 689,
	52, 689,
	53, 689,
	55, 689,
	56, 689,
	60, 689,
	61, 689,
	62, 689,
	64, 689,
	65, 689,
	66, 689,
	67, 689,
	69, 689,
	71, 689,
	72, 689,
	75, 689,
	76, 689,
	77, 689,
	85, 689,
	86, 689,
	87, 689,
	88, 689,
	89, 689,
	90, 689,
	91, 689,
	92, 689,
	94, 689,
	96, 689,
	98, 689,
	101, 689,
	102, 689,
	104, 689,
	108, 689,
	109, 689,
	110, 689,
	111, 689,
	112, 689,
	113, 689,
	114, 689,
	122, 689,
	123, 689,
	124, 689,
	125, 689,
	126, 689,
	128, 689,
	130, 689,
	135, 689,
	136, 689,
	138, 689,
	141, 689,
	142, 689,
	145, 689,
	146, 689,
	147, 689,
	148, 689,
	151, 689,
	152, 689,
	154, 689,
	157, 689,
	158, 689,
	159, 689,
	160, 689,
	161, 689,
	162, 689,
	163, 689,
	164, 689,
	166, 689,
	169, 689,
	170, 689,
	171, 689,
	173, 689,
	174, 689,
	175, 689,
	177, 689,
	178, 689,
	180, 689,
	182, 689,
	185, 689,
	188, 689,
	190, 689,
	191, 689,
	192, 689,
	193, 689,
	194, 689,
	195, 689,
	197, 689,
	198, 689,
	199, 689,
	200, 689,
	204, 689,
	205, 689,
	206, 689,
	207, 689,
	208, 689,
	210, 689,
	212, 689,
	213, 689,
	216, 689,
	217, 689,
	219, 689,
	221, 689,
	222, 689,
	223, 689,
	224, 689,
	225, 689,
	226, 689,
	228, 689,
	229, 689,
	230, 689,
	231, 689,
	232, 689,
	234, 689,
	235, 689,
	236, 689,
	237, 689,
	238, 689,
	239, 689,
	240, 689,
	241, 689,
	243, 689,
	244, 689,
	245, 689,
	246, 689,
	247, 689,
	249, 689,
	250, 689,
	251, 689,
	252, 689,
	253, 689,
	254, 689,
	255, 689,
	257, 689,
	259, 689,
	260, 689,
	261, 689,
	262, 689,
	264, 689,
	265, 689,
	266, 689,
	267, 689,
	269, 689,
	270, 689,
	271, 689,
	272, 689,
	273, 689,
	275, 689,
	276, 689,
	277, 689,
	278, 689,
	280, 689,
	281, 689,
	282, 689,
	283, 689,
	285, 689,
	286, 689,
	287, 689,
	288, 689,
	289, 689,
	290, 689,
	291, 689,
	292, 689,
	293, 689,
	294, 689,
	296, 689,
	298, 689,
	299, 689,
	300, 689,
	301, 689,
	302, 689,
	303, 689,
	304, 689,
	306, 689,
	307, 689,
	308, 689,
	311, 689,
	312, 689,
	313, 689,
	314, 689,
	316, 689,
	317, 689,
	318, 689,
	319, 689,
	322, 689,
	323, 689,
	324, 689,
	325, 689,
	327, 689,
	329, 689,
	330, 689,
	331, 689,
	332, 689,
	333, 689,
	334, 689,
	337, 689,
	342, 689,
	343, 689,
	344, 689,
	345, 689,
	346, 689,
	-2, 0,
	-1, 121,
	107, 661,
	117, 661,
	165, 661,
	184, 661,
	209, 661,
	215, 661,
	320, 661,
	-2, 654,
	-1, 127,
	1, 588,
	169, 588,
	234, 588,
	238, 588,
	374, 588,
	375, 588,
	-2, 0,
	-1, 129,
	1, 588,
	374, 588,
	375, 588,
	-2, 0,
	-1, 130,
	1, 588,
	374, 588,
	375, 588,
	-2, 0,
	-1, 131,
	1, 592,
	374, 592,
	375, 592,
	-2, 0,
	-1, 138,
	4, 695,
	5, 695,
	6, 695,
	7, 695,
	8, 695,
	9, 695,
	20, 695,
	21, 695,
	23, 695,
	28, 695,
	29, 695,
	33, 695,
	34, 695,
	35, 695,
	36, 695,
	37, 695,
	38, 695,
	39, 695,
	40, 695,
	41, 695,
	42, 695,
	44, 695,
	45, 695,
	46, 695,
	47, 695,
	48, 695,
	49, 695,
	50, 695,
	51, 695,
	52, 695,
	53, 695,
	55, 695,
	56, 695,
	58, 695,
	60, 695,
	61, 695,
	62, 695,
	64, 695,
	65, 695,
	66, 695,
	67, 695,
	69, 695,
	71, 695,
	72, 695,
	74, 695,
	75, 695,
	76, 695,
	77, 695,
	79, 695,
	80, 695,
	81, 695,
	83, 695,
	84, 695,
	85, 695,
	86, 695,
	87, 695,
	88, 695,
	89, 695,
	90, 695,
	91, 695,
	92, 695,
	94, 695,
	96, 695,
	98, 695,
	101, 695,
	102, 695,
	104, 695,
	108, 695,
	109, 695,
	110, 695,
	111, 695,
	112, 695,
	113, 695,
	114, 695,
	115, 695,
	116, 695,
	122, 695,
	123, 695,
	124, 695,
	125, 695,
	126, 695,
	128, 695,
	130, 695,
	133, 695,
	135, 695,
	136, 695,
	138, 695,
	141, 695,
	142, 695,
	145, 695,
	146, 695,
	147, 695,
	148, 695,
	149, 695,
	151, 695,
	152, 695,
	154, 695,
	156, 695,
	157, 695,
	158, 695,
	159, 695,
	160, 695,
	161, 695,
	162, 695,
	163, 695,
	164, 695,
	166, 695,
	168, 695,
	169, 695,
	170, 695,
	171, 695,
	172, 695,
	173, 695,
	174, 695,
	175, 695,
	177, 695,
	178, 695,
	180, 695,
	181, 695,
	182, 695,
	183, 695,
	185, 695,
	188, 695,
	190, 695,
	191, 695,
	192, 695,
	193, 695,
	194, 695,
	195, 695,
	196, 695,
	197, 695,
	198, 695,
	199, 695,
	200, 695,
	201, 695,
	203, 695,
	204, 695,
	205, 695,
	206, 695,
	207, 695,
	208, 695,
	210, 695,
	213, 695,
	216, 695,
	217, 695,
	218, 695,
	219, 695,
	220, 695,
	221, 695,
	222, 695,
	223, 695,
	224, 695,
	225, 695,
	226, 695,
	228, 695,
	229, 695,
	230, 695,
	231, 695,
	232, 695,
	234, 695,
	235, 695,
	236, 695,
	237, 695,
	238, 695,
	239, 695,
	240, 695,
	241, 695,
	243, 695,
	244, 695,
	245, 695,
	246, 695,
	247, 695,
	249, 695,
	250, 695,
	251, 695,
	252, 695,
	253, 695,
	254, 695,
	255, 695,
	257, 695,
	258, 695,
	259, 695,
	260, 695,
	261, 695,
	262, 695,
	264, 695,
	265, 695,
	266, 695,
	267, 695,
	269, 695,
	270, 695,
	271, 695,
	272, 695,
	273, 695,
	274, 695,
	275, 695,
	276, 695,
	277, 695,
	278, 695,
	279, 695,
	280, 695,
	281, 695,
	282, 695,
	283, 695,
	285, 695,
	286, 695,
	287, 695,
	288, 695,
	289, 695,
	290, 695,
	291, 695,
	292, 695,
	293, 695,
	294, 695,
	296, 695,
	298, 695,
	299, 695,
	300, 695,
	301, 695,
	302, 695,
	303, 695,
	304, 695,
	306, 695,
	307, 695,
	308, 695,
	311, 695,
	312, 695,
	313, 695,
	314, 695,
	315, 695,
	316, 695,
	317, 695,
	318, 695,
	319, 695,
	322, 695,
	323, 695,
	324, 695,
	325, 695,
	326, 695,
	327, 695,
	329, 695,
	330, 695,
	331, 695,
	332, 695,
	333, 695,
	334, 695,
	337, 695,
	342, 695,
	343, 695,
	344, 695,
	345, 695,
	346, 695,
	347, 695,
	357, 695,
	362, 695,
	363, 695,
	364, 695,
	371, 695,
	377, 695,
	-2, 0,
	-1, 141,
	1, 53,
	375, 53,
	-2, 687,
	-1, 506,
	132, 1300,
	309, 1300,
	352, 1300,
	373, 1300,
	-2, 0,
	-1, 507,
	132, 1249,
	309, 1249,
	352, 1249,
	373, 1249,
	-2, 0,
	-1, 509,
	132, 1358,
	309, 1358,
	352, 1358,
	373, 1358,
	-2, 0,
	-1, 511,
	132, 1380,
	309, 1380,
	352, 1380,
	373, 1380,
	-2, 0,
	-1, 518,
	132, 1305,
	309, 1305,
	352, 1305,
	373, 1305,
	-2, 324,
	-1, 544,
	1, 402,
	370, 402,
	372, 402,
	374, 402,
	375, 402,
	-2, 0,
	-1, 545,
	1, 454,
	129, 454,
	370, 454,
	372, 454,
	374, 454,
	375, 454,
	-2, 0,
	-1, 551,
	1, 416,
	370, 416,
	372, 416,
	374, 416,
	375, 416,
	-2, 0,
	-1, 553,
	1, 420,
	370, 420,
	372, 420,
	374, 420,
	375, 420,
	-2, 0,
	-1, 556,
	1, 428,
	370, 428,
	372, 428,
	374, 428,
	375, 428,
	-2, 0,
	-1, 557,
	1, 433,
	370, 433,
	372, 433,
	374, 433,
	375, 433,
	-2, 0,
	-1, 560,
	1, 443,
	370, 443,
	372, 443,
	374, 443,
	375, 443,
	-2, 0,
	-1, 574,
	117, 697,
	184, 697,
	209, 697,
	-2, 657,
	-1, 577,
	117, 696,
	184, 696,
	209, 696,
	-2, 655,
	-1, 634,
	371, 1227,
	-2, 1220,
	-1, 635,
	371, 1228,
	-2, 1221,
	-1, 641,
	5, 874,
	371, 874,
	-2, 1432,
	-1, 666,
	5, 833,
	-2, 1401,
	-1, 667,
	5, 868,
	371, 868,
	-2, 1403,
	-1, 668,
	5, 843,
	-2, 1404,
	-1, 669,
	5, 842,
	-2, 1405,
	-1, 670,
	5, 868,
	371, 868,
	-2, 1408,
	-1, 671,
	5, 868,
	371, 868,
	-2, 1409,
	-1, 672,
	5, 869,
	-2, 1412,
	-1, 673,
	5, 825,
	-2, 1413,
	-1, 674,
	5, 825,
	-2, 1414,
	-1, 675,
	5, 850,
	-2, 1418,
	-1, 676,
	5, 835,
	-2, 1419,
	-1, 677,
	5, 836,
	-2, 1420,
	-1, 678,
	5, 826,
	-2, 1426,
	-1, 679,
	5, 827,
	-2, 1427,
	-1, 680,
	5, 828,
	-2, 1428,
	-1, 681,
	5, 829,
	-2, 1429,
	-1, 682,
	5, 830,
	-2, 1430,
	-1, 683,
	5, 831,
	-2, 1431,
	-1, 684,
	5, 825,
	-2, 1436,
	-1, 685,
	5, 834,
	-2, 1441,
	-1, 686,
	5, 832,
	-2, 1444,
	-1, 687,
	5, 866,
	371, 866,
	-2, 1446,
	-1, 688,
	5, 870,
	-2, 1449,
	-1, 689,
	5, 872,
	-2, 1450,
	-1, 690,
	5, 865,
	371, 865,
	-2, 1455,
	-1, 875,
	225, 685,
	-2, 532,
	-1, 880,
	211, 1224,
	-2, 0,
	-1, 915,
	1, 215,
	370, 215,
	372, 215,
	374, 215,
	375, 215,
	-2, 660,
	-1, 922,
	4, 1454,
	10, 1454,
	11, 1454,
	13, 1454,
	14, 1454,
	15, 1454,
	16, 1454,
	17, 1454,
	18, 1454,
	20, 1454,
	21, 1454,
	23, 1454,
	26, 1454,
	28, 1454,
	30, 1454,
	33, 1454,
	34, 1454,
	35, 1454,
	36, 1454,
	37, 1454,
	38, 1454,
	39, 1454,
	40, 1454,
	41, 1454,
	42, 1454,
	44, 1454,
	45, 1454,
	46, 1454,
	47, 1454,
	48, 1454,
	51, 1454,
	52, 1454,
	53, 1454,
	55, 1454,
	56, 1454,
	57, 1454,
	60, 1454,
	61, 1454,
	62, 1454,
	63, 1454,
	64, 1454,
	65, 1454,
	66, 1454,
	67, 1454,
	69, 1454,
	70, 1454,
	71, 1454,
	72, 1454,
	74, 1454,
	75, 1454,
	76, 1454,
	77, 1454,
	85, 1454,
	86, 1454,
	87, 1454,
	88, 1454,
	89, 1454,
	90, 1454,
	91, 1454,
	92, 1454,
	94, 1454,
	96, 1454,
	98, 1454,
	101, 1454,
	102, 1454,
	104, 1454,
	108, 1454,
	109, 1454,
	110, 1454,
	111, 1454,
	112, 1454,
	113, 1454,
	114, 1454,
	118, 1454,
	119, 1454,
	120, 1454,
	121, 1454,
	122, 1454,
	123, 1454,
	124, 1454,
	125, 1454,
	126, 1454,
	127, 1454,
	128, 1454,
	130, 1454,
	133, 1454,
	135, 1454,
	136, 1454,
	138, 1454,
	141, 1454,
	142, 1454,
	145, 1454,
	146, 1454,
	147, 1454,
	148, 1454,
	149, 1454,
	150, 1454,
	151, 1454,
	152, 1454,
	154, 1454,
	156, 1454,
	157, 1454,
	158, 1454,
	159, 1454,
	160, 1454,
	161, 1454,
	162, 1454,
	163, 1454,
	164, 1454,
	166, 1454,
	168, 1454,
	169, 1454,
	170, 1454,
	171, 1454,
	172, 1454,
	173, 1454,
	174, 1454,
	175, 1454,
	177, 1454,
	178, 1454,
	180, 1454,
	181, 1454,
	182, 1454,
	183, 1454,
	185, 1454,
	188, 1454,
	189, 1454,
	190, 1454,
	191, 1454,
	192, 1454,
	193, 1454,
	194, 1454,
	195, 1454,
	196, 1454,
	197, 1454,
	198, 1454,
	199, 1454,
	200, 1454,
	204, 1454,
	205, 1454,
	206, 1454,
	207, 1454,
	208, 1454,
	210, 1454,
	213, 1454,
	214, 1454,
	216, 1454,
	217, 1454,
	219, 1454,
	221, 1454,
	222, 1454,
	223, 1454,
	224, 1454,
	225, 1454,
	226, 1454,
	228, 1454,
	229, 1454,
	230, 1454,
	231, 1454,
	232, 1454,
	234, 1454,
	235, 1454,
	236, 1454,
	237, 1454,
	238, 1454,
	239, 1454,
	240, 1454,
	241, 1454,
	243, 1454,
	244, 1454,
	245, 1454,
	246, 1454,
	247, 1454,
	248, 1454,
	249, 1454,
	250, 1454,
	251, 1454,
	252, 1454,
	253, 1454,
	254, 1454,
	255, 1454,
	257, 1454,
	258, 1454,
	259, 1454,
	260, 1454,
	261, 1454,
	262, 1454,
	263, 1454,
	264, 1454,
	265, 1454,
	266, 1454,
	267, 1454,
	269, 1454,
	270, 1454,
	271, 1454,
	272, 1454,
	273, 1454,
	275, 1454,
	276, 1454,
	277, 1454,
	278, 1454,
	279, 1454,
	280, 1454,
	281, 1454,
	282, 1454,
	283, 1454,
	285, 1454,
	286, 1454,
	287, 1454,
	288, 1454,
	289, 1454,
	290, 1454,
	291, 1454,
	292, 1454,
	293, 1454,
	294, 1454,
	296, 1454,
	298, 1454,
	299, 1454,
	300, 1454,
	301, 1454,
	302, 1454,
	303, 1454,
	304, 1454,
	306, 1454,
	307, 1454,
	308, 1454,
	311, 1454,
	312, 1454,
	313, 1454,
	314, 1454,
	316, 1454,
	317, 1454,
	318, 1454,
	319, 1454,
	322, 1454,
	323, 1454,
	324, 1454,
	325, 1454,
	327, 1454,
	329, 1454,
	330, 1454,
	331, 1454,
	332, 1454,
	333, 1454,
	334, 1454,
	337, 1454,
	342, 1454,
	343, 1454,
	344, 1454,
	345, 1454,
	346, 1454,
	347, 1454,
	348, 1454,
	350, 1454,
	351, 1454,
	352, 1454,
	353, 1454,
	354, 1454,
	355, 1454,
	356, 1454,
	357, 1454,
	359, 1454,
	360, 1454,
	361, 1454,
	362, 1454,
	363, 1454,
	364, 1454,
	365, 1454,
	366, 1454,
	367, 1454,
	369, 1454,
	372, 1454,
	373, 1454,
	376, 1454,
	377, 1454,
	-2, 0,
	-1, 935,
	132, 1358,
	309, 1358,
	352, 1358,
	373, 1358,
	-2, 0,
	-1, 952,
	132, 1380,
	309, 1380,
	352, 1380,
	373, 1380,
	-2, 0,
	-1, 953,
	169, 600,
	234, 600,
	238, 600,
	-2, 312,
	-1, 1022,
	117, 696,
	184, 696,
	209, 696,
	-2, 658,
	-1, 1101,
	107, 662,
	117, 662,
	165, 662,
	184, 662,
	209, 662,
	215, 662,
	320, 662,
	-2, 1003,
	-1, 1111,
	371, 1204,
	-2, 1192,
	-1, 1129,
	372, 1116,
	-2, 0,
	-1, 1155,
	169, 600,
	234, 600,
	238, 600,
	-2, 595,
	-1, 1183,
	372, 1116,
	-2, 0,
	-1, 1187,
	107, 662,
	117, 662,
	165, 662,
	184, 662,
	209, 662,
	215, 662,
	320, 662,
	-2, 758,
	-1, 1328,
	169, 600,
	234, 600,
	238, 600,
	-2, 314,
	-1, 1426,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 909,
	-1, 1427,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 910,
	-1, 1428,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 911,
	-1, 1429,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 912,
	-1, 1430,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 913,
	-1, 1431,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 914,
	-1, 1432,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 915,
	-1, 1433,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 916,
	-1, 1442,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 925,
	-1, 1443,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 926,
	-1, 1444,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	354, 0,
	355, 0,
	356, 0,
	-2, 927,
	-1, 1447,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 932,
	-1, 1453,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 934,
	-1, 1455,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 938,
	-1, 1456,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 939,
	-1, 1457,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 940,
	-1, 1458,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 941,
	-1, 1527,
	132, 1127,
	371, 1227,
	-2, 1220,
	-1, 1528,
	132, 1128,
	-2, 1397,
	-1, 1529,
	132, 1129,
	-2, 1304,
	-1, 1530,
	132, 1130,
	-2, 1267,
	-1, 1531,
	132, 1131,
	-2, 1284,
	-1, 1532,
	132, 1132,
	-2, 1303,
	-1, 1533,
	132, 1133,
	-2, 1355,
	-1, 1612,
	1, 759,
	74, 759,
	107, 759,
	117, 759,
	133, 759,
	137, 759,
	139, 759,
	156, 759,
	165, 759,
	172, 759,
	181, 759,
	184, 759,
	196, 759,
	209, 759,
	211, 759,
	215, 759,
	256, 759,
	258, 759,
	320, 759,
	328, 759,
	339, 759,
	340, 759,
	349, 759,
	370, 759,
	372, 759,
	374, 759,
	375, 759,
	376, 759,
	-2, 758,
	-1, 1756,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 933,
	-1, 1757,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 935,
	-1, 1762,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 936,
	-1, 1780,
	220, 1087,
	-2, 1089,
	-1, 1955,
	225, 685,
	-2, 532,
	-1, 2011,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 937,
	-1, 2016,
	168, 0,
	-2, 953,
	-1, 2025,
	220, 1088,
	-2, 1090,
	-1, 2067,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 980,
	-1, 2068,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 981,
	-1, 2069,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 982,
	-1, 2073,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 986,
	-1, 2074,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 987,
	-1, 2075,
	13, 0,
	14, 0,
	15, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 988,
	-1, 2208,
	168, 0,
	-2, 954,
	-1, 2211,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 957,
	-1, 2212,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 959,
	-1, 2332,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 958,
	-1, 2333,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 960,
	-1, 2340,
	168, 0,
	-2, 989,
	-1, 2416,
	168, 0,
	-2, 990,
	-1, 2493,
	36, 0,
	149, 0,
	183, 0,
	279, 0,
	347, 0,
	357, 0,
	-2, 1400,
}

const sqlPrivate = 57344

const sqlLast = 42694

var sqlAct = [...]int{

	635, 2492, 2501, 2366, 2538, 2467, 2163, 2502, 2044, 2503,
	1687, 2421, 2174, 1658, 1993, 2491, 1750, 2313, 1227, 71,
	594, 973, 2265, 2279, 1270, 1323, 2198, 1607, 2130, 2196,
	869, 1959, 1181, 2346, 2129, 1322, 1676, 1688, 739, 1679,
	1662, 180, 1235, 2190, 1657, 180, 1185, 1896, 2245, 1846,
	1875, 1961, 578, 180, 1661, 1967, 633, 1164, 2100, 1230,
	1229, 1625, 180, 1791, 625, 1883, 1507, 180, 180, 1651,
	1190, 180, 1616, 632, 180, 449, 1107, 1405, 1845, 1608,
	1400, 1734, 180, 1482, 1223, 464, 25, 1353, 956, 586,
	120, 1483, 611, 1746, 1025, 1193, 1491, 1195, 1165, 605,
	1470, 1349, 1467, 955, 905, 745, 446, 1139, 1659, 1501,
	1271, 766, 1665, 517, 1143, 975, 902, 1681, 895, 916,
	1594, 748, 1581, 727, 1172, 1523, 1096, 497, 1248, 604,
	121, 1352, 1024, 180, 180, 1556, 1026, 122, 627, 171,
	1155, 180, 1242, 583, 475, 510, 176, 892, 725, 1154,
	538, 2280, 120, 1030, 2114, 1779, 2534, 2115, 1250, 1250,
	1218, 1250, 2516, 582, 582, 1680, 2278, 180, 180, 180,
	180, 768, 1182, 2513, 2512, 180, 180, 1702, 1702, 2509,
	2489, 2488, 2009, 1218, 1717, 1717, 577, 2462, 2457, 857,
	1977, 1710, 2327, 1041, 1042, 1583, 1652, 1484, 1214, 1081,
	1082, 1083, 1976, 1702, 2453, 2445, 2418, 489, 1218, 2278,
	1710, 742, 2463, 592, 2396, 610, 1044, 2393, 2278, 1085,
	2391, 1218, 2377, 2103, 2278, 2376, 1218, 25, 2354, 2278,
	2351, 120, 1218, 2334, 1218, 2301, 1717, 1710, 2299, 1702,
	1043, 2277, 1702, 2258, 2210, 2278, 1063, 1218, 1710, 2189,
	2184, 575, 2110, 1656, 1656, 2020, 2111, 598, 574, 1702,
	403, 1987, 1947, 1872, 1863, 1948, 1218, 1218, 1864, 1652,
	1783, 2327, 753, 757, 763, 587, 1784, 2103, 1582, 1861,
	1816, 1817, 729, 1702, 1860, 1859, 1721, 2004, 1702, 1702,
	1702, 1041, 1042, 1709, 1701, 181, 1717, 1710, 1702, 1614,
	1504, 1066, 1067, 1068, 1069, 1655, 731, 1588, 732, 1656,
	1049, 1587, 1041, 1042, 1044, 1263, 138, 40, 2080, 1264,
	2022, 1218, 1948, 1749, 1702, 1790, 1732, 1331, 1159, 1486,
	43, 855, 1078, 1086, 937, 1044, 141, 2281, 1043, 934,
	933, 932, 138, 931, 930, 140, 1816, 1817, 929, 1350,
	928, 927, 1505, 926, 925, 924, 746, 923, 733, 1043,
	730, 570, 569, 568, 1251, 1251, 1076, 1251, 536, 535,
	534, 140, 1064, 533, 532, 531, 530, 529, 528, 527,
	526, 139, 755, 759, 525, 765, 524, 523, 522, 132,
	521, 520, 505, 504, 126, 628, 133, 1822, 503, 1831,
	502, 1506, 1503, 1041, 1042, 501, 437, 139, 1049, 436,
	435, 180, 434, 180, 180, 433, 180, 418, 417, 123,
	409, 180, 1520, 408, 407, 406, 1044, 180, 64, 1049,
	399, 1070, 2508, 398, 1976, 164, 163, 1891, 162, 1582,
	180, 180, 180, 180, 180, 123, 1065, 161, 861, 919,
	1043, 160, 159, 158, 157, 156, 1063, 909, 155, 1832,
	154, 514, 1079, 1822, 153, 152, 769, 151, 583, 150,
	149, 180, 585, 148, 147, 1041, 1042, 1508, 146, 145,
	144, 143, 142, 1186, 180, 1356, 1256, 1249, 968, 1384,
	2490, 1064, 1041, 1042, 1518, 2477, 1516, 1514, 1044, 2472,
	180, 2413, 2394, 1816, 1817, 2244, 2240, 1037, 2236, 65,
	180, 1066, 1067, 1068, 1069, 1044, 2320, 2235, 2228, 2227,
	1049, 2226, 1043, 2222, 873, 1832, 2221, 878, 2220, 2219,
	1077, 2213, 894, 1833, 2195, 124, 67, 2094, 68, 1043,
	1080, 919, 1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050,
	1051, 138, 2089, 898, 898, 1502, 868, 1684, 470, 899,
	2088, 101, 2087, 2030, 917, 1065, 971, 1950, 1946, 1903,
	1041, 1042, 180, 1071, 1072, 1073, 1081, 1082, 1083, 1899,
	140, 1715, 1064, 1868, 1865, 1853, 1074, 1844, 1815, 1812,
	1811, 1809, 1049, 1044, 1796, 1795, 1085, 938, 1780, 1833,
	1612, 1037, 740, 1816, 1817, 1267, 966, 1184, 1478, 1049,
	1115, 1108, 1036, 1099, 1183, 866, 139, 1043, 1234, 2046,
	1822, 2480, 2448, 1063, 132, 2442, 2441, 1023, 2432, 583,
	1060, 133, 1818, 1819, 1820, 1821, 1823, 1824, 1022, 2430,
	2408, 1070, 759, 1045, 1046, 1047, 1048, 1050, 1051, 2407,
	2406, 1108, 953, 861, 123, 950, 1065, 765, 2363, 2342,
	2328, 1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050, 1051,
	2307, 1064, 2298, 1712, 2284, 2233, 2319, 1021, 1066, 1067,
	1068, 1069, 2172, 2169, 2168, 2166, 2138, 1049, 2137, 2118,
	969, 2106, 2015, 1991, 1936, 1827, 1825, 1826, 1818, 1819,
	1820, 1821, 1823, 1824, 1351, 1745, 1930, 1989, 1916, 1078,
	1086, 1816, 1817, 1744, 1834, 1835, 1836, 575, 1479, 1915,
	1822, 1901, 1871, 1843, 574, 180, 1805, 180, 1084, 1804,
	1801, 1776, 138, 1771, 1033, 1034, 1472, 1144, 138, 1038,
	1147, 1599, 1568, 1076, 920, 1065, 1512, 1226, 741, 1064,
	180, 180, 1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050,
	1051, 140, 1170, 1162, 1831, 1151, 1137, 140, 1136, 583,
	1135, 1163, 1111, 1134, 1075, 1133, 1132, 1131, 1141, 1142,
	1130, 1129, 1128, 1816, 1817, 1916, 1127, 759, 1126, 1145,
	1125, 2424, 1519, 1168, 1124, 1123, 1122, 139, 1121, 1148,
	1120, 2326, 1889, 139, 1119, 132, 1112, 1103, 1070, 1100,
	1099, 132, 133, 949, 941, 913, 2215, 2194, 133, 2113,
	2109, 1782, 1600, 1065, 1816, 1817, 1097, 1184, 1822, 1047,
	1048, 1050, 1051, 1203, 120, 1683, 920, 1962, 2330, 1079,
	2329, 123, 1052, 1053, 1045, 1046, 1047, 1048, 1050, 1051,
	965, 1180, 1158, 1720, 867, 919, 180, 1820, 1821, 1823,
	1824, 2323, 768, 2116, 1517, 1156, 1515, 1513, 180, 1837,
	1978, 1188, 1149, 1652, 1186, 1160, 1019, 1150, 1153, 1939,
	1216, 180, 1041, 1042, 1933, 1929, 1867, 180, 1866, 180,
	1832, 180, 1755, 1576, 962, 180, 1719, 1233, 1117, 1225,
	1822, 1680, 1994, 1268, 1231, 1044, 1337, 1077, 2347, 2047,
	1055, 1056, 1062, 1061, 1057, 1058, 1059, 1080, 1504, 1054,
	1052, 1053, 1045, 1046, 1047, 1048, 1050, 1051, 1492, 1043,
	1972, 1140, 2466, 1013, 1787, 2475, 180, 180, 438, 2125,
	1706, 1239, 2531, 919, 2292, 180, 581, 165, 180, 1196,
	2452, 1197, 1722, 2532, 693, 1818, 1819, 1820, 1821, 1823,
	1824, 423, 1832, 720, 1833, 746, 1191, 718, 2001, 768,
	1505, 741, 1014, 1219, 2388, 2387, 1114, 1005, 180, 2385,
	2384, 2157, 722, 180, 2154, 2122, 2121, 1204, 180, 180,
	716, 180, 894, 180, 1196, 180, 1197, 180, 1196, 1800,
	1197, 1618, 1217, 713, 580, 1799, 1798, 1201, 180, 1797,
	2149, 1758, 411, 1713, 180, 180, 476, 1626, 1705, 1506,
	1503, 1647, 424, 442, 1643, 1202, 1640, 963, 1253, 1454,
	1198, 1255, 168, 1244, 1241, 1258, 1833, 1157, 1338, 481,
	180, 854, 2304, 1572, 768, 477, 1571, 1415, 1381, 1677,
	1382, 1828, 1829, 1830, 582, 572, 1990, 1541, 2097, 484,
	1827, 1825, 1826, 1818, 1819, 1820, 1821, 1823, 1824, 1212,
	964, 2451, 2161, 2162, 1943, 1198, 1265, 478, 1469, 1198,
	1357, 950, 1266, 1224, 1324, 1211, 1184, 1221, 1469, 441,
	1618, 1358, 120, 1328, 1629, 1508, 1354, 415, 169, 1617,
	480, 1342, 759, 1361, 1243, 1209, 1243, 1476, 711, 1372,
	2486, 1261, 1474, 1245, 1040, 2040, 2505, 948, 1508, 583,
	2459, 1387, 2368, 1210, 583, 1747, 1748, 1365, 2140, 999,
	2523, 1175, 1827, 1825, 1826, 1818, 1819, 1820, 1821, 1823,
	1824, 1969, 1225, 978, 1207, 2460, 432, 1326, 1938, 1383,
	920, 1932, 1406, 1413, 1178, 1414, 1385, 769, 180, 579,
	180, 575, 1386, 180, 575, 575, 427, 1000, 1396, 1492,
	1593, 1397, 1398, 1502, 180, 1205, 1580, 1927, 1970, 1176,
	2531, 1824, 170, 768, 2002, 1489, 180, 2546, 426, 425,
	180, 1508, 1380, 180, 2435, 1250, 1628, 180, 1725, 1138,
	1487, 180, 1152, 2522, 691, 2338, 2506, 180, 2096, 583,
	1727, 479, 1671, 2390, 180, 768, 1094, 582, 1803, 180,
	1018, 1551, 1480, 1969, 1477, 2000, 1194, 180, 1601, 1595,
	1012, 1728, 1611, 440, 2202, 180, 2504, 1619, 920, 1051,
	2541, 2530, 166, 1726, 1591, 1329, 180, 2528, 180, 2312,
	180, 2147, 1534, 180, 1674, 180, 1177, 180, 180, 1199,
	180, 180, 443, 2507, 769, 919, 482, 1029, 2098, 180,
	1630, 1632, 439, 714, 1700, 1605, 2273, 714, 986, 2266,
	944, 167, 1208, 1578, 1627, 1577, 1004, 1395, 1637, 724,
	2264, 1586, 723, 1451, 1602, 2268, 1645, 1596, 1597, 1592,
	715, 2141, 1103, 2037, 1199, 2521, 1635, 410, 1199, 1622,
	1494, 1188, 1641, 714, 936, 2274, 400, 1942, 1648, 2379,
	2378, 2361, 2552, 1526, 1526, 1539, 1649, 954, 1682, 1559,
	1682, 416, 2427, 1563, 1564, 1566, 412, 1277, 2267, 769,
	1615, 1760, 2036, 2369, 2124, 1708, 413, 494, 2468, 1912,
	573, 1468, 2038, 120, 483, 1908, 1675, 768, 1346, 120,
	1240, 1697, 1686, 1694, 1232, 180, 898, 473, 898, 1475,
	1703, 1695, 428, 1696, 1698, 770, 979, 1707, 1360, 1228,
	917, 180, 180, 180, 1704, 180, 1542, 1714, 1039, 746,
	2539, 947, 1716, 2547, 1375, 2231, 2288, 1009, 2076, 1341,
	1340, 1251, 1350, 1347, 180, 746, 1449, 1452, 1613, 1325,
	1041, 1042, 959, 429, 980, 1028, 759, 977, 476, 1145,
	1768, 1148, 759, 2269, 2291, 2270, 1142, 1141, 1508, 765,
	959, 2290, 2551, 1044, 1723, 1332, 1766, 1277, 1277, 1392,
	1448, 481, 2175, 430, 1362, 431, 2540, 477, 1897, 1336,
	1366, 472, 1367, 1028, 1368, 2272, 1369, 1043, 1370, 2314,
	2362, 1691, 1010, 120, 2275, 1918, 1917, 2542, 1733, 1886,
	620, 473, 765, 765, 173, 1376, 1378, 960, 769, 478,
	1737, 961, 1027, 1753, 401, 1590, 1739, 987, 1344, 1589,
	1741, 959, 583, 1743, 959, 960, 1334, 1816, 1817, 961,
	2077, 1404, 480, 2232, 2287, 871, 2078, 1029, 1335, 2273,
	769, 177, 492, 1393, 1763, 404, 1011, 1898, 580, 486,
	1027, 870, 476, 419, 1764, 880, 2164, 1049, 1769, 2305,
	1941, 2359, 444, 891, 2101, 889, 1450, 487, 177, 2289,
	3, 495, 2246, 2271, 500, 481, 1511, 1789, 2274, 2341,
	402, 477, 519, 1761, 1759, 1008, 2230, 2160, 1847, 960,
	920, 1316, 2360, 961, 2014, 1944, 583, 1810, 469, 33,
	1770, 468, 32, 1775, 467, 29, 1718, 1654, 466, 77,
	1345, 465, 76, 478, 180, 768, 1646, 1786, 1639, 1064,
	180, 180, 1017, 1016, 180, 942, 1738, 765, 1740, 180,
	759, 1848, 180, 728, 728, 1869, 480, 1373, 1880, 997,
	180, 404, 1364, 479, 1822, 1118, 180, 180, 180, 1754,
	1510, 1873, 180, 2500, 1215, 180, 1879, 462, 21, 1893,
	995, 180, 180, 180, 180, 180, 1765, 404, 404, 761,
	404, 180, 2465, 1767, 180, 177, 858, 1892, 180, 856,
	463, 22, 769, 921, 1877, 993, 2269, 180, 2270, 1902,
	1881, 1882, 1909, 1065, 1887, 2262, 1003, 180, 482, 180,
	1774, 180, 2145, 180, 2143, 180, 1832, 1777, 1888, 180,
	491, 1874, 751, 859, 180, 1007, 180, 485, 2272, 1850,
	1851, 1852, 2123, 180, 1793, 1794, 1878, 2275, 890, 860,
	888, 692, 1958, 583, 991, 640, 180, 919, 1678, 1949,
	33, 1951, 1904, 32, 989, 2027, 29, 479, 919, 180,
	77, 1672, 1928, 76, 1670, 1542, 1542, 1260, 461, 27,
	1935, 1926, 1986, 1259, 1913, 460, 19, 458, 18, 996,
	695, 983, 1974, 1995, 1842, 921, 459, 17, 887, 1257,
	1833, 1559, 1559, 1559, 180, 1952, 1855, 1351, 1348, 1956,
	994, 1053, 1045, 1046, 1047, 1048, 1050, 1051, 1971, 21,
	712, 1913, 482, 1254, 1965, 1252, 2271, 1979, 1213, 453,
	14, 454, 15, 1206, 1953, 992, 1200, 1985, 1960, 452,
	13, 2401, 22, 1002, 457, 11, 2017, 451, 9, 746,
	1996, 1542, 1542, 1542, 180, 746, 746, 1997, 1998, 746,
	1751, 1999, 1031, 2532, 456, 7, 455, 6, 2325, 2324,
	2003, 1988, 1465, 2191, 1980, 1981, 1355, 1982, 1983, 2403,
	2007, 1905, 450, 5, 990, 736, 2005, 970, 1463, 563,
	1634, 2183, 1650, 1642, 988, 2032, 2033, 2034, 1826, 1818,
	1819, 1820, 1821, 1823, 1824, 737, 1931, 591, 1638, 471,
	694, 2026, 1870, 2023, 1618, 2039, 2041, 2042, 2021, 2048,
	27, 982, 1945, 1633, 1574, 1575, 1752, 19, 886, 18,
	769, 519, 2437, 875, 519, 2050, 881, 180, 17, 1032,
	1957, 884, 2053, 180, 2055, 2082, 1310, 404, 1618, 1224,
	717, 719, 180, 180, 2281, 1041, 1042, 1631, 1224, 981,
	519, 519, 404, 906, 858, 2119, 1459, 2415, 1406, 2051,
	2112, 14, 564, 15, 1460, 2083, 1461, 1406, 2056, 493,
	1466, 13, 738, 2247, 1035, 2081, 11, 1644, 2104, 9,
	1636, 519, 2464, 1262, 2310, 2102, 2117, 2099, 2105, 180,
	1685, 180, 1043, 1673, 519, 2159, 7, 2108, 6, 180,
	2086, 120, 919, 1669, 1041, 1042, 1579, 1327, 1269, 2008,
	945, 2537, 2170, 2135, 5, 2550, 2127, 180, 180, 2353,
	519, 2136, 2120, 2177, 1816, 1817, 2252, 1044, 2217, 563,
	2134, 1041, 1042, 2167, 2151, 180, 1310, 1310, 2151, 2188,
	2148, 2193, 920, 2165, 2151, 180, 2095, 591, 1730, 1729,
	768, 1043, 2176, 920, 2186, 2185, 2171, 1542, 1542, 1277,
	2179, 2043, 2150, 2178, 2180, 2204, 2155, 2181, 2187, 1730,
	565, 2192, 2158, 1992, 1894, 1862, 1731, 1573, 1462, 1570,
	2209, 1569, 404, 1500, 1105, 1464, 2035, 180, 1877, 1954,
	1115, 2144, 2090, 2146, 1113, 1015, 1277, 1006, 1001, 921,
	998, 984, 946, 1330, 571, 2367, 770, 474, 1363, 596,
	985, 1890, 564, 1598, 2458, 2223, 1542, 1542, 1542, 1542,
	1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
	1542, 1542, 1542, 1542, 1542, 1802, 1542, 768, 180, 180,
	2420, 2337, 746, 2229, 180, 1509, 1277, 180, 1116, 566,
	53, 2132, 614, 2263, 2126, 637, 1664, 768, 180, 180,
	2250, 2205, 180, 180, 180, 1663, 771, 1339, 2153, 636,
	1525, 1407, 2257, 710, 2156, 638, 1274, 639, 1275, 180,
	1146, 567, 2251, 626, 180, 2256, 180, 921, 180, 180,
	180, 1272, 2286, 2249, 914, 180, 2282, 1171, 180, 1689,
	1343, 919, 2253, 1473, 2261, 1490, 1785, 1277, 1109, 180,
	180, 606, 2285, 770, 2248, 618, 617, 919, 1488, 940,
	565, 1895, 2308, 1968, 2318, 1391, 1742, 1388, 1964, 2142,
	414, 1813, 1691, 746, 2135, 500, 2303, 728, 2316, 912,
	1548, 2306, 2136, 1277, 1277, 1540, 1536, 2311, 2241, 1020,
	1169, 2134, 1277, 1277, 2309, 2317, 1175, 1095, 1690, 967,
	404, 404, 2331, 2135, 1975, 1711, 1161, 2315, 2254, 2135,
	1399, 2136, 735, 734, 1333, 1724, 1088, 2136, 1087, 1178,
	2134, 2322, 721, 2429, 958, 1277, 2134, 957, 770, 1911,
	2545, 2436, 2139, 2474, 137, 1173, 134, 920, 2343, 566,
	136, 135, 1940, 180, 1176, 180, 80, 768, 180, 31,
	2321, 2336, 30, 100, 99, 98, 180, 97, 96, 1174,
	95, 94, 768, 2350, 93, 92, 91, 90, 89, 88,
	87, 567, 86, 85, 84, 83, 2371, 82, 2352, 2373,
	515, 512, 79, 2355, 78, 769, 28, 2370, 24, 104,
	23, 1225, 75, 180, 2243, 74, 919, 26, 16, 746,
	180, 10, 20, 58, 59, 57, 177, 56, 180, 180,
	919, 919, 55, 2402, 12, 2135, 51, 2399, 404, 50,
	48, 1177, 2392, 2136, 47, 862, 864, 46, 180, 2400,
	45, 1238, 2134, 180, 2409, 2411, 2412, 404, 2410, 404,
	180, 404, 2404, 2295, 2135, 1246, 2398, 2417, 8, 2151,
	2300, 103, 2136, 2431, 42, 41, 102, 116, 2357, 2425,
	2423, 2134, 113, 115, 112, 180, 180, 770, 114, 118,
	2414, 180, 769, 2372, 117, 2444, 2395, 2389, 2433, 919,
	2447, 2446, 2426, 2381, 180, 110, 519, 177, 919, 919,
	108, 1277, 769, 2450, 109, 177, 111, 107, 519, 770,
	2449, 106, 2382, 2383, 119, 38, 583, 1170, 2434, 939,
	37, 180, 36, 180, 35, 943, 180, 34, 768, 2440,
	2, 1, 0, 2455, 2456, 2349, 2470, 0, 519, 2482,
	2471, 2481, 0, 519, 2483, 0, 920, 0, 177, 519,
	0, 519, 596, 519, 180, 519, 0, 519, 2485, 921,
	0, 0, 920, 2499, 0, 2498, 2497, 0, 1374, 0,
	0, 180, 2375, 2484, 519, 519, 0, 180, 1542, 2515,
	0, 2365, 2510, 2487, 2514, 2520, 2386, 2517, 0, 0,
	0, 180, 0, 2518, 2519, 2135, 0, 1816, 1817, 0,
	519, 2529, 2527, 2136, 0, 589, 2533, 563, 0, 0,
	2535, 0, 2134, 0, 0, 1772, 1773, 0, 2397, 0,
	0, 0, 1542, 0, 0, 591, 2544, 2543, 0, 2549,
	0, 0, 2548, 1089, 1090, 1091, 1092, 1093, 0, 2476,
	0, 0, 0, 1102, 0, 0, 0, 2536, 0, 0,
	0, 770, 769, 1110, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 769, 1310, 1816,
	1817, 0, 1834, 1835, 1836, 0, 0, 0, 0, 1041,
	1042, 0, 0, 0, 0, 2207, 0, 0, 0, 1542,
	564, 1839, 1840, 1841, 0, 0, 2443, 0, 0, 0,
	0, 920, 1044, 2461, 0, 1310, 0, 0, 0, 0,
	0, 0, 0, 0, 1822, 920, 920, 0, 500, 1277,
	728, 0, 1831, 858, 0, 0, 1043, 0, 0, 2478,
	2479, 0, 0, 1309, 404, 0, 0, 1276, 0, 0,
	0, 2473, 0, 0, 0, 0, 1610, 0, 0, 0,
	404, 0, 0, 404, 0, 1310, 0, 1623, 0, 0,
	0, 404, 615, 72, 0, 0, 0, 404, 1166, 1166,
	0, 0, 1312, 1171, 404, 596, 1832, 0, 1277, 1653,
	0, 0, 0, 0, 920, 0, 1822, 1660, 0, 0,
	0, 0, 1691, 920, 920, 858, 1049, 0, 565, 0,
	0, 0, 0, 0, 0, 0, 404, 0, 1693, 0,
	519, 0, 0, 519, 0, 519, 1310, 404, 404, 0,
	1699, 858, 0, 769, 0, 72, 0, 1837, 1277, 1623,
	0, 0, 1175, 1309, 1309, 0, 0, 1276, 1276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1832, 0,
	1833, 0, 1310, 1310, 0, 1178, 0, 0, 1064, 0,
	0, 1310, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 1173, 1312, 1312, 0, 588, 0, 566, 0, 770,
	1176, 0, 0, 576, 0, 0, 584, 0, 0, 0,
	0, 0, 1311, 0, 1310, 1174, 0, 0, 0, 0,
	0, 0, 0, 747, 72, 0, 0, 2012, 2013, 567,
	1885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1833, 0, 0, 1735, 0, 0, 0, 0,
	0, 0, 1065, 0, 1816, 1817, 0, 1834, 1835, 1836,
	0, 404, 404, 404, 0, 404, 0, 1825, 1826, 1818,
	1819, 1820, 1821, 1823, 1824, 0, 0, 1177, 0, 0,
	0, 0, 0, 0, 404, 0, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 0, 2079, 1831, 0, 0,
	0, 0, 1311, 1311, 0, 0, 0, 596, 596, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 1828,
	1829, 1830, 921, 0, 0, 0, 0, 0, 1827, 1825,
	1826, 1818, 1819, 1820, 1821, 1823, 1824, 1884, 0, 0,
	0, 1045, 1046, 1047, 1048, 1050, 1051, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1822, 0, 0, 0, 0, 0, 0, 0, 0,
	1310, 1389, 0, 1394, 0, 0, 0, 0, 0, 1401,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 0, 1453, 1832, 1455, 1456, 1457, 1458, 0, 0,
	0, 39, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 40, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 404, 43, 0, 1273, 0, 0,
	404, 404, 0, 0, 404, 0, 0, 1521, 1522, 1610,
	0, 1538, 1610, 1550, 1552, 1557, 1560, 1561, 1562, 0,
	1900, 49, 0, 0, 0, 0, 404, 1906, 1907, 0,
	0, 0, 1623, 0, 0, 1914, 0, 1833, 0, 0,
	0, 1919, 1920, 1922, 1924, 1925, 0, 0, 0, 0,
	60, 404, 0, 0, 1934, 0, 0, 61, 1937, 126,
	62, 584, 0, 0, 0, 0, 0, 404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1238, 0, 1238,
	0, 519, 0, 1955, 0, 404, 0, 0, 0, 1963,
	0, 0, 0, 64, 404, 0, 1973, 1273, 1273, 0,
	0, 0, 0, 404, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1735, 0, 0, 0,
	0, 0, 0, 0, 1828, 1829, 1830, 0, 1310, 1735,
	0, 0, 0, 1827, 1825, 1826, 1818, 1819, 1820, 1821,
	1823, 1824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 770, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	124, 67, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2045, 0, 138, 0, 0, 0,
	1098, 0, 1101, 470, 0, 0, 101, 0, 2340, 1106,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	0, 770, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 1309, 0, 0, 0, 1276,
	0, 0, 2364, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 133, 404, 0, 0,
	0, 0, 1309, 1610, 1312, 921, 1276, 0, 0, 0,
	0, 0, 858, 1610, 0, 0, 0, 0, 0, 123,
	0, 921, 0, 0, 0, 0, 0, 2131, 0, 0,
	0, 0, 1756, 1757, 0, 0, 0, 0, 1762, 2416,
	2152, 1312, 0, 0, 2152, 0, 0, 0, 0, 0,
	2152, 0, 1309, 0, 0, 0, 1276, 72, 0, 1623,
	0, 1238, 1187, 0, 0, 0, 0, 0, 0, 2173,
	1781, 0, 0, 0, 0, 0, 1788, 0, 0, 1792,
	0, 0, 0, 0, 0, 0, 0, 404, 404, 0,
	0, 1312, 0, 0, 0, 0, 1806, 0, 0, 0,
	0, 0, 0, 0, 0, 2199, 0, 0, 0, 0,
	0, 770, 0, 1309, 0, 2201, 0, 1276, 0, 0,
	0, 0, 0, 0, 1311, 0, 770, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 1557, 1557, 1557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1309,
	1309, 0, 1312, 1276, 1276, 0, 0, 2224, 1309, 1309,
	921, 1311, 1276, 1276, 0, 0, 1166, 0, 0, 0,
	0, 596, 0, 0, 921, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 1312,
	0, 1309, 0, 0, 0, 1276, 0, 1312, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2242, 404,
	0, 1311, 0, 0, 404, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1610, 858,
	1312, 0, 2259, 2260, 1623, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 0, 0, 2131, 858,
	0, 0, 921, 921, 2293, 0, 2294, 0, 404, 2296,
	2297, 0, 0, 0, 1966, 404, 0, 0, 2302, 0,
	0, 0, 1311, 0, 0, 0, 0, 2131, 0, 858,
	1660, 0, 770, 2131, 0, 0, 1984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 596, 0, 0, 0, 1311, 1311,
	0, 0, 0, 0, 0, 72, 596, 1311, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2006, 0,
	0, 0, 0, 1401, 0, 0, 0, 0, 0, 2010,
	0, 0, 2011, 576, 0, 0, 576, 576, 0, 0,
	1311, 0, 0, 0, 2016, 0, 0, 1309, 0, 0,
	0, 1276, 0, 2024, 0, 0, 0, 0, 0, 0,
	0, 2028, 0, 1623, 1984, 2356, 0, 0, 2358, 1273,
	0, 0, 0, 0, 0, 0, 404, 0, 0, 2131,
	0, 0, 0, 0, 2052, 0, 1312, 0, 2054, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 2152, 1273, 1101, 2131, 0,
	0, 0, 0, 404, 0, 0, 0, 0, 0, 0,
	858, 2084, 2085, 0, 0, 0, 0, 0, 2199, 2199,
	2091, 2092, 2093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2422, 0,
	0, 0, 0, 1610, 0, 0, 1273, 0, 0, 2107,
	1238, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 2438, 2439, 0, 0, 2128,
	0, 404, 1187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2454, 72, 1311, 0, 0, 0,
	0, 39, 0, 72, 0, 0, 0, 1273, 0, 0,
	0, 0, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 2469, 0, 858, 0, 43, 404, 0, 0, 0,
	0, 0, 0, 1166, 0, 72, 0, 72, 0, 2131,
	0, 0, 596, 1273, 1273, 0, 0, 0, 0, 0,
	0, 49, 1273, 1273, 2422, 1309, 72, 0, 0, 1276,
	0, 0, 72, 1816, 1817, 0, 1834, 1835, 1836, 0,
	0, 858, 0, 0, 0, 0, 0, 404, 2208, 2206,
	60, 0, 2211, 2212, 0, 1273, 2214, 61, 0, 126,
	62, 2526, 0, 2216, 1312, 2218, 0, 0, 0, 1041,
	1042, 0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0,
	0, 2225, 0, 0, 1309, 1074, 1831, 0, 1276, 0,
	0, 0, 1044, 64, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2234, 0, 1043, 0, 0, 0,
	0, 0, 1063, 1312, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 1309, 0, 72, 0, 1276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2283, 0, 0,
	0, 0, 0, 1312, 65, 0, 0, 1066, 1067, 1068,
	1069, 0, 0, 0, 1311, 0, 1049, 0, 0, 0,
	0, 1837, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 67, 0, 68, 0, 0, 0, 0, 1078, 1086,
	0, 0, 1832, 0, 0, 1471, 138, 0, 0, 0,
	1736, 1273, 0, 470, 0, 39, 101, 1084, 0, 0,
	0, 0, 0, 0, 0, 1101, 40, 0, 0, 0,
	2332, 2333, 1076, 1311, 0, 140, 0, 0, 1064, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2345, 0, 1075, 0, 49, 0, 0, 0, 0,
	2348, 139, 0, 0, 0, 0, 1833, 0, 0, 132,
	0, 0, 0, 1311, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 1070, 0, 1101,
	0, 61, 0, 126, 62, 0, 0, 0, 0, 123,
	0, 0, 1065, 0, 2380, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 0, 747, 64, 0, 0,
	0, 0, 747, 747, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1828, 1829, 1830, 0, 0, 0, 0,
	0, 0, 1827, 1825, 1826, 1818, 1819, 1820, 1821, 1823,
	1824, 0, 0, 0, 0, 0, 0, 2428, 0, 72,
	0, 0, 0, 0, 0, 0, 1077, 72, 0, 1055,
	1056, 1062, 1061, 1057, 1058, 1059, 1080, 0, 1054, 1052,
	1053, 1045, 1046, 1047, 1048, 1050, 1051, 0, 65, 0,
	0, 0, 72, 0, 0, 2237, 72, 0, 0, 1273,
	596, 0, 0, 0, 0, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 124, 67, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 1371, 0, 0, 470, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2496, 2496, 0, 0, 0, 1273, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2496, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 1273, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	634, 623, 624, 621, 622, 613, 0, 0, 0, 0,
	0, 2496, 0, 123, 0, 0, 182, 183, 1496, 184,
	0, 0, 0, 0, 651, 616, 0, 0, 0, 185,
	186, 187, 342, 666, 344, 667, 188, 668, 669, 0,
	189, 348, 349, 190, 191, 619, 650, 670, 671, 352,
	0, 192, 662, 0, 642, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	696, 203, 204, 205, 72, 643, 644, 646, 0, 645,
	647, 206, 207, 405, 208, 672, 209, 673, 674, 747,
	210, 0, 211, 0, 212, 1497, 0, 665, 214, 0,
	215, 0, 0, 0, 607, 216, 218, 217, 219, 652,
	653, 630, 697, 0, 0, 0, 0, 0, 220, 221,
	675, 676, 677, 0, 222, 0, 223, 0, 0, 698,
	0, 224, 663, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 659, 661, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 664, 703, 241, 704,
	747, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 602, 0, 631,
	660, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 654, 260, 261,
	262, 263, 264, 0, 265, 655, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 608, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 747, 321, 322, 657,
	658, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 396,
	690, 1495, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	1498, 0, 0, 0, 0, 0, 0, 609, 1493, 0,
	0, 0, 0, 612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 767, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 773, 184, 774, 775, 776, 777, 341, 778, 779,
	780, 781, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 782, 189, 348, 349, 190, 191, 783, 784,
	350, 351, 352, 785, 192, 353, 786, 772, 787, 193,
	194, 195, 0, 197, 198, 199, 196, 788, 200, 1101,
	201, 202, 789, 696, 203, 204, 205, 790, 791, 793,
	792, 794, 795, 796, 206, 207, 405, 208, 354, 209,
	355, 356, 797, 210, 798, 211, 799, 212, 800, 801,
	213, 214, 802, 215, 803, 0, 804, 357, 216, 218,
	217, 219, 358, 359, 805, 697, 806, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 807, 223,
	808, 809, 698, 810, 224, 363, 811, 364, 812, 0,
	225, 226, 0, 0, 227, 228, 365, 366, 700, 813,
	367, 232, 814, 229, 815, 699, 230, 368, 231, 369,
	370, 371, 372, 373, 816, 374, 817, 701, 233, 234,
	235, 702, 236, 237, 238, 818, 240, 239, 819, 375,
	703, 241, 704, 820, 242, 821, 822, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	823, 824, 825, 377, 253, 378, 254, 255, 826, 256,
	827, 828, 257, 829, 830, 258, 379, 706, 259, 707,
	380, 260, 261, 262, 263, 264, 831, 265, 381, 266,
	382, 267, 832, 268, 269, 270, 271, 272, 383, 273,
	274, 833, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 834, 287, 708, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 835, 299, 385,
	298, 300, 301, 836, 302, 291, 292, 303, 709, 304,
	386, 387, 305, 837, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 838, 313, 839, 314, 315, 316,
	317, 318, 319, 320, 840, 390, 391, 392, 841, 842,
	321, 322, 393, 394, 843, 323, 324, 325, 326, 844,
	845, 327, 328, 329, 330, 846, 331, 847, 395, 332,
	333, 334, 396, 397, 848, 849, 335, 850, 851, 852,
	853, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 767, 0, 0, 0, 0, 0, 1603, 0,
	0, 0, 0, 0, 0, 0, 0, 1604, 182, 183,
	773, 184, 774, 775, 776, 777, 341, 778, 779, 780,
	781, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 782, 189, 348, 349, 190, 191, 783, 784, 350,
	351, 352, 785, 192, 353, 786, 772, 787, 193, 194,
	195, 0, 197, 198, 199, 196, 788, 200, 0, 201,
	202, 789, 696, 203, 204, 205, 790, 791, 793, 792,
	794, 795, 796, 206, 207, 405, 208, 354, 209, 355,
	356, 797, 210, 798, 211, 799, 212, 800, 801, 213,
	214, 802, 215, 803, 0, 804, 357, 216, 218, 217,
	219, 358, 359, 805, 697, 806, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 807, 223, 808,
	809, 698, 810, 224, 363, 811, 364, 812, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 700, 813, 367,
	232, 814, 229, 815, 699, 230, 368, 231, 369, 370,
	371, 372, 373, 816, 374, 817, 701, 233, 234, 235,
	702, 236, 237, 238, 818, 240, 239, 819, 375, 703,
	241, 704, 820, 242, 821, 822, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 823,
	824, 825, 377, 253, 378, 254, 255, 826, 256, 827,
	828, 257, 829, 830, 258, 379, 706, 259, 707, 380,
	260, 261, 262, 263, 264, 831, 265, 381, 266, 382,
	267, 832, 268, 269, 270, 271, 272, 383, 273, 274,
	833, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 834, 287, 708, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 835, 299, 385, 298,
	300, 301, 836, 302, 291, 292, 303, 709, 304, 386,
	387, 305, 837, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 838, 313, 839, 314, 315, 316, 317,
	318, 319, 320, 840, 390, 391, 392, 841, 842, 321,
	322, 393, 394, 843, 323, 324, 325, 326, 844, 845,
	327, 328, 329, 330, 846, 331, 847, 395, 332, 333,
	334, 396, 397, 848, 849, 335, 850, 851, 852, 853,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 767, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2255, 182, 183,
	773, 184, 774, 775, 776, 777, 341, 778, 779, 780,
	781, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 782, 189, 348, 349, 190, 191, 783, 784, 350,
	351, 352, 785, 192, 353, 786, 772, 787, 193, 194,
	195, 0, 197, 198, 199, 196, 788, 200, 0, 201,
	202, 789, 696, 203, 204, 205, 790, 791, 793, 792,
	794, 795, 796, 206, 207, 405, 208, 354, 209, 355,
	356, 797, 210, 798, 211, 799, 212, 800, 801, 213,
	214, 802, 215, 803, 0, 804, 357, 216, 218, 217,
	219, 358, 359, 805, 697, 806, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 807, 223, 808,
	809, 698, 810, 224, 363, 811, 364, 812, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 700, 813, 367,
	232, 814, 229, 815, 699, 230, 368, 231, 369, 370,
	371, 372, 373, 816, 374, 817, 701, 233, 234, 235,
	702, 236, 237, 238, 818, 240, 239, 819, 375, 703,
	241, 704, 820, 242, 821, 822, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 823,
	824, 825, 377, 253, 378, 254, 255, 826, 256, 827,
	828, 257, 829, 830, 258, 379, 706, 259, 707, 380,
	260, 261, 262, 263, 264, 831, 265, 381, 266, 382,
	267, 832, 268, 269, 270, 271, 272, 383, 273, 274,
	833, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 834, 287, 708, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 835, 299, 385, 298,
	300, 301, 836, 302, 291, 292, 303, 709, 304, 386,
	387, 305, 837, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 838, 313, 839, 314, 315, 316, 317,
	318, 319, 320, 840, 390, 391, 392, 841, 842, 321,
	322, 393, 394, 843, 323, 324, 325, 326, 844, 845,
	327, 328, 329, 330, 846, 331, 847, 395, 332, 333,
	334, 396, 397, 848, 849, 335, 850, 851, 852, 853,
	336, 337, 338, 339, 340, 0, 0, 767, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1220, 182, 183, 773, 184, 774, 775, 776,
	777, 341, 778, 779, 780, 781, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 782, 189, 348, 349,
	190, 191, 783, 784, 350, 351, 352, 785, 192, 353,
	786, 772, 787, 193, 194, 195, 0, 197, 198, 199,
	196, 788, 200, 0, 201, 202, 789, 696, 203, 204,
	205, 790, 791, 793, 792, 794, 795, 796, 206, 207,
	405, 208, 354, 209, 355, 356, 797, 210, 798, 211,
	799, 212, 800, 801, 213, 214, 802, 215, 803, 0,
	804, 357, 216, 218, 217, 219, 358, 359, 805, 697,
	806, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 807, 223, 808, 809, 698, 810, 224, 363,
	811, 364, 812, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 700, 813, 367, 232, 814, 229, 815, 699,
	230, 368, 231, 369, 370, 371, 372, 373, 816, 374,
	817, 701, 233, 234, 235, 702, 236, 237, 238, 818,
	240, 239, 819, 375, 703, 241, 704, 820, 242, 821,
	822, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 823, 824, 825, 377, 253, 378,
	254, 255, 826, 256, 827, 828, 257, 829, 830, 258,
	379, 706, 259, 707, 380, 260, 261, 262, 263, 264,
	831, 265, 381, 266, 382, 267, 832, 268, 269, 270,
	271, 272, 383, 273, 274, 833, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 834,
	287, 708, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 835, 299, 385, 298, 300, 301, 836, 302, 291,
	292, 303, 709, 304, 386, 387, 305, 837, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 838, 313,
	839, 314, 315, 316, 317, 318, 319, 320, 840, 390,
	391, 392, 841, 842, 321, 322, 393, 394, 843, 323,
	324, 325, 326, 844, 845, 327, 328, 329, 330, 846,
	331, 847, 395, 332, 333, 334, 396, 397, 848, 849,
	335, 850, 851, 852, 853, 336, 337, 338, 339, 340,
	634, 623, 624, 621, 622, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 651, 616, 0, 0, 0, 185,
	186, 187, 342, 666, 344, 667, 188, 668, 669, 0,
	189, 348, 349, 190, 191, 619, 650, 670, 671, 352,
	0, 192, 662, 0, 642, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	696, 203, 204, 205, 0, 643, 644, 646, 0, 645,
	647, 206, 207, 405, 208, 672, 209, 673, 674, 597,
	210, 0, 211, 0, 212, 0, 0, 665, 214, 0,
	215, 0, 0, 0, 607, 216, 218, 217, 219, 652,
	653, 630, 697, 0, 0, 0, 0, 0, 220, 221,
	675, 676, 677, 0, 222, 0, 223, 0, 0, 698,
	0, 224, 663, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 659, 661, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 664, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 602, 0, 631,
	660, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 654, 260, 261,
	262, 263, 264, 0, 265, 655, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 608, 290, 0,
	294, 295, 296, 297, 138, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 140, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 657,
	658, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 922,
	690, 0, 0, 335, 0, 0, 0, 132, 336, 337,
	338, 339, 340, 603, 133, 585, 0, 634, 623, 624,
	621, 622, 613, 601, 0, 0, 0, 0, 599, 600,
	0, 0, 0, 182, 183, 0, 184, 1104, 0, 0,
	0, 651, 616, 612, 0, 0, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 138, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	140, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 922, 690, 0, 0,
	335, 0, 0, 0, 132, 336, 337, 338, 339, 340,
	603, 133, 634, 623, 624, 621, 622, 613, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 182, 183,
	0, 184, 0, 0, 1104, 0, 651, 616, 0, 0,
	612, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 138, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 140, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 922, 690, 0, 0, 335, 0, 0, 0, 132,
	336, 337, 338, 339, 340, 603, 133, 634, 623, 624,
	621, 622, 613, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 182, 183, 0, 184, 0, 0, 1104,
	0, 651, 616, 0, 0, 612, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 1553, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 1558, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 1554, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 1555, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 593, 0, 634, 623, 624, 621, 622, 613, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 0, 182,
	183, 0, 184, 0, 609, 0, 0, 651, 616, 0,
	612, 0, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 619, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 597, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 0, 0, 0,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 659, 661, 700, 0,
	367, 232, 0, 229, 0, 699, 230, 678, 231, 679,
	680, 681, 682, 683, 0, 641, 0, 701, 233, 234,
	235, 702, 236, 237, 238, 0, 240, 239, 0, 664,
	703, 241, 704, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	602, 0, 631, 660, 253, 684, 254, 255, 0, 256,
	595, 0, 257, 0, 0, 258, 379, 706, 259, 707,
	654, 260, 261, 262, 263, 264, 0, 265, 655, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 685, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	608, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 648, 302, 291, 292, 303, 709, 304,
	686, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	687, 309, 310, 656, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 688, 689, 0, 0,
	321, 322, 657, 658, 629, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 649, 331, 0, 395, 332,
	333, 334, 396, 690, 0, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 603, 0, 634, 623,
	624, 621, 622, 613, 0, 0, 601, 0, 0, 0,
	0, 599, 600, 0, 182, 183, 0, 184, 0, 0,
	609, 0, 651, 616, 0, 0, 612, 185, 186, 187,
	342, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 696, 203,
	204, 205, 0, 643, 644, 646, 0, 645, 647, 206,
	207, 405, 208, 672, 209, 673, 674, 0, 210, 0,
	211, 0, 212, 0, 0, 665, 214, 0, 215, 0,
	0, 0, 607, 216, 218, 217, 219, 652, 653, 630,
	697, 0, 0, 0, 0, 0, 220, 221, 675, 676,
	677, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 659, 661, 700, 0, 367, 232, 0, 229, 0,
	699, 230, 678, 231, 679, 680, 681, 682, 683, 0,
	641, 0, 701, 233, 234, 235, 702, 236, 237, 238,
	0, 240, 239, 0, 664, 703, 241, 704, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 602, 2182, 631, 660, 253,
	684, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 706, 259, 707, 654, 260, 261, 262, 263,
	264, 0, 265, 655, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 685, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 603, 0, 634, 623, 624, 621, 622, 613, 0,
	0, 601, 0, 0, 0, 0, 599, 600, 1167, 182,
	183, 0, 184, 0, 0, 609, 0, 651, 616, 0,
	0, 612, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 619, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 0, 0, 0,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 659, 661, 700, 0,
	367, 232, 1403, 229, 0, 699, 230, 678, 231, 679,
	680, 681, 682, 683, 0, 641, 0, 701, 233, 234,
	235, 702, 236, 237, 238, 0, 240, 239, 0, 664,
	703, 241, 704, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	602, 0, 631, 660, 253, 684, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 706, 259, 707,
	654, 260, 261, 262, 263, 264, 0, 265, 655, 266,
	382, 267, 1402, 268, 269, 270, 271, 272, 685, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	608, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 648, 302, 291, 292, 303, 709, 304,
	686, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	687, 309, 310, 656, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 688, 689, 0, 0,
	321, 322, 657, 658, 629, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 649, 331, 0, 395, 332,
	333, 334, 396, 690, 0, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 603, 0, 634, 623,
	624, 621, 622, 613, 0, 0, 601, 0, 0, 0,
	0, 599, 600, 0, 182, 183, 0, 184, 0, 0,
	609, 0, 651, 616, 0, 0, 612, 185, 186, 187,
	342, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 696, 203,
	204, 205, 0, 643, 644, 646, 0, 645, 647, 206,
	207, 405, 208, 672, 209, 673, 674, 597, 210, 0,
	211, 0, 212, 0, 0, 665, 214, 0, 215, 0,
	0, 0, 607, 216, 218, 217, 219, 652, 653, 630,
	697, 0, 0, 0, 0, 0, 220, 221, 675, 676,
	677, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 659, 661, 700, 0, 367, 232, 0, 229, 0,
	699, 230, 678, 231, 679, 680, 681, 682, 683, 0,
	641, 0, 701, 233, 234, 235, 702, 236, 237, 238,
	0, 240, 239, 0, 664, 703, 241, 704, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 602, 0, 631, 660, 253,
	684, 254, 255, 0, 256, 595, 0, 257, 0, 0,
	258, 379, 706, 259, 707, 654, 260, 261, 262, 263,
	264, 0, 265, 655, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 685, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 603, 0, 634, 623, 624, 621, 622, 613, 0,
	0, 601, 0, 0, 0, 0, 599, 600, 0, 182,
	183, 0, 184, 0, 0, 609, 0, 651, 616, 0,
	0, 612, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 619, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 597, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 0, 0, 0,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 659, 661, 700, 0,
	367, 232, 0, 229, 0, 699, 230, 678, 231, 679,
	680, 681, 682, 683, 0, 641, 0, 701, 233, 234,
	235, 702, 236, 237, 238, 0, 240, 239, 0, 664,
	703, 241, 704, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	602, 0, 631, 660, 253, 684, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 706, 259, 707,
	654, 260, 261, 262, 263, 264, 0, 265, 655, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 685, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	608, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 648, 302, 291, 292, 303, 709, 304,
	686, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	687, 309, 310, 656, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 688, 689, 0, 0,
	321, 322, 657, 658, 629, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 649, 331, 0, 395, 332,
	333, 334, 396, 690, 0, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 603, 0, 634, 623,
	624, 621, 622, 613, 0, 0, 601, 0, 0, 0,
	0, 599, 600, 0, 182, 183, 0, 184, 0, 0,
	609, 0, 651, 616, 0, 0, 612, 185, 186, 187,
	342, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 696, 203,
	204, 205, 0, 643, 644, 646, 0, 645, 647, 206,
	207, 405, 208, 672, 209, 673, 674, 0, 210, 0,
	211, 0, 212, 0, 0, 665, 214, 0, 215, 0,
	0, 0, 607, 216, 218, 217, 219, 652, 653, 630,
	697, 0, 0, 0, 0, 0, 220, 221, 675, 676,
	677, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 659, 661, 700, 0, 367, 232, 0, 229, 0,
	699, 230, 678, 231, 679, 680, 681, 682, 683, 0,
	641, 0, 701, 233, 234, 235, 702, 236, 237, 238,
	0, 240, 239, 0, 664, 703, 241, 704, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 602, 0, 631, 660, 253,
	684, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 706, 259, 707, 654, 260, 261, 262, 263,
	264, 0, 265, 655, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 685, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 2031,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 603, 0, 634, 623, 624, 621, 622, 613, 0,
	0, 601, 0, 0, 0, 0, 599, 600, 0, 182,
	183, 0, 184, 0, 0, 609, 0, 651, 616, 0,
	0, 612, 185, 186, 187, 342, 666, 344, 667, 188,
	668, 669, 0, 189, 348, 349, 190, 191, 619, 650,
	670, 671, 352, 0, 192, 662, 0, 642, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 696, 203, 204, 205, 0, 643, 644,
	646, 0, 645, 647, 206, 207, 405, 208, 672, 209,
	673, 674, 0, 210, 0, 211, 0, 212, 0, 0,
	665, 214, 0, 215, 0, 0, 0, 607, 216, 218,
	217, 219, 652, 653, 630, 697, 0, 0, 0, 0,
	0, 220, 221, 675, 676, 677, 0, 222, 0, 223,
	0, 0, 698, 0, 224, 663, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 659, 661, 700, 0,
	367, 232, 0, 229, 0, 699, 230, 678, 231, 679,
	680, 681, 682, 683, 0, 641, 0, 701, 233, 234,
	235, 702, 236, 237, 238, 0, 240, 239, 0, 664,
	703, 241, 704, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 705, 249, 250, 252, 251,
	602, 0, 631, 660, 253, 684, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 706, 259, 707,
	654, 260, 261, 262, 263, 264, 0, 265, 655, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 685, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 708, 288, 289,
	608, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 648, 302, 291, 292, 303, 709, 304,
	686, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	687, 309, 310, 656, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 688, 689, 0, 0,
	321, 322, 657, 658, 629, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 649, 331, 0, 395, 332,
	333, 334, 396, 690, 0, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 603, 0, 634, 623,
	624, 621, 622, 613, 0, 0, 601, 0, 0, 0,
	0, 599, 600, 1167, 182, 183, 0, 184, 0, 0,
	609, 0, 651, 616, 0, 0, 612, 185, 186, 187,
	342, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 696, 203,
	204, 205, 0, 643, 644, 646, 0, 645, 647, 206,
	207, 405, 208, 672, 209, 673, 674, 0, 210, 0,
	211, 0, 212, 0, 0, 665, 214, 0, 215, 0,
	0, 0, 607, 216, 218, 217, 219, 652, 653, 630,
	697, 0, 0, 0, 0, 0, 220, 221, 675, 676,
	677, 0, 222, 0, 223, 0, 1558, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 659, 661, 700, 0, 367, 232, 0, 229, 0,
	699, 230, 678, 231, 679, 680, 681, 682, 683, 0,
	641, 0, 701, 233, 234, 235, 702, 236, 237, 238,
	0, 240, 239, 0, 664, 703, 241, 704, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 602, 0, 631, 660, 253,
	684, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 706, 259, 707, 654, 260, 261, 262, 263,
	264, 0, 265, 655, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 685, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 603, 1606, 0, 634, 623, 624, 621, 622, 613,
	0, 601, 0, 0, 0, 0, 599, 600, 0, 0,
	182, 183, 0, 184, 0, 609, 0, 0, 651, 616,
	0, 612, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 696, 203, 204, 205, 0, 643,
	644, 646, 0, 645, 647, 206, 207, 405, 208, 672,
	209, 673, 674, 0, 210, 0, 211, 0, 212, 0,
	0, 665, 214, 0, 215, 0, 0, 0, 607, 216,
	218, 217, 219, 652, 653, 630, 697, 0, 0, 0,
	0, 0, 220, 221, 675, 676, 677, 0, 222, 0,
	223, 0, 0, 698, 0, 224, 663, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 659, 661, 700,
	0, 367, 232, 0, 229, 0, 699, 230, 678, 231,
	679, 680, 681, 682, 683, 0, 641, 0, 701, 233,
	234, 235, 702, 236, 237, 238, 0, 240, 239, 0,
	664, 703, 241, 704, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 705, 249, 250, 252,
	251, 602, 0, 631, 660, 253, 684, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 706, 259,
	707, 654, 260, 261, 262, 263, 264, 0, 265, 655,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 685,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 608, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 648, 302, 291, 292, 303, 709,
	304, 686, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 687, 309, 310, 656, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 688, 689, 0,
	0, 321, 322, 657, 658, 629, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 649, 331, 0, 395,
	332, 333, 334, 396, 690, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 603, 1567, 0,
	634, 623, 624, 621, 622, 613, 0, 601, 0, 0,
	0, 0, 599, 600, 0, 0, 182, 183, 0, 184,
	0, 609, 0, 0, 651, 616, 0, 612, 0, 185,
	186, 187, 342, 666, 344, 667, 188, 668, 669, 0,
	189, 348, 349, 190, 191, 619, 650, 670, 671, 352,
	0, 192, 662, 0, 642, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	696, 203, 204, 205, 0, 643, 644, 646, 0, 645,
	647, 206, 207, 405, 208, 672, 209, 673, 674, 0,
	210, 0, 211, 0, 212, 0, 0, 665, 214, 0,
	215, 0, 0, 0, 607, 216, 218, 217, 219, 652,
	653, 630, 697, 0, 0, 0, 0, 0, 220, 221,
	675, 676, 677, 0, 222, 0, 223, 0, 0, 698,
	0, 224, 663, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 659, 661, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 664, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 602, 0, 631,
	660, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 654, 260, 261,
	262, 263, 264, 0, 265, 655, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 608, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 657,
	658, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 396,
	690, 0, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 603, 1565, 0, 634, 623, 624, 621,
	622, 613, 0, 601, 0, 0, 0, 0, 599, 600,
	0, 0, 182, 183, 0, 184, 0, 609, 0, 0,
	651, 616, 0, 612, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 205,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	607, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	0, 0, 0, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 602, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	1549, 0, 634, 623, 624, 621, 622, 613, 0, 601,
	0, 0, 0, 0, 599, 600, 0, 0, 182, 183,
	0, 184, 0, 609, 0, 0, 651, 616, 0, 612,
	0, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 1537, 0, 634, 623,
	624, 621, 622, 613, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 0, 182, 183, 0, 184, 0, 609,
	0, 0, 651, 616, 0, 612, 0, 185, 186, 187,
	342, 666, 344, 667, 188, 668, 669, 0, 189, 348,
	349, 190, 191, 619, 650, 670, 671, 352, 0, 192,
	662, 0, 642, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 696, 203,
	204, 205, 0, 643, 644, 646, 0, 645, 647, 206,
	207, 405, 208, 672, 209, 673, 674, 0, 210, 0,
	211, 0, 212, 0, 0, 665, 214, 0, 215, 0,
	0, 0, 607, 216, 218, 217, 219, 652, 653, 630,
	697, 0, 0, 0, 0, 0, 220, 221, 675, 676,
	677, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	663, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 659, 661, 700, 0, 367, 232, 0, 229, 0,
	699, 230, 678, 231, 679, 680, 681, 682, 683, 0,
	641, 0, 701, 233, 234, 235, 702, 236, 237, 238,
	0, 240, 239, 0, 664, 703, 241, 704, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 602, 0, 631, 660, 253,
	684, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 706, 259, 707, 654, 260, 261, 262, 263,
	264, 0, 265, 655, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 685, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 608, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 648, 302,
	291, 292, 303, 709, 304, 686, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 687, 309, 310, 656, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 688, 689, 0, 0, 321, 322, 657, 658, 629,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	649, 331, 0, 395, 332, 333, 334, 396, 690, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 603, 1535, 0, 1527, 623, 624, 621, 622, 613,
	0, 601, 0, 0, 0, 0, 599, 600, 0, 0,
	182, 183, 0, 184, 0, 609, 0, 0, 651, 616,
	0, 612, 0, 185, 186, 187, 342, 666, 344, 667,
	188, 668, 669, 0, 189, 348, 349, 190, 191, 619,
	650, 670, 671, 352, 0, 192, 662, 0, 642, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 696, 203, 204, 205, 0, 643,
	644, 646, 0, 645, 647, 206, 207, 405, 208, 672,
	1530, 673, 674, 0, 210, 0, 211, 0, 212, 0,
	0, 665, 214, 0, 215, 0, 0, 0, 607, 216,
	218, 217, 219, 652, 653, 630, 697, 0, 0, 0,
	0, 0, 220, 221, 675, 676, 677, 0, 222, 0,
	223, 0, 0, 698, 0, 224, 663, 0, 364, 0,
	0, 225, 1531, 0, 0, 227, 228, 659, 661, 700,
	0, 367, 232, 0, 229, 0, 699, 230, 678, 231,
	679, 680, 681, 682, 683, 0, 641, 0, 701, 233,
	234, 235, 702, 236, 237, 238, 0, 240, 239, 0,
	664, 703, 241, 704, 0, 242, 0, 0, 243, 0,
	244, 1532, 1529, 248, 376, 247, 705, 249, 250, 252,
	251, 602, 0, 631, 660, 253, 684, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 706, 259,
	707, 654, 260, 261, 262, 263, 264, 0, 265, 655,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 685,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 708, 288,
	289, 608, 290, 0, 294, 295, 296, 1533, 0, 299,
	385, 298, 300, 301, 648, 302, 291, 292, 303, 709,
	304, 686, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 687, 309, 310, 656, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 688, 689, 0,
	0, 321, 322, 657, 658, 629, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 649, 331, 0, 395,
	332, 333, 334, 396, 690, 0, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 1528, 340, 603, 1524, 0,
	1527, 623, 624, 621, 622, 613, 0, 601, 0, 0,
	0, 0, 599, 600, 0, 0, 182, 183, 0, 184,
	0, 609, 0, 0, 651, 616, 0, 612, 0, 185,
	186, 187, 342, 666, 344, 667, 188, 668, 669, 0,
	189, 348, 349, 190, 191, 619, 650, 670, 671, 352,
	0, 192, 662, 0, 642, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	696, 203, 204, 205, 0, 643, 644, 646, 0, 645,
	647, 206, 207, 405, 208, 672, 1530, 673, 674, 0,
	210, 0, 211, 0, 212, 0, 0, 665, 214, 0,
	215, 0, 0, 0, 607, 216, 218, 217, 219, 652,
	653, 630, 697, 0, 0, 0, 0, 0, 220, 221,
	675, 676, 677, 0, 222, 0, 223, 0, 0, 698,
	0, 224, 663, 0, 364, 0, 0, 225, 1531, 0,
	0, 227, 228, 659, 661, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 664, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 1532, 1529, 248,
	376, 247, 705, 249, 250, 252, 251, 602, 0, 631,
	660, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 654, 260, 261,
	262, 263, 264, 0, 265, 655, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 608, 290, 0,
	294, 295, 296, 1533, 0, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 657,
	658, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 396,
	690, 0, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 1528, 340, 603, 0, 634, 623, 624, 621, 622,
	613, 0, 0, 601, 0, 0, 0, 0, 599, 600,
	0, 182, 183, 0, 184, 0, 0, 609, 0, 651,
	616, 0, 0, 612, 185, 186, 187, 342, 666, 344,
	667, 188, 668, 669, 0, 189, 348, 349, 190, 191,
	619, 650, 670, 671, 352, 0, 192, 662, 0, 642,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 696, 203, 204, 205, 0,
	643, 644, 646, 0, 645, 647, 206, 207, 405, 208,
	672, 209, 673, 674, 0, 210, 0, 211, 0, 212,
	0, 0, 665, 214, 0, 215, 0, 0, 0, 607,
	216, 218, 217, 219, 652, 653, 630, 697, 0, 0,
	0, 0, 0, 220, 221, 675, 676, 677, 0, 222,
	0, 223, 0, 0, 698, 0, 224, 663, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 659, 661,
	700, 0, 367, 232, 0, 229, 0, 699, 230, 678,
	231, 679, 680, 681, 682, 683, 0, 641, 0, 701,
	233, 234, 235, 702, 236, 237, 238, 0, 240, 239,
	0, 664, 703, 241, 704, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 705, 249, 250,
	252, 251, 602, 0, 631, 660, 253, 684, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 706,
	259, 707, 654, 260, 261, 262, 263, 264, 0, 265,
	655, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	685, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 708,
	288, 289, 608, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 648, 302, 291, 292, 303,
	709, 304, 686, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 687, 309, 310, 656, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 688, 689,
	0, 0, 321, 322, 657, 658, 629, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 649, 331, 0,
	395, 332, 333, 334, 396, 690, 0, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 603, 0,
	634, 623, 624, 621, 622, 613, 0, 0, 601, 0,
	0, 0, 0, 599, 600, 0, 182, 183, 1390, 184,
	1108, 0, 609, 0, 651, 616, 0, 0, 612, 185,
	186, 187, 342, 666, 344, 667, 188, 668, 669, 0,
	189, 348, 349, 190, 191, 619, 650, 670, 671, 352,
	0, 192, 662, 0, 642, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	696, 203, 204, 205, 0, 643, 644, 646, 0, 645,
	647, 206, 207, 405, 208, 672, 209, 673, 674, 0,
	210, 0, 211, 0, 212, 0, 0, 665, 214, 0,
	215, 0, 0, 0, 607, 216, 218, 217, 219, 652,
	653, 630, 697, 0, 0, 0, 0, 0, 220, 221,
	675, 676, 677, 0, 222, 0, 223, 0, 0, 698,
	0, 224, 663, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 659, 661, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 664, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 602, 0, 631,
	660, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 654, 260, 261,
	262, 263, 264, 0, 265, 655, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 608, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	648, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	656, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 657,
	658, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 649, 331, 0, 395, 332, 333, 334, 396,
	690, 0, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 603, 865, 0, 634, 623, 624, 621,
	622, 613, 0, 601, 0, 0, 0, 0, 599, 600,
	0, 0, 182, 183, 0, 184, 0, 609, 0, 0,
	651, 616, 0, 612, 0, 185, 186, 187, 342, 666,
	344, 667, 188, 668, 669, 0, 189, 348, 349, 190,
	191, 619, 650, 670, 671, 352, 0, 192, 662, 0,
	642, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 696, 203, 204, 205,
	0, 643, 644, 646, 0, 645, 647, 206, 207, 405,
	208, 672, 209, 673, 674, 0, 210, 0, 211, 0,
	212, 0, 0, 665, 214, 0, 215, 0, 0, 0,
	607, 216, 218, 217, 219, 652, 653, 630, 697, 0,
	0, 0, 0, 0, 220, 221, 675, 676, 677, 0,
	222, 0, 223, 0, 0, 698, 0, 224, 663, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 659,
	661, 700, 0, 367, 232, 0, 229, 0, 699, 230,
	678, 231, 679, 680, 681, 682, 683, 0, 641, 0,
	701, 233, 234, 235, 702, 236, 237, 238, 0, 240,
	239, 0, 664, 703, 241, 704, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 705, 249,
	250, 252, 251, 602, 0, 631, 660, 253, 684, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	706, 259, 707, 654, 260, 261, 262, 263, 264, 0,
	265, 655, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 685, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	708, 288, 289, 608, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 648, 302, 291, 292,
	303, 709, 304, 686, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 687, 309, 310, 656, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 688,
	689, 0, 0, 321, 322, 657, 658, 629, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 649, 331,
	0, 395, 332, 333, 334, 396, 690, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 603,
	863, 0, 634, 623, 624, 621, 622, 613, 0, 601,
	0, 0, 0, 0, 599, 600, 0, 0, 182, 183,
	0, 184, 0, 609, 0, 0, 651, 616, 0, 612,
	0, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 0, 634, 623, 624,
	621, 622, 613, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 182, 183, 0, 184, 0, 0, 609,
	0, 651, 616, 0, 0, 612, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	2495, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 2494, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 0, 634, 623, 624, 621, 622, 613, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 182, 183,
	0, 184, 0, 0, 609, 0, 651, 616, 0, 0,
	612, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 603, 0, 634, 623, 624,
	621, 622, 613, 0, 0, 601, 0, 0, 0, 0,
	599, 600, 0, 182, 183, 0, 184, 0, 0, 609,
	0, 651, 616, 0, 0, 612, 185, 186, 187, 2493,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 619, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	2495, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 607, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 602, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 608, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 2494, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	603, 0, 634, 623, 624, 621, 622, 613, 0, 0,
	601, 0, 0, 0, 0, 599, 600, 0, 182, 183,
	0, 184, 0, 0, 609, 0, 651, 616, 0, 0,
	612, 185, 186, 187, 342, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 0,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 1547,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 709, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 634, 623, 624,
	621, 622, 613, 0, 0, 1545, 0, 0, 0, 0,
	1543, 1544, 0, 182, 183, 0, 184, 0, 0, 1546,
	0, 651, 616, 0, 0, 612, 185, 186, 187, 342,
	666, 344, 667, 188, 668, 669, 0, 189, 348, 349,
	190, 191, 0, 650, 670, 671, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 672, 209, 673, 674, 0, 210, 0, 211,
	0, 212, 0, 0, 665, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 652, 653, 630, 697,
	0, 0, 0, 0, 0, 220, 221, 675, 676, 677,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 678, 231, 679, 680, 681, 682, 683, 0, 641,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 0, 0, 631, 660, 253, 684,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 685, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 1547, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 686, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 687, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	688, 689, 0, 0, 321, 322, 657, 658, 629, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 690, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 634, 623, 624, 621, 622, 613, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 1546, 0, 651, 616, 0, 0,
	612, 185, 186, 187, 0, 666, 344, 667, 188, 668,
	669, 0, 189, 348, 349, 190, 191, 619, 650, 670,
	671, 352, 0, 192, 662, 0, 642, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 2495, 0, 643, 644, 646,
	0, 645, 647, 206, 207, 405, 208, 672, 209, 673,
	674, 0, 210, 0, 211, 0, 212, 0, 0, 665,
	214, 0, 215, 0, 0, 0, 607, 216, 218, 217,
	219, 652, 653, 630, 697, 0, 0, 0, 0, 0,
	220, 221, 675, 676, 677, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 663, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 659, 661, 0, 0, 367,
	232, 0, 229, 0, 699, 230, 678, 231, 679, 680,
	681, 682, 683, 0, 641, 0, 0, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 664, 703,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 602,
	0, 631, 660, 253, 684, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 654,
	260, 261, 262, 263, 264, 0, 265, 655, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 685, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 608,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 648, 302, 291, 292, 303, 0, 304, 686,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 687,
	309, 310, 656, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 688, 689, 0, 0, 321,
	322, 657, 658, 629, 323, 324, 2494, 326, 0, 0,
	327, 328, 329, 330, 649, 331, 0, 395, 332, 333,
	334, 396, 690, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 634, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	599, 600, 0, 182, 183, 0, 184, 0, 0, 609,
	0, 651, 0, 0, 0, 612, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 650, 350, 351, 352, 0, 192, 662,
	0, 642, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 643, 644, 646, 0, 645, 647, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 652, 653, 0, 697,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 663,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	659, 661, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 664, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 0, 0, 0, 660, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 654, 260, 261, 262, 263, 264,
	0, 265, 655, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 648, 302, 291,
	292, 303, 709, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 656, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 657, 658, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 649,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	915, 0, 918, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 2133, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 772, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 696, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 697, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 698, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 700, 0, 367,
	232, 0, 229, 0, 699, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 701, 233, 234, 235,
	702, 236, 237, 238, 0, 240, 239, 0, 375, 703,
	241, 704, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 705, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 706, 259, 707, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 708, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 138, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 709, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 140, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 922, 397, 0, 0, 335, 0, 0, 0, 132,
	336, 337, 338, 339, 340, 585, 133, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 123,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 750, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 138, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	140, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 922, 397, 0, 0,
	335, 0, 0, 0, 132, 336, 337, 338, 339, 340,
	0, 133, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 744, 0, 1189, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	750, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 138, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 140, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 922, 397, 0, 0, 335, 0, 0, 0, 132,
	336, 337, 338, 339, 340, 585, 133, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 744, 0, 1189,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 138, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	140, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 922, 397, 0, 0,
	335, 0, 0, 0, 132, 336, 337, 338, 339, 340,
	1876, 133, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 123, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	750, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 743, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 744, 0, 749,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 750, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 744, 0, 749, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 750,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 744, 0, 749, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 1222, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 1692, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 2046,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	634, 623, 624, 621, 622, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 1192, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 666, 344, 667, 188, 668, 669, 0,
	189, 348, 349, 190, 191, 0, 0, 670, 671, 352,
	0, 192, 353, 0, 772, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	696, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 672, 209, 673, 674, 0,
	210, 0, 211, 0, 212, 0, 0, 665, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 630, 697, 0, 0, 0, 0, 0, 220, 221,
	675, 676, 677, 0, 222, 0, 223, 0, 0, 698,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 678, 231, 679, 680, 681, 682,
	683, 0, 641, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 375, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 0, 0, 631,
	377, 253, 684, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 685, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 709, 304, 686, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 687, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 688, 689, 0, 0, 321, 322, 393,
	394, 629, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	690, 0, 490, 335, 179, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 175, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 174, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 172, 335, 179, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 178, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 175, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 174, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	179, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 178, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 175, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 174, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 179, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	178, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 972, 0, 918, 976, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 772, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 696, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 697,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 698, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 700, 0, 367, 232, 0, 229, 0, 699,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 701, 233, 234, 235, 702, 236, 237, 238, 0,
	240, 239, 0, 375, 703, 241, 704, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 705,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 706, 259, 707, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 708, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 709, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 918, 976,
	335, 0, 0, 974, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 772, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 696, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	697, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 698, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 700, 0, 367, 232, 0, 229, 0,
	699, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 701, 233, 234, 235, 702, 236, 237, 238,
	0, 240, 239, 0, 375, 703, 241, 704, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	705, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 706, 259, 707, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 708, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 709, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 918,
	976, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 772, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 696,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 697, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 698, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 700, 0, 367, 232, 0, 229,
	0, 699, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 701, 233, 234, 235, 702, 236, 237,
	238, 0, 240, 239, 0, 375, 703, 241, 704, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 705, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 706, 259, 707, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 708, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 709, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	918, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 772, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	696, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 697, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 698,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 700, 0, 367, 232, 0,
	229, 0, 699, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 701, 233, 234, 235, 702, 236,
	237, 238, 0, 240, 239, 0, 375, 703, 241, 704,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 705, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 706, 259, 707, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 708, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 709, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 179, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 1626, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 1624, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 1668, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 1629, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	1666, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	1628, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 1667, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 179, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 1626, 192, 353, 0, 0, 1621, 193, 194,
	195, 0, 197, 198, 199, 196, 1624, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 1629,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 1620, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 1628, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 1627,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 893, 335, 179, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 750, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 756, 335,
	179, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 758, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 750, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 752, 335, 179, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 754, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 750, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 422, 335, 179, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 421, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 420, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 179,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 1609, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	179, 2200, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 179, 2200, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	2197, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 179, 0, 335, 0, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	750, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 1379, 335, 179, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 1377, 335,
	179, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 179, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 182, 183, 1359,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 365, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 516, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 951, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 365, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 518, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 513, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 1237, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 1236, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 516, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 951, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 518, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 513, 391, 392, 0, 0,
	321, 952, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 516, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 507, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 518, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 935, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 513,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 0, 911,
	335, 179, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 0, 0, 182, 183, 0,
	184, 0, 0, 0, 0, 341, 0, 0, 0, 0,
	185, 186, 187, 342, 343, 344, 345, 188, 346, 347,
	0, 189, 348, 349, 190, 191, 0, 0, 350, 351,
	352, 0, 192, 353, 0, 0, 0, 193, 194, 195,
	0, 197, 198, 199, 196, 0, 200, 0, 201, 202,
	0, 0, 203, 204, 205, 0, 0, 0, 0, 0,
	0, 0, 206, 207, 405, 208, 354, 209, 355, 356,
	0, 210, 0, 211, 0, 212, 0, 0, 213, 214,
	0, 215, 0, 0, 0, 357, 216, 218, 217, 219,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 360, 361, 362, 0, 222, 0, 223, 0, 0,
	0, 0, 224, 363, 0, 364, 0, 0, 225, 226,
	0, 0, 227, 228, 910, 366, 0, 0, 367, 232,
	0, 229, 0, 0, 230, 368, 231, 369, 370, 371,
	372, 373, 0, 374, 0, 0, 233, 234, 235, 0,
	236, 237, 238, 0, 240, 239, 0, 375, 0, 241,
	0, 0, 242, 0, 0, 243, 0, 244, 245, 246,
	248, 376, 247, 0, 249, 250, 252, 251, 0, 0,
	0, 377, 253, 378, 254, 255, 0, 256, 0, 0,
	257, 0, 0, 258, 379, 0, 259, 0, 380, 260,
	261, 262, 263, 264, 0, 265, 381, 266, 382, 267,
	0, 268, 269, 270, 271, 272, 383, 273, 274, 0,
	275, 276, 277, 278, 279, 0, 281, 282, 280, 283,
	284, 285, 286, 0, 287, 0, 288, 289, 384, 290,
	0, 294, 295, 296, 297, 0, 299, 385, 298, 300,
	301, 0, 302, 291, 292, 303, 0, 304, 386, 387,
	305, 0, 312, 306, 307, 293, 308, 311, 388, 309,
	310, 389, 0, 313, 0, 314, 315, 316, 317, 318,
	319, 320, 0, 390, 391, 392, 0, 0, 321, 322,
	393, 394, 0, 323, 324, 325, 326, 0, 0, 327,
	328, 329, 330, 0, 331, 0, 395, 332, 333, 334,
	396, 397, 0, 908, 335, 179, 0, 0, 0, 336,
	337, 338, 339, 340, 0, 0, 0, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 907, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 0, 904, 335, 179,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 903, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 273, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	0, 901, 335, 179, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 900, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 0, 897, 335, 179, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	896, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 294, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 179, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 885, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	883, 335, 179, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 882, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 879, 335, 179, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 877, 335,
	179, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 876, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 872, 335, 179, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 874, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 762, 335, 179, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 764, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	760, 335, 179, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 0, 516, 335, 179, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 507, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 365,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 506, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 518, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 508, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 509, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 513, 391,
	392, 0, 0, 321, 511, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 0, 498, 335,
	179, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	262, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 271, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 290, 0,
	499, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 496, 335, 179, 0, 0, 0, 336, 337,
	338, 339, 340, 0, 0, 0, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 365, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 0, 488, 335, 179, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 0, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 302,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 0,
	445, 335, 179, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 0, 0, 0, 182, 183,
	0, 184, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 185, 186, 187, 342, 343, 344, 345, 188, 346,
	347, 0, 189, 348, 349, 190, 191, 0, 0, 350,
	351, 352, 0, 192, 353, 0, 0, 0, 193, 194,
	195, 0, 197, 198, 199, 196, 0, 200, 0, 201,
	202, 0, 0, 203, 204, 205, 0, 0, 0, 0,
	0, 0, 0, 206, 207, 405, 208, 354, 209, 355,
	356, 0, 210, 0, 211, 0, 212, 0, 0, 213,
	214, 0, 215, 0, 0, 0, 357, 216, 218, 217,
	219, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 360, 361, 362, 0, 222, 0, 223, 0,
	0, 0, 0, 224, 363, 0, 364, 0, 0, 225,
	226, 0, 0, 227, 228, 365, 366, 0, 0, 367,
	232, 0, 229, 0, 0, 230, 368, 231, 369, 370,
	371, 372, 373, 0, 374, 0, 0, 233, 234, 235,
	0, 236, 237, 238, 0, 240, 239, 0, 375, 0,
	241, 0, 0, 242, 0, 0, 243, 0, 244, 245,
	246, 248, 376, 247, 0, 249, 250, 252, 251, 0,
	0, 0, 377, 253, 378, 254, 255, 0, 256, 0,
	0, 257, 0, 0, 258, 379, 0, 259, 0, 380,
	260, 261, 262, 263, 264, 0, 265, 381, 266, 382,
	267, 0, 268, 269, 270, 271, 272, 383, 273, 274,
	0, 275, 276, 277, 278, 279, 0, 281, 282, 280,
	283, 284, 285, 286, 0, 287, 0, 288, 289, 384,
	290, 0, 294, 295, 296, 297, 0, 299, 385, 298,
	300, 301, 0, 302, 291, 292, 303, 0, 304, 386,
	387, 305, 0, 312, 306, 307, 293, 308, 311, 388,
	309, 310, 389, 0, 313, 0, 314, 315, 316, 317,
	318, 319, 320, 0, 390, 391, 392, 0, 0, 321,
	322, 393, 394, 0, 323, 324, 325, 326, 0, 0,
	327, 328, 329, 330, 0, 331, 0, 395, 332, 333,
	334, 396, 397, 179, 0, 335, 0, 0, 0, 0,
	336, 337, 338, 339, 340, 0, 0, 0, 0, 182,
	183, 0, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 185, 186, 187, 342, 343, 344, 345, 188,
	346, 347, 0, 189, 348, 349, 190, 191, 0, 0,
	350, 351, 352, 0, 192, 353, 0, 0, 0, 193,
	194, 195, 0, 197, 198, 199, 196, 0, 200, 0,
	201, 202, 0, 0, 203, 204, 205, 0, 0, 0,
	0, 0, 0, 0, 206, 207, 405, 208, 354, 209,
	355, 356, 0, 210, 0, 211, 0, 212, 0, 0,
	213, 214, 0, 215, 0, 0, 0, 357, 216, 218,
	217, 219, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 360, 361, 362, 0, 222, 0, 223,
	0, 0, 0, 0, 224, 363, 0, 364, 0, 0,
	225, 226, 0, 0, 227, 228, 365, 366, 0, 0,
	367, 232, 0, 229, 0, 0, 230, 368, 231, 369,
	370, 371, 372, 373, 0, 374, 0, 0, 233, 234,
	235, 0, 236, 237, 238, 0, 240, 239, 0, 375,
	0, 241, 0, 0, 242, 0, 0, 243, 0, 244,
	245, 246, 248, 376, 247, 0, 249, 250, 252, 251,
	0, 0, 0, 377, 253, 378, 254, 255, 0, 256,
	0, 0, 257, 0, 0, 258, 379, 0, 259, 0,
	380, 260, 261, 262, 263, 264, 0, 265, 381, 266,
	382, 267, 0, 268, 269, 270, 271, 272, 383, 273,
	274, 0, 275, 276, 277, 278, 279, 0, 281, 282,
	280, 283, 284, 285, 286, 0, 287, 0, 288, 289,
	384, 290, 0, 294, 295, 296, 297, 0, 299, 385,
	298, 300, 301, 0, 302, 291, 292, 303, 0, 304,
	386, 387, 305, 0, 312, 306, 307, 293, 308, 311,
	388, 309, 310, 389, 0, 313, 0, 314, 315, 316,
	317, 318, 319, 320, 0, 390, 391, 392, 0, 0,
	321, 322, 393, 394, 0, 323, 324, 325, 326, 0,
	0, 327, 328, 329, 330, 0, 331, 0, 395, 332,
	333, 334, 396, 397, 179, 0, 335, 0, 0, 0,
	0, 336, 337, 338, 339, 340, 0, 0, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 0, 185, 186, 187, 342, 343, 344, 345,
	188, 346, 347, 0, 189, 348, 349, 190, 191, 0,
	0, 350, 351, 352, 0, 192, 353, 0, 0, 0,
	193, 194, 195, 0, 197, 198, 199, 196, 0, 200,
	0, 201, 202, 0, 0, 203, 204, 205, 0, 0,
	0, 0, 0, 0, 0, 206, 207, 405, 208, 354,
	209, 355, 356, 0, 210, 0, 211, 0, 212, 0,
	0, 213, 214, 0, 215, 0, 0, 0, 357, 216,
	218, 217, 219, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 360, 361, 362, 0, 222, 0,
	223, 0, 0, 0, 0, 224, 363, 0, 364, 0,
	0, 225, 226, 0, 0, 227, 228, 1923, 366, 0,
	0, 367, 232, 0, 229, 0, 0, 230, 368, 231,
	369, 370, 371, 372, 373, 0, 374, 0, 0, 233,
	234, 235, 0, 236, 237, 238, 0, 240, 239, 0,
	375, 0, 241, 0, 0, 242, 0, 0, 243, 0,
	244, 245, 246, 248, 376, 247, 0, 249, 250, 252,
	251, 0, 0, 0, 377, 253, 378, 254, 255, 0,
	256, 0, 0, 257, 0, 0, 258, 379, 0, 259,
	0, 380, 260, 261, 262, 263, 264, 0, 265, 381,
	266, 382, 267, 0, 268, 269, 270, 271, 272, 383,
	273, 274, 0, 275, 276, 277, 278, 279, 0, 281,
	282, 280, 283, 284, 285, 286, 0, 287, 0, 288,
	289, 384, 290, 0, 294, 295, 296, 297, 0, 299,
	385, 298, 300, 301, 0, 302, 291, 292, 303, 0,
	304, 386, 387, 305, 0, 312, 306, 307, 293, 308,
	311, 388, 309, 310, 389, 0, 313, 0, 314, 315,
	316, 317, 318, 319, 320, 0, 390, 391, 392, 0,
	0, 321, 322, 393, 394, 0, 323, 324, 325, 326,
	0, 0, 327, 328, 329, 330, 0, 331, 0, 395,
	332, 333, 334, 396, 397, 179, 0, 335, 0, 0,
	0, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 182, 183, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 185, 186, 187, 342, 343, 344,
	345, 188, 346, 347, 0, 189, 348, 349, 190, 191,
	0, 0, 350, 351, 352, 0, 192, 353, 0, 0,
	0, 193, 194, 195, 0, 197, 198, 199, 196, 0,
	200, 0, 201, 202, 0, 0, 203, 204, 205, 0,
	0, 0, 0, 0, 0, 0, 206, 207, 405, 208,
	354, 209, 355, 356, 0, 210, 0, 211, 0, 212,
	0, 0, 213, 214, 0, 215, 0, 0, 0, 357,
	216, 218, 217, 219, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 360, 361, 362, 0, 222,
	0, 223, 0, 0, 0, 0, 224, 363, 0, 364,
	0, 0, 225, 226, 0, 0, 227, 228, 1921, 366,
	0, 0, 367, 232, 0, 229, 0, 0, 230, 368,
	231, 369, 370, 371, 372, 373, 0, 374, 0, 0,
	233, 234, 235, 0, 236, 237, 238, 0, 240, 239,
	0, 375, 0, 241, 0, 0, 242, 0, 0, 243,
	0, 244, 245, 246, 248, 376, 247, 0, 249, 250,
	252, 251, 0, 0, 0, 377, 253, 378, 254, 255,
	0, 256, 0, 0, 257, 0, 0, 258, 379, 0,
	259, 0, 380, 260, 261, 262, 263, 264, 0, 265,
	381, 266, 382, 267, 0, 268, 269, 270, 271, 272,
	383, 273, 274, 0, 275, 276, 277, 278, 279, 0,
	281, 282, 280, 283, 284, 285, 286, 0, 287, 0,
	288, 289, 384, 290, 0, 294, 295, 296, 297, 0,
	299, 385, 298, 300, 301, 0, 302, 291, 292, 303,
	0, 304, 386, 387, 305, 0, 312, 306, 307, 293,
	308, 311, 388, 309, 310, 389, 0, 313, 0, 314,
	315, 316, 317, 318, 319, 320, 0, 390, 391, 392,
	0, 0, 321, 322, 393, 394, 0, 323, 324, 325,
	326, 0, 0, 327, 328, 329, 330, 0, 331, 0,
	395, 332, 333, 334, 396, 397, 179, 0, 335, 0,
	0, 0, 0, 336, 337, 338, 339, 340, 0, 0,
	0, 0, 182, 183, 0, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 185, 186, 187, 342, 343,
	344, 345, 188, 346, 347, 0, 189, 348, 349, 190,
	191, 0, 0, 350, 351, 352, 0, 192, 353, 0,
	0, 0, 193, 194, 195, 0, 197, 198, 199, 196,
	0, 200, 0, 201, 202, 0, 0, 203, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 206, 207, 405,
	208, 354, 209, 355, 356, 0, 210, 0, 211, 0,
	212, 0, 0, 213, 214, 0, 215, 0, 0, 0,
	357, 216, 218, 217, 219, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 360, 361, 362, 0,
	222, 0, 223, 0, 0, 0, 0, 224, 363, 0,
	364, 0, 0, 225, 226, 0, 0, 227, 228, 1910,
	366, 0, 0, 367, 232, 0, 229, 0, 0, 230,
	368, 231, 369, 370, 371, 372, 373, 0, 374, 0,
	0, 233, 234, 235, 0, 236, 237, 238, 0, 240,
	239, 0, 375, 0, 241, 0, 0, 242, 0, 0,
	243, 0, 244, 245, 246, 248, 376, 247, 0, 249,
	250, 252, 251, 0, 0, 0, 377, 253, 378, 254,
	255, 0, 256, 0, 0, 257, 0, 0, 258, 379,
	0, 259, 0, 380, 260, 261, 262, 263, 264, 0,
	265, 381, 266, 382, 267, 0, 268, 269, 270, 271,
	272, 383, 273, 274, 0, 275, 276, 277, 278, 279,
	0, 281, 282, 280, 283, 284, 285, 286, 0, 287,
	0, 288, 289, 384, 290, 0, 294, 295, 296, 297,
	0, 299, 385, 298, 300, 301, 0, 302, 291, 292,
	303, 0, 304, 386, 387, 305, 0, 312, 306, 307,
	293, 308, 311, 388, 309, 310, 389, 0, 313, 0,
	314, 315, 316, 317, 318, 319, 320, 0, 390, 391,
	392, 0, 0, 321, 322, 393, 394, 0, 323, 324,
	325, 326, 0, 0, 327, 328, 329, 330, 0, 331,
	0, 395, 332, 333, 334, 396, 397, 179, 0, 335,
	0, 0, 0, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 182, 183, 0, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 185, 186, 187, 342,
	343, 344, 345, 188, 346, 347, 0, 189, 348, 349,
	190, 191, 0, 0, 350, 351, 352, 0, 192, 353,
	0, 0, 0, 193, 194, 195, 0, 197, 198, 199,
	196, 0, 200, 0, 201, 202, 0, 0, 203, 204,
	205, 0, 0, 0, 0, 0, 0, 0, 206, 207,
	405, 208, 354, 209, 355, 356, 0, 210, 0, 211,
	0, 212, 0, 0, 213, 214, 0, 215, 0, 0,
	0, 357, 216, 218, 217, 219, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 360, 361, 362,
	0, 222, 0, 223, 0, 0, 0, 0, 224, 363,
	0, 364, 0, 0, 225, 226, 0, 0, 227, 228,
	365, 366, 0, 0, 367, 232, 0, 229, 0, 0,
	230, 368, 231, 369, 370, 371, 372, 373, 0, 374,
	0, 0, 233, 234, 235, 0, 236, 237, 238, 0,
	240, 239, 0, 375, 0, 241, 0, 0, 242, 0,
	0, 243, 0, 244, 245, 246, 248, 376, 247, 0,
	249, 250, 252, 251, 0, 0, 0, 377, 253, 378,
	254, 255, 0, 256, 0, 0, 257, 0, 0, 258,
	379, 0, 259, 0, 380, 260, 261, 262, 263, 264,
	0, 265, 381, 266, 382, 267, 0, 268, 269, 270,
	271, 272, 383, 273, 274, 0, 275, 276, 277, 278,
	279, 0, 281, 282, 280, 283, 284, 285, 286, 0,
	287, 0, 288, 289, 384, 290, 0, 499, 295, 296,
	297, 0, 299, 385, 298, 300, 301, 0, 302, 291,
	292, 303, 0, 304, 386, 387, 305, 0, 312, 306,
	307, 293, 308, 311, 388, 309, 310, 389, 0, 313,
	0, 314, 315, 316, 317, 318, 319, 320, 0, 390,
	391, 392, 0, 0, 321, 322, 393, 394, 0, 323,
	324, 325, 326, 0, 0, 327, 328, 329, 330, 0,
	331, 0, 395, 332, 333, 334, 396, 397, 179, 0,
	335, 0, 0, 0, 0, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 182, 183, 0, 184, 0, 0,
	0, 0, 341, 0, 1247, 0, 0, 185, 186, 187,
	342, 343, 344, 345, 188, 346, 347, 0, 189, 348,
	349, 190, 191, 0, 0, 350, 351, 352, 0, 192,
	353, 0, 0, 0, 193, 194, 195, 0, 197, 198,
	199, 196, 0, 200, 0, 201, 202, 0, 0, 203,
	204, 205, 0, 0, 0, 0, 0, 0, 0, 206,
	207, 405, 208, 354, 209, 355, 356, 0, 210, 0,
	211, 0, 212, 0, 0, 213, 214, 0, 215, 0,
	0, 0, 357, 216, 218, 217, 219, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 360, 361,
	362, 0, 222, 0, 223, 0, 0, 0, 0, 224,
	363, 0, 364, 0, 0, 225, 226, 0, 0, 227,
	228, 365, 366, 0, 0, 367, 232, 0, 229, 0,
	0, 230, 368, 231, 369, 370, 371, 372, 373, 0,
	374, 0, 0, 233, 234, 235, 0, 236, 237, 238,
	0, 240, 239, 0, 375, 0, 241, 0, 0, 242,
	0, 0, 243, 0, 244, 245, 246, 248, 376, 247,
	0, 249, 250, 252, 251, 0, 0, 0, 377, 253,
	378, 254, 255, 0, 256, 0, 0, 257, 0, 0,
	258, 379, 0, 259, 0, 380, 260, 261, 262, 263,
	264, 0, 265, 381, 266, 382, 267, 0, 268, 269,
	270, 271, 272, 383, 273, 274, 0, 275, 276, 277,
	278, 279, 0, 281, 282, 280, 283, 284, 285, 286,
	0, 287, 0, 288, 289, 384, 290, 0, 294, 295,
	296, 297, 0, 299, 385, 298, 300, 301, 0, 0,
	291, 292, 303, 0, 304, 386, 387, 305, 0, 312,
	306, 307, 293, 308, 311, 388, 309, 310, 389, 0,
	313, 0, 314, 315, 316, 317, 318, 319, 320, 0,
	390, 391, 392, 0, 0, 321, 322, 393, 394, 0,
	323, 324, 325, 326, 0, 0, 327, 328, 329, 330,
	0, 331, 0, 395, 332, 333, 334, 396, 397, 179,
	0, 335, 0, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 0, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 185, 186,
	187, 342, 343, 344, 345, 188, 346, 347, 0, 189,
	348, 349, 190, 191, 0, 0, 350, 351, 352, 0,
	192, 353, 0, 0, 0, 193, 194, 195, 0, 197,
	198, 199, 196, 0, 200, 0, 201, 202, 0, 0,
	203, 204, 205, 0, 0, 0, 0, 0, 0, 0,
	206, 207, 405, 208, 354, 209, 355, 356, 0, 210,
	0, 211, 0, 212, 0, 0, 213, 214, 0, 215,
	0, 0, 0, 357, 216, 218, 217, 219, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 360,
	361, 362, 0, 222, 0, 223, 0, 0, 0, 0,
	224, 363, 0, 364, 0, 0, 225, 226, 0, 0,
	227, 228, 365, 366, 0, 0, 367, 232, 0, 229,
	0, 0, 230, 368, 231, 369, 370, 371, 372, 373,
	0, 374, 0, 0, 233, 234, 235, 0, 236, 237,
	238, 0, 240, 239, 0, 375, 0, 241, 0, 0,
	242, 0, 0, 243, 0, 244, 245, 246, 248, 376,
	247, 0, 249, 250, 252, 251, 0, 0, 0, 377,
	253, 378, 254, 255, 0, 256, 0, 0, 257, 0,
	0, 258, 379, 0, 259, 0, 380, 260, 261, 262,
	263, 264, 0, 265, 381, 266, 382, 267, 0, 268,
	269, 270, 271, 272, 383, 726, 274, 0, 275, 276,
	277, 278, 279, 0, 281, 282, 280, 283, 284, 285,
	286, 0, 287, 0, 288, 289, 384, 290, 0, 294,
	295, 296, 297, 0, 299, 385, 298, 300, 301, 0,
	302, 291, 292, 303, 0, 304, 386, 387, 305, 0,
	312, 306, 307, 293, 308, 311, 388, 309, 310, 389,
	0, 313, 0, 314, 315, 316, 317, 318, 319, 320,
	0, 390, 391, 392, 0, 0, 321, 322, 393, 394,
	0, 323, 324, 325, 326, 0, 0, 327, 328, 329,
	330, 0, 331, 0, 395, 332, 333, 334, 396, 397,
	179, 0, 335, 0, 0, 0, 0, 336, 337, 338,
	339, 340, 0, 0, 0, 0, 182, 183, 0, 184,
	0, 0, 0, 0, 341, 0, 0, 0, 0, 185,
	186, 187, 342, 343, 344, 345, 188, 346, 347, 0,
	189, 348, 349, 190, 191, 0, 0, 350, 351, 352,
	0, 192, 353, 0, 0, 0, 193, 194, 195, 0,
	197, 198, 199, 196, 0, 200, 0, 201, 202, 0,
	0, 203, 204, 205, 0, 0, 0, 0, 0, 0,
	0, 206, 207, 405, 208, 354, 209, 355, 356, 0,
	210, 0, 211, 0, 212, 0, 0, 213, 214, 0,
	215, 0, 0, 0, 357, 216, 218, 217, 219, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	360, 361, 362, 0, 222, 0, 223, 0, 0, 0,
	0, 224, 363, 0, 364, 0, 0, 225, 226, 0,
	0, 227, 228, 365, 366, 0, 0, 367, 232, 0,
	229, 0, 0, 230, 368, 231, 369, 370, 371, 372,
	373, 0, 374, 0, 0, 233, 234, 235, 0, 236,
	237, 238, 0, 240, 239, 0, 375, 0, 241, 0,
	0, 242, 0, 0, 243, 0, 244, 245, 246, 248,
	376, 247, 0, 249, 250, 252, 251, 0, 0, 0,
	377, 253, 378, 254, 255, 0, 256, 0, 0, 257,
	0, 0, 258, 379, 0, 259, 0, 380, 260, 261,
	0, 263, 264, 0, 265, 381, 266, 382, 267, 0,
	268, 269, 270, 0, 272, 383, 273, 274, 0, 275,
	276, 277, 278, 279, 0, 281, 282, 280, 283, 284,
	285, 286, 0, 287, 0, 288, 289, 384, 0, 0,
	294, 295, 296, 297, 0, 299, 385, 298, 300, 301,
	0, 302, 291, 292, 303, 0, 304, 386, 387, 305,
	0, 312, 306, 307, 293, 308, 311, 388, 309, 310,
	389, 0, 313, 0, 314, 315, 316, 317, 318, 319,
	320, 0, 390, 391, 392, 0, 0, 321, 322, 393,
	394, 0, 323, 324, 325, 326, 0, 0, 327, 328,
	329, 330, 0, 331, 0, 395, 332, 333, 334, 396,
	397, 0, 0, 335, 0, 0, 0, 0, 336, 337,
	338, 339, 340, 1041, 1042, 0, 1071, 1072, 1073, 1081,
	1082, 1083, 0, 0, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 1042,
	0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0, 0,
	1043, 0, 0, 0, 1074, 0, 1063, 0, 0, 0,
	0, 1044, 0, 1060, 1085, 0, 0, 0, 1816, 1817,
	0, 1834, 1835, 1836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2019, 1043, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 1067, 1068, 1069, 0, 0, 0, 0, 0,
	1049, 1831, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 1086, 0, 0, 1066, 1067, 1068, 1069,
	0, 0, 0, 0, 0, 1049, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 1078, 1086, 0,
	0, 0, 1064, 0, 0, 1822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 1837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 1075, 0, 0, 0, 0, 1832, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 1041, 1042, 0,
	1071, 1072, 1073, 1081, 1082, 1083, 0, 0, 0, 0,
	0, 0, 1079, 1074, 0, 0, 1070, 0, 0, 0,
	1044, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 1079, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 1833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 1055, 1056, 1062, 1061, 1057, 1058, 1059,
	1080, 0, 1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050,
	1051, 0, 0, 0, 0, 1066, 1067, 1068, 1069, 1858,
	0, 0, 0, 0, 1049, 1077, 0, 0, 1055, 1056,
	1062, 1061, 1057, 1058, 1059, 1080, 0, 1054, 1052, 1053,
	1045, 1046, 1047, 1048, 1050, 1051, 1078, 1086, 0, 0,
	0, 0, 0, 0, 1857, 0, 0, 0, 1828, 1829,
	1830, 0, 0, 0, 0, 1084, 0, 1827, 1825, 1826,
	1818, 1819, 1820, 1821, 1823, 1824, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1041, 1042, 0,
	1071, 1072, 1073, 1081, 1082, 1083, 0, 0, 0, 0,
	0, 1075, 0, 1074, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 1070, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 1067, 1068, 1069, 0,
	0, 0, 0, 0, 1049, 0, 0, 0, 0, 1041,
	1042, 0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0,
	0, 0, 0, 0, 0, 1074, 1078, 1086, 0, 0,
	0, 0, 1044, 0, 1077, 1085, 0, 1055, 1056, 1062,
	1061, 1057, 1058, 1059, 1080, 1084, 1054, 1052, 1053, 1045,
	1046, 1047, 1048, 1050, 1051, 0, 1043, 0, 1179, 0,
	1076, 0, 1063, 1856, 0, 0, 1064, 0, 0, 1060,
	0, 0, 0, 0, 39, 0, 0, 1816, 1817, 0,
	1834, 1835, 1836, 0, 0, 40, 0, 0, 0, 0,
	0, 1075, 0, 2018, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 1067, 1068,
	1069, 0, 0, 0, 49, 1070, 1049, 0, 0, 0,
	1831, 0, 0, 0, 1816, 1817, 0, 1834, 1835, 1836,
	1065, 0, 0, 0, 0, 0, 0, 0, 1078, 1086,
	0, 0, 0, 60, 0, 0, 1079, 0, 0, 0,
	61, 0, 126, 62, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1076, 0, 0, 0, 0, 1831, 1064, 0,
	0, 0, 0, 0, 1822, 0, 64, 0, 0, 1041,
	1042, 0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0,
	0, 0, 0, 1075, 0, 1074, 0, 0, 0, 0,
	0, 0, 1044, 0, 1077, 1085, 0, 1055, 1056, 1062,
	1061, 1057, 1058, 1059, 1080, 1837, 1054, 1052, 1053, 1045,
	1046, 1047, 1048, 1050, 1051, 0, 1043, 1070, 0, 0,
	0, 1822, 1063, 1808, 0, 0, 1832, 0, 0, 1060,
	0, 0, 1065, 0, 0, 1041, 1042, 0, 1071, 1072,
	1073, 1081, 1082, 1083, 1838, 0, 0, 65, 1079, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 1085, 1837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 67, 0, 68, 1066, 1067, 1068,
	1069, 0, 1043, 1832, 0, 0, 1049, 0, 1063, 138,
	0, 0, 0, 0, 0, 1060, 470, 0, 0, 101,
	1833, 0, 0, 0, 0, 0, 0, 0, 1078, 1086,
	0, 0, 0, 0, 0, 0, 1077, 0, 140, 1055,
	1056, 1062, 1061, 1057, 1058, 1059, 1080, 1084, 1054, 1052,
	1053, 1045, 1046, 1047, 1048, 1050, 1051, 0, 0, 0,
	0, 2419, 1076, 1066, 1067, 1068, 1069, 0, 1064, 0,
	0, 0, 1049, 0, 139, 0, 0, 1833, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 1075, 1078, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1828, 1829, 1830,
	0, 0, 123, 1084, 0, 0, 1827, 1825, 1826, 1818,
	1819, 1820, 1821, 1823, 1824, 0, 0, 1070, 1076, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 1041, 1042, 0, 1071, 1072,
	1073, 1081, 1082, 1083, 0, 0, 0, 0, 1079, 1075,
	0, 1074, 0, 0, 1828, 1829, 1830, 0, 1044, 0,
	0, 1085, 0, 1827, 1825, 1826, 1818, 1819, 1820, 1821,
	1823, 1824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 1070, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 1077, 0, 0, 1055,
	1056, 1062, 1061, 1057, 1058, 1059, 1080, 0, 1054, 1052,
	1053, 1045, 1046, 1047, 1048, 1050, 1051, 0, 0, 0,
	0, 2374, 0, 1066, 1067, 1068, 1069, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 0, 1041, 1042, 0,
	1071, 1072, 1073, 1081, 1082, 1083, 0, 0, 0, 0,
	0, 0, 0, 1074, 1078, 1086, 0, 0, 0, 0,
	1044, 0, 1077, 1085, 0, 1055, 1056, 1062, 1061, 1057,
	1058, 1059, 1080, 1084, 1054, 1052, 1053, 1045, 1046, 1047,
	1048, 1050, 1051, 0, 1043, 0, 0, 2344, 1076, 0,
	1063, 0, 0, 0, 1064, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 1067, 1068, 1069, 0,
	0, 0, 0, 1070, 1049, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 1078, 1086, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1041, 1042, 0,
	1071, 1072, 1073, 1081, 1082, 1083, 0, 0, 0, 0,
	0, 1075, 0, 1074, 0, 0, 0, 0, 0, 0,
	1044, 0, 1077, 1085, 0, 1055, 1056, 1062, 1061, 1057,
	1058, 1059, 1080, 0, 1054, 1052, 1053, 1045, 1046, 1047,
	1048, 1050, 1051, 0, 1043, 1070, 0, 2339, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	1065, 0, 0, 1041, 1042, 0, 1071, 1072, 1073, 1081,
	1082, 1083, 0, 0, 0, 0, 1079, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 1067, 1068, 1069, 0,
	1043, 0, 0, 0, 1049, 0, 1063, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 1086, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 1055, 1056, 1062,
	1061, 1057, 1058, 1059, 1080, 1084, 1054, 1052, 1053, 1045,
	1046, 1047, 1048, 1050, 1051, 0, 0, 0, 0, 2335,
	1076, 1066, 1067, 1068, 1069, 0, 1064, 0, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 1078, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1070, 1076, 0, 0, 0,
	0, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 1041, 1042, 0, 1071, 1072, 1073, 1081,
	1082, 1083, 0, 0, 0, 0, 1079, 1075, 0, 1074,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1043, 1070, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 0, 1077, 0, 0, 1055, 1056, 1062,
	1061, 1057, 1058, 1059, 1080, 0, 1054, 1052, 1053, 1045,
	1046, 1047, 1048, 1050, 1051, 0, 0, 0, 0, 2276,
	0, 1066, 1067, 1068, 1069, 0, 0, 0, 0, 0,
	1049, 0, 0, 0, 0, 1041, 1042, 0, 1071, 1072,
	1073, 1081, 1082, 1083, 0, 0, 0, 0, 0, 0,
	0, 1074, 1078, 1086, 0, 0, 0, 0, 1044, 0,
	1077, 1085, 0, 1055, 1056, 1062, 1061, 1057, 1058, 1059,
	1080, 1084, 1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050,
	1051, 0, 1043, 0, 0, 2239, 1076, 0, 1063, 0,
	0, 0, 1064, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 1067, 1068, 1069, 0, 0, 0,
	0, 1070, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 1078, 1086, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1041, 1042, 0, 1071, 1072,
	1073, 1081, 1082, 1083, 0, 0, 0, 0, 0, 1075,
	0, 1074, 0, 0, 0, 0, 0, 0, 1044, 0,
	1077, 1085, 0, 1055, 1056, 1062, 1061, 1057, 1058, 1059,
	1080, 0, 1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050,
	1051, 0, 1043, 1070, 0, 2238, 0, 0, 1063, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 1065, 0,
	0, 1041, 1042, 0, 1071, 1072, 1073, 1081, 1082, 1083,
	0, 0, 0, 0, 1079, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 1067, 1068, 1069, 0, 1043, 0,
	0, 0, 1049, 0, 1063, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 1086, 0, 0, 0, 0,
	0, 0, 1077, 0, 0, 1055, 1056, 1062, 1061, 1057,
	1058, 1059, 1080, 1084, 1054, 1052, 1053, 1045, 1046, 1047,
	1048, 1050, 1051, 0, 0, 0, 0, 2203, 1076, 1066,
	1067, 1068, 1069, 0, 1064, 0, 0, 0, 1049, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	1078, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 1076, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 1041, 1042, 0, 1071, 1072, 1073, 1081, 1082, 1083,
	0, 0, 0, 0, 1079, 1075, 0, 1074, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1043, 1070,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1079, 0, 1077, 0, 0, 1055, 1056, 1062, 1061, 1057,
	1058, 1059, 1080, 0, 1054, 1052, 1053, 1045, 1046, 1047,
	1048, 1050, 1051, 0, 0, 0, 0, 2049, 0, 1066,
	1067, 1068, 1069, 0, 0, 0, 0, 0, 1049, 0,
	0, 0, 0, 1041, 1042, 0, 1071, 1072, 1073, 1081,
	1082, 1083, 0, 0, 0, 0, 0, 0, 0, 1074,
	1078, 1086, 0, 0, 0, 0, 1044, 0, 1077, 1085,
	0, 1055, 1056, 1062, 1061, 1057, 1058, 1059, 1080, 1084,
	1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050, 1051, 0,
	1043, 0, 0, 2025, 1076, 0, 1063, 0, 0, 0,
	1064, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 1067, 1068, 1069, 0, 0, 0, 0, 1070,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 1078, 1086, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1041, 1042, 0, 1071, 1072, 1073, 1081,
	1082, 1083, 0, 0, 0, 0, 0, 1075, 0, 1074,
	0, 0, 0, 0, 0, 0, 1044, 0, 1077, 1085,
	0, 1055, 1056, 1062, 1061, 1057, 1058, 1059, 1080, 0,
	1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050, 1051, 0,
	1043, 1070, 0, 1485, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 1065, 0, 0, 1041,
	1042, 0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0,
	0, 0, 1079, 0, 0, 1074, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 1067, 1068, 1069, 0, 1043, 0, 0, 0,
	1049, 2525, 1063, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 1086, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 1055, 1056, 1062, 1061, 1057, 1058, 1059,
	1080, 1084, 1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050,
	1051, 0, 0, 1778, 0, 0, 1076, 1066, 1067, 1068,
	1069, 0, 1064, 0, 0, 0, 1049, 0, 1848, 0,
	0, 1847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 1078, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2524, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 1076, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 1585, 0, 0, 1065, 0, 0, 1041,
	1042, 0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0,
	0, 0, 1079, 1075, 0, 1074, 0, 0, 0, 1584,
	0, 0, 1044, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1043, 1070, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	1077, 0, 0, 1055, 1056, 1062, 1061, 1057, 1058, 1059,
	1080, 0, 1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050,
	1051, 0, 0, 0, 0, 0, 0, 1066, 1067, 1068,
	1069, 0, 0, 0, 0, 0, 1049, 0, 0, 0,
	0, 1041, 1042, 0, 1071, 1072, 1073, 1081, 1082, 1083,
	0, 0, 0, 0, 0, 0, 0, 1074, 1078, 1086,
	0, 0, 1751, 0, 1044, 0, 1077, 1085, 0, 1055,
	1056, 1062, 1061, 1057, 1058, 1059, 1080, 1084, 1054, 1052,
	1053, 1045, 1046, 1047, 1048, 1050, 1051, 0, 1043, 0,
	0, 0, 1076, 0, 1063, 0, 0, 0, 1064, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 1752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1066,
	1067, 1068, 1069, 0, 0, 0, 0, 1070, 1049, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	1078, 1086, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1041, 1042, 0, 1071, 1072, 1073, 1081, 1082, 1083,
	0, 0, 0, 0, 0, 1075, 0, 1074, 0, 0,
	0, 0, 0, 0, 1044, 0, 1077, 1085, 0, 1055,
	1056, 1062, 1061, 1057, 1058, 1059, 1080, 0, 1054, 1052,
	1053, 1045, 1046, 1047, 1048, 1050, 1051, 0, 1043, 1070,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 1065, 0, 0, 0, 1041, 1042,
	0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0, 0,
	1079, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1066,
	1067, 1068, 1069, 0, 0, 1043, 0, 0, 1049, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 1086, 0, 0, 0, 0, 0, 0, 1077, 0,
	0, 1055, 1056, 1062, 1061, 1057, 1058, 1059, 1080, 1084,
	1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050, 1051, 0,
	0, 0, 0, 0, 1076, 0, 1066, 1067, 1068, 1069,
	1064, 0, 0, 0, 0, 1049, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 582, 1078, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1070,
	0, 1076, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 1065, 0, 0, 0, 1041, 1042,
	0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0, 0,
	1079, 0, 1075, 0, 1074, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 1070, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1077, 0,
	0, 1055, 1056, 1062, 1061, 1057, 1058, 1059, 1080, 0,
	1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050, 1051, 0,
	0, 0, 0, 2029, 0, 0, 1066, 1067, 1068, 1069,
	0, 0, 0, 0, 0, 1049, 0, 0, 0, 0,
	1854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1086, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 1055, 1056,
	1062, 1061, 1057, 1058, 1059, 1080, 1084, 1054, 1052, 1053,
	1045, 1046, 1047, 1048, 1050, 1051, 0, 0, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 1042,
	0, 1071, 1072, 1073, 1081, 1082, 1083, 0, 0, 0,
	0, 0, 1075, 0, 1074, 0, 0, 0, 1849, 0,
	0, 1044, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 1070, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 1065, 0, 0, 1041, 1042, 0, 1071, 1072, 1073,
	1081, 1082, 1083, 0, 0, 0, 0, 1079, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1066, 1067, 1068, 1069,
	0, 1043, 0, 0, 0, 1049, 0, 1063, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1086, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 1055, 1056,
	1062, 1061, 1057, 1058, 1059, 1080, 1084, 1054, 1052, 1053,
	1045, 1046, 1047, 1048, 1050, 1051, 0, 0, 0, 0,
	0, 1076, 1066, 1067, 1068, 1069, 0, 1064, 0, 0,
	0, 1049, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 1078, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 1076, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 1041, 1042, 0, 1071, 1072, 1073,
	1081, 1082, 1083, 0, 0, 0, 0, 1079, 1075, 0,
	1074, 0, 0, 0, 1807, 0, 0, 1044, 0, 0,
	1085, 1814, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 1070, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 1077, 0, 0, 1055, 1056,
	1062, 1061, 1057, 1058, 1059, 1080, 0, 1054, 1052, 1053,
	1045, 1046, 1047, 1048, 1050, 1051, 0, 0, 0, 0,
	0, 0, 1066, 1067, 1068, 1069, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 1041, 1042, 0, 1071,
	1072, 1073, 1081, 1082, 1083, 0, 0, 0, 0, 0,
	0, 0, 1074, 1078, 1086, 0, 0, 0, 0, 1044,
	0, 1077, 1085, 0, 1055, 1056, 1062, 1061, 1057, 1058,
	1059, 1080, 1084, 1054, 1052, 1053, 1045, 1046, 1047, 1048,
	1050, 1051, 0, 1043, 0, 0, 0, 1076, 0, 1063,
	0, 0, 0, 1064, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 1067, 1068, 1069, 0, 0,
	0, 0, 1070, 1049, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 1078, 1086, 0, 0, 0,
	0, 0, 0, 1079, 1041, 1042, 0, 1071, 1072, 1073,
	1081, 1082, 1083, 0, 1084, 0, 0, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 1044, 0, 1076,
	1085, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1043, 0, 0, 0, 0, 0, 1063, 0, 0,
	1075, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 1077, 0, 0, 1055, 1056, 1062, 1061, 1057, 1058,
	1059, 1080, 0, 1054, 1052, 1053, 1045, 1046, 1047, 1048,
	1050, 1051, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 1066, 1067, 1068, 1069, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 1079, 1041, 1042, 0, 1071,
	1072, 1073, 1081, 1082, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 1086, 0, 0, 0, 0, 1044,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 1076, 0, 1063,
	0, 0, 0, 1064, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 1055, 1056, 1062, 1061,
	1057, 1058, 1059, 1080, 0, 1054, 1052, 1053, 1045, 1046,
	1047, 1048, 1050, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 1067, 1068, 1069, 0, 0,
	0, 0, 1070, 1049, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 1078, 1086, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 39, 0, 0, 0, 0, 0, 0, 1076,
	0, 0, 0, 40, 127, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 1077, 49, 0, 1055, 1056, 1062, 1061, 1057, 1058,
	1059, 1080, 0, 1054, 1052, 1053, 1045, 1046, 1047, 1048,
	1050, 1051, 0, 52, 1070, 0, 0, 54, 0, 0,
	0, 60, 0, 0, 130, 0, 0, 0, 61, 1065,
	126, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 1041, 1042, 63, 1071, 1072, 1073, 1081, 1082, 1083,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 1060, 0, 1077, 0, 0, 1055, 1056, 1062, 1061,
	1057, 1058, 1059, 1080, 0, 1054, 1052, 1053, 1045, 1046,
	1047, 1048, 1050, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 1066,
	1067, 1068, 1069, 447, 0, 0, 0, 0, 1049, 0,
	73, 124, 67, 0, 68, 0, 69, 0, 131, 0,
	0, 0, 0, 70, 39, 0, 0, 138, 0, 0,
	1078, 1086, 0, 0, 81, 40, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 49, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 60, 0, 0, 0, 133, 0, 0,
	61, 0, 126, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 0, 563, 0, 0, 0, 0, 1070,
	123, 0, 0, 4, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 0, 1065, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 540, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 0, 0, 0, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	0, 0, 0, 559, 0, 0, 0, 1298, 1287, 1317,
	1278, 1308, 1307, 0, 0, 1280, 1279, 564, 544, 0,
	0, 1319, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 1077, 0,
	562, 1055, 1056, 1062, 1061, 1057, 1058, 1059, 1080, 0,
	1054, 1052, 1053, 1045, 1046, 1047, 1048, 1050, 1051, 1313,
	0, 1305, 1304, 124, 67, 545, 68, 0, 0, 0,
	0, 1303, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 546, 547, 0, 470, 0, 0, 101,
	0, 0, 0, 0, 1302, 1300, 1301, 0, 0, 0,
	0, 553, 0, 0, 548, 555, 0, 0, 140, 0,
	0, 0, 0, 1290, 0, 552, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 565, 0, 0, 1291, 1289,
	1292, 1293, 1294, 1295, 1296, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 1298, 1287, 1317, 1278,
	1308, 1307, 132, 0, 1280, 1279, 0, 0, 0, 133,
	1319, 1318, 0, 0, 1282, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1306, 0, 0, 0,
	1288, 0, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	1305, 1304, 539, 556, 566, 0, 0, 0, 0, 1299,
	1303, 0, 0, 1410, 1408, 1409, 1412, 1411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 0,
	0, 0, 561, 1302, 1300, 1301, 567, 0, 0, 0,
	1283, 554, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 1297, 1284, 0, 0, 0, 0, 560, 0, 0,
	1286, 1321, 0, 0, 0, 0, 0, 1291, 1289, 1292,
	1293, 1294, 1295, 1296, 1281, 1316, 0, 1314, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 1282, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1306, 0, 0, 0, 1288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1297, 1284, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1281, 0, 0, 1314, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 0, 1320,
}
var sqlPact = [...]int{

	41819, -1000, -39, -1000, -1000, -1000, 108, -1000, -1000, -1000,
	107, 106, 105, -1000, 104, 100, 99, 96, 95, 93,
	91, 90, 86, 84, 81, -1000, 80, -1000, -1000, -1000,
	-1000, 79, 78, 77, 73, 64, 62, 61, -1000, 945,
	21224, 59, 56, 1314, 34889, 51, 50, 49, 46, 1010,
	44, 43, 25224, 865, 1144, 41, 38, 36, 35, 32,
	936, 34558, 42061, 1449, 1057, 1517, 34224, 20890, 1510, 1345,
	33890, -1000, -1000, 33556, 31, 26, 24, 19, 18, -1000,
	-1000, 33222, 17, 16, 14, 13, 12, 10, 6, 5,
	4, 3, 2, 1, 0, -1, -1000, -4, -5, -6,
	-1000, 42180, -11, -12, -13, 1053, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	74, -1000, 839, 470, 2513, 7789, 830, 1001, 988, 965,
	961, 980, 36875, 34889, -14, -68, -16, -1000, 1833, 600,
	18493, 41819, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 24890, 24556, 32888, 32554,
	6063, 732, -1000, -45, 21888, 34889, -1000, 75, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14008, 13662, 483, 75, -1000, -1000, -1000, -1000, -1000,
	32220, -1000, 31886, 31552, 1372, 31218, -1000, -1000, -1000, -1000,
	30884, -1000, -1000, 1746, 1533, 1531, 24222, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 30553,
	30219, 29885, 29551, 29217, 444, -1000, -1000, -1000, 16768, -1000,
	-1000, -1000, -1000, -17, -1000, -19, -1000, -20, -21, -23,
	-24, -1000, -26, -30, -1000, -31, -33, -1000, -34, -35,
	28883, 1103, -1000, -1000, -42, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 34889, -1000, 14698, -1000, 443, -1000, 1463,
	-1000, 14698, -1000, 1069, -1000, -1000, -1000, -1000, -1000, 34889,
	-1000, -1000, -1000, -1000, -1000, -1000, 2060, 1115, 442, 28549,
	-1000, 1325, -1000, 548, 718, -1000, -1000, -1000, 8824, 115,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1835,
	22233, 1141, 1854, 1739, 2059, 1276, 1712, 1702, 1653, 1628,
	1607, 2058, 894, 2056, 1664, 975, 2055, 1553, 1228, 636,
	2053, 1461, 1460, -1000, -1000, -1000, -1000, 874, -1000, -1000,
	-1000, 26548, -1000, -1000, 839, -1000, -1000, -1000, 1298, 1790,
	1790, 1790, 1890, 240, 229, -1000, 74, -1000, 1985, -1000,
	1112, -1000, -1000, -1000, -1000, -1000, 41396, -1000, -1000, 14698,
	14698, 14698, 14698, 14698, 996, 457, -1000, 439, 438, 7098,
	-1000, -1000, 2037, -1000, -1000, -1000, 242, -1000, -1000, 14698,
	75, -1000, -1000, -1000, -1000, 435, 2049, -1000, 605, -1000,
	-1000, -1000, 556, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1486, 433, 429, 427, -1000, 425, -1000, -1000,
	424, 423, 419, 417, 415, 411, 410, 409, 406, 405,
	404, 402, 399, 397, 395, 968, -1000, 594, -1000, -1000,
	594, 594, -1000, 366, 366, 369, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 366, -1000, -1000, -1000, 529, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	394, 856, 1261, -1000, -1000, 1261, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 728, 36213, -48, 34889, -1000, 392, -48,
	-1000, -1000, 377, -1000, 9859, 9859, -1000, -1000, -1000, -1000,
	-1000, 9169, 2083, -1000, 38161, -205, 243, 526, -1000, 17458,
	20212, -1000, -1000, 977, 1678, 722, -1000, 926, 1675, 463,
	-1000, 1033, -1000, 820, 1670, -179, 1513, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 22564, 21888, -45, -55, -1000, -1000,
	-1000, 5718, 41396, -1000, 41396, -1000, 798, 19181, 75, -1000,
	-1000, -1000, -1000, 376, 1178, 563, 1163, -1000, 247, -1000,
	28215, 563, 1159, -1000, -1000, -1000, 26548, -1000, 34889, -1000,
	34889, -1000, 838, -1000, 36544, 111, 1667, -1000, -1000, 111,
	1665, -1000, 110, 1641, -1000, -1000, 1147, 1625, -1000, -55,
	1619, -1000, -1000, 14698, -57, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 600, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 27881, 21556, 943, 532, 41396,
	1938, 42359, 22564, 41396, 21556, -1000, -1000, 34889, -1000, 14698,
	-1000, 1937, 1243, -49, -1000, -1000, -1000, -1000, -1000, 1253,
	1308, 694, 1395, 8824, 8824, 1749, -1000, 112, 6063, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 27547, -1000, -1000,
	-1000, 1101, 34889, -1000, -1000, 1483, -1000, 21556, 34889, -1000,
	34889, -1000, 34889, -1000, 34889, -1000, 34889, -1000, -1000, -1000,
	-1000, -1000, 4112, -1000, 1478, -1000, -1000, 34889, -1000, 1212,
	-1000, -1000, -1000, 27216, 26882, -1000, 895, 753, -1000, -1000,
	113, -1000, -1000, 1298, -1000, 1058, 1336, 13316, 1316, 14698,
	74, -1000, -1000, 74, 74, 8479, -1000, -1000, -1000, 34889,
	-1000, 42220, 42359, 6063, 741, 14698, 14698, 14698, 14698, 14698,
	14698, 14698, 14698, 14698, 14698, 14698, 14698, 14698, 14698, 14698,
	14698, 14698, 14698, 14698, 14698, 14698, 14698, 14698, 14698, 14698,
	14698, 14698, 14698, 14698, 14698, 14698, 14698, 1257, 14698, 720,
	14698, 14698, 14698, 14698, 1723, 1056, 365, 1085, -1000, 1981,
	1981, 1981, 41666, 41666, 347, 457, -1000, 14698, -1000, 48,
	14698, 229, 39691, -47, 6753, -1000, -1000, -1000, 12971, 590,
	41396, 75, 4466, -1000, 2036, 828, 1498, 1409, 375, 495,
	494, 492, 420, 14698, 14698, 12626, 12280, 11934, 15388, 11588,
	14698, 7443, 14698, 14698, 14698, 14698, 11242, 10896, -1000, 371,
	-1000, -1000, -1000, -1000, 2034, -1000, -1000, 2032, -1000, 740,
	737, 2030, 1810, 547, -1000, -49, -1000, 36213, -1000, 34889,
	-48, 1936, 34889, -1000, 63, -1000, 40259, -1000, 63, -65,
	-1000, 1317, 1313, 18837, 998, 1011, 1011, 1011, -1000, 370,
	452, 526, 5009, 10550, -1000, 25555, 1016, 135, 228, 17113,
	2083, -1000, 34889, -77, 1031, -1000, 23888, 1839, 1805, 1772,
	26548, 1907, 48, 1792, 1456, 717, 26548, 1777, 715, 1904,
	48, 1454, 712, 34889, 6063, 1776, 524, -1000, 34889, -1000,
	-1000, -1000, 1445, -67, -1000, -1000, 23557, 1933, 1616, -1000,
	987, -1000, 1613, 1923, 34889, 1043, 1155, -1000, -1000, 749,
	1600, 562, 464, 1920, 464, 19524, -1000, 34889, -1000, 34889,
	-1000, -1000, 34889, -1000, 34889, -1000, 34889, 34889, -1000, 34889,
	34889, -78, 41396, 3008, 23226, 709, -1000, 612, 23557, 283,
	-79, -1000, 644, -1000, -1000, -1000, -1000, 210, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 369, 968, 366, 366, 366, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 529, -1000, -1000, 594, 594, 594,
	-1000, -1000, -80, -1000, 1444, 544, -86, 640, -49, -1000,
	1261, -1000, 960, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2045, -1000, 2001, -1000,
	-1000, 2029, -50, -1000, -50, -1000, 6063, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 34889, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3858, -1000, -1000, -1000, -1000, -1000, -1000,
	34889, 34889, 34889, -1000, 26548, -1000, -1000, -1000, -1000, 41396,
	-1000, 342, -1000, -1000, 41396, 864, 1353, -1000, 1353, -53,
	-1000, 40381, 1310, 34889, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 546, 465, 465, 872, 872,
	872, 872, 1954, 1400, 2579, 482, 183, 183, 183, 183,
	183, 183, 183, 183, 302, 281, 281, 302, 302, 302,
	302, 302, 183, 183, 183, 41666, 41544, 393, 14698, 14698,
	702, 1046, 365, 393, 14698, 393, 393, 393, 393, -1000,
	1321, -1000, -1000, -1000, -1000, 1438, 362, 15388, 15388, -1000,
	-1000, -1000, 7098, 15733, -1000, -1000, -1000, -1000, 360, 14698,
	-1000, 39813, -225, 226, -173, -1000, 14698, 451, -100, -1000,
	831, -1000, 14698, -1000, -51, 14698, 14698, 14698, 223, -1000,
	222, -1000, 700, -1000, 697, 696, 690, -1000, 359, 999,
	358, 355, 14698, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41274, 37987, 219, -1000, 1435, -173, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 218, -1000, 217, -1000, 41084, -173,
	216, 38234, -1000, 15388, 15388, 15388, 7098, 352, 215, -1000,
	40069, -1000, 41018, 10204, 10204, 10204, 213, 40828, 14698, -173,
	37797, 37578, 37543, -87, -88, -1000, -93, -1000, 2028, -108,
	212, 542, 540, 211, 1476, -1000, 1797, -1000, -1000, 351,
	-109, 562, 9859, 18148, 6063, -1000, 562, 9169, -1000, 18837,
	18837, 2609, 1297, 18837, -1000, -1000, -1000, -1000, 25555, 430,
	526, 25555, -1000, 2027, 1318, 207, -1000, -1000, -1000, 34889,
	350, -1000, 526, 197, 973, 34889, 34889, 34889, -1000, -1000,
	1154, 35882, 1148, 42359, 34889, -1000, 348, 337, 1293, 1292,
	34889, 34889, 35551, 35220, 34889, 928, 48, -1000, 539, 335,
	34889, 902, 538, 34889, 48, -1000, 323, 34889, 899, -1000,
	533, 1384, 1110, -1000, 785, 1433, 34889, 196, -110, -54,
	42359, -1000, -1000, -1000, -1000, -1000, 34889, 414, 34889, 48,
	34889, 2044, 34889, 48, 34889, 1594, 1684, 485, 34889, 1336,
	14698, 967, -1000, 17803, 597, 34889, 885, 58, -1000, -1000,
	-1000, 518, 34889, -1000, -1000, 111, 111, -1000, 110, 1147,
	-55, -1000, 14698, -1000, -1000, 34889, 22564, -111, -1000, -1000,
	42359, -1000, 338, 686, -1000, 2026, 561, 22564, 34889, 8824,
	8824, -1000, 1322, -1000, -1000, 906, -1000, 946, -1000, -1000,
	-1000, -1000, 8824, -1000, -89, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 864, -1000, 14698, 2022, -1000, -1000, -1000, 8479,
	-1000, -1000, -1000, 34889, -195, 14698, 393, 393, 14698, 15388,
	15388, -1000, 393, -1000, -1000, -1000, -1000, -1000, 1432, 321,
	14698, 42359, 38177, 37608, -117, -1000, 14698, -56, -1000, 14698,
	-1000, 39501, -1000, -1000, 282, 1610, -1000, 14698, 40638, 191,
	9514, -1000, 40571, -52, -52, -1000, 2041, 1150, 1161, 924,
	851, 2014, -1000, 19868, 570, 1002, 39435, 42220, 42359, -1000,
	14698, -1000, -1000, 1426, 14698, -1000, 42220, 42359, 15388, 15388,
	15388, 15388, 15388, 15388, 15388, 15388, 15388, 15388, 15388, 15388,
	15388, 15388, 15388, 15388, 15388, 15388, 15388, 1299, 15388, 1974,
	1974, 1974, -58, 14698, -1000, 1472, 1426, 14698, 14698, 42359,
	190, 188, 180, -1000, 14698, -173, 14698, 14698, 14698, -1000,
	-1000, -1000, 165, -1000, 1999, -1000, -1000, -1000, -1000, 971,
	-1000, 283, -1000, 1397, -1000, -153, -1000, 2083, -1000, 1397,
	-1000, -1000, 2609, -1000, 320, 14698, 18837, -1000, 450, -1000,
	-120, -1000, 25555, -1000, 449, -222, -1000, 511, -1000, 526,
	318, 34889, 25555, -1000, -1000, -1000, 677, 676, 1584, -1000,
	1143, -1000, 609, -1000, 963, 14698, 16423, 317, 315, 1026,
	-1000, 1566, 1147, 1564, 1147, -1000, -77, 942, -1000, 20556,
	14698, -1000, 675, 20556, -1000, -1000, 14698, -1000, 672, 20556,
	561, 1425, 776, -1000, 784, -1000, 1374, -1000, 23557, 314,
	34889, 313, -1000, 312, -1000, 563, -1000, 311, 34889, 1264,
	485, 22895, -1000, 563, 885, -1000, 41396, -1000, 885, 8134,
	1774, -122, -1000, -1000, -1000, 562, 19524, 18837, 9169, -123,
	-1000, -1000, -1000, -1000, 41396, -89, 1748, 1748, -1000, 1994,
	-1000, 447, 162, -1000, 26217, -1000, -89, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 34889, 1022, 39245, -1000, 1779, 6063,
	1895, 393, 3933, 2569, 14698, 42359, 41941, -128, 14698, 14698,
	-1000, 159, 14698, 446, 41396, -1000, -1000, -1000, 41396, 14698,
	1983, 14698, 157, 156, 154, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 151, -1000, -1000, 37206, 14698, 149, -1000,
	147, 146, 41396, 1472, 41396, -1000, -1000, 493, 493, 814,
	814, 814, 814, 1974, 1487, 270, 2497, 336, 336, 336,
	773, 593, 593, 336, 336, 336, 1424, 1296, 304, 701,
	14698, 145, -1000, -1000, 41396, 41396, 136, -1000, -1000, -1000,
	-173, 3969, 39123, 38933, -1000, 134, 6063, 34889, 34889, 133,
	1403, 1889, -1000, 18837, 1403, -1000, 34889, 41396, -1000, -205,
	-1000, 1979, -1000, -1000, 1318, -1000, 5368, 25555, 34889, -129,
	-1000, 34889, 34889, 34889, 1557, -1000, 1222, -1000, 38867, -131,
	-1000, 280, 1847, 14698, -1000, -1000, 303, 16423, 34889, -1000,
	1303, 1338, 627, 34889, -1000, 34889, -1000, 34889, 34889, 34889,
	-1000, 301, 75, -134, 34889, -1000, -137, 34889, -1000, -1000,
	22564, 736, -1000, -1000, 1379, -1000, 16423, 299, 34889, 23557,
	1914, -1000, 16423, 1038, 1282, 485, 22895, -1000, 749, -1000,
	-1000, -98, -1000, 305, 48, 885, -1000, -99, -1000, 509,
	1733, -1000, 1732, 431, -1000, -1000, -105, 289, -1000, 488,
	486, -1000, -1000, -1000, -1000, 1779, 14698, 14698, 41941, -139,
	-1000, 393, 393, -1000, 38677, -1000, 41396, -1000, 40571, -1000,
	-1000, -1000, -1000, 981, -1000, 38555, -1000, -1000, -1000, -1000,
	15388, 1417, 288, 42359, 38365, -1000, -1000, 14698, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 568, 14698, 14698, 2083, 568,
	-142, 526, -1000, -1000, -1000, 1972, -1000, -144, -1000, -1000,
	-1000, -1000, 34889, -1000, 34889, -1000, 6063, 34889, 1415, 1118,
	-1000, -1000, 1287, 287, 15388, 34889, -1000, 1050, 16423, 1779,
	75, 6063, 1779, 38299, 4466, -147, -150, 1117, -1000, 1116,
	14698, -1000, 42359, 1147, 1147, -1000, 671, 670, 14698, 666,
	-1000, 665, -1000, -140, 20556, 991, -152, 16423, -155, 130,
	48, -158, 34889, -1000, 485, 22895, -1000, 1684, 1691, 34889,
	1761, -1000, -1000, 279, 278, 269, -1000, 25886, 25886, 22564,
	22564, -1000, 393, 393, -1000, -1000, 129, 1002, 1873, -1000,
	2834, 15388, 42359, -166, -1000, 38109, -1000, 34889, 41396, -173,
	-1000, -1000, 25555, 421, -1000, -1000, 1455, -1000, -1000, 34889,
	1131, -1000, -1000, 14698, 701, 268, 1374, 257, -1000, -1000,
	-1000, -1000, -1000, -1000, 1847, -51, -1000, 952, -1000, -1000,
	41396, 1825, -1000, -1000, 34889, 34889, -52, 255, 254, -1000,
	34889, 1050, -167, -1000, 1374, -1000, 1050, 251, 22895, -1000,
	1264, 748, -168, 34889, -1000, -1000, 6406, 22564, 22564, -1000,
	-184, -1000, -1000, -1000, 883, 14698, 2834, -185, -1000, -1000,
	-164, -1000, 1912, -1000, -1000, -1000, -1000, 1534, 560, 1158,
	34889, -1000, 34889, 1779, 127, 34889, 607, 6063, -1000, -1000,
	123, 14698, 14698, 250, 1374, 1050, -1000, 1374, 16423, -1000,
	1282, 835, -1000, 562, -1000, -191, -192, -1000, 118, 15043,
	15043, -173, -1000, 34889, 248, 1507, -1000, 1025, 983, 60,
	-193, -1000, -1000, 247, -1000, 14698, -1000, 1983, -198, -199,
	34889, -1000, 1374, -1000, -210, -1000, 19524, -1000, 561, 561,
	-1000, -1000, -1000, 16078, 1075, 869, 40003, -1000, -1000, -1000,
	34889, -1000, 1036, 1030, 857, -1000, -1000, -1000, -1000, -1000,
	1158, 41396, -1000, -1000, -216, -1000, 1050, -174, -1000, -1000,
	1945, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1717, -1000,
	619, 1192, 1192, 1025, 1139, 1374, -1000, 14353, -1000, 1955,
	-1000, -1000, 1229, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2441, 2440, 1540, 1832, 2437, 2434, 2432, 2430, 2425,
	2424, 2421, 2417, 2416, 2414, 2410, 2405, 2394, 2389, 2388,
	2384, 2383, 2382, 2377, 1816, 2376, 1814, 2375, 2374, 2371,
	2368, 1797, 2350, 2347, 2344, 2340, 2339, 2336, 1794, 2334,
	1789, 2332, 2327, 2325, 2324, 2323, 1781, 2322, 75, 106,
	1779, 2321, 2318, 1746, 1737, 1735, 2317, 1728, 2315, 2312,
	1650, 1627, 2310, 85, 2309, 2308, 2306, 1581, 1578, 2304,
	2302, 2301, 145, 2300, 1574, 2297, 2295, 2294, 2293, 2292,
	2290, 2289, 2288, 2287, 2286, 2285, 2284, 2281, 2280, 2278,
	2277, 2275, 2274, 2273, 150, 2272, 2269, 1571, 1568, 2266,
	2262, 26, 29, 14, 43, 19, 137, 2672, 130, 2261,
	2260, 2256, 2254, 2253, 2252, 16, 97, 95, 2251, 128,
	2250, 2249, 36, 31, 12, 17, 60, 88, 2247, 2244,
	1470, 42, 2243, 2242, 127, 2238, 64, 23, 215, 146,
	142, 104, 116, 2236, 2235, 2234, 44, 108, 6, 2233,
	2232, 18, 63, 52, 2230, 34, 13, 2226, 2225, 122,
	2224, 50, 84, 1474, 113, 118, 197, 91, 2219, 57,
	10, 37, 2218, 2217, 151, 30, 2210, 38, 58, 132,
	2209, 55, 153, 120, 65, 124, 125, 2206, 2205, 2200,
	135, 2199, 109, 66, 2191, 2190, 72, 2189, 94, 136,
	2188, 2187, 2186, 93, 2185, 117, 2184, 2183, 149, 140,
	103, 3, 40, 54, 39, 1521, 1505, 126, 83, 32,
	47, 2181, 1943, 1057, 257, 92, 99, 78, 49, 100,
	48, 76, 138, 24, 2179, 2178, 129, 2176, 2175, 2171,
	2168, 2166, 96, 2165, 2163, 20, 2160, 79, 27, 46,
	80, 28, 70, 121, 105, 147, 98, 2159, 69, 119,
	2154, 110, 2151, 2143, 2115, 114, 2140, 2138, 2137, 1860,
	1740, 1705, 395, 2136, 2135, 1701, 954, 2133, 2131, 77,
	2130, 107, 101, 87, 131, 461, 111, 2129, 115, 21,
	2127, 25, 35, 0, 1204, 295, 2126, 112, 61, 2125,
	2116, 2114, 2113, 22, 2, 9, 5, 7, 4, 73,
	56, 2112, 2111, 123, 89, 59, 2110, 148, 2108, 2105,
	2101, 33, 2100, 11, 2095, 8, 2075, 2074, 15, 1,
	2073, 2071, 139, 2070, 81, 2068, 1859, 2067, 144, 2065,
	2064, 1770, 2063, 51, 102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 9, 6, 6, 6,
	6, 6, 11, 11, 12, 20, 15, 22, 10, 18,
	16, 14, 14, 19, 19, 117, 117, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 114, 114, 119, 119, 119, 121, 121, 118,
	118, 113, 113, 24, 24, 61, 61, 104, 54, 54,
	54, 291, 291, 292, 292, 100, 100, 101, 101, 101,
	101, 102, 102, 103, 103, 103, 30, 30, 30, 26,
	26, 26, 26, 26, 27, 27, 28, 28, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 38, 38, 39, 39, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 45, 45, 45, 43, 43, 43, 42, 42, 42,
	41, 41, 41, 44, 44, 44, 165, 165, 164, 164,
	168, 168, 46, 46, 46, 46, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 49, 49, 49, 49, 49, 49, 49, 260,
	260, 259, 47, 47, 234, 234, 50, 50, 191, 191,
	51, 51, 51, 51, 51, 52, 52, 62, 62, 332,
	332, 332, 336, 336, 337, 337, 338, 338, 338, 338,
	338, 338, 338, 334, 334, 57, 57, 57, 57, 58,
	58, 58, 59, 59, 99, 99, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 68, 68, 68, 70, 67,
	67, 67, 69, 69, 69, 69, 71, 71, 72, 72,
	72, 72, 72, 73, 73, 285, 283, 283, 284, 284,
	144, 144, 144, 144, 144, 145, 145, 145, 290, 290,
	290, 290, 290, 290, 289, 289, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 86, 86, 86, 94, 94, 94, 94,
	94, 94, 94, 75, 75, 80, 80, 80, 80, 80,
	76, 76, 81, 81, 82, 82, 83, 83, 83, 83,
	83, 83, 77, 77, 77, 77, 85, 85, 85, 85,
	84, 84, 90, 90, 90, 90, 90, 90, 87, 87,
	87, 87, 88, 88, 88, 91, 91, 91, 91, 78,
	78, 79, 79, 92, 92, 93, 93, 93, 93, 93,
	89, 89, 89, 333, 333, 335, 335, 55, 55, 34,
	34, 35, 35, 146, 146, 147, 147, 213, 213, 213,
	213, 148, 148, 120, 120, 120, 212, 301, 301, 302,
	302, 302, 302, 302, 302, 303, 303, 303, 303, 303,
	303, 303, 299, 299, 300, 297, 297, 298, 298, 298,
	298, 339, 339, 211, 211, 151, 151, 306, 306, 306,
	306, 304, 304, 304, 304, 304, 307, 305, 308, 308,
	308, 308, 308, 246, 246, 246, 96, 96, 36, 36,
	36, 126, 126, 37, 37, 33, 33, 33, 195, 195,
	155, 155, 251, 251, 251, 137, 137, 115, 115, 115,
	17, 13, 13, 13, 13, 13, 13, 23, 23, 21,
	21, 196, 196, 197, 197, 56, 56, 60, 60, 65,
	65, 95, 95, 95, 95, 95, 95, 25, 25, 25,
	25, 29, 29, 29, 29, 64, 64, 341, 341, 133,
	133, 133, 133, 134, 134, 208, 208, 209, 209, 342,
	342, 210, 210, 210, 128, 127, 129, 129, 32, 32,
	32, 122, 122, 123, 123, 124, 124, 125, 125, 343,
	343, 53, 53, 53, 98, 98, 140, 140, 205, 205,
	205, 207, 207, 206, 206, 206, 181, 181, 181, 97,
	97, 160, 160, 170, 170, 171, 171, 257, 172, 172,
	63, 63, 107, 107, 105, 105, 105, 105, 105, 105,
	106, 106, 106, 108, 108, 108, 108, 108, 108, 108,
	111, 111, 111, 112, 112, 112, 110, 110, 314, 314,
	314, 317, 317, 313, 315, 315, 316, 316, 340, 340,
	182, 182, 182, 150, 149, 149, 153, 153, 152, 154,
	154, 250, 250, 250, 179, 179, 179, 179, 200, 200,
	198, 198, 199, 199, 201, 201, 202, 202, 202, 203,
	203, 204, 204, 178, 178, 230, 230, 109, 109, 109,
	159, 159, 159, 161, 161, 220, 220, 220, 221, 221,
	219, 219, 219, 219, 252, 252, 252, 252, 252, 252,
	252, 252, 330, 330, 330, 331, 331, 249, 249, 253,
	253, 253, 253, 253, 253, 247, 247, 247, 247, 248,
	248, 258, 258, 185, 185, 185, 185, 183, 183, 184,
	184, 254, 254, 254, 254, 180, 180, 255, 255, 255,
	214, 214, 261, 261, 261, 279, 279, 158, 158, 158,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 263,
	263, 263, 263, 265, 265, 265, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 278, 278, 278, 278, 278, 266,
	266, 273, 273, 274, 274, 275, 276, 267, 267, 268,
	268, 269, 270, 277, 277, 277, 277, 281, 281, 271,
	271, 271, 271, 271, 272, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 193,
	193, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 224, 224, 224, 224, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 309, 309,
	309, 309, 309, 309, 309, 309, 311, 311, 312, 312,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	318, 318, 319, 319, 321, 321, 322, 322, 323, 324,
	324, 324, 325, 326, 326, 320, 320, 327, 327, 327,
	328, 328, 329, 329, 329, 329, 329, 236, 236, 237,
	238, 244, 244, 244, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	135, 135, 135, 135, 135, 167, 167, 166, 166, 233,
	233, 231, 231, 235, 235, 186, 186, 280, 280, 280,
	280, 280, 280, 280, 187, 187, 187, 194, 188, 188,
	189, 189, 189, 189, 189, 227, 228, 190, 190, 190,
	229, 229, 239, 243, 243, 242, 241, 241, 240, 240,
	217, 217, 218, 218, 216, 215, 175, 175, 174, 174,
	173, 173, 344, 344, 245, 245, 176, 176, 177, 169,
	169, 256, 256, 256, 256, 162, 162, 142, 142, 163,
	163, 138, 138, 141, 141, 139, 139, 139, 139, 156,
	156, 157, 157, 136, 136, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 282, 282, 282, 232,
	130, 130, 130, 131, 131, 132, 132, 287, 287, 287,
	288, 288, 288, 288, 286, 286, 286, 286, 286, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 3, 4, 6, 6, 6, 5, 5, 7, 7,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 2, 6, 2, 1, 12, 12,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 4, 6, 7, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 2, 7, 3, 2, 2, 2, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 1,
	3, 1, 5, 2, 3, 0, 3, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 2, 6, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 2, 1, 2, 2,
	3, 2, 4, 3, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 7, 7, 7, 4, 5,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 7,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 2, 3,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	1, 1, 3, 3, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 5, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 374, -4, -24, -26, -30, -31,
	-51, -38, -39, -40, -50, -46, -52, -53, -54, -55,
	-47, -61, -60, -62, -65, -63, -56, -57, -66, -74,
	-95, -96, -97, -98, -5, -6, -7, -8, -9, 23,
	34, -27, -28, 47, 71, -32, -33, -34, -35, 73,
	-36, -37, 94, -316, 98, -41, -42, -43, -45, -44,
	102, 109, 112, 134, 145, 226, 232, 253, 255, 257,
	264, -105, -107, 251, -58, -59, -67, -68, -69, -70,
	-99, 275, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, 278, -25, -29, -64, 316, -11, -12, -15, -14,
	-16, -13, -20, -22, -19, -21, -23, -17, -18, -10,
	-314, -108, -106, 371, 252, 325, 111, 35, 287, 61,
	105, 259, 341, 348, -111, -109, -110, -112, 268, 333,
	297, 375, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 2, 297, 336, 87, 153,
	237, -332, 2, -163, 297, 87, -139, -130, 364, 4,
	-293, -295, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 48, 55, 60, 61, 62, 67, 64, 65, 66,
	69, 71, 72, 75, 76, 77, 85, 86, 88, 90,
	94, 96, 98, 101, 102, 104, 109, 111, 110, 112,
	122, 123, 128, 130, 135, 141, 142, 145, 146, 154,
	157, 159, 152, 169, 170, 171, 173, 174, 175, 178,
	177, 182, 185, 188, 190, 191, 192, 195, 193, 197,
	198, 200, 199, 205, 207, 208, 210, 213, 216, 219,
	222, 223, 224, 225, 226, 228, 230, 232, 234, 235,
	236, 237, 238, 240, 241, 243, 244, 245, 246, 247,
	251, 249, 250, 252, 253, 254, 255, 257, 259, 260,
	262, 276, 277, 288, 264, 265, 266, 267, 271, 269,
	272, 273, 275, 278, 280, 283, 286, 287, 289, 292,
	293, 290, 285, 296, 298, 299, 300, 301, 302, 303,
	304, 311, 312, 316, 317, 318, 319, 322, 323, 324,
	325, 327, 330, 331, 332, 337, 342, 343, 344, 345,
	346, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 89, 91, 92, 108, 113, 114,
	124, 125, 126, 136, 138, 147, 148, 151, 158, 160,
	161, 162, 163, 164, 166, 180, 194, 204, 206, 217,
	221, 229, 231, 239, 261, 270, 281, 282, 291, 294,
	306, 307, 308, 313, 314, 329, 333, 334, 374, 374,
	2, 170, 236, -138, -130, 87, 374, 374, 374, 374,
	297, 2, 326, 336, -195, 87, 321, 374, 374, -130,
	232, 22, 2, 96, 157, 324, 323, 22, 228, 269,
	299, 301, 2, 374, 374, 374, 374, 374, 2, 336,
	297, 153, 87, 326, -130, 2, -49, 2, 371, -48,
	-4, -31, -40, -50, -46, -24, -26, -38, -54, -53,
	-55, -57, -61, -60, -63, -67, -68, -74, -97, -98,
	275, -336, 2, 22, -337, -338, 73, 102, 134, 268,
	157, 96, 323, 297, 2, 170, 2, -130, 2, -332,
	2, 170, 2, -336, 2, -130, 2, -134, 2, 264,
	-130, 374, 374, 374, 374, 374, 185, 55, 261, 272,
	-72, 312, -71, 306, -285, -73, 2, -164, 195, -130,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 2, -94, 272,
	34, 55, 22, 60, 88, 135, 153, 154, 174, 68,
	69, 235, 185, 171, 311, 175, 273, 298, 312, 73,
	327, 302, 110, 4, 87, 195, 274, 306, 374, 374,
	374, -340, 2, 297, -106, -108, -107, -152, -153, 320,
	165, 107, 215, -105, -107, 2, -314, -94, 272, 2,
	55, 22, -283, 2, -245, 211, -222, 93, -224, 362,
	363, 357, 201, 347, -236, -226, -239, 108, 261, 371,
	-138, -225, 377, 9, -311, -107, 29, -237, -238, 49,
	-130, 7, 8, 5, 6, -136, -263, -232, -272, 315,
	115, 203, -309, -310, 4, -293, -287, -264, -274, -268,
	-271, 166, 58, 79, 80, 83, 81, 84, 274, 326,
	50, 28, 113, 114, 221, 229, 294, 313, 314, 147,
	204, 148, 56, 136, 180, 101, 37, 39, 41, 42,
	51, 52, 89, 91, 92, 124, 125, 126, 158, 160,
	161, 162, 163, 164, 206, 239, 281, 291, 307, 308,
	334, -294, -275, -276, -269, -270, 74, 116, 133, 156,
	149, 168, 172, 181, 183, 196, 218, 220, 258, 279,
	-277, 278, -341, 2, 312, 312, 2, -341, 2, -341,
	2, -133, 2, 312, 309, -317, 240, -313, -130, -317,
	374, 374, 376, 374, -149, -150, 2, 22, 99, -177,
	2, 371, -252, 2, 369, -254, -138, -107, -253, 371,
	212, -3, 2, -254, 147, -138, 2, -254, 147, -138,
	2, -130, 2, -141, 147, -138, -286, 4, -293, -295,
	-294, -296, 58, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 49, 50, 54, 57, 59, 68, 73,
	78, 79, 81, 80, 82, 83, 84, 93, 95, 97,
	99, 100, 103, 105, 107, 115, 117, 129, 131, 132,
	134, 137, 139, 150, 153, 155, 165, 167, 176, 179,
	184, 186, 187, 201, 202, 203, 209, 211, 212, 214,
	215, 227, 233, 242, 256, 268, 274, 284, 295, 297,
	305, 309, 310, 315, 320, 321, 326, 328, 335, 336,
	338, 339, 340, 341, 309, 376, -163, -156, -130, -216,
	-215, 373, -222, 2, -222, 2, 132, 371, -174, -175,
	-215, -216, 2, -164, 147, -130, 147, 2, -164, 2,
	153, -130, 147, 2, -130, 22, 132, 2, 167, 2,
	167, 2, -255, 2, -254, -165, 147, 2, -164, -165,
	147, 2, -142, 147, 2, -141, -130, 147, 2, -156,
	147, 2, -191, 371, -260, 2, -259, -288, 4, -293,
	-295, -294, 333, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 272, 211, 376, -164, -222,
	-234, 371, 132, -222, 211, -130, 2, 276, 2, 371,
	-72, 53, 312, -209, 2, -210, -127, -128, -129, 169,
	234, 238, 346, 309, 352, 132, -283, -168, 373, -94,
	2, -291, 2, -289, 9, -288, 5, 276, 2, 235,
	273, 55, 132, 2, 2, -333, 2, 211, 132, 2,
	132, 2, 132, 2, 132, 2, 132, 2, 2, 235,
	273, 2, 129, 2, 311, 2, 2, 132, 2, 169,
	234, 288, 2, 297, 336, 2, 132, 132, 346, 2,
	-180, -254, -152, -153, -179, -198, -199, 184, 117, 209,
	-182, 22, 99, -182, -182, 44, 372, 372, -94, 276,
	2, 10, 11, 57, 33, 362, 363, 364, 365, 127,
	366, 367, 360, 361, 359, 350, 351, 354, 355, 356,
	70, 353, 352, 63, 189, 263, 118, 119, 120, 121,
	248, 13, 14, 15, 26, 214, 183, 347, 149, 279,
	357, 16, 17, 18, 168, 36, 150, -135, -143, -222,
	-222, -222, -222, -222, 220, -173, -217, 369, -107, 371,
	371, -107, -222, -166, 371, 7, -107, -231, 369, -240,
	-222, -174, 371, 5, 371, 5, -318, 342, 129, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 231, -281,
	337, -281, -281, -265, 371, -265, -266, 371, -265, 343,
	348, 371, 346, 22, -208, -209, -208, 309, -134, 376,
	-317, -157, 371, -177, -169, -256, -222, 364, -169, -176,
	-245, 74, -185, 172, 196, 133, 181, 258, 156, 7,
	-49, -219, 377, 371, 364, -249, 348, -107, -253, 371,
	-252, -138, 371, -117, 249, -116, 21, 23, 102, 331,
	108, 285, 303, 111, 265, 249, 108, 111, 249, 285,
	303, 265, 249, 108, 377, 111, -291, -139, 376, -286,
	364, 289, 372, -162, -138, -175, 371, -151, 201, -126,
	-315, 341, 201, -151, 371, -131, 147, 2, -130, -315,
	201, -255, -140, -138, -140, 275, -130, 30, -119, 376,
	48, 254, 108, -119, 108, -119, 376, 108, -119, 108,
	108, -166, -222, 372, 376, -332, -338, 73, 371, 30,
	-233, -261, -262, -264, -273, -267, -271, -272, 40, 46,
	45, 304, 194, 270, 282, 329, 151, 38, 210, 159,
	4, 158, 160, 161, 162, 163, 164, 281, 37, 239,
	125, 126, 124, 101, 92, 91, 206, 42, 41, -275,
	-276, -269, -270, 89, 307, 308, 166, 39, 52, 51,
	334, 291, -292, -291, -332, -285, -166, 30, -209, 2,
	-342, 376, 182, -145, 188, 200, 141, 212, 344, -290,
	5, 4, -232, -246, 93, 185, -272, 8, 363, -282,
	7, 362, -284, -283, -284, 77, 373, -286, -164, 22,
	277, 2, -285, -335, 129, -332, -285, -285, -285, -285,
	-285, 272, -49, 129, -130, 182, -285, 2, -285, 2,
	297, 153, 297, -119, 376, -179, -199, -198, -201, -222,
	22, -204, 123, 197, -222, -224, -106, -106, -106, -154,
	-250, -222, 233, 153, -285, -279, -261, -278, 244, 245,
	243, 247, 246, -261, -286, 306, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, 183, 149,
	279, 36, 150, -222, 309, -222, -222, -222, -222, 193,
	201, 203, 315, 115, 322, 99, 207, -344, 295, 32,
	-229, -107, 371, -244, 27, 284, 22, -236, 261, 371,
	-217, -222, -218, -167, -166, 372, 376, -167, -235, -231,
	-243, -242, 338, 372, -166, 335, 22, 99, 364, 2,
	7, -192, 345, 192, 90, 142, 191, -193, 267, -319,
	122, 137, 371, 372, 2, 372, 2, 372, 2, 372,
	2, -222, -222, -186, 2, -280, -166, 4, 345, 192,
	90, 142, 191, 267, -186, 2, -187, 2, -222, -166,
	-188, -223, -224, 362, 363, 357, 371, 261, -189, 2,
	-222, -167, -222, 43, 179, 310, -190, -222, 132, -166,
	-222, -222, -222, -166, -166, 2, -166, 2, 371, 7,
	7, 306, 306, 7, 64, 65, 346, -134, -313, 30,
	-156, -159, 376, 132, 30, 4, -159, 376, 372, 172,
	172, -252, -185, 172, -183, 218, -183, -183, -330, 371,
	370, -249, -286, 369, 378, -167, 2, -248, -247, 30,
	-130, 216, 372, -138, 376, 309, -196, 68, 59, -212,
	147, 59, -297, -130, 68, -298, 54, 321, 233, 131,
	-196, 68, -196, 68, 68, -254, 33, -63, 66, 132,
	309, -254, 66, 309, 33, -63, 132, 309, -141, -286,
	66, -258, 349, -130, 132, 372, 376, -146, -156, -147,
	-130, -213, -212, -299, -300, -297, 153, 321, 116, 30,
	108, 225, 108, 30, 211, 201, -122, 300, 108, -214,
	339, -205, -63, 371, 93, 30, -205, -170, -171, -257,
	-172, -138, 371, -130, -164, -165, -165, -141, -142, -130,
	-156, 372, 376, -49, -259, 309, 328, -147, -48, 372,
	376, -158, 29, 369, -192, 371, -258, 376, 132, 352,
	309, 372, 312, -210, -144, 238, 283, 250, 271, 8,
	7, 7, 376, -286, -334, -130, 272, -49, -138, -141,
	-138, -254, -202, -282, 371, 363, -203, 261, 262, 376,
	-115, 31, 97, 173, -138, 346, -222, -222, 309, -344,
	295, -229, -222, 193, 203, 315, 115, 322, 99, 207,
	132, 371, -223, -223, -166, -226, 371, -166, 370, 380,
	372, -222, 370, 370, 376, -241, -242, 103, -222, -153,
	376, -152, -222, -166, -166, 372, 372, 309, 309, 309,
	309, 371, -324, 219, 371, 371, -222, 30, 376, 372,
	132, 372, 372, -194, 227, 372, 10, 11, 362, 363,
	364, 365, 127, 366, 367, 360, 361, 359, 350, 351,
	352, 63, 189, 263, 13, 14, 15, 168, 150, -223,
	-223, -223, -166, 371, 372, -227, -228, 132, 129, 30,
	-190, -190, -190, 372, 132, -166, 376, 376, 376, 372,
	372, 372, 7, 372, 376, 372, 346, 346, 372, 129,
	65, 371, 372, -214, -256, -161, 2, -252, -286, -214,
	-245, -252, -252, -184, 328, 211, 172, -252, -247, 372,
	-331, 7, -249, -248, 7, -221, -220, 130, 199, 372,
	-130, 371, -249, 372, -116, -138, -130, -130, 201, -212,
	147, -121, 201, -261, -130, 371, 371, 173, 173, -130,
	-130, 147, -130, 147, -130, -130, -117, 249, -63, 346,
	371, -138, 249, 346, -130, -63, 371, -130, 249, 346,
	-100, 146, 207, 289, 132, -138, 372, 372, 376, -131,
	153, -131, -63, -164, 5, -130, -63, -138, 108, -123,
	104, -343, 352, -130, -200, -198, -222, -181, -207, 256,
	211, -162, 333, -130, -181, -160, 376, 132, 352, -162,
	-119, -119, -119, -119, -222, -334, -291, 372, -261, 369,
	370, 7, 7, -103, 341, -291, -334, -283, -283, -127,
	319, 62, 238, -283, 376, -203, -222, -250, -138, 377,
	-222, -222, -223, -223, 132, 371, -222, -233, 26, 26,
	372, -167, 376, -218, -222, 372, -231, 105, -222, 305,
	372, 335, -153, -153, -153, 5, 192, 142, 191, -193,
	191, -193, -193, 7, -325, -130, 371, 339, -152, 372,
	-279, -261, -222, -227, -222, -279, -261, -223, -223, -223,
	-223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, -223, -223, -223, -223, 99, 201, 207, -223,
	376, -167, -228, -227, -222, -222, -261, 372, 372, 372,
	-166, -222, -222, -222, 372, 7, 237, 87, 297, -48,
	-178, 137, -258, 376, -178, -184, 371, -222, -252, 370,
	372, 376, -248, 370, 376, 379, 352, -249, 371, -156,
	-247, 309, 309, 108, 201, 330, -301, -298, -222, -155,
	-251, -130, -312, 371, -309, -310, -136, 371, 371, -114,
	102, 275, -197, 108, -119, 108, -119, 309, -196, 68,
	-225, -136, -130, -166, 309, -225, -166, 309, -225, -103,
	132, 296, 289, -148, 152, -213, 371, -131, 371, 371,
	-151, -126, 371, -130, -124, 178, -343, -289, -315, -181,
	-181, -169, 202, 67, 372, -214, -171, -161, -245, 372,
	-104, 75, -104, 7, 370, 372, -102, 213, -101, -130,
	5, -130, 212, 372, -115, -286, 26, 26, -222, -233,
	372, -222, -222, 372, -222, 370, -222, 5, -222, 372,
	372, 372, 372, -326, -130, -222, 372, 372, 372, -228,
	132, 99, 207, 371, -222, 372, 372, 376, 372, 372,
	372, -286, -130, -138, 372, -230, 139, 44, -252, -230,
	-156, -219, 7, -220, -286, 369, -248, -156, 372, -130,
	-130, -212, 108, -302, 68, -303, 57, 116, 73, 201,
	203, 321, 233, 54, 93, 242, 372, 372, 376, -137,
	-174, 57, -137, -222, 371, -155, -156, 201, 93, 201,
	93, 86, 317, -130, -130, -138, -130, -130, 371, 372,
	-138, 372, -130, -292, 306, 150, -155, 371, -156, -146,
	30, -155, 211, -125, 177, -343, -289, -122, -206, 371,
	211, -63, -181, 352, 86, 86, 370, 376, 371, 352,
	352, -115, -222, -222, 372, 372, -153, -320, 224, 372,
	-223, 132, 371, -233, 372, -222, -321, 340, -222, -166,
	-321, 372, -249, 7, 372, -212, -130, -286, -130, 116,
	147, 203, 173, 371, -223, -138, -211, -339, 72, 293,
	-251, -115, -286, -115, 372, -166, 372, 372, 203, 203,
	-222, -261, -119, -119, 309, 309, -166, 309, 309, -225,
	222, 372, -155, 372, 372, -63, 372, -138, -343, -289,
	-123, 100, -156, 68, -177, -107, 371, 371, 371, -101,
	-102, -291, -291, 372, -153, 44, -223, -233, 372, 372,
	-322, -323, -130, -248, 370, -303, -131, 201, -222, -132,
	371, -148, 371, -137, -153, 242, -118, 57, -130, -130,
	-153, 371, 371, -138, -211, 372, -148, -211, 371, -289,
	-124, 323, 202, 372, -130, -292, -292, 372, -327, 237,
	262, -166, 372, 376, 30, 108, 372, -306, 190, -130,
	-156, -115, 372, -138, -113, 328, -286, 372, -166, -166,
	371, -148, -211, -148, -155, -125, 275, -214, 372, 372,
	372, -328, -329, 36, 318, 77, -222, -328, -323, -325,
	116, -304, -307, -305, 211, 133, 223, 280, 372, 372,
	-151, -222, 372, 372, -156, -148, 372, -170, -103, -103,
	-329, 230, 128, 261, 230, 128, -130, -305, 211, -307,
	211, 323, 96, -306, 372, -211, -214, 26, -308, 198,
	254, 48, 275, -308, -304, -120, 48, 254, -148, -329,
	20, 203, 93,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 62, 0,
	0, 149, 151, 0, 0, 158, 160, 162, 164, -2,
	167, 169, 0, 0, 0, 180, 182, 184, 186, 188,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 650, -2, 0, 285, 287, 296, 298, 300, 302,
	303, 0, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 368, 370, 372, 374, 375, 377, 379,
	381, 0, 571, 573, 575, -2, 64, 65, 66, 67,
	68, 69, 77, 78, 79, 80, 71, 73, 74, 76,
	686, -2, 697, 0, 0, 0, 0, -2, 0, -2,
	-2, -2, 0, 0, 663, 665, 667, 669, -2, 0,
	0, -2, 7, 12, 14, 16, 19, 21, 23, 25,
	27, 29, 31, 33, 35, 37, 39, 42, 48, 50,
	52, 55, 57, 59, 61, 63, 0, 0, 0, 0,
	0, 0, 124, 269, 0, 1265, 1189, 1195, 1196, 1220,
	1221, 1222, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 150, 152,
	153, 0, 0, 0, 1191, 1265, 159, 161, 163, 165,
	0, 171, 0, 0, 0, 0, 538, 168, 170, 260,
	1325, 262, 264, 0, 0, 0, 0, 174, 175, 176,
	177, 178, 179, 181, 183, 185, 187, 189, 190, 0,
	0, 0, 0, 0, 259, 257, 212, 213, 0, 242,
	243, 244, 245, 246, 248, 216, 218, 219, 221, 223,
	225, 227, 228, 230, 232, 233, 235, 237, 238, 240,
	0, 0, 266, 272, 273, 274, 276, 277, 278, 279,
	280, 281, 282, 0, 130, 0, 458, 255, 253, 0,
	126, 0, 568, 0, 268, 569, 570, 565, 566, 1352,
	594, 286, 288, 297, 299, 301, -2, -2, 1442, -2,
	310, -2, 318, 1448, 0, 321, 322, 325, -2, 208,
	347, 349, 351, 353, 355, 357, 359, 361, 363, 365,
	367, 369, 371, 373, 376, 378, 380, 382, 383, 0,
	0, 0, 387, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 386, 388, 389, 390, 0, 572, 574,
	576, 0, 527, 688, -2, 661, 662, -2, 0, 692,
	692, 692, 0, 0, 662, 660, 0, 289, 0, 291,
	0, 387, 294, 295, 326, 327, 1174, 1175, 891, 0,
	0, 0, 0, 0, 0, 993, 995, 1415, 1442, 0,
	997, 998, 0, 1000, 1002, 1003, 0, 1006, 1007, 1159,
	1191, 1205, 1206, 1207, 1208, 0, 0, 1211, 0, 1213,
	1214, 1215, 1061, 1017, -2, -2, 1203, 819, 820, 821,
	822, -2, 1456, 1021, 1024, 1027, 1030, 1031, 1034, 1035,
	0, 1399, 1416, 1417, 1438, 1439, 1447, 1451, 1452, 1423,
	1435, 1424, 1411, 1421, 1433, 1271, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1229, 853, 854, 859, 860, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	862, 0, 596, 578, 587, 596, 580, 581, 582, 583,
	584, 585, 586, 589, 0, 678, 1331, 681, 1202, 679,
	664, 666, 0, 668, 0, 0, 672, 694, 693, 727,
	728, 0, 676, 677, 687, 743, 781, 758, 749, 0,
	0, 2, 70, 0, 1423, 781, 72, 0, 1423, 781,
	75, 0, 81, 0, 1423, 1194, 0, 1234, 1235, 1236,
	1237, 1238, 1456, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 0, 0, 270, 271, 1199, 1197,
	1198, 0, 154, 155, 156, 157, 0, 0, 1192, 1168,
	1166, 1167, 166, 506, 1423, -2, 1423, 530, 506, 534,
	-2, 685, 1423, 610, 261, 263, 0, 173, 0, 623,
	0, 625, 0, 640, 787, 116, 1423, 193, 206, 116,
	1423, 196, 116, 1423, 199, 1187, 116, 1423, 202, 203,
	1423, 205, 256, 0, 0, -2, 249, 251, 1230, 1231,
	1232, 1233, -2, 247, 217, 220, 222, 224, 226, 229,
	231, 234, 236, 239, 241, -2, 0, 0, 0, 457,
	0, 0, 0, 567, 0, 593, 304, 0, 307, 0,
	309, 1410, -2, -2, 313, 597, 601, 602, 603, 0,
	0, 0, 0, 0, 0, 0, 323, 209, 0, 384,
	385, 393, 394, 131, 132, 344, 345, 0, 397, 418,
	430, 0, 0, 401, 403, 456, 405, 0, 0, 407,
	0, 409, 0, 411, 0, 413, 0, 415, 417, 419,
	431, 421, 687, 423, 0, 425, 429, 0, 434, 0,
	436, 437, 438, 0, 0, 444, 0, 0, 391, 392,
	116, 785, -2, 0, 656, 706, 707, 0, 0, 0,
	0, 690, 691, 0, 0, 0, 652, 653, 290, 0,
	293, 0, 0, 0, 0, 1094, 1095, 1096, 1097, 1098,
	1099, 1102, 1103, 1100, 1101, 1104, 1105, 0, 0, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 1108, 1109, 0, 0, 1111, 0, 1113, 0,
	0, 0, 0, 0, 0, 1173, 0, 0, 1110, 896,
	897, 898, 930, 931, 0, 994, 1170, 1163, 996, 0,
	1116, -2, 1117, 0, 0, 999, 1004, 1005, 1116, 0,
	1158, -2, 0, 1210, 0, 888, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1139, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 856,
	867, 864, 863, 840, 0, 839, 837, 0, 841, 0,
	0, 0, 0, 0, 577, -2, 579, 0, 591, 0,
	680, 0, 0, 729, 732, 1179, 1183, 1184, 732, 0,
	1176, 0, 0, 0, 0, 778, 778, 778, 776, 752,
	0, 758, 0, -2, 782, 770, 0, -2, 749, 0,
	0, 783, 0, 82, 562, 95, 0, 562, 562, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 772, 1190, 0, 1164,
	1165, 146, 0, 0, 1185, 1169, 464, 0, 0, 528,
	0, 684, 0, 0, 0, 0, 1423, 537, 1223, 612,
	0, 791, 0, 626, 0, 0, 788, 0, 191, 0,
	114, 115, 0, 194, 0, 197, 0, 0, 200, 0,
	0, 0, 1117, 687, 0, 0, 275, 0, 0, 687,
	0, 1119, 799, 800, 801, 802, 803, 888, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 850, 0, 825, 825, 825, 842, 843, 851,
	852, 857, 858, 869, 870, 872, 874, 868, 868, 868,
	865, 866, 772, 133, 0, 0, 0, 0, -2, 315,
	0, 599, 0, 604, 335, 336, 337, 606, 607, 319,
	338, 339, 340, 341, 342, 343, 0, 523, 0, 525,
	1216, 0, 316, 328, 317, 320, 0, 210, 395, 396,
	398, 399, 400, 404, 0, 453, 406, 408, 410, 412,
	414, 422, 426, 687, 432, 435, 439, 440, 441, 442,
	0, 0, 0, 526, 0, 659, 704, 705, 710, 714,
	715, 718, 721, 722, 712, 891, 673, 674, 675, 698,
	699, 549, 0, 0, 292, 892, 795, 796, 844, 845,
	846, 847, 848, 893, 894, 0, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, -2, -2, -2, -2,
	-2, -2, -2, -2, 917, 918, 919, 920, 921, 922,
	923, 924, -2, -2, -2, 928, 929, -2, 1112, 1114,
	0, 1173, 0, -2, 0, -2, -2, -2, -2, 942,
	0, 944, 947, 949, 951, 0, 0, 0, 0, 1172,
	961, 1150, 0, 0, 1091, 1092, 1093, 946, 0, 0,
	1171, 1162, 0, 0, 1115, 1001, 0, 0, 0, 1123,
	1157, 1153, 0, 1008, 697, 0, 0, 0, 0, 1015,
	0, 1219, 875, 876, 877, 878, 879, 880, 889, 1071,
	0, 0, 0, 1022, 1023, 1025, 1026, 1028, 1029, 1032,
	1033, 0, 0, 0, 1039, 0, 1126, -2, -2, -2,
	-2, -2, -2, -2, 0, 1041, 0, 1043, 1117, 1136,
	0, 0, 964, 0, 0, 0, 0, 1442, 0, 1046,
	1117, 1144, 0, 0, 0, 0, 0, 1117, 0, 1149,
	0, 0, 0, 0, 0, 1057, 0, 1059, 0, 0,
	0, 0, 0, 0, 0, 448, 0, 590, 682, 0,
	0, 791, 0, 0, 0, 1182, 791, 0, 1178, 0,
	0, 0, 0, 0, 773, 777, 774, 775, 0, 0,
	758, 770, 740, 0, 0, 0, 747, 748, 769, 0,
	768, 757, -2, 0, 0, 0, 0, 0, 561, 97,
	1423, 0, 118, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 1193,
	0, 136, 0, 1200, 0, 0, 0, 0, 0, 463,
	1199, 465, 467, 468, 469, 470, 1224, 0, 1224, 0,
	0, 0, 0, 0, 0, 0, 614, 620, 0, 709,
	0, 638, 628, 0, 0, 0, 638, 642, 643, 645,
	646, 0, 0, 789, 207, 116, 116, 1188, 116, 116,
	204, 258, 0, 214, 250, 0, 0, 0, 252, 254,
	0, 792, 794, 0, 804, 0, 145, 0, 0, 0,
	0, 308, 0, 598, 605, 0, 332, 0, 334, 524,
	1218, 1217, 0, 211, 455, 283, 424, 427, 450, 451,
	452, 786, 0, 716, 0, 0, 713, 719, 720, 0,
	701, 547, 548, 0, 0, 0, -2, -2, 0, 0,
	0, 962, -2, 943, 945, 948, 950, 952, 0, 0,
	0, 0, 0, 0, 0, 963, 1116, 0, 1160, 1163,
	-2, 1118, 1121, 1122, 0, 0, 1154, 0, 0, 0,
	0, 696, 697, 697, 697, 1014, 0, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 1038,
	0, 1040, 1042, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	968, 969, 0, 1116, 1045, 1142, 1143, 0, 0, 0,
	0, 0, 0, 1051, 0, 1148, 0, 0, 0, 1055,
	1056, 1058, 0, 823, 0, 849, 871, 873, 861, 0,
	449, 687, 1201, 724, 1180, 772, 731, 733, 1181, 724,
	1177, 760, 0, 762, 0, 0, 0, 764, 0, 753,
	0, 755, 770, 745, 0, 0, 738, 0, 737, 758,
	766, 0, 0, 784, 96, 551, 0, 0, 0, 99,
	1423, 107, 0, 478, 0, 0, 0, 0, 0, 564,
	108, 1423, 116, 1423, 116, 109, 83, 562, 84, 0,
	0, 557, 0, 0, 550, 85, 0, 559, 0, 0,
	145, 0, 0, 147, 0, 1186, 472, 505, 0, 0,
	1224, 0, 461, 506, 531, -2, 533, 0, 0, 616,
	620, 0, 619, 685, 638, 708, 790, 621, 638, 0,
	0, 0, 630, 627, 624, 791, 0, 0, 0, 0,
	192, 195, 198, 201, 1118, 265, 0, 0, 1120, 0,
	797, 0, 0, 125, 0, 134, 267, 305, 306, 311,
	330, 331, 333, 329, 0, 0, 0, 700, 549, 0,
	895, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1151, 0, 0, 0, 1162, -2, 1124, 1152, 1156, 0,
	1009, 0, 0, 0, 0, 1212, 881, 882, 883, 884,
	885, 886, 887, 0, 1069, 1070, 1074, 0, 0, 1020,
	0, 0, 1125, 1135, 1137, 965, 966, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, -2, -2, -2,
	983, 984, 985, -2, -2, -2, 0, 0, 0, 1138,
	0, 0, 1140, 1141, 1145, 1146, 0, 1048, 1049, 1050,
	1147, 0, 0, 0, 855, 0, 0, 0, 0, 0,
	726, 0, 730, 0, 726, 761, 0, 780, 763, 743,
	754, 0, 751, 741, 0, 742, 0, 770, 0, 0,
	750, 0, 0, 0, 0, 117, 476, 495, 0, 0,
	540, 546, 546, 0, 1018, 1019, 0, 0, 0, 101,
	0, 0, 0, 0, 105, 0, 111, 0, 0, 0,
	90, 0, 0, 0, 0, 89, 0, 0, 88, 123,
	0, 0, 148, 459, 0, 466, 0, 0, 0, 464,
	0, 529, 0, 0, 618, 620, 0, 611, 612, 172,
	622, 636, 637, 635, 0, 638, 644, 641, 647, 0,
	0, 127, 0, 0, 798, 805, 143, 1315, 141, 138,
	140, 284, 711, 717, 702, 549, 0, 0, -2, 0,
	955, -2, -2, 1087, 1118, 1161, 1155, 1209, 697, 1010,
	1012, 1013, 890, 1076, 1073, 0, 1060, 1036, 1037, 1134,
	0, 0, 0, 0, 1118, 1089, 1047, 0, 1053, 1054,
	824, 445, 446, 447, 683, 1065, 0, 0, 734, 1065,
	0, 758, 756, 739, 735, 0, 746, 0, 767, 553,
	555, 98, 0, 477, 0, 480, 0, 0, 0, 0,
	486, 487, 0, 0, 0, 0, 497, 504, 0, 549,
	1204, 0, 549, 0, 0, 0, 0, 0, 113, 0,
	0, 563, 0, 116, 116, 552, 0, 0, 0, 0,
	558, 0, 560, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 620, 0, 613, 614, 0, 0,
	0, 629, 639, 0, 0, 0, 793, 0, 0, 0,
	0, 703, -2, -2, 956, 1088, 0, 697, 0, 1062,
	-2, 0, 0, 0, 1090, 0, 670, 0, 725, 723,
	671, 779, 770, 0, 765, 100, 0, 481, 482, 1224,
	0, 485, 488, 0, 490, 1226, 472, 0, 501, 502,
	541, 542, 545, 543, 546, 697, 499, 0, 102, 103,
	112, 120, 104, 110, 0, 0, 697, 0, 0, 771,
	0, 504, 0, 494, 472, 462, 504, 0, 0, 615,
	616, 0, 0, 0, 648, 649, 0, 0, 0, 142,
	0, 137, 139, 1011, 1079, 0, -2, 0, 991, 1052,
	1064, 1066, 0, 744, 736, 479, 483, 0, 0, 510,
	0, 498, 0, 549, 0, 0, 122, 0, 554, 556,
	0, 0, 0, 0, 472, 504, 460, 472, 0, 617,
	618, 0, 632, 791, 634, 0, 0, 144, 0, 0,
	0, 1075, 992, 0, 0, 0, 489, 515, 0, 0,
	0, 544, 1009, 506, 106, 0, 119, 0, 0, 0,
	0, 492, 472, 535, 0, 609, 0, 633, 145, 145,
	1072, 1077, 1080, -2, 1383, 1262, 0, 1078, 1067, 1068,
	0, 491, 511, 512, 0, 507, 508, 509, 1225, 503,
	510, 121, 92, 94, 0, 493, 504, 791, 128, 129,
	0, 1082, 1083, 1084, 1085, 1086, 484, 513, 0, 514,
	0, 0, 0, 515, 475, 472, 631, 0, 516, 0,
	519, 520, 0, 517, 500, 471, 473, 474, 536, 1081,
	518, 521, 522,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 360, 3, 366, 361, 3,
	371, 372, 364, 362, 376, 363, 373, 365, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 380, 375,
	350, 352, 351, 354, 377, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 369, 3, 370, 367, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 378, 359, 379, 357,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 353, 57693, 355, 57694, 356,
	57695, 358, 57696, 368, 57697, 374, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:867
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:879
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "ALTER")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:994
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1043
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1055
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1064
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1073
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1142
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1165
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = nil
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = DropCascade
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = DropRestrict
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = DropDefault
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1237
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1238
		{
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			return unimplemented(sqllex, "alter using")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1242
		{
		}
	case 123:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.str = "CSV"
		}
	case 128:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "CREATE")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "DELETE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "DROP")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1581
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			return helpWith(sqllex, "DELETE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "INSERT")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{ /* SKIP DOC */
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			return helpWith(sqllex, "GRANT")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "RESET")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1890
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			return helpWith(sqllex, "RESET")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1916
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1924
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{ /* SKIP DOC */
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1932
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			return unimplemented(sqllex, "set local")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1999
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2021
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			return unimplemented(sqllex, "set from current")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = Low
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = Normal
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = High
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2138
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2144
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			return helpWith(sqllex, "SHOW")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.str = "client_encoding"
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2370
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2386
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2426
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2430
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2434
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2442
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2448
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2452
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2456
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2589
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = DropDefault
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			return unimplemented(sqllex, "match full")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2809
		{
			return unimplemented(sqllex, "match partial")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			return unimplemented(sqllex, "match simple")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2811
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2819
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2821
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2824
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			return unimplemented(sqllex, "no action")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			return unimplemented(sqllex, "action set null")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			return unimplemented(sqllex, "action set default")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[6].str), Password: sqlDollar[7].union.strPtr(), IfNotExists: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2876
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2941
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = true
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = false
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2972
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2976
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = Ascending
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = Descending
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3016
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3018
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = true
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = false
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3052
		{
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3085
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3109
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3127
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3151
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.str = ""
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.str = ""
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = ReadOnly
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = ReadWrite
		}
	case 608:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.str = ""
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.str = ""
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.str = ""
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3320
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			return helpWith(sqllex, "INSERT")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3403
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3407
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 639:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3443
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3607
		{
			return helpWith(sqllex, "SELECT")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			return helpWith(sqllex, "VALUES")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3609
		{
			return helpWith(sqllex, "TABLE")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3655
		{
			return helpWith(sqllex, "SELECT")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3699
		{
			return helpWith(sqllex, "TABLE")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3719
		{
			return unimplemented(sqllex, "cte")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3723
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3727
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3731
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = true
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = false
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = false
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = true
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3878
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3882
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			return helpWith(sqllex, "VALUES")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &From{}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3980
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4025
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4062
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = nil
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = true
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = false
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.str = astFullJoin
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.str = astLeftJoin
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.str = astRightJoin
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.str = astInnerJoin
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4246
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4346
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4378
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4389
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4479
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = nil
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4544
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4640
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4672
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4712
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = year
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = month
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = day
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = hour
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = minute
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = month
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = hour
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = minute
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = minute
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = nil
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = second
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4807
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4842
		{
			return unimplemented(sqllex, "at tz")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5116
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5289
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5342
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5343
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5356
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5367
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5383
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5384
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5388
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5397
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5415
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5416
		{
			return unimplemented(sqllex, "current role")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5425
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5451
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5465
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5466
		{
			return unimplemented(sqllex, "treat")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5503
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5512
		{
			return unimplemented(sqllex, "within group")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5513
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.str = ""
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5610
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5611
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5612
		{
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5616
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5622
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5623
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5624
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5625
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5626
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = Any
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = Some
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = All
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = Plus
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = Minus
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = Mult
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = Div
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = Mod
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = Bitand
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = Bitor
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = Pow
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = Bitxor
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = LT
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = GT
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = EQ
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = LE
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = GE
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = NE
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = Like
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = NotLike
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = ILike
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = NotILike
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5883
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5982
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6100
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6144
		{
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6180
		{
			return unimplemented(sqllex, "func const")
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6189
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = DNull
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6216
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.str = ""
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
