// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:308
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const ON = 57522
const ONLY = 57523
const OR = 57524
const ORDER = 57525
const ORDINALITY = 57526
const OUT = 57527
const OUTER = 57528
const OVER = 57529
const OVERLAPS = 57530
const OVERLAY = 57531
const PARENT = 57532
const PARTIAL = 57533
const PARTITION = 57534
const PASSWORD = 57535
const PLACING = 57536
const POSITION = 57537
const PRECEDING = 57538
const PRECISION = 57539
const PREPARE = 57540
const PRIMARY = 57541
const PRIORITY = 57542
const RANGE = 57543
const READ = 57544
const REAL = 57545
const RECURSIVE = 57546
const REF = 57547
const REFERENCES = 57548
const RENAME = 57549
const REPEATABLE = 57550
const RELEASE = 57551
const RESTRICT = 57552
const RETURNING = 57553
const REVOKE = 57554
const RIGHT = 57555
const ROLLBACK = 57556
const ROLLUP = 57557
const ROW = 57558
const ROWS = 57559
const RSHIFT = 57560
const STATUS = 57561
const SAVEPOINT = 57562
const SEARCH = 57563
const SECOND = 57564
const SELECT = 57565
const SERIAL = 57566
const SERIALIZABLE = 57567
const SESSION = 57568
const SESSION_USER = 57569
const SET = 57570
const SHOW = 57571
const SIMILAR = 57572
const SIMPLE = 57573
const SMALLINT = 57574
const SMALLSERIAL = 57575
const SNAPSHOT = 57576
const SOME = 57577
const SPLIT = 57578
const SQL = 57579
const START = 57580
const STDIN = 57581
const STRICT = 57582
const STRING = 57583
const STORING = 57584
const SUBSTRING = 57585
const SYMMETRIC = 57586
const SYSTEM = 57587
const TABLE = 57588
const TABLES = 57589
const TEMPLATE = 57590
const TEXT = 57591
const THEN = 57592
const TIME = 57593
const TIMESTAMP = 57594
const TIMESTAMPTZ = 57595
const TO = 57596
const TRAILING = 57597
const TRANSACTION = 57598
const TREAT = 57599
const TRIM = 57600
const TRUE = 57601
const TRUNCATE = 57602
const TYPE = 57603
const UNBOUNDED = 57604
const UNCOMMITTED = 57605
const UNION = 57606
const UNIQUE = 57607
const UNKNOWN = 57608
const UPDATE = 57609
const UPSERT = 57610
const USER = 57611
const USERS = 57612
const USING = 57613
const VALID = 57614
const VALIDATE = 57615
const VALUE = 57616
const VALUES = 57617
const VARCHAR = 57618
const VARIADIC = 57619
const VIEW = 57620
const VARYING = 57621
const WHEN = 57622
const WHERE = 57623
const WINDOW = 57624
const WITH = 57625
const WITHIN = 57626
const WITHOUT = 57627
const YEAR = 57628
const ZONE = 57629
const NOT_LA = 57630
const WITH_LA = 57631
const AS_LA = 57632
const POSTFIXOP = 57633
const UMINUS = 57634

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5042

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	311, 27,
	-2, 396,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 369,
	180, 369,
	211, 369,
	309, 369,
	311, 369,
	-2, 379,
	-1, 59,
	1, 372,
	180, 372,
	211, 372,
	309, 372,
	311, 372,
	-2, 378,
	-1, 68,
	1, 27,
	311, 27,
	-2, 396,
	-1, 398,
	1, 177,
	311, 177,
	-2, 910,
	-1, 434,
	155, 406,
	179, 406,
	-2, 375,
	-1, 437,
	155, 405,
	179, 405,
	-2, 373,
	-1, 562,
	155, 405,
	179, 405,
	-2, 376,
	-1, 619,
	308, 846,
	-2, 839,
	-1, 620,
	308, 847,
	-2, 840,
	-1, 626,
	5, 544,
	308, 544,
	-2, 1005,
	-1, 650,
	5, 510,
	-2, 979,
	-1, 651,
	5, 538,
	308, 538,
	-2, 981,
	-1, 652,
	5, 518,
	-2, 982,
	-1, 653,
	5, 517,
	-2, 983,
	-1, 654,
	5, 538,
	308, 538,
	-2, 986,
	-1, 655,
	5, 538,
	308, 538,
	-2, 987,
	-1, 656,
	5, 539,
	-2, 990,
	-1, 657,
	5, 504,
	-2, 991,
	-1, 658,
	5, 504,
	-2, 992,
	-1, 659,
	5, 520,
	-2, 996,
	-1, 660,
	5, 505,
	-2, 1001,
	-1, 661,
	5, 506,
	-2, 1002,
	-1, 662,
	5, 507,
	-2, 1003,
	-1, 663,
	5, 508,
	-2, 1004,
	-1, 664,
	5, 504,
	-2, 1008,
	-1, 665,
	5, 511,
	-2, 1013,
	-1, 666,
	5, 509,
	-2, 1016,
	-1, 667,
	5, 536,
	308, 536,
	-2, 1018,
	-1, 668,
	5, 540,
	-2, 1021,
	-1, 669,
	5, 542,
	-2, 1022,
	-1, 670,
	5, 535,
	308, 535,
	-2, 1026,
	-1, 923,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	183, 379,
	264, 379,
	-2, 657,
	-1, 932,
	308, 824,
	-2, 812,
	-1, 1138,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 579,
	-1, 1139,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 580,
	-1, 1140,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 581,
	-1, 1144,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 585,
	-1, 1145,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 586,
	-1, 1146,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 587,
	-1, 1149,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 592,
	-1, 1155,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 594,
	-1, 1158,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 599,
	-1, 1159,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 600,
	-1, 1160,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 601,
	-1, 1186,
	188, 730,
	-2, 733,
	-1, 1209,
	114, 746,
	308, 846,
	-2, 839,
	-1, 1210,
	114, 747,
	-2, 975,
	-1, 1211,
	114, 748,
	-2, 908,
	-1, 1212,
	114, 749,
	-2, 879,
	-1, 1213,
	114, 750,
	-2, 894,
	-1, 1214,
	114, 751,
	-2, 907,
	-1, 1215,
	114, 752,
	-2, 943,
	-1, 1367,
	97, 379,
	139, 379,
	155, 379,
	179, 379,
	183, 379,
	264, 379,
	-2, 445,
	-1, 1371,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 593,
	-1, 1372,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 595,
	-1, 1377,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 596,
	-1, 1396,
	188, 729,
	-2, 732,
	-1, 1567,
	1, 446,
	67, 446,
	97, 446,
	115, 446,
	119, 446,
	121, 446,
	133, 446,
	139, 446,
	144, 446,
	152, 446,
	155, 446,
	166, 446,
	179, 446,
	180, 446,
	183, 446,
	211, 446,
	213, 446,
	264, 446,
	271, 446,
	281, 446,
	282, 446,
	290, 446,
	309, 446,
	311, 446,
	312, 446,
	-2, 445,
	-1, 1569,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 597,
	-1, 1574,
	142, 0,
	-2, 611,
	-1, 1582,
	188, 731,
	-2, 734,
	-1, 1616,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 637,
	-1, 1617,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 638,
	-1, 1618,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 639,
	-1, 1622,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 643,
	-1, 1623,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 644,
	-1, 1624,
	13, 0,
	14, 0,
	15, 0,
	291, 0,
	292, 0,
	293, 0,
	-2, 645,
	-1, 1736,
	142, 0,
	-2, 612,
	-1, 1739,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 615,
	-1, 1740,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 617,
	-1, 1832,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 616,
	-1, 1833,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 618,
	-1, 1840,
	142, 0,
	-2, 646,
	-1, 1891,
	142, 0,
	-2, 647,
	-1, 1947,
	35, 0,
	127, 0,
	154, 0,
	230, 0,
	288, 0,
	-2, 978,
}

const sqlNprod = 1121
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25230

var sqlAct = [...]int{

	620, 1528, 1926, 1946, 1970, 1897, 1927, 1945, 1012, 1779,
	1928, 1109, 438, 845, 1020, 1818, 1593, 926, 735, 1708,
	474, 1538, 1802, 593, 1695, 610, 1694, 1653, 851, 76,
	77, 1563, 618, 1727, 45, 617, 1562, 1084, 1720, 271,
	76, 76, 76, 1341, 1365, 76, 1083, 1453, 76, 1343,
	1088, 459, 1713, 1452, 1102, 1544, 76, 1290, 1399, 929,
	1554, 1355, 686, 76, 76, 1087, 1117, 76, 1052, 272,
	76, 76, 76, 76, 988, 1021, 979, 399, 581, 1349,
	847, 1196, 922, 1118, 19, 1171, 683, 1168, 1122, 673,
	1036, 26, 473, 1235, 1045, 799, 443, 671, 548, 783,
	868, 269, 704, 445, 58, 15, 7, 719, 708, 688,
	1078, 1206, 591, 736, 475, 476, 780, 582, 549, 437,
	22, 810, 257, 486, 1014, 964, 21, 495, 1091, 262,
	960, 874, 448, 10, 255, 566, 273, 565, 489, 9,
	8, 58, 6, 261, 263, 4, 801, 564, 386, 779,
	797, 446, 377, 389, 482, 592, 712, 547, 266, 1011,
	1119, 488, 59, 569, 264, 1825, 442, 1049, 1826, 1013,
	1363, 265, 58, 721, 442, 877, 878, 267, 259, 60,
	258, 1302, 1394, 260, 73, 721, 721, 1395, 1961, 1942,
	1017, 1113, 1801, 1934, 1924, 698, 1113, 1042, 880, 1919,
	1301, 1353, 1113, 1918, 425, 1893, 1113, 876, 1042, 1887,
	1050, 1871, 1113, 1861, 1801, 450, 1113, 1834, 396, 879,
	1042, 435, 457, 1352, 1393, 464, 467, 456, 457, 1055,
	462, 1812, 465, 469, 1801, 27, 1809, 1800, 434, 1113,
	1801, 1784, 1783, 1055, 1113, 1113, 50, 1761, 1051, 1048,
	1055, 76, 76, 76, 76, 76, 1741, 498, 1877, 1055,
	1738, 64, 1730, 1042, 1680, 1055, 1679, 1055, 1665, 1055,
	52, 1113, 1578, 612, 885, 1055, 28, 1514, 57, 1508,
	1009, 875, 1009, 1470, 66, 1468, 1471, 499, 1055, 1467,
	1466, 443, 1055, 1055, 1352, 1055, 1629, 41, 1581, 268,
	1328, 877, 878, 1398, 36, 1804, 1396, 53, 1053, 1055,
	977, 40, 37, 67, 1330, 1331, 1113, 1113, 877, 878,
	1114, 62, 1057, 1113, 880, 895, 1180, 63, 42, 64,
	1064, 491, 491, 1055, 38, 1054, 1041, 722, 1055, 1042,
	1008, 880, 57, 1009, 976, 879, 61, 975, 729, 722,
	722, 730, 66, 477, 500, 1108, 576, 478, 1072, 1981,
	577, 840, 879, 839, 791, 790, 511, 455, 36, 68,
	477, 478, 1047, 76, 478, 824, 37, 1366, 496, 1301,
	531, 67, 1944, 896, 64, 1940, 1933, 1888, 76, 62,
	1810, 76, 76, 492, 1046, 63, 1766, 576, 38, 1762,
	885, 1754, 1686, 1753, 1752, 875, 457, 66, 467, 1747,
	39, 483, 1746, 1745, 1016, 1516, 1692, 885, 1644, 1639,
	1638, 55, 1637, 1584, 43, 76, 54, 76, 1567, 76,
	76, 76, 44, 76, 1543, 64, 67, 1518, 1475, 725,
	47, 49, 1472, 1460, 1451, 1422, 1419, 563, 76, 471,
	51, 720, 843, 1418, 1416, 1404, 1403, 1329, 66, 76,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 61,
	906, 679, 56, 76, 877, 878, 1333, 1252, 1364, 271,
	76, 76, 76, 1203, 76, 1202, 576, 67, 935, 575,
	850, 1176, 519, 562, 706, 62, 930, 880, 61, 64,
	1917, 63, 1595, 76, 76, 49, 555, 678, 558, 272,
	1907, 76, 520, 76, 1874, 1853, 1851, 1842, 879, 1829,
	61, 1822, 66, 1807, 498, 498, 1798, 1776, 1759, 1732,
	1685, 677, 271, 76, 1702, 76, 76, 76, 76, 76,
	76, 76, 1573, 1536, 514, 516, 76, 76, 1534, 1533,
	1531, 67, 76, 1487, 499, 499, 1486, 477, 1450, 62,
	76, 478, 272, 1412, 1411, 63, 1389, 1385, 1173, 1317,
	1279, 1278, 849, 552, 1266, 1265, 273, 550, 76, 1245,
	709, 76, 457, 1177, 61, 1201, 1112, 554, 965, 968,
	881, 882, 883, 884, 886, 765, 906, 724, 972, 578,
	727, 877, 878, 958, 572, 573, 957, 956, 435, 883,
	884, 886, 955, 906, 680, 954, 585, 953, 872, 952,
	951, 500, 500, 932, 950, 434, 1423, 1424, 705, 273,
	949, 443, 948, 825, 711, 457, 713, 713, 714, 947,
	483, 854, 946, 472, 945, 879, 944, 943, 942, 933,
	931, 61, 844, 460, 1266, 580, 517, 507, 464, 467,
	505, 842, 787, 731, 786, 733, 1691, 1690, 1504, 930,
	1311, 877, 878, 821, 1310, 814, 694, 679, 1827, 1423,
	1424, 1344, 76, 1689, 829, 1303, 1366, 525, 970, 1474,
	76, 1473, 971, 1370, 76, 940, 541, 526, 76, 76,
	841, 857, 76, 848, 858, 1714, 432, 1013, 1596, 1197,
	870, 856, 961, 1297, 1407, 1515, 76, 1481, 76, 76,
	251, 76, 1903, 1958, 76, 1429, 76, 76, 1860, 76,
	545, 498, 435, 1957, 1324, 435, 435, 1673, 1063, 1792,
	982, 679, 424, 418, 423, 1238, 441, 419, 1791, 864,
	1502, 826, 865, 866, 830, 831, 832, 833, 834, 1501,
	71, 499, 546, 1478, 837, 838, 672, 993, 995, 906,
	1477, 1373, 252, 1316, 1315, 689, 1439, 690, 1429, 742,
	1314, 1313, 76, 76, 966, 962, 963, 1156, 440, 625,
	969, 936, 1423, 1424, 1056, 1005, 1004, 1015, 1001, 1015,
	820, 551, 1820, 1030, 491, 981, 491, 989, 1249, 973,
	1248, 1498, 70, 689, 257, 690, 981, 1127, 985, 1037,
	1059, 262, 980, 1859, 1103, 271, 1039, 523, 500, 76,
	503, 427, 442, 58, 1440, 261, 263, 974, 58, 1019,
	1038, 1040, 1438, 1049, 76, 76, 691, 1029, 1717, 457,
	266, 76, 496, 467, 998, 272, 264, 457, 1034, 1002,
	247, 675, 1006, 265, 1033, 1031, 524, 1032, 992, 267,
	259, 1024, 258, 1781, 428, 260, 467, 76, 1170, 467,
	76, 695, 1028, 1115, 691, 966, 1050, 969, 253, 1503,
	1066, 1429, 605, 433, 1170, 1221, 906, 429, 1058, 1060,
	1061, 1197, 1285, 1957, 963, 962, 430, 248, 1489, 1065,
	702, 1905, 696, 439, 271, 1425, 1426, 1427, 1428, 1430,
	254, 74, 273, 715, 1051, 1048, 1077, 1523, 69, 1053,
	1106, 1107, 369, 370, 371, 1423, 1424, 388, 1323, 1081,
	400, 695, 1439, 1178, 272, 1520, 502, 706, 388, 1967,
	689, 1291, 690, 706, 991, 449, 449, 1126, 1080, 74,
	72, 1277, 74, 74, 468, 74, 906, 765, 765, 268,
	1427, 1428, 1430, 819, 818, 1661, 812, 807, 1295, 76,
	76, 76, 1251, 1521, 1053, 76, 1978, 1053, 76, 1354,
	1184, 1124, 1125, 1116, 76, 76, 76, 76, 76, 457,
	1440, 1506, 76, 1496, 1082, 76, 76, 1662, 1921, 1291,
	76, 273, 57, 542, 978, 1174, 1299, 76, 721, 76,
	990, 691, 1068, 1854, 1922, 1284, 76, 692, 1070, 1281,
	1193, 700, 1120, 1175, 1429, 1259, 76, 1358, 36, 1930,
	250, 249, 699, 1053, 1490, 1071, 37, 375, 1047, 1325,
	1782, 443, 522, 822, 1069, 1361, 1973, 76, 76, 1216,
	959, 1276, 1253, 76, 1098, 692, 1356, 1966, 38, 521,
	543, 1153, 1293, 498, 1359, 1838, 765, 1434, 1431, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1799, 1254, 1357, 544,
	1375, 378, 378, 76, 1657, 76, 1658, 76, 674, 920,
	1263, 76, 1722, 499, 1410, 76, 1169, 1555, 1929, 771,
	1956, 1566, 383, 383, 76, 1931, 442, 379, 379, 1296,
	1288, 1332, 1660, 1334, 76, 823, 522, 1954, 1304, 1663,
	1707, 1100, 765, 534, 1255, 1360, 687, 1305, 512, 1306,
	1307, 380, 380, 74, 484, 74, 400, 400, 510, 1625,
	1979, 742, 742, 1965, 568, 1932, 1309, 1320, 443, 382,
	382, 1283, 1322, 1151, 1154, 1287, 1548, 1319, 1326, 64,
	500, 1327, 705, 1321, 1336, 49, 765, 1358, 1971, 1786,
	1335, 705, 722, 1669, 1338, 863, 567, 1985, 1659, 1785,
	1150, 457, 66, 1721, 1757, 1361, 1308, 1037, 796, 1848,
	1263, 1397, 692, 1347, 1039, 1774, 1553, 1369, 443, 1346,
	568, 1480, 1368, 622, 1359, 1262, 58, 1258, 1038, 1040,
	1972, 67, 1101, 855, 1425, 1426, 1427, 1428, 1430, 62,
	846, 1626, 1728, 1519, 794, 63, 1672, 1627, 1974, 1898,
	1376, 1374, 567, 1671, 836, 795, 792, 1539, 381, 381,
	1709, 1775, 1268, 777, 256, 1267, 1339, 1723, 1550, 1549,
	742, 443, 1391, 789, 521, 508, 1152, 76, 813, 808,
	1668, 1382, 764, 481, 480, 1360, 1984, 1406, 440, 1120,
	513, 559, 1758, 400, 400, 1380, 1529, 1772, 1693, 1729,
	1545, 1350, 384, 384, 1200, 741, 1199, 1590, 1841, 1756,
	1454, 1572, 76, 76, 1485, 1417, 1384, 1286, 1773, 1510,
	1423, 1424, 1062, 1007, 540, 539, 742, 388, 538, 74,
	537, 400, 557, 400, 536, 560, 1457, 1458, 1459, 76,
	1670, 1476, 76, 535, 76, 877, 878, 532, 479, 1483,
	449, 76, 925, 1455, 941, 828, 1925, 1895, 1650, 1494,
	1535, 74, 1492, 76, 1497, 1378, 1479, 76, 880, 1383,
	742, 1340, 1532, 1104, 271, 74, 76, 767, 1096, 1512,
	1505, 1276, 74, 74, 74, 1035, 716, 1511, 1509, 879,
	1493, 728, 1495, 1522, 1524, 1525, 726, 1354, 723, 718,
	1513, 701, 1540, 697, 272, 74, 74, 1530, 1342, 693,
	1793, 570, 453, 784, 1575, 784, 1110, 1558, 1958, 1429,
	528, 76, 1178, 1586, 1587, 1588, 816, 981, 981, 1552,
	1556, 1557, 3, 996, 994, 400, 1542, 784, 400, 400,
	400, 400, 400, 835, 885, 1358, 1547, 1507, 400, 400,
	1551, 1379, 1804, 1795, 388, 997, 1856, 1890, 1381, 1546,
	374, 574, 853, 1361, 1000, 1583, 999, 1024, 1120, 1878,
	1439, 273, 417, 1111, 1356, 1559, 1705, 1099, 571, 454,
	449, 1597, 1359, 873, 1602, 765, 1095, 1018, 76, 76,
	76, 871, 788, 734, 1044, 895, 1357, 76, 76, 529,
	1982, 461, 1983, 76, 385, 76, 1166, 76, 76, 76,
	1632, 1645, 76, 76, 765, 765, 1526, 1633, 1120, 1517,
	1164, 1469, 1120, 765, 765, 420, 421, 1312, 1440, 1423,
	1424, 877, 878, 1250, 1666, 1667, 1074, 1073, 1599, 1600,
	1649, 1247, 1646, 1360, 76, 76, 1246, 1604, 1605, 1194,
	1075, 921, 1743, 896, 1875, 1815, 765, 1711, 1589, 1337,
	76, 76, 1076, 934, 76, 1541, 426, 1701, 1780, 76,
	376, 827, 1701, 1706, 1700, 76, 1222, 1699, 1688, 1700,
	1636, 1703, 1699, 533, 74, 1920, 1749, 1409, 1162, 1817,
	1161, 1704, 986, 1837, 1167, 1683, 74, 1198, 939, 1710,
	74, 1003, 1737, 1687, 74, 1725, 76, 1712, 1433, 1425,
	1426, 1427, 1428, 1430, 766, 35, 1697, 598, 74, 1651,
	1026, 1027, 1733, 74, 1482, 1090, 74, 1089, 400, 400,
	274, 400, 817, 889, 881, 882, 883, 884, 886, 806,
	906, 621, 800, 1718, 1719, 809, 1207, 1724, 676, 623,
	739, 624, 740, 967, 764, 764, 611, 737, 494, 1351,
	1755, 76, 1676, 76, 1022, 76, 76, 1195, 1682, 742,
	1405, 937, 597, 765, 76, 603, 1163, 741, 741, 602,
	1182, 504, 1726, 1165, 784, 873, 1181, 1185, 1362, 1188,
	48, 518, 394, 395, 1294, 1684, 76, 1105, 742, 742,
	859, 1491, 1208, 1208, 1219, 431, 1230, 742, 742, 1767,
	1420, 1768, 1242, 1243, 1244, 1120, 1120, 506, 76, 1120,
	1228, 1220, 1217, 553, 1803, 76, 682, 1023, 530, 738,
	1805, 1079, 1300, 1794, 76, 1043, 579, 867, 1701, 1808,
	742, 452, 1770, 76, 76, 1700, 74, 1086, 1699, 767,
	767, 1796, 451, 873, 1085, 527, 793, 1067, 422, 1850,
	1097, 1261, 1977, 764, 1855, 1488, 1816, 1836, 1821, 1814,
	1902, 65, 25, 765, 23, 1831, 20, 18, 17, 74,
	1830, 16, 400, 76, 24, 1828, 741, 14, 1843, 13,
	12, 1852, 1789, 1790, 11, 1222, 1222, 1788, 34, 33,
	1811, 32, 76, 76, 31, 30, 76, 1846, 29, 5,
	76, 1847, 2, 1, 0, 76, 0, 1824, 0, 764,
	1864, 0, 1872, 0, 1866, 0, 0, 1868, 0, 1778,
	0, 0, 1873, 76, 706, 0, 1865, 1701, 271, 76,
	76, 0, 741, 443, 1700, 0, 0, 1699, 1876, 0,
	1222, 1222, 1222, 0, 1879, 0, 1880, 742, 767, 765,
	1889, 0, 76, 764, 76, 76, 0, 76, 272, 1883,
	1882, 1892, 0, 1813, 0, 1885, 1908, 1886, 0, 0,
	1906, 74, 1256, 1257, 0, 1912, 741, 986, 76, 1120,
	1264, 1911, 1867, 1910, 0, 0, 1269, 1270, 1272, 1274,
	1275, 1900, 1909, 1915, 1280, 1916, 1914, 1282, 74, 1803,
	1701, 1913, 74, 0, 767, 0, 76, 1700, 76, 74,
	1699, 1298, 0, 1941, 0, 1935, 0, 0, 74, 1388,
	1937, 1939, 0, 1390, 0, 273, 76, 0, 74, 1884,
	1951, 0, 765, 0, 1904, 1955, 1401, 1402, 1953, 0,
	778, 1959, 0, 0, 0, 1938, 1960, 742, 767, 1079,
	784, 1964, 1962, 0, 0, 1079, 1963, 0, 0, 0,
	0, 0, 1976, 1975, 1980, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 766, 766, 0, 0,
	1661, 0, 1654, 1462, 0, 853, 1986, 853, 0, 400,
	1652, 1222, 1222, 74, 1656, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	1901, 0, 1662, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 1499, 1500, 0, 0, 0, 0,
	0, 0, 1655, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
	1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
	1222, 1024, 1222, 0, 1386, 1387, 0, 1423, 1424, 0,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1735, 0, 766, 0, 0, 0, 0,
	0, 738, 738, 0, 0, 0, 0, 0, 0, 1657,
	0, 1658, 0, 0, 0, 0, 0, 877, 878, 0,
	1561, 0, 0, 0, 0, 0, 742, 1438, 0, 1446,
	1447, 1448, 0, 0, 0, 0, 0, 1660, 0, 0,
	880, 0, 0, 0, 1663, 1579, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 764, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 0,
	0, 764, 764, 0, 0, 766, 0, 0, 0, 0,
	764, 764, 0, 1659, 74, 74, 1630, 0, 0, 1444,
	738, 0, 0, 0, 741, 741, 885, 1640, 0, 0,
	0, 877, 878, 741, 741, 0, 0, 1439, 0, 0,
	0, 1527, 0, 764, 986, 0, 853, 0, 0, 0,
	0, 0, 0, 1537, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 741, 767, 0, 74,
	0, 0, 0, 0, 0, 879, 738, 895, 1565, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 0, 0,
	1570, 1571, 0, 0, 0, 1440, 767, 767, 0, 1222,
	0, 0, 0, 1423, 1424, 767, 767, 0, 0, 0,
	0, 0, 1716, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 1594, 0, 0, 0, 599, 46, 0,
	885, 0, 0, 0, 0, 896, 0, 0, 767, 0,
	0, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	764, 1628, 0, 0, 0, 46, 0, 0, 1435, 1436,
	1437, 0, 1434, 1431, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 895, 0, 741, 0, 0, 436, 0, 0, 444,
	1647, 1648, 986, 1222, 0, 0, 46, 0, 0, 873,
	873, 0, 1429, 0, 0, 1674, 0, 1675, 0, 74,
	1677, 1678, 583, 583, 1681, 74, 881, 882, 883, 884,
	886, 684, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 707, 896,
	0, 0, 0, 0, 1696, 0, 873, 1086, 0, 1696,
	0, 0, 0, 1439, 0, 767, 0, 0, 0, 0,
	764, 0, 74, 74, 0, 0, 74, 0, 0, 0,
	0, 1565, 0, 0, 0, 0, 0, 1731, 1222, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 1423,
	1424, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 766, 1734, 0, 0, 1750, 0,
	0, 1440, 0, 0, 0, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 860, 862,
	0, 0, 0, 766, 766, 869, 0, 0, 0, 1438,
	0, 0, 766, 766, 0, 0, 764, 915, 916, 917,
	918, 919, 0, 0, 0, 767, 0, 924, 0, 0,
	0, 0, 0, 986, 0, 1769, 0, 400, 1771, 741,
	0, 0, 0, 1870, 0, 766, 74, 938, 1777, 0,
	0, 0, 0, 0, 444, 0, 0, 0, 1429, 1431,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 0, 873, 0,
	0, 0, 0, 877, 878, 0, 897, 898, 899, 907,
	908, 909, 0, 0, 0, 1696, 0, 0, 0, 738,
	74, 1444, 0, 0, 0, 0, 880, 1819, 911, 764,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 1439,
	0, 767, 0, 0, 0, 873, 1565, 879, 738, 738,
	0, 0, 741, 894, 0, 0, 1923, 738, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1943, 0, 853, 0, 0, 0, 0,
	738, 0, 766, 0, 0, 0, 0, 1440, 0, 0,
	0, 0, 885, 0, 1857, 1858, 0, 0, 1862, 0,
	0, 0, 1863, 0, 1696, 0, 0, 400, 0, 0,
	904, 912, 0, 0, 767, 0, 0, 0, 0, 0,
	0, 0, 0, 1881, 0, 873, 0, 0, 0, 0,
	0, 1565, 873, 0, 0, 0, 0, 902, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 1891, 0, 0,
	0, 0, 0, 0, 1899, 0, 873, 74, 0, 400,
	1435, 1436, 1437, 436, 1434, 1431, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 0, 0, 0, 0, 1696, 0, 0,
	1819, 0, 766, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 896, 0, 0, 0, 0, 0, 0, 74, 0,
	873, 0, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 0, 1952, 0,
	0, 0, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 0, 1155, 0, 1157, 1158, 1159,
	1160, 0, 0, 0, 0, 0, 0, 0, 766, 0,
	0, 903, 0, 0, 891, 892, 893, 0, 890, 887,
	888, 889, 881, 882, 883, 884, 886, 436, 906, 0,
	436, 436, 0, 0, 0, 1204, 1205, 738, 0, 1218,
	0, 1229, 1231, 1236, 1239, 1240, 1241, 0, 0, 0,
	0, 0, 0, 0, 923, 0, 0, 0, 927, 928,
	0, 0, 0, 0, 0, 0, 684, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 0, 0, 0, 0,
	0, 766, 900, 0, 0, 0, 0, 0, 0, 880,
	0, 911, 1289, 0, 1292, 0, 0, 0, 0, 0,
	1423, 1424, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	879, 0, 0, 738, 0, 0, 894, 0, 0, 0,
	0, 0, 877, 878, 0, 897, 898, 899, 907, 908,
	909, 0, 0, 0, 0, 0, 1318, 0, 900, 0,
	0, 0, 0, 0, 0, 880, 0, 911, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 46, 0, 0, 885, 879, 0, 0, 0,
	0, 0, 894, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 46, 904, 912, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 738, 0, 910, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 895, 0, 0, 877,
	878, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1371, 1372, 0, 0, 0, 0, 1377, 901, 904,
	912, 0, 880, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 910, 0, 0, 0, 0, 0,
	0, 1392, 0, 879, 0, 0, 902, 0, 0, 0,
	1400, 0, 895, 0, 896, 0, 0, 0, 1408, 0,
	0, 0, 1413, 0, 0, 0, 905, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 924, 1440, 0,
	0, 0, 0, 1236, 1236, 1236, 0, 0, 885, 0,
	0, 0, 1423, 1424, 1121, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 0, 903, 0, 1484, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	1172, 906, 0, 0, 0, 0, 0, 0, 1763, 895,
	0, 0, 583, 0, 0, 0, 0, 0, 0, 0,
	583, 1435, 1436, 1437, 684, 1434, 1431, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 0, 906, 0, 0,
	0, 1429, 0, 0, 1465, 0, 0, 896, 0, 0,
	0, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 0, 0,
	900, 1568, 0, 0, 1569, 0, 0, 880, 0, 911,
	0, 0, 0, 0, 444, 1574, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 879, 1318,
	0, 0, 0, 0, 894, 0, 0, 0, 1591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1601, 0,
	0, 0, 1603, 0, 0, 887, 888, 889, 881, 882,
	883, 884, 886, 0, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 885, 0, 1634, 1635, 0, 0, 0,
	0, 0, 0, 46, 1641, 1642, 1643, 46, 0, 0,
	0, 904, 912, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 1367, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 0, 895, 0, 0, 583, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1172, 0, 0, 0, 901, 1434, 1431, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 0, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 1715, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 878, 896, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 1736, 905, 0, 900, 1739, 1740, 0,
	0, 0, 1742, 880, 0, 911, 1744, 0, 0, 0,
	0, 0, 0, 1748, 923, 0, 0, 1751, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 877, 878,
	894, 897, 898, 899, 907, 908, 909, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	1760, 880, 903, 911, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 0, 879, 0, 0, 0, 1464, 0, 894, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 1787, 0, 0, 0, 0, 904, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 1806,
	0, 0, 0, 0, 902, 0, 0, 885, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 1823, 1121, 904, 912, 0, 0, 0,
	0, 0, 901, 0, 0, 1832, 1833, 0, 0, 0,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 1845, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 1849, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 684,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 401, 877, 878, 896, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 905, 0,
	900, 402, 0, 0, 0, 0, 0, 880, 903, 911,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 0, 879, 0,
	0, 0, 1463, 0, 894, 0, 404, 0, 0, 0,
	0, 409, 410, 0, 0, 415, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 403, 405, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 1936, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 1121, 1121, 0,
	0, 1121, 1950, 1950, 0, 0, 406, 0, 0, 0,
	0, 904, 912, 0, 0, 0, 0, 0, 0, 407,
	408, 0, 0, 0, 0, 0, 910, 0, 1950, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 902, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1950, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 1797, 0, 0,
	413, 0, 0, 0, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1121, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	270, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 289, 80,
	290, 291, 292, 293, 197, 294, 295, 296, 297, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 298, 84,
	204, 205, 85, 299, 300, 206, 207, 208, 301, 209,
	302, 275, 303, 86, 87, 88, 923, 89, 304, 90,
	91, 92, 305, 276, 93, 94, 306, 307, 308, 309,
	310, 311, 95, 96, 97, 98, 210, 99, 211, 212,
	312, 100, 313, 101, 314, 315, 316, 102, 103, 317,
	104, 318, 0, 319, 213, 105, 106, 214, 215, 320,
	321, 322, 107, 108, 216, 0, 109, 323, 110, 324,
	325, 277, 326, 111, 217, 327, 218, 328, 112, 113,
	114, 219, 220, 279, 329, 117, 330, 115, 331, 278,
	116, 221, 222, 223, 224, 332, 225, 333, 280, 118,
	281, 119, 120, 334, 122, 121, 335, 226, 282, 123,
	283, 336, 124, 337, 338, 125, 0, 126, 127, 128,
	129, 130, 284, 131, 132, 135, 133, 339, 134, 340,
	227, 136, 228, 137, 138, 341, 342, 343, 344, 345,
	139, 229, 285, 140, 286, 230, 141, 142, 143, 144,
	346, 231, 145, 232, 146, 347, 147, 148, 149, 233,
	150, 151, 348, 153, 154, 152, 155, 349, 156, 287,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 350,
	235, 164, 165, 351, 166, 167, 288, 168, 236, 237,
	169, 352, 175, 170, 171, 172, 174, 238, 173, 239,
	353, 176, 354, 177, 178, 179, 355, 240, 241, 242,
	356, 357, 180, 243, 244, 358, 181, 182, 183, 184,
	359, 360, 185, 186, 187, 361, 188, 362, 189, 190,
	191, 245, 246, 363, 364, 192, 365, 366, 367, 368,
	193, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1560, 78, 79, 289, 80, 290, 291, 292, 293, 197,
	294, 295, 296, 297, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 298, 84, 204, 205, 85, 299, 300,
	206, 207, 208, 301, 209, 302, 275, 303, 86, 87,
	88, 0, 89, 304, 90, 91, 92, 305, 276, 93,
	94, 306, 307, 308, 309, 310, 311, 95, 96, 97,
	98, 210, 99, 211, 212, 312, 100, 313, 101, 314,
	315, 316, 102, 103, 317, 104, 318, 0, 319, 213,
	105, 106, 214, 215, 320, 321, 322, 107, 108, 216,
	0, 109, 323, 110, 324, 325, 277, 326, 111, 217,
	327, 218, 328, 112, 113, 114, 219, 220, 279, 329,
	117, 330, 115, 331, 278, 116, 221, 222, 223, 224,
	332, 225, 333, 280, 118, 281, 119, 120, 334, 122,
	121, 335, 226, 282, 123, 283, 336, 124, 337, 338,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 339, 134, 340, 227, 136, 228, 137, 138,
	341, 342, 343, 344, 345, 139, 229, 285, 140, 286,
	230, 141, 142, 143, 144, 346, 231, 145, 232, 146,
	347, 147, 148, 149, 233, 150, 151, 348, 153, 154,
	152, 155, 349, 156, 287, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 350, 235, 164, 165, 351, 166,
	167, 288, 168, 236, 237, 169, 352, 175, 170, 171,
	172, 174, 238, 173, 239, 353, 176, 354, 177, 178,
	179, 355, 240, 241, 242, 356, 357, 180, 243, 244,
	358, 181, 182, 183, 184, 359, 360, 185, 186, 187,
	361, 188, 362, 189, 190, 191, 245, 246, 363, 364,
	192, 365, 366, 367, 368, 193, 194, 195, 196, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 710, 0, 0, 78, 79, 289, 80, 290,
	291, 292, 293, 197, 294, 295, 296, 297, 81, 82,
	198, 199, 200, 201, 83, 202, 203, 298, 84, 204,
	205, 85, 299, 300, 206, 207, 208, 301, 209, 302,
	275, 303, 86, 87, 88, 0, 89, 304, 90, 91,
	92, 305, 276, 93, 94, 306, 307, 308, 309, 310,
	311, 95, 96, 97, 98, 210, 99, 211, 212, 312,
	100, 313, 101, 314, 315, 316, 102, 103, 317, 104,
	318, 0, 319, 213, 105, 106, 214, 215, 320, 321,
	322, 107, 108, 216, 0, 109, 323, 110, 324, 325,
	277, 326, 111, 217, 327, 218, 328, 112, 113, 114,
	219, 220, 279, 329, 117, 330, 115, 331, 278, 116,
	221, 222, 223, 224, 332, 225, 333, 280, 118, 281,
	119, 120, 334, 122, 121, 335, 226, 282, 123, 283,
	336, 124, 337, 338, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 339, 134, 340, 227,
	136, 228, 137, 138, 341, 342, 343, 344, 345, 139,
	229, 285, 140, 286, 230, 141, 142, 143, 144, 346,
	231, 145, 232, 146, 347, 147, 148, 149, 233, 150,
	151, 348, 153, 154, 152, 155, 349, 156, 287, 157,
	158, 234, 159, 0, 160, 161, 162, 163, 350, 235,
	164, 165, 351, 166, 167, 288, 168, 236, 237, 169,
	352, 175, 170, 171, 172, 174, 238, 173, 239, 353,
	176, 354, 177, 178, 179, 355, 240, 241, 242, 356,
	357, 180, 243, 244, 358, 181, 182, 183, 184, 359,
	360, 185, 186, 187, 361, 188, 362, 189, 190, 191,
	245, 246, 363, 364, 192, 365, 366, 367, 368, 193,
	194, 195, 196, 619, 608, 609, 606, 607, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 1190, 80, 0, 0, 0, 0, 635, 601, 0,
	0, 0, 81, 82, 198, 650, 200, 651, 83, 652,
	653, 0, 84, 204, 205, 85, 616, 634, 654, 655,
	208, 0, 646, 0, 627, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	628, 630, 0, 629, 631, 95, 96, 97, 98, 656,
	99, 657, 658, 0, 100, 0, 101, 0, 1191, 0,
	649, 103, 0, 104, 0, 0, 0, 600, 105, 106,
	636, 637, 614, 0, 0, 107, 108, 659, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 647, 0, 218,
	0, 112, 113, 114, 643, 645, 279, 0, 117, 0,
	115, 0, 278, 116, 660, 661, 662, 663, 0, 626,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	648, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 615, 644, 136, 664, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 638, 141,
	142, 143, 144, 0, 639, 145, 232, 146, 0, 147,
	148, 149, 665, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 604, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 632, 166, 167, 288,
	168, 666, 237, 169, 0, 175, 170, 171, 172, 174,
	667, 173, 640, 0, 176, 0, 177, 178, 179, 0,
	240, 668, 669, 0, 0, 180, 641, 642, 613, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 633, 188,
	0, 189, 190, 191, 245, 670, 1189, 0, 192, 0,
	0, 0, 0, 193, 194, 195, 196, 590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 587,
	1192, 0, 0, 0, 588, 0, 0, 596, 1187, 0,
	0, 0, 594, 619, 608, 609, 606, 607, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 635, 601, 0,
	0, 0, 81, 82, 198, 650, 200, 651, 83, 652,
	653, 0, 84, 204, 205, 85, 616, 634, 654, 655,
	208, 0, 646, 0, 627, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 276, 93, 94, 0,
	628, 630, 0, 629, 631, 95, 96, 97, 98, 656,
	99, 657, 658, 685, 100, 0, 101, 0, 0, 0,
	649, 103, 0, 104, 0, 0, 0, 600, 105, 106,
	636, 637, 614, 0, 0, 107, 108, 659, 0, 109,
	0, 110, 0, 0, 277, 0, 111, 647, 0, 218,
	0, 112, 113, 114, 643, 645, 279, 0, 117, 0,
	115, 0, 278, 116, 660, 661, 662, 663, 0, 626,
	0, 280, 118, 281, 119, 120, 0, 122, 121, 0,
	648, 282, 123, 283, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 284, 131, 132, 135, 133,
	589, 134, 615, 644, 136, 664, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 285, 140, 286, 638, 141,
	142, 143, 144, 0, 639, 145, 232, 146, 0, 147,
	148, 149, 665, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 287, 157, 158, 604, 159, 0, 160, 161,
	162, 163, 64, 235, 164, 165, 632, 166, 167, 288,
	168, 666, 237, 169, 0, 175, 170, 171, 172, 174,
	667, 173, 640, 0, 176, 66, 177, 178, 179, 0,
	240, 668, 669, 0, 0, 180, 641, 642, 613, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 633, 188,
	0, 189, 190, 191, 501, 670, 0, 0, 192, 0,
	0, 0, 62, 193, 194, 195, 196, 590, 63, 619,
	608, 609, 606, 607, 595, 0, 0, 0, 586, 587,
	0, 0, 0, 0, 588, 78, 79, 596, 80, 0,
	0, 0, 594, 635, 601, 0, 0, 0, 81, 82,
	198, 650, 200, 651, 83, 652, 653, 0, 84, 204,
	205, 85, 616, 634, 654, 655, 208, 0, 646, 0,
	627, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 276, 93, 94, 0, 628, 630, 0, 629,
	631, 95, 96, 97, 98, 656, 99, 657, 658, 0,
	100, 0, 101, 0, 0, 0, 649, 103, 0, 104,
	0, 0, 0, 600, 105, 106, 636, 637, 614, 0,
	0, 107, 108, 659, 0, 109, 0, 110, 0, 0,
	277, 0, 111, 647, 0, 218, 0, 112, 113, 114,
	643, 645, 279, 0, 117, 0, 115, 0, 278, 116,
	660, 661, 662, 663, 0, 626, 0, 280, 118, 281,
	119, 120, 0, 122, 121, 0, 648, 282, 123, 283,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 284, 131, 132, 135, 133, 589, 134, 615, 644,
	136, 664, 137, 138, 0, 0, 0, 0, 0, 139,
	229, 285, 140, 286, 638, 141, 142, 143, 144, 0,
	639, 145, 232, 146, 0, 147, 148, 149, 665, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 287, 157,
	158, 604, 159, 0, 160, 161, 162, 163, 64, 235,
	164, 165, 632, 166, 167, 288, 168, 666, 237, 169,
	0, 175, 170, 171, 172, 174, 667, 173, 640, 0,
	176, 66, 177, 178, 179, 0, 240, 668, 669, 0,
	0, 180, 641, 642, 613, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 633, 188, 0, 189, 190, 191,
	501, 670, 0, 0, 192, 0, 0, 0, 62, 193,
	194, 195, 196, 590, 63, 619, 608, 609, 606, 607,
	595, 0, 0, 0, 586, 587, 0, 0, 0, 0,
	588, 78, 79, 596, 80, 0, 0, 0, 594, 635,
	601, 0, 0, 0, 81, 82, 198, 650, 200, 651,
	83, 652, 653, 1232, 84, 204, 205, 85, 616, 634,
	654, 655, 208, 0, 646, 0, 627, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 628, 630, 0, 629, 631, 95, 96, 97,
	98, 656, 99, 657, 658, 0, 100, 0, 101, 0,
	0, 0, 649, 103, 0, 104, 0, 0, 0, 600,
	105, 106, 636, 637, 614, 0, 0, 107, 108, 659,
	0, 109, 0, 110, 0, 1237, 277, 0, 111, 647,
	0, 218, 0, 112, 113, 114, 643, 645, 279, 0,
	117, 0, 115, 0, 278, 116, 660, 661, 662, 663,
	0, 626, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 1233, 648, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 589, 134, 615, 644, 136, 664, 137, 138,
	0, 0, 0, 0, 0, 139, 229, 285, 140, 286,
	638, 141, 142, 143, 144, 0, 639, 145, 232, 146,
	0, 147, 148, 149, 665, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 604, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 632, 166,
	167, 288, 168, 666, 237, 169, 0, 175, 170, 171,
	172, 174, 667, 173, 640, 0, 176, 0, 177, 178,
	179, 0, 240, 668, 669, 0, 1234, 180, 641, 642,
	613, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	633, 188, 0, 189, 190, 191, 245, 670, 0, 0,
	192, 0, 0, 0, 0, 193, 194, 195, 196, 590,
	0, 619, 608, 609, 606, 607, 595, 0, 0, 0,
	586, 587, 0, 0, 0, 0, 588, 78, 79, 596,
	80, 0, 0, 0, 594, 635, 601, 0, 0, 0,
	81, 82, 198, 650, 200, 651, 83, 652, 653, 0,
	84, 204, 205, 85, 616, 634, 654, 655, 208, 0,
	646, 0, 627, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 276, 93, 94, 0, 628, 630,
	0, 629, 631, 95, 96, 97, 98, 656, 99, 657,
	658, 0, 100, 0, 101, 0, 0, 0, 649, 103,
	0, 104, 0, 0, 0, 600, 105, 106, 636, 637,
	614, 0, 0, 107, 108, 659, 0, 109, 0, 110,
	0, 0, 277, 0, 111, 647, 0, 218, 0, 112,
	113, 114, 643, 645, 279, 0, 117, 0, 115, 0,
	278, 116, 660, 661, 662, 663, 0, 626, 0, 280,
	118, 281, 119, 120, 0, 122, 121, 0, 648, 282,
	123, 283, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 284, 131, 132, 135, 133, 589, 134,
	615, 644, 136, 664, 137, 138, 0, 0, 0, 0,
	0, 139, 229, 285, 140, 286, 638, 141, 142, 143,
	144, 0, 639, 145, 232, 146, 0, 147, 148, 149,
	665, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	287, 157, 158, 604, 159, 0, 160, 161, 162, 163,
	0, 235, 164, 165, 632, 166, 167, 288, 168, 666,
	237, 169, 0, 175, 170, 171, 172, 174, 667, 173,
	640, 0, 176, 0, 177, 178, 179, 0, 240, 668,
	669, 0, 0, 180, 641, 642, 613, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 633, 188, 0, 189,
	190, 191, 245, 670, 0, 0, 192, 0, 0, 0,
	0, 193, 194, 195, 196, 590, 0, 0, 0, 0,
	619, 608, 609, 606, 607, 595, 586, 587, 0, 0,
	0, 0, 588, 930, 1183, 596, 78, 79, 0, 80,
	594, 0, 0, 0, 635, 601, 0, 0, 0, 81,
	82, 198, 650, 200, 651, 83, 652, 653, 0, 84,
	204, 205, 85, 616, 634, 654, 655, 208, 0, 646,
	0, 627, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 276, 93, 94, 0, 628, 630, 0,
	629, 631, 95, 96, 97, 98, 656, 99, 657, 658,
	0, 100, 0, 101, 0, 0, 0, 649, 103, 0,
	104, 0, 0, 0, 600, 105, 106, 636, 637, 614,
	0, 0, 107, 108, 659, 0, 109, 0, 110, 0,
	0, 277, 0, 111, 647, 0, 218, 0, 112, 113,
	114, 643, 645, 279, 0, 117, 0, 115, 0, 278,
	116, 660, 661, 662, 663, 0, 626, 0, 280, 118,
	281, 119, 120, 0, 122, 121, 0, 648, 282, 123,
	283, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 284, 131, 132, 135, 133, 589, 134, 615,
	644, 136, 664, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 285, 140, 286, 638, 141, 142, 143, 144,
	0, 639, 145, 232, 146, 0, 147, 148, 149, 665,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 287,
	157, 158, 604, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 632, 166, 167, 288, 168, 666, 237,
	169, 0, 175, 170, 171, 172, 174, 667, 173, 640,
	0, 176, 0, 177, 178, 179, 0, 240, 668, 669,
	0, 0, 180, 641, 642, 613, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 633, 188, 0, 189, 190,
	191, 245, 670, 0, 0, 192, 0, 0, 0, 0,
	193, 194, 195, 196, 590, 0, 619, 608, 609, 606,
	607, 595, 0, 0, 0, 586, 587, 584, 0, 0,
	0, 588, 78, 79, 596, 80, 0, 0, 0, 594,
	635, 601, 0, 0, 0, 81, 82, 198, 650, 200,
	651, 83, 652, 653, 0, 84, 204, 205, 85, 616,
	634, 654, 655, 208, 0, 646, 0, 627, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 276,
	93, 94, 0, 628, 630, 0, 629, 631, 95, 96,
	97, 98, 656, 99, 657, 658, 0, 100, 0, 101,
	0, 0, 0, 649, 103, 0, 104, 0, 0, 0,
	600, 105, 106, 636, 637, 614, 0, 0, 107, 108,
	659, 0, 109, 0, 110, 0, 0, 277, 0, 111,
	647, 0, 218, 0, 112, 113, 114, 643, 645, 279,
	0, 117, 0, 115, 0, 278, 116, 660, 661, 662,
	663, 0, 626, 0, 280, 118, 281, 119, 120, 0,
	122, 121, 0, 648, 282, 123, 283, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 284, 131,
	132, 135, 133, 589, 134, 615, 644, 136, 664, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 285, 140,
	286, 638, 141, 142, 143, 144, 0, 639, 145, 232,
	146, 0, 147, 148, 149, 665, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 287, 157, 158, 604, 159,
	0, 160, 161, 162, 163, 0, 235, 164, 165, 632,
	166, 167, 288, 168, 666, 237, 169, 0, 175, 170,
	171, 172, 174, 667, 173, 640, 0, 176, 0, 177,
	178, 179, 0, 240, 668, 669, 0, 0, 180, 641,
	642, 613, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 633, 188, 0, 189, 190, 191, 245, 670, 0,
	0, 192, 0, 0, 0, 0, 193, 194, 195, 196,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 587, 0, 0, 0, 0, 588, 0, 0,
	596, 1631, 0, 0, 0, 594, 619, 608, 609, 606,
	607, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	635, 601, 0, 0, 0, 81, 82, 198, 650, 200,
	651, 83, 652, 653, 0, 84, 204, 205, 85, 616,
	634, 654, 655, 208, 0, 646, 0, 627, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 276,
	93, 94, 0, 628, 630, 0, 629, 631, 95, 96,
	97, 98, 656, 99, 657, 658, 0, 100, 0, 101,
	0, 0, 0, 649, 103, 0, 104, 0, 0, 0,
	600, 105, 106, 636, 637, 614, 0, 0, 107, 108,
	659, 0, 109, 0, 110, 0, 0, 277, 0, 111,
	647, 0, 218, 0, 112, 113, 114, 643, 645, 279,
	0, 117, 0, 115, 0, 278, 116, 660, 661, 662,
	663, 0, 626, 0, 280, 118, 281, 119, 120, 0,
	122, 121, 0, 648, 282, 123, 283, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 284, 131,
	132, 135, 133, 589, 134, 615, 644, 136, 664, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 285, 140,
	286, 638, 141, 142, 143, 144, 0, 639, 145, 232,
	146, 0, 147, 148, 149, 665, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 287, 157, 158, 604, 159,
	0, 160, 161, 162, 163, 0, 235, 164, 165, 632,
	166, 167, 288, 168, 666, 237, 169, 0, 175, 170,
	171, 172, 174, 667, 173, 640, 0, 176, 0, 177,
	178, 179, 0, 240, 668, 669, 0, 0, 180, 641,
	642, 613, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 633, 188, 0, 189, 190, 191, 245, 670, 1585,
	0, 192, 0, 0, 0, 0, 193, 194, 195, 196,
	590, 0, 619, 608, 609, 606, 607, 595, 0, 0,
	0, 586, 587, 0, 0, 0, 0, 588, 78, 79,
	596, 80, 0, 0, 0, 594, 635, 601, 0, 0,
	0, 81, 82, 198, 650, 200, 651, 83, 652, 653,
	0, 84, 204, 205, 85, 616, 634, 654, 655, 208,
	0, 646, 0, 627, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 276, 93, 94, 0, 628,
	630, 0, 629, 631, 95, 96, 97, 98, 656, 99,
	657, 658, 0, 100, 0, 101, 0, 0, 0, 649,
	103, 0, 104, 0, 0, 0, 600, 105, 106, 636,
	637, 614, 0, 0, 107, 108, 659, 0, 109, 0,
	110, 0, 0, 277, 0, 111, 647, 0, 218, 0,
	112, 113, 114, 643, 645, 279, 0, 117, 0, 115,
	0, 278, 116, 660, 661, 662, 663, 0, 626, 0,
	280, 118, 281, 119, 120, 0, 122, 121, 0, 648,
	282, 123, 283, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 589,
	134, 615, 644, 136, 664, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 285, 140, 286, 638, 141, 142,
	143, 144, 0, 639, 145, 232, 146, 0, 147, 148,
	149, 665, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 287, 157, 158, 604, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 632, 166, 167, 288, 168,
	666, 237, 169, 0, 175, 170, 171, 172, 174, 667,
	173, 640, 0, 176, 0, 177, 178, 179, 0, 240,
	668, 669, 0, 0, 180, 641, 642, 613, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 633, 188, 0,
	189, 190, 191, 245, 670, 0, 0, 192, 0, 0,
	0, 0, 193, 194, 195, 196, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 587, 0,
	0, 0, 0, 588, 0, 0, 596, 1580, 0, 0,
	0, 594, 619, 608, 609, 606, 607, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 635, 601, 0, 0,
	0, 81, 82, 198, 650, 200, 651, 83, 652, 653,
	0, 84, 204, 205, 85, 616, 634, 654, 655, 208,
	0, 646, 0, 627, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 276, 93, 94, 0, 628,
	630, 0, 629, 631, 95, 96, 97, 98, 656, 99,
	657, 658, 685, 100, 0, 101, 0, 0, 0, 649,
	103, 0, 104, 0, 0, 0, 600, 105, 106, 636,
	637, 614, 0, 0, 107, 108, 659, 0, 109, 0,
	110, 0, 0, 277, 0, 111, 647, 0, 218, 0,
	112, 113, 114, 643, 645, 279, 0, 117, 0, 115,
	0, 278, 116, 660, 661, 662, 663, 0, 626, 0,
	280, 118, 281, 119, 120, 0, 122, 121, 0, 648,
	282, 123, 283, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 589,
	134, 615, 644, 136, 664, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 285, 140, 286, 638, 141, 142,
	143, 144, 0, 639, 145, 232, 146, 0, 147, 148,
	149, 665, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 287, 157, 158, 604, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 632, 166, 167, 288, 168,
	666, 237, 169, 0, 175, 170, 171, 172, 174, 667,
	173, 640, 0, 176, 0, 177, 178, 179, 0, 240,
	668, 669, 0, 0, 180, 641, 642, 613, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 633, 188, 0,
	189, 190, 191, 245, 670, 0, 0, 192, 0, 0,
	0, 0, 193, 194, 195, 196, 590, 0, 619, 608,
	609, 606, 607, 595, 0, 0, 0, 586, 587, 0,
	0, 0, 0, 588, 78, 79, 596, 80, 0, 0,
	0, 594, 635, 601, 0, 0, 0, 81, 82, 198,
	650, 200, 651, 83, 652, 653, 0, 84, 204, 205,
	85, 616, 634, 654, 655, 208, 0, 646, 0, 627,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 276, 93, 94, 0, 628, 630, 0, 629, 631,
	95, 96, 97, 98, 656, 99, 657, 658, 0, 100,
	0, 101, 0, 0, 0, 649, 103, 0, 104, 0,
	0, 0, 600, 105, 106, 636, 637, 614, 0, 0,
	107, 108, 659, 0, 109, 0, 110, 0, 1237, 277,
	0, 111, 647, 0, 218, 0, 112, 113, 114, 643,
	645, 279, 0, 117, 0, 115, 0, 278, 116, 660,
	661, 662, 663, 0, 626, 0, 280, 118, 281, 119,
	120, 0, 122, 121, 0, 648, 282, 123, 283, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 589, 134, 615, 644, 136,
	664, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	285, 140, 286, 638, 141, 142, 143, 144, 0, 639,
	145, 232, 146, 0, 147, 148, 149, 665, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 287, 157, 158,
	604, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 632, 166, 167, 288, 168, 666, 237, 169, 0,
	175, 170, 171, 172, 174, 667, 173, 640, 0, 176,
	0, 177, 178, 179, 0, 240, 668, 669, 0, 0,
	180, 641, 642, 613, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 633, 188, 0, 189, 190, 191, 245,
	670, 0, 0, 192, 0, 0, 0, 0, 193, 194,
	195, 196, 590, 0, 619, 608, 609, 606, 607, 595,
	0, 0, 0, 586, 587, 0, 0, 0, 0, 588,
	78, 79, 596, 80, 0, 0, 0, 594, 635, 601,
	0, 0, 0, 81, 82, 198, 650, 200, 651, 83,
	652, 653, 0, 84, 204, 205, 85, 616, 634, 654,
	655, 208, 0, 646, 0, 627, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 94,
	0, 628, 630, 0, 629, 631, 95, 96, 97, 98,
	656, 99, 657, 658, 0, 100, 0, 101, 0, 0,
	0, 649, 103, 0, 104, 0, 0, 0, 600, 105,
	106, 636, 637, 614, 0, 0, 107, 108, 659, 0,
	109, 0, 110, 0, 0, 277, 0, 111, 647, 0,
	218, 0, 112, 113, 114, 643, 645, 279, 0, 117,
	0, 115, 0, 278, 116, 660, 661, 662, 663, 0,
	626, 0, 280, 118, 281, 119, 120, 0, 122, 121,
	0, 648, 282, 123, 283, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 589, 134, 615, 644, 136, 664, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 285, 140, 286, 638,
	141, 142, 143, 144, 0, 639, 145, 232, 146, 0,
	147, 148, 149, 665, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 604, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 632, 166, 167,
	288, 168, 666, 237, 169, 0, 175, 170, 171, 172,
	174, 667, 173, 640, 0, 176, 0, 177, 178, 179,
	0, 240, 668, 669, 0, 0, 180, 641, 642, 613,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 633,
	188, 0, 189, 190, 191, 245, 670, 0, 0, 192,
	0, 0, 0, 0, 193, 194, 195, 196, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	587, 0, 0, 0, 0, 588, 0, 0, 596, 1186,
	0, 0, 0, 594, 619, 608, 609, 606, 607, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 861, 80, 0, 0, 0, 0, 635, 601,
	0, 0, 0, 81, 82, 198, 650, 200, 651, 83,
	652, 653, 0, 84, 204, 205, 85, 616, 634, 654,
	655, 208, 0, 646, 0, 627, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 94,
	0, 628, 630, 0, 629, 631, 95, 96, 97, 98,
	656, 99, 657, 658, 0, 100, 0, 101, 0, 0,
	0, 649, 103, 0, 104, 0, 0, 0, 600, 105,
	106, 636, 637, 614, 0, 0, 107, 108, 659, 0,
	109, 0, 110, 0, 0, 277, 0, 111, 647, 0,
	218, 0, 112, 113, 114, 643, 645, 279, 0, 117,
	0, 115, 0, 278, 116, 660, 661, 662, 663, 0,
	626, 0, 280, 118, 281, 119, 120, 0, 122, 121,
	0, 648, 282, 123, 283, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 589, 134, 615, 644, 136, 664, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 285, 140, 286, 638,
	141, 142, 143, 144, 0, 639, 145, 232, 146, 0,
	147, 148, 149, 665, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 604, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 632, 166, 167,
	288, 168, 666, 237, 169, 0, 175, 170, 171, 172,
	174, 667, 173, 640, 0, 176, 0, 177, 178, 179,
	0, 240, 668, 669, 0, 0, 180, 641, 642, 613,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 633,
	188, 0, 189, 190, 191, 245, 670, 0, 0, 192,
	0, 0, 0, 0, 193, 194, 195, 196, 590, 0,
	619, 608, 609, 606, 607, 595, 0, 0, 0, 586,
	587, 0, 0, 0, 0, 588, 78, 79, 596, 80,
	0, 0, 0, 594, 635, 601, 0, 0, 0, 81,
	82, 198, 650, 200, 651, 83, 652, 653, 0, 84,
	204, 205, 85, 616, 634, 654, 655, 208, 0, 646,
	0, 627, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 276, 93, 1949, 0, 628, 630, 0,
	629, 631, 95, 96, 97, 98, 656, 99, 657, 658,
	0, 100, 0, 101, 0, 0, 0, 649, 103, 0,
	104, 0, 0, 0, 600, 105, 106, 636, 637, 614,
	0, 0, 107, 108, 659, 0, 109, 0, 110, 0,
	0, 277, 0, 111, 647, 0, 218, 0, 112, 113,
	114, 643, 645, 279, 0, 117, 0, 115, 0, 278,
	116, 660, 661, 662, 663, 0, 626, 0, 280, 118,
	281, 119, 120, 0, 122, 121, 0, 648, 282, 123,
	283, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 284, 131, 132, 135, 133, 589, 134, 615,
	644, 136, 664, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 285, 140, 286, 638, 141, 142, 143, 144,
	0, 639, 145, 232, 146, 0, 147, 148, 149, 665,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 287,
	157, 158, 604, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 632, 166, 167, 288, 168, 666, 237,
	169, 0, 175, 170, 171, 172, 174, 667, 173, 640,
	0, 176, 0, 177, 178, 179, 0, 240, 668, 669,
	0, 0, 180, 641, 642, 613, 181, 182, 1948, 184,
	0, 0, 185, 186, 187, 633, 188, 0, 189, 190,
	191, 245, 670, 0, 0, 192, 0, 0, 0, 0,
	193, 194, 195, 196, 590, 0, 619, 608, 609, 606,
	607, 595, 0, 0, 0, 586, 587, 0, 0, 0,
	0, 588, 78, 79, 596, 80, 0, 0, 0, 594,
	635, 601, 0, 0, 0, 81, 82, 1947, 650, 200,
	651, 83, 652, 653, 0, 84, 204, 205, 85, 616,
	634, 654, 655, 208, 0, 646, 0, 627, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 276,
	93, 1949, 0, 628, 630, 0, 629, 631, 95, 96,
	97, 98, 656, 99, 657, 658, 0, 100, 0, 101,
	0, 0, 0, 649, 103, 0, 104, 0, 0, 0,
	600, 105, 106, 636, 637, 614, 0, 0, 107, 108,
	659, 0, 109, 0, 110, 0, 0, 277, 0, 111,
	647, 0, 218, 0, 112, 113, 114, 643, 645, 279,
	0, 117, 0, 115, 0, 278, 116, 660, 661, 662,
	663, 0, 626, 0, 280, 118, 281, 119, 120, 0,
	122, 121, 0, 648, 282, 123, 283, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 284, 131,
	132, 135, 133, 589, 134, 615, 644, 136, 664, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 285, 140,
	286, 638, 141, 142, 143, 144, 0, 639, 145, 232,
	146, 0, 147, 148, 149, 665, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 287, 157, 158, 604, 159,
	0, 160, 161, 162, 163, 0, 235, 164, 165, 632,
	166, 167, 288, 168, 666, 237, 169, 0, 175, 170,
	171, 172, 174, 667, 173, 640, 0, 176, 0, 177,
	178, 179, 0, 240, 668, 669, 0, 0, 180, 641,
	642, 613, 181, 182, 1948, 184, 0, 0, 185, 186,
	187, 633, 188, 0, 189, 190, 191, 245, 670, 0,
	0, 192, 0, 0, 0, 0, 193, 194, 195, 196,
	590, 0, 619, 608, 609, 606, 607, 595, 0, 0,
	0, 586, 587, 0, 0, 0, 0, 588, 78, 79,
	596, 80, 0, 0, 0, 594, 635, 601, 0, 0,
	0, 81, 82, 198, 650, 200, 651, 83, 652, 653,
	0, 84, 204, 205, 85, 616, 634, 654, 655, 208,
	0, 646, 0, 627, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 276, 93, 94, 0, 628,
	630, 0, 629, 631, 95, 96, 97, 98, 656, 99,
	657, 658, 0, 100, 0, 101, 0, 0, 0, 649,
	103, 0, 104, 0, 0, 0, 600, 105, 106, 636,
	637, 614, 0, 0, 107, 108, 659, 0, 109, 0,
	110, 0, 0, 277, 0, 111, 647, 0, 218, 0,
	112, 113, 114, 643, 645, 279, 0, 117, 0, 115,
	0, 278, 116, 660, 661, 662, 663, 0, 626, 0,
	280, 118, 281, 119, 120, 0, 122, 121, 0, 648,
	282, 123, 283, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 589,
	134, 615, 644, 136, 664, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 285, 140, 286, 638, 141, 142,
	143, 144, 0, 639, 145, 232, 146, 0, 147, 148,
	149, 665, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 287, 157, 158, 604, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 632, 166, 167, 288, 168,
	666, 237, 169, 0, 175, 170, 171, 172, 174, 667,
	173, 640, 0, 176, 0, 177, 178, 179, 0, 240,
	668, 669, 0, 0, 180, 641, 642, 613, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 633, 188, 0,
	189, 190, 191, 245, 670, 0, 0, 192, 0, 0,
	0, 0, 193, 194, 195, 196, 590, 0, 1209, 608,
	609, 606, 607, 595, 0, 0, 0, 586, 587, 0,
	0, 0, 0, 588, 78, 79, 596, 80, 0, 0,
	0, 594, 635, 601, 0, 0, 0, 81, 82, 198,
	650, 200, 651, 83, 652, 653, 0, 84, 204, 205,
	85, 616, 634, 654, 655, 208, 0, 646, 0, 627,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 276, 93, 94, 0, 628, 630, 0, 629, 631,
	95, 96, 97, 98, 656, 1212, 657, 658, 0, 100,
	0, 101, 0, 0, 0, 649, 103, 0, 104, 0,
	0, 0, 600, 105, 106, 636, 637, 614, 0, 0,
	107, 108, 659, 0, 109, 0, 110, 0, 0, 277,
	0, 111, 647, 0, 218, 0, 112, 113, 1213, 643,
	645, 279, 0, 117, 0, 115, 0, 278, 116, 660,
	661, 662, 663, 0, 626, 0, 280, 118, 281, 119,
	120, 0, 122, 121, 0, 648, 282, 123, 283, 0,
	124, 0, 0, 125, 0, 126, 1214, 1211, 129, 130,
	284, 131, 132, 135, 133, 589, 134, 615, 644, 136,
	664, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	285, 140, 286, 638, 141, 142, 143, 144, 0, 639,
	145, 232, 146, 0, 147, 148, 149, 665, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 287, 157, 158,
	604, 159, 0, 160, 161, 162, 1215, 0, 235, 164,
	165, 632, 166, 167, 288, 168, 666, 237, 169, 0,
	175, 170, 171, 172, 174, 667, 173, 640, 0, 176,
	0, 177, 178, 179, 0, 240, 668, 669, 0, 0,
	180, 641, 642, 613, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 633, 188, 0, 189, 190, 191, 245,
	670, 0, 0, 192, 0, 0, 0, 0, 193, 194,
	1210, 196, 590, 0, 619, 608, 609, 606, 607, 595,
	0, 0, 0, 586, 587, 0, 0, 0, 0, 588,
	78, 79, 596, 80, 0, 0, 0, 594, 635, 601,
	0, 0, 0, 81, 82, 198, 650, 200, 651, 83,
	652, 653, 0, 84, 204, 205, 85, 616, 634, 654,
	655, 208, 0, 646, 0, 627, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 94,
	0, 628, 630, 0, 629, 631, 95, 96, 97, 98,
	656, 99, 657, 658, 0, 100, 0, 101, 0, 0,
	0, 649, 103, 0, 104, 0, 0, 0, 600, 105,
	106, 636, 637, 614, 0, 0, 107, 108, 659, 0,
	109, 0, 110, 0, 0, 277, 0, 111, 647, 0,
	218, 0, 112, 113, 114, 643, 645, 279, 0, 117,
	0, 115, 0, 278, 116, 660, 661, 662, 663, 0,
	626, 0, 280, 118, 281, 119, 120, 0, 122, 121,
	0, 648, 282, 123, 283, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 0, 134, 615, 644, 136, 664, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 285, 140, 286, 638,
	141, 142, 143, 144, 0, 639, 145, 232, 146, 0,
	147, 148, 149, 665, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 1227, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 632, 166, 167,
	288, 168, 666, 237, 169, 0, 175, 170, 171, 172,
	174, 667, 173, 640, 0, 176, 0, 177, 178, 179,
	0, 240, 668, 669, 0, 0, 180, 641, 642, 613,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 633,
	188, 0, 189, 190, 191, 245, 670, 0, 0, 192,
	0, 0, 0, 0, 193, 194, 195, 196, 0, 0,
	619, 608, 609, 606, 607, 595, 0, 0, 0, 1223,
	1224, 0, 0, 0, 0, 1225, 78, 79, 1226, 80,
	0, 0, 0, 594, 635, 601, 0, 0, 0, 81,
	82, 0, 650, 200, 651, 83, 652, 653, 0, 84,
	204, 205, 85, 616, 634, 654, 655, 208, 0, 646,
	0, 627, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 276, 93, 1949, 0, 628, 630, 0,
	629, 631, 95, 96, 97, 98, 656, 99, 657, 658,
	0, 100, 0, 101, 0, 0, 0, 649, 103, 0,
	104, 0, 0, 0, 600, 105, 106, 636, 637, 614,
	0, 0, 107, 108, 659, 0, 109, 0, 110, 0,
	0, 277, 0, 111, 647, 0, 218, 0, 112, 113,
	114, 643, 645, 0, 0, 117, 0, 115, 0, 278,
	116, 660, 661, 662, 663, 0, 626, 0, 0, 118,
	281, 119, 120, 0, 122, 121, 0, 648, 282, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 284, 131, 132, 135, 133, 589, 134, 615,
	644, 136, 664, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 285, 140, 286, 638, 141, 142, 143, 144,
	0, 639, 145, 232, 146, 0, 147, 148, 149, 665,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 287,
	157, 158, 604, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 632, 166, 167, 0, 168, 666, 237,
	169, 0, 175, 170, 171, 172, 174, 667, 173, 640,
	0, 176, 0, 177, 178, 179, 0, 240, 668, 669,
	0, 0, 180, 641, 642, 613, 181, 182, 1948, 184,
	0, 0, 185, 186, 187, 633, 188, 0, 189, 190,
	191, 245, 670, 0, 0, 192, 0, 0, 0, 0,
	193, 194, 195, 196, 0, 0, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 586, 587, 0, 0, 0,
	0, 588, 78, 79, 596, 80, 0, 0, 0, 594,
	635, 0, 0, 0, 0, 81, 82, 198, 199, 200,
	201, 83, 202, 203, 0, 84, 204, 205, 85, 0,
	634, 206, 207, 208, 0, 646, 0, 627, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 276,
	93, 94, 0, 628, 630, 0, 629, 631, 95, 96,
	97, 98, 210, 99, 211, 212, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	213, 105, 106, 636, 637, 0, 0, 0, 107, 108,
	216, 0, 109, 0, 110, 0, 0, 277, 0, 111,
	647, 0, 218, 0, 112, 113, 114, 643, 645, 279,
	0, 117, 0, 115, 0, 278, 116, 221, 222, 223,
	224, 0, 225, 0, 280, 118, 281, 119, 120, 0,
	122, 121, 0, 648, 282, 123, 283, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 284, 131,
	132, 135, 133, 0, 134, 0, 644, 136, 228, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 285, 140,
	286, 638, 141, 142, 143, 144, 0, 639, 145, 232,
	146, 0, 147, 148, 149, 233, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 287, 157, 158, 234, 159,
	0, 160, 161, 162, 163, 0, 235, 164, 165, 632,
	166, 167, 288, 168, 236, 237, 169, 0, 175, 170,
	171, 172, 174, 238, 173, 640, 0, 176, 0, 177,
	178, 179, 0, 240, 241, 242, 0, 0, 180, 641,
	642, 0, 181, 182, 183, 184, 497, 0, 185, 186,
	187, 633, 188, 0, 189, 190, 191, 245, 246, 0,
	0, 192, 78, 79, 0, 80, 193, 194, 195, 196,
	197, 0, 0, 0, 0, 81, 82, 198, 199, 200,
	201, 83, 202, 203, 0, 84, 204, 205, 85, 0,
	1698, 206, 207, 208, 0, 209, 0, 275, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 276,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 210, 99, 211, 212, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	213, 105, 106, 214, 215, 0, 0, 0, 107, 108,
	216, 0, 109, 0, 110, 0, 0, 277, 0, 111,
	217, 0, 218, 0, 112, 113, 114, 219, 220, 279,
	0, 117, 0, 115, 0, 278, 116, 221, 222, 223,
	224, 0, 225, 0, 280, 118, 281, 119, 120, 0,
	122, 121, 0, 226, 282, 123, 283, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 284, 131,
	132, 135, 133, 0, 134, 0, 227, 136, 228, 137,
	138, 0, 0, 0, 0, 0, 139, 229, 285, 140,
	286, 230, 141, 142, 143, 144, 0, 231, 145, 232,
	146, 0, 147, 148, 149, 233, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 287, 157, 158, 234, 159,
	0, 160, 161, 162, 163, 64, 235, 164, 165, 0,
	166, 167, 288, 168, 236, 237, 169, 0, 175, 170,
	171, 172, 174, 238, 173, 239, 0, 176, 66, 177,
	178, 179, 0, 240, 241, 242, 0, 0, 180, 243,
	244, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 188, 0, 189, 190, 191, 501, 246, 0,
	0, 192, 0, 0, 0, 62, 193, 194, 195, 196,
	0, 63, 497, 811, 0, 812, 807, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	61, 80, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 275, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 276, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 815, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 804, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 277, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 279, 0, 117, 0, 115,
	0, 278, 116, 221, 222, 223, 224, 0, 225, 0,
	280, 118, 281, 119, 120, 0, 122, 121, 0, 226,
	282, 123, 283, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 805, 0,
	0, 0, 139, 229, 285, 140, 286, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 287, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 288, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 803, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 497, 811, 192, 812, 807,
	802, 0, 193, 194, 195, 196, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 813, 808, 197,
	0, 0, 0, 0, 81, 82, 198, 199, 200, 201,
	83, 202, 203, 0, 84, 204, 205, 85, 0, 0,
	206, 207, 208, 0, 209, 0, 275, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 276, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 210, 99, 211, 212, 798, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 213,
	105, 106, 214, 215, 804, 0, 0, 107, 108, 216,
	0, 109, 0, 110, 0, 0, 277, 0, 111, 217,
	0, 218, 0, 112, 113, 114, 219, 220, 279, 0,
	117, 0, 115, 0, 278, 116, 221, 222, 223, 224,
	0, 225, 0, 280, 118, 281, 119, 120, 0, 122,
	121, 0, 226, 282, 123, 283, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 284, 131, 132,
	135, 133, 0, 134, 0, 227, 136, 228, 137, 138,
	0, 805, 0, 0, 0, 139, 229, 285, 140, 286,
	230, 141, 142, 143, 144, 0, 231, 145, 232, 146,
	0, 147, 148, 149, 233, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 287, 157, 158, 234, 159, 0,
	160, 161, 162, 163, 0, 235, 164, 165, 0, 166,
	167, 288, 168, 236, 237, 169, 0, 175, 170, 171,
	172, 174, 238, 173, 239, 0, 176, 0, 177, 178,
	179, 0, 240, 241, 242, 0, 0, 180, 243, 244,
	803, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 188, 0, 189, 190, 191, 245, 246, 497, 811,
	192, 812, 807, 802, 0, 193, 194, 195, 196, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	813, 808, 197, 0, 0, 0, 0, 81, 82, 198,
	199, 200, 201, 83, 202, 203, 0, 84, 204, 205,
	85, 0, 0, 206, 207, 208, 0, 209, 0, 275,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 276, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 210, 99, 211, 212, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 213, 105, 106, 214, 215, 804, 0, 0,
	107, 108, 216, 0, 109, 0, 110, 0, 0, 277,
	0, 111, 217, 0, 218, 0, 112, 113, 114, 219,
	220, 279, 0, 117, 0, 115, 0, 278, 116, 221,
	222, 223, 224, 0, 225, 0, 280, 118, 281, 119,
	120, 0, 122, 121, 0, 226, 282, 123, 283, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	284, 131, 132, 135, 133, 0, 134, 0, 227, 136,
	228, 137, 138, 0, 805, 0, 0, 0, 139, 229,
	285, 140, 286, 230, 141, 142, 143, 144, 0, 231,
	145, 232, 146, 0, 147, 148, 149, 233, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 287, 157, 158,
	234, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 0, 166, 167, 288, 168, 236, 237, 169, 0,
	175, 170, 171, 172, 174, 238, 173, 239, 0, 176,
	0, 177, 178, 179, 0, 240, 241, 242, 0, 0,
	180, 243, 244, 803, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 245,
	246, 75, 0, 192, 0, 0, 0, 0, 193, 194,
	195, 196, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 813, 808, 197, 0, 0, 0, 0,
	81, 82, 198, 199, 200, 201, 83, 202, 203, 0,
	84, 204, 205, 85, 0, 0, 206, 207, 208, 0,
	209, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 210, 99, 211,
	212, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 213, 105, 106, 214, 215,
	0, 0, 0, 107, 108, 216, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 217, 0, 218, 0, 112,
	113, 114, 219, 220, 0, 0, 117, 0, 115, 0,
	0, 116, 221, 222, 223, 224, 0, 225, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 226, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 227, 136, 228, 137, 138, 0, 0, 458, 0,
	0, 139, 229, 0, 140, 0, 230, 141, 142, 143,
	144, 0, 231, 145, 232, 146, 0, 147, 148, 149,
	233, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 234, 159, 0, 160, 161, 162, 163,
	64, 235, 164, 165, 0, 166, 167, 0, 168, 236,
	237, 169, 0, 175, 170, 171, 172, 174, 238, 173,
	239, 0, 176, 66, 177, 178, 179, 0, 240, 241,
	242, 0, 0, 180, 243, 244, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 188, 0, 189,
	190, 191, 501, 246, 0, 0, 192, 75, 0, 0,
	62, 193, 194, 195, 196, 0, 63, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 197, 0, 0, 0, 1123, 81, 82, 198, 199,
	200, 201, 83, 202, 203, 0, 84, 204, 205, 85,
	0, 0, 206, 207, 208, 0, 209, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 210, 99, 211, 212, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 213, 105, 106, 214, 215, 0, 0, 0, 107,
	108, 216, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 217, 0, 218, 0, 112, 113, 114, 219, 220,
	0, 0, 117, 0, 115, 0, 0, 116, 221, 222,
	223, 224, 0, 225, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 226, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 227, 136, 228,
	137, 138, 0, 0, 0, 0, 0, 139, 229, 0,
	140, 0, 230, 141, 142, 143, 144, 0, 231, 145,
	232, 146, 0, 147, 148, 149, 233, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 234,
	159, 0, 160, 161, 162, 163, 64, 235, 164, 165,
	0, 166, 167, 0, 168, 236, 237, 169, 0, 175,
	170, 171, 172, 174, 238, 173, 239, 0, 176, 66,
	177, 178, 179, 0, 240, 241, 242, 0, 0, 180,
	243, 244, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 188, 0, 189, 190, 191, 501, 246,
	0, 0, 192, 75, 0, 0, 62, 193, 194, 195,
	196, 0, 63, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 197, 0, 0,
	0, 61, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 0, 84, 204, 205, 85, 0, 0, 206, 207,
	208, 0, 209, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 210,
	99, 211, 212, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 213, 105, 106,
	214, 215, 0, 0, 0, 107, 108, 216, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 217, 0, 218,
	0, 112, 113, 114, 219, 220, 0, 0, 117, 0,
	115, 0, 0, 116, 221, 222, 223, 224, 0, 225,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	226, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 227, 136, 228, 137, 138, 0, 0,
	458, 0, 0, 139, 229, 0, 140, 0, 230, 141,
	142, 143, 144, 0, 231, 145, 232, 146, 0, 147,
	148, 149, 233, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 0, 166, 167, 0,
	168, 236, 237, 169, 0, 175, 170, 171, 172, 174,
	238, 173, 239, 0, 176, 0, 177, 178, 179, 0,
	240, 241, 242, 0, 0, 180, 243, 244, 0, 181,
	182, 183, 184, 75, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 245, 246, 0, 0, 192, 78,
	79, 0, 80, 193, 194, 195, 196, 197, 0, 0,
	0, 0, 81, 82, 198, 199, 200, 201, 83, 202,
	203, 0, 84, 204, 205, 85, 0, 1123, 206, 207,
	208, 0, 209, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 210,
	99, 211, 212, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 213, 105, 106,
	214, 215, 0, 0, 0, 107, 108, 216, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 217, 0, 218,
	0, 112, 113, 114, 219, 220, 0, 0, 117, 0,
	115, 0, 0, 116, 221, 222, 223, 224, 0, 225,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	226, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 227, 136, 228, 137, 138, 0, 0,
	0, 0, 0, 139, 229, 0, 140, 0, 230, 141,
	142, 143, 144, 0, 231, 145, 232, 146, 0, 147,
	148, 149, 233, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 234, 159, 0, 160, 161,
	162, 163, 0, 235, 164, 165, 0, 166, 167, 0,
	168, 236, 237, 169, 0, 175, 170, 171, 172, 174,
	238, 173, 239, 0, 176, 0, 177, 178, 179, 0,
	240, 241, 242, 0, 0, 180, 243, 244, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 188,
	0, 189, 190, 191, 245, 246, 0, 0, 192, 0,
	75, 0, 0, 193, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 0, 0, 197, 0, 0, 0, 703, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 0, 84,
	204, 205, 85, 0, 0, 206, 207, 208, 0, 209,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 210, 99, 211, 212,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 213, 105, 106, 214, 215, 0,
	0, 0, 107, 108, 216, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 217, 0, 218, 0, 112, 113,
	114, 219, 220, 0, 0, 117, 0, 115, 0, 0,
	116, 221, 222, 223, 224, 0, 225, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 226, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	227, 136, 228, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 0, 140, 0, 230, 141, 142, 143, 144,
	0, 231, 145, 232, 146, 0, 147, 148, 149, 233,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 0, 166, 167, 0, 168, 236, 237,
	169, 0, 175, 170, 171, 172, 174, 238, 173, 239,
	0, 176, 0, 177, 178, 179, 0, 240, 241, 242,
	0, 0, 180, 243, 244, 0, 181, 182, 183, 184,
	75, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 245, 246, 0, 0, 192, 78, 79, 0, 80,
	193, 194, 195, 196, 197, 0, 0, 0, 0, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 0, 84,
	204, 205, 85, 0, 1025, 206, 207, 208, 0, 209,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 210, 99, 211, 212,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 213, 105, 106, 214, 215, 0,
	0, 0, 107, 108, 216, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 217, 0, 218, 0, 112, 113,
	114, 219, 220, 0, 0, 117, 0, 115, 0, 0,
	116, 221, 222, 223, 224, 0, 225, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 226, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	227, 136, 228, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 0, 140, 0, 230, 141, 142, 143, 144,
	0, 231, 145, 232, 146, 0, 147, 148, 149, 233,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 0, 166, 167, 0, 168, 236, 237,
	169, 0, 175, 170, 171, 172, 174, 238, 173, 239,
	0, 176, 0, 177, 178, 179, 0, 240, 241, 242,
	0, 0, 180, 243, 244, 0, 181, 182, 183, 184,
	75, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 245, 246, 0, 0, 192, 78, 79, 0, 80,
	193, 194, 195, 196, 197, 0, 0, 0, 0, 81,
	82, 198, 199, 200, 201, 83, 202, 203, 0, 84,
	204, 205, 85, 0, 1595, 206, 207, 208, 0, 209,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 210, 99, 211, 212,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 213, 105, 106, 214, 215, 0,
	0, 0, 107, 108, 216, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 217, 0, 218, 0, 112, 113,
	114, 219, 220, 0, 0, 117, 0, 115, 0, 0,
	116, 221, 222, 223, 224, 0, 225, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 226, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	227, 136, 228, 137, 138, 0, 0, 0, 0, 0,
	139, 229, 0, 140, 0, 230, 141, 142, 143, 144,
	0, 231, 145, 232, 146, 0, 147, 148, 149, 233,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 234, 159, 0, 160, 161, 162, 163, 0,
	235, 164, 165, 0, 166, 167, 0, 168, 236, 237,
	169, 0, 175, 170, 171, 172, 174, 238, 173, 239,
	0, 176, 0, 177, 178, 179, 0, 240, 241, 242,
	0, 0, 180, 243, 244, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 188, 0, 189, 190,
	191, 245, 246, 0, 0, 192, 0, 0, 0, 0,
	193, 194, 195, 196, 619, 608, 609, 606, 607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 681, 0, 0, 0, 197, 0,
	0, 0, 0, 81, 82, 198, 650, 200, 651, 83,
	652, 653, 0, 84, 204, 205, 85, 0, 0, 654,
	655, 208, 0, 209, 0, 275, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 276, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	656, 99, 657, 658, 0, 100, 0, 101, 0, 0,
	0, 649, 103, 0, 104, 0, 0, 0, 213, 105,
	106, 214, 215, 614, 0, 0, 107, 108, 659, 0,
	109, 0, 110, 0, 0, 277, 0, 111, 217, 0,
	218, 0, 112, 113, 114, 219, 220, 279, 0, 117,
	0, 115, 0, 278, 116, 660, 661, 662, 663, 0,
	626, 0, 280, 118, 281, 119, 120, 0, 122, 121,
	0, 226, 282, 123, 283, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 284, 131, 132, 135,
	133, 0, 134, 615, 227, 136, 664, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 285, 140, 286, 230,
	141, 142, 143, 144, 0, 231, 145, 232, 146, 0,
	147, 148, 149, 665, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 287, 157, 158, 234, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 0, 166, 167,
	288, 168, 666, 237, 169, 0, 175, 170, 171, 172,
	174, 667, 173, 239, 0, 176, 0, 177, 178, 179,
	0, 240, 668, 669, 0, 0, 180, 243, 244, 613,
	181, 182, 183, 184, 75, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 245, 670, 0, 0, 192,
	78, 79, 0, 80, 193, 194, 195, 196, 197, 0,
	0, 0, 0, 81, 82, 198, 199, 200, 201, 83,
	202, 203, 0, 84, 204, 205, 85, 0, 0, 206,
	207, 208, 0, 209, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 782, 98,
	210, 99, 211, 212, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 213, 105,
	106, 214, 215, 0, 0, 0, 107, 108, 216, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 217, 0,
	218, 0, 112, 113, 114, 219, 220, 0, 0, 117,
	0, 115, 0, 0, 116, 221, 222, 223, 224, 0,
	225, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 226, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 227, 136, 228, 137, 138, 0,
	0, 0, 0, 0, 139, 229, 0, 140, 0, 230,
	141, 142, 143, 144, 0, 231, 145, 232, 146, 0,
	147, 148, 149, 233, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 234, 159, 0, 160,
	161, 162, 163, 0, 235, 164, 165, 0, 166, 167,
	0, 168, 236, 237, 169, 0, 175, 170, 171, 172,
	174, 238, 173, 239, 0, 176, 781, 177, 178, 179,
	0, 240, 241, 242, 0, 0, 180, 243, 244, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	188, 0, 189, 190, 191, 245, 246, 0, 75, 192,
	0, 0, 0, 0, 193, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 785, 197, 0, 0, 0, 0, 81, 82, 198,
	199, 200, 201, 83, 202, 203, 0, 84, 204, 205,
	85, 0, 0, 206, 207, 208, 0, 209, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 210, 99, 211, 212, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 213, 105, 106, 214, 215, 0, 0, 0,
	107, 108, 216, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 217, 0, 218, 0, 112, 113, 114, 219,
	220, 0, 0, 117, 0, 115, 0, 0, 116, 221,
	222, 223, 224, 0, 225, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 226, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 227, 136,
	228, 137, 138, 0, 0, 0, 0, 0, 139, 229,
	0, 140, 0, 230, 141, 142, 143, 144, 0, 231,
	145, 232, 146, 0, 147, 148, 149, 233, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	234, 159, 0, 160, 161, 162, 163, 0, 235, 164,
	165, 0, 166, 167, 0, 168, 236, 237, 169, 0,
	175, 170, 171, 172, 174, 238, 173, 239, 0, 176,
	0, 177, 178, 179, 0, 240, 241, 242, 0, 0,
	180, 243, 244, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 188, 0, 189, 190, 191, 245,
	246, 0, 497, 192, 0, 0, 0, 0, 193, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 785, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 275, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 276, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 277, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 279, 0, 117, 0, 115,
	0, 278, 116, 221, 222, 223, 224, 0, 225, 0,
	280, 118, 281, 119, 120, 0, 122, 121, 0, 226,
	282, 123, 283, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 284, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 285, 140, 286, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 287, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 288, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	989, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	987, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 1094, 0, 107, 108, 216, 0, 109, 0,
	110, 992, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 1092, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 991, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 1093, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	989, 209, 0, 0, 984, 86, 87, 88, 0, 89,
	987, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 992, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 983, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 991, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 990, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 1564, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 458,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 732, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 458,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	509, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 470, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 458,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 463, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 458,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	373, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 372, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 1273, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 1271, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 1260, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 852, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 387, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 717, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 0, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 561, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 556, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 515,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 398, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 397,
	241, 242, 0, 0, 393, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 398, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 397,
	241, 242, 0, 0, 393, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 493, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 490, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 487, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 485, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 466, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 447, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 390, 0, 0, 125, 0, 126,
	127, 128, 129, 398, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	143, 144, 0, 231, 145, 232, 146, 0, 147, 148,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 392, 159, 0, 160, 161, 162,
	163, 0, 235, 164, 391, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 397,
	241, 242, 0, 0, 393, 243, 244, 0, 181, 182,
	183, 184, 75, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 78, 79,
	0, 80, 193, 194, 195, 196, 197, 0, 0, 0,
	0, 81, 82, 198, 199, 200, 201, 83, 202, 203,
	0, 84, 204, 205, 85, 0, 0, 206, 207, 208,
	0, 209, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 210, 99,
	211, 212, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 213, 105, 106, 214,
	215, 0, 0, 0, 107, 108, 216, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 217, 0, 218, 0,
	112, 113, 114, 219, 220, 0, 0, 117, 0, 115,
	0, 0, 116, 221, 222, 223, 224, 0, 225, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 226,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 227, 136, 228, 137, 138, 0, 0, 0,
	0, 0, 139, 229, 0, 140, 0, 230, 141, 142,
	0, 144, 0, 231, 145, 232, 146, 0, 147, 0,
	149, 233, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 234, 0, 0, 160, 161, 162,
	163, 0, 235, 164, 165, 0, 166, 167, 0, 168,
	236, 237, 169, 0, 175, 170, 171, 172, 174, 238,
	173, 239, 0, 176, 0, 177, 178, 179, 0, 240,
	241, 242, 0, 0, 180, 243, 244, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 188, 0,
	189, 190, 191, 245, 246, 0, 0, 192, 0, 0,
	0, 0, 193, 194, 195, 196, 877, 878, 0, 897,
	898, 899, 907, 908, 909, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 0, 880,
	0, 911, 0, 0, 0, 877, 878, 0, 897, 898,
	899, 907, 908, 909, 0, 0, 0, 0, 0, 0,
	879, 900, 0, 0, 0, 0, 894, 0, 880, 0,
	911, 0, 0, 0, 0, 877, 878, 0, 897, 898,
	899, 907, 908, 909, 0, 0, 0, 0, 0, 879,
	0, 900, 0, 0, 0, 894, 0, 0, 880, 0,
	911, 0, 0, 0, 0, 877, 878, 0, 897, 898,
	899, 907, 908, 909, 0, 885, 0, 0, 0, 879,
	0, 900, 0, 0, 0, 894, 0, 0, 880, 0,
	911, 0, 0, 904, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 0, 910, 879,
	0, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	902, 0, 904, 912, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 902,
	0, 0, 904, 912, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 902,
	0, 0, 904, 912, 896, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 905, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 902,
	0, 0, 0, 896, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 905, 0, 891, 892, 893,
	0, 890, 887, 888, 889, 881, 882, 883, 884, 886,
	0, 906, 0, 896, 0, 1896, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 905, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 0,
	906, 0, 0, 0, 1894, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 0, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 0,
	906, 0, 0, 0, 1869, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 0, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 0,
	906, 0, 877, 878, 1844, 897, 898, 899, 907, 908,
	909, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 880, 0, 911, 0, 0,
	0, 877, 878, 0, 897, 898, 899, 907, 908, 909,
	0, 0, 0, 0, 0, 0, 879, 900, 0, 0,
	0, 0, 894, 0, 880, 0, 911, 0, 0, 0,
	0, 877, 878, 0, 897, 898, 899, 907, 908, 909,
	0, 0, 0, 0, 0, 879, 0, 900, 0, 0,
	0, 894, 0, 0, 880, 0, 911, 0, 0, 0,
	0, 877, 878, 0, 897, 898, 899, 907, 908, 909,
	0, 885, 0, 0, 0, 879, 0, 900, 0, 0,
	0, 894, 0, 0, 880, 0, 911, 0, 0, 904,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 910, 879, 0, 0, 0, 0,
	0, 894, 0, 0, 0, 0, 902, 0, 904, 912,
	0, 0, 895, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 902, 0, 0, 904, 912,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 902, 0, 0, 904, 912,
	896, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 902, 0, 0, 0, 896,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 905, 0, 891, 892, 893, 0, 890, 887, 888,
	889, 881, 882, 883, 884, 886, 0, 906, 0, 896,
	0, 1839, 0, 0, 0, 0, 0, 0, 0, 903,
	0, 905, 891, 892, 893, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 0, 0,
	1835, 0, 0, 0, 0, 0, 0, 0, 0, 903,
	0, 0, 891, 892, 893, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 0, 0,
	1765, 0, 0, 0, 0, 0, 0, 0, 0, 903,
	0, 0, 891, 892, 893, 0, 890, 887, 888, 889,
	881, 882, 883, 884, 886, 0, 906, 0, 877, 878,
	1764, 897, 898, 899, 907, 908, 909, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	0, 880, 0, 911, 0, 0, 0, 877, 878, 0,
	897, 898, 899, 907, 908, 909, 0, 0, 0, 0,
	0, 0, 879, 900, 0, 0, 0, 0, 894, 0,
	880, 0, 911, 0, 0, 0, 0, 877, 878, 0,
	897, 898, 899, 907, 908, 909, 0, 0, 0, 0,
	0, 879, 0, 900, 0, 0, 0, 894, 0, 0,
	880, 0, 911, 0, 0, 0, 0, 877, 878, 0,
	897, 898, 899, 907, 908, 909, 0, 885, 0, 0,
	0, 879, 0, 900, 0, 0, 0, 894, 0, 0,
	880, 0, 911, 0, 0, 904, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 0, 0,
	910, 879, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 0, 902, 0, 904, 912, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 902, 0, 0, 904, 912, 0, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 885, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 902, 0, 0, 904, 912, 896, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 905, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 902, 0, 0, 0, 896, 0, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 905, 0, 891,
	892, 893, 0, 890, 887, 888, 889, 881, 882, 883,
	884, 886, 0, 906, 0, 896, 0, 1664, 0, 0,
	0, 0, 0, 0, 0, 903, 0, 905, 891, 892,
	893, 0, 890, 887, 888, 889, 881, 882, 883, 884,
	886, 0, 906, 0, 0, 0, 1598, 0, 0, 0,
	0, 0, 0, 0, 0, 903, 0, 0, 891, 892,
	893, 0, 890, 887, 888, 889, 881, 882, 883, 884,
	886, 0, 906, 0, 1423, 1424, 1582, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 903, 0, 0, 891, 892,
	893, 0, 890, 887, 888, 889, 881, 882, 883, 884,
	886, 0, 906, 0, 877, 878, 1179, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 1438, 0, 0, 880, 0, 911,
	0, 0, 0, 877, 878, 0, 897, 898, 899, 907,
	908, 909, 0, 0, 0, 0, 0, 0, 879, 900,
	0, 0, 0, 0, 894, 0, 880, 0, 911, 0,
	0, 0, 0, 877, 878, 0, 897, 898, 899, 907,
	908, 909, 0, 1429, 0, 0, 0, 879, 0, 900,
	0, 0, 0, 894, 0, 0, 880, 0, 911, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 1444, 879, 0, 0,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 904, 912, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 885, 1969, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 902, 0,
	904, 912, 0, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 885, 0, 1455, 910, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 902, 0, 0,
	904, 912, 1440, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 902, 0, 0,
	0, 0, 896, 895, 0, 0, 0, 0, 0, 1968,
	0, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 0, 0,
	0, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 905, 0, 1435, 1436, 1437, 0, 1434,
	1431, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 0, 0,
	0, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 905, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 891, 892, 893, 0, 890, 887,
	888, 889, 881, 882, 883, 884, 886, 0, 906, 0,
	0, 0, 0, 0, 0, 1423, 1424, 0, 1441, 1442,
	1443, 903, 0, 0, 891, 892, 893, 0, 890, 887,
	888, 889, 881, 882, 883, 884, 886, 0, 906, 877,
	878, 0, 897, 898, 899, 907, 908, 909, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	1110, 0, 880, 0, 911, 1438, 0, 0, 914, 0,
	0, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 879, 0, 0, 0, 0, 0, 894,
	900, 0, 0, 0, 913, 0, 0, 880, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 1111, 879, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 904, 912, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 910, 0, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 902, 0, 0, 0, 0, 0, 895,
	0, 904, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 0, 0, 1440, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 0, 1435, 1436, 1437, 0,
	1434, 1431, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 0,
	891, 892, 893, 0, 890, 887, 888, 889, 881, 882,
	883, 884, 886, 0, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 880, 0, 911, 0, 0, 0, 0,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 0, 879, 0, 900, 0, 0, 0,
	894, 0, 0, 880, 0, 911, 0, 0, 0, 877,
	878, 0, 897, 898, 899, 907, 908, 909, 0, 0,
	0, 0, 0, 0, 879, 900, 0, 0, 0, 0,
	894, 0, 880, 0, 911, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 879, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 0, 904, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 904, 912, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 0, 910, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 442, 902, 0, 904, 912, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 910, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 902, 0, 0, 0, 0, 896, 895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	1592, 0, 0, 0, 0, 0, 0, 0, 903, 905,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 0,
	891, 892, 893, 0, 890, 887, 888, 889, 881, 882,
	883, 884, 886, 0, 906, 877, 878, 0, 897, 898,
	899, 907, 908, 909, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 1456, 0, 0, 880, 0,
	911, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 0, 0, 0, 0, 0, 879,
	900, 0, 0, 0, 0, 894, 0, 880, 0, 911,
	0, 0, 0, 0, 0, 877, 878, 0, 897, 898,
	899, 907, 908, 909, 0, 0, 0, 0, 879, 0,
	0, 900, 0, 0, 894, 1414, 0, 0, 880, 0,
	911, 0, 0, 0, 877, 878, 0, 897, 898, 899,
	907, 908, 909, 0, 885, 0, 0, 0, 0, 879,
	900, 0, 0, 0, 0, 894, 0, 880, 0, 911,
	0, 0, 904, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 910, 879, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 902,
	0, 904, 912, 0, 0, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 885, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 902, 0,
	0, 0, 904, 912, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 0, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 902,
	0, 904, 912, 896, 0, 895, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 905, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 902, 0,
	0, 0, 896, 0, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 905, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 0,
	906, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 905, 891, 892, 893, 0, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 0, 891, 892, 893, 0,
	890, 887, 888, 889, 881, 882, 883, 884, 886, 0,
	906, 0, 1423, 1424, 0, 1441, 1442, 1443, 0, 0,
	0, 0, 903, 0, 0, 891, 892, 893, 1577, 890,
	887, 888, 889, 881, 882, 883, 884, 886, 0, 906,
	877, 878, 0, 897, 898, 899, 907, 908, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 878, 1438, 880, 0, 911, 907, 908, 909, 0,
	0, 0, 0, 0, 0, 1423, 1424, 0, 1441, 1442,
	1443, 0, 0, 880, 879, 911, 0, 0, 0, 0,
	894, 1576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	894, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 912, 885,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 1429, 0, 0, 904, 912, 0,
	0, 0, 0, 0, 902, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 0, 0, 1444, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 1436, 1437, 0, 1434, 1431, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	0, 891, 892, 893, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 0, 0, 903, 0,
	0, 0, 0, 0, 0, 890, 887, 888, 889, 881,
	882, 883, 884, 886, 0, 906, 1435, 1436, 1437, 0,
	1434, 1431, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 755,
	749, 772, 743, 763, 762, 0, 0, 745, 744, 0,
	0, 0, 774, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 760, 759, 0, 0, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 751,
	752, 753, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 756, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 0, 0, 0, 754, 748, 0, 0, 0,
	0, 0, 0, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 769, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 775,
}
var sqlPact = [...]int{

	212, -1000, 58, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 682, 17108, -1000,
	-1000, -1000, -1000, -1000, -1000, 773, 642, 946, 4625, 17108,
	17108, 16848, 1025, 1025, 18408, -1000, -1000, 21528, -1000, 3749,
	487, 491, 487, 487, 488, 18408, 585, 628, 161, -1000,
	649, 38, 21268, 17108, 1380, 55, 15548, 345, 212, 16588,
	21008, 17108, 16328, 335, 64, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1224, 1133, 1132,
	15548, 20748, 20488, 20228, 19968, -1000, 10702, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 700, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 352,
	349, -1000, 16068, -1000, 968, -1000, 54, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 958, -1000, 17108, -1000, -1000,
	19708, 19448, 348, 926, -1000, -1000, 573, 410, 1405, -1000,
	70, -1000, -1000, -1000, 1223, -1000, 953, 1219, 1210, 1206,
	1204, 1201, 1200, 409, 870, 484, -1000, 926, -1000, 926,
	-1000, -1000, -1000, 547, 18408, -1000, 15548, -1000, 19188, 17108,
	17108, 1151, 18928, -1000, 649, -1000, -1000, -1000, 1031, 1379,
	1379, 1379, 1408, 180, 177, 161, 48, 17108, -1000, 347,
	48, 6366, 6366, -1000, -1000, 345, -1000, 376, 13416, -1000,
	7558, -1000, 929, 1301, 440, 705, 1295, -118, 835, 824,
	1293, 671, 12619, 64, -1000, -1000, -1000, 9298, 4341, 15548,
	17108, 17108, 695, 18668, -1000, 1291, 139, 1290, -1000, 127,
	1288, -1000, 127, 1283, 39, -1000, -1000, -1000, -1000, -1000,
	-1000, 345, 15808, 17108, 1453, 24953, -1000, 9298, -1000, -1000,
	13960, 1026, 13960, -1000, -1000, 1452, -1000, 9298, -1000, 53,
	52, 1093, 1075, 11261, 10988, 1347, 969, -1000, -1000, -1000,
	65, 4625, 17108, 1234, 13960, 17108, 17108, 17108, 17108, 17108,
	17108, -1000, 1091, -1000, -1000, 17108, 17108, -1000, 51, 49,
	-1000, 18408, -1000, 140, -1000, 344, 1059, 420, 182, 18148,
	420, 1052, -1000, 1031, -1000, 975, 1087, 8440, 9298, 161,
	-1000, -1000, 161, 161, 9298, -1000, -1000, 17108, 48, 1451,
	17108, 93, -1000, 23614, -1000, -1000, 9298, 9298, 9298, 9298,
	9298, 911, -1000, -1000, 1534, -1000, 5505, -1000, -1000, 64,
	343, 190, -1000, -1000, 342, 64, -1000, -1000, -1000, -1000,
	341, 1548, 483, -1000, -1000, -1000, 9298, 411, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1233, 340, 339,
	-1000, -1000, -1000, -1000, 338, 336, 334, 331, 324, 322,
	316, 312, 311, 309, 307, 304, 299, 298, 295, 863,
	-1000, 433, -1000, -1000, 433, 433, -1000, 280, 280, 281,
	-1000, -1000, -1000, -1000, 280, -1000, -1000, -1000, 403, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 290, 93, -1000, -1000,
	-1000, 17108, 35, -1000, 24354, -1000, -2, 760, -1000, 15028,
	1362, 1361, 1383, 15548, 1423, 1421, 544, 17108, 17108, 542,
	541, 15548, -1000, 1199, 31, -1000, -1000, 23224, -157, -1000,
	-1000, 426, 106, 1447, 106, 12896, -1000, 17108, 17108, -1000,
	17108, -1000, -1000, 17108, -1000, 17108, 17108, -1000, 17108, 276,
	14508, 792, 1277, 645, 38, 27, -1000, 1455, -1000, -1000,
	-1000, -1000, 86, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 281, 863, 280,
	280, 280, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 403,
	-1000, -1000, 433, 433, 433, -1000, -1000, 26, 24354, 540,
	10, 14234, 17108, -1000, 61, -1000, -1000, 1198, 482, 21,
	852, 1121, 820, -1000, -1000, -1000, -1000, 46, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1519, -1000,
	-1000, -1000, -1000, 1533, 46, -1000, -1000, -1000, -1000, -1000,
	1547, -1000, -1000, -1000, 4625, -1000, -1000, -1000, 17108, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 852,
	1121, -1000, -1000, 15548, 14768, 1446, 1270, 871, -1000, 1437,
	17108, 951, 1051, -1000, 576, 1265, -1000, -1000, -1000, -1000,
	24354, -1000, 24354, 714, 1139, -1000, 1139, 43, -1000, 23579,
	-1000, 278, 11, -1000, 426, 6366, 12359, 24953, 24953, 17108,
	566, 9298, 9298, 9298, 9298, 9298, 9298, 9298, 9298, 9298,
	9298, 9298, 9298, 9298, 9298, 9298, 9298, 9298, 9298, 9298,
	9298, 9298, 9298, 1036, 9298, 533, 9298, 9298, 9298, 9298,
	1407, 862, 260, 4625, -1000, 661, 661, 661, 24650, 24650,
	275, -1000, 64, 47, 22927, 14, 64, -1000, -1000, -1000,
	6077, 8130, 64, 4909, -1000, 762, 1532, 429, 24354, 1190,
	1175, 277, 176, 174, 9298, 9298, 9584, 9584, 9298, 9870,
	9298, 9298, 5791, 9298, 9298, 9298, 9298, 9298, 9298, -1000,
	271, -1000, -1000, -1000, -1000, 1529, -1000, -1000, 1524, -1000,
	559, 557, 1516, 426, 168, 7558, -1000, 792, 17108, 17108,
	17108, -1000, -1000, 1046, 17888, 1044, 24953, 17108, -1000, 267,
	266, 1110, 1107, 17108, 17108, 17628, 17368, 17108, 754, 263,
	262, 17108, 822, -1000, 17108, 17108, 818, 663, 1193, 17108,
	-1000, 9298, 740, 9298, 798, -1000, 12083, 438, 17108, 805,
	67, -1000, -1000, -1000, 392, 17108, -1000, -1000, -1000, 139,
	-1000, 127, 127, -1000, -1000, 15548, -1000, -1000, -1000, -1000,
	-1000, -1000, 24953, 368, 364, -1000, 1510, 527, -1000, 526,
	520, 519, -1000, 261, -1000, 9298, 17108, 14234, 10, 4,
	-1000, -1000, 17108, 1121, -1000, -1000, -1000, -1000, 675, -1000,
	847, -1000, 11534, -1000, -1000, -1000, 762, -1000, -12, -1000,
	-1000, -1000, -1000, 148, 5, 3, 24953, -1000, -1000, -1000,
	-1000, -1000, 17108, 346, 17108, 38, 17108, -1000, 1544, 38,
	17108, 1263, 1304, 388, 17108, -1000, -1000, -1000, 9298, -1000,
	-1000, -1000, 38, 17108, -1000, 1172, -1000, -89, 1320, -143,
	170, 397, -1000, 11807, -1000, -1000, -1000, 406, 308, 308,
	464, 464, 464, 464, 1325, 1325, 2097, 3069, 24670, 24670,
	24670, 165, 291, 291, 24670, 24670, 24670, 24650, 3538, 2201,
	9298, 9298, 517, 846, 260, 2201, 9298, 1511, 2201, 2201,
	2201, -1000, 1182, -1000, -1000, -1000, 1192, 259, 9870, 9870,
	-1000, -1000, -1000, 5505, -1000, -1000, 258, 9298, -1000, -1000,
	9298, -83, -125, -1000, -1000, -3, -1000, -1000, -9, 9298,
	9298, 9298, 147, -1000, 146, 621, -1000, 9298, 917, 256,
	255, 9298, -1000, -1000, 24325, 3744, 145, 1191, -69, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 144, 137, 24294, -69,
	136, 23194, -1000, 9870, 9870, 9870, 5505, 250, 135, 23283,
	-69, 24265, 7844, 7844, 7844, 134, 23969, 9298, -69, 3490,
	3284, 2972, -19, -20, -24, 1504, -26, 133, 404, 402,
	129, 1172, -1000, -1000, -1000, -1000, 516, 509, 1258, -1000,
	1040, -1000, 445, -1000, 755, 9298, 17108, 248, 245, 816,
	-1000, 1254, 972, 1251, 972, -1000, -2, 749, 9298, 9298,
	-1000, 505, -1000, -1000, 496, -1000, 650, -1000, 361, 24354,
	-1000, 6366, 24354, -1000, 790, 1376, -30, -1000, -1000, 6366,
	426, 12896, 12359, 7558, -32, -1000, -1000, -1000, 792, -1000,
	408, 1502, 128, 1070, 821, 765, 707, 1499, 24354, -12,
	-1000, -12, -1000, -1000, -1000, -1000, -1000, -1000, 17108, 1157,
	-1000, 14768, 242, 17108, 241, -1000, 240, -1000, -1000, 235,
	17108, 1098, 388, 1551, -1000, 420, -1000, 125, -1000, 1169,
	1406, -1000, 12359, 989, 1115, 1114, 12359, 1062, 921, 921,
	921, -1000, 397, 4046, 9298, 15288, 927, 88, 119, 1320,
	9298, 2201, 2201, 9298, 9870, 9870, -1000, 2201, -1000, -1000,
	-1000, -1000, 1187, 234, 9298, 24953, 24685, 24622, -37, 7248,
	-14, 64, 22897, -1000, -1000, 363, -1000, 114, 6962, -1000,
	23910, -17, -17, -1000, 1543, 1202, -1000, 9298, 23940, -1000,
	13156, 427, 933, 22867, 24953, 24953, -1000, 9298, -1000, -1000,
	1186, 9298, -1000, 24953, 24953, 9870, 9870, 9870, 9870, 9870,
	9870, 9870, 9870, 9870, 9870, 9870, 9870, 9870, 9870, 9870,
	9870, 9870, 9870, 9870, 1060, 9870, 1509, 1509, 1509, -16,
	6652, -1000, 1232, 1186, 9298, 9298, 24953, 113, 111, 110,
	-1000, 9298, -69, 9298, 9298, 9298, -1000, -1000, -1000, 109,
	-1000, 1494, -1000, -1000, -1000, -1000, 1169, 17108, 17108, 17108,
	1250, -1000, 1928, -1000, 22838, -41, 17108, 17108, -1000, 1099,
	1159, 476, 17108, -1000, 17108, -1000, 17108, 17108, 17108, -43,
	-45, 17108, 17108, -1000, -1000, -31, 6366, 222, 38, -31,
	740, -1000, -18, -1000, 390, -1000, 360, 359, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 107, -1000, -1000, 1160,
	-1000, 10442, 226, 17108, 14768, 1436, 10442, 950, 1102, 388,
	1542, -1000, 576, -1000, 423, 9298, 9298, 1320, 603, 12359,
	12359, 922, 1113, 12359, -1000, -1000, -1000, -1000, 15288, -1000,
	1120, -47, -1000, -1000, 17108, 221, -1000, 397, 591, 2201,
	2459, 2057, 9298, 24953, 2573, -49, 9298, 9298, -1000, -53,
	-1000, 9298, -1000, -1000, 1537, 9298, 104, 103, 100, -1000,
	-1000, 24354, 9298, -1000, -1000, 21788, 9298, 95, -1000, 94,
	92, 24354, 1232, 24354, -1000, -1000, 669, 669, 1509, 1509,
	1509, 1509, 1300, 1300, 616, 2273, 782, 782, 782, 3172,
	925, 925, 782, 782, 782, 1185, 1105, 220, 23555, 9298,
	-62, -1000, -1000, -1000, 24354, 24354, 90, -1000, -1000, -1000,
	-69, 2916, 22541, 22511, -1000, 87, 423, -1000, -1000, -1000,
	17108, -1000, 17108, -1000, 17108, 17108, 1183, 1032, -1000, -1000,
	1106, 219, 9870, 17108, -1000, 808, -67, -68, 1016, -1000,
	1006, 9298, -1000, 24953, 972, 972, -1000, 494, 485, -1000,
	-1000, -1000, -1000, -31, 1310, 17108, 1381, -1000, -1000, 218,
	-1000, -1000, -1000, 896, -72, -1000, 251, 1388, 9298, -1000,
	-1000, 215, 10442, -73, 81, 38, -78, 17108, -1000, 388,
	1540, -1000, 1304, -1000, 17108, 24354, -69, 551, -1000, 922,
	-1000, 213, 9298, 12359, -1000, -1000, -147, -1000, 385, -1000,
	397, 211, 17108, 15288, 9298, 9298, 2573, -92, -1000, 2201,
	2201, -1000, 22481, -1000, 23910, -1000, -1000, -1000, 24354, 883,
	-1000, 22452, -1000, -1000, -1000, -1000, 9870, 1184, 209, 24953,
	22155, -1000, -1000, 9298, -1000, -1000, -1000, -1000, -1000, 923,
	-1000, -1000, 17108, 1028, -1000, -1000, 9298, 23555, 208, 1157,
	207, -1000, -1000, -1000, 817, -1000, -1000, 24354, 1392, -1000,
	-1000, 17108, 17108, 556, -96, 17108, -1000, -1000, 5219, 17108,
	808, 10442, 1375, 64, 17108, 1375, 22125, 4909, -98, -1000,
	1157, -1000, 808, 206, 1539, -1000, 1098, -54, -1000, 1429,
	13700, -1000, 17108, 24354, -1000, 1120, -1000, 4625, 15288, 17108,
	-100, -1000, 2201, 2201, -1000, -1000, 78, 933, 1404, -1000,
	2950, 9870, 24953, -104, -1000, 22095, -1000, -1000, 1249, 22066,
	1078, 17108, -1000, 17108, 17108, 451, 17108, -1000, -1000, 683,
	-1000, 426, -1000, 202, 1157, -1000, -1000, -1000, -1000, 1388,
	-9, 808, -1000, 1157, 10442, -1000, 1102, 17108, 194, -1000,
	192, 64, -106, -1000, -1000, -1000, -110, -1000, -1000, 807,
	9298, 2950, -115, -1000, -1000, 1242, -1000, 928, 924, 77,
	-116, 182, -1000, 9298, -1000, 12896, -1000, 17108, -1000, 1375,
	76, 1157, -1000, -120, -1000, -1000, -1000, 9298, -1000, -1000,
	73, 9012, 9012, -69, -1000, 17108, -1000, 947, 930, 636,
	-1000, -1000, -1000, -1000, -1000, 1078, 24354, -112, -121, -1000,
	-1000, -1000, 808, -17, -1000, -1000, -1000, 10156, 957, 733,
	23253, -1000, -1000, -1000, 1321, -1000, 466, 1010, 1010, 928,
	-1000, 940, 1157, 50, 1464, -1000, -1000, -1000, -1000, -1000,
	-1000, 1472, -1000, -1000, 1103, -1000, -1000, -1000, -1000, -1000,
	-1000, 1537, 8726, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1803, 1802, 1422, 145, 1799, 142, 1798, 1795, 1794,
	1791, 1789, 1788, 106, 140, 139, 134, 133, 1784, 90,
	1780, 1779, 1777, 105, 1774, 1771, 1768, 84, 1767, 1766,
	126, 120, 1764, 1762, 91, 34, 179, 2307, 162, 1761,
	1760, 1755, 11, 109, 62, 1754, 107, 1752, 1751, 54,
	43, 21, 19, 1750, 98, 118, 892, 28, 1749, 1748,
	148, 25, 22, 155, 99, 156, 161, 123, 1747, 1746,
	1745, 46, 1744, 1, 1742, 1731, 13, 58, 12, 1727,
	26, 37, 1726, 1725, 131, 1722, 66, 102, 116, 77,
	138, 745, 1718, 78, 14, 75, 1717, 17, 82, 1716,
	51, 79, 147, 1713, 57, 163, 60, 38, 61, 111,
	1712, 1711, 1710, 93, 1707, 94, 68, 1700, 1695, 76,
	1691, 137, 135, 1690, 1687, 124, 1685, 1684, 1683, 153,
	1682, 1681, 157, 1680, 9, 50, 65, 8, 115, 114,
	20, 108, 1678, 33, 1672, 1940, 895, 616, 23, 53,
	47, 85, 55, 59, 18, 1671, 1670, 112, 1669, 1665,
	1662, 1661, 1660, 81, 1657, 86, 146, 31, 36, 44,
	100, 24, 83, 88, 160, 154, 117, 1654, 1649, 127,
	1648, 113, 1647, 1646, 1213, 125, 1643, 1642, 1641, 1098,
	861, 789, 273, 1640, 1639, 766, 89, 1638, 1636, 130,
	1635, 1632, 150, 218, 101, 1631, 121, 1629, 95, 1622,
	0, 97, 30, 1620, 128, 74, 1617, 1615, 1614, 1609,
	27, 2, 10, 5, 6, 4, 35, 32, 1607, 1606,
	132, 103, 80, 1605, 151, 1588, 1587, 1583, 52, 1579,
	15, 1577, 16, 1576, 1575, 7, 3, 149, 1573, 110,
	1561, 1450, 1560, 152, 1558, 1556, 1462, 49, 87,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 90, 90, 89, 89,
	92, 92, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 180, 180, 179, 18, 155,
	155, 19, 19, 19, 19, 20, 114, 114, 21, 21,
	21, 21, 22, 26, 247, 247, 247, 251, 251, 252,
	252, 253, 253, 253, 253, 253, 253, 253, 249, 249,
	29, 29, 29, 29, 29, 133, 129, 129, 131, 131,
	131, 131, 55, 128, 128, 128, 128, 130, 130, 130,
	130, 203, 202, 202, 208, 208, 208, 68, 68, 68,
	68, 68, 69, 69, 69, 201, 201, 201, 201, 209,
	209, 209, 209, 209, 209, 70, 70, 70, 207, 207,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	17, 248, 248, 250, 250, 31, 31, 9, 9, 10,
	10, 71, 71, 72, 72, 136, 136, 136, 136, 73,
	73, 47, 47, 47, 135, 218, 218, 219, 219, 219,
	219, 219, 219, 220, 220, 220, 220, 220, 220, 220,
	216, 216, 217, 214, 214, 215, 215, 215, 215, 254,
	254, 134, 134, 76, 76, 223, 223, 223, 223, 221,
	221, 221, 221, 221, 224, 222, 225, 225, 225, 225,
	225, 166, 166, 166, 33, 11, 53, 53, 12, 8,
	8, 118, 118, 80, 80, 171, 171, 171, 62, 62,
	42, 42, 42, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 119, 119, 120, 120, 24, 28,
	32, 32, 32, 32, 32, 256, 256, 59, 59, 59,
	59, 60, 60, 132, 132, 132, 132, 132, 54, 7,
	7, 49, 49, 50, 50, 51, 51, 52, 52, 257,
	257, 23, 23, 23, 23, 23, 65, 65, 125, 125,
	125, 127, 127, 126, 126, 126, 104, 104, 34, 85,
	85, 94, 94, 95, 95, 177, 96, 96, 27, 27,
	37, 37, 35, 35, 35, 35, 35, 35, 36, 36,
	38, 38, 38, 38, 38, 38, 38, 231, 231, 231,
	234, 234, 230, 232, 232, 233, 233, 255, 255, 105,
	105, 105, 75, 74, 74, 78, 78, 77, 79, 79,
	170, 102, 102, 102, 102, 121, 122, 122, 123, 123,
	124, 124, 101, 101, 152, 152, 39, 39, 84, 84,
	86, 86, 143, 143, 144, 144, 142, 142, 142, 172,
	172, 172, 172, 172, 169, 169, 173, 173, 173, 173,
	173, 173, 167, 167, 167, 167, 168, 168, 178, 178,
	108, 108, 108, 108, 106, 106, 107, 107, 174, 174,
	174, 174, 103, 103, 175, 175, 175, 137, 137, 181,
	181, 181, 83, 83, 83, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 183, 183,
	183, 183, 185, 185, 185, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 186,
	186, 193, 193, 194, 194, 195, 196, 187, 187, 188,
	188, 189, 190, 197, 197, 197, 197, 199, 199, 191,
	191, 191, 191, 191, 192, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 116,
	116, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 226, 226, 226, 226, 226, 226,
	226, 228, 228, 229, 229, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 235, 235, 236, 236, 238, 238, 239, 239,
	240, 241, 241, 241, 242, 243, 243, 237, 237, 244,
	244, 244, 245, 245, 246, 246, 246, 246, 246, 157,
	157, 157, 158, 158, 159, 91, 91, 154, 154, 153,
	153, 153, 156, 156, 109, 109, 198, 198, 198, 198,
	198, 198, 198, 110, 110, 110, 117, 111, 111, 112,
	112, 112, 112, 112, 112, 149, 150, 113, 113, 113,
	151, 151, 160, 164, 164, 163, 162, 162, 161, 161,
	140, 140, 140, 140, 141, 141, 139, 138, 97, 97,
	98, 98, 258, 258, 165, 165, 99, 99, 100, 93,
	93, 176, 176, 176, 176, 87, 87, 67, 67, 88,
	88, 63, 63, 66, 66, 64, 64, 64, 64, 81,
	81, 82, 82, 61, 61, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 200, 200, 200, 56,
	56, 56, 57, 57, 58, 58, 205, 205, 205, 206,
	206, 206, 206, 204, 204, 204, 204, 204, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 3, 4, 4, 2,
	2, 2, 0, 2, 0, 8, 8, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 5, 2, 0, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 1, 3, 3, 0, 3, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 4,
	6, 3, 1, 5, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 2, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 1, 0, 2, 2, 1, 2,
	0, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 3, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -233, 92, 100, 122, 198,
	99, 85, 116, 212, 220, -35, -37, 228, -133, 229,
	34, 238, 58, 95, 214, 209, 260, 66, -231, -38,
	-36, 308, 283, 289, 223, -39, 246, 275, 311, 246,
	130, 78, 278, -63, -56, 4, -210, -212, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 184,
	187, 190, 191, 192, 193, 196, 198, 200, 201, 202,
	204, 205, 209, 207, 208, 210, 212, 214, 215, 217,
	219, 220, 221, 222, 225, 226, 228, 229, 231, 234,
	237, 238, 239, 242, 240, 236, 245, 247, 248, 249,
	256, 260, 261, 262, 263, 266, 267, 268, 270, 272,
	273, 274, 279, 284, 285, 286, 287, 28, 35, 36,
	37, 38, 40, 41, 44, 45, 49, 50, 51, 53,
	80, 82, 83, 98, 101, 102, 108, 118, 120, 125,
	126, 135, 136, 137, 138, 140, 151, 174, 176, 185,
	189, 195, 197, 203, 216, 224, 232, 233, 241, 243,
	251, 252, 253, 257, 258, 275, 276, 87, 134, 268,
	267, 78, 130, 246, 278, -16, 308, -27, -6, -14,
	-4, -23, -34, -13, -30, -17, -31, -15, 23, -204,
	4, -210, -212, -211, -213, 55, 67, 115, 133, 127,
	142, 144, 152, 154, 166, 186, 188, 213, 230, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 42, 47,
	48, 52, 54, 56, 62, 66, 70, 71, 72, 73,
	74, 75, 84, 86, 88, 89, 90, 93, 95, 97,
	103, 104, 105, 111, 113, 114, 116, 119, 121, 128,
	130, 132, 139, 141, 147, 150, 155, 157, 158, 171,
	173, 179, 180, 181, 182, 183, 194, 199, 206, 211,
	223, 227, 235, 244, 246, 250, 254, 255, 259, 264,
	265, 269, 271, 277, 278, 280, 281, 282, 283, -56,
	-56, -56, 198, 22, -251, 22, -252, -253, 66, 92,
	116, 223, 134, 87, 267, -251, -60, 220, -56, -129,
	156, 226, 216, 256, -130, -128, -203, 251, 165, -89,
	-56, 4, 22, 78, 57, 79, 117, 130, 131, 62,
	63, 146, 247, 251, 256, 66, 270, -256, 256, 256,
	-256, -256, -59, 256, 254, -60, -255, 246, 246, 269,
	278, -118, 78, 265, -36, -38, -37, -77, -78, 264,
	139, 97, 183, -35, -37, -231, -234, 204, -230, -56,
	-234, -74, -75, 22, 89, 312, -174, -63, 181, -100,
	308, -3, -174, 125, -63, -66, 125, -63, -56, -174,
	125, 114, 308, -97, -140, -139, -138, 306, 310, 114,
	141, 141, -175, -174, -56, 125, -67, 125, -66, -90,
	125, -89, -90, 125, -180, -179, -206, 4, -210, -212,
	-211, 275, 246, 130, -155, 308, -114, 308, -56, 22,
	180, 312, 180, -56, -129, 51, -129, 308, -131, -54,
	-55, 143, 200, 254, 293, 114, 287, -70, 5, 84,
	-92, 310, 114, -248, 180, 114, 114, 114, 114, 114,
	114, 287, 143, 200, 219, 246, 278, -132, -54, -55,
	-132, 254, -60, -103, -174, -89, 125, -56, -89, 130,
	-56, 125, -77, -78, -102, -121, -122, 155, 179, -105,
	22, 89, -105, -105, 43, 309, 309, 312, -234, -82,
	308, -93, -176, -145, 301, -147, 299, 300, 305, 171,
	288, -157, -63, -148, 313, 9, 308, -160, -228, -37,
	98, 29, -158, -159, 216, -56, 7, 8, 5, 6,
	-61, -183, -192, 259, 103, 173, 47, -226, -227, 4,
	-210, -205, -184, -194, -188, -191, 140, 55, 71, 74,
	72, 75, 227, 269, 48, 28, 101, 102, 189, 195,
	243, 257, 258, 125, 174, 126, 53, 118, 151, 91,
	36, 38, 40, 41, 49, 50, 80, 82, 83, 108,
	135, 136, 137, 138, 176, 203, 232, 241, 252, 253,
	276, -211, -195, -196, -189, -190, -197, -93, -100, 301,
	-63, 308, -99, -165, -145, 84, -44, 207, -43, 21,
	23, 92, 273, 98, 236, 236, 207, 98, 313, 207,
	207, 98, 239, 309, -87, -63, -140, -145, -141, -204,
	301, -175, -65, -63, -65, 228, -56, 30, 98, -46,
	312, 46, 210, 98, -46, 312, 98, -46, 98, 309,
	312, -174, 125, -66, 30, -154, -181, -182, -184, -193,
	-187, -191, -192, 39, 45, 44, 249, 224, 233, 37,
	135, 136, 137, 138, 232, 36, 203, 108, 91, 83,
	82, 176, 41, 40, -195, -196, -189, -190, 80, 252,
	253, 140, 38, 50, 49, 276, 241, -91, -145, -247,
	-88, 246, 78, -64, -56, 301, -253, -247, 30, -91,
	312, 312, 153, -69, 159, 170, 123, -202, 84, -208,
	-201, -166, 9, 259, 103, 180, -207, 8, 300, -200,
	-206, 5, 7, 299, -202, 84, 69, -209, 5, 4,
	-192, -166, 84, 156, 310, -204, -203, -250, 111, -247,
	-203, -203, -203, -203, -203, -56, 153, -203, -203, 312,
	312, -60, -46, 312, 308, -76, 171, -232, 283, -76,
	308, -57, 125, -56, -232, 171, -102, -122, -121, -123,
	-145, 22, -145, -147, -36, -36, -36, -79, -170, -145,
	-230, 30, -81, -56, -84, 312, 114, 10, 11, 54,
	33, 299, 300, 301, 302, 109, 303, 296, 297, 298,
	295, 291, 292, 293, 60, 160, 218, 13, 14, 15,
	26, 182, 154, 288, 127, 230, 305, 16, 17, 18,
	142, 35, 128, 30, 4, -145, -145, -145, -145, -145,
	188, 7, -98, -37, -145, -91, -97, -37, -37, -153,
	306, 308, -97, 308, 5, 5, 308, -161, -145, -235,
	284, 111, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 197,
	-199, 279, -199, -199, -185, 308, -185, -186, 308, -185,
	285, 289, 308, -84, -63, 312, 309, 312, 254, -119,
	62, 56, -135, 125, 56, -214, -56, 62, -215, 52,
	265, 199, 113, -119, 62, -119, 62, 62, -174, 33,
	33, 254, -66, -56, 254, 254, -174, 114, 309, 312,
	307, 316, -137, 281, -125, -27, 308, 84, 30, -125,
	-94, -95, -177, -96, -63, 308, -56, -56, -66, -67,
	-89, -90, -90, -16, -179, 98, -19, -27, -23, -34,
	-13, 309, 312, -83, 29, -115, 308, 286, 163, 81,
	124, 162, -116, 222, 309, 312, 254, 312, -88, -81,
	-139, -138, 114, 256, 309, -55, -54, -68, 202, 234,
	208, 225, 312, 8, 7, 7, 5, -204, -249, -56,
	-55, -54, -174, -71, -81, -72, -56, -136, -135, -216,
	-217, -214, 130, 265, 104, 30, 98, -53, 193, 30,
	180, 171, -49, 248, 98, -124, 216, 217, 312, -42,
	31, 88, 308, 312, 309, -137, -176, -86, -172, -174,
	-63, -37, -173, 308, -181, -181, -89, 251, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
	154, 127, 230, 35, 128, -145, 254, -145, -145, -145,
	-145, 173, 171, 259, 103, 266, 89, 177, -258, 244,
	32, -151, -37, 308, -204, -157, 216, 308, -140, 309,
	312, -91, -156, 307, -153, -91, 309, 309, -91, 277,
	22, 89, 301, -115, 7, -164, -163, 280, -236, 106,
	119, 308, 309, 309, -145, -145, -109, -198, -91, 4,
	286, 163, 81, 124, 162, 222, -109, -110, -145, -91,
	-111, -146, -147, 299, 300, 305, 308, 216, -112, -145,
	-91, -145, 42, 150, 255, -113, -145, 114, -91, -145,
	-145, -145, -91, -91, -91, 308, 7, 7, 251, 251,
	7, -137, 309, -165, -43, -63, -56, -56, 171, -135,
	125, -48, 171, -181, -56, 308, 308, 145, 145, -56,
	-56, 125, -56, 125, -56, -56, -44, 207, 308, 308,
	-56, 207, -56, -63, 207, 239, 114, -63, -141, -145,
	-104, 211, -145, -104, -127, 180, -87, 275, -56, 211,
	-85, 312, 114, 293, -87, -46, -46, -46, -174, -181,
	306, 306, 7, 254, 254, 254, 254, 308, -145, -249,
	-64, -249, -54, 263, 59, 202, -208, -115, 312, 309,
	309, 312, -57, 130, -57, -27, -89, 5, -27, -63,
	98, -50, 94, -257, 293, -56, -170, -19, -56, -101,
	119, -178, 312, 290, 67, -108, 144, 166, 115, 152,
	213, 133, -142, 313, 308, -169, 289, -37, -173, -172,
	287, -145, -145, 254, -258, 244, -151, -145, 173, 259,
	103, 266, 89, 177, 114, 308, -146, -146, -91, 308,
	-91, -98, -145, 307, 307, 312, 309, -78, 312, -77,
	-145, -91, -91, 309, 309, -162, -163, 93, -145, -241,
	187, 308, 308, -145, 30, 312, 309, 114, 309, 309,
	-117, 194, 309, 10, 11, 299, 300, 301, 302, 109,
	303, 296, 297, 298, 295, 291, 292, 293, 60, 160,
	218, 13, 14, 15, 142, 128, -146, -146, -146, -91,
	308, 309, -149, -150, 114, 111, 30, -113, -113, -113,
	309, 114, -91, 312, 312, 312, 309, 309, 309, 7,
	309, 312, 309, 287, 287, 309, -101, 254, 254, 98,
	171, 272, -218, -215, -145, -81, 308, 308, -41, 92,
	228, -120, 98, -46, 98, -46, 254, -119, 62, -91,
	-91, 254, 254, 239, 307, -93, 211, 61, 309, -93,
	-137, -95, -86, -165, 309, 307, 7, 7, 309, 163,
	124, 162, -116, 162, -116, -116, 7, -56, -73, 129,
	-136, 308, -57, 308, 308, -76, 308, -56, -51, 149,
	-257, 4, -232, 309, -152, 121, 43, -172, 177, 144,
	144, -172, -108, 144, -106, 186, -106, -106, -169, -204,
	314, -91, -168, -167, 30, -56, 184, 309, -145, -145,
	-146, -146, 114, 308, -145, -154, 26, 26, 309, -91,
	309, 312, 309, -153, 309, 277, -78, -78, -78, 5,
	95, -145, 250, -242, -56, 308, 281, -77, 309, -181,
	-181, -145, -149, -145, -181, -181, -146, -146, -146, -146,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
	-146, -146, -146, -146, -146, 89, 171, 177, -146, 312,
	-91, 309, -150, -149, -145, -145, -181, 309, 309, 309,
	-91, -145, -145, -145, 309, 7, -152, -56, -56, -135,
	98, -219, 62, -220, 54, 104, 66, 171, 173, 265,
	199, 52, 84, 206, 309, 309, -81, -81, 171, 84,
	171, 84, 77, 261, -56, -56, -63, -56, -56, 309,
	309, -56, -63, -93, -126, 308, 180, -27, -104, 293,
	307, 307, 309, 128, -80, -171, -56, -229, 308, -226,
	-227, -61, 308, -81, -71, 30, -80, 180, -52, 148,
	-257, 5, -49, -238, 282, -145, -91, 245, -172, -172,
	-107, 271, 180, 144, -172, -168, -144, -143, 112, 169,
	309, -56, 308, -169, 26, 26, -145, -154, 309, -145,
	-145, 309, -145, 5, -145, 309, 309, 309, -145, -243,
	-56, -145, 309, 309, 309, -150, 114, 89, 177, 308,
	-145, 309, 309, 312, 309, 309, 309, -238, -135, -56,
	-89, -56, 104, 125, 173, 145, 308, -146, -63, -134,
	-254, 65, 242, 309, 309, 173, 173, -145, -181, -46,
	-46, 254, 254, 90, -81, 62, -100, -37, 308, 190,
	309, 312, -62, -97, 54, -62, -145, 308, -80, 309,
	309, -27, 309, -63, -257, 5, -50, -239, -240, -56,
	251, -107, 308, -145, -172, 312, 315, 293, -169, 308,
	-81, -167, -145, -145, 309, 309, -78, -237, 192, 309,
	-146, 114, 308, -154, 309, -145, -220, -57, 171, -145,
	-58, 308, -73, 308, 206, -45, 54, -56, -56, 267,
	172, 309, -56, -56, -134, -171, -42, -89, -42, 309,
	-91, 309, -73, -134, 308, 5, -51, 312, 30, -148,
	-61, -56, -81, -143, -204, -168, -81, 309, 309, -78,
	43, -146, -154, 309, 309, 98, 309, -223, 161, -56,
	-81, -63, -40, 271, -89, 228, -137, 308, -73, -62,
	-78, -134, -73, -80, -52, -240, -242, 308, 309, 309,
	-244, 201, 217, -91, 309, 104, -221, -224, -222, 180,
	115, 191, 231, 309, 309, -76, -145, -94, -81, -42,
	309, -73, 309, -91, 309, -245, -246, 35, 262, 69,
	-145, -245, -56, -222, 180, -224, 180, 267, 87, -223,
	-137, 309, -134, -78, -246, 196, 110, 216, 196, 110,
	-225, 168, 210, 46, 228, -225, -221, -47, 46, 210,
	-73, 309, 26, 20, 173, 84, -246,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 368, -2, 0, 134, 0,
	316, 0, 316, 316, 320, 0, 398, 282, 395, -2,
	406, 0, 0, 0, 404, 382, 0, 0, -2, 0,
	0, 0, 0, 0, 811, 839, 840, 841, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 0, 200,
	853, 854, 855, 856, 857, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 100,
	107, 108, 926, 110, 0, 117, 118, 119, 121, 122,
	123, 124, 125, 126, 127, 0, 309, 941, 322, 130,
	904, 945, 1014, 960, 137, 147, 0, 1020, -2, 151,
	78, 180, 181, 182, 0, 184, 202, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 199, 327, 315, 327,
	312, 313, 314, 317, 0, 308, 0, 397, 0, 0,
	0, 0, 0, 281, -2, 378, 379, -2, 0, 401,
	401, 401, 0, 0, 379, 0, 387, 930, 390, 822,
	388, 0, 0, 403, 402, 0, 383, 468, 0, 426,
	0, 2, 0, 999, 468, 0, 999, 814, 0, 0,
	999, 0, 0, 812, 788, 780, 781, 785, 0, 0,
	0, 0, 0, 474, 68, 999, 51, 999, 807, 51,
	999, 76, 51, 999, 0, 95, 97, 849, 850, 851,
	852, 1025, 0, 0, 0, 0, 105, 0, 109, 111,
	0, 0, 0, 321, 131, 988, 133, 0, 136, 138,
	139, 0, 0, 0, 0, 0, 0, 150, 175, 176,
	79, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 195, 196, 0, 0, 310, 323, 324,
	311, 0, 319, 51, 472, 254, 999, 394, 254, 843,
	394, 999, -2, 0, 374, 413, 414, 0, 0, 0,
	399, 400, 0, 0, 0, 370, 371, 0, 389, 0,
	0, 429, 799, 803, 804, 561, 0, 0, 0, 0,
	0, 0, 650, 651, 0, 790, 0, 655, 656, 657,
	993, 0, 662, 663, 1014, 811, 825, 826, 827, 828,
	0, 0, 0, 833, 834, 835, 779, 703, 672, -2,
	-2, 823, 498, 499, 500, 501, -2, 1027, 676, 678,
	680, 681, 682, 683, 0, 977, 994, 995, 1010, 1011,
	1019, 1023, 1024, 999, 1007, 1000, 989, 997, 1006, 882,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 848, 523, 524, 529, 530, 532, 429, 427, 469,
	470, 0, 0, 796, 794, 795, 28, 305, 30, 0,
	305, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 805, 789, 784, 0, 786,
	787, 478, 0, 346, 0, 0, 475, 0, 0, 70,
	0, 49, 50, 0, 72, 0, 0, 74, 0, 396,
	0, 0, 999, 0, 396, 0, 737, 484, 485, 486,
	487, 488, 558, 491, 492, 493, 494, 495, 496, 497,
	505, 506, 507, 508, 509, 510, 511, 520, 0, 504,
	504, 504, 517, 518, 521, 522, 527, 528, 539, 540,
	542, 544, 538, 538, 538, 535, 536, 0, 735, 0,
	114, 0, 877, 809, 815, 816, 120, 0, 0, 0,
	0, 0, 0, 142, 162, 163, 164, 143, 145, 152,
	154, 155, 156, 165, 166, 167, 168, 271, 0, 273,
	178, 179, 836, 0, 144, 146, 148, 149, 169, 170,
	0, 172, 173, 174, 0, 80, 183, 185, 0, 201,
	186, 187, 188, 189, 190, 191, 194, 197, 198, 0,
	0, 318, 274, 0, 212, 0, 0, 277, 393, 0,
	0, 0, 999, 842, 332, 0, 377, 411, 412, 415,
	418, 419, 416, 561, 384, 385, 386, 407, 408, 292,
	391, 0, 0, 819, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 793, 0, 0, 802, 566, 567, 568, 590, 591,
	0, 652, 653, -2, 735, 0, 658, 659, 660, 661,
	0, 0, -2, 0, 830, 558, 0, 0, 778, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 758,
	764, 0, 0, 0, 0, 0, 0, 0, 0, 513,
	526, 537, 534, 533, 515, 0, 514, 512, 0, 516,
	0, 0, 0, 478, 0, 0, 798, 0, 0, 0,
	0, 304, 32, 999, 0, 53, 0, 0, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 813, 0, 0, 0, 0, 0, 0,
	782, 785, 357, 0, 357, 348, 0, 0, 0, 344,
	360, 361, 363, 364, 0, 0, 476, 69, 808, 51,
	77, 51, 51, 83, 96, 0, 98, 101, 102, 103,
	104, 99, 0, 479, 481, 489, 0, 545, 546, 547,
	548, 549, 550, 559, 106, 0, 0, 0, 115, 116,
	817, 818, 0, 0, 135, 140, 141, 328, 0, 159,
	0, 161, 0, 272, 838, 837, 558, 81, 203, 128,
	325, 326, 473, 0, 0, 211, 819, 213, 215, 216,
	217, 218, 843, 0, 843, 0, 0, 275, 0, 0,
	0, 0, 334, 340, 0, 417, 420, 421, 0, 410,
	290, 291, 396, 0, 821, 423, 800, 459, 430, 438,
	468, 445, 442, 0, 562, 563, 564, 0, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, -2, -2,
	-2, 582, 583, 584, -2, -2, -2, 588, 589, -2,
	0, 0, 0, 793, 0, -2, 0, 598, -2, -2,
	-2, 602, 0, 605, 607, 609, 0, 0, 0, 0,
	792, 619, 770, 0, 801, 604, 0, 0, 791, 790,
	0, 0, 0, 741, 742, 0, -2, 664, 406, 0,
	0, 0, 0, 831, 0, 777, 773, 0, 713, 0,
	0, 0, 677, 679, 0, 0, 0, 0, 745, -2,
	-2, -2, -2, -2, -2, -2, 0, 0, 735, 755,
	0, 0, 621, 0, 0, 0, 0, 1014, 0, 735,
	763, 0, 0, 0, 0, 0, 735, 0, 769, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 471, 797, 31, 294, 0, 0, 0, 34,
	999, 42, 0, 226, 0, 0, 0, 0, 0, 307,
	43, 999, 51, 999, 51, 44, 29, 305, 0, 0,
	298, 0, 293, 296, 0, 59, 0, 806, 0, 784,
	67, 0, 477, 341, 342, 0, 0, 350, 347, 0,
	478, 0, 0, 0, 0, 71, 73, 75, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 112,
	810, 113, 132, 157, 158, 160, 153, 171, 0, 220,
	253, 0, 0, 843, 0, 209, 254, 276, 278, 0,
	0, 336, 340, 0, 339, 394, 409, 0, 820, 425,
	0, 428, 0, 0, 0, 0, 0, 0, 465, 465,
	465, 463, 445, 0, 0, 457, 0, -2, 442, 0,
	0, -2, -2, 0, 0, 0, 620, -2, 603, 606,
	608, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 736, 739, 740, 0, -2, 0, 0, 405,
	406, 406, 406, 670, 0, 0, 774, 0, 0, 671,
	0, 0, 0, 0, 0, 0, 686, 0, 687, 688,
	0, 0, 689, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 624, 625, 626, 0,
	0, 690, 761, 762, 0, 0, 0, 0, 0, 0,
	695, 0, 768, 0, 0, 0, 699, 700, 701, 0,
	502, 0, 519, 541, 543, 531, 425, 0, 0, 0,
	0, 52, 224, 243, 0, 0, 0, 0, 36, 0,
	0, 0, 0, 40, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 60, 783, 356, 0, 355, 0, 345,
	357, 362, 359, 365, 0, 482, 0, 0, 490, 551,
	552, 553, 554, 555, 556, 557, 0, 129, 207, 0,
	214, 0, 0, 0, 212, 0, 0, 0, 338, 340,
	0, 331, 332, 392, 707, 0, 0, 431, 0, 0,
	0, 0, 0, 0, 460, 464, 461, 462, 457, 436,
	0, 0, 441, 456, 0, 455, 444, -2, 565, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 771, 0,
	730, 0, -2, 743, 665, 0, 0, 0, 0, 832,
	772, 776, 0, 711, 712, 716, 0, 0, 675, 0,
	0, 744, 754, 756, 622, 623, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, -2, -2, -2, 640,
	641, 642, -2, -2, -2, 0, 0, 0, 757, 0,
	0, 733, 759, 760, 765, 766, 0, 692, 693, 694,
	767, 0, 0, 0, 525, 0, 707, 300, 302, 33,
	0, 225, 0, 228, 0, 0, 0, 0, 234, 235,
	0, 0, 0, 0, 245, 252, 0, 0, 0, 48,
	0, 0, 306, 0, 51, 51, 295, 0, 0, 205,
	206, 299, 297, 343, 0, 0, 0, 349, 358, 0,
	483, 480, 560, 0, 0, 283, 289, 289, 0, 673,
	674, 0, 0, 0, 0, 0, 0, 0, 329, 340,
	0, 333, 334, 380, 0, 424, 422, 0, 447, 0,
	449, 0, 0, 0, 451, 439, 0, 434, 0, 433,
	445, 453, 0, 0, 0, 0, -2, 0, 613, -2,
	-2, 729, 736, 829, 406, 666, 668, 669, 775, 718,
	715, 0, 702, 684, 685, 753, 0, 0, 0, 0,
	736, 732, 691, 0, 697, 698, 503, 381, 35, 0,
	229, 230, 843, 0, 233, 236, 0, 238, 845, 220,
	0, 249, 250, 247, 0, 37, 38, 47, 55, 39,
	45, 0, 0, 0, 0, 0, 366, 367, 0, 0,
	252, 0, 292, 824, 0, 292, 0, 0, 0, 242,
	220, 210, 252, 0, 0, 335, 336, 706, 708, 0,
	0, 448, 0, 467, 450, 0, 437, 0, 457, 0,
	0, 443, -2, -2, 614, 731, 0, 406, 0, 704,
	-2, 0, 0, 0, 734, 0, 227, 231, 0, 0,
	258, 0, 246, 0, 0, 57, 0, 301, 303, 0,
	352, 478, 354, 0, 220, 284, 285, 288, 286, 289,
	406, 252, 208, 220, 0, 337, 338, 0, 0, 458,
	0, 0, 0, 435, 432, 440, 0, 454, 667, 721,
	0, -2, 0, 648, 696, 0, 237, 263, 0, 0,
	0, 254, 41, 0, 54, 0, 353, 0, 240, 292,
	0, 220, 279, 0, 330, 709, 710, 0, 466, 452,
	0, 0, 0, 717, 649, 0, 239, 259, 260, 0,
	255, 256, 257, 844, 251, 258, 56, 478, 0, 287,
	665, 241, 252, 406, 714, 719, 722, -2, 963, 874,
	0, 720, 232, 261, 0, 262, 0, 0, 0, 263,
	351, 223, 220, 0, 0, 724, 725, 726, 727, 728,
	264, 0, 267, 268, 0, 265, 248, 219, 221, 222,
	280, 0, 0, 266, 269, 270, 723,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 297, 3, 303, 298, 3,
	308, 309, 301, 299, 312, 300, 310, 302, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 316, 311,
	291, 293, 292, 3, 313, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 306, 3, 307, 296, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 314, 295, 315, 305,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 294, 57634, 304,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:731
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:737
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:815
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:852
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:925
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:929
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1059
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1437
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = DropDefault
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return unimplemented(sqllex)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1854
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1862
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1865
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1871
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1876
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1878
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1985
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = Ascending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = Descending
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2043
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2044
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = true
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = false
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2058
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2091
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.str = ""
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.str = ""
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2223
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2224
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2243
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2250
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			return unimplemented(sqllex)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2322
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2551
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2554
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2558
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2562
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2566
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2569
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2570
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = true
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = false
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = true
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2652
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &From{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2800
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = true
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = false
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.str = astFullJoin
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.str = astLeftJoin
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.str = astRightJoin
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.str = astInnerJoin
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2961
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3060
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3065
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3074
		{
			return unimplemented(sqllex)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3130
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = nil
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3179
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3251
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3283
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3322
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3323
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			return unimplemented(sqllex)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3362
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			return unimplemented(sqllex)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			return unimplemented(sqllex)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3367
		{
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
			return unimplemented(sqllex)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3371
		{
			return unimplemented(sqllex)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3406
		{
			return unimplemented(sqllex)
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			return unimplemented(sqllex)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3795
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3851
		{
			return unimplemented(sqllex)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3852
		{
			return unimplemented(sqllex)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3875
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			return unimplemented(sqllex)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			return unimplemented(sqllex)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3895
		{
			return unimplemented(sqllex)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			return unimplemented(sqllex)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3913
		{
			return unimplemented(sqllex)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			return unimplemented(sqllex)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3915
		{
			return unimplemented(sqllex)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3944
		{
			return unimplemented(sqllex)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3988
		{
			return unimplemented(sqllex)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3989
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3992
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3993
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = Window(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.str = ""
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4080
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4082
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4085
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4086
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4092
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4094
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4095
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4096
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4450
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4610
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4646
		{
			return unimplemented(sqllex)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = DNull
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.str = ""
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
